
Audio_playback_and_record.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c970  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004978  0801cb30  0801cb30  0001db30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080214a8  080214a8  000235e8  2**0
                  CONTENTS
  4 .ARM          00000008  080214a8  080214a8  000224a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080214b0  080214b0  000235e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080214b0  080214b0  000224b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080214b4  080214b4  000224b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005e8  20000000  080214b8  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000235e8  2**0
                  CONTENTS
 10 .bss          0000bfac  200005e8  200005e8  000235e8  2**2
                  ALLOC
 11 ._user_heap_stack 00001204  2000c594  2000c594  000235e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000235e8  2**0
                  CONTENTS, READONLY
 13 .debug_line   0003baec  00000000  00000000  00023618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000083  00000000  00000000  0005f104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00031527  00000000  00000000  0005f187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007d61  00000000  00000000  000906ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002780  00000000  00000000  00098410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118fee  00000000  00000000  0009ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001e4c  00000000  00000000  001b3b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000363a5  00000000  00000000  001b59ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000be  00000000  00000000  001ebd6f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b0ac  00000000  00000000  001ebe30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200005e8 	.word	0x200005e8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801cb18 	.word	0x0801cb18

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200005ec 	.word	0x200005ec
 80001fc:	0801cb18 	.word	0x0801cb18

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000590:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000594:	480d      	ldr	r0, [pc, #52]	@ (80005cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000596:	490e      	ldr	r1, [pc, #56]	@ (80005d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000598:	4a0e      	ldr	r2, [pc, #56]	@ (80005d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005ac:	4c0b      	ldr	r4, [pc, #44]	@ (80005dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ba:	f007 fae7 	bl	8007b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005be:	f01b f861 	bl	801b684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005c2:	f000 f975 	bl	80008b0 <main>
  bx  lr    
 80005c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	200005e8 	.word	0x200005e8
  ldr r2, =_sidata
 80005d4:	080214b8 	.word	0x080214b8
  ldr r2, =_sbss
 80005d8:	200005e8 	.word	0x200005e8
  ldr r4, =_ebss
 80005dc:	2000c594 	.word	0x2000c594

080005e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC_IRQHandler>
	...

080005e4 <AUDIO_StorageInit>:
  * @brief  Initializes the USB KEY Storage.
  * @param  None
  * @retval Status
  */
uint8_t AUDIO_StorageInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* Link the USB Key disk I/O driver */
  if((f_mount(&USBH_FatFs, (TCHAR const*)USBKey_Path, 0) != FR_OK))
 80005e8:	2200      	movs	r2, #0
 80005ea:	4912      	ldr	r1, [pc, #72]	@ (8000634 <AUDIO_StorageInit+0x50>)
 80005ec:	4812      	ldr	r0, [pc, #72]	@ (8000638 <AUDIO_StorageInit+0x54>)
 80005ee:	f013 ff0b 	bl	8014408 <f_mount>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00e      	beq.n	8000616 <AUDIO_StorageInit+0x32>
  {
    /* FatFs Initialization Error */
    LCD_ErrLog("Cannot Initialize FatFs! \n");
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <AUDIO_StorageInit+0x58>)
 80005fa:	4a11      	ldr	r2, [pc, #68]	@ (8000640 <AUDIO_StorageInit+0x5c>)
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	4811      	ldr	r0, [pc, #68]	@ (8000644 <AUDIO_StorageInit+0x60>)
 8000600:	f01a fe42 	bl	801b288 <iprintf>
 8000604:	4810      	ldr	r0, [pc, #64]	@ (8000648 <AUDIO_StorageInit+0x64>)
 8000606:	f01a feaf 	bl	801b368 <puts>
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <AUDIO_StorageInit+0x58>)
 800060c:	f04f 32ff 	mov.w	r2, #4294967295
 8000610:	601a      	str	r2, [r3, #0]
    return 1;
 8000612:	2301      	movs	r3, #1
 8000614:	e00b      	b.n	800062e <AUDIO_StorageInit+0x4a>
  }
  else
  {
    LCD_DbgLog ("INFO : FatFs Initialized! \n");
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <AUDIO_StorageInit+0x58>)
 8000618:	f46f 027f 	mvn.w	r2, #16711680	@ 0xff0000
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	480b      	ldr	r0, [pc, #44]	@ (800064c <AUDIO_StorageInit+0x68>)
 8000620:	f01a fea2 	bl	801b368 <puts>
 8000624:	4b05      	ldr	r3, [pc, #20]	@ (800063c <AUDIO_StorageInit+0x58>)
 8000626:	f04f 32ff 	mov.w	r2, #4294967295
 800062a:	601a      	str	r2, [r3, #0]
    return 0;
 800062c:	2300      	movs	r3, #0
  }
}
 800062e:	4618      	mov	r0, r3
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000000 	.word	0x20000000
 8000638:	200009e0 	.word	0x200009e0
 800063c:	2000c430 	.word	0x2000c430
 8000640:	ffff0000 	.word	0xffff0000
 8000644:	0801cb30 	.word	0x0801cb30
 8000648:	0801cb38 	.word	0x0801cb38
 800064c:	0801cb54 	.word	0x0801cb54

08000650 <AUDIO_StorageParse>:
  * @brief  Copies disk content in the explorer list.
  * @param  None
  * @retval Operation result
  */
FRESULT AUDIO_StorageParse(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  FRESULT res = FR_OK;
 8000656:	2300      	movs	r3, #0
 8000658:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  FILINFO fno;
  DIR dir;
  char *fn;
  
  
  res = f_opendir(&dir, USBKey_Path);
 800065c:	463b      	mov	r3, r7
 800065e:	4940      	ldr	r1, [pc, #256]	@ (8000760 <AUDIO_StorageParse+0x110>)
 8000660:	4618      	mov	r0, r3
 8000662:	f014 fe36 	bl	80152d2 <f_opendir>
 8000666:	4603      	mov	r3, r0
 8000668:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  FileList.ptr = 0;
 800066c:	4b3d      	ldr	r3, [pc, #244]	@ (8000764 <AUDIO_StorageParse+0x114>)
 800066e:	2200      	movs	r2, #0
 8000670:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
  
  if(res == FR_OK)
 8000674:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000678:	2b00      	cmp	r3, #0
 800067a:	d161      	bne.n	8000740 <AUDIO_StorageParse+0xf0>
  {
    while(USBH_MSC_IsReady(&hUSBHost))
 800067c:	e05a      	b.n	8000734 <AUDIO_StorageParse+0xe4>
    {
      res = f_readdir(&dir, &fno);
 800067e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000682:	463b      	mov	r3, r7
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f014 febc 	bl	8015404 <f_readdir>
 800068c:	4603      	mov	r3, r0
 800068e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      if(res != FR_OK || fno.fname[0] == 0)
 8000692:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000696:	2b00      	cmp	r3, #0
 8000698:	d152      	bne.n	8000740 <AUDIO_StorageParse+0xf0>
 800069a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d04e      	beq.n	8000740 <AUDIO_StorageParse+0xf0>
      {
        break;
      }
      if(fno.fname[0] == '.')
 80006a2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80006a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80006a8:	d043      	beq.n	8000732 <AUDIO_StorageParse+0xe2>
      {
        continue;
      }
 
      fn = fno.fname;
 80006aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006ae:	3309      	adds	r3, #9
 80006b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      
      if(FileList.ptr < FILEMGR_LIST_DEPDTH)
 80006b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000764 <AUDIO_StorageParse+0x114>)
 80006b4:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 80006b8:	2b17      	cmp	r3, #23
 80006ba:	d83b      	bhi.n	8000734 <AUDIO_StorageParse+0xe4>
      {
        if((fno.fattrib & AM_DIR) == 0)
 80006bc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80006c0:	f003 0310 	and.w	r3, r3, #16
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d135      	bne.n	8000734 <AUDIO_StorageParse+0xe4>
        {
          if((strstr(fn, "wav")) || (strstr(fn, "WAV")))
 80006c8:	4927      	ldr	r1, [pc, #156]	@ (8000768 <AUDIO_StorageParse+0x118>)
 80006ca:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80006cc:	f01a ff67 	bl	801b59e <strstr>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d106      	bne.n	80006e4 <AUDIO_StorageParse+0x94>
 80006d6:	4925      	ldr	r1, [pc, #148]	@ (800076c <AUDIO_StorageParse+0x11c>)
 80006d8:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80006da:	f01a ff60 	bl	801b59e <strstr>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d027      	beq.n	8000734 <AUDIO_StorageParse+0xe4>
          {
            strncpy((char *)FileList.file[FileList.ptr].name, (char *)fn, FILEMGR_FILE_NAME_SIZE);
 80006e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000764 <AUDIO_StorageParse+0x114>)
 80006e6:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 80006ea:	461a      	mov	r2, r3
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	4413      	add	r3, r2
 80006f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000764 <AUDIO_StorageParse+0x114>)
 80006f8:	4413      	add	r3, r2
 80006fa:	3301      	adds	r3, #1
 80006fc:	2228      	movs	r2, #40	@ 0x28
 80006fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000700:	4618      	mov	r0, r3
 8000702:	f01a ff39 	bl	801b578 <strncpy>
            FileList.file[FileList.ptr].type = FILETYPE_FILE;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <AUDIO_StorageParse+0x114>)
 8000708:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 800070c:	461a      	mov	r2, r3
 800070e:	4915      	ldr	r1, [pc, #84]	@ (8000764 <AUDIO_StorageParse+0x114>)
 8000710:	4613      	mov	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4413      	add	r3, r2
 800071a:	440b      	add	r3, r1
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
            FileList.ptr++;
 8000720:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <AUDIO_StorageParse+0x114>)
 8000722:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000726:	3301      	adds	r3, #1
 8000728:	b29a      	uxth	r2, r3
 800072a:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <AUDIO_StorageParse+0x114>)
 800072c:	f8a3 23d8 	strh.w	r2, [r3, #984]	@ 0x3d8
 8000730:	e000      	b.n	8000734 <AUDIO_StorageParse+0xe4>
        continue;
 8000732:	bf00      	nop
    while(USBH_MSC_IsReady(&hUSBHost))
 8000734:	480e      	ldr	r0, [pc, #56]	@ (8000770 <AUDIO_StorageParse+0x120>)
 8000736:	f015 fdbb 	bl	80162b0 <USBH_MSC_IsReady>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d19e      	bne.n	800067e <AUDIO_StorageParse+0x2e>
          }
        }
      }   
    }
  }
  NumObs = FileList.ptr;
 8000740:	4b08      	ldr	r3, [pc, #32]	@ (8000764 <AUDIO_StorageParse+0x114>)
 8000742:	f8b3 23d8 	ldrh.w	r2, [r3, #984]	@ 0x3d8
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <AUDIO_StorageParse+0x124>)
 8000748:	801a      	strh	r2, [r3, #0]
  f_closedir(&dir);
 800074a:	463b      	mov	r3, r7
 800074c:	4618      	mov	r0, r3
 800074e:	f014 fe33 	bl	80153b8 <f_closedir>
  return res;
 8000752:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8000756:	4618      	mov	r0, r3
 8000758:	3750      	adds	r7, #80	@ 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000
 8000764:	20000604 	.word	0x20000604
 8000768:	0801cb70 	.word	0x0801cb70
 800076c:	0801cb74 	.word	0x0801cb74
 8000770:	20000c10 	.word	0x20000c10
 8000774:	200009de 	.word	0x200009de

08000778 <AUDIO_ShowWavFiles>:
  * @brief  Shows audio file (*.wav) on the root
  * @param  None
  * @retval None
  */
uint8_t AUDIO_ShowWavFiles(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	71fb      	strb	r3, [r7, #7]
  uint8_t line_idx = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	71bb      	strb	r3, [r7, #6]
  if(AUDIO_StorageInit() == FR_OK)
 8000786:	f7ff ff2d 	bl	80005e4 <AUDIO_StorageInit>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d172      	bne.n	8000876 <AUDIO_ShowWavFiles+0xfe>
  {
    if(AUDIO_StorageParse() ==  FR_OK)
 8000790:	f7ff ff5e 	bl	8000650 <AUDIO_StorageParse>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d16b      	bne.n	8000872 <AUDIO_ShowWavFiles+0xfa>
    {
      if(FileList.ptr > 0)
 800079a:	4b39      	ldr	r3, [pc, #228]	@ (8000880 <AUDIO_ShowWavFiles+0x108>)
 800079c:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d064      	beq.n	800086e <AUDIO_ShowWavFiles+0xf6>
      {
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f005 fc7a 	bl	80060a0 <BSP_LCD_SetTextColor>
        LCD_UsrLog("audio file(s) [ROOT]:\n\n");
 80007ac:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <AUDIO_ShowWavFiles+0x10c>)
 80007ae:	f04f 32ff 	mov.w	r2, #4294967295
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	4834      	ldr	r0, [pc, #208]	@ (8000888 <AUDIO_ShowWavFiles+0x110>)
 80007b6:	f01a fdd7 	bl	801b368 <puts>
        
        for(i = 0; i < FileList.ptr; i++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	e042      	b.n	8000846 <AUDIO_ShowWavFiles+0xce>
        {
          line_idx++;
 80007c0:	79bb      	ldrb	r3, [r7, #6]
 80007c2:	3301      	adds	r3, #1
 80007c4:	71bb      	strb	r3, [r7, #6]
          if(line_idx > 9)
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	2b09      	cmp	r3, #9
 80007ca:	d90f      	bls.n	80007ec <AUDIO_ShowWavFiles+0x74>
          {
            line_idx = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	71bb      	strb	r3, [r7, #6]
            LCD_UsrLog("> Press [Key] To Continue.\n");
 80007d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000884 <AUDIO_ShowWavFiles+0x10c>)
 80007d2:	f04f 32ff 	mov.w	r2, #4294967295
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	482c      	ldr	r0, [pc, #176]	@ (800088c <AUDIO_ShowWavFiles+0x114>)
 80007da:	f01a fdc5 	bl	801b368 <puts>
            
            /* USER Button in polling */
            while(BSP_PB_GetState(BUTTON_USER) != RESET)
 80007de:	bf00      	nop
 80007e0:	2000      	movs	r0, #0
 80007e2:	f004 f875 	bl	80048d0 <BSP_PB_GetState>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f9      	bne.n	80007e0 <AUDIO_ShowWavFiles+0x68>
            {
              /* Wait for User Input */
            }
          } 
          LCD_DbgLog("   |__");
 80007ec:	4b25      	ldr	r3, [pc, #148]	@ (8000884 <AUDIO_ShowWavFiles+0x10c>)
 80007ee:	f46f 027f 	mvn.w	r2, #16711680	@ 0xff0000
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	4826      	ldr	r0, [pc, #152]	@ (8000890 <AUDIO_ShowWavFiles+0x118>)
 80007f6:	f01a fd47 	bl	801b288 <iprintf>
 80007fa:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <AUDIO_ShowWavFiles+0x10c>)
 80007fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000800:	601a      	str	r2, [r3, #0]
          LCD_DbgLog((char *)FileList.file[i].name);
 8000802:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <AUDIO_ShowWavFiles+0x10c>)
 8000804:	f46f 027f 	mvn.w	r2, #16711680	@ 0xff0000
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	4613      	mov	r3, r2
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	4413      	add	r3, r2
 8000816:	4a1a      	ldr	r2, [pc, #104]	@ (8000880 <AUDIO_ShowWavFiles+0x108>)
 8000818:	4413      	add	r3, r2
 800081a:	3301      	adds	r3, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f01a fd33 	bl	801b288 <iprintf>
 8000822:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <AUDIO_ShowWavFiles+0x10c>)
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	601a      	str	r2, [r3, #0]
          LCD_DbgLog("\n");
 800082a:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <AUDIO_ShowWavFiles+0x10c>)
 800082c:	f46f 027f 	mvn.w	r2, #16711680	@ 0xff0000
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	200a      	movs	r0, #10
 8000834:	f01a fd3a 	bl	801b2ac <putchar>
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <AUDIO_ShowWavFiles+0x10c>)
 800083a:	f04f 32ff 	mov.w	r2, #4294967295
 800083e:	601a      	str	r2, [r3, #0]
        for(i = 0; i < FileList.ptr; i++)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	3301      	adds	r3, #1
 8000844:	71fb      	strb	r3, [r7, #7]
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <AUDIO_ShowWavFiles+0x108>)
 800084c:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
 8000850:	429a      	cmp	r2, r3
 8000852:	d3b5      	bcc.n	80007c0 <AUDIO_ShowWavFiles+0x48>
        }
        BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f005 fc22 	bl	80060a0 <BSP_LCD_SetTextColor>
        LCD_UsrLog("\nEnd of files list.\n");
 800085c:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <AUDIO_ShowWavFiles+0x10c>)
 800085e:	f04f 32ff 	mov.w	r2, #4294967295
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	480b      	ldr	r0, [pc, #44]	@ (8000894 <AUDIO_ShowWavFiles+0x11c>)
 8000866:	f01a fd7f 	bl	801b368 <puts>
        return 0;
 800086a:	2300      	movs	r3, #0
 800086c:	e004      	b.n	8000878 <AUDIO_ShowWavFiles+0x100>
      }
      return 1;
 800086e:	2301      	movs	r3, #1
 8000870:	e002      	b.n	8000878 <AUDIO_ShowWavFiles+0x100>
    }
    return 2;
 8000872:	2302      	movs	r3, #2
 8000874:	e000      	b.n	8000878 <AUDIO_ShowWavFiles+0x100>
  }
  else
  {
    return 3;
 8000876:	2303      	movs	r3, #3
  }
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000604 	.word	0x20000604
 8000884:	2000c430 	.word	0x2000c430
 8000888:	0801cb78 	.word	0x0801cb78
 800088c:	0801cb90 	.word	0x0801cb90
 8000890:	0801cbac 	.word	0x0801cbac
 8000894:	0801cbb4 	.word	0x0801cbb4

08000898 <AUDIO_GetWavObjectNumber>:
  * @brief  Gets Wav Object Number.
  * @param  None
  * @retval None
  */
uint16_t AUDIO_GetWavObjectNumber(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return NumObs;
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <AUDIO_GetWavObjectNumber+0x14>)
 800089e:	881b      	ldrh	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	200009de 	.word	0x200009de

080008b0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */   
  HAL_Init();
 80008b4:	f007 f9a0 	bl	8007bf8 <HAL_Init>
  
  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 80008b8:	f000 f900 	bl	8000abc <SystemClock_Config>

  /* Init Audio Application */
  AUDIO_InitApplication();
 80008bc:	f000 f830 	bl	8000920 <AUDIO_InitApplication>
  
  /* Init Host Library */
  USBH_Init(&hUSBHost, USBH_UserProcess, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	490a      	ldr	r1, [pc, #40]	@ (80008ec <main+0x3c>)
 80008c4:	480a      	ldr	r0, [pc, #40]	@ (80008f0 <main+0x40>)
 80008c6:	f016 fb8b 	bl	8016fe0 <USBH_Init>

  /* Add Supported Class */
  USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 80008ca:	490a      	ldr	r1, [pc, #40]	@ (80008f4 <main+0x44>)
 80008cc:	4808      	ldr	r0, [pc, #32]	@ (80008f0 <main+0x40>)
 80008ce:	f016 fc43 	bl	8017158 <USBH_RegisterClass>
  
  /* Start Host Process */
  USBH_Start(&hUSBHost);
 80008d2:	4807      	ldr	r0, [pc, #28]	@ (80008f0 <main+0x40>)
 80008d4:	f016 fd30 	bl	8017338 <USBH_Start>
  
  /* Run Application (Blocking mode) */
  while (1)
  {
    /* USB Host Background task */
    USBH_Process(&hUSBHost);
 80008d8:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <main+0x40>)
 80008da:	f016 fd3d 	bl	8017358 <USBH_Process>
    
    /* AUDIO Menu Process */
    AUDIO_MenuProcess();
 80008de:	f000 f94f 	bl	8000b80 <AUDIO_MenuProcess>

    BSP_LED_Toggle(LED1);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f003 ff80 	bl	80047e8 <BSP_LED_Toggle>
    USBH_Process(&hUSBHost);
 80008e8:	bf00      	nop
 80008ea:	e7f5      	b.n	80008d8 <main+0x28>
 80008ec:	080009e5 	.word	0x080009e5
 80008f0:	20000c10 	.word	0x20000c10
 80008f4:	2000016c 	.word	0x2000016c

080008f8 <Toggle_Leds>:
  * @brief  Toggles LEDs to show user input state.
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  static uint32_t ticks = 0;
  
  if(ticks++ > 400)
 80008fc:	4b07      	ldr	r3, [pc, #28]	@ (800091c <Toggle_Leds+0x24>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	1c5a      	adds	r2, r3, #1
 8000902:	4906      	ldr	r1, [pc, #24]	@ (800091c <Toggle_Leds+0x24>)
 8000904:	600a      	str	r2, [r1, #0]
 8000906:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800090a:	d905      	bls.n	8000918 <Toggle_Leds+0x20>
  {
    BSP_LED_Toggle(LED1);
 800090c:	2000      	movs	r0, #0
 800090e:	f003 ff6b 	bl	80047e8 <BSP_LED_Toggle>
    ticks = 0;
 8000912:	4b02      	ldr	r3, [pc, #8]	@ (800091c <Toggle_Leds+0x24>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
  }  
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20001100 	.word	0x20001100

08000920 <AUDIO_InitApplication>:
  * @brief  Audio Application Init.
  * @param  None
  * @retval None
  */
static void AUDIO_InitApplication(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  uint8_t  lcd_status = LCD_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	71fb      	strb	r3, [r7, #7]
  uint32_t ts_status  = TS_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]

  /* Configure User Button */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);              
 800092e:	2101      	movs	r1, #1
 8000930:	2000      	movs	r0, #0
 8000932:	f003 ff77 	bl	8004824 <BSP_PB_Init>
  
  /* Configure LED1 */
  BSP_LED_Init(LED1);
 8000936:	2000      	movs	r0, #0
 8000938:	f003 fed6 	bl	80046e8 <BSP_LED_Init>
  
  /* Initialize the SDRAM */
  if (BSP_SDRAM_Init() != SDRAM_OK)
 800093c:	f006 fcb2 	bl	80072a4 <BSP_SDRAM_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <AUDIO_InitApplication+0x2a>
  {
    /* User can add here some code to deal with this error */
    while (1)
 8000946:	bf00      	nop
 8000948:	e7fd      	b.n	8000946 <AUDIO_InitApplication+0x26>
  /* Set Portrait orientation if needed, by default orientation is set to
     Landscape */
  
  /* Initialize DSI LCD */
  //  BSP_LCD_InitEx(LCD_ORIENTATION_PORTRAIT); /* uncomment if Portrait orientation is needed */
  BSP_LCD_Init(); /* Uncomment if default config (landscape orientation) is needed */
 800094a:	f005 f94d 	bl	8005be8 <BSP_LCD_Init>
  while(lcd_status != LCD_OK);
 800094e:	bf00      	nop
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1fc      	bne.n	8000950 <AUDIO_InitApplication+0x30>

  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);   
 8000956:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800095a:	2000      	movs	r0, #0
 800095c:	f005 fb30 	bl	8005fc0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8000960:	2000      	movs	r0, #0
 8000962:	f005 fb8d 	bl	8006080 <BSP_LCD_SelectLayer>

  /*##-2- Touch screen initialization ########################################*/
  BSP_TS_ResetTouchData(&TS_State);
 8000966:	4819      	ldr	r0, [pc, #100]	@ (80009cc <AUDIO_InitApplication+0xac>)
 8000968:	f007 f8d0 	bl	8007b0c <BSP_TS_ResetTouchData>

  /* If calibration is not yet done, proceed with calibration */
  if (TouchScreen_IsCalibrationDone() == 0)
 800096c:	f000 fdd2 	bl	8001514 <TouchScreen_IsCalibrationDone>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d111      	bne.n	800099a <AUDIO_InitApplication+0x7a>
  {
    ts_status = Touchscreen_Calibration();
 8000976:	f000 fb99 	bl	80010ac <Touchscreen_Calibration>
 800097a:	4603      	mov	r3, r0
 800097c:	603b      	str	r3, [r7, #0]
    if(ts_status == TS_OK)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10a      	bne.n	800099a <AUDIO_InitApplication+0x7a>
    {
      BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"Touchscreen calibration success.", CENTER_MODE);
 8000984:	f005 fb10 	bl	8005fa8 <BSP_LCD_GetYSize>
 8000988:	4603      	mov	r3, r0
 800098a:	b29b      	uxth	r3, r3
 800098c:	3b41      	subs	r3, #65	@ 0x41
 800098e:	b299      	uxth	r1, r3
 8000990:	2301      	movs	r3, #1
 8000992:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <AUDIO_InitApplication+0xb0>)
 8000994:	2000      	movs	r0, #0
 8000996:	f005 fcb5 	bl	8006304 <BSP_LCD_DisplayStringAt>
  } /* of if (TouchScreen_IsCalibrationDone() == 0) */

  /*##-3- LCD Log module initialization ########################################*/
  
  /* Init the LCD Log module */
  LCD_LOG_Init();
 800099a:	f018 fa07 	bl	8018dac <LCD_LOG_Init>
  
  LCD_LOG_SetHeader((uint8_t *)"Audio Playback and Record Application");
 800099e:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <AUDIO_InitApplication+0xb4>)
 80009a0:	f018 fa4e 	bl	8018e40 <LCD_LOG_SetHeader>
  
  LCD_UsrLog("USB Host library started.\n"); 
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <AUDIO_InitApplication+0xb8>)
 80009a6:	f04f 32ff 	mov.w	r2, #4294967295
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <AUDIO_InitApplication+0xbc>)
 80009ae:	f01a fcdb 	bl	801b368 <puts>
  
  /* Start Audio interface */
  USBH_UsrLog("Starting Audio Demo");
 80009b2:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <AUDIO_InitApplication+0xc0>)
 80009b4:	f01a fc68 	bl	801b288 <iprintf>
 80009b8:	200a      	movs	r0, #10
 80009ba:	f01a fc77 	bl	801b2ac <putchar>

  /*##-4- Audio module initialization ########################################*/
  
  /* Init Audio interface */
  AUDIO_PLAYER_Init();
 80009be:	f001 f9c1 	bl	8001d44 <AUDIO_PLAYER_Init>
  
  /* Start Audio interface */
  //AUDIO_MenuInit();

}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200010ec 	.word	0x200010ec
 80009d0:	0801cbc8 	.word	0x0801cbc8
 80009d4:	0801cbec 	.word	0x0801cbec
 80009d8:	2000c430 	.word	0x2000c430
 80009dc:	0801cc14 	.word	0x0801cc14
 80009e0:	0801cc30 	.word	0x0801cc30

080009e4 <USBH_UserProcess>:
  * @param  phost: Host Handle
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
  switch(id)
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	2b04      	cmp	r3, #4
 80009f6:	d847      	bhi.n	8000a88 <USBH_UserProcess+0xa4>
 80009f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000a00 <USBH_UserProcess+0x1c>)
 80009fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fe:	bf00      	nop
 8000a00:	08000a89 	.word	0x08000a89
 8000a04:	08000a47 	.word	0x08000a47
 8000a08:	08000a89 	.word	0x08000a89
 8000a0c:	08000a4f 	.word	0x08000a4f
 8000a10:	08000a15 	.word	0x08000a15
  { 
  case HOST_USER_SELECT_CONFIGURATION:
    break;
    
  case HOST_USER_DISCONNECTION:
    if(f_mount(NULL, "", 0) != FR_OK)
 8000a14:	2200      	movs	r2, #0
 8000a16:	491f      	ldr	r1, [pc, #124]	@ (8000a94 <USBH_UserProcess+0xb0>)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f013 fcf5 	bl	8014408 <f_mount>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00c      	beq.n	8000a3e <USBH_UserProcess+0x5a>
    {
      LCD_ErrLog("ERROR : Cannot DeInitialize FatFs! \n");
 8000a24:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <USBH_UserProcess+0xb4>)
 8000a26:	4a1d      	ldr	r2, [pc, #116]	@ (8000a9c <USBH_UserProcess+0xb8>)
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	481d      	ldr	r0, [pc, #116]	@ (8000aa0 <USBH_UserProcess+0xbc>)
 8000a2c:	f01a fc2c 	bl	801b288 <iprintf>
 8000a30:	481c      	ldr	r0, [pc, #112]	@ (8000aa4 <USBH_UserProcess+0xc0>)
 8000a32:	f01a fc99 	bl	801b368 <puts>
 8000a36:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <USBH_UserProcess+0xb4>)
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	601a      	str	r2, [r3, #0]
    }
    AppliState = APPLICATION_DISCONNECT;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa8 <USBH_UserProcess+0xc4>)
 8000a40:	2203      	movs	r2, #3
 8000a42:	701a      	strb	r2, [r3, #0]
    break;
 8000a44:	e021      	b.n	8000a8a <USBH_UserProcess+0xa6>

  case HOST_USER_CLASS_ACTIVE:
    AppliState = APPLICATION_READY;
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <USBH_UserProcess+0xc4>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	701a      	strb	r2, [r3, #0]
    break;
 8000a4c:	e01d      	b.n	8000a8a <USBH_UserProcess+0xa6>
 
  case HOST_USER_CONNECTION:
    /* Link the USB Mass Storage disk I/O driver */
    if(FATFS_LinkDriver(&USBH_Driver, (char*)"0:/") != 0)
 8000a4e:	4917      	ldr	r1, [pc, #92]	@ (8000aac <USBH_UserProcess+0xc8>)
 8000a50:	4817      	ldr	r0, [pc, #92]	@ (8000ab0 <USBH_UserProcess+0xcc>)
 8000a52:	f014 fd61 	bl	8015518 <FATFS_LinkDriver>
    {
    }
    if(f_mount(&USBH_FatFs, "", 0) != FR_OK)
 8000a56:	2200      	movs	r2, #0
 8000a58:	490e      	ldr	r1, [pc, #56]	@ (8000a94 <USBH_UserProcess+0xb0>)
 8000a5a:	4816      	ldr	r0, [pc, #88]	@ (8000ab4 <USBH_UserProcess+0xd0>)
 8000a5c:	f013 fcd4 	bl	8014408 <f_mount>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00c      	beq.n	8000a80 <USBH_UserProcess+0x9c>
    {  
      LCD_ErrLog("ERROR : Cannot Initialize FatFs! \n");
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <USBH_UserProcess+0xb4>)
 8000a68:	4a0c      	ldr	r2, [pc, #48]	@ (8000a9c <USBH_UserProcess+0xb8>)
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <USBH_UserProcess+0xbc>)
 8000a6e:	f01a fc0b 	bl	801b288 <iprintf>
 8000a72:	4811      	ldr	r0, [pc, #68]	@ (8000ab8 <USBH_UserProcess+0xd4>)
 8000a74:	f01a fc78 	bl	801b368 <puts>
 8000a78:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <USBH_UserProcess+0xb4>)
 8000a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7e:	601a      	str	r2, [r3, #0]
    }
    AppliState = APPLICATION_START;
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <USBH_UserProcess+0xc4>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
    break;
 8000a86:	e000      	b.n	8000a8a <USBH_UserProcess+0xa6>
   
  default:
    break; 
 8000a88:	bf00      	nop
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	0801cc44 	.word	0x0801cc44
 8000a98:	2000c430 	.word	0x2000c430
 8000a9c:	ffff0000 	.word	0xffff0000
 8000aa0:	0801cc48 	.word	0x0801cc48
 8000aa4:	0801cc50 	.word	0x0801cc50
 8000aa8:	200010e8 	.word	0x200010e8
 8000aac:	0801cc74 	.word	0x0801cc74
 8000ab0:	0801d778 	.word	0x0801d778
 8000ab4:	200009e0 	.word	0x200009e0
 8000ab8:	0801cc78 	.word	0x0801cc78

08000abc <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0a4      	sub	sp, #144	@ 0x90
 8000ac0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b78 <SystemClock_Config+0xbc>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a2b      	ldr	r2, [pc, #172]	@ (8000b78 <SystemClock_Config+0xbc>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <SystemClock_Config+0xbc>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b26      	ldr	r3, [pc, #152]	@ (8000b7c <SystemClock_Config+0xc0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a25      	ldr	r2, [pc, #148]	@ (8000b7c <SystemClock_Config+0xc0>)
 8000ae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <SystemClock_Config+0xc0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000afa:	2301      	movs	r3, #1
 8000afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000afe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b04:	2302      	movs	r3, #2
 8000b06:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b08:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b0c:	667b      	str	r3, [r7, #100]	@ 0x64
#if defined(USE_STM32469I_DISCO_REVA)
  RCC_OscInitStruct.PLL.PLLM = 25;
#else
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b0e:	2308      	movs	r3, #8
 8000b10:	66bb      	str	r3, [r7, #104]	@ 0x68
#endif /* USE_STM32469I_DISCO_REVA */
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b12:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000b20:	2306      	movs	r3, #6
 8000b22:	67bb      	str	r3, [r7, #120]	@ 0x78
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000b24:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f00e faf3 	bl	800f114 <HAL_RCC_OscConfig>
  
  /* Activate the OverDrive to reach the 180 MHz Frequency */  
  HAL_PWREx_EnableOverDrive();
 8000b2e:	f00d fd75 	bl	800e61c <HAL_PWREx_EnableOverDrive>
    /*Select Main PLL output as USB clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CK48;
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CK48CLKSOURCE_PLLQ;
 8000b36:	2300      	movs	r3, #0
 8000b38:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f00d ffc8 	bl	800ead4 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000b44:	230f      	movs	r3, #15
 8000b46:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8000b54:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000b5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000b64:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b68:	2105      	movs	r1, #5
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00d fda6 	bl	800e6bc <HAL_RCC_ClockConfig>
}
 8000b70:	bf00      	nop
 8000b72:	3790      	adds	r7, #144	@ 0x90
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40007000 	.word	0x40007000

08000b80 <AUDIO_MenuProcess>:
  * @brief  Manages AUDIO Menu Process.
  * @param  None
  * @retval None
  */
void AUDIO_MenuProcess(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
  AUDIO_ErrorTypeDef  status;
  TS_StateTypeDef  TS_State;
  Point PlaybackLogoPoints[] = {{TOUCH_PLAYBACK_XMIN, TOUCH_PLAYBACK_YMIN},
 8000b86:	4aa4      	ldr	r2, [pc, #656]	@ (8000e18 <AUDIO_MenuProcess+0x298>)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                {TOUCH_PLAYBACK_XMAX, (TOUCH_PLAYBACK_YMIN+TOUCH_PLAYBACK_YMAX)/2},
                                {TOUCH_PLAYBACK_XMIN, TOUCH_PLAYBACK_YMAX}};
  
  if(AppliState == APPLICATION_READY)
 8000b90:	4ba2      	ldr	r3, [pc, #648]	@ (8000e1c <AUDIO_MenuProcess+0x29c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	f040 812d 	bne.w	8000df4 <AUDIO_MenuProcess+0x274>
  { 
    switch(AudioDemo.state)
 8000b9a:	4ba1      	ldr	r3, [pc, #644]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	f200 8120 	bhi.w	8000de6 <AUDIO_MenuProcess+0x266>
 8000ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bac <AUDIO_MenuProcess+0x2c>)
 8000ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bac:	08000bc1 	.word	0x08000bc1
 8000bb0:	08000c35 	.word	0x08000c35
 8000bb4:	08000ca9 	.word	0x08000ca9
 8000bb8:	08000cf3 	.word	0x08000cf3
 8000bbc:	08000d7d 	.word	0x08000d7d
    {
    case AUDIO_DEMO_IDLE:

      AudioDemo.state = AUDIO_DEMO_WAIT;
 8000bc0:	4b97      	ldr	r3, [pc, #604]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
      
      BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
 8000bc6:	4897      	ldr	r0, [pc, #604]	@ (8000e24 <AUDIO_MenuProcess+0x2a4>)
 8000bc8:	f005 fa9c 	bl	8006104 <BSP_LCD_SetFont>
      BSP_LCD_ClearStringLine(14);    /* Clear touch screen buttons dedicated zone */
 8000bcc:	200e      	movs	r0, #14
 8000bce:	f005 faf1 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_ClearStringLine(15);
 8000bd2:	200f      	movs	r0, #15
 8000bd4:	f005 faee 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_ClearStringLine(16);
 8000bd8:	2010      	movs	r0, #16
 8000bda:	f005 faeb 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_ClearStringLine(17);
 8000bde:	2011      	movs	r0, #17
 8000be0:	f005 fae8 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_ClearStringLine(18);
 8000be4:	2012      	movs	r0, #18
 8000be6:	f005 fae5 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_ClearStringLine(19);
 8000bea:	2013      	movs	r0, #19
 8000bec:	f005 fae2 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_ClearStringLine(20);     
 8000bf0:	2014      	movs	r0, #20
 8000bf2:	f005 fadf 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8000bf6:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8000bfa:	f005 fa51 	bl	80060a0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillPolygon(PlaybackLogoPoints, 3);                 /* Playback sign */
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2103      	movs	r1, #3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f005 ffbe 	bl	8006b84 <BSP_LCD_FillPolygon>
      BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2, /* Record circle */
 8000c08:	221e      	movs	r2, #30
 8000c0a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000c0e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000c12:	f005 ff17 	bl	8006a44 <BSP_LCD_FillCircle>
                         (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                         (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000c16:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8000c1a:	f005 fa41 	bl	80060a0 <BSP_LCD_SetTextColor>
      BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
 8000c1e:	4881      	ldr	r0, [pc, #516]	@ (8000e24 <AUDIO_MenuProcess+0x2a4>)
 8000c20:	f005 fa70 	bl	8006104 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"        Use touch screen to enter playback or record menu");
 8000c24:	4980      	ldr	r1, [pc, #512]	@ (8000e28 <AUDIO_MenuProcess+0x2a8>)
 8000c26:	200e      	movs	r0, #14
 8000c28:	f005 fc34 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
 8000c2c:	487f      	ldr	r0, [pc, #508]	@ (8000e2c <AUDIO_MenuProcess+0x2ac>)
 8000c2e:	f005 fa69 	bl	8006104 <BSP_LCD_SetFont>
      break;    
 8000c32:	e0df      	b.n	8000df4 <AUDIO_MenuProcess+0x274>
      
    case AUDIO_DEMO_WAIT:

      BSP_TS_GetState(&TS_State);
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f006 fd77 	bl	800772c <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
 8000c3e:	7c3b      	ldrb	r3, [r7, #16]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	f040 80d2 	bne.w	8000dea <AUDIO_MenuProcess+0x26a>
      {
        if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN-20) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX+20) &&
 8000c46:	8a7b      	ldrh	r3, [r7, #18]
 8000c48:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8000c4c:	d90e      	bls.n	8000c6c <AUDIO_MenuProcess+0xec>
 8000c4e:	8a7b      	ldrh	r3, [r7, #18]
 8000c50:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8000c54:	d20a      	bcs.n	8000c6c <AUDIO_MenuProcess+0xec>
            (TS_State.touchY[0] > TOUCH_RECORD_YMIN-20) && (TS_State.touchY[0] < TOUCH_RECORD_YMAX+20))
 8000c56:	8afb      	ldrh	r3, [r7, #22]
        if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN-20) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX+20) &&
 8000c58:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c5a:	d907      	bls.n	8000c6c <AUDIO_MenuProcess+0xec>
            (TS_State.touchY[0] > TOUCH_RECORD_YMIN-20) && (TS_State.touchY[0] < TOUCH_RECORD_YMAX+20))
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8000c62:	d203      	bcs.n	8000c6c <AUDIO_MenuProcess+0xec>
        {
          AudioDemo.state = AUDIO_DEMO_IN;
 8000c64:	4b6e      	ldr	r3, [pc, #440]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e014      	b.n	8000c96 <AUDIO_MenuProcess+0x116>
        }
        else if ((TS_State.touchX[0] > TOUCH_PLAYBACK_XMIN-20) && (TS_State.touchX[0] < TOUCH_PLAYBACK_XMAX+20) &&
 8000c6c:	8a7b      	ldrh	r3, [r7, #18]
 8000c6e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000c70:	d90e      	bls.n	8000c90 <AUDIO_MenuProcess+0x110>
 8000c72:	8a7b      	ldrh	r3, [r7, #18]
 8000c74:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000c78:	d20a      	bcs.n	8000c90 <AUDIO_MenuProcess+0x110>
                 (TS_State.touchY[0] > TOUCH_PLAYBACK_YMIN-20) && (TS_State.touchY[0] < TOUCH_PLAYBACK_YMAX+20))
 8000c7a:	8afb      	ldrh	r3, [r7, #22]
        else if ((TS_State.touchX[0] > TOUCH_PLAYBACK_XMIN-20) && (TS_State.touchX[0] < TOUCH_PLAYBACK_XMAX+20) &&
 8000c7c:	2bf0      	cmp	r3, #240	@ 0xf0
 8000c7e:	d907      	bls.n	8000c90 <AUDIO_MenuProcess+0x110>
                 (TS_State.touchY[0] > TOUCH_PLAYBACK_YMIN-20) && (TS_State.touchY[0] < TOUCH_PLAYBACK_YMAX+20))
 8000c80:	8afb      	ldrh	r3, [r7, #22]
 8000c82:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8000c86:	d203      	bcs.n	8000c90 <AUDIO_MenuProcess+0x110>
        {
          AudioDemo.state = AUDIO_DEMO_PLAYBACK;
 8000c88:	4b65      	ldr	r3, [pc, #404]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	e002      	b.n	8000c96 <AUDIO_MenuProcess+0x116>
        }
        else
        {
          AudioDemo.state = AUDIO_DEMO_EXPLORE;
 8000c90:	4b63      	ldr	r3, [pc, #396]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000c92:	2202      	movs	r2, #2
 8000c94:	701a      	strb	r2, [r3, #0]
        }

        /* Wait for touch released */
        do
        {
          BSP_TS_GetState(&TS_State);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f006 fd46 	bl	800772c <BSP_TS_GetState>
        }while(TS_State.touchDetected > 0);
 8000ca0:	7c3b      	ldrb	r3, [r7, #16]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f7      	bne.n	8000c96 <AUDIO_MenuProcess+0x116>
      }
      break;
 8000ca6:	e0a0      	b.n	8000dea <AUDIO_MenuProcess+0x26a>
      
    case AUDIO_DEMO_EXPLORE: 
      if(AppliState == APPLICATION_READY)
 8000ca8:	4b5c      	ldr	r3, [pc, #368]	@ (8000e1c <AUDIO_MenuProcess+0x29c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d11c      	bne.n	8000cea <AUDIO_MenuProcess+0x16a>
      {
        if(AUDIO_ShowWavFiles() > 0)
 8000cb0:	f7ff fd62 	bl	8000778 <AUDIO_ShowWavFiles>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d013      	beq.n	8000ce2 <AUDIO_MenuProcess+0x162>
        {
          LCD_ErrLog("There is no WAV file on the USB Key.\n");         
 8000cba:	4b5d      	ldr	r3, [pc, #372]	@ (8000e30 <AUDIO_MenuProcess+0x2b0>)
 8000cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8000e34 <AUDIO_MenuProcess+0x2b4>)
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	485d      	ldr	r0, [pc, #372]	@ (8000e38 <AUDIO_MenuProcess+0x2b8>)
 8000cc2:	f01a fae1 	bl	801b288 <iprintf>
 8000cc6:	485d      	ldr	r0, [pc, #372]	@ (8000e3c <AUDIO_MenuProcess+0x2bc>)
 8000cc8:	f01a fb4e 	bl	801b368 <puts>
 8000ccc:	4b58      	ldr	r3, [pc, #352]	@ (8000e30 <AUDIO_MenuProcess+0x2b0>)
 8000cce:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd2:	601a      	str	r2, [r3, #0]
          AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU); 
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f000 f8b5 	bl	8000e44 <AUDIO_ChangeSelectMode>
          AudioDemo.state = AUDIO_DEMO_IDLE;
 8000cda:	4b51      	ldr	r3, [pc, #324]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        AudioDemo.state = AUDIO_DEMO_WAIT;
      }
      break;
 8000ce0:	e088      	b.n	8000df4 <AUDIO_MenuProcess+0x274>
          AudioDemo.state = AUDIO_DEMO_WAIT;
 8000ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
      break;
 8000ce8:	e084      	b.n	8000df4 <AUDIO_MenuProcess+0x274>
        AudioDemo.state = AUDIO_DEMO_WAIT;
 8000cea:	4b4d      	ldr	r3, [pc, #308]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
      break;
 8000cf0:	e080      	b.n	8000df4 <AUDIO_MenuProcess+0x274>
      
    case AUDIO_DEMO_PLAYBACK:
      if(AppliState == APPLICATION_READY)
 8000cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8000e1c <AUDIO_MenuProcess+0x29c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d13c      	bne.n	8000d74 <AUDIO_MenuProcess+0x1f4>
      {
        if(AudioState == AUDIO_STATE_IDLE)
 8000cfa:	4b51      	ldr	r3, [pc, #324]	@ (8000e40 <AUDIO_MenuProcess+0x2c0>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d12a      	bne.n	8000d58 <AUDIO_MenuProcess+0x1d8>
        {
          if(AUDIO_ShowWavFiles() > 0)
 8000d02:	f7ff fd39 	bl	8000778 <AUDIO_ShowWavFiles>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d013      	beq.n	8000d34 <AUDIO_MenuProcess+0x1b4>
          {
            LCD_ErrLog("There is no WAV file on the USB Key.\n");         
 8000d0c:	4b48      	ldr	r3, [pc, #288]	@ (8000e30 <AUDIO_MenuProcess+0x2b0>)
 8000d0e:	4a49      	ldr	r2, [pc, #292]	@ (8000e34 <AUDIO_MenuProcess+0x2b4>)
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	4849      	ldr	r0, [pc, #292]	@ (8000e38 <AUDIO_MenuProcess+0x2b8>)
 8000d14:	f01a fab8 	bl	801b288 <iprintf>
 8000d18:	4848      	ldr	r0, [pc, #288]	@ (8000e3c <AUDIO_MenuProcess+0x2bc>)
 8000d1a:	f01a fb25 	bl	801b368 <puts>
 8000d1e:	4b44      	ldr	r3, [pc, #272]	@ (8000e30 <AUDIO_MenuProcess+0x2b0>)
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	601a      	str	r2, [r3, #0]
            AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU); 
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f88c 	bl	8000e44 <AUDIO_ChangeSelectMode>
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8000d2c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
 8000d32:	e002      	b.n	8000d3a <AUDIO_MenuProcess+0x1ba>
          }
          else
          {
            /* Start Playing */
            AudioState = AUDIO_STATE_INIT;
 8000d34:	4b42      	ldr	r3, [pc, #264]	@ (8000e40 <AUDIO_MenuProcess+0x2c0>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	701a      	strb	r2, [r3, #0]
          }

          /* Clear the LCD */
          LCD_ClearTextZone();
 8000d3a:	f000 f89d 	bl	8000e78 <LCD_ClearTextZone>

          if(AUDIO_PLAYER_Start(0) == AUDIO_ERROR_IO)
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f001 f816 	bl	8001d70 <AUDIO_PLAYER_Start>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d151      	bne.n	8000dee <AUDIO_MenuProcess+0x26e>
          {
            AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU); 
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f87a 	bl	8000e44 <AUDIO_ChangeSelectMode>
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8000d50:	4b33      	ldr	r3, [pc, #204]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        AudioDemo.state = AUDIO_DEMO_WAIT;
      }
      break; 
 8000d56:	e04a      	b.n	8000dee <AUDIO_MenuProcess+0x26e>
          if(AUDIO_PLAYER_Process() == AUDIO_ERROR_IO)
 8000d58:	f001 f86a 	bl	8001e30 <AUDIO_PLAYER_Process>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d145      	bne.n	8000dee <AUDIO_MenuProcess+0x26e>
            LCD_ClearTextZone();
 8000d62:	f000 f889 	bl	8000e78 <LCD_ClearTextZone>
            AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU);  
 8000d66:	2000      	movs	r0, #0
 8000d68:	f000 f86c 	bl	8000e44 <AUDIO_ChangeSelectMode>
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
      break; 
 8000d72:	e03c      	b.n	8000dee <AUDIO_MenuProcess+0x26e>
        AudioDemo.state = AUDIO_DEMO_WAIT;
 8000d74:	4b2a      	ldr	r3, [pc, #168]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
      break; 
 8000d7a:	e038      	b.n	8000dee <AUDIO_MenuProcess+0x26e>
      
    case AUDIO_DEMO_IN:
      if(AppliState == APPLICATION_READY)
 8000d7c:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <AUDIO_MenuProcess+0x29c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d12c      	bne.n	8000dde <AUDIO_MenuProcess+0x25e>
      {
        if(AudioState == AUDIO_STATE_IDLE)
 8000d84:	4b2e      	ldr	r3, [pc, #184]	@ (8000e40 <AUDIO_MenuProcess+0x2c0>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d112      	bne.n	8000db2 <AUDIO_MenuProcess+0x232>
        {
          /* Start Playing */
          AudioState = AUDIO_STATE_INIT;
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e40 <AUDIO_MenuProcess+0x2c0>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]

          /* Clear the LCD */
          LCD_ClearTextZone();
 8000d92:	f000 f871 	bl	8000e78 <LCD_ClearTextZone>

          /* Init storage */
          AUDIO_StorageInit();
 8000d96:	f7ff fc25 	bl	80005e4 <AUDIO_StorageInit>

          /* Configure the audio recorder: sampling frequency, bits-depth, number of channels */
          if(AUDIO_REC_Start() == AUDIO_ERROR_IO)
 8000d9a:	f001 fc7d 	bl	8002698 <AUDIO_REC_Start>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d126      	bne.n	8000df2 <AUDIO_MenuProcess+0x272>
          {
            AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU); 
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 f84d 	bl	8000e44 <AUDIO_ChangeSelectMode>
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        AudioDemo.state = AUDIO_DEMO_WAIT;
      }
      break;
 8000db0:	e01f      	b.n	8000df2 <AUDIO_MenuProcess+0x272>
          status = AUDIO_REC_Process();
 8000db2:	f001 fd3d 	bl	8002830 <AUDIO_REC_Process>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if((status == AUDIO_ERROR_IO) || (status == AUDIO_ERROR_EOF))
 8000dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d003      	beq.n	8000dcc <AUDIO_MenuProcess+0x24c>
 8000dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d112      	bne.n	8000df2 <AUDIO_MenuProcess+0x272>
            LCD_ClearTextZone();
 8000dcc:	f000 f854 	bl	8000e78 <LCD_ClearTextZone>
            AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU);  
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 f837 	bl	8000e44 <AUDIO_ChangeSelectMode>
            AudioDemo.state = AUDIO_DEMO_IDLE;
 8000dd6:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
      break;
 8000ddc:	e009      	b.n	8000df2 <AUDIO_MenuProcess+0x272>
        AudioDemo.state = AUDIO_DEMO_WAIT;
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <AUDIO_MenuProcess+0x2a0>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
      break;
 8000de4:	e005      	b.n	8000df2 <AUDIO_MenuProcess+0x272>
      
    default:
      break;
 8000de6:	bf00      	nop
 8000de8:	e004      	b.n	8000df4 <AUDIO_MenuProcess+0x274>
      break;
 8000dea:	bf00      	nop
 8000dec:	e002      	b.n	8000df4 <AUDIO_MenuProcess+0x274>
      break; 
 8000dee:	bf00      	nop
 8000df0:	e000      	b.n	8000df4 <AUDIO_MenuProcess+0x274>
      break;
 8000df2:	bf00      	nop
    }
  }
  
  if(AppliState == APPLICATION_DISCONNECT)
 8000df4:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <AUDIO_MenuProcess+0x29c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d108      	bne.n	8000e0e <AUDIO_MenuProcess+0x28e>
  {
    AppliState = APPLICATION_IDLE;     
 8000dfc:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <AUDIO_MenuProcess+0x29c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
    AUDIO_ChangeSelectMode(AUDIO_SELECT_MENU); 
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f81e 	bl	8000e44 <AUDIO_ChangeSelectMode>
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);    
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f004 f921 	bl	8005050 <BSP_AUDIO_OUT_Stop>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	@ 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	0801cd08 	.word	0x0801cd08
 8000e1c:	200010e8 	.word	0x200010e8
 8000e20:	20001104 	.word	0x20001104
 8000e24:	20000144 	.word	0x20000144
 8000e28:	0801cc9c 	.word	0x0801cc9c
 8000e2c:	2000014c 	.word	0x2000014c
 8000e30:	2000c430 	.word	0x2000c430
 8000e34:	ffff0000 	.word	0xffff0000
 8000e38:	0801ccd8 	.word	0x0801ccd8
 8000e3c:	0801cce0 	.word	0x0801cce0
 8000e40:	20001106 	.word	0x20001106

08000e44 <AUDIO_ChangeSelectMode>:
  * @brief  Changes the selection mode.
  * @param  select_mode: Selection mode
  * @retval None
  */
static void AUDIO_ChangeSelectMode(AUDIO_DEMO_SelectMode select_mode)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if(select_mode == AUDIO_SELECT_MENU)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d105      	bne.n	8000e60 <AUDIO_ChangeSelectMode+0x1c>
  {
    LCD_LOG_UpdateDisplay(); 
 8000e54:	f018 f910 	bl	8019078 <LCD_LOG_UpdateDisplay>
    AudioDemo.state = AUDIO_DEMO_IDLE; 
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <AUDIO_ChangeSelectMode+0x30>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
  }
  else if(select_mode == AUDIO_PLAYBACK_CONTROL)
  {
    LCD_ClearTextZone();   
  }
}
 8000e5e:	e004      	b.n	8000e6a <AUDIO_ChangeSelectMode+0x26>
  else if(select_mode == AUDIO_PLAYBACK_CONTROL)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d101      	bne.n	8000e6a <AUDIO_ChangeSelectMode+0x26>
    LCD_ClearTextZone();   
 8000e66:	f000 f807 	bl	8000e78 <LCD_ClearTextZone>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20001104 	.word	0x20001104

08000e78 <LCD_ClearTextZone>:
  * @brief  Clears the text zone.
  * @param  None
  * @retval None
  */
static void LCD_ClearTextZone(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	71fb      	strb	r3, [r7, #7]
  
  for(i= 0; i < 13; i++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	e007      	b.n	8000e98 <LCD_ClearTextZone+0x20>
  {
    BSP_LCD_ClearStringLine(i + 3);
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	3303      	adds	r3, #3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f005 f991 	bl	80061b4 <BSP_LCD_ClearStringLine>
  for(i= 0; i < 13; i++)
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	3301      	adds	r3, #1
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b0c      	cmp	r3, #12
 8000e9c:	d9f4      	bls.n	8000e88 <LCD_ClearTextZone+0x10>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000eba:	bf00      	nop
 8000ebc:	e7fd      	b.n	8000eba <HardFault_Handler+0x4>

08000ebe <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ec2:	bf00      	nop
 8000ec4:	e7fd      	b.n	8000ec2 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000eca:	bf00      	nop
 8000ecc:	e7fd      	b.n	8000eca <BusFault_Handler+0x4>

08000ece <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ed2:	bf00      	nop
 8000ed4:	e7fd      	b.n	8000ed2 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  HAL_IncTick(); 
 8000f04:	f006 fed2 	bl	8007cac <HAL_IncTick>
  Toggle_Leds();
 8000f08:	f7ff fcf6 	bl	80008f8 <Toggle_Leds>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <OTG_FS_IRQHandler>:
  * @brief  This function handles USB-On-The-Go FS/HS global interrupt request.
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  HAL_HCD_IRQHandler(&hhcd);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <OTG_FS_IRQHandler+0x10>)
 8000f16:	f009 facf 	bl	800a4b8 <HAL_HCD_IRQHandler>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20001128 	.word	0x20001128

08000f24 <EXTI2_IRQHandler>:
  * @brief  This function handles External line 2 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000f28:	2004      	movs	r0, #4
 8000f2a:	f008 ffc1 	bl	8009eb0 <HAL_GPIO_EXTI_IRQHandler>
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <DMA2_Stream3_IRQHandler>:
  * @brief This function handles DMA2 Stream 5 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_SAIx_DMAx_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <DMA2_Stream3_IRQHandler+0x14>)
 8000f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f007 f9df 	bl	8008300 <HAL_DMA_IRQHandler>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000848c 	.word	0x2000848c

08000f4c <DMA1_Stream2_IRQHandler>:
  * @brief This function handles DMA1 Stream 2 interrupt request.
  * @param None
  * @retval None
  */
void AUDIO_I2Sx_DMAx_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_i2s.hdmarx);
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <DMA1_Stream2_IRQHandler+0x14>)
 8000f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f54:	4618      	mov	r0, r3
 8000f56:	f007 f9d3 	bl	8008300 <HAL_DMA_IRQHandler>
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20008514 	.word	0x20008514

08000f64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00a      	b.n	8000f8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f76:	f3af 8000 	nop.w
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf0      	blt.n	8000f76 <_read+0x12>
  }

  return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e009      	b.n	8000fc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f017 ff7d 	bl	8018eb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf1      	blt.n	8000fb0 <_write+0x12>
  }
  return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_close>:

int _close(int file)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ffe:	605a      	str	r2, [r3, #4]
  return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_isatty>:

int _isatty(int file)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	@ (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f01a fb02 	bl	801b678 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20050000 	.word	0x20050000
 80010a0:	00001000 	.word	0x00001000
 80010a4:	20001108 	.word	0x20001108
 80010a8:	2000c598 	.word	0x2000c598

080010ac <Touchscreen_Calibration>:
  * @brief  Performs the TS calibration
  * @param  None
  * @retval Status (TS_OK = 0/ TS_ERROR = 1 / TS_TIMEOUT = 1 / TS_DEVICE_NOT_FOUND = 3)
  */
uint8_t Touchscreen_Calibration(void)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	71bb      	strb	r3, [r7, #6]
  uint8_t i;
  uint16_t ts_SizeX;
  uint16_t ts_SizeY;

  ts_SizeX = BSP_LCD_GetXSize();
 80010b6:	f004 ff6b 	bl	8005f90 <BSP_LCD_GetXSize>
 80010ba:	4603      	mov	r3, r0
 80010bc:	80bb      	strh	r3, [r7, #4]
  ts_SizeY = BSP_LCD_GetYSize();
 80010be:	f004 ff73 	bl	8005fa8 <BSP_LCD_GetYSize>
 80010c2:	4603      	mov	r3, r0
 80010c4:	807b      	strh	r3, [r7, #2]

  TouchscreenCalibration_SetHint();
 80010c6:	f000 f921 	bl	800130c <TouchscreenCalibration_SetHint>

  /* Start touchscreen internal calibration and configuration + start */
  ts_status = BSP_TS_Init(ts_SizeX, ts_SizeY);
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	88bb      	ldrh	r3, [r7, #4]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f006 facb 	bl	800766c <BSP_TS_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	71bb      	strb	r3, [r7, #6]
  if (ts_status != TS_OK)
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d046      	beq.n	800116e <Touchscreen_Calibration+0xc2>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f004 fff4 	bl	80060d0 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80010e8:	4878      	ldr	r0, [pc, #480]	@ (80012cc <Touchscreen_Calibration+0x220>)
 80010ea:	f004 ffd9 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 80010ee:	f004 ff5b 	bl	8005fa8 <BSP_LCD_GetYSize>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	3b5f      	subs	r3, #95	@ 0x5f
 80010f8:	b299      	uxth	r1, r3
 80010fa:	2301      	movs	r3, #1
 80010fc:	4a74      	ldr	r2, [pc, #464]	@ (80012d0 <Touchscreen_Calibration+0x224>)
 80010fe:	2000      	movs	r0, #0
 8001100:	f005 f900 	bl	8006304 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be calibrated", CENTER_MODE);
 8001104:	f004 ff50 	bl	8005fa8 <BSP_LCD_GetYSize>
 8001108:	4603      	mov	r3, r0
 800110a:	b29b      	uxth	r3, r3
 800110c:	3b50      	subs	r3, #80	@ 0x50
 800110e:	b299      	uxth	r1, r3
 8001110:	2301      	movs	r3, #1
 8001112:	4a70      	ldr	r2, [pc, #448]	@ (80012d4 <Touchscreen_Calibration+0x228>)
 8001114:	2000      	movs	r0, #0
 8001116:	f005 f8f5 	bl	8006304 <BSP_LCD_DisplayStringAt>
    if(ts_status == TS_ERROR)
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d10b      	bne.n	8001138 <Touchscreen_Calibration+0x8c>
    {
      BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"Touchscreen undefined error", CENTER_MODE);
 8001120:	f004 ff42 	bl	8005fa8 <BSP_LCD_GetYSize>
 8001124:	4603      	mov	r3, r0
 8001126:	b29b      	uxth	r3, r3
 8001128:	3b41      	subs	r3, #65	@ 0x41
 800112a:	b299      	uxth	r1, r3
 800112c:	2301      	movs	r3, #1
 800112e:	4a6a      	ldr	r2, [pc, #424]	@ (80012d8 <Touchscreen_Calibration+0x22c>)
 8001130:	2000      	movs	r0, #0
 8001132:	f005 f8e7 	bl	8006304 <BSP_LCD_DisplayStringAt>
 8001136:	e0c3      	b.n	80012c0 <Touchscreen_Calibration+0x214>
    }
    else if(ts_status == TS_TIMEOUT)
 8001138:	79bb      	ldrb	r3, [r7, #6]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d10b      	bne.n	8001156 <Touchscreen_Calibration+0xaa>
    {
      BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"Touchscreen Timeout", CENTER_MODE);
 800113e:	f004 ff33 	bl	8005fa8 <BSP_LCD_GetYSize>
 8001142:	4603      	mov	r3, r0
 8001144:	b29b      	uxth	r3, r3
 8001146:	3b41      	subs	r3, #65	@ 0x41
 8001148:	b299      	uxth	r1, r3
 800114a:	2301      	movs	r3, #1
 800114c:	4a63      	ldr	r2, [pc, #396]	@ (80012dc <Touchscreen_Calibration+0x230>)
 800114e:	2000      	movs	r0, #0
 8001150:	f005 f8d8 	bl	8006304 <BSP_LCD_DisplayStringAt>
 8001154:	e0b4      	b.n	80012c0 <Touchscreen_Calibration+0x214>
    }
    else
    {
      /* TS_DEVICE_NOT_FOUND */
      BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"Touchscreen Not Found", CENTER_MODE);
 8001156:	f004 ff27 	bl	8005fa8 <BSP_LCD_GetYSize>
 800115a:	4603      	mov	r3, r0
 800115c:	b29b      	uxth	r3, r3
 800115e:	3b41      	subs	r3, #65	@ 0x41
 8001160:	b299      	uxth	r1, r3
 8001162:	2301      	movs	r3, #1
 8001164:	4a5e      	ldr	r2, [pc, #376]	@ (80012e0 <Touchscreen_Calibration+0x234>)
 8001166:	2000      	movs	r0, #0
 8001168:	f005 f8cc 	bl	8006304 <BSP_LCD_DisplayStringAt>
 800116c:	e0a8      	b.n	80012c0 <Touchscreen_Calibration+0x214>
    }
  }
  else
  {
    /* status == TS_OK */
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"FT6x06 internal calibration passed", CENTER_MODE);
 800116e:	f004 ff1b 	bl	8005fa8 <BSP_LCD_GetYSize>
 8001172:	4603      	mov	r3, r0
 8001174:	b29b      	uxth	r3, r3
 8001176:	3b41      	subs	r3, #65	@ 0x41
 8001178:	b299      	uxth	r1, r3
 800117a:	2301      	movs	r3, #1
 800117c:	4a59      	ldr	r2, [pc, #356]	@ (80012e4 <Touchscreen_Calibration+0x238>)
 800117e:	2000      	movs	r0, #0
 8001180:	f005 f8c0 	bl	8006304 <BSP_LCD_DisplayStringAt>

    /* Get touch points for SW calibration processing */
    aLogX[0] = 40;
 8001184:	4b58      	ldr	r3, [pc, #352]	@ (80012e8 <Touchscreen_Calibration+0x23c>)
 8001186:	2228      	movs	r2, #40	@ 0x28
 8001188:	801a      	strh	r2, [r3, #0]
    aLogY[0] = 40;
 800118a:	4b58      	ldr	r3, [pc, #352]	@ (80012ec <Touchscreen_Calibration+0x240>)
 800118c:	2228      	movs	r2, #40	@ 0x28
 800118e:	801a      	strh	r2, [r3, #0]
    aLogX[1] = BSP_LCD_GetXSize() - 40;
 8001190:	f004 fefe 	bl	8005f90 <BSP_LCD_GetXSize>
 8001194:	4603      	mov	r3, r0
 8001196:	b29b      	uxth	r3, r3
 8001198:	3b28      	subs	r3, #40	@ 0x28
 800119a:	b29b      	uxth	r3, r3
 800119c:	b21a      	sxth	r2, r3
 800119e:	4b52      	ldr	r3, [pc, #328]	@ (80012e8 <Touchscreen_Calibration+0x23c>)
 80011a0:	805a      	strh	r2, [r3, #2]
    aLogY[1] = BSP_LCD_GetYSize() - 40;
 80011a2:	f004 ff01 	bl	8005fa8 <BSP_LCD_GetYSize>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	3b28      	subs	r3, #40	@ 0x28
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	4b4e      	ldr	r3, [pc, #312]	@ (80012ec <Touchscreen_Calibration+0x240>)
 80011b2:	805a      	strh	r2, [r3, #2]

    for (i = 0; i < 2; i++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	e014      	b.n	80011e4 <Touchscreen_Calibration+0x138>
    {
      TouchScreen_Calibration_GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a4a      	ldr	r2, [pc, #296]	@ (80012e8 <Touchscreen_Calibration+0x23c>)
 80011be:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4a49      	ldr	r2, [pc, #292]	@ (80012ec <Touchscreen_Calibration+0x240>)
 80011c6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	4a48      	ldr	r2, [pc, #288]	@ (80012f0 <Touchscreen_Calibration+0x244>)
 80011d0:	441a      	add	r2, r3
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4c47      	ldr	r4, [pc, #284]	@ (80012f4 <Touchscreen_Calibration+0x248>)
 80011d8:	4423      	add	r3, r4
 80011da:	f000 f8f1 	bl	80013c0 <TouchScreen_Calibration_GetPhysValues>
    for (i = 0; i < 2; i++)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	3301      	adds	r3, #1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d9e7      	bls.n	80011ba <Touchscreen_Calibration+0x10e>
    }

    /* Compute calibration coefficients */
    A1 = (1000 * ( aLogX[1] - aLogX[0])) / ( aPhysX[1] - aPhysX[0]);
 80011ea:	4b3f      	ldr	r3, [pc, #252]	@ (80012e8 <Touchscreen_Calibration+0x23c>)
 80011ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b3d      	ldr	r3, [pc, #244]	@ (80012e8 <Touchscreen_Calibration+0x23c>)
 80011f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011fe:	fb03 f202 	mul.w	r2, r3, r2
 8001202:	4b3b      	ldr	r3, [pc, #236]	@ (80012f0 <Touchscreen_Calibration+0x244>)
 8001204:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001208:	4619      	mov	r1, r3
 800120a:	4b39      	ldr	r3, [pc, #228]	@ (80012f0 <Touchscreen_Calibration+0x244>)
 800120c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001210:	1acb      	subs	r3, r1, r3
 8001212:	fb92 f3f3 	sdiv	r3, r2, r3
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <Touchscreen_Calibration+0x24c>)
 800121a:	801a      	strh	r2, [r3, #0]
    B1 = (1000 * aLogX[0]) - A1 * aPhysX[0];
 800121c:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <Touchscreen_Calibration+0x23c>)
 800121e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001222:	b29b      	uxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	0152      	lsls	r2, r2, #5
 8001228:	1ad2      	subs	r2, r2, r3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	b29a      	uxth	r2, r3
 8001232:	4b2f      	ldr	r3, [pc, #188]	@ (80012f0 <Touchscreen_Calibration+0x244>)
 8001234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001238:	b299      	uxth	r1, r3
 800123a:	4b2f      	ldr	r3, [pc, #188]	@ (80012f8 <Touchscreen_Calibration+0x24c>)
 800123c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001240:	b29b      	uxth	r3, r3
 8001242:	fb11 f303 	smulbb	r3, r1, r3
 8001246:	b29b      	uxth	r3, r3
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	b29b      	uxth	r3, r3
 800124c:	b21a      	sxth	r2, r3
 800124e:	4b2b      	ldr	r3, [pc, #172]	@ (80012fc <Touchscreen_Calibration+0x250>)
 8001250:	801a      	strh	r2, [r3, #0]

    A2 = (1000 * ( aLogY[1] - aLogY[0])) / ( aPhysY[1] - aPhysY[0]);
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <Touchscreen_Calibration+0x240>)
 8001254:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001258:	461a      	mov	r2, r3
 800125a:	4b24      	ldr	r3, [pc, #144]	@ (80012ec <Touchscreen_Calibration+0x240>)
 800125c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001266:	fb03 f202 	mul.w	r2, r3, r2
 800126a:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <Touchscreen_Calibration+0x248>)
 800126c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001270:	4619      	mov	r1, r3
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <Touchscreen_Calibration+0x248>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	1acb      	subs	r3, r1, r3
 800127a:	fb92 f3f3 	sdiv	r3, r2, r3
 800127e:	b21a      	sxth	r2, r3
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <Touchscreen_Calibration+0x254>)
 8001282:	801a      	strh	r2, [r3, #0]
    B2 = (1000 * aLogY[0]) - A2 * aPhysY[0];
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <Touchscreen_Calibration+0x240>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	b29b      	uxth	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	0152      	lsls	r2, r2, #5
 8001290:	1ad2      	subs	r2, r2, r3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b16      	ldr	r3, [pc, #88]	@ (80012f4 <Touchscreen_Calibration+0x248>)
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	b299      	uxth	r1, r3
 80012a2:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <Touchscreen_Calibration+0x254>)
 80012a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	fb11 f303 	smulbb	r3, r1, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <Touchscreen_Calibration+0x258>)
 80012b8:	801a      	strh	r2, [r3, #0]

    ts_calibration_done = 1;
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <Touchscreen_Calibration+0x25c>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
  }

  return (ts_status);
 80012c0:	79bb      	ldrb	r3, [r7, #6]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd90      	pop	{r4, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	ffff0000 	.word	0xffff0000
 80012d0:	0801cd14 	.word	0x0801cd14
 80012d4:	0801cd1c 	.word	0x0801cd1c
 80012d8:	0801cd40 	.word	0x0801cd40
 80012dc:	0801cd5c 	.word	0x0801cd5c
 80012e0:	0801cd70 	.word	0x0801cd70
 80012e4:	0801cd88 	.word	0x0801cd88
 80012e8:	20001120 	.word	0x20001120
 80012ec:	20001124 	.word	0x20001124
 80012f0:	20001118 	.word	0x20001118
 80012f4:	2000111c 	.word	0x2000111c
 80012f8:	2000110e 	.word	0x2000110e
 80012fc:	20001112 	.word	0x20001112
 8001300:	20001110 	.word	0x20001110
 8001304:	20001114 	.word	0x20001114
 8001308:	2000110c 	.word	0x2000110c

0800130c <TouchscreenCalibration_SetHint>:
  * @brief  Display calibration hint
  * @param  None
  * @retval None
  */
static void TouchscreenCalibration_SetHint(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f004 ff26 	bl	8006164 <BSP_LCD_Clear>

  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001318:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800131c:	f004 fec0 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f004 fed4 	bl	80060d0 <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font20);
 8001328:	481e      	ldr	r0, [pc, #120]	@ (80013a4 <TouchscreenCalibration_SetHint+0x98>)
 800132a:	f004 feeb 	bl	8006104 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 35, (uint8_t *)"Before using the Touchscreen", CENTER_MODE);
 800132e:	f004 fe3b 	bl	8005fa8 <BSP_LCD_GetYSize>
 8001332:	4603      	mov	r3, r0
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	b29b      	uxth	r3, r3
 8001338:	3b23      	subs	r3, #35	@ 0x23
 800133a:	b299      	uxth	r1, r3
 800133c:	2301      	movs	r3, #1
 800133e:	4a1a      	ldr	r2, [pc, #104]	@ (80013a8 <TouchscreenCalibration_SetHint+0x9c>)
 8001340:	2000      	movs	r0, #0
 8001342:	f004 ffdf 	bl	8006304 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 - 15, (uint8_t *)"you need to calibrate it.", CENTER_MODE);
 8001346:	f004 fe2f 	bl	8005fa8 <BSP_LCD_GetYSize>
 800134a:	4603      	mov	r3, r0
 800134c:	085b      	lsrs	r3, r3, #1
 800134e:	b29b      	uxth	r3, r3
 8001350:	3b0f      	subs	r3, #15
 8001352:	b299      	uxth	r1, r3
 8001354:	2301      	movs	r3, #1
 8001356:	4a15      	ldr	r2, [pc, #84]	@ (80013ac <TouchscreenCalibration_SetHint+0xa0>)
 8001358:	2000      	movs	r0, #0
 800135a:	f004 ffd3 	bl	8006304 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font24);
 800135e:	4814      	ldr	r0, [pc, #80]	@ (80013b0 <TouchscreenCalibration_SetHint+0xa4>)
 8001360:	f004 fed0 	bl	8006104 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 7, (uint8_t *)"WAIT until the black circle appears", CENTER_MODE);
 8001364:	f004 fe20 	bl	8005fa8 <BSP_LCD_GetYSize>
 8001368:	4603      	mov	r3, r0
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	b29b      	uxth	r3, r3
 800136e:	3307      	adds	r3, #7
 8001370:	b299      	uxth	r1, r3
 8001372:	2301      	movs	r3, #1
 8001374:	4a0f      	ldr	r2, [pc, #60]	@ (80013b4 <TouchscreenCalibration_SetHint+0xa8>)
 8001376:	2000      	movs	r0, #0
 8001378:	f004 ffc4 	bl	8006304 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font20);
 800137c:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <TouchscreenCalibration_SetHint+0x98>)
 800137e:	f004 fec1 	bl	8006104 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"THEN Press precisely on the black circles", CENTER_MODE);
 8001382:	f004 fe11 	bl	8005fa8 <BSP_LCD_GetYSize>
 8001386:	4603      	mov	r3, r0
 8001388:	085b      	lsrs	r3, r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	331e      	adds	r3, #30
 800138e:	b299      	uxth	r1, r3
 8001390:	2301      	movs	r3, #1
 8001392:	4a09      	ldr	r2, [pc, #36]	@ (80013b8 <TouchscreenCalibration_SetHint+0xac>)
 8001394:	2000      	movs	r0, #0
 8001396:	f004 ffb5 	bl	8006304 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 800139a:	4808      	ldr	r0, [pc, #32]	@ (80013bc <TouchscreenCalibration_SetHint+0xb0>)
 800139c:	f004 feb2 	bl	8006104 <BSP_LCD_SetFont>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000013c 	.word	0x2000013c
 80013a8:	0801cdac 	.word	0x0801cdac
 80013ac:	0801cdcc 	.word	0x0801cdcc
 80013b0:	20000134 	.word	0x20000134
 80013b4:	0801cde8 	.word	0x0801cde8
 80013b8:	0801ce0c 	.word	0x0801ce0c
 80013bc:	2000014c 	.word	0x2000014c

080013c0 <TouchScreen_Calibration_GetPhysValues>:
  * @param  pPhysX : Physical X position
  * @param  pPhysY : Physical Y position
  * @retval None
  */
static void TouchScreen_Calibration_GetPhysValues(int16_t LogX, int16_t LogY, int16_t * pPhysX, int16_t * pPhysY)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60ba      	str	r2, [r7, #8]
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4603      	mov	r3, r0
 80013cc:	81fb      	strh	r3, [r7, #14]
 80013ce:	460b      	mov	r3, r1
 80013d0:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013d2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80013d6:	f004 fe63 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 20);
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	89b9      	ldrh	r1, [r7, #12]
 80013de:	2214      	movs	r2, #20
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 fb2f 	bl	8006a44 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80013e6:	f04f 30ff 	mov.w	r0, #4294967295
 80013ea:	f004 fe59 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 10);
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	89b9      	ldrh	r1, [r7, #12]
 80013f2:	220a      	movs	r2, #10
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 fb25 	bl	8006a44 <BSP_LCD_FillCircle>

  /* Wait until pressed state on the touch panel */
  TouchScreen_Calibration_WaitForPressedState(1);
 80013fa:	2001      	movs	r0, #1
 80013fc:	f000 f81e 	bl	800143c <TouchScreen_Calibration_WaitForPressedState>

  /* Return as physical touch values the positions of first touch, even if double touched occurred */
  *pPhysX = TS_State.touchX[0];
 8001400:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <TouchScreen_Calibration_GetPhysValues+0x78>)
 8001402:	885b      	ldrh	r3, [r3, #2]
 8001404:	b21a      	sxth	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.touchY[0];
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <TouchScreen_Calibration_GetPhysValues+0x78>)
 800140c:	88db      	ldrh	r3, [r3, #6]
 800140e:	b21a      	sxth	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	801a      	strh	r2, [r3, #0]

  /* Wait until touch is released on touch panel */
  TouchScreen_Calibration_WaitForPressedState(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f000 f811 	bl	800143c <TouchScreen_Calibration_WaitForPressedState>

  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800141a:	f04f 30ff 	mov.w	r0, #4294967295
 800141e:	f004 fe3f 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 20);
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	89b9      	ldrh	r1, [r7, #12]
 8001426:	2214      	movs	r2, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f005 fb0b 	bl	8006a44 <BSP_LCD_FillCircle>
}
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200010ec 	.word	0x200010ec

0800143c <TouchScreen_Calibration_WaitForPressedState>:
  *         - Await touch (single/multiple) detection if Pressed == 1
  *         - Await no touch detection if Pressed == 0
  * @retval None
  */
static void TouchScreen_Calibration_WaitForPressedState(uint8_t Pressed)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  uint16_t TimeStart = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	81fb      	strh	r3, [r7, #14]
  uint8_t  status = TS_OK;
 800144a:	2300      	movs	r3, #0
 800144c:	737b      	strb	r3, [r7, #13]
  uint32_t exitFirstLevelWhileLoopReq = 0;  /* By default no exit request from first level while loop  */
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t exitSecondLevelWhileLoopReq = 0; /* By default no exit request from second level while loop */
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]

  /* First level while loop entry */
  do
  {
    /* reset exit second level while loop in case it was set */
    exitSecondLevelWhileLoopReq = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]

    /* Sense of touch state from touch IC until get the awaited state in parameter 'Pressed' */
    status = BSP_TS_GetState(&TS_State);
 800145a:	482d      	ldr	r0, [pc, #180]	@ (8001510 <TouchScreen_Calibration_WaitForPressedState+0xd4>)
 800145c:	f006 f966 	bl	800772c <BSP_TS_GetState>
 8001460:	4603      	mov	r3, r0
 8001462:	737b      	strb	r3, [r7, #13]
    if(status == TS_OK)
 8001464:	7b7b      	ldrb	r3, [r7, #13]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d144      	bne.n	80014f4 <TouchScreen_Calibration_WaitForPressedState+0xb8>
    {
      if (((Pressed == 0) && (TS_State.touchDetected == 0)) ||
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d103      	bne.n	8001478 <TouchScreen_Calibration_WaitForPressedState+0x3c>
 8001470:	4b27      	ldr	r3, [pc, #156]	@ (8001510 <TouchScreen_Calibration_WaitForPressedState+0xd4>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00a      	beq.n	800148e <TouchScreen_Calibration_WaitForPressedState+0x52>
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d13a      	bne.n	80014f4 <TouchScreen_Calibration_WaitForPressedState+0xb8>
          ((Pressed == 1) && ((TS_State.touchDetected == 1) || (TS_State.touchDetected == 2))))
 800147e:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <TouchScreen_Calibration_WaitForPressedState+0xd4>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d003      	beq.n	800148e <TouchScreen_Calibration_WaitForPressedState+0x52>
 8001486:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <TouchScreen_Calibration_WaitForPressedState+0xd4>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d132      	bne.n	80014f4 <TouchScreen_Calibration_WaitForPressedState+0xb8>
      {
        /* Got awaited press state */
        /* Record in 'TimeStart' the time of awaited touch event for anti-rebound calculation */
        /* The state should persist for a minimum sufficient time */
        TimeStart = HAL_GetTick();
 800148e:	f006 fc21 	bl	8007cd4 <HAL_GetTick>
 8001492:	4603      	mov	r3, r0
 8001494:	81fb      	strh	r3, [r7, #14]
        /* Is state of the touch changing ? */
        /* Second level while loop entry */
        do
        {
          /* New sense of touch state from touch IC : to evaluate if state was stable */
          status = BSP_TS_GetState(&TS_State);
 8001496:	481e      	ldr	r0, [pc, #120]	@ (8001510 <TouchScreen_Calibration_WaitForPressedState+0xd4>)
 8001498:	f006 f948 	bl	800772c <BSP_TS_GetState>
 800149c:	4603      	mov	r3, r0
 800149e:	737b      	strb	r3, [r7, #13]
          if(status == TS_OK)
 80014a0:	7b7b      	ldrb	r3, [r7, #13]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d123      	bne.n	80014ee <TouchScreen_Calibration_WaitForPressedState+0xb2>
          {
            /* Is there a state change compared since having found the awaited state ? */
            if (((Pressed == 0) && ((TS_State.touchDetected == 1) || (TS_State.touchDetected == 2))) ||
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d107      	bne.n	80014bc <TouchScreen_Calibration_WaitForPressedState+0x80>
 80014ac:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <TouchScreen_Calibration_WaitForPressedState+0xd4>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d00a      	beq.n	80014ca <TouchScreen_Calibration_WaitForPressedState+0x8e>
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <TouchScreen_Calibration_WaitForPressedState+0xd4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d006      	beq.n	80014ca <TouchScreen_Calibration_WaitForPressedState+0x8e>
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d106      	bne.n	80014d0 <TouchScreen_Calibration_WaitForPressedState+0x94>
                ((Pressed == 1) && ((TS_State.touchDetected == 0))))
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <TouchScreen_Calibration_WaitForPressedState+0xd4>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <TouchScreen_Calibration_WaitForPressedState+0x94>
            {
              /* Too rapid state change => anti-rebound management : restart first touch search */
              exitSecondLevelWhileLoopReq = 1; /* exit request from second level while loop */
 80014ca:	2301      	movs	r3, #1
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	e00b      	b.n	80014e8 <TouchScreen_Calibration_WaitForPressedState+0xac>
            }
            else if ((HAL_GetTick() - 100) > TimeStart)
 80014d0:	f006 fc00 	bl	8007cd4 <HAL_GetTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d903      	bls.n	80014e8 <TouchScreen_Calibration_WaitForPressedState+0xac>
            {
              /* State have not changed for the timeout duration (stable touch for 100 ms) */
              /* This means the touch state is stable : can exit function */

              /* found valid touch, exit both while levels */
              exitSecondLevelWhileLoopReq = 1;
 80014e0:	2301      	movs	r3, #1
 80014e2:	613b      	str	r3, [r7, #16]
              exitFirstLevelWhileLoopReq  = 1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
            }

            /* Wait 10 ms before next sense of touch at next loop iteration */
            HAL_Delay(10);
 80014e8:	200a      	movs	r0, #10
 80014ea:	f006 fbff 	bl	8007cec <HAL_Delay>

          } /* of if(status == TS_OK) */
        }
        while (!exitSecondLevelWhileLoopReq);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0d0      	beq.n	8001496 <TouchScreen_Calibration_WaitForPressedState+0x5a>

      } /* of if (((Pressed == 0) && .... */

    } /* of if(status == TS_OK) */

    if(!exitFirstLevelWhileLoopReq)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <TouchScreen_Calibration_WaitForPressedState+0xc4>
    {
      /* Wait some time before next sense of touch at next loop iteration */
      HAL_Delay(10);
 80014fa:	200a      	movs	r0, #10
 80014fc:	f006 fbf6 	bl	8007cec <HAL_Delay>
    }

  }
  while (!exitSecondLevelWhileLoopReq);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0a7      	beq.n	8001456 <TouchScreen_Calibration_WaitForPressedState+0x1a>
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200010ec 	.word	0x200010ec

08001514 <TouchScreen_IsCalibrationDone>:
/**check if the TS is calibrated
  * @param  None
* @retval calibration state (1 : calibrated / 0: no)
  */
uint8_t TouchScreen_IsCalibrationDone(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return (ts_calibration_done);
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <TouchScreen_IsCalibrationDone+0x14>)
 800151a:	781b      	ldrb	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000110c 	.word	0x2000110c

0800152c <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Configure USB FS GPIOs */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	4b32      	ldr	r3, [pc, #200]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	4a31      	ldr	r2, [pc, #196]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6313      	str	r3, [r2, #48]	@ 0x30
 8001544:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]
  
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8001550:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001562:	230a      	movs	r3, #10
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4826      	ldr	r0, [pc, #152]	@ (8001608 <HAL_HCD_MspInit+0xdc>)
 800156e:	f008 faa7 	bl	8009ac0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001578:	2312      	movs	r3, #18
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001580:	230a      	movs	r3, #10
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	481f      	ldr	r0, [pc, #124]	@ (8001608 <HAL_HCD_MspInit+0xdc>)
 800158c:	f008 fa98 	bl	8009ac0 <HAL_GPIO_Init>
  
  /* Configure POWER_SWITCH IO pin */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001598:	4a1a      	ldr	r2, [pc, #104]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015ac:	2304      	movs	r3, #4
 80015ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4813      	ldr	r0, [pc, #76]	@ (800160c <HAL_HCD_MspInit+0xe0>)
 80015c0:	f008 fa7e 	bl	8009ac0 <HAL_GPIO_Init>
  
  /* Enable USB FS Clocks */ 
  __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 80015c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 80015ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 80015d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 80015da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015de:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <HAL_HCD_MspInit+0xd8>)
 80015e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
  
  /* Set USBFS Interrupt priority */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2106      	movs	r1, #6
 80015f0:	2043      	movs	r0, #67	@ 0x43
 80015f2:	f006 fc7a 	bl	8007eea <HAL_NVIC_SetPriority>
  
  /* Enable USBFS Interrupt */
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80015f6:	2043      	movs	r0, #67	@ 0x43
 80015f8:	f006 fc93 	bl	8007f22 <HAL_NVIC_EnableIRQ>
}
 80015fc:	bf00      	nop
 80015fe:	3728      	adds	r7, #40	@ 0x28
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000
 800160c:	40020400 	.word	0x40020400

08001610 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer (hhcd->pData);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800161e:	4618      	mov	r0, r3
 8001620:	f016 fbc5 	bl	8017dae <USBH_LL_IncTimer>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_HCD_Connect_Callback>:
  * @brief  Connect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800163a:	4618      	mov	r0, r3
 800163c:	f016 fbfd 	bl	8017e3a <USBH_LL_Connect>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnect callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8001656:	4618      	mov	r0, r3
 8001658:	f016 fc06 	bl	8017e68 <USBH_LL_Disconnect>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8001672:	4618      	mov	r0, r3
 8001674:	f016 fbc5 	bl	8017e02 <USBH_LL_PortEnabled>
} 
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800168e:	4618      	mov	r0, r3
 8001690:	f016 fbc5 	bl	8017e1e <USBH_LL_PortDisabled>
} 
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: Channel number 
  * @param  urb_state: URB State
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
 80016a8:	4613      	mov	r3, r2
 80016aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <USBH_LL_Init>:
  *         Initialize the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Set the LL Driver parameters */
  hhcd.Instance = USB_OTG_FS;
 80016c0:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <USBH_LL_Init+0x70>)
 80016c2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80016c6:	601a      	str	r2, [r3, #0]
  hhcd.Init.Host_channels = 11; 
 80016c8:	4b17      	ldr	r3, [pc, #92]	@ (8001728 <USBH_LL_Init+0x70>)
 80016ca:	220b      	movs	r2, #11
 80016cc:	715a      	strb	r2, [r3, #5]
  hhcd.Init.dma_enable = 0;
 80016ce:	4b16      	ldr	r3, [pc, #88]	@ (8001728 <USBH_LL_Init+0x70>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	719a      	strb	r2, [r3, #6]
  hhcd.Init.low_power_enable = 0;
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <USBH_LL_Init+0x70>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	72da      	strb	r2, [r3, #11]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <USBH_LL_Init+0x70>)
 80016dc:	2202      	movs	r2, #2
 80016de:	725a      	strb	r2, [r3, #9]
  hhcd.Init.Sof_enable = 0;
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <USBH_LL_Init+0x70>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	729a      	strb	r2, [r3, #10]
  hhcd.Init.speed = HCD_SPEED_FULL;
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <USBH_LL_Init+0x70>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	71da      	strb	r2, [r3, #7]
  hhcd.Init.vbus_sensing_enable = 0;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <USBH_LL_Init+0x70>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	739a      	strb	r2, [r3, #14]
  hhcd.Init.lpm_enable = 0;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <USBH_LL_Init+0x70>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	731a      	strb	r2, [r3, #12]
  
  /* Link the driver to the stack */
  hhcd.pData = phost;
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <USBH_LL_Init+0x70>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <USBH_LL_Init+0x70>)
 8001704:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0
  
  /* Initialize the LL Driver */
  HAL_HCD_Init(&hhcd);
 8001708:	4807      	ldr	r0, [pc, #28]	@ (8001728 <USBH_LL_Init+0x70>)
 800170a:	f008 fbf4 	bl	8009ef6 <HAL_HCD_Init>
  
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd));
 800170e:	4806      	ldr	r0, [pc, #24]	@ (8001728 <USBH_LL_Init+0x70>)
 8001710:	f009 f85a 	bl	800a7c8 <HAL_HCD_GetCurrentFrame>
 8001714:	4603      	mov	r3, r0
 8001716:	4619      	mov	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f016 fb39 	bl	8017d90 <USBH_LL_SetTimer>
  
  return USBH_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20001128 	.word	0x20001128

0800172c <USBH_LL_Start>:
  * @brief  Starts the Low Level portion of the Host driver.   
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_HCD_Start(phost->pData);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 800173a:	4618      	mov	r0, r3
 800173c:	f008 ffcc 	bl	800a6d8 <HAL_HCD_Start>
  return USBH_OK; 
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  HAL_HCD_Stop(phost->pData);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001758:	4618      	mov	r0, r3
 800175a:	f008 ffe0 	bl	800a71e <HAL_HCD_Stop>
  return USBH_OK; 
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <USBH_LL_GetSpeed>:
  * @brief  Returns the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
  
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 800177a:	4618      	mov	r0, r3
 800177c:	f009 f832 	bl	800a7e4 <HAL_HCD_GetCurrentSpeed>
 8001780:	4603      	mov	r3, r0
 8001782:	2b02      	cmp	r3, #2
 8001784:	d00c      	beq.n	80017a0 <USBH_LL_GetSpeed+0x38>
 8001786:	2b02      	cmp	r3, #2
 8001788:	d80d      	bhi.n	80017a6 <USBH_LL_GetSpeed+0x3e>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <USBH_LL_GetSpeed+0x2c>
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <USBH_LL_GetSpeed+0x32>
 8001792:	e008      	b.n	80017a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0: 
    speed = USBH_SPEED_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
    break;
 8001798:	e008      	b.n	80017ac <USBH_LL_GetSpeed+0x44>
    
  case 1: 
    speed = USBH_SPEED_FULL;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
    break;
 800179e:	e005      	b.n	80017ac <USBH_LL_GetSpeed+0x44>
    
  case 2: 
    speed = USBH_SPEED_LOW;
 80017a0:	2302      	movs	r3, #2
 80017a2:	73fb      	strb	r3, [r7, #15]
    break;
 80017a4:	e002      	b.n	80017ac <USBH_LL_GetSpeed+0x44>
    
  default:
    speed = USBH_SPEED_FULL;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
    break;
 80017aa:	bf00      	nop
  }
  return speed;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <USBH_LL_ResetPort>:
  * @brief  Resets the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  HAL_HCD_ResetPort(phost->pData);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f008 ffc7 	bl	800a758 <HAL_HCD_ResetPort>
  return USBH_OK; 
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f008 ffd7 	bl	800a79e <HAL_HCD_HC_GetXferCount>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 80017fa:	b590      	push	{r4, r7, lr}
 80017fc:	b087      	sub	sp, #28
 80017fe:	af04      	add	r7, sp, #16
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	4608      	mov	r0, r1
 8001804:	4611      	mov	r1, r2
 8001806:	461a      	mov	r2, r3
 8001808:	4603      	mov	r3, r0
 800180a:	70fb      	strb	r3, [r7, #3]
 800180c:	460b      	mov	r3, r1
 800180e:	70bb      	strb	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  HAL_HCD_HC_Init(phost->pData,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	@ 0x4d0
 800181a:	787c      	ldrb	r4, [r7, #1]
 800181c:	78ba      	ldrb	r2, [r7, #2]
 800181e:	78f9      	ldrb	r1, [r7, #3]
 8001820:	8c3b      	ldrh	r3, [r7, #32]
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	7f3b      	ldrb	r3, [r7, #28]
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	7e3b      	ldrb	r3, [r7, #24]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	4623      	mov	r3, r4
 800182e:	f008 fbc9 	bl	8009fc4 <HAL_HCD_HC_Init>
                  epnum,
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}

0800183c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	70fb      	strb	r3, [r7, #3]
  HAL_HCD_HC_Halt(phost->pData, pipe);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f008 fc6e 	bl	800a134 <HAL_HCD_HC_Halt>
  return USBH_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <USBH_LL_SubmitURB>:
                                     uint8_t ep_type,  
                                     uint8_t token, 
                                     uint8_t* pbuff, 
                                     uint16_t length,
                                     uint8_t do_ping) 
{
 8001862:	b590      	push	{r4, r7, lr}
 8001864:	b087      	sub	sp, #28
 8001866:	af04      	add	r7, sp, #16
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	4608      	mov	r0, r1
 800186c:	4611      	mov	r1, r2
 800186e:	461a      	mov	r2, r3
 8001870:	4603      	mov	r3, r0
 8001872:	70fb      	strb	r3, [r7, #3]
 8001874:	460b      	mov	r3, r1
 8001876:	70bb      	strb	r3, [r7, #2]
 8001878:	4613      	mov	r3, r2
 800187a:	707b      	strb	r3, [r7, #1]
  HAL_HCD_HC_SubmitRequest(phost->pData,
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8d3 04d0 	ldr.w	r0, [r3, #1232]	@ 0x4d0
 8001882:	787c      	ldrb	r4, [r7, #1]
 8001884:	78ba      	ldrb	r2, [r7, #2]
 8001886:	78f9      	ldrb	r1, [r7, #3]
 8001888:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800188c:	9303      	str	r3, [sp, #12]
 800188e:	8c3b      	ldrh	r3, [r7, #32]
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	7e3b      	ldrb	r3, [r7, #24]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	4623      	mov	r3, r4
 800189c:	f008 fc6e 	bl	800a17c <HAL_HCD_HC_SubmitRequest>
                           ep_type,  
                           token, 
                           pbuff, 
                           length,
                           do_ping);
  return USBH_OK;   
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}

080018aa <USBH_LL_GetURBState>:
  *            @arg URB_NYET 
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe) 
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f008 ff57 	bl	800a774 <HAL_HCD_HC_GetURBState>
 80018c6:	4603      	mov	r3, r0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <USBH_LL_DriverVBUS>:
  *           0: VBUS Active 
  *           1: VBUS Inactive
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
  if(state == 0)
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d105      	bne.n	80018ee <USBH_LL_DriverVBUS+0x1e>
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2104      	movs	r1, #4
 80018e6:	4808      	ldr	r0, [pc, #32]	@ (8001908 <USBH_LL_DriverVBUS+0x38>)
 80018e8:	f008 faae 	bl	8009e48 <HAL_GPIO_WritePin>
 80018ec:	e004      	b.n	80018f8 <USBH_LL_DriverVBUS+0x28>
  }
  else
  {
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2104      	movs	r1, #4
 80018f2:	4805      	ldr	r0, [pc, #20]	@ (8001908 <USBH_LL_DriverVBUS+0x38>)
 80018f4:	f008 faa8 	bl	8009e48 <HAL_GPIO_WritePin>
  }
  HAL_Delay(200);
 80018f8:	20c8      	movs	r0, #200	@ 0xc8
 80018fa:	f006 f9f7 	bl	8007cec <HAL_Delay>
  return USBH_OK;  
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40020400 	.word	0x40020400

0800190c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index   
  * @param  toggle: toggle (0/1)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	70fb      	strb	r3, [r7, #3]
 8001918:	4613      	mov	r3, r2
 800191a:	70bb      	strb	r3, [r7, #2]
  if(hhcd.hc[pipe].ep_is_in)
 800191c:	78fa      	ldrb	r2, [r7, #3]
 800191e:	4913      	ldr	r1, [pc, #76]	@ (800196c <USBH_LL_SetToggle+0x60>)
 8001920:	4613      	mov	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	3317      	adds	r3, #23
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00a      	beq.n	8001948 <USBH_LL_SetToggle+0x3c>
  {
    hhcd.hc[pipe].toggle_in = toggle;
 8001932:	78fa      	ldrb	r2, [r7, #3]
 8001934:	490d      	ldr	r1, [pc, #52]	@ (800196c <USBH_LL_SetToggle+0x60>)
 8001936:	4613      	mov	r3, r2
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	1a9b      	subs	r3, r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	333c      	adds	r3, #60	@ 0x3c
 8001942:	78ba      	ldrb	r2, [r7, #2]
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e009      	b.n	800195c <USBH_LL_SetToggle+0x50>
  }
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	4908      	ldr	r1, [pc, #32]	@ (800196c <USBH_LL_SetToggle+0x60>)
 800194c:	4613      	mov	r3, r2
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	333d      	adds	r3, #61	@ 0x3d
 8001958:	78ba      	ldrb	r2, [r7, #2]
 800195a:	701a      	strb	r2, [r3, #0]
  }
  return USBH_OK; 
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20001128 	.word	0x20001128

08001970 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
  
  if(hhcd.hc[pipe].ep_is_in)
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	4913      	ldr	r1, [pc, #76]	@ (80019d0 <USBH_LL_GetToggle+0x60>)
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	3317      	adds	r3, #23
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <USBH_LL_GetToggle+0x3c>
  {
    toggle = hhcd.hc[pipe].toggle_in;
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	490d      	ldr	r1, [pc, #52]	@ (80019d0 <USBH_LL_GetToggle+0x60>)
 800199a:	4613      	mov	r3, r2
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	333c      	adds	r3, #60	@ 0x3c
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	e009      	b.n	80019c0 <USBH_LL_GetToggle+0x50>
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <USBH_LL_GetToggle+0x60>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	333d      	adds	r3, #61	@ 0x3d
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	73fb      	strb	r3, [r7, #15]
  }
  return toggle; 
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20001128 	.word	0x20001128

080019d4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);  
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f006 f985 	bl	8007cec <HAL_Delay>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	4619      	mov	r1, r3
 8001a16:	4808      	ldr	r0, [pc, #32]	@ (8001a38 <USBH_status+0x34>)
 8001a18:	f014 fc68 	bl	80162ec <USBH_MSC_UnitIsReady>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <USBH_status+0x24>
  {
    res = RES_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	e001      	b.n	8001a2c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000c10 	.word	0x20000c10

08001a3c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	@ 0x50
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d02d      	beq.n	8001abe <USBH_read+0x82>
 8001a62:	4b35      	ldr	r3, [pc, #212]	@ (8001b38 <USBH_read+0xfc>)
 8001a64:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001a68:	799b      	ldrb	r3, [r3, #6]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d027      	beq.n	8001abe <USBH_read+0x82>
  {
    while ((count--)&&(status == USBH_OK))
 8001a6e:	e01a      	b.n	8001aa6 <USBH_read+0x6a>
    {
      status = USBH_MSC_Read(&hUSBHost, lun, sector + count, (uint8_t *)scratch, 1);
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	441a      	add	r2, r3
 8001a76:	7bf9      	ldrb	r1, [r7, #15]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b3c <USBH_read+0x100>)
 8001a7e:	482e      	ldr	r0, [pc, #184]	@ (8001b38 <USBH_read+0xfc>)
 8001a80:	f014 fc88 	bl	8016394 <USBH_MSC_Read>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

      if(status == USBH_OK)
 8001a8a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d113      	bne.n	8001aba <USBH_read+0x7e>
      {
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9e:	4927      	ldr	r1, [pc, #156]	@ (8001b3c <USBH_read+0x100>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f019 fe16 	bl	801b6d2 <memcpy>
    while ((count--)&&(status == USBH_OK))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	1e5a      	subs	r2, r3, #1
 8001aaa:	603a      	str	r2, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d012      	beq.n	8001ad6 <USBH_read+0x9a>
 8001ab0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0db      	beq.n	8001a70 <USBH_read+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001ab8:	e00d      	b.n	8001ad6 <USBH_read+0x9a>
      }
      else
      {
        break;
 8001aba:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001abc:	e00b      	b.n	8001ad6 <USBH_read+0x9a>
      }
    }
  }
  else
  {
    status = USBH_MSC_Read(&hUSBHost, lun, sector, buff, count);
 8001abe:	7bf9      	ldrb	r1, [r7, #15]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	481b      	ldr	r0, [pc, #108]	@ (8001b38 <USBH_read+0xfc>)
 8001aca:	f014 fc63 	bl	8016394 <USBH_MSC_Read>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8001ad4:	e000      	b.n	8001ad8 <USBH_read+0x9c>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001ad6:	bf00      	nop
  }

  if(status == USBH_OK)
 8001ad8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d103      	bne.n	8001ae8 <USBH_read+0xac>
  {
    res = RES_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001ae6:	e020      	b.n	8001b2a <USBH_read+0xee>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 8001ae8:	f107 0210 	add.w	r2, r7, #16
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4811      	ldr	r0, [pc, #68]	@ (8001b38 <USBH_read+0xfc>)
 8001af2:	f014 fc26 	bl	8016342 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8001af6:	7f7b      	ldrb	r3, [r7, #29]
 8001af8:	2b3a      	cmp	r3, #58	@ 0x3a
 8001afa:	d005      	beq.n	8001b08 <USBH_read+0xcc>
 8001afc:	2b3a      	cmp	r3, #58	@ 0x3a
 8001afe:	dc10      	bgt.n	8001b22 <USBH_read+0xe6>
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d001      	beq.n	8001b08 <USBH_read+0xcc>
 8001b04:	2b28      	cmp	r3, #40	@ 0x28
 8001b06:	d10c      	bne.n	8001b22 <USBH_read+0xe6>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
 8001b08:	480d      	ldr	r0, [pc, #52]	@ (8001b40 <USBH_read+0x104>)
 8001b0a:	f019 fbbd 	bl	801b288 <iprintf>
 8001b0e:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <USBH_read+0x108>)
 8001b10:	f019 fbba 	bl	801b288 <iprintf>
 8001b14:	200a      	movs	r0, #10
 8001b16:	f019 fbc9 	bl	801b2ac <putchar>
      res = RES_NOTRDY;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8001b20:	e003      	b.n	8001b2a <USBH_read+0xee>

    default:
      res = RES_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8001b28:	bf00      	nop
    }
  }

  return res;
 8001b2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3748      	adds	r7, #72	@ 0x48
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000c10 	.word	0x20000c10
 8001b3c:	20001508 	.word	0x20001508
 8001b40:	0801ce38 	.word	0x0801ce38
 8001b44:	0801ce40 	.word	0x0801ce40

08001b48 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b094      	sub	sp, #80	@ 0x50
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4603      	mov	r3, r0
 8001b56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d029      	beq.n	8001bc2 <USBH_write+0x7a>
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c58 <USBH_write+0x110>)
 8001b70:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8001b74:	799b      	ldrb	r3, [r3, #6]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d023      	beq.n	8001bc2 <USBH_write+0x7a>
  {

    while (count--)
 8001b7a:	e01a      	b.n	8001bb2 <USBH_write+0x6a>
    {
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	025b      	lsls	r3, r3, #9
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	4413      	add	r3, r2
 8001b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4834      	ldr	r0, [pc, #208]	@ (8001c5c <USBH_write+0x114>)
 8001b8c:	f019 fda1 	bl	801b6d2 <memcpy>

      status = USBH_MSC_Write(&hUSBHost, lun, sector + count, (BYTE *)scratch, 1) ;
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	441a      	add	r2, r3
 8001b96:	7bf9      	ldrb	r1, [r7, #15]
 8001b98:	2301      	movs	r3, #1
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <USBH_write+0x114>)
 8001b9e:	482e      	ldr	r0, [pc, #184]	@ (8001c58 <USBH_write+0x110>)
 8001ba0:	f014 fc58 	bl	8016454 <USBH_MSC_Write>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
      if(status == USBH_FAIL)
 8001baa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d005      	beq.n	8001bbe <USBH_write+0x76>
    while (count--)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	1e5a      	subs	r2, r3, #1
 8001bb6:	603a      	str	r2, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1df      	bne.n	8001b7c <USBH_write+0x34>
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001bbc:	e00c      	b.n	8001bd8 <USBH_write+0x90>
      {
        break;
 8001bbe:	bf00      	nop
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 8001bc0:	e00a      	b.n	8001bd8 <USBH_write+0x90>
      }
    }
  }
  else
  {
    status = USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count);
 8001bc2:	7bf9      	ldrb	r1, [r7, #15]
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4822      	ldr	r0, [pc, #136]	@ (8001c58 <USBH_write+0x110>)
 8001bce:	f014 fc41 	bl	8016454 <USBH_MSC_Write>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  }

  if(status == USBH_OK)
 8001bd8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d103      	bne.n	8001be8 <USBH_write+0xa0>
  {
    res = RES_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001be6:	e031      	b.n	8001c4c <USBH_write+0x104>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 8001be8:	f107 0210 	add.w	r2, r7, #16
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4819      	ldr	r0, [pc, #100]	@ (8001c58 <USBH_write+0x110>)
 8001bf2:	f014 fba6 	bl	8016342 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8001bf6:	7f7b      	ldrb	r3, [r7, #29]
 8001bf8:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bfa:	d016      	beq.n	8001c2a <USBH_write+0xe2>
 8001bfc:	2b3a      	cmp	r3, #58	@ 0x3a
 8001bfe:	dc21      	bgt.n	8001c44 <USBH_write+0xfc>
 8001c00:	2b28      	cmp	r3, #40	@ 0x28
 8001c02:	d012      	beq.n	8001c2a <USBH_write+0xe2>
 8001c04:	2b28      	cmp	r3, #40	@ 0x28
 8001c06:	dc1d      	bgt.n	8001c44 <USBH_write+0xfc>
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d00e      	beq.n	8001c2a <USBH_write+0xe2>
 8001c0c:	2b27      	cmp	r3, #39	@ 0x27
 8001c0e:	d119      	bne.n	8001c44 <USBH_write+0xfc>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
 8001c10:	4813      	ldr	r0, [pc, #76]	@ (8001c60 <USBH_write+0x118>)
 8001c12:	f019 fb39 	bl	801b288 <iprintf>
 8001c16:	4813      	ldr	r0, [pc, #76]	@ (8001c64 <USBH_write+0x11c>)
 8001c18:	f019 fb36 	bl	801b288 <iprintf>
 8001c1c:	200a      	movs	r0, #10
 8001c1e:	f019 fb45 	bl	801b2ac <putchar>
      res = RES_WRPRT;
 8001c22:	2302      	movs	r3, #2
 8001c24:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8001c28:	e010      	b.n	8001c4c <USBH_write+0x104>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
 8001c2a:	480d      	ldr	r0, [pc, #52]	@ (8001c60 <USBH_write+0x118>)
 8001c2c:	f019 fb2c 	bl	801b288 <iprintf>
 8001c30:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <USBH_write+0x120>)
 8001c32:	f019 fb29 	bl	801b288 <iprintf>
 8001c36:	200a      	movs	r0, #10
 8001c38:	f019 fb38 	bl	801b2ac <putchar>
      res = RES_NOTRDY;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8001c42:	e003      	b.n	8001c4c <USBH_write+0x104>

    default:
      res = RES_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8001c4a:	bf00      	nop
    }
  }

  return res;
 8001c4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3748      	adds	r7, #72	@ 0x48
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000c10 	.word	0x20000c10
 8001c5c:	20001508 	.word	0x20001508
 8001c60:	0801ce38 	.word	0x0801ce38
 8001c64:	0801ce58 	.word	0x0801ce58
 8001c68:	0801ce40 	.word	0x0801ce40

08001c6c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b090      	sub	sp, #64	@ 0x40
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	603a      	str	r2, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d852      	bhi.n	8001d2e <USBH_ioctl+0xc2>
 8001c88:	a201      	add	r2, pc, #4	@ (adr r2, 8001c90 <USBH_ioctl+0x24>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001ca9 	.word	0x08001ca9
 8001c98:	08001cd3 	.word	0x08001cd3
 8001c9c:	08001cff 	.word	0x08001cff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8001ca6:	e045      	b.n	8001d34 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8001ca8:	f107 0208 	add.w	r2, r7, #8
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4823      	ldr	r0, [pc, #140]	@ (8001d40 <USBH_ioctl+0xd4>)
 8001cb2:	f014 fb46 	bl	8016342 <USBH_MSC_GetLUNInfo>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d106      	bne.n	8001cca <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8001cc8:	e034      	b.n	8001d34 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8001cd0:	e030      	b.n	8001d34 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8001cd2:	f107 0208 	add.w	r2, r7, #8
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4819      	ldr	r0, [pc, #100]	@ (8001d40 <USBH_ioctl+0xd4>)
 8001cdc:	f014 fb31 	bl	8016342 <USBH_MSC_GetLUNInfo>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d107      	bne.n	8001cf6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8001ce6:	8a3b      	ldrh	r3, [r7, #16]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8001cf4:	e01e      	b.n	8001d34 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8001cfc:	e01a      	b.n	8001d34 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8001cfe:	f107 0208 	add.w	r2, r7, #8
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4619      	mov	r1, r3
 8001d06:	480e      	ldr	r0, [pc, #56]	@ (8001d40 <USBH_ioctl+0xd4>)
 8001d08:	f014 fb1b 	bl	8016342 <USBH_MSC_GetLUNInfo>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8001d12:	8a3b      	ldrh	r3, [r7, #16]
 8001d14:	0a5b      	lsrs	r3, r3, #9
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8001d24:	e006      	b.n	8001d34 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8001d2c:	e002      	b.n	8001d34 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8001d2e:	2304      	movs	r3, #4
 8001d30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 8001d34:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3740      	adds	r7, #64	@ 0x40
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000c10 	.word	0x20000c10

08001d44 <AUDIO_PLAYER_Init>:
  * @brief  Initializes Audio Interface.
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, uwVolume, I2S_AUDIOFREQ_48K) == 0)
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <AUDIO_PLAYER_Init+0x28>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001d52:	4619      	mov	r1, r3
 8001d54:	2004      	movs	r0, #4
 8001d56:	f003 f8ab 	bl	8004eb0 <BSP_AUDIO_OUT_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <AUDIO_PLAYER_Init+0x20>
  {
    return AUDIO_ERROR_NONE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <AUDIO_PLAYER_Init+0x22>
  }
  else
  {
    return AUDIO_ERROR_IO;
 8001d64:	2301      	movs	r3, #1
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000004 	.word	0x20000004

08001d70 <AUDIO_PLAYER_Start>:
  * @brief  Starts Audio streaming.    
  * @param  idx: File index
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_PLAYER_Start(uint8_t idx)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  uint32_t bytesread;
  
  f_close(&WavFile);
 8001d7a:	4828      	ldr	r0, [pc, #160]	@ (8001e1c <AUDIO_PLAYER_Start+0xac>)
 8001d7c:	f013 f876 	bl	8014e6c <f_close>
  if(AUDIO_GetWavObjectNumber() > idx)
 8001d80:	f7fe fd8a 	bl	8000898 <AUDIO_GetWavObjectNumber>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d93f      	bls.n	8001e10 <AUDIO_PLAYER_Start+0xa0>
  { 
    GetFileInfo(idx, &WaveFormat);
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4922      	ldr	r1, [pc, #136]	@ (8001e20 <AUDIO_PLAYER_Start+0xb0>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fa42 	bl	8002220 <GetFileInfo>
    
    /*Adjust the Audio frequency */
    PlayerInit(WaveFormat.SampleRate); 
 8001d9c:	4b20      	ldr	r3, [pc, #128]	@ (8001e20 <AUDIO_PLAYER_Start+0xb0>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fb19 	bl	80023d8 <PlayerInit>
    
    BufferCtl.state = BUFFER_OFFSET_NONE;
 8001da6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <AUDIO_PLAYER_Start+0xb4>)
 8001da8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
    
    /* Get Data from USB Flash Disk */
    f_lseek(&WavFile, 0);
 8001db0:	2100      	movs	r1, #0
 8001db2:	481a      	ldr	r0, [pc, #104]	@ (8001e1c <AUDIO_PLAYER_Start+0xac>)
 8001db4:	f013 f884 	bl	8014ec0 <f_lseek>
    
    /* Fill whole buffer at first time */
    if(f_read(&WavFile, 
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc0:	4918      	ldr	r1, [pc, #96]	@ (8001e24 <AUDIO_PLAYER_Start+0xb4>)
 8001dc2:	4816      	ldr	r0, [pc, #88]	@ (8001e1c <AUDIO_PLAYER_Start+0xac>)
 8001dc4:	f012 fd20 	bl	8014808 <f_read>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d120      	bne.n	8001e10 <AUDIO_PLAYER_Start+0xa0>
              &BufferCtl.buff[0], 
              AUDIO_OUT_BUFFER_SIZE, 
              (void *)&bytesread) == FR_OK)
    {
      AudioState = AUDIO_STATE_PLAY;
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <AUDIO_PLAYER_Start+0xb8>)
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	701a      	strb	r2, [r3, #0]
      AUDIO_PlaybackDisplayButtons();
 8001dd4:	f000 fb1c 	bl	8002410 <AUDIO_PlaybackDisplayButtons>
      BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PLAY ]", LEFT_MODE);
 8001dd8:	f004 f9ae 	bl	8006138 <BSP_LCD_GetFont>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	88db      	ldrh	r3, [r3, #6]
 8001de0:	461a      	mov	r2, r3
 8001de2:	00d2      	lsls	r2, r2, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	b299      	uxth	r1, r3
 8001de8:	2303      	movs	r3, #3
 8001dea:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <AUDIO_PLAYER_Start+0xbc>)
 8001dec:	20fa      	movs	r0, #250	@ 0xfa
 8001dee:	f004 fa89 	bl	8006304 <BSP_LCD_DisplayStringAt>
      { 
        if(bytesread != 0)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00b      	beq.n	8001e10 <AUDIO_PLAYER_Start+0xa0>
        {
          BSP_AUDIO_OUT_Play((uint16_t*)&BufferCtl.buff[0], AUDIO_OUT_BUFFER_SIZE);
 8001df8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dfc:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <AUDIO_PLAYER_Start+0xb4>)
 8001dfe:	f003 f8ab 	bl	8004f58 <BSP_AUDIO_OUT_Play>
          BufferCtl.fptr = bytesread;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4a07      	ldr	r2, [pc, #28]	@ (8001e24 <AUDIO_PLAYER_Start+0xb4>)
 8001e06:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001e0a:	6053      	str	r3, [r2, #4]
          return AUDIO_ERROR_NONE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e000      	b.n	8001e12 <AUDIO_PLAYER_Start+0xa2>
        }
      }
    }
  }
  return AUDIO_ERROR_IO;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20003740 	.word	0x20003740
 8001e20:	20003714 	.word	0x20003714
 8001e24:	20001708 	.word	0x20001708
 8001e28:	20001106 	.word	0x20001106
 8001e2c:	0801ce78 	.word	0x0801ce78

08001e30 <AUDIO_PLAYER_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_PLAYER_Process(void)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b089      	sub	sp, #36	@ 0x24
 8001e34:	af00      	add	r7, sp, #0
  uint32_t bytesread, elapsed_time;
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	77fb      	strb	r3, [r7, #31]
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  
  switch(AudioState)
 8001e3a:	4bbe      	ldr	r3, [pc, #760]	@ (8002134 <AUDIO_PLAYER_Process+0x304>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3b03      	subs	r3, #3
 8001e40:	2b0b      	cmp	r3, #11
 8001e42:	f200 81b6 	bhi.w	80021b2 <AUDIO_PLAYER_Process+0x382>
 8001e46:	a201      	add	r2, pc, #4	@ (adr r2, 8001e4c <AUDIO_PLAYER_Process+0x1c>)
 8001e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e4c:	08001e7d 	.word	0x08001e7d
 8001e50:	080021b3 	.word	0x080021b3
 8001e54:	080021b3 	.word	0x080021b3
 8001e58:	08001fd1 	.word	0x08001fd1
 8001e5c:	08002011 	.word	0x08002011
 8001e60:	080021b3 	.word	0x080021b3
 8001e64:	080021b3 	.word	0x080021b3
 8001e68:	08001fa9 	.word	0x08001fa9
 8001e6c:	08002053 	.word	0x08002053
 8001e70:	080020a3 	.word	0x080020a3
 8001e74:	080020ed 	.word	0x080020ed
 8001e78:	0800216d 	.word	0x0800216d
  {
  case AUDIO_STATE_PLAY:
    if(BufferCtl.fptr >= WaveFormat.FileSize)
 8001e7c:	4bae      	ldr	r3, [pc, #696]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001e7e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4bad      	ldr	r3, [pc, #692]	@ (800213c <AUDIO_PLAYER_Process+0x30c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d305      	bcc.n	8001e98 <AUDIO_PLAYER_Process+0x68>
    {
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001e8c:	2002      	movs	r0, #2
 8001e8e:	f003 f8df 	bl	8005050 <BSP_AUDIO_OUT_Stop>
      AudioState = AUDIO_STATE_NEXT;
 8001e92:	4ba8      	ldr	r3, [pc, #672]	@ (8002134 <AUDIO_PLAYER_Process+0x304>)
 8001e94:	2206      	movs	r2, #6
 8001e96:	701a      	strb	r2, [r3, #0]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_HALF)
 8001e98:	4ba7      	ldr	r3, [pc, #668]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001e9a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d11e      	bne.n	8001ee2 <AUDIO_PLAYER_Process+0xb2>
    {
      if(f_read(&WavFile, 
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001eac:	49a2      	ldr	r1, [pc, #648]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001eae:	48a4      	ldr	r0, [pc, #656]	@ (8002140 <AUDIO_PLAYER_Process+0x310>)
 8001eb0:	f012 fcaa 	bl	8014808 <f_read>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d004      	beq.n	8001ec4 <AUDIO_PLAYER_Process+0x94>
                &BufferCtl.buff[0], 
                AUDIO_OUT_BUFFER_SIZE/2, 
                (void *)&bytesread) != FR_OK)
      { 
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW); 
 8001eba:	2002      	movs	r0, #2
 8001ebc:	f003 f8c8 	bl	8005050 <BSP_AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e17a      	b.n	80021ba <AUDIO_PLAYER_Process+0x38a>
      } 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001ec4:	4b9c      	ldr	r3, [pc, #624]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001ec6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001ece:	4b9a      	ldr	r3, [pc, #616]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001ed0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a97      	ldr	r2, [pc, #604]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001edc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001ee0:	6053      	str	r3, [r2, #4]
    }
    
    if(BufferCtl.state == BUFFER_OFFSET_FULL)
 8001ee2:	4b95      	ldr	r3, [pc, #596]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001ee4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d11e      	bne.n	8001f2c <AUDIO_PLAYER_Process+0xfc>
    {
      if(f_read(&WavFile, 
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ef6:	4993      	ldr	r1, [pc, #588]	@ (8002144 <AUDIO_PLAYER_Process+0x314>)
 8001ef8:	4891      	ldr	r0, [pc, #580]	@ (8002140 <AUDIO_PLAYER_Process+0x310>)
 8001efa:	f012 fc85 	bl	8014808 <f_read>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <AUDIO_PLAYER_Process+0xde>
                &BufferCtl.buff[AUDIO_OUT_BUFFER_SIZE /2], 
                AUDIO_OUT_BUFFER_SIZE/2, 
                (void *)&bytesread) != FR_OK)
      { 
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW); 
 8001f04:	2002      	movs	r0, #2
 8001f06:	f003 f8a3 	bl	8005050 <BSP_AUDIO_OUT_Stop>
        return AUDIO_ERROR_IO;       
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e155      	b.n	80021ba <AUDIO_PLAYER_Process+0x38a>
      } 
 
      BufferCtl.state = BUFFER_OFFSET_NONE;
 8001f0e:	4b8a      	ldr	r3, [pc, #552]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001f10:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]
      BufferCtl.fptr += bytesread; 
 8001f18:	4b87      	ldr	r3, [pc, #540]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001f1a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	4413      	add	r3, r2
 8001f24:	4a84      	ldr	r2, [pc, #528]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001f26:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001f2a:	6053      	str	r3, [r2, #4]
    }
    
    /* Display elapsed time */
    elapsed_time = BufferCtl.fptr / WaveFormat.ByteRate; 
 8001f2c:	4b82      	ldr	r3, [pc, #520]	@ (8002138 <AUDIO_PLAYER_Process+0x308>)
 8001f2e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4b81      	ldr	r3, [pc, #516]	@ (800213c <AUDIO_PLAYER_Process+0x30c>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	61bb      	str	r3, [r7, #24]
    if(prev_elapsed_time != elapsed_time)
 8001f3e:	4b82      	ldr	r3, [pc, #520]	@ (8002148 <AUDIO_PLAYER_Process+0x318>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d02c      	beq.n	8001fa2 <AUDIO_PLAYER_Process+0x172>
    {
      prev_elapsed_time = elapsed_time;
 8001f48:	4a7f      	ldr	r2, [pc, #508]	@ (8002148 <AUDIO_PLAYER_Process+0x318>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	6013      	str	r3, [r2, #0]
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4a7e      	ldr	r2, [pc, #504]	@ (800214c <AUDIO_PLAYER_Process+0x31c>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	095b      	lsrs	r3, r3, #5
 8001f58:	461c      	mov	r4, r3
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	4b7b      	ldr	r3, [pc, #492]	@ (800214c <AUDIO_PLAYER_Process+0x31c>)
 8001f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f62:	095a      	lsrs	r2, r3, #5
 8001f64:	4613      	mov	r3, r2
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	1aca      	subs	r2, r1, r3
 8001f6e:	4613      	mov	r3, r2
 8001f70:	1d38      	adds	r0, r7, #4
 8001f72:	4622      	mov	r2, r4
 8001f74:	4976      	ldr	r1, [pc, #472]	@ (8002150 <AUDIO_PLAYER_Process+0x320>)
 8001f76:	f019 f9ff 	bl	801b378 <siprintf>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
 8001f7a:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8001f7e:	f004 f88f 	bl	80060a0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
 8001f82:	f004 f8d9 	bl	8006138 <BSP_LCD_GetFont>
 8001f86:	4603      	mov	r3, r0
 8001f88:	88db      	ldrh	r3, [r3, #6]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	b299      	uxth	r1, r3
 8001f8e:	1d3a      	adds	r2, r7, #4
 8001f90:	2303      	movs	r3, #3
 8001f92:	f240 1007 	movw	r0, #263	@ 0x107
 8001f96:	f004 f9b5 	bl	8006304 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8001f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9e:	f004 f87f 	bl	80060a0 <BSP_LCD_SetTextColor>
    }

    /* Update audio state machine according to touch acquisition */
    AUDIO_AcquireTouchButtons();
 8001fa2:	f000 facd 	bl	8002540 <AUDIO_AcquireTouchButtons>
    break;
 8001fa6:	e107      	b.n	80021b8 <AUDIO_PLAYER_Process+0x388>
    
  case AUDIO_STATE_STOP:
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001fa8:	486a      	ldr	r0, [pc, #424]	@ (8002154 <AUDIO_PLAYER_Process+0x324>)
 8001faa:	f004 f879 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
 8001fae:	233c      	movs	r3, #60	@ 0x3c
 8001fb0:	223c      	movs	r2, #60	@ 0x3c
 8001fb2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8001fb6:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8001fba:	f004 fce9 	bl	8006990 <BSP_LCD_FillRect>
                     TOUCH_STOP_XMAX - TOUCH_STOP_XMIN,
                     TOUCH_STOP_YMAX - TOUCH_STOP_YMIN);
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001fbe:	2002      	movs	r0, #2
 8001fc0:	f003 f846 	bl	8005050 <BSP_AUDIO_OUT_Stop>
    AudioState = AUDIO_STATE_IDLE; 
 8001fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8002134 <AUDIO_PLAYER_Process+0x304>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
    audio_error = AUDIO_ERROR_IO;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	77fb      	strb	r3, [r7, #31]
    break;
 8001fce:	e0f3      	b.n	80021b8 <AUDIO_PLAYER_Process+0x388>
    
  case AUDIO_STATE_NEXT:
    if(++FilePos >= AUDIO_GetWavObjectNumber())
 8001fd0:	4b61      	ldr	r3, [pc, #388]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 8001fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	4b5e      	ldr	r3, [pc, #376]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 8001fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe8:	461c      	mov	r4, r3
 8001fea:	f7fe fc55 	bl	8000898 <AUDIO_GetWavObjectNumber>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	429c      	cmp	r4, r3
 8001ff2:	db02      	blt.n	8001ffa <AUDIO_PLAYER_Process+0x1ca>
    {
      FilePos = 0; 
 8001ff4:	4b58      	ldr	r3, [pc, #352]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	801a      	strh	r2, [r3, #0]
    }
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	f003 f828 	bl	8005050 <BSP_AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002000:	4b55      	ldr	r3, [pc, #340]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 8002002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff feb1 	bl	8001d70 <AUDIO_PLAYER_Start>
    break;    
 800200e:	e0d3      	b.n	80021b8 <AUDIO_PLAYER_Process+0x388>
    
  case AUDIO_STATE_PREVIOUS:
    if(--FilePos < 0)
 8002010:	4b51      	ldr	r3, [pc, #324]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29b      	uxth	r3, r3
 800201c:	b21a      	sxth	r2, r3
 800201e:	4b4e      	ldr	r3, [pc, #312]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 8002020:	801a      	strh	r2, [r3, #0]
 8002022:	4b4d      	ldr	r3, [pc, #308]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 8002024:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da07      	bge.n	800203c <AUDIO_PLAYER_Process+0x20c>
    {
      FilePos = AUDIO_GetWavObjectNumber() - 1; 
 800202c:	f7fe fc34 	bl	8000898 <AUDIO_GetWavObjectNumber>
 8002030:	4603      	mov	r3, r0
 8002032:	3b01      	subs	r3, #1
 8002034:	b29b      	uxth	r3, r3
 8002036:	b21a      	sxth	r2, r3
 8002038:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 800203a:	801a      	strh	r2, [r3, #0]
    }
    BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800203c:	2002      	movs	r0, #2
 800203e:	f003 f807 	bl	8005050 <BSP_AUDIO_OUT_Stop>
    AUDIO_PLAYER_Start(FilePos);
 8002042:	4b45      	ldr	r3, [pc, #276]	@ (8002158 <AUDIO_PLAYER_Process+0x328>)
 8002044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fe90 	bl	8001d70 <AUDIO_PLAYER_Start>
    break;   
 8002050:	e0b2      	b.n	80021b8 <AUDIO_PLAYER_Process+0x388>
    
  case AUDIO_STATE_PAUSE:
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8002052:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8002056:	f004 f823 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PAUSE]", LEFT_MODE);
 800205a:	f004 f86d 	bl	8006138 <BSP_LCD_GetFont>
 800205e:	4603      	mov	r3, r0
 8002060:	88db      	ldrh	r3, [r3, #6]
 8002062:	461a      	mov	r2, r3
 8002064:	00d2      	lsls	r2, r2, #3
 8002066:	4413      	add	r3, r2
 8002068:	b299      	uxth	r1, r3
 800206a:	2303      	movs	r3, #3
 800206c:	4a3b      	ldr	r2, [pc, #236]	@ (800215c <AUDIO_PLAYER_Process+0x32c>)
 800206e:	20fa      	movs	r0, #250	@ 0xfa
 8002070:	f004 f948 	bl	8006304 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red pause rectangles */
 8002074:	4837      	ldr	r0, [pc, #220]	@ (8002154 <AUDIO_PLAYER_Process+0x324>)
 8002076:	f004 f813 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 800207a:	233c      	movs	r3, #60	@ 0x3c
 800207c:	220f      	movs	r2, #15
 800207e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002082:	208c      	movs	r0, #140	@ 0x8c
 8002084:	f004 fc84 	bl	8006990 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8002088:	233c      	movs	r3, #60	@ 0x3c
 800208a:	220f      	movs	r2, #15
 800208c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002090:	20a0      	movs	r0, #160	@ 0xa0
 8002092:	f004 fc7d 	bl	8006990 <BSP_LCD_FillRect>
    BSP_AUDIO_OUT_Pause();
 8002096:	f002 ff93 	bl	8004fc0 <BSP_AUDIO_OUT_Pause>
    AudioState = AUDIO_STATE_WAIT;
 800209a:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <AUDIO_PLAYER_Process+0x304>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
    break;
 80020a0:	e08a      	b.n	80021b8 <AUDIO_PLAYER_Process+0x388>
    
  case AUDIO_STATE_RESUME:
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80020a2:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 80020a6:	f003 fffb 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(250, LINE(9), (uint8_t *)"  [PLAY ]", LEFT_MODE);
 80020aa:	f004 f845 	bl	8006138 <BSP_LCD_GetFont>
 80020ae:	4603      	mov	r3, r0
 80020b0:	88db      	ldrh	r3, [r3, #6]
 80020b2:	461a      	mov	r2, r3
 80020b4:	00d2      	lsls	r2, r2, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	b299      	uxth	r1, r3
 80020ba:	2303      	movs	r3, #3
 80020bc:	4a28      	ldr	r2, [pc, #160]	@ (8002160 <AUDIO_PLAYER_Process+0x330>)
 80020be:	20fa      	movs	r0, #250	@ 0xfa
 80020c0:	f004 f920 	bl	8006304 <BSP_LCD_DisplayStringAt>
                                            /* Display blue cyan pause rectangles */
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 80020c4:	233c      	movs	r3, #60	@ 0x3c
 80020c6:	220f      	movs	r2, #15
 80020c8:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80020cc:	208c      	movs	r0, #140	@ 0x8c
 80020ce:	f004 fc5f 	bl	8006990 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 80020d2:	233c      	movs	r3, #60	@ 0x3c
 80020d4:	220f      	movs	r2, #15
 80020d6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80020da:	20a0      	movs	r0, #160	@ 0xa0
 80020dc:	f004 fc58 	bl	8006990 <BSP_LCD_FillRect>
    BSP_AUDIO_OUT_Resume();
 80020e0:	f002 ff92 	bl	8005008 <BSP_AUDIO_OUT_Resume>
    AudioState = AUDIO_STATE_PLAY;
 80020e4:	4b13      	ldr	r3, [pc, #76]	@ (8002134 <AUDIO_PLAYER_Process+0x304>)
 80020e6:	2203      	movs	r2, #3
 80020e8:	701a      	strb	r2, [r3, #0]
    break;
 80020ea:	e065      	b.n	80021b8 <AUDIO_PLAYER_Process+0x388>
    
  case AUDIO_STATE_VOLUME_UP: 
    if( uwVolume <= 90)
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <AUDIO_PLAYER_Process+0x334>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b5a      	cmp	r3, #90	@ 0x5a
 80020f2:	d804      	bhi.n	80020fe <AUDIO_PLAYER_Process+0x2ce>
    {
      uwVolume += 10;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002164 <AUDIO_PLAYER_Process+0x334>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	330a      	adds	r3, #10
 80020fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002164 <AUDIO_PLAYER_Process+0x334>)
 80020fc:	6013      	str	r3, [r2, #0]
    }
    BSP_AUDIO_OUT_SetVolume(uwVolume);
 80020fe:	4b19      	ldr	r3, [pc, #100]	@ (8002164 <AUDIO_PLAYER_Process+0x334>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f002 ffcf 	bl	80050a8 <BSP_AUDIO_OUT_SetVolume>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800210a:	f04f 30ff 	mov.w	r0, #4294967295
 800210e:	f003 ffc7 	bl	80060a0 <BSP_LCD_SetTextColor>
    sprintf((char *)str,  "Volume : %lu ", uwVolume);
 8002112:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <AUDIO_PLAYER_Process+0x334>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4913      	ldr	r1, [pc, #76]	@ (8002168 <AUDIO_PLAYER_Process+0x338>)
 800211a:	4618      	mov	r0, r3
 800211c:	f019 f92c 	bl	801b378 <siprintf>
    BSP_LCD_DisplayStringAtLine(9, str);
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	4619      	mov	r1, r3
 8002124:	2009      	movs	r0, #9
 8002126:	f004 f9b5 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
    AudioState = AUDIO_STATE_PLAY;
 800212a:	4b02      	ldr	r3, [pc, #8]	@ (8002134 <AUDIO_PLAYER_Process+0x304>)
 800212c:	2203      	movs	r2, #3
 800212e:	701a      	strb	r2, [r3, #0]
    break;
 8002130:	e042      	b.n	80021b8 <AUDIO_PLAYER_Process+0x388>
 8002132:	bf00      	nop
 8002134:	20001106 	.word	0x20001106
 8002138:	20001708 	.word	0x20001708
 800213c:	20003714 	.word	0x20003714
 8002140:	20003740 	.word	0x20003740
 8002144:	20002708 	.word	0x20002708
 8002148:	20000020 	.word	0x20000020
 800214c:	88888889 	.word	0x88888889
 8002150:	0801ce84 	.word	0x0801ce84
 8002154:	ffff0000 	.word	0xffff0000
 8002158:	20003710 	.word	0x20003710
 800215c:	0801ce90 	.word	0x0801ce90
 8002160:	0801ce78 	.word	0x0801ce78
 8002164:	20000004 	.word	0x20000004
 8002168:	0801ce9c 	.word	0x0801ce9c
    
  case AUDIO_STATE_VOLUME_DOWN:    
    if( uwVolume >= 10)
 800216c:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <AUDIO_PLAYER_Process+0x394>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b09      	cmp	r3, #9
 8002172:	d904      	bls.n	800217e <AUDIO_PLAYER_Process+0x34e>
    {
      uwVolume -= 10;
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <AUDIO_PLAYER_Process+0x394>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3b0a      	subs	r3, #10
 800217a:	4a12      	ldr	r2, [pc, #72]	@ (80021c4 <AUDIO_PLAYER_Process+0x394>)
 800217c:	6013      	str	r3, [r2, #0]
    }
    BSP_AUDIO_OUT_SetVolume(uwVolume);
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <AUDIO_PLAYER_Process+0x394>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	f002 ff8f 	bl	80050a8 <BSP_AUDIO_OUT_SetVolume>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 800218a:	f04f 30ff 	mov.w	r0, #4294967295
 800218e:	f003 ff87 	bl	80060a0 <BSP_LCD_SetTextColor>
    sprintf((char *)str,  "Volume : %lu ", uwVolume);
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <AUDIO_PLAYER_Process+0x394>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	490b      	ldr	r1, [pc, #44]	@ (80021c8 <AUDIO_PLAYER_Process+0x398>)
 800219a:	4618      	mov	r0, r3
 800219c:	f019 f8ec 	bl	801b378 <siprintf>
    BSP_LCD_DisplayStringAtLine(9, str);
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	4619      	mov	r1, r3
 80021a4:	2009      	movs	r0, #9
 80021a6:	f004 f975 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
    AudioState = AUDIO_STATE_PLAY;
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <AUDIO_PLAYER_Process+0x39c>)
 80021ac:	2203      	movs	r2, #3
 80021ae:	701a      	strb	r2, [r3, #0]
    break;
 80021b0:	e002      	b.n	80021b8 <AUDIO_PLAYER_Process+0x388>
  case AUDIO_STATE_WAIT:
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT:    
  default:
    /* Update audio state machine according to touch acquisition */
    AUDIO_AcquireTouchButtons();
 80021b2:	f000 f9c5 	bl	8002540 <AUDIO_AcquireTouchButtons>
    break;
 80021b6:	bf00      	nop
  }
  return audio_error;
 80021b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd90      	pop	{r4, r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000004 	.word	0x20000004
 80021c8:	0801ce9c 	.word	0x0801ce9c
 80021cc:	20001106 	.word	0x20001106

080021d0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d104      	bne.n	80021e6 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_FULL;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 80021de:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
  }
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	20001106 	.word	0x20001106
 80021f4:	20001708 	.word	0x20001708

080021f8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  if(AudioState == AUDIO_STATE_PLAY)
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d104      	bne.n	800220e <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x16>
  {
    BufferCtl.state = BUFFER_OFFSET_HALF;
 8002204:	4b05      	ldr	r3, [pc, #20]	@ (800221c <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8002206:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
  }
}
 800220e:	bf00      	nop
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	20001106 	.word	0x20001106
 800221c:	20001708 	.word	0x20001708

08002220 <GetFileInfo>:
  * @param  file_idx: File index
  * @param  info: Pointer to WAV file info
  * @retval Audio error
  */
static AUDIO_ErrorTypeDef GetFileInfo(uint16_t file_idx, WAVE_FormatTypeDef *info)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b098      	sub	sp, #96	@ 0x60
 8002224:	af02      	add	r7, sp, #8
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	80fb      	strh	r3, [r7, #6]
  uint32_t bytesread;
  uint32_t duration;
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 30];
  
  if(f_open(&WavFile, (char *)FileList.file[file_idx].name, FA_OPEN_EXISTING | FA_READ) == FR_OK) 
 800222c:	88fa      	ldrh	r2, [r7, #6]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	4a5d      	ldr	r2, [pc, #372]	@ (80023b0 <GetFileInfo+0x190>)
 800223a:	4413      	add	r3, r2
 800223c:	3301      	adds	r3, #1
 800223e:	2201      	movs	r2, #1
 8002240:	4619      	mov	r1, r3
 8002242:	485c      	ldr	r0, [pc, #368]	@ (80023b4 <GetFileInfo+0x194>)
 8002244:	f012 f926 	bl	8014494 <f_open>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80aa 	bne.w	80023a4 <GetFileInfo+0x184>
  {
    /* Fill the buffer to Send */
    if(f_read(&WavFile, info, sizeof(WaveFormat), (void *)&bytesread) == FR_OK)
 8002250:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002254:	222c      	movs	r2, #44	@ 0x2c
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	4856      	ldr	r0, [pc, #344]	@ (80023b4 <GetFileInfo+0x194>)
 800225a:	f012 fad5 	bl	8014808 <f_read>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	f040 809c 	bne.w	800239e <GetFileInfo+0x17e>
    {
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8002266:	f04f 30ff 	mov.w	r0, #4294967295
 800226a:	f003 ff19 	bl	80060a0 <BSP_LCD_SetTextColor>
      sprintf((char *)str, "Playing file (%d/%d): %s", 
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	1c59      	adds	r1, r3, #1
              file_idx + 1, FileList.ptr,
 8002272:	4b4f      	ldr	r3, [pc, #316]	@ (80023b0 <GetFileInfo+0x190>)
 8002274:	f8b3 33d8 	ldrh.w	r3, [r3, #984]	@ 0x3d8
      sprintf((char *)str, "Playing file (%d/%d): %s", 
 8002278:	461c      	mov	r4, r3
              (char *)FileList.file[file_idx].name);
 800227a:	88fa      	ldrh	r2, [r7, #6]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	4a4a      	ldr	r2, [pc, #296]	@ (80023b0 <GetFileInfo+0x190>)
 8002288:	4413      	add	r3, r2
 800228a:	3301      	adds	r3, #1
      sprintf((char *)str, "Playing file (%d/%d): %s", 
 800228c:	f107 0008 	add.w	r0, r7, #8
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	4623      	mov	r3, r4
 8002294:	460a      	mov	r2, r1
 8002296:	4948      	ldr	r1, [pc, #288]	@ (80023b8 <GetFileInfo+0x198>)
 8002298:	f019 f86e 	bl	801b378 <siprintf>
      BSP_LCD_ClearStringLine(4);
 800229c:	2004      	movs	r0, #4
 800229e:	f003 ff89 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(4, str);
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	4619      	mov	r1, r3
 80022a8:	2004      	movs	r0, #4
 80022aa:	f004 f8f3 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
 80022ae:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 80022b2:	f003 fef5 	bl	80060a0 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Sample rate : %d Hz", (int)(info->SampleRate));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f107 0308 	add.w	r3, r7, #8
 80022c0:	493e      	ldr	r1, [pc, #248]	@ (80023bc <GetFileInfo+0x19c>)
 80022c2:	4618      	mov	r0, r3
 80022c4:	f019 f858 	bl	801b378 <siprintf>
      BSP_LCD_ClearStringLine(6);
 80022c8:	2006      	movs	r0, #6
 80022ca:	f003 ff73 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(6, str);
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	4619      	mov	r1, r3
 80022d4:	2006      	movs	r0, #6
 80022d6:	f004 f8dd 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      
      sprintf((char *)str,  "Channels number : %d", info->NbrChannels);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	8adb      	ldrh	r3, [r3, #22]
 80022de:	461a      	mov	r2, r3
 80022e0:	f107 0308 	add.w	r3, r7, #8
 80022e4:	4936      	ldr	r1, [pc, #216]	@ (80023c0 <GetFileInfo+0x1a0>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f019 f846 	bl	801b378 <siprintf>
      BSP_LCD_ClearStringLine(7);      
 80022ec:	2007      	movs	r0, #7
 80022ee:	f003 ff61 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
 80022f2:	f107 0308 	add.w	r3, r7, #8
 80022f6:	4619      	mov	r1, r3
 80022f8:	2007      	movs	r0, #7
 80022fa:	f004 f8cb 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      
      duration = info->FileSize / info->ByteRate; 
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	657b      	str	r3, [r7, #84]	@ 0x54
      sprintf((char *)str, "File Size : %d KB [%02d:%02d]", (int)(info->FileSize/1024), (int)(duration/60), (int)(duration%60));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0a9b      	lsrs	r3, r3, #10
 8002312:	461c      	mov	r4, r3
 8002314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002316:	4a2b      	ldr	r2, [pc, #172]	@ (80023c4 <GetFileInfo+0x1a4>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	461d      	mov	r5, r3
 8002320:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002322:	4b28      	ldr	r3, [pc, #160]	@ (80023c4 <GetFileInfo+0x1a4>)
 8002324:	fba3 2301 	umull	r2, r3, r3, r1
 8002328:	095a      	lsrs	r2, r3, #5
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	1aca      	subs	r2, r1, r3
 8002334:	4613      	mov	r3, r2
 8002336:	f107 0008 	add.w	r0, r7, #8
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	462b      	mov	r3, r5
 800233e:	4622      	mov	r2, r4
 8002340:	4921      	ldr	r1, [pc, #132]	@ (80023c8 <GetFileInfo+0x1a8>)
 8002342:	f019 f819 	bl	801b378 <siprintf>
      BSP_LCD_ClearStringLine(8);
 8002346:	2008      	movs	r0, #8
 8002348:	f003 ff34 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(8, str);
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	4619      	mov	r1, r3
 8002352:	2008      	movs	r0, #8
 8002354:	f004 f89e 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      BSP_LCD_DisplayStringAt(263, LINE(8), (uint8_t *)"[00:00]", LEFT_MODE);
 8002358:	f003 feee 	bl	8006138 <BSP_LCD_GetFont>
 800235c:	4603      	mov	r3, r0
 800235e:	88db      	ldrh	r3, [r3, #6]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	b299      	uxth	r1, r3
 8002364:	2303      	movs	r3, #3
 8002366:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <GetFileInfo+0x1ac>)
 8002368:	f240 1007 	movw	r0, #263	@ 0x107
 800236c:	f003 ffca 	bl	8006304 <BSP_LCD_DisplayStringAt>
 
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f003 fe94 	bl	80060a0 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Volume : %lu", uwVolume);
 8002378:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <GetFileInfo+0x1b0>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	4914      	ldr	r1, [pc, #80]	@ (80023d4 <GetFileInfo+0x1b4>)
 8002382:	4618      	mov	r0, r3
 8002384:	f018 fff8 	bl	801b378 <siprintf>
      BSP_LCD_ClearStringLine(9);      
 8002388:	2009      	movs	r0, #9
 800238a:	f003 ff13 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(9, str);
 800238e:	f107 0308 	add.w	r3, r7, #8
 8002392:	4619      	mov	r1, r3
 8002394:	2009      	movs	r0, #9
 8002396:	f004 f87d 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      return AUDIO_ERROR_NONE;
 800239a:	2300      	movs	r3, #0
 800239c:	e003      	b.n	80023a6 <GetFileInfo+0x186>
    }
    f_close(&WavFile);
 800239e:	4805      	ldr	r0, [pc, #20]	@ (80023b4 <GetFileInfo+0x194>)
 80023a0:	f012 fd64 	bl	8014e6c <f_close>
  }
  return AUDIO_ERROR_IO;
 80023a4:	2301      	movs	r3, #1
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3758      	adds	r7, #88	@ 0x58
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bdb0      	pop	{r4, r5, r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000604 	.word	0x20000604
 80023b4:	20003740 	.word	0x20003740
 80023b8:	0801ceac 	.word	0x0801ceac
 80023bc:	0801cec8 	.word	0x0801cec8
 80023c0:	0801cedc 	.word	0x0801cedc
 80023c4:	88888889 	.word	0x88888889
 80023c8:	0801cef4 	.word	0x0801cef4
 80023cc:	0801cf14 	.word	0x0801cf14
 80023d0:	20000004 	.word	0x20000004
 80023d4:	0801cf1c 	.word	0x0801cf1c

080023d8 <PlayerInit>:
  * @brief  Initializes the Wave player.
  * @param  AudioFreq: Audio sampling frequency
  * @retval None
  */
static uint8_t PlayerInit(uint32_t AudioFreq)
{ 
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
  if(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_BOTH, uwVolume, AudioFreq) != 0)
 80023e0:	4b0a      	ldr	r3, [pc, #40]	@ (800240c <PlayerInit+0x34>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4619      	mov	r1, r3
 80023ea:	2003      	movs	r0, #3
 80023ec:	f002 fd60 	bl	8004eb0 <BSP_AUDIO_OUT_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <PlayerInit+0x22>
  {
    return 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e003      	b.n	8002402 <PlayerInit+0x2a>
  }
  else
  {
    BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 80023fa:	2005      	movs	r0, #5
 80023fc:	f002 fe6e 	bl	80050dc <BSP_AUDIO_OUT_SetAudioFrameSlot>
    return 0;
 8002400:	2300      	movs	r3, #0
  } 
}
 8002402:	4618      	mov	r0, r3
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000004 	.word	0x20000004

08002410 <AUDIO_PlaybackDisplayButtons>:
  * @brief  Display interface touch screen buttons
  * @param  None
  * @retval None
  */
static void AUDIO_PlaybackDisplayButtons(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
 8002414:	4843      	ldr	r0, [pc, #268]	@ (8002524 <AUDIO_PlaybackDisplayButtons+0x114>)
 8002416:	f003 fe75 	bl	8006104 <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(14);            /* Clear dedicated zone */
 800241a:	200e      	movs	r0, #14
 800241c:	f003 feca 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(15);           
 8002420:	200f      	movs	r0, #15
 8002422:	f003 fec7 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(16);
 8002426:	2010      	movs	r0, #16
 8002428:	f003 fec4 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(17);
 800242c:	2011      	movs	r0, #17
 800242e:	f003 fec1 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(18);
 8002432:	2012      	movs	r0, #18
 8002434:	f003 febe 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(19);
 8002438:	2013      	movs	r0, #19
 800243a:	f003 febb 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(20);
 800243e:	2014      	movs	r0, #20
 8002440:	f003 feb8 	bl	80061b4 <BSP_LCD_ClearStringLine>

  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8002444:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8002448:	f003 fe2a 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillPolygon(PreviousPoints, 3);   /* Previous track icon */
 800244c:	2103      	movs	r1, #3
 800244e:	4836      	ldr	r0, [pc, #216]	@ (8002528 <AUDIO_PlaybackDisplayButtons+0x118>)
 8002450:	f004 fb98 	bl	8006b84 <BSP_LCD_FillPolygon>
  BSP_LCD_FillRect(TOUCH_PREVIOUS_XMIN, TOUCH_PREVIOUS_YMIN , 10, TOUCH_PREVIOUS_YMAX - TOUCH_PREVIOUS_YMIN);
 8002454:	233c      	movs	r3, #60	@ 0x3c
 8002456:	220a      	movs	r2, #10
 8002458:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800245c:	f44f 70be 	mov.w	r0, #380	@ 0x17c
 8002460:	f004 fa96 	bl	8006990 <BSP_LCD_FillRect>
  BSP_LCD_FillPolygon(NextPoints, 3);       /* Next track icon */
 8002464:	2103      	movs	r1, #3
 8002466:	4831      	ldr	r0, [pc, #196]	@ (800252c <AUDIO_PlaybackDisplayButtons+0x11c>)
 8002468:	f004 fb8c 	bl	8006b84 <BSP_LCD_FillPolygon>
  BSP_LCD_FillRect(TOUCH_NEXT_XMAX-9, TOUCH_NEXT_YMIN , 10, TOUCH_NEXT_YMAX - TOUCH_NEXT_YMIN);
 800246c:	233c      	movs	r3, #60	@ 0x3c
 800246e:	220a      	movs	r2, #10
 8002470:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002474:	f240 2027 	movw	r0, #551	@ 0x227
 8002478:	f004 fa8a 	bl	8006990 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);    /* Pause rectangles */
 800247c:	233c      	movs	r3, #60	@ 0x3c
 800247e:	220f      	movs	r2, #15
 8002480:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002484:	208c      	movs	r0, #140	@ 0x8c
 8002486:	f004 fa83 	bl	8006990 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 800248a:	233c      	movs	r3, #60	@ 0x3c
 800248c:	220f      	movs	r2, #15
 800248e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002492:	20a0      	movs	r0, #160	@ 0xa0
 8002494:	f004 fa7c 	bl	8006990 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
 8002498:	233c      	movs	r3, #60	@ 0x3c
 800249a:	223c      	movs	r2, #60	@ 0x3c
 800249c:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80024a0:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80024a4:	f004 fa74 	bl	8006990 <BSP_LCD_FillRect>
                   TOUCH_STOP_XMAX - TOUCH_STOP_XMIN,
                   TOUCH_STOP_YMAX - TOUCH_STOP_YMIN);
  BSP_LCD_DrawRect(TOUCH_VOL_MINUS_XMIN, TOUCH_VOL_MINUS_YMIN , /* VOl- rectangle */
 80024a8:	233c      	movs	r3, #60	@ 0x3c
 80024aa:	223c      	movs	r2, #60	@ 0x3c
 80024ac:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80024b0:	2014      	movs	r0, #20
 80024b2:	f004 f951 	bl	8006758 <BSP_LCD_DrawRect>
                   TOUCH_VOL_MINUS_XMAX - TOUCH_VOL_MINUS_XMIN,
                   TOUCH_VOL_MINUS_YMAX - TOUCH_VOL_MINUS_YMIN);
  BSP_LCD_DisplayStringAt(26, LINE(17), (uint8_t *)"VOL-", LEFT_MODE);
 80024b6:	f003 fe3f 	bl	8006138 <BSP_LCD_GetFont>
 80024ba:	4603      	mov	r3, r0
 80024bc:	88db      	ldrh	r3, [r3, #6]
 80024be:	461a      	mov	r2, r3
 80024c0:	0112      	lsls	r2, r2, #4
 80024c2:	4413      	add	r3, r2
 80024c4:	b299      	uxth	r1, r3
 80024c6:	2303      	movs	r3, #3
 80024c8:	4a19      	ldr	r2, [pc, #100]	@ (8002530 <AUDIO_PlaybackDisplayButtons+0x120>)
 80024ca:	201a      	movs	r0, #26
 80024cc:	f003 ff1a 	bl	8006304 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(TOUCH_VOL_PLUS_XMIN, TOUCH_VOL_PLUS_YMIN , /* VOl+ rectangle */
 80024d0:	233c      	movs	r3, #60	@ 0x3c
 80024d2:	223c      	movs	r2, #60	@ 0x3c
 80024d4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80024d8:	f44f 701b 	mov.w	r0, #620	@ 0x26c
 80024dc:	f004 f93c 	bl	8006758 <BSP_LCD_DrawRect>
                   TOUCH_VOL_PLUS_XMAX - TOUCH_VOL_PLUS_XMIN,
                   TOUCH_VOL_PLUS_YMAX - TOUCH_VOL_PLUS_YMIN);
  BSP_LCD_DisplayStringAt(626, LINE(17), (uint8_t *)"VOL+", LEFT_MODE);
 80024e0:	f003 fe2a 	bl	8006138 <BSP_LCD_GetFont>
 80024e4:	4603      	mov	r3, r0
 80024e6:	88db      	ldrh	r3, [r3, #6]
 80024e8:	461a      	mov	r2, r3
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	4413      	add	r3, r2
 80024ee:	b299      	uxth	r1, r3
 80024f0:	2303      	movs	r3, #3
 80024f2:	4a10      	ldr	r2, [pc, #64]	@ (8002534 <AUDIO_PlaybackDisplayButtons+0x124>)
 80024f4:	f240 2072 	movw	r0, #626	@ 0x272
 80024f8:	f003 ff04 	bl	8006304 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80024fc:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8002500:	f003 fdce 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_ClearStringLine(22);
 8002504:	2016      	movs	r0, #22
 8002506:	f003 fe55 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_DisplayStringAtLine(22, (uint8_t *)"Use stop button to exit");
 800250a:	490b      	ldr	r1, [pc, #44]	@ (8002538 <AUDIO_PlaybackDisplayButtons+0x128>)
 800250c:	2016      	movs	r0, #22
 800250e:	f003 ffc1 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8002512:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8002516:	f003 fdc3 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
 800251a:	4808      	ldr	r0, [pc, #32]	@ (800253c <AUDIO_PlaybackDisplayButtons+0x12c>)
 800251c:	f003 fdf2 	bl	8006104 <BSP_LCD_SetFont>
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000144 	.word	0x20000144
 8002528:	20000014 	.word	0x20000014
 800252c:	20000008 	.word	0x20000008
 8002530:	0801cf2c 	.word	0x0801cf2c
 8002534:	0801cf34 	.word	0x0801cf34
 8002538:	0801cf3c 	.word	0x0801cf3c
 800253c:	2000014c 	.word	0x2000014c

08002540 <AUDIO_AcquireTouchButtons>:
  * @brief  Test touch screen state and modify audio state machine according to that
  * @param  None
  * @retval None
  */
static void AUDIO_AcquireTouchButtons(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  static TS_StateTypeDef  TS_State={0};

  if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
 8002544:	4b52      	ldr	r3, [pc, #328]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d103      	bne.n	8002554 <AUDIO_AcquireTouchButtons+0x14>
  {
    BSP_TS_GetState(&TS_State);
 800254c:	4850      	ldr	r0, [pc, #320]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 800254e:	f005 f8ed 	bl	800772c <BSP_TS_GetState>
      {
        AudioState = AUDIO_STATE_VOLUME_UP;
      }
    }
  }
}
 8002552:	e09b      	b.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
    BSP_TS_GetState(&TS_State);
 8002554:	484e      	ldr	r0, [pc, #312]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002556:	f005 f8e9 	bl	800772c <BSP_TS_GetState>
    if(TS_State.touchDetected == 1)
 800255a:	4b4d      	ldr	r3, [pc, #308]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	f040 8094 	bne.w	800268c <AUDIO_AcquireTouchButtons+0x14c>
      if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
 8002564:	4b4a      	ldr	r3, [pc, #296]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002566:	885b      	ldrh	r3, [r3, #2]
 8002568:	2b8c      	cmp	r3, #140	@ 0x8c
 800256a:	d919      	bls.n	80025a0 <AUDIO_AcquireTouchButtons+0x60>
 800256c:	4b48      	ldr	r3, [pc, #288]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 800256e:	885b      	ldrh	r3, [r3, #2]
 8002570:	2bc7      	cmp	r3, #199	@ 0xc7
 8002572:	d815      	bhi.n	80025a0 <AUDIO_AcquireTouchButtons+0x60>
          (TS_State.touchY[0] > TOUCH_PAUSE_YMIN) && (TS_State.touchY[0] < TOUCH_PAUSE_YMAX))
 8002574:	4b46      	ldr	r3, [pc, #280]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002576:	88db      	ldrh	r3, [r3, #6]
      if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
 8002578:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800257c:	d910      	bls.n	80025a0 <AUDIO_AcquireTouchButtons+0x60>
          (TS_State.touchY[0] > TOUCH_PAUSE_YMIN) && (TS_State.touchY[0] < TOUCH_PAUSE_YMAX))
 800257e:	4b44      	ldr	r3, [pc, #272]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002580:	88db      	ldrh	r3, [r3, #6]
 8002582:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002586:	d20b      	bcs.n	80025a0 <AUDIO_AcquireTouchButtons+0x60>
        if (AudioState == AUDIO_STATE_PLAY)
 8002588:	4b42      	ldr	r3, [pc, #264]	@ (8002694 <AUDIO_AcquireTouchButtons+0x154>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d103      	bne.n	8002598 <AUDIO_AcquireTouchButtons+0x58>
          AudioState = AUDIO_STATE_PAUSE;
 8002590:	4b40      	ldr	r3, [pc, #256]	@ (8002694 <AUDIO_AcquireTouchButtons+0x154>)
 8002592:	220b      	movs	r2, #11
 8002594:	701a      	strb	r2, [r3, #0]
        if (AudioState == AUDIO_STATE_PLAY)
 8002596:	e079      	b.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
          AudioState = AUDIO_STATE_RESUME;
 8002598:	4b3e      	ldr	r3, [pc, #248]	@ (8002694 <AUDIO_AcquireTouchButtons+0x154>)
 800259a:	220c      	movs	r2, #12
 800259c:	701a      	strb	r2, [r3, #0]
        if (AudioState == AUDIO_STATE_PLAY)
 800259e:	e075      	b.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
      else if ((TS_State.touchX[0] > TOUCH_NEXT_XMIN) && (TS_State.touchX[0] < TOUCH_NEXT_XMAX) &&
 80025a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 80025a2:	885b      	ldrh	r3, [r3, #2]
 80025a4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025a8:	d912      	bls.n	80025d0 <AUDIO_AcquireTouchButtons+0x90>
 80025aa:	4b39      	ldr	r3, [pc, #228]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 80025ac:	885b      	ldrh	r3, [r3, #2]
 80025ae:	f5b3 7f0c 	cmp.w	r3, #560	@ 0x230
 80025b2:	d20d      	bcs.n	80025d0 <AUDIO_AcquireTouchButtons+0x90>
               (TS_State.touchY[0] > TOUCH_NEXT_YMIN) && (TS_State.touchY[0] < TOUCH_NEXT_YMAX))
 80025b4:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 80025b6:	88db      	ldrh	r3, [r3, #6]
      else if ((TS_State.touchX[0] > TOUCH_NEXT_XMIN) && (TS_State.touchX[0] < TOUCH_NEXT_XMAX) &&
 80025b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025bc:	d908      	bls.n	80025d0 <AUDIO_AcquireTouchButtons+0x90>
               (TS_State.touchY[0] > TOUCH_NEXT_YMIN) && (TS_State.touchY[0] < TOUCH_NEXT_YMAX))
 80025be:	4b34      	ldr	r3, [pc, #208]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 80025c0:	88db      	ldrh	r3, [r3, #6]
 80025c2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80025c6:	d203      	bcs.n	80025d0 <AUDIO_AcquireTouchButtons+0x90>
        AudioState = AUDIO_STATE_NEXT;
 80025c8:	4b32      	ldr	r3, [pc, #200]	@ (8002694 <AUDIO_AcquireTouchButtons+0x154>)
 80025ca:	2206      	movs	r2, #6
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e05d      	b.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
      else if ((TS_State.touchX[0] > TOUCH_PREVIOUS_XMIN) && (TS_State.touchX[0] < TOUCH_PREVIOUS_XMAX) &&
 80025d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 80025d2:	885b      	ldrh	r3, [r3, #2]
 80025d4:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 80025d8:	d912      	bls.n	8002600 <AUDIO_AcquireTouchButtons+0xc0>
 80025da:	4b2d      	ldr	r3, [pc, #180]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 80025dc:	885b      	ldrh	r3, [r3, #2]
 80025de:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 80025e2:	d20d      	bcs.n	8002600 <AUDIO_AcquireTouchButtons+0xc0>
               (TS_State.touchY[0] > TOUCH_PREVIOUS_YMIN) && (TS_State.touchY[0] < TOUCH_PREVIOUS_YMAX))
 80025e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 80025e6:	88db      	ldrh	r3, [r3, #6]
      else if ((TS_State.touchX[0] > TOUCH_PREVIOUS_XMIN) && (TS_State.touchX[0] < TOUCH_PREVIOUS_XMAX) &&
 80025e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025ec:	d908      	bls.n	8002600 <AUDIO_AcquireTouchButtons+0xc0>
               (TS_State.touchY[0] > TOUCH_PREVIOUS_YMIN) && (TS_State.touchY[0] < TOUCH_PREVIOUS_YMAX))
 80025ee:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 80025f0:	88db      	ldrh	r3, [r3, #6]
 80025f2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80025f6:	d203      	bcs.n	8002600 <AUDIO_AcquireTouchButtons+0xc0>
        AudioState = AUDIO_STATE_PREVIOUS;
 80025f8:	4b26      	ldr	r3, [pc, #152]	@ (8002694 <AUDIO_AcquireTouchButtons+0x154>)
 80025fa:	2207      	movs	r2, #7
 80025fc:	701a      	strb	r2, [r3, #0]
 80025fe:	e045      	b.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
      else if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002602:	885b      	ldrh	r3, [r3, #2]
 8002604:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002608:	d912      	bls.n	8002630 <AUDIO_AcquireTouchButtons+0xf0>
 800260a:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 800260c:	885b      	ldrh	r3, [r3, #2]
 800260e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002612:	d20d      	bcs.n	8002630 <AUDIO_AcquireTouchButtons+0xf0>
               (TS_State.touchY[0] > TOUCH_STOP_YMIN) && (TS_State.touchY[0] < TOUCH_STOP_YMAX))
 8002614:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002616:	88db      	ldrh	r3, [r3, #6]
      else if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
 8002618:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800261c:	d908      	bls.n	8002630 <AUDIO_AcquireTouchButtons+0xf0>
               (TS_State.touchY[0] > TOUCH_STOP_YMIN) && (TS_State.touchY[0] < TOUCH_STOP_YMAX))
 800261e:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002620:	88db      	ldrh	r3, [r3, #6]
 8002622:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002626:	d203      	bcs.n	8002630 <AUDIO_AcquireTouchButtons+0xf0>
        AudioState = AUDIO_STATE_STOP;
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <AUDIO_AcquireTouchButtons+0x154>)
 800262a:	220a      	movs	r2, #10
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e02d      	b.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
      else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
 8002630:	4b17      	ldr	r3, [pc, #92]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002632:	885b      	ldrh	r3, [r3, #2]
 8002634:	2b14      	cmp	r3, #20
 8002636:	d911      	bls.n	800265c <AUDIO_AcquireTouchButtons+0x11c>
 8002638:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 800263a:	885b      	ldrh	r3, [r3, #2]
 800263c:	2b4f      	cmp	r3, #79	@ 0x4f
 800263e:	d80d      	bhi.n	800265c <AUDIO_AcquireTouchButtons+0x11c>
              (TS_State.touchY[0] > TOUCH_VOL_MINUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_MINUS_YMAX))
 8002640:	4b13      	ldr	r3, [pc, #76]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002642:	88db      	ldrh	r3, [r3, #6]
      else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
 8002644:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002648:	d908      	bls.n	800265c <AUDIO_AcquireTouchButtons+0x11c>
              (TS_State.touchY[0] > TOUCH_VOL_MINUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_MINUS_YMAX))
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 800264c:	88db      	ldrh	r3, [r3, #6]
 800264e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002652:	d203      	bcs.n	800265c <AUDIO_AcquireTouchButtons+0x11c>
        AudioState = AUDIO_STATE_VOLUME_DOWN;
 8002654:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <AUDIO_AcquireTouchButtons+0x154>)
 8002656:	220e      	movs	r2, #14
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e017      	b.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
      else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 800265e:	885b      	ldrh	r3, [r3, #2]
 8002660:	f5b3 7f1b 	cmp.w	r3, #620	@ 0x26c
 8002664:	d912      	bls.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
 8002666:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002668:	885b      	ldrh	r3, [r3, #2]
 800266a:	f5b3 7f2a 	cmp.w	r3, #680	@ 0x2a8
 800266e:	d20d      	bcs.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
              (TS_State.touchY[0] > TOUCH_VOL_PLUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_PLUS_YMAX))
 8002670:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 8002672:	88db      	ldrh	r3, [r3, #6]
      else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
 8002674:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002678:	d908      	bls.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
              (TS_State.touchY[0] > TOUCH_VOL_PLUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_PLUS_YMAX))
 800267a:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <AUDIO_AcquireTouchButtons+0x150>)
 800267c:	88db      	ldrh	r3, [r3, #6]
 800267e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002682:	d203      	bcs.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
        AudioState = AUDIO_STATE_VOLUME_UP;
 8002684:	4b03      	ldr	r3, [pc, #12]	@ (8002694 <AUDIO_AcquireTouchButtons+0x154>)
 8002686:	220d      	movs	r2, #13
 8002688:	701a      	strb	r2, [r3, #0]
}
 800268a:	e7ff      	b.n	800268c <AUDIO_AcquireTouchButtons+0x14c>
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20003970 	.word	0x20003970
 8002694:	20001106 	.word	0x20001106

08002698 <AUDIO_REC_Start>:
  * @brief  Starts Audio streaming.    
  * @param  None
  * @retval Audio error
  */ 
AUDIO_ErrorTypeDef AUDIO_REC_Start(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b090      	sub	sp, #64	@ 0x40
 800269c:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t str[FILEMGR_FILE_NAME_SIZE + 20]; 
  
  uwVolume = 100;
 80026a2:	4b57      	ldr	r3, [pc, #348]	@ (8002800 <AUDIO_REC_Start+0x168>)
 80026a4:	2264      	movs	r2, #100	@ 0x64
 80026a6:	601a      	str	r2, [r3, #0]

  /* Create a new file system */
  if(f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 80026a8:	220a      	movs	r2, #10
 80026aa:	4956      	ldr	r1, [pc, #344]	@ (8002804 <AUDIO_REC_Start+0x16c>)
 80026ac:	4856      	ldr	r0, [pc, #344]	@ (8002808 <AUDIO_REC_Start+0x170>)
 80026ae:	f011 fef1 	bl	8014494 <f_open>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f040 809d 	bne.w	80027f4 <AUDIO_REC_Start+0x15c>
  {  
    /* Initialize header file */
    WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 80026ba:	4954      	ldr	r1, [pc, #336]	@ (800280c <AUDIO_REC_Start+0x174>)
 80026bc:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 80026c0:	f000 fcea 	bl	8003098 <WavProcess_EncInit>
    
    /* Write header file */
    if(f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten) == FR_OK)
 80026c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026c8:	222c      	movs	r2, #44	@ 0x2c
 80026ca:	4950      	ldr	r1, [pc, #320]	@ (800280c <AUDIO_REC_Start+0x174>)
 80026cc:	484e      	ldr	r0, [pc, #312]	@ (8002808 <AUDIO_REC_Start+0x170>)
 80026ce:	f012 f9da 	bl	8014a86 <f_write>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f040 808d 	bne.w	80027f4 <AUDIO_REC_Start+0x15c>
    {
      AudioState = AUDIO_STATE_PRERECORD;
 80026da:	4b4d      	ldr	r3, [pc, #308]	@ (8002810 <AUDIO_REC_Start+0x178>)
 80026dc:	2204      	movs	r2, #4
 80026de:	701a      	strb	r2, [r3, #0]
      
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f003 fcdc 	bl	80060a0 <BSP_LCD_SetTextColor>
      sprintf((char *)str, "Recording file: %s", 
 80026e8:	463b      	mov	r3, r7
 80026ea:	4a46      	ldr	r2, [pc, #280]	@ (8002804 <AUDIO_REC_Start+0x16c>)
 80026ec:	4949      	ldr	r1, [pc, #292]	@ (8002814 <AUDIO_REC_Start+0x17c>)
 80026ee:	4618      	mov	r0, r3
 80026f0:	f018 fe42 	bl	801b378 <siprintf>
              (char *)REC_WAVE_NAME);
      BSP_LCD_ClearStringLine(4);
 80026f4:	2004      	movs	r0, #4
 80026f6:	f003 fd5d 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(4, str);
 80026fa:	463b      	mov	r3, r7
 80026fc:	4619      	mov	r1, r3
 80026fe:	2004      	movs	r0, #4
 8002700:	f003 fec8 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN); 
 8002704:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8002708:	f003 fcca 	bl	80060a0 <BSP_LCD_SetTextColor>
      sprintf((char *)str,  "Sample rate : %d Hz", (int)DEFAULT_AUDIO_IN_FREQ);
 800270c:	463b      	mov	r3, r7
 800270e:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8002712:	4941      	ldr	r1, [pc, #260]	@ (8002818 <AUDIO_REC_Start+0x180>)
 8002714:	4618      	mov	r0, r3
 8002716:	f018 fe2f 	bl	801b378 <siprintf>
      BSP_LCD_ClearStringLine(6);
 800271a:	2006      	movs	r0, #6
 800271c:	f003 fd4a 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(6, str);
 8002720:	463b      	mov	r3, r7
 8002722:	4619      	mov	r1, r3
 8002724:	2006      	movs	r0, #6
 8002726:	f003 feb5 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      
      sprintf((char *)str,  "Channels number : %d", (int)DEFAULT_AUDIO_IN_CHANNEL_NBR);
 800272a:	463b      	mov	r3, r7
 800272c:	2202      	movs	r2, #2
 800272e:	493b      	ldr	r1, [pc, #236]	@ (800281c <AUDIO_REC_Start+0x184>)
 8002730:	4618      	mov	r0, r3
 8002732:	f018 fe21 	bl	801b378 <siprintf>
      BSP_LCD_ClearStringLine(7);      
 8002736:	2007      	movs	r0, #7
 8002738:	f003 fd3c 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
 800273c:	463b      	mov	r3, r7
 800273e:	4619      	mov	r1, r3
 8002740:	2007      	movs	r0, #7
 8002742:	f003 fea7 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      
      sprintf((char *)str,  "Volume : %d ", (int)uwVolume);
 8002746:	4b2e      	ldr	r3, [pc, #184]	@ (8002800 <AUDIO_REC_Start+0x168>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	463b      	mov	r3, r7
 800274e:	4934      	ldr	r1, [pc, #208]	@ (8002820 <AUDIO_REC_Start+0x188>)
 8002750:	4618      	mov	r0, r3
 8002752:	f018 fe11 	bl	801b378 <siprintf>
      BSP_LCD_ClearStringLine(7);
 8002756:	2007      	movs	r0, #7
 8002758:	f003 fd2c 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(7, str);
 800275c:	463b      	mov	r3, r7
 800275e:	4619      	mov	r1, r3
 8002760:	2007      	movs	r0, #7
 8002762:	f003 fe97 	bl	8006494 <BSP_LCD_DisplayStringAtLine>

      sprintf((char *)str, "File Size :");
 8002766:	463b      	mov	r3, r7
 8002768:	492e      	ldr	r1, [pc, #184]	@ (8002824 <AUDIO_REC_Start+0x18c>)
 800276a:	4618      	mov	r0, r3
 800276c:	f018 fe04 	bl	801b378 <siprintf>
      BSP_LCD_ClearStringLine(8);
 8002770:	2008      	movs	r0, #8
 8002772:	f003 fd1f 	bl	80061b4 <BSP_LCD_ClearStringLine>
      BSP_LCD_DisplayStringAtLine(8, str);
 8002776:	463b      	mov	r3, r7
 8002778:	4619      	mov	r1, r3
 800277a:	2008      	movs	r0, #8
 800277c:	f003 fe8a 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
 
      AUDIO_REC_DisplayButtons();
 8002780:	f000 fe0a 	bl	8003398 <AUDIO_REC_DisplayButtons>
     
      BSP_LCD_DisplayStringAt(250, LINE(14), (uint8_t *)"  [RECORD]", LEFT_MODE);
 8002784:	f003 fcd8 	bl	8006138 <BSP_LCD_GetFont>
 8002788:	4603      	mov	r3, r0
 800278a:	88db      	ldrh	r3, [r3, #6]
 800278c:	461a      	mov	r2, r3
 800278e:	00d2      	lsls	r2, r2, #3
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	b299      	uxth	r1, r3
 8002796:	2303      	movs	r3, #3
 8002798:	4a23      	ldr	r2, [pc, #140]	@ (8002828 <AUDIO_REC_Start+0x190>)
 800279a:	20fa      	movs	r0, #250	@ 0xfa
 800279c:	f003 fdb2 	bl	8006304 <BSP_LCD_DisplayStringAt>
      { 
        if(byteswritten != 0)
 80027a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d026      	beq.n	80027f4 <AUDIO_REC_Start+0x15c>
        {
          BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 80027a6:	2202      	movs	r2, #2
 80027a8:	2110      	movs	r1, #16
 80027aa:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 80027ae:	f002 fe6b 	bl	8005488 <BSP_AUDIO_IN_Init>
          BSP_AUDIO_IN_Record((uint16_t*)&BufferCtl.pdm_buff[0], AUDIO_IN_PDM_BUFFER_SIZE);
 80027b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027b6:	481d      	ldr	r0, [pc, #116]	@ (800282c <AUDIO_REC_Start+0x194>)
 80027b8:	f002 fe90 	bl	80054dc <BSP_AUDIO_IN_Record>
          BufferCtl.fptr = byteswritten;
 80027bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027be:	4a1b      	ldr	r2, [pc, #108]	@ (800282c <AUDIO_REC_Start+0x194>)
 80027c0:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 80027c4:	f8c2 3a0c 	str.w	r3, [r2, #2572]	@ 0xa0c
          BufferCtl.pcm_ptr = 0;
 80027c8:	4b18      	ldr	r3, [pc, #96]	@ (800282c <AUDIO_REC_Start+0x194>)
 80027ca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80027ce:	461a      	mov	r2, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c2 3a00 	str.w	r3, [r2, #2560]	@ 0xa00
          BufferCtl.offset = 0;
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <AUDIO_REC_Start+0x194>)
 80027d8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80027dc:	461a      	mov	r2, r3
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c2 3a08 	str.w	r3, [r2, #2568]	@ 0xa08
          BufferCtl.wr_state = BUFFER_EMPTY;
 80027e4:	4b11      	ldr	r3, [pc, #68]	@ (800282c <AUDIO_REC_Start+0x194>)
 80027e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2a04 	strb.w	r2, [r3, #2564]	@ 0xa04
          return AUDIO_ERROR_NONE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	e000      	b.n	80027f6 <AUDIO_REC_Start+0x15e>
        }
      }
    }
  }
  return AUDIO_ERROR_IO; 
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3740      	adds	r7, #64	@ 0x40
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000024 	.word	0x20000024
 8002804:	0801cf54 	.word	0x0801cf54
 8002808:	20003740 	.word	0x20003740
 800280c:	20003984 	.word	0x20003984
 8002810:	20001106 	.word	0x20001106
 8002814:	0801cf60 	.word	0x0801cf60
 8002818:	0801cf74 	.word	0x0801cf74
 800281c:	0801cf88 	.word	0x0801cf88
 8002820:	0801cfa0 	.word	0x0801cfa0
 8002824:	0801cfb0 	.word	0x0801cfb0
 8002828:	0801cfbc 	.word	0x0801cfbc
 800282c:	200039b0 	.word	0x200039b0

08002830 <AUDIO_REC_Process>:
  * @brief  Manages Audio process. 
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_REC_Process(void)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b089      	sub	sp, #36	@ 0x24
 8002834:	af00      	add	r7, sp, #0
  uint32_t byteswritten = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  AUDIO_ErrorTypeDef audio_error = AUDIO_ERROR_NONE;
 800283a:	2300      	movs	r3, #0
 800283c:	77fb      	strb	r3, [r7, #31]
  uint32_t elapsed_time; 
  static uint32_t prev_elapsed_time = 0xFFFFFFFF;
  uint8_t str[16];
  static TS_StateTypeDef  TS_State={0};
  
  switch(AudioState)
 800283e:	4b98      	ldr	r3, [pc, #608]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3b01      	subs	r3, #1
 8002844:	2b0d      	cmp	r3, #13
 8002846:	f200 836f 	bhi.w	8002f28 <AUDIO_REC_Process+0x6f8>
 800284a:	a201      	add	r2, pc, #4	@ (adr r2, 8002850 <AUDIO_REC_Process+0x20>)
 800284c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002850:	08002eb1 	.word	0x08002eb1
 8002854:	08002f29 	.word	0x08002f29
 8002858:	08002f29 	.word	0x08002f29
 800285c:	08002889 	.word	0x08002889
 8002860:	080029db 	.word	0x080029db
 8002864:	08002ea9 	.word	0x08002ea9
 8002868:	08002ea9 	.word	0x08002ea9
 800286c:	08002f29 	.word	0x08002f29
 8002870:	08002f29 	.word	0x08002f29
 8002874:	08002c4b 	.word	0x08002c4b
 8002878:	08002cf3 	.word	0x08002cf3
 800287c:	08002d5b 	.word	0x08002d5b
 8002880:	08002e0d 	.word	0x08002e0d
 8002884:	08002e5b 	.word	0x08002e5b
  {
  case AUDIO_STATE_PRERECORD:
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
 8002888:	4b86      	ldr	r3, [pc, #536]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d103      	bne.n	8002898 <AUDIO_REC_Process+0x68>
    {
      BSP_TS_GetState(&TS_State);
 8002890:	4884      	ldr	r0, [pc, #528]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002892:	f004 ff4b 	bl	800772c <BSP_TS_GetState>
      else
      {
        AudioState = AUDIO_STATE_PRERECORD;
      }
    }
    break;
 8002896:	e349      	b.n	8002f2c <AUDIO_REC_Process+0x6fc>
      BSP_TS_GetState(&TS_State);
 8002898:	4882      	ldr	r0, [pc, #520]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 800289a:	f004 ff47 	bl	800772c <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
 800289e:	4b81      	ldr	r3, [pc, #516]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	f040 8095 	bne.w	80029d2 <AUDIO_REC_Process+0x1a2>
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
 80028a8:	4b7e      	ldr	r3, [pc, #504]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 80028aa:	885b      	ldrh	r3, [r3, #2]
 80028ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028b0:	d912      	bls.n	80028d8 <AUDIO_REC_Process+0xa8>
 80028b2:	4b7c      	ldr	r3, [pc, #496]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 80028b4:	885b      	ldrh	r3, [r3, #2]
 80028b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028ba:	d20d      	bcs.n	80028d8 <AUDIO_REC_Process+0xa8>
            (TS_State.touchY[0] > TOUCH_STOP_YMIN) && (TS_State.touchY[0] < TOUCH_STOP_YMAX))
 80028bc:	4b79      	ldr	r3, [pc, #484]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 80028be:	88db      	ldrh	r3, [r3, #6]
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
 80028c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028c4:	d908      	bls.n	80028d8 <AUDIO_REC_Process+0xa8>
            (TS_State.touchY[0] > TOUCH_STOP_YMIN) && (TS_State.touchY[0] < TOUCH_STOP_YMAX))
 80028c6:	4b77      	ldr	r3, [pc, #476]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 80028c8:	88db      	ldrh	r3, [r3, #6]
 80028ca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028ce:	d203      	bcs.n	80028d8 <AUDIO_REC_Process+0xa8>
          AudioState = AUDIO_STATE_STOP;
 80028d0:	4b73      	ldr	r3, [pc, #460]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 80028d2:	220a      	movs	r2, #10
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e059      	b.n	800298c <AUDIO_REC_Process+0x15c>
        else if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
 80028d8:	4b72      	ldr	r3, [pc, #456]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 80028da:	885b      	ldrh	r3, [r3, #2]
 80028dc:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 80028e0:	d915      	bls.n	800290e <AUDIO_REC_Process+0xde>
 80028e2:	4b70      	ldr	r3, [pc, #448]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 80028e4:	885b      	ldrh	r3, [r3, #2]
 80028e6:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 80028ea:	d210      	bcs.n	800290e <AUDIO_REC_Process+0xde>
                 (TS_State.touchY[0] > TOUCH_RECORD_YMIN) && (TS_State.touchY[0] < TOUCH_RECORD_YMAX))
 80028ec:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 80028ee:	88db      	ldrh	r3, [r3, #6]
        else if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
 80028f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80028f4:	d90b      	bls.n	800290e <AUDIO_REC_Process+0xde>
                 (TS_State.touchY[0] > TOUCH_RECORD_YMIN) && (TS_State.touchY[0] < TOUCH_RECORD_YMAX))
 80028f6:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 80028f8:	88db      	ldrh	r3, [r3, #6]
 80028fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80028fe:	d206      	bcs.n	800290e <AUDIO_REC_Process+0xde>
          display_update = 1;
 8002900:	4b69      	ldr	r3, [pc, #420]	@ (8002aa8 <AUDIO_REC_Process+0x278>)
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]
          AudioState = AUDIO_STATE_RECORD;
 8002906:	4b66      	ldr	r3, [pc, #408]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 8002908:	2205      	movs	r2, #5
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e03e      	b.n	800298c <AUDIO_REC_Process+0x15c>
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
 800290e:	4b65      	ldr	r3, [pc, #404]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002910:	885b      	ldrh	r3, [r3, #2]
 8002912:	2b14      	cmp	r3, #20
 8002914:	d91a      	bls.n	800294c <AUDIO_REC_Process+0x11c>
 8002916:	4b63      	ldr	r3, [pc, #396]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002918:	885b      	ldrh	r3, [r3, #2]
 800291a:	2b4f      	cmp	r3, #79	@ 0x4f
 800291c:	d816      	bhi.n	800294c <AUDIO_REC_Process+0x11c>
                (TS_State.touchY[0] > TOUCH_VOL_MINUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_MINUS_YMAX))
 800291e:	4b61      	ldr	r3, [pc, #388]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002920:	88db      	ldrh	r3, [r3, #6]
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
 8002922:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002926:	d911      	bls.n	800294c <AUDIO_REC_Process+0x11c>
                (TS_State.touchY[0] > TOUCH_VOL_MINUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_MINUS_YMAX))
 8002928:	4b5e      	ldr	r3, [pc, #376]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 800292a:	88db      	ldrh	r3, [r3, #6]
 800292c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002930:	d20c      	bcs.n	800294c <AUDIO_REC_Process+0x11c>
          AudioState = AUDIO_STATE_VOLUME_DOWN;
 8002932:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 8002934:	220e      	movs	r2, #14
 8002936:	701a      	strb	r2, [r3, #0]
          if(uwVolume >= 5)
 8002938:	4b5c      	ldr	r3, [pc, #368]	@ (8002aac <AUDIO_REC_Process+0x27c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d925      	bls.n	800298c <AUDIO_REC_Process+0x15c>
            uwVolume -= 5;
 8002940:	4b5a      	ldr	r3, [pc, #360]	@ (8002aac <AUDIO_REC_Process+0x27c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3b05      	subs	r3, #5
 8002946:	4a59      	ldr	r2, [pc, #356]	@ (8002aac <AUDIO_REC_Process+0x27c>)
 8002948:	6013      	str	r3, [r2, #0]
          if(uwVolume >= 5)
 800294a:	e01f      	b.n	800298c <AUDIO_REC_Process+0x15c>
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
 800294c:	4b55      	ldr	r3, [pc, #340]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 800294e:	885b      	ldrh	r3, [r3, #2]
 8002950:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002954:	d91a      	bls.n	800298c <AUDIO_REC_Process+0x15c>
 8002956:	4b53      	ldr	r3, [pc, #332]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002958:	885b      	ldrh	r3, [r3, #2]
 800295a:	f5b3 7f0c 	cmp.w	r3, #560	@ 0x230
 800295e:	d215      	bcs.n	800298c <AUDIO_REC_Process+0x15c>
                (TS_State.touchY[0] > TOUCH_VOL_PLUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_PLUS_YMAX))
 8002960:	4b50      	ldr	r3, [pc, #320]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002962:	88db      	ldrh	r3, [r3, #6]
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
 8002964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002968:	d910      	bls.n	800298c <AUDIO_REC_Process+0x15c>
                (TS_State.touchY[0] > TOUCH_VOL_PLUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_PLUS_YMAX))
 800296a:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 800296c:	88db      	ldrh	r3, [r3, #6]
 800296e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002972:	d20b      	bcs.n	800298c <AUDIO_REC_Process+0x15c>
          AudioState = AUDIO_STATE_VOLUME_UP;
 8002974:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 8002976:	220d      	movs	r2, #13
 8002978:	701a      	strb	r2, [r3, #0]
          if(uwVolume <= 95)
 800297a:	4b4c      	ldr	r3, [pc, #304]	@ (8002aac <AUDIO_REC_Process+0x27c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b5f      	cmp	r3, #95	@ 0x5f
 8002980:	d804      	bhi.n	800298c <AUDIO_REC_Process+0x15c>
            uwVolume += 5;
 8002982:	4b4a      	ldr	r3, [pc, #296]	@ (8002aac <AUDIO_REC_Process+0x27c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	3305      	adds	r3, #5
 8002988:	4a48      	ldr	r2, [pc, #288]	@ (8002aac <AUDIO_REC_Process+0x27c>)
 800298a:	6013      	str	r3, [r2, #0]
        if ((AudioState == AUDIO_STATE_VOLUME_DOWN) || (AudioState == AUDIO_STATE_VOLUME_UP))
 800298c:	4b44      	ldr	r3, [pc, #272]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b0e      	cmp	r3, #14
 8002992:	d004      	beq.n	800299e <AUDIO_REC_Process+0x16e>
 8002994:	4b42      	ldr	r3, [pc, #264]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b0d      	cmp	r3, #13
 800299a:	f040 82c7 	bne.w	8002f2c <AUDIO_REC_Process+0x6fc>
          sprintf((char *)str,  "Volume : %d ", (int)uwVolume);
 800299e:	4b43      	ldr	r3, [pc, #268]	@ (8002aac <AUDIO_REC_Process+0x27c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	4942      	ldr	r1, [pc, #264]	@ (8002ab0 <AUDIO_REC_Process+0x280>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	f018 fce5 	bl	801b378 <siprintf>
          BSP_LCD_ClearStringLine(7);
 80029ae:	2007      	movs	r0, #7
 80029b0:	f003 fc00 	bl	80061b4 <BSP_LCD_ClearStringLine>
          BSP_LCD_DisplayStringAtLine(7, str);
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	4619      	mov	r1, r3
 80029b8:	2007      	movs	r0, #7
 80029ba:	f003 fd6b 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
          BSP_AUDIO_IN_SetVolume(uwVolume);
 80029be:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <AUDIO_REC_Process+0x27c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	f002 fdcf 	bl	8005568 <BSP_AUDIO_IN_SetVolume>
          AudioState = AUDIO_STATE_PRERECORD;
 80029ca:	4b35      	ldr	r3, [pc, #212]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 80029cc:	2204      	movs	r2, #4
 80029ce:	701a      	strb	r2, [r3, #0]
    break;
 80029d0:	e2ac      	b.n	8002f2c <AUDIO_REC_Process+0x6fc>
        AudioState = AUDIO_STATE_PRERECORD;
 80029d2:	4b33      	ldr	r3, [pc, #204]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 80029d4:	2204      	movs	r2, #4
 80029d6:	701a      	strb	r2, [r3, #0]
    break;
 80029d8:	e2a8      	b.n	8002f2c <AUDIO_REC_Process+0x6fc>
  case AUDIO_STATE_RECORD:
    if (display_update)
 80029da:	4b33      	ldr	r3, [pc, #204]	@ (8002aa8 <AUDIO_REC_Process+0x278>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d021      	beq.n	8002a26 <AUDIO_REC_Process+0x1f6>
    {
      BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
 80029e2:	4834      	ldr	r0, [pc, #208]	@ (8002ab4 <AUDIO_REC_Process+0x284>)
 80029e4:	f003 fb5c 	bl	80060a0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
 80029e8:	221e      	movs	r2, #30
 80029ea:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80029ee:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 80029f2:	f004 f827 	bl	8006a44 <BSP_LCD_FillCircle>
                         (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                         (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
      BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
 80029f6:	4830      	ldr	r0, [pc, #192]	@ (8002ab8 <AUDIO_REC_Process+0x288>)
 80029f8:	f003 fb84 	bl	8006104 <BSP_LCD_SetFont>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80029fc:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8002a00:	f003 fb4e 	bl	80060a0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);
 8002a04:	f003 fb98 	bl	8006138 <BSP_LCD_GetFont>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	88db      	ldrh	r3, [r3, #6]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	0052      	lsls	r2, r2, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	b299      	uxth	r1, r3
 8002a16:	2303      	movs	r3, #3
 8002a18:	4a28      	ldr	r2, [pc, #160]	@ (8002abc <AUDIO_REC_Process+0x28c>)
 8002a1a:	20f7      	movs	r0, #247	@ 0xf7
 8002a1c:	f003 fc72 	bl	8006304 <BSP_LCD_DisplayStringAt>
      display_update = 0;
 8002a20:	4b21      	ldr	r3, [pc, #132]	@ (8002aa8 <AUDIO_REC_Process+0x278>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
    }
    
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
 8002a26:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d103      	bne.n	8002a36 <AUDIO_REC_Process+0x206>
    {
      BSP_TS_GetState(&TS_State);
 8002a2e:	481d      	ldr	r0, [pc, #116]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a30:	f004 fe7c 	bl	800772c <BSP_TS_GetState>
 8002a34:	e071      	b.n	8002b1a <AUDIO_REC_Process+0x2ea>
    }
    else
    {
      BSP_TS_GetState(&TS_State);
 8002a36:	481b      	ldr	r0, [pc, #108]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a38:	f004 fe78 	bl	800772c <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d16a      	bne.n	8002b1a <AUDIO_REC_Process+0x2ea>
      {
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
 8002a44:	4b17      	ldr	r3, [pc, #92]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a46:	885b      	ldrh	r3, [r3, #2]
 8002a48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a4c:	d912      	bls.n	8002a74 <AUDIO_REC_Process+0x244>
 8002a4e:	4b15      	ldr	r3, [pc, #84]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a50:	885b      	ldrh	r3, [r3, #2]
 8002a52:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a56:	d20d      	bcs.n	8002a74 <AUDIO_REC_Process+0x244>
            (TS_State.touchY[0] > TOUCH_STOP_YMIN) && (TS_State.touchY[0] < TOUCH_STOP_YMAX))
 8002a58:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a5a:	88db      	ldrh	r3, [r3, #6]
        if ((TS_State.touchX[0] > TOUCH_STOP_XMIN) && (TS_State.touchX[0] < TOUCH_STOP_XMAX) &&
 8002a5c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a60:	d908      	bls.n	8002a74 <AUDIO_REC_Process+0x244>
            (TS_State.touchY[0] > TOUCH_STOP_YMIN) && (TS_State.touchY[0] < TOUCH_STOP_YMAX))
 8002a62:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a64:	88db      	ldrh	r3, [r3, #6]
 8002a66:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a6a:	d203      	bcs.n	8002a74 <AUDIO_REC_Process+0x244>
        {
          AudioState = AUDIO_STATE_STOP;
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 8002a6e:	220a      	movs	r2, #10
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e052      	b.n	8002b1a <AUDIO_REC_Process+0x2ea>
        }
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a76:	885b      	ldrh	r3, [r3, #2]
 8002a78:	2b8c      	cmp	r3, #140	@ 0x8c
 8002a7a:	d921      	bls.n	8002ac0 <AUDIO_REC_Process+0x290>
 8002a7c:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a7e:	885b      	ldrh	r3, [r3, #2]
 8002a80:	2bc7      	cmp	r3, #199	@ 0xc7
 8002a82:	d81d      	bhi.n	8002ac0 <AUDIO_REC_Process+0x290>
                 (TS_State.touchY[0] > TOUCH_PAUSE_YMIN) && (TS_State.touchY[0] < TOUCH_PAUSE_YMAX))
 8002a84:	4b07      	ldr	r3, [pc, #28]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a86:	88db      	ldrh	r3, [r3, #6]
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
 8002a88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a8c:	d918      	bls.n	8002ac0 <AUDIO_REC_Process+0x290>
                 (TS_State.touchY[0] > TOUCH_PAUSE_YMIN) && (TS_State.touchY[0] < TOUCH_PAUSE_YMAX))
 8002a8e:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <AUDIO_REC_Process+0x274>)
 8002a90:	88db      	ldrh	r3, [r3, #6]
 8002a92:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a96:	d213      	bcs.n	8002ac0 <AUDIO_REC_Process+0x290>
        {
          AudioState = AUDIO_STATE_PAUSE;
 8002a98:	4b01      	ldr	r3, [pc, #4]	@ (8002aa0 <AUDIO_REC_Process+0x270>)
 8002a9a:	220b      	movs	r2, #11
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e03c      	b.n	8002b1a <AUDIO_REC_Process+0x2ea>
 8002aa0:	20001106 	.word	0x20001106
 8002aa4:	200083c0 	.word	0x200083c0
 8002aa8:	20000028 	.word	0x20000028
 8002aac:	20000024 	.word	0x20000024
 8002ab0:	0801cfa0 	.word	0x0801cfa0
 8002ab4:	ffff0000 	.word	0xffff0000
 8002ab8:	2000014c 	.word	0x2000014c
 8002abc:	0801cfbc 	.word	0x0801cfbc
        }
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
 8002ac0:	4bc0      	ldr	r3, [pc, #768]	@ (8002dc4 <AUDIO_REC_Process+0x594>)
 8002ac2:	885b      	ldrh	r3, [r3, #2]
 8002ac4:	2b14      	cmp	r3, #20
 8002ac6:	d911      	bls.n	8002aec <AUDIO_REC_Process+0x2bc>
 8002ac8:	4bbe      	ldr	r3, [pc, #760]	@ (8002dc4 <AUDIO_REC_Process+0x594>)
 8002aca:	885b      	ldrh	r3, [r3, #2]
 8002acc:	2b4f      	cmp	r3, #79	@ 0x4f
 8002ace:	d80d      	bhi.n	8002aec <AUDIO_REC_Process+0x2bc>
                (TS_State.touchY[0] > TOUCH_VOL_MINUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_MINUS_YMAX))
 8002ad0:	4bbc      	ldr	r3, [pc, #752]	@ (8002dc4 <AUDIO_REC_Process+0x594>)
 8002ad2:	88db      	ldrh	r3, [r3, #6]
        else if((TS_State.touchX[0] > TOUCH_VOL_MINUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_MINUS_XMAX) &&
 8002ad4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ad8:	d908      	bls.n	8002aec <AUDIO_REC_Process+0x2bc>
                (TS_State.touchY[0] > TOUCH_VOL_MINUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_MINUS_YMAX))
 8002ada:	4bba      	ldr	r3, [pc, #744]	@ (8002dc4 <AUDIO_REC_Process+0x594>)
 8002adc:	88db      	ldrh	r3, [r3, #6]
 8002ade:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ae2:	d203      	bcs.n	8002aec <AUDIO_REC_Process+0x2bc>
        {
          AudioState = AUDIO_STATE_VOLUME_DOWN;
 8002ae4:	4bb8      	ldr	r3, [pc, #736]	@ (8002dc8 <AUDIO_REC_Process+0x598>)
 8002ae6:	220e      	movs	r2, #14
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e016      	b.n	8002b1a <AUDIO_REC_Process+0x2ea>
        }
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
 8002aec:	4bb5      	ldr	r3, [pc, #724]	@ (8002dc4 <AUDIO_REC_Process+0x594>)
 8002aee:	885b      	ldrh	r3, [r3, #2]
 8002af0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002af4:	d911      	bls.n	8002b1a <AUDIO_REC_Process+0x2ea>
 8002af6:	4bb3      	ldr	r3, [pc, #716]	@ (8002dc4 <AUDIO_REC_Process+0x594>)
 8002af8:	885b      	ldrh	r3, [r3, #2]
 8002afa:	f5b3 7f0c 	cmp.w	r3, #560	@ 0x230
 8002afe:	d20c      	bcs.n	8002b1a <AUDIO_REC_Process+0x2ea>
                (TS_State.touchY[0] > TOUCH_VOL_PLUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_PLUS_YMAX))
 8002b00:	4bb0      	ldr	r3, [pc, #704]	@ (8002dc4 <AUDIO_REC_Process+0x594>)
 8002b02:	88db      	ldrh	r3, [r3, #6]
        else if((TS_State.touchX[0] > TOUCH_VOL_PLUS_XMIN) && (TS_State.touchX[0] < TOUCH_VOL_PLUS_XMAX) &&
 8002b04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b08:	d907      	bls.n	8002b1a <AUDIO_REC_Process+0x2ea>
                (TS_State.touchY[0] > TOUCH_VOL_PLUS_YMIN) && (TS_State.touchY[0] < TOUCH_VOL_PLUS_YMAX))
 8002b0a:	4bae      	ldr	r3, [pc, #696]	@ (8002dc4 <AUDIO_REC_Process+0x594>)
 8002b0c:	88db      	ldrh	r3, [r3, #6]
 8002b0e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b12:	d202      	bcs.n	8002b1a <AUDIO_REC_Process+0x2ea>
        {
          AudioState = AUDIO_STATE_VOLUME_UP;
 8002b14:	4bac      	ldr	r3, [pc, #688]	@ (8002dc8 <AUDIO_REC_Process+0x598>)
 8002b16:	220d      	movs	r2, #13
 8002b18:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    
    /* MAX Recording time reached, so stop audio interface and close file */
    if(BufferCtl.fptr >= REC_SAMPLE_LENGTH)
 8002b1a:	4bac      	ldr	r3, [pc, #688]	@ (8002dcc <AUDIO_REC_Process+0x59c>)
 8002b1c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002b20:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 8002b24:	4aaa      	ldr	r2, [pc, #680]	@ (8002dd0 <AUDIO_REC_Process+0x5a0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d906      	bls.n	8002b38 <AUDIO_REC_Process+0x308>
    {
      display_update = 1;
 8002b2a:	4baa      	ldr	r3, [pc, #680]	@ (8002dd4 <AUDIO_REC_Process+0x5a4>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
      AudioState = AUDIO_STATE_STOP;
 8002b30:	4ba5      	ldr	r3, [pc, #660]	@ (8002dc8 <AUDIO_REC_Process+0x598>)
 8002b32:	220a      	movs	r2, #10
 8002b34:	701a      	strb	r2, [r3, #0]
      break;
 8002b36:	e1fc      	b.n	8002f32 <AUDIO_REC_Process+0x702>
    }
    
    /* Check if there are Data to write to USB Key */
    // ALEX
    // Abspeichern von Audio in Datei
    if(BufferCtl.wr_state == BUFFER_FULL)
 8002b38:	4ba4      	ldr	r3, [pc, #656]	@ (8002dcc <AUDIO_REC_Process+0x59c>)
 8002b3a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002b3e:	f893 3a04 	ldrb.w	r3, [r3, #2564]	@ 0xa04
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d12c      	bne.n	8002ba0 <AUDIO_REC_Process+0x370>
    {
      /* write buffer in file */
      if(f_write(&WavFile, (uint8_t*)(BufferCtl.pcm_buff + BufferCtl.offset), 
 8002b46:	4ba1      	ldr	r3, [pc, #644]	@ (8002dcc <AUDIO_REC_Process+0x59c>)
 8002b48:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002b4c:	f8d3 3a08 	ldr.w	r3, [r3, #2568]	@ 0xa08
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4aa1      	ldr	r2, [pc, #644]	@ (8002dd8 <AUDIO_REC_Process+0x5a8>)
 8002b54:	1899      	adds	r1, r3, r2
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	f44f 5210 	mov.w	r2, #9216	@ 0x2400
 8002b5e:	489f      	ldr	r0, [pc, #636]	@ (8002ddc <AUDIO_REC_Process+0x5ac>)
 8002b60:	f011 ff91 	bl	8014a86 <f_write>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <AUDIO_REC_Process+0x34c>
                 AUDIO_IN_PCM_BUFFER_SIZE, 
                 (void*)&byteswritten) != FR_OK)
      {
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002b6a:	489d      	ldr	r0, [pc, #628]	@ (8002de0 <AUDIO_REC_Process+0x5b0>)
 8002b6c:	f003 fa98 	bl	80060a0 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");
 8002b70:	499c      	ldr	r1, [pc, #624]	@ (8002de4 <AUDIO_REC_Process+0x5b4>)
 8002b72:	200e      	movs	r0, #14
 8002b74:	f003 fc8e 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
        return AUDIO_ERROR_IO;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e1db      	b.n	8002f34 <AUDIO_REC_Process+0x704>
      }
      BufferCtl.fptr += byteswritten;
 8002b7c:	4b93      	ldr	r3, [pc, #588]	@ (8002dcc <AUDIO_REC_Process+0x59c>)
 8002b7e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002b82:	f8d3 2a0c 	ldr.w	r2, [r3, #2572]	@ 0xa0c
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a90      	ldr	r2, [pc, #576]	@ (8002dcc <AUDIO_REC_Process+0x59c>)
 8002b8c:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8002b90:	f8c2 3a0c 	str.w	r3, [r2, #2572]	@ 0xa0c
      BufferCtl.wr_state =  BUFFER_EMPTY;
 8002b94:	4b8d      	ldr	r3, [pc, #564]	@ (8002dcc <AUDIO_REC_Process+0x59c>)
 8002b96:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2a04 	strb.w	r2, [r3, #2564]	@ 0xa04
    }
    
    /* Display elapsed time */
    elapsed_time = BufferCtl.fptr / (DEFAULT_AUDIO_IN_FREQ * DEFAULT_AUDIO_IN_CHANNEL_NBR * 2); 
 8002ba0:	4b8a      	ldr	r3, [pc, #552]	@ (8002dcc <AUDIO_REC_Process+0x59c>)
 8002ba2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002ba6:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 8002baa:	4a8f      	ldr	r2, [pc, #572]	@ (8002de8 <AUDIO_REC_Process+0x5b8>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	0b1b      	lsrs	r3, r3, #12
 8002bb2:	61bb      	str	r3, [r7, #24]
    if(prev_elapsed_time != elapsed_time)
 8002bb4:	4b8d      	ldr	r3, [pc, #564]	@ (8002dec <AUDIO_REC_Process+0x5bc>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	f000 81b8 	beq.w	8002f30 <AUDIO_REC_Process+0x700>
    {
      prev_elapsed_time = elapsed_time;
 8002bc0:	4a8a      	ldr	r2, [pc, #552]	@ (8002dec <AUDIO_REC_Process+0x5bc>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6013      	str	r3, [r2, #0]
      sprintf((char *)str, "[%02d:%02d]", (int)(elapsed_time /60), (int)(elapsed_time%60));
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4a89      	ldr	r2, [pc, #548]	@ (8002df0 <AUDIO_REC_Process+0x5c0>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	461c      	mov	r4, r3
 8002bd2:	69b9      	ldr	r1, [r7, #24]
 8002bd4:	4b86      	ldr	r3, [pc, #536]	@ (8002df0 <AUDIO_REC_Process+0x5c0>)
 8002bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8002bda:	095a      	lsrs	r2, r3, #5
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	1aca      	subs	r2, r1, r3
 8002be6:	4613      	mov	r3, r2
 8002be8:	1d38      	adds	r0, r7, #4
 8002bea:	4622      	mov	r2, r4
 8002bec:	4981      	ldr	r1, [pc, #516]	@ (8002df4 <AUDIO_REC_Process+0x5c4>)
 8002bee:	f018 fbc3 	bl	801b378 <siprintf>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8002bf2:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8002bf6:	f003 fa53 	bl	80060a0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(263, LINE(8), str, LEFT_MODE);
 8002bfa:	f003 fa9d 	bl	8006138 <BSP_LCD_GetFont>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	88db      	ldrh	r3, [r3, #6]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	b299      	uxth	r1, r3
 8002c06:	1d3a      	adds	r2, r7, #4
 8002c08:	2303      	movs	r3, #3
 8002c0a:	f240 1007 	movw	r0, #263	@ 0x107
 8002c0e:	f003 fb79 	bl	8006304 <BSP_LCD_DisplayStringAt>
      sprintf((char *)str, "%4d KB", (int)((int32_t)BufferCtl.fptr/1024));
 8002c12:	4b6e      	ldr	r3, [pc, #440]	@ (8002dcc <AUDIO_REC_Process+0x59c>)
 8002c14:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002c18:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	da01      	bge.n	8002c24 <AUDIO_REC_Process+0x3f4>
 8002c20:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002c24:	129b      	asrs	r3, r3, #10
 8002c26:	461a      	mov	r2, r3
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	4973      	ldr	r1, [pc, #460]	@ (8002df8 <AUDIO_REC_Process+0x5c8>)
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f018 fba3 	bl	801b378 <siprintf>
      BSP_LCD_DisplayStringAt(83, LINE(8), str, LEFT_MODE);
 8002c32:	f003 fa81 	bl	8006138 <BSP_LCD_GetFont>
 8002c36:	4603      	mov	r3, r0
 8002c38:	88db      	ldrh	r3, [r3, #6]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	b299      	uxth	r1, r3
 8002c3e:	1d3a      	adds	r2, r7, #4
 8002c40:	2303      	movs	r3, #3
 8002c42:	2053      	movs	r0, #83	@ 0x53
 8002c44:	f003 fb5e 	bl	8006304 <BSP_LCD_DisplayStringAt>
    }
    break;
 8002c48:	e172      	b.n	8002f30 <AUDIO_REC_Process+0x700>
    
  case AUDIO_STATE_STOP:
    /* Stop recorder */
    BSP_AUDIO_IN_Stop();
 8002c4a:	f002 fc5f 	bl	800550c <BSP_AUDIO_IN_Stop>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
 8002c4e:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8002c52:	f003 fa25 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
 8002c56:	221e      	movs	r2, #30
 8002c58:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002c5c:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8002c60:	f003 fef0 	bl	8006a44 <BSP_LCD_FillCircle>
                       (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                       (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002c64:	485e      	ldr	r0, [pc, #376]	@ (8002de0 <AUDIO_REC_Process+0x5b0>)
 8002c66:	f003 fa1b 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
 8002c6a:	233c      	movs	r3, #60	@ 0x3c
 8002c6c:	223c      	movs	r2, #60	@ 0x3c
 8002c6e:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002c72:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8002c76:	f003 fe8b 	bl	8006990 <BSP_LCD_FillRect>
                     TOUCH_STOP_XMAX - TOUCH_STOP_XMIN,
                     TOUCH_STOP_YMAX - TOUCH_STOP_YMIN);
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8002c7a:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8002c7e:	f003 fa0f 	bl	80060a0 <BSP_LCD_SetTextColor>
    display_update = 1;
 8002c82:	4b54      	ldr	r3, [pc, #336]	@ (8002dd4 <AUDIO_REC_Process+0x5a4>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
    HAL_Delay(150);
 8002c88:	2096      	movs	r0, #150	@ 0x96
 8002c8a:	f005 f82f 	bl	8007cec <HAL_Delay>
    if(f_lseek(&WavFile, 0) == FR_OK)
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4852      	ldr	r0, [pc, #328]	@ (8002ddc <AUDIO_REC_Process+0x5ac>)
 8002c92:	f012 f915 	bl	8014ec0 <f_lseek>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11a      	bne.n	8002cd2 <AUDIO_REC_Process+0x4a2>
    {
      /* Update the wav file header save it into wav file */
      WavProcess_HeaderUpdate(pHeaderBuff, &WaveFormat);
 8002c9c:	4957      	ldr	r1, [pc, #348]	@ (8002dfc <AUDIO_REC_Process+0x5cc>)
 8002c9e:	4858      	ldr	r0, [pc, #352]	@ (8002e00 <AUDIO_REC_Process+0x5d0>)
 8002ca0:	f000 fb12 	bl	80032c8 <WavProcess_HeaderUpdate>
      
      if(f_write(&WavFile, pHeaderBuff, sizeof(WAVE_FormatTypeDef), (void*)&byteswritten) == FR_OK)
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	222c      	movs	r2, #44	@ 0x2c
 8002caa:	4955      	ldr	r1, [pc, #340]	@ (8002e00 <AUDIO_REC_Process+0x5d0>)
 8002cac:	484b      	ldr	r0, [pc, #300]	@ (8002ddc <AUDIO_REC_Process+0x5ac>)
 8002cae:	f011 feea 	bl	8014a86 <f_write>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <AUDIO_REC_Process+0x48e>
      {   
        audio_error = AUDIO_ERROR_EOF;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	e012      	b.n	8002ce4 <AUDIO_REC_Process+0x4b4>
      }
      else
      {
        audio_error = AUDIO_ERROR_IO;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	77fb      	strb	r3, [r7, #31]
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002cc2:	4847      	ldr	r0, [pc, #284]	@ (8002de0 <AUDIO_REC_Process+0x5b0>)
 8002cc4:	f003 f9ec 	bl	80060a0 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");          
 8002cc8:	4946      	ldr	r1, [pc, #280]	@ (8002de4 <AUDIO_REC_Process+0x5b4>)
 8002cca:	200e      	movs	r0, #14
 8002ccc:	f003 fbe2 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
 8002cd0:	e008      	b.n	8002ce4 <AUDIO_REC_Process+0x4b4>
      }
    }
    else
    {
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002cd2:	4843      	ldr	r0, [pc, #268]	@ (8002de0 <AUDIO_REC_Process+0x5b0>)
 8002cd4:	f003 f9e4 	bl	80060a0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"RECORD FAIL");
 8002cd8:	4942      	ldr	r1, [pc, #264]	@ (8002de4 <AUDIO_REC_Process+0x5b4>)
 8002cda:	200e      	movs	r0, #14
 8002cdc:	f003 fbda 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
      audio_error = AUDIO_ERROR_IO;      
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	77fb      	strb	r3, [r7, #31]
    }
    AudioState = AUDIO_STATE_IDLE;      
 8002ce4:	4b38      	ldr	r3, [pc, #224]	@ (8002dc8 <AUDIO_REC_Process+0x598>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
    /* Close file */
    f_close(&WavFile);
 8002cea:	483c      	ldr	r0, [pc, #240]	@ (8002ddc <AUDIO_REC_Process+0x5ac>)
 8002cec:	f012 f8be 	bl	8014e6c <f_close>
    break;
 8002cf0:	e11f      	b.n	8002f32 <AUDIO_REC_Process+0x702>
    
  case AUDIO_STATE_PAUSE:
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Displays red pause rectangles */
 8002cf2:	483b      	ldr	r0, [pc, #236]	@ (8002de0 <AUDIO_REC_Process+0x5b0>)
 8002cf4:	f003 f9d4 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8002cf8:	233c      	movs	r3, #60	@ 0x3c
 8002cfa:	220f      	movs	r2, #15
 8002cfc:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002d00:	208c      	movs	r0, #140	@ 0x8c
 8002d02:	f003 fe45 	bl	8006990 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8002d06:	233c      	movs	r3, #60	@ 0x3c
 8002d08:	220f      	movs	r2, #15
 8002d0a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002d0e:	20a0      	movs	r0, #160	@ 0xa0
 8002d10:	f003 fe3e 	bl	8006990 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);   /* Display blue cyan record circle */
 8002d14:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8002d18:	f003 f9c2 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
 8002d1c:	221e      	movs	r2, #30
 8002d1e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002d22:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8002d26:	f003 fe8d 	bl	8006a44 <BSP_LCD_FillCircle>
                       (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                       (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002d2a:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8002d2e:	f003 f9b7 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [PAUSE] ", LEFT_MODE);    
 8002d32:	f003 fa01 	bl	8006138 <BSP_LCD_GetFont>
 8002d36:	4603      	mov	r3, r0
 8002d38:	88db      	ldrh	r3, [r3, #6]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	0052      	lsls	r2, r2, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	b299      	uxth	r1, r3
 8002d44:	2303      	movs	r3, #3
 8002d46:	4a2f      	ldr	r2, [pc, #188]	@ (8002e04 <AUDIO_REC_Process+0x5d4>)
 8002d48:	20f7      	movs	r0, #247	@ 0xf7
 8002d4a:	f003 fadb 	bl	8006304 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Pause();
 8002d4e:	f002 fbf7 	bl	8005540 <BSP_AUDIO_IN_Pause>
    AudioState = AUDIO_STATE_WAIT;
 8002d52:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc8 <AUDIO_REC_Process+0x598>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
    break;
 8002d58:	e0eb      	b.n	8002f32 <AUDIO_REC_Process+0x702>
    
  case AUDIO_STATE_RESUME:
    BSP_LCD_SetTextColor(LCD_COLOR_CYAN);    /* Displays blue cyan pause rectangles */
 8002d5a:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8002d5e:	f003 f99f 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8002d62:	233c      	movs	r3, #60	@ 0x3c
 8002d64:	220f      	movs	r2, #15
 8002d66:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002d6a:	208c      	movs	r0, #140	@ 0x8c
 8002d6c:	f003 fe10 	bl	8006990 <BSP_LCD_FillRect>
    BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 8002d70:	233c      	movs	r3, #60	@ 0x3c
 8002d72:	220f      	movs	r2, #15
 8002d74:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002d78:	20a0      	movs	r0, #160	@ 0xa0
 8002d7a:	f003 fe09 	bl	8006990 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);    /* Display red record circle */
 8002d7e:	4818      	ldr	r0, [pc, #96]	@ (8002de0 <AUDIO_REC_Process+0x5b0>)
 8002d80:	f003 f98e 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2,
 8002d84:	221e      	movs	r2, #30
 8002d86:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002d8a:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8002d8e:	f003 fe59 	bl	8006a44 <BSP_LCD_FillCircle>
                       (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                       (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002d92:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8002d96:	f003 f983 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(247, LINE(6), (uint8_t *)"  [RECORD]", LEFT_MODE);   
 8002d9a:	f003 f9cd 	bl	8006138 <BSP_LCD_GetFont>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	88db      	ldrh	r3, [r3, #6]
 8002da2:	461a      	mov	r2, r3
 8002da4:	0052      	lsls	r2, r2, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	b299      	uxth	r1, r3
 8002dac:	2303      	movs	r3, #3
 8002dae:	4a16      	ldr	r2, [pc, #88]	@ (8002e08 <AUDIO_REC_Process+0x5d8>)
 8002db0:	20f7      	movs	r0, #247	@ 0xf7
 8002db2:	f003 faa7 	bl	8006304 <BSP_LCD_DisplayStringAt>
    BSP_AUDIO_IN_Resume();
 8002db6:	f002 fbcd 	bl	8005554 <BSP_AUDIO_IN_Resume>
    AudioState = AUDIO_STATE_RECORD;
 8002dba:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <AUDIO_REC_Process+0x598>)
 8002dbc:	2205      	movs	r2, #5
 8002dbe:	701a      	strb	r2, [r3, #0]
    break;
 8002dc0:	e0b7      	b.n	8002f32 <AUDIO_REC_Process+0x702>
 8002dc2:	bf00      	nop
 8002dc4:	200083c0 	.word	0x200083c0
 8002dc8:	20001106 	.word	0x20001106
 8002dcc:	200039b0 	.word	0x200039b0
 8002dd0:	001d4bff 	.word	0x001d4bff
 8002dd4:	20000028 	.word	0x20000028
 8002dd8:	20003bb0 	.word	0x20003bb0
 8002ddc:	20003740 	.word	0x20003740
 8002de0:	ffff0000 	.word	0xffff0000
 8002de4:	0801cfc8 	.word	0x0801cfc8
 8002de8:	10624dd3 	.word	0x10624dd3
 8002dec:	2000002c 	.word	0x2000002c
 8002df0:	88888889 	.word	0x88888889
 8002df4:	0801cfd4 	.word	0x0801cfd4
 8002df8:	0801cfe0 	.word	0x0801cfe0
 8002dfc:	20003714 	.word	0x20003714
 8002e00:	20003984 	.word	0x20003984
 8002e04:	0801cfe8 	.word	0x0801cfe8
 8002e08:	0801cfbc 	.word	0x0801cfbc
    
  case AUDIO_STATE_VOLUME_UP:
    if(uwVolume <= 95)
 8002e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b5f      	cmp	r3, #95	@ 0x5f
 8002e12:	d804      	bhi.n	8002e1e <AUDIO_REC_Process+0x5ee>
    {
      uwVolume += 5;
 8002e14:	4b49      	ldr	r3, [pc, #292]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3305      	adds	r3, #5
 8002e1a:	4a48      	ldr	r2, [pc, #288]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e1c:	6013      	str	r3, [r2, #0]
    }
    sprintf((char *)str,  "Volume : %d ", (int)uwVolume);
 8002e1e:	4b47      	ldr	r3, [pc, #284]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	461a      	mov	r2, r3
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	4946      	ldr	r1, [pc, #280]	@ (8002f40 <AUDIO_REC_Process+0x710>)
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f018 faa5 	bl	801b378 <siprintf>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002e2e:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8002e32:	f003 f935 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_ClearStringLine(7);
 8002e36:	2007      	movs	r0, #7
 8002e38:	f003 f9bc 	bl	80061b4 <BSP_LCD_ClearStringLine>
    BSP_LCD_DisplayStringAtLine(7, str);
 8002e3c:	1d3b      	adds	r3, r7, #4
 8002e3e:	4619      	mov	r1, r3
 8002e40:	2007      	movs	r0, #7
 8002e42:	f003 fb27 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
    BSP_AUDIO_IN_SetVolume(uwVolume);
 8002e46:	4b3d      	ldr	r3, [pc, #244]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fb8b 	bl	8005568 <BSP_AUDIO_IN_SetVolume>
    AudioState = AUDIO_STATE_RECORD;
 8002e52:	4b3c      	ldr	r3, [pc, #240]	@ (8002f44 <AUDIO_REC_Process+0x714>)
 8002e54:	2205      	movs	r2, #5
 8002e56:	701a      	strb	r2, [r3, #0]
    break;
 8002e58:	e06b      	b.n	8002f32 <AUDIO_REC_Process+0x702>
    
  case AUDIO_STATE_VOLUME_DOWN:
    if(uwVolume >= 5)
 8002e5a:	4b38      	ldr	r3, [pc, #224]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d904      	bls.n	8002e6c <AUDIO_REC_Process+0x63c>
    {
      uwVolume -= 5;
 8002e62:	4b36      	ldr	r3, [pc, #216]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3b05      	subs	r3, #5
 8002e68:	4a34      	ldr	r2, [pc, #208]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e6a:	6013      	str	r3, [r2, #0]
    }
    sprintf((char *)str,  "Volume : %d ", (int)uwVolume);
 8002e6c:	4b33      	ldr	r3, [pc, #204]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	4932      	ldr	r1, [pc, #200]	@ (8002f40 <AUDIO_REC_Process+0x710>)
 8002e76:	4618      	mov	r0, r3
 8002e78:	f018 fa7e 	bl	801b378 <siprintf>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002e7c:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8002e80:	f003 f90e 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_ClearStringLine(7);
 8002e84:	2007      	movs	r0, #7
 8002e86:	f003 f995 	bl	80061b4 <BSP_LCD_ClearStringLine>
    BSP_LCD_DisplayStringAtLine(7, str);
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	2007      	movs	r0, #7
 8002e90:	f003 fb00 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
    BSP_AUDIO_IN_SetVolume(uwVolume);
 8002e94:	4b29      	ldr	r3, [pc, #164]	@ (8002f3c <AUDIO_REC_Process+0x70c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f002 fb64 	bl	8005568 <BSP_AUDIO_IN_SetVolume>
    AudioState = AUDIO_STATE_RECORD;
 8002ea0:	4b28      	ldr	r3, [pc, #160]	@ (8002f44 <AUDIO_REC_Process+0x714>)
 8002ea2:	2205      	movs	r2, #5
 8002ea4:	701a      	strb	r2, [r3, #0]
    break;
 8002ea6:	e044      	b.n	8002f32 <AUDIO_REC_Process+0x702>
    
  case AUDIO_STATE_NEXT:
  case AUDIO_STATE_PREVIOUS:   
    AudioState = AUDIO_STATE_RECORD;
 8002ea8:	4b26      	ldr	r3, [pc, #152]	@ (8002f44 <AUDIO_REC_Process+0x714>)
 8002eaa:	2205      	movs	r2, #5
 8002eac:	701a      	strb	r2, [r3, #0]
    break;
 8002eae:	e040      	b.n	8002f32 <AUDIO_REC_Process+0x702>
    
  case AUDIO_STATE_WAIT:
    if(TS_State.touchDetected == 1)   /* If previous touch has not been released, we don't proceed any touch command */
 8002eb0:	4b25      	ldr	r3, [pc, #148]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d103      	bne.n	8002ec0 <AUDIO_REC_Process+0x690>
    {
      BSP_TS_GetState(&TS_State);
 8002eb8:	4823      	ldr	r0, [pc, #140]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002eba:	f004 fc37 	bl	800772c <BSP_TS_GetState>
    }
  case AUDIO_STATE_IDLE:
  case AUDIO_STATE_INIT: 
  default:
    /* Do Nothing */
    break;
 8002ebe:	e033      	b.n	8002f28 <AUDIO_REC_Process+0x6f8>
      BSP_TS_GetState(&TS_State);
 8002ec0:	4821      	ldr	r0, [pc, #132]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002ec2:	f004 fc33 	bl	800772c <BSP_TS_GetState>
      if(TS_State.touchDetected == 1)
 8002ec6:	4b20      	ldr	r3, [pc, #128]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d12c      	bne.n	8002f28 <AUDIO_REC_Process+0x6f8>
        if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
 8002ece:	4b1e      	ldr	r3, [pc, #120]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002ed0:	885b      	ldrh	r3, [r3, #2]
 8002ed2:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 8002ed6:	d912      	bls.n	8002efe <AUDIO_REC_Process+0x6ce>
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002eda:	885b      	ldrh	r3, [r3, #2]
 8002edc:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8002ee0:	d20d      	bcs.n	8002efe <AUDIO_REC_Process+0x6ce>
            (TS_State.touchY[0] > TOUCH_RECORD_YMIN) && (TS_State.touchY[0] < TOUCH_RECORD_YMAX))
 8002ee2:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002ee4:	88db      	ldrh	r3, [r3, #6]
        if ((TS_State.touchX[0] > TOUCH_RECORD_XMIN) && (TS_State.touchX[0] < TOUCH_RECORD_XMAX) &&
 8002ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002eea:	d908      	bls.n	8002efe <AUDIO_REC_Process+0x6ce>
            (TS_State.touchY[0] > TOUCH_RECORD_YMIN) && (TS_State.touchY[0] < TOUCH_RECORD_YMAX))
 8002eec:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002eee:	88db      	ldrh	r3, [r3, #6]
 8002ef0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002ef4:	d203      	bcs.n	8002efe <AUDIO_REC_Process+0x6ce>
          AudioState = AUDIO_STATE_RESUME;
 8002ef6:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <AUDIO_REC_Process+0x714>)
 8002ef8:	220c      	movs	r2, #12
 8002efa:	701a      	strb	r2, [r3, #0]
    break;
 8002efc:	e014      	b.n	8002f28 <AUDIO_REC_Process+0x6f8>
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
 8002efe:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002f00:	885b      	ldrh	r3, [r3, #2]
 8002f02:	2b8c      	cmp	r3, #140	@ 0x8c
 8002f04:	d910      	bls.n	8002f28 <AUDIO_REC_Process+0x6f8>
 8002f06:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002f08:	885b      	ldrh	r3, [r3, #2]
 8002f0a:	2bc7      	cmp	r3, #199	@ 0xc7
 8002f0c:	d80c      	bhi.n	8002f28 <AUDIO_REC_Process+0x6f8>
                 (TS_State.touchY[0] > TOUCH_PAUSE_YMIN) && (TS_State.touchY[0] < TOUCH_PAUSE_YMAX))
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002f10:	88db      	ldrh	r3, [r3, #6]
        else if ((TS_State.touchX[0] > TOUCH_PAUSE_XMIN) && (TS_State.touchX[0] < TOUCH_PAUSE_XMAX) &&
 8002f12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f16:	d907      	bls.n	8002f28 <AUDIO_REC_Process+0x6f8>
                 (TS_State.touchY[0] > TOUCH_PAUSE_YMIN) && (TS_State.touchY[0] < TOUCH_PAUSE_YMAX))
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <AUDIO_REC_Process+0x718>)
 8002f1a:	88db      	ldrh	r3, [r3, #6]
 8002f1c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f20:	d202      	bcs.n	8002f28 <AUDIO_REC_Process+0x6f8>
          AudioState = AUDIO_STATE_RESUME;
 8002f22:	4b08      	ldr	r3, [pc, #32]	@ (8002f44 <AUDIO_REC_Process+0x714>)
 8002f24:	220c      	movs	r2, #12
 8002f26:	701a      	strb	r2, [r3, #0]
    break;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <AUDIO_REC_Process+0x702>
    break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <AUDIO_REC_Process+0x702>
    break;
 8002f30:	bf00      	nop
  }
  return audio_error;
 8002f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3724      	adds	r7, #36	@ 0x24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd90      	pop	{r4, r7, pc}
 8002f3c:	20000024 	.word	0x20000024
 8002f40:	0801cfa0 	.word	0x0801cfa0
 8002f44:	20001106 	.word	0x20001106
 8002f48:	200083c0 	.word	0x200083c0

08002f4c <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief  Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* PDM to PCM data convert */
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&BufferCtl.pdm_buff[AUDIO_IN_PDM_BUFFER_SIZE/2], 
                        &BufferCtl.pcm_buff[BufferCtl.pcm_ptr]);
 8002f50:	4b26      	ldr	r3, [pc, #152]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002f52:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002f56:	f8d3 3a00 	ldr.w	r3, [r3, #2560]	@ 0xa00
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&BufferCtl.pdm_buff[AUDIO_IN_PDM_BUFFER_SIZE/2], 
 8002f5a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4a22      	ldr	r2, [pc, #136]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002f62:	4413      	add	r3, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	4822      	ldr	r0, [pc, #136]	@ (8002ff0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xa4>)
 8002f68:	f002 fb10 	bl	800558c <BSP_AUDIO_IN_PDMToPCM>
  
  BufferCtl.pcm_ptr+= AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 8002f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002f6e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002f72:	f8d3 3a00 	ldr.w	r3, [r3, #2560]	@ 0xa00
 8002f76:	3320      	adds	r3, #32
 8002f78:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002f7a:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8002f7e:	f8c2 3a00 	str.w	r3, [r2, #2560]	@ 0xa00
  
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 8002f82:	4b1a      	ldr	r3, [pc, #104]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002f84:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002f88:	f8d3 3a00 	ldr.w	r3, [r3, #2560]	@ 0xa00
 8002f8c:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8002f90:	d10c      	bne.n	8002fac <BSP_AUDIO_IN_TransferComplete_CallBack+0x60>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 8002f92:	4b16      	ldr	r3, [pc, #88]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002f94:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2a04 	strb.w	r2, [r3, #2564]	@ 0xa04
    BufferCtl.offset  = 0;
 8002f9e:	4b13      	ldr	r3, [pc, #76]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002fa0:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f8c2 3a08 	str.w	r3, [r2, #2568]	@ 0xa08
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 8002fac:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002fae:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002fb2:	f8d3 3a00 	ldr.w	r3, [r3, #2560]	@ 0xa00
 8002fb6:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8002fba:	d314      	bcc.n	8002fe6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x9a>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002fbe:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2a04 	strb.w	r2, [r3, #2564]	@ 0xa04
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 8002fc8:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002fca:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8002fd4:	f8c2 3a08 	str.w	r3, [r2, #2568]	@ 0xa08
    BufferCtl.pcm_ptr = 0;
 8002fd8:	4b04      	ldr	r3, [pc, #16]	@ (8002fec <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8002fda:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c2 3a00 	str.w	r3, [r2, #2560]	@ 0xa00
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200039b0 	.word	0x200039b0
 8002ff0:	20003ab0 	.word	0x20003ab0

08002ff4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{ 
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* PDM to PCM data convert */
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&BufferCtl.pdm_buff[0], 
                        &BufferCtl.pcm_buff[BufferCtl.pcm_ptr]);
 8002ff8:	4b26      	ldr	r3, [pc, #152]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 8002ffa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8002ffe:	f8d3 3a00 	ldr.w	r3, [r3, #2560]	@ 0xa00
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&BufferCtl.pdm_buff[0], 
 8003002:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4a22      	ldr	r2, [pc, #136]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 800300a:	4413      	add	r3, r2
 800300c:	4619      	mov	r1, r3
 800300e:	4821      	ldr	r0, [pc, #132]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 8003010:	f002 fabc 	bl	800558c <BSP_AUDIO_IN_PDMToPCM>
  
  BufferCtl.pcm_ptr+= AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 8003014:	4b1f      	ldr	r3, [pc, #124]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 8003016:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800301a:	f8d3 3a00 	ldr.w	r3, [r3, #2560]	@ 0xa00
 800301e:	3320      	adds	r3, #32
 8003020:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 8003022:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003026:	f8c2 3a00 	str.w	r3, [r2, #2560]	@ 0xa00
  
  if(BufferCtl.pcm_ptr == AUDIO_IN_PCM_BUFFER_SIZE/2)
 800302a:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 800302c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003030:	f8d3 3a00 	ldr.w	r3, [r3, #2560]	@ 0xa00
 8003034:	f5b3 5f90 	cmp.w	r3, #4608	@ 0x1200
 8003038:	d10c      	bne.n	8003054 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x60>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 800303a:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 800303c:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2a04 	strb.w	r2, [r3, #2564]	@ 0xa04
    BufferCtl.offset  = 0;
 8003046:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 8003048:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800304c:	461a      	mov	r2, r3
 800304e:	2300      	movs	r3, #0
 8003050:	f8c2 3a08 	str.w	r3, [r2, #2568]	@ 0xa08
  }
  
  if(BufferCtl.pcm_ptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 8003054:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 8003056:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800305a:	f8d3 3a00 	ldr.w	r3, [r3, #2560]	@ 0xa00
 800305e:	f5b3 5f10 	cmp.w	r3, #9216	@ 0x2400
 8003062:	d314      	bcc.n	800308e <BSP_AUDIO_IN_HalfTransfer_CallBack+0x9a>
  {
    BufferCtl.wr_state   =  BUFFER_FULL;
 8003064:	4b0b      	ldr	r3, [pc, #44]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 8003066:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2a04 	strb.w	r2, [r3, #2564]	@ 0xa04
    BufferCtl.offset  = AUDIO_IN_PCM_BUFFER_SIZE/2;    
 8003070:	4b08      	ldr	r3, [pc, #32]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 8003072:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003076:	461a      	mov	r2, r3
 8003078:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800307c:	f8c2 3a08 	str.w	r3, [r2, #2568]	@ 0xa08
    BufferCtl.pcm_ptr = 0;
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 8003082:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003086:	461a      	mov	r2, r3
 8003088:	2300      	movs	r3, #0
 800308a:	f8c2 3a00 	str.w	r3, [r2, #2560]	@ 0xa00
  }
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200039b0 	.word	0x200039b0

08003098 <WavProcess_EncInit>:
  * @param  Freq: Sampling frequency.
  * @param  pHeader: Pointer to the WAV file header to be written.  
  * @retval 0 if success, !0 else.
  */
static uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{  
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = Freq;        /* Audio sampling frequency */
 80030a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6193      	str	r3, [r2, #24]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 80030a8:	4b19      	ldr	r3, [pc, #100]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030aa:	2202      	movs	r2, #2
 80030ac:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 80030ae:	4b18      	ldr	r3, [pc, #96]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030b0:	2210      	movs	r2, #16
 80030b2:	845a      	strh	r2, [r3, #34]	@ 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 80030b4:	4b16      	ldr	r3, [pc, #88]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030b6:	4a17      	ldr	r2, [pc, #92]	@ (8003114 <WavProcess_EncInit+0x7c>)
 80030b8:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 80030ba:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030bc:	222c      	movs	r2, #44	@ 0x2c
 80030be:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 80030c0:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030c2:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 80030c4:	4a12      	ldr	r2, [pc, #72]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030c6:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 80030c8:	08d2      	lsrs	r2, r2, #3
 80030ca:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 80030cc:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 80030d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030d2:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 80030d4:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 80030d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030da:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 80030dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030de:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 80030e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030e2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	fb12 f303 	smulbb	r3, r2, r3
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	4b08      	ldr	r3, [pc, #32]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030f0:	841a      	strh	r2, [r3, #32]
  
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat))
 80030f2:	4907      	ldr	r1, [pc, #28]	@ (8003110 <WavProcess_EncInit+0x78>)
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	f000 f80f 	bl	8003118 <WavProcess_HeaderInit>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <WavProcess_EncInit+0x6c>
  {
    return 1;
 8003100:	2301      	movs	r3, #1
 8003102:	e000      	b.n	8003106 <WavProcess_EncInit+0x6e>
  }
  return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20003714 	.word	0x20003714
 8003114:	001d4c00 	.word	0x001d4c00

08003118 <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2252      	movs	r2, #82	@ 0x52
 8003126:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3301      	adds	r3, #1
 800312c:	2249      	movs	r2, #73	@ 0x49
 800312e:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3302      	adds	r3, #2
 8003134:	2246      	movs	r2, #70	@ 0x46
 8003136:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3303      	adds	r3, #3
 800313c:	2246      	movs	r2, #70	@ 0x46
 800313e:	701a      	strb	r2, [r3, #0]
  
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = 0x00;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
  pHeader[5] = 0x4C;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3305      	adds	r3, #5
 800314c:	224c      	movs	r2, #76	@ 0x4c
 800314e:	701a      	strb	r2, [r3, #0]
  pHeader[6] = 0x1D;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3306      	adds	r3, #6
 8003154:	221d      	movs	r2, #29
 8003156:	701a      	strb	r2, [r3, #0]
  pHeader[7] = 0x00;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3307      	adds	r3, #7
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3308      	adds	r3, #8
 8003164:	2257      	movs	r2, #87	@ 0x57
 8003166:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3309      	adds	r3, #9
 800316c:	2241      	movs	r2, #65	@ 0x41
 800316e:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	330a      	adds	r3, #10
 8003174:	2256      	movs	r2, #86	@ 0x56
 8003176:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	330b      	adds	r3, #11
 800317c:	2245      	movs	r2, #69	@ 0x45
 800317e:	701a      	strb	r2, [r3, #0]
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	330c      	adds	r3, #12
 8003184:	2266      	movs	r2, #102	@ 0x66
 8003186:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	330d      	adds	r3, #13
 800318c:	226d      	movs	r2, #109	@ 0x6d
 800318e:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	330e      	adds	r3, #14
 8003194:	2274      	movs	r2, #116	@ 0x74
 8003196:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	330f      	adds	r3, #15
 800319c:	2220      	movs	r2, #32
 800319e:	701a      	strb	r2, [r3, #0]
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3310      	adds	r3, #16
 80031a4:	2210      	movs	r2, #16
 80031a6:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3311      	adds	r3, #17
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3312      	adds	r3, #18
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3313      	adds	r3, #19
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
  
  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3314      	adds	r3, #20
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3315      	adds	r3, #21
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	8ada      	ldrh	r2, [r3, #22]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3316      	adds	r3, #22
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3317      	adds	r3, #23
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3318      	adds	r3, #24
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	0a1a      	lsrs	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3319      	adds	r3, #25
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	0c1a      	lsrs	r2, r3, #16
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	331a      	adds	r3, #26
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	0e1a      	lsrs	r2, r3, #24
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	331b      	adds	r3, #27
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	701a      	strb	r2, [r3, #0]
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	331c      	adds	r3, #28
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	0a1a      	lsrs	r2, r3, #8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	331d      	adds	r3, #29
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	0c1a      	lsrs	r2, r3, #16
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	331e      	adds	r3, #30
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	0e1a      	lsrs	r2, r3, #24
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	331f      	adds	r3, #31
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	701a      	strb	r2, [r3, #0]
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	8c1a      	ldrh	r2, [r3, #32]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3320      	adds	r3, #32
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3321      	adds	r3, #33	@ 0x21
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3322      	adds	r3, #34	@ 0x22
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3323      	adds	r3, #35	@ 0x23
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3324      	adds	r3, #36	@ 0x24
 800327c:	2264      	movs	r2, #100	@ 0x64
 800327e:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3325      	adds	r3, #37	@ 0x25
 8003284:	2261      	movs	r2, #97	@ 0x61
 8003286:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3326      	adds	r3, #38	@ 0x26
 800328c:	2274      	movs	r2, #116	@ 0x74
 800328e:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3327      	adds	r3, #39	@ 0x27
 8003294:	2261      	movs	r2, #97	@ 0x61
 8003296:	701a      	strb	r2, [r3, #0]
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3328      	adds	r3, #40	@ 0x28
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
  pHeader[41]  = 0x4C;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3329      	adds	r3, #41	@ 0x29
 80032a4:	224c      	movs	r2, #76	@ 0x4c
 80032a6:	701a      	strb	r2, [r3, #0]
  pHeader[42]  = 0x1D;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	332a      	adds	r3, #42	@ 0x2a
 80032ac:	221d      	movs	r2, #29
 80032ae:	701a      	strb	r2, [r3, #0]
  pHeader[43]  = 0x00;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	332b      	adds	r3, #43	@ 0x2b
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <WavProcess_HeaderUpdate>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the 
     recording operation.  Example: 661500 Bytes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 80032d2:	4b30      	ldr	r3, [pc, #192]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 80032d4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80032d8:	f8d3 2a0c 	ldr.w	r2, [r3, #2572]	@ 0xa0c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 80032e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 80032e6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80032ea:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 80032ee:	0a1a      	lsrs	r2, r3, #8
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3305      	adds	r3, #5
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 80032f8:	4b26      	ldr	r3, [pc, #152]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 80032fa:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80032fe:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 8003302:	0c1a      	lsrs	r2, r3, #16
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3306      	adds	r3, #6
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 800330c:	4b21      	ldr	r3, [pc, #132]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 800330e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003312:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 8003316:	0e1a      	lsrs	r2, r3, #24
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3307      	adds	r3, #7
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	701a      	strb	r2, [r3, #0]
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 8003320:	4b1c      	ldr	r3, [pc, #112]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 8003322:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003326:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 800332a:	3b2c      	subs	r3, #44	@ 0x2c
 800332c:	4a19      	ldr	r2, [pc, #100]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 800332e:	f502 4280 	add.w	r2, r2, #16384	@ 0x4000
 8003332:	f8c2 3a0c 	str.w	r3, [r2, #2572]	@ 0xa0c
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 8003336:	4b17      	ldr	r3, [pc, #92]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 8003338:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800333c:	f8d3 2a0c 	ldr.w	r2, [r3, #2572]	@ 0xa0c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3328      	adds	r3, #40	@ 0x28
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8003348:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 800334a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800334e:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 8003352:	0a1a      	lsrs	r2, r3, #8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3329      	adds	r3, #41	@ 0x29
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 800335c:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 800335e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003362:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 8003366:	0c1a      	lsrs	r2, r3, #16
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	332a      	adds	r3, #42	@ 0x2a
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 8003370:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <WavProcess_HeaderUpdate+0xcc>)
 8003372:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8003376:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	@ 0xa0c
 800337a:	0e1a      	lsrs	r2, r3, #24
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	332b      	adds	r3, #43	@ 0x2b
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]
  
  /* Return 0 if all operations are OK */
  return 0;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	200039b0 	.word	0x200039b0

08003398 <AUDIO_REC_DisplayButtons>:
  * @brief  Display interface touch screen buttons
  * @param  None
  * @retval None
  */
static void AUDIO_REC_DisplayButtons(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  BSP_LCD_SetFont(&LCD_LOG_HEADER_FONT);
 800339c:	4839      	ldr	r0, [pc, #228]	@ (8003484 <AUDIO_REC_DisplayButtons+0xec>)
 800339e:	f002 feb1 	bl	8006104 <BSP_LCD_SetFont>
  BSP_LCD_ClearStringLine(14);            /* Clear dedicated zone */
 80033a2:	200e      	movs	r0, #14
 80033a4:	f002 ff06 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(15);           
 80033a8:	200f      	movs	r0, #15
 80033aa:	f002 ff03 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(16);
 80033ae:	2010      	movs	r0, #16
 80033b0:	f002 ff00 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(17);
 80033b4:	2011      	movs	r0, #17
 80033b6:	f002 fefd 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(18);
 80033ba:	2012      	movs	r0, #18
 80033bc:	f002 fefa 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(19);
 80033c0:	2013      	movs	r0, #19
 80033c2:	f002 fef7 	bl	80061b4 <BSP_LCD_ClearStringLine>
  BSP_LCD_ClearStringLine(20);
 80033c6:	2014      	movs	r0, #20
 80033c8:	f002 fef4 	bl	80061b4 <BSP_LCD_ClearStringLine>

  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 80033cc:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 80033d0:	f002 fe66 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle((TOUCH_RECORD_XMAX+TOUCH_RECORD_XMIN)/2, /* Record circle */
 80033d4:	221e      	movs	r2, #30
 80033d6:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80033da:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 80033de:	f003 fb31 	bl	8006a44 <BSP_LCD_FillCircle>
                     (TOUCH_RECORD_YMAX+TOUCH_RECORD_YMIN)/2,
                     (TOUCH_RECORD_XMAX-TOUCH_RECORD_XMIN)/2);
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN, TOUCH_PAUSE_YMIN , 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);    /* Pause rectangles */
 80033e2:	233c      	movs	r3, #60	@ 0x3c
 80033e4:	220f      	movs	r2, #15
 80033e6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80033ea:	208c      	movs	r0, #140	@ 0x8c
 80033ec:	f003 fad0 	bl	8006990 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_PAUSE_XMIN + 20, TOUCH_PAUSE_YMIN, 15, TOUCH_PAUSE_YMAX - TOUCH_PAUSE_YMIN);
 80033f0:	233c      	movs	r3, #60	@ 0x3c
 80033f2:	220f      	movs	r2, #15
 80033f4:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80033f8:	20a0      	movs	r0, #160	@ 0xa0
 80033fa:	f003 fac9 	bl	8006990 <BSP_LCD_FillRect>
  BSP_LCD_FillRect(TOUCH_STOP_XMIN, TOUCH_STOP_YMIN , /* Stop rectangle */
 80033fe:	233c      	movs	r3, #60	@ 0x3c
 8003400:	223c      	movs	r2, #60	@ 0x3c
 8003402:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8003406:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800340a:	f003 fac1 	bl	8006990 <BSP_LCD_FillRect>
                   TOUCH_STOP_XMAX - TOUCH_STOP_XMIN,
                   TOUCH_STOP_YMAX - TOUCH_STOP_YMIN);
  BSP_LCD_DrawRect(TOUCH_VOL_MINUS_XMIN, TOUCH_VOL_MINUS_YMIN , /* VOl- rectangle */
 800340e:	233c      	movs	r3, #60	@ 0x3c
 8003410:	223c      	movs	r2, #60	@ 0x3c
 8003412:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8003416:	2014      	movs	r0, #20
 8003418:	f003 f99e 	bl	8006758 <BSP_LCD_DrawRect>
                   TOUCH_VOL_MINUS_XMAX - TOUCH_VOL_MINUS_XMIN,
                   TOUCH_VOL_MINUS_YMAX - TOUCH_VOL_MINUS_YMIN);
  BSP_LCD_DisplayStringAt(26, LINE(17), (uint8_t *)"VOl-", LEFT_MODE);
 800341c:	f002 fe8c 	bl	8006138 <BSP_LCD_GetFont>
 8003420:	4603      	mov	r3, r0
 8003422:	88db      	ldrh	r3, [r3, #6]
 8003424:	461a      	mov	r2, r3
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	4413      	add	r3, r2
 800342a:	b299      	uxth	r1, r3
 800342c:	2303      	movs	r3, #3
 800342e:	4a16      	ldr	r2, [pc, #88]	@ (8003488 <AUDIO_REC_DisplayButtons+0xf0>)
 8003430:	201a      	movs	r0, #26
 8003432:	f002 ff67 	bl	8006304 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawRect(TOUCH_VOL_PLUS_XMIN, TOUCH_VOL_PLUS_YMIN , /* VOl+ rectangle */
 8003436:	233c      	movs	r3, #60	@ 0x3c
 8003438:	223c      	movs	r2, #60	@ 0x3c
 800343a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800343e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003442:	f003 f989 	bl	8006758 <BSP_LCD_DrawRect>
                   TOUCH_VOL_PLUS_XMAX - TOUCH_VOL_PLUS_XMIN,
                   TOUCH_VOL_PLUS_YMAX - TOUCH_VOL_PLUS_YMIN);
  BSP_LCD_DisplayStringAt(506, LINE(17), (uint8_t *)"VOl+", LEFT_MODE);
 8003446:	f002 fe77 	bl	8006138 <BSP_LCD_GetFont>
 800344a:	4603      	mov	r3, r0
 800344c:	88db      	ldrh	r3, [r3, #6]
 800344e:	461a      	mov	r2, r3
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	4413      	add	r3, r2
 8003454:	b299      	uxth	r1, r3
 8003456:	2303      	movs	r3, #3
 8003458:	4a0c      	ldr	r2, [pc, #48]	@ (800348c <AUDIO_REC_DisplayButtons+0xf4>)
 800345a:	f44f 70fd 	mov.w	r0, #506	@ 0x1fa
 800345e:	f002 ff51 	bl	8006304 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8003462:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8003466:	f002 fe1b 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(22, (uint8_t *)"Use record button to start record, stop to exit");
 800346a:	4909      	ldr	r1, [pc, #36]	@ (8003490 <AUDIO_REC_DisplayButtons+0xf8>)
 800346c:	2016      	movs	r0, #22
 800346e:	f003 f811 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8003472:	f46f 007f 	mvn.w	r0, #16711680	@ 0xff0000
 8003476:	f002 fe13 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&LCD_LOG_TEXT_FONT);
 800347a:	4806      	ldr	r0, [pc, #24]	@ (8003494 <AUDIO_REC_DisplayButtons+0xfc>)
 800347c:	f002 fe42 	bl	8006104 <BSP_LCD_SetFont>
}
 8003480:	bf00      	nop
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000144 	.word	0x20000144
 8003488:	0801cff4 	.word	0x0801cff4
 800348c:	0801cffc 	.word	0x0801cffc
 8003490:	0801d004 	.word	0x0801d004
 8003494:	2000014c 	.word	0x2000014c

08003498 <cs43l22_Init>:
  *                       OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO .
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Init(uint16_t DeviceAddr, uint16_t OutputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	4603      	mov	r3, r0
 80034a2:	81fb      	strh	r3, [r7, #14]
 80034a4:	460b      	mov	r3, r1
 80034a6:	81bb      	strh	r3, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();     
 80034b0:	f001 fc66 	bl	8004d80 <AUDIO_IO_Init>
    
  /* Keep Codec powered OFF */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 80034b4:	89fb      	ldrh	r3, [r7, #14]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2201      	movs	r2, #1
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fb01 	bl	8003ac4 <CODEC_IO_Write>
 80034c2:	4603      	mov	r3, r0
 80034c4:	461a      	mov	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4413      	add	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
  
  /*Save Output device for mute ON/OFF procedure*/
  switch (OutputDevice)
 80034cc:	89bb      	ldrh	r3, [r7, #12]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d81b      	bhi.n	800350c <cs43l22_Init+0x74>
 80034d4:	a201      	add	r2, pc, #4	@ (adr r2, 80034dc <cs43l22_Init+0x44>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034f5 	.word	0x080034f5
 80034e4:	080034fd 	.word	0x080034fd
 80034e8:	08003505 	.word	0x08003505
  {
  case OUTPUT_DEVICE_SPEAKER:
    OutputDev = 0xFA;
 80034ec:	4b5b      	ldr	r3, [pc, #364]	@ (800365c <cs43l22_Init+0x1c4>)
 80034ee:	22fa      	movs	r2, #250	@ 0xfa
 80034f0:	701a      	strb	r2, [r3, #0]
    break;
 80034f2:	e00f      	b.n	8003514 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    OutputDev = 0xAF;
 80034f4:	4b59      	ldr	r3, [pc, #356]	@ (800365c <cs43l22_Init+0x1c4>)
 80034f6:	22af      	movs	r2, #175	@ 0xaf
 80034f8:	701a      	strb	r2, [r3, #0]
    break;
 80034fa:	e00b      	b.n	8003514 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_BOTH:
    OutputDev = 0xAA;
 80034fc:	4b57      	ldr	r3, [pc, #348]	@ (800365c <cs43l22_Init+0x1c4>)
 80034fe:	22aa      	movs	r2, #170	@ 0xaa
 8003500:	701a      	strb	r2, [r3, #0]
    break;
 8003502:	e007      	b.n	8003514 <cs43l22_Init+0x7c>
    
  case OUTPUT_DEVICE_AUTO:
    OutputDev = 0x05;
 8003504:	4b55      	ldr	r3, [pc, #340]	@ (800365c <cs43l22_Init+0x1c4>)
 8003506:	2205      	movs	r2, #5
 8003508:	701a      	strb	r2, [r3, #0]
    break;    
 800350a:	e003      	b.n	8003514 <cs43l22_Init+0x7c>
    
  default:
    OutputDev = 0x05;
 800350c:	4b53      	ldr	r3, [pc, #332]	@ (800365c <cs43l22_Init+0x1c4>)
 800350e:	2205      	movs	r2, #5
 8003510:	701a      	strb	r2, [r3, #0]
    break;    
 8003512:	bf00      	nop
  }
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8003514:	89fb      	ldrh	r3, [r7, #14]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4a50      	ldr	r2, [pc, #320]	@ (800365c <cs43l22_Init+0x1c4>)
 800351a:	7812      	ldrb	r2, [r2, #0]
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	2104      	movs	r1, #4
 8003520:	4618      	mov	r0, r3
 8003522:	f000 facf 	bl	8003ac4 <CODEC_IO_Write>
 8003526:	4603      	mov	r3, r0
 8003528:	461a      	mov	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	4413      	add	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
  
  /* Clock configuration: Auto detection */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_CLOCKING_CTL, 0x81);
 8003530:	89fb      	ldrh	r3, [r7, #14]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2281      	movs	r2, #129	@ 0x81
 8003536:	2105      	movs	r1, #5
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fac3 	bl	8003ac4 <CODEC_IO_Write>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	4413      	add	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
  
  /* Set the Slave Mode and the audio Standard */  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_INTERFACE_CTL1, CODEC_STANDARD);
 8003548:	89fb      	ldrh	r3, [r7, #14]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2204      	movs	r2, #4
 800354e:	2106      	movs	r1, #6
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fab7 	bl	8003ac4 <CODEC_IO_Write>
 8003556:	4603      	mov	r3, r0
 8003558:	461a      	mov	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	4413      	add	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
  
  /* Set the Master volume */
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8003560:	7afa      	ldrb	r2, [r7, #11]
 8003562:	89fb      	ldrh	r3, [r7, #14]
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f964 	bl	8003834 <cs43l22_SetVolume>
 800356c:	4602      	mov	r2, r0
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	4413      	add	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
  
  /* If the Speaker is enabled, set the Mono mode and volume attenuation level */
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8003574:	89bb      	ldrh	r3, [r7, #12]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d023      	beq.n	80035c2 <cs43l22_Init+0x12a>
  {
    /* Set the Speaker Mono mode */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PLAYBACK_CTL2, 0x06);
 800357a:	89fb      	ldrh	r3, [r7, #14]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2206      	movs	r2, #6
 8003580:	210f      	movs	r1, #15
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fa9e 	bl	8003ac4 <CODEC_IO_Write>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	4413      	add	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
    
    /* Set the Speaker attenuation level */  
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_A_VOL, 0x00);
 8003592:	89fb      	ldrh	r3, [r7, #14]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2200      	movs	r2, #0
 8003598:	2124      	movs	r1, #36	@ 0x24
 800359a:	4618      	mov	r0, r3
 800359c:	f000 fa92 	bl	8003ac4 <CODEC_IO_Write>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	4413      	add	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_SPEAKER_B_VOL, 0x00);
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2200      	movs	r2, #0
 80035b0:	2125      	movs	r1, #37	@ 0x25
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fa86 	bl	8003ac4 <CODEC_IO_Write>
 80035b8:	4603      	mov	r3, r0
 80035ba:	461a      	mov	r2, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	4413      	add	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
  off the I2S peripheral MCLK clock (which is the operating clock for Codec).
  If this delay is not inserted, then the codec will not shut down properly and
  it results in high noise after shut down. */
  
  /* Disable the analog soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_ANALOG_ZC_SR_SETT, 0x00);
 80035c2:	89fb      	ldrh	r3, [r7, #14]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2200      	movs	r2, #0
 80035c8:	210a      	movs	r1, #10
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fa7a 	bl	8003ac4 <CODEC_IO_Write>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	4413      	add	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80035da:	89fb      	ldrh	r3, [r7, #14]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2204      	movs	r2, #4
 80035e0:	210e      	movs	r1, #14
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fa6e 	bl	8003ac4 <CODEC_IO_Write>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	4413      	add	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]
  /* Disable the limiter attack level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_LIMIT_CTL1, 0x00);
 80035f2:	89fb      	ldrh	r3, [r7, #14]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2200      	movs	r2, #0
 80035f8:	2127      	movs	r1, #39	@ 0x27
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fa62 	bl	8003ac4 <CODEC_IO_Write>
 8003600:	4603      	mov	r3, r0
 8003602:	461a      	mov	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	4413      	add	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
  /* Adjust Bass and Treble levels */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_TONE_CTL, 0x0F);
 800360a:	89fb      	ldrh	r3, [r7, #14]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	220f      	movs	r2, #15
 8003610:	211f      	movs	r1, #31
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fa56 	bl	8003ac4 <CODEC_IO_Write>
 8003618:	4603      	mov	r3, r0
 800361a:	461a      	mov	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4413      	add	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  /* Adjust PCM volume level */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMA_VOL, 0x0A);
 8003622:	89fb      	ldrh	r3, [r7, #14]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	220a      	movs	r2, #10
 8003628:	211a      	movs	r1, #26
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fa4a 	bl	8003ac4 <CODEC_IO_Write>
 8003630:	4603      	mov	r3, r0
 8003632:	461a      	mov	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	4413      	add	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_PCMB_VOL, 0x0A);
 800363a:	89fb      	ldrh	r3, [r7, #14]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	220a      	movs	r2, #10
 8003640:	211b      	movs	r1, #27
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fa3e 	bl	8003ac4 <CODEC_IO_Write>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	4413      	add	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
  
  /* Return communication control value */
  return counter;  
 8003652:	697b      	ldr	r3, [r7, #20]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	200083d4 	.word	0x200083d4

08003660 <cs43l22_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void cs43l22_DeInit(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003664:	f001 fb92 	bl	8004d8c <AUDIO_IO_DeInit>
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}

0800366c <cs43l22_ReadID>:
  * @brief  Get the CS43L22 ID.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval The CS43L22 ID 
  */
uint32_t cs43l22_ReadID(uint16_t DeviceAddr)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	80fb      	strh	r3, [r7, #6]
  uint8_t Value;
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init(); 
 8003676:	f001 fb83 	bl	8004d80 <AUDIO_IO_Init>
  
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2101      	movs	r1, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f001 fba0 	bl	8004dc6 <AUDIO_IO_Read>
 8003686:	4603      	mov	r3, r0
 8003688:	73fb      	strb	r3, [r7, #15]
  Value = (Value & CS43L22_ID_MASK);
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	f023 0307 	bic.w	r3, r3, #7
 8003690:	73fb      	strb	r3, [r7, #15]
  
  return((uint32_t) Value);
 8003692:	7bfb      	ldrb	r3, [r7, #15]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <cs43l22_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	6039      	str	r1, [r7, #0]
 80036a6:	80fb      	strh	r3, [r7, #6]
 80036a8:	4613      	mov	r3, r2
 80036aa:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
  
  if(Is_cs43l22_Stop == 1)
 80036b0:	4b16      	ldr	r3, [pc, #88]	@ (800370c <cs43l22_Play+0x70>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d123      	bne.n	8003700 <cs43l22_Play+0x64>
  {
    /* Enable the digital soft ramp */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2206      	movs	r2, #6
 80036be:	210e      	movs	r1, #14
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f9ff 	bl	8003ac4 <CODEC_IO_Write>
 80036c6:	4603      	mov	r3, r0
 80036c8:	461a      	mov	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4413      	add	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  
    /* Enable Output device */  
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f919 	bl	800390c <cs43l22_SetMute>
 80036da:	4602      	mov	r2, r0
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
    
    /* Power on the Codec */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E);  
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	229e      	movs	r2, #158	@ 0x9e
 80036e8:	2102      	movs	r1, #2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f9ea 	bl	8003ac4 <CODEC_IO_Write>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4413      	add	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]
    Is_cs43l22_Stop = 0;
 80036fa:	4b04      	ldr	r3, [pc, #16]	@ (800370c <cs43l22_Play+0x70>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return communication control value */
  return counter;  
 8003700:	68fb      	ldr	r3, [r7, #12]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000060 	.word	0x20000060

08003710 <cs43l22_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Pause(uint16_t DeviceAddr)
{  
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	2101      	movs	r1, #1
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f8f2 	bl	800390c <cs43l22_SetMute>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4413      	add	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */    
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2201      	movs	r2, #1
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f9c3 	bl	8003ac4 <CODEC_IO_Write>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8003748:	68fb      	ldr	r3, [r7, #12]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <cs43l22_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Resume(uint16_t DeviceAddr)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  volatile uint32_t index = 0x00;
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f8ce 	bl	800390c <cs43l22_SetMute>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

  for(index = 0x00; index < 0xFF; index++);
 8003778:	2300      	movs	r3, #0
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	e002      	b.n	8003784 <cs43l22_Resume+0x30>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	3301      	adds	r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2bfe      	cmp	r3, #254	@ 0xfe
 8003788:	d9f9      	bls.n	800377e <cs43l22_Resume+0x2a>
  
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800378a:	88fb      	ldrh	r3, [r7, #6]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	4a0e      	ldr	r2, [pc, #56]	@ (80037c8 <cs43l22_Resume+0x74>)
 8003790:	7812      	ldrb	r2, [r2, #0]
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	2104      	movs	r1, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f994 	bl	8003ac4 <CODEC_IO_Write>
 800379c:	4603      	mov	r3, r0
 800379e:	461a      	mov	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4413      	add	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Exit the Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9E); 
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	229e      	movs	r2, #158	@ 0x9e
 80037ac:	2102      	movs	r1, #2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f988 	bl	8003ac4 <CODEC_IO_Write>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80037be:	68fb      	ldr	r3, [r7, #12]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	200083d4 	.word	0x200083d4

080037cc <cs43l22_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
  
  /* Mute the output first */
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2101      	movs	r1, #1
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 f893 	bl	800390c <cs43l22_SetMute>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4413      	add	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Disable the digital soft ramp */
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2204      	movs	r2, #4
 80037f4:	210e      	movs	r1, #14
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f964 	bl	8003ac4 <CODEC_IO_Write>
 80037fc:	4603      	mov	r3, r0
 80037fe:	461a      	mov	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  
  /* Power down the DAC and the speaker (PMDAC and PMSPK bits)*/
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x9F);
 8003806:	88fb      	ldrh	r3, [r7, #6]
 8003808:	b2db      	uxtb	r3, r3
 800380a:	229f      	movs	r2, #159	@ 0x9f
 800380c:	2102      	movs	r1, #2
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f958 	bl	8003ac4 <CODEC_IO_Write>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4413      	add	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  
  Is_cs43l22_Stop = 1;
 800381e:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <cs43l22_Stop+0x64>)
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
  return counter;    
 8003824:	68fb      	ldr	r3, [r7, #12]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	20000060 	.word	0x20000060

08003834 <cs43l22_SetVolume>:
  *                description for more details).
  *         
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	460a      	mov	r2, r1
 800383e:	80fb      	strh	r3, [r7, #6]
 8003840:	4613      	mov	r3, r2
 8003842:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8003848:	797b      	ldrb	r3, [r7, #5]
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d80b      	bhi.n	8003866 <cs43l22_SetVolume+0x32>
 800384e:	797a      	ldrb	r2, [r7, #5]
 8003850:	4613      	mov	r3, r2
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	4a25      	ldr	r2, [pc, #148]	@ (80038ec <cs43l22_SetVolume+0xb8>)
 8003858:	fb82 1203 	smull	r1, r2, r2, r3
 800385c:	1152      	asrs	r2, r2, #5
 800385e:	17db      	asrs	r3, r3, #31
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e000      	b.n	8003868 <cs43l22_SetVolume+0x34>
 8003866:	23ff      	movs	r3, #255	@ 0xff
 8003868:	72fb      	strb	r3, [r7, #11]

  if(convertedvol > 0xE6)
 800386a:	7afb      	ldrb	r3, [r7, #11]
 800386c:	2be6      	cmp	r3, #230	@ 0xe6
 800386e:	d91c      	bls.n	80038aa <cs43l22_SetVolume+0x76>
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	b2d8      	uxtb	r0, r3
 8003874:	7afb      	ldrb	r3, [r7, #11]
 8003876:	3319      	adds	r3, #25
 8003878:	b2db      	uxtb	r3, r3
 800387a:	461a      	mov	r2, r3
 800387c:	2120      	movs	r1, #32
 800387e:	f000 f921 	bl	8003ac4 <CODEC_IO_Write>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4413      	add	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol - 0xE7);     
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	b2d8      	uxtb	r0, r3
 8003890:	7afb      	ldrb	r3, [r7, #11]
 8003892:	3319      	adds	r3, #25
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	2121      	movs	r1, #33	@ 0x21
 800389a:	f000 f913 	bl	8003ac4 <CODEC_IO_Write>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e01b      	b.n	80038e2 <cs43l22_SetVolume+0xae>
  }
  else
  {
    /* Set the Master volume */
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	b2d8      	uxtb	r0, r3
 80038ae:	7afb      	ldrb	r3, [r7, #11]
 80038b0:	3319      	adds	r3, #25
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	2120      	movs	r1, #32
 80038b8:	f000 f904 	bl	8003ac4 <CODEC_IO_Write>
 80038bc:	4603      	mov	r3, r0
 80038be:	461a      	mov	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_B_VOL, convertedvol + 0x19); 
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	b2d8      	uxtb	r0, r3
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	3319      	adds	r3, #25
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	461a      	mov	r2, r3
 80038d2:	2121      	movs	r1, #33	@ 0x21
 80038d4:	f000 f8f6 	bl	8003ac4 <CODEC_IO_Write>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
  }

  return counter;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	51eb851f 	.word	0x51eb851f

080038f0 <cs43l22_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.   
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	80fb      	strh	r3, [r7, #6]
  return 0;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <cs43l22_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Mute mode */
  if(Cmd == AUDIO_MUTE_ON)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d124      	bne.n	800396c <cs43l22_SetMute+0x60>
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	22ff      	movs	r2, #255	@ 0xff
 8003928:	2104      	movs	r1, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f8ca 	bl	8003ac4 <CODEC_IO_Write>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x01);
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2201      	movs	r2, #1
 8003940:	2122      	movs	r1, #34	@ 0x22
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f8be 	bl	8003ac4 <CODEC_IO_Write>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4413      	add	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x01);
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2201      	movs	r2, #1
 8003958:	2123      	movs	r1, #35	@ 0x23
 800395a:	4618      	mov	r0, r3
 800395c:	f000 f8b2 	bl	8003ac4 <CODEC_IO_Write>
 8003960:	4603      	mov	r3, r0
 8003962:	461a      	mov	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e025      	b.n	80039b8 <cs43l22_SetMute+0xac>
  }
  else /* AUDIO_MUTE_OFF Disable the Mute */
  {
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800396c:	88fb      	ldrh	r3, [r7, #6]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2200      	movs	r2, #0
 8003972:	2122      	movs	r1, #34	@ 0x22
 8003974:	4618      	mov	r0, r3
 8003976:	f000 f8a5 	bl	8003ac4 <CODEC_IO_Write>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4413      	add	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_B_VOL, 0x00);
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2200      	movs	r2, #0
 800398a:	2123      	movs	r1, #35	@ 0x23
 800398c:	4618      	mov	r0, r3
 800398e:	f000 f899 	bl	8003ac4 <CODEC_IO_Write>
 8003992:	4603      	mov	r3, r0
 8003994:	461a      	mov	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	4a08      	ldr	r2, [pc, #32]	@ (80039c4 <cs43l22_SetMute+0xb8>)
 80039a2:	7812      	ldrb	r2, [r2, #0]
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	2104      	movs	r1, #4
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 f88b 	bl	8003ac4 <CODEC_IO_Write>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4413      	add	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80039b8:	68fb      	ldr	r3, [r7, #12]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	200083d4 	.word	0x200083d4

080039c8 <cs43l22_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	460a      	mov	r2, r1
 80039d2:	80fb      	strh	r3, [r7, #6]
 80039d4:	4613      	mov	r3, r2
 80039d6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80039dc:	797b      	ldrb	r3, [r7, #5]
 80039de:	3b01      	subs	r3, #1
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d84b      	bhi.n	8003a7c <cs43l22_SetOutputMode+0xb4>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <cs43l22_SetOutputMode+0x24>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a3d 	.word	0x08003a3d
 80039f8:	08003a5d 	.word	0x08003a5d
  {
    case OUTPUT_DEVICE_SPEAKER:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFA); /* SPK always ON & HP always OFF */
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	22fa      	movs	r2, #250	@ 0xfa
 8003a02:	2104      	movs	r1, #4
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 f85d 	bl	8003ac4 <CODEC_IO_Write>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4413      	add	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xFA;
 8003a14:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <cs43l22_SetOutputMode+0xe0>)
 8003a16:	22fa      	movs	r2, #250	@ 0xfa
 8003a18:	701a      	strb	r2, [r3, #0]
      break;
 8003a1a:	e03f      	b.n	8003a9c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_HEADPHONE:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAF); /* SPK always OFF & HP always ON */
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	22af      	movs	r2, #175	@ 0xaf
 8003a22:	2104      	movs	r1, #4
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 f84d 	bl	8003ac4 <CODEC_IO_Write>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4413      	add	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAF;
 8003a34:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa8 <cs43l22_SetOutputMode+0xe0>)
 8003a36:	22af      	movs	r2, #175	@ 0xaf
 8003a38:	701a      	strb	r2, [r3, #0]
      break;
 8003a3a:	e02f      	b.n	8003a9c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_BOTH:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xAA); /* SPK always ON & HP always ON */
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	22aa      	movs	r2, #170	@ 0xaa
 8003a42:	2104      	movs	r1, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f83d 	bl	8003ac4 <CODEC_IO_Write>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
      OutputDev = 0xAA;
 8003a54:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <cs43l22_SetOutputMode+0xe0>)
 8003a56:	22aa      	movs	r2, #170	@ 0xaa
 8003a58:	701a      	strb	r2, [r3, #0]
      break;
 8003a5a:	e01f      	b.n	8003a9c <cs43l22_SetOutputMode+0xd4>
      
    case OUTPUT_DEVICE_AUTO:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2205      	movs	r2, #5
 8003a62:	2104      	movs	r1, #4
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f82d 	bl	8003ac4 <CODEC_IO_Write>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8003a74:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <cs43l22_SetOutputMode+0xe0>)
 8003a76:	2205      	movs	r2, #5
 8003a78:	701a      	strb	r2, [r3, #0]
      break;    
 8003a7a:	e00f      	b.n	8003a9c <cs43l22_SetOutputMode+0xd4>
      
    default:
      counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0x05); /* Detect the HP or the SPK automatically */
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2205      	movs	r2, #5
 8003a82:	2104      	movs	r1, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f81d 	bl	8003ac4 <CODEC_IO_Write>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
      OutputDev = 0x05;
 8003a94:	4b04      	ldr	r3, [pc, #16]	@ (8003aa8 <cs43l22_SetOutputMode+0xe0>)
 8003a96:	2205      	movs	r2, #5
 8003a98:	701a      	strb	r2, [r3, #0]
      break;
 8003a9a:	bf00      	nop
  }  
  return counter;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200083d4 	.word	0x200083d4

08003aac <cs43l22_Reset>:
  * @brief Resets cs43l22 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	80fb      	strh	r3, [r7, #6]
  return 0;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	71bb      	strb	r3, [r7, #6]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	717b      	strb	r3, [r7, #5]
  uint32_t result = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8003ada:	797a      	ldrb	r2, [r7, #5]
 8003adc:	79b9      	ldrb	r1, [r7, #6]
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 f95a 	bl	8004d9a <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	b2db      	uxtb	r3, r3
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <ft6x06_Init>:
  *         from MCU to FT6xx6 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8003afe:	88fb      	ldrh	r3, [r7, #6]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f95f 	bl	8003dc4 <ft6x06_GetInstance>
 8003b06:	4603      	mov	r3, r0
 8003b08:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2bff      	cmp	r3, #255	@ 0xff
 8003b0e:	d10e      	bne.n	8003b2e <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8003b10:	2000      	movs	r0, #0
 8003b12:	f000 f957 	bl	8003dc4 <ft6x06_GetInstance>
 8003b16:	4603      	mov	r3, r0
 8003b18:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8003b1a:	7bbb      	ldrb	r3, [r7, #14]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d806      	bhi.n	8003b2e <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8003b20:	7bbb      	ldrb	r3, [r7, #14]
 8003b22:	88fa      	ldrh	r2, [r7, #6]
 8003b24:	b2d1      	uxtb	r1, r2
 8003b26:	4a04      	ldr	r2, [pc, #16]	@ (8003b38 <ft6x06_Init+0x44>)
 8003b28:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8003b2a:	f001 f965 	bl	8004df8 <TS_IO_Init>
    }
  }
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200083d8 	.word	0x200083d8

08003b3c <ft6x06_Reset>:
  *         @note : Not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6xx6 IC */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <ft6x06_ReadID>:
  *         able to read the FT6xx6 device ID, and verify this is a FT6xx6.
  * @param  DeviceAddr: I2C FT6xx6 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8003b5c:	f001 f94c 	bl	8004df8 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	21a8      	movs	r1, #168	@ 0xa8
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 f95f 	bl	8004e2a <TS_IO_Read>
 8003b6c:	4603      	mov	r3, r0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b082      	sub	sp, #8
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6xx6 */
  ft6x06_TS_Configure(DeviceAddr);
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f910 	bl	8003da8 <ft6x06_TS_Configure>

  /* By default set FT6xx6 IC in Polling mode : no INT generation on FT6xx6 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f88c 	bl	8003ca8 <ft6x06_TS_DisableIT>
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2102      	movs	r1, #2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 f93c 	bl	8004e2a <TS_IO_Read>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6xx6 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <ft6x06_TS_DetectTouch+0x50>)
 8003bd4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8003bd6:	4b04      	ldr	r3, [pc, #16]	@ (8003be8 <ft6x06_TS_DetectTouch+0x50>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	b2db      	uxtb	r3, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	200083dc 	.word	0x200083dc

08003bec <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8003bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003c7c <ft6x06_TS_GetXY+0x90>)
 8003c00:	789a      	ldrb	r2, [r3, #2]
 8003c02:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <ft6x06_TS_GetXY+0x90>)
 8003c04:	785b      	ldrb	r3, [r3, #1]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d234      	bcs.n	8003c74 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8003c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <ft6x06_TS_GetXY+0x90>)
 8003c0c:	789b      	ldrb	r3, [r3, #2]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <ft6x06_TS_GetXY+0x2c>
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d003      	beq.n	8003c1e <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8003c16:	e005      	b.n	8003c24 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8003c18:	2303      	movs	r3, #3
 8003c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c1c:	e002      	b.n	8003c24 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8003c1e:	2309      	movs	r3, #9
 8003c20:	75fb      	strb	r3, [r7, #23]
      break;
 8003c22:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	b2d8      	uxtb	r0, r3
 8003c28:	f107 0210 	add.w	r2, r7, #16
 8003c2c:	7df9      	ldrb	r1, [r7, #23]
 8003c2e:	2304      	movs	r3, #4
 8003c30:	f001 f90e 	bl	8004e50 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8003c34:	7c3b      	ldrb	r3, [r7, #16]
 8003c36:	021b      	lsls	r3, r3, #8
 8003c38:	b21b      	sxth	r3, r3
 8003c3a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	7c7b      	ldrb	r3, [r7, #17]
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	4313      	orrs	r3, r2
 8003c46:	b21b      	sxth	r3, r3
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8003c4e:	7cbb      	ldrb	r3, [r7, #18]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	b21b      	sxth	r3, r3
 8003c54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c58:	b21a      	sxth	r2, r3
 8003c5a:	7cfb      	ldrb	r3, [r7, #19]
 8003c5c:	b21b      	sxth	r3, r3
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8003c68:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <ft6x06_TS_GetXY+0x90>)
 8003c6a:	789b      	ldrb	r3, [r3, #2]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	b2da      	uxtb	r2, r3
 8003c70:	4b02      	ldr	r3, [pc, #8]	@ (8003c7c <ft6x06_TS_GetXY+0x90>)
 8003c72:	709a      	strb	r2, [r3, #2]
  }
}
 8003c74:	bf00      	nop
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200083dc 	.word	0x200083dc

08003c80 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8003c92:	88fb      	ldrh	r3, [r7, #6]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	7bfa      	ldrb	r2, [r7, #15]
 8003c98:	21a4      	movs	r1, #164	@ 0xa4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f8b2 	bl	8004e04 <TS_IO_Write>
}
 8003ca0:	bf00      	nop
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8003cba:	88fb      	ldrh	r3, [r7, #6]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	21a4      	movs	r1, #164	@ 0xa4
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 f89e 	bl	8004e04 <TS_IO_Write>
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6xx6 */
  return 0;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6xx6.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6xx6 */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <ft6x06_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6xx6).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft6x06_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	4603      	mov	r3, r0
 8003d06:	6039      	str	r1, [r7, #0]
 8003d08:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT6206_GEST_ID_REG);
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2101      	movs	r1, #1
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 f888 	bl	8004e2a <TS_IO_Read>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	601a      	str	r2, [r3, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <ft6x06_TS_GetTouchInfo>:
void ft6x06_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	75fb      	strb	r3, [r7, #23]
  uint8_t dataxy[3];
  
  if(touchIdx < ft6x06_handle.currActiveTouchNb)
 8003d44:	4b17      	ldr	r3, [pc, #92]	@ (8003da4 <ft6x06_TS_GetTouchInfo+0x74>)
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d224      	bcs.n	8003d9a <ft6x06_TS_GetTouchInfo+0x6a>
  {
    switch(touchIdx)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <ft6x06_TS_GetTouchInfo+0x2e>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d003      	beq.n	8003d64 <ft6x06_TS_GetTouchInfo+0x34>
    case 1 :
      regAddress = FT6206_P2_WEIGHT_REG;
      break;
      
    default :
      break;
 8003d5c:	e005      	b.n	8003d6a <ft6x06_TS_GetTouchInfo+0x3a>
      regAddress = FT6206_P1_WEIGHT_REG;
 8003d5e:	2307      	movs	r3, #7
 8003d60:	75fb      	strb	r3, [r7, #23]
      break;
 8003d62:	e002      	b.n	8003d6a <ft6x06_TS_GetTouchInfo+0x3a>
      regAddress = FT6206_P2_WEIGHT_REG;
 8003d64:	230d      	movs	r3, #13
 8003d66:	75fb      	strb	r3, [r7, #23]
      break;
 8003d68:	bf00      	nop
      
    } /* end switch(touchIdx) */
    
    /* Read weight, area and Event Id of touch index */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8003d6a:	89fb      	ldrh	r3, [r7, #14]
 8003d6c:	b2d8      	uxtb	r0, r3
 8003d6e:	f107 0214 	add.w	r2, r7, #20
 8003d72:	7df9      	ldrb	r1, [r7, #23]
 8003d74:	2303      	movs	r3, #3
 8003d76:	f001 f86b 	bl	8004e50 <TS_IO_ReadMultiple>
    
    /* Return weight of touch index */
    * pWeight = (dataxy[0] & FT6206_TOUCH_WEIGHT_MASK) >> FT6206_TOUCH_WEIGHT_SHIFT;
 8003d7a:	7d3b      	ldrb	r3, [r7, #20]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	601a      	str	r2, [r3, #0]
    /* Return area of touch index */
    * pArea = (dataxy[1] & FT6206_TOUCH_AREA_MASK) >> FT6206_TOUCH_AREA_SHIFT;
 8003d82:	7d7b      	ldrb	r3, [r7, #21]
 8003d84:	111b      	asrs	r3, r3, #4
 8003d86:	f003 0204 	and.w	r2, r3, #4
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	601a      	str	r2, [r3, #0]
    /* Return Event Id  of touch index */
    * pEvent = (dataxy[2] & FT6206_TOUCH_EVT_FLAG_MASK) >> FT6206_TOUCH_EVT_FLAG_SHIFT;
 8003d8e:	7dbb      	ldrb	r3, [r7, #22]
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	601a      	str	r2, [r3, #0]
    
  } /* of if(touchIdx < ft6x06_handle.currActiveTouchNb) */
}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	200083dc 	.word	0x200083dc

08003da8 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6xx6 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6xx6 */

  return(status);
 8003db6:	68fb      	ldr	r3, [r7, #12]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	e00b      	b.n	8003df0 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <ft6x06_GetInstance+0x40>)
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	461a      	mov	r2, r3
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d101      	bne.n	8003dea <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	e006      	b.n	8003df8 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
 8003dec:	3301      	adds	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d9f0      	bls.n	8003dd8 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003df6:	23ff      	movs	r3, #255	@ 0xff
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	200083d8 	.word	0x200083d8

08003e08 <NT35510_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t NT35510_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b0b2      	sub	sp, #200	@ 0xc8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  NT35510_IO_Delay(120);
 8003e12:	2078      	movs	r0, #120	@ 0x78
 8003e14:	f001 f840 	bl	8004e98 <NT35510_IO_Delay>

/* ************************************************************************** */
/* Proprietary Initialization                                                 */
/* ************************************************************************** */
  const uint8_t nt35510_reg[]   = {0x55, 0xAA, 0x52, 0x08, 0x01, 0xF0};
 8003e18:	4ac8      	ldr	r2, [pc, #800]	@ (800413c <NT35510_Init+0x334>)
 8003e1a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003e1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e22:	6018      	str	r0, [r3, #0]
 8003e24:	3304      	adds	r3, #4
 8003e26:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg1[]  = {0x03, 0x03, 0x03, 0xB0};
 8003e28:	4bc5      	ldr	r3, [pc, #788]	@ (8004140 <NT35510_Init+0x338>)
 8003e2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const uint8_t nt35510_reg2[]  = {0x46, 0x46, 0x46, 0xB6};
 8003e2e:	4bc5      	ldr	r3, [pc, #788]	@ (8004144 <NT35510_Init+0x33c>)
 8003e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  const uint8_t nt35510_reg3[]  = {0x03, 0x03, 0x03, 0xB1};
 8003e34:	4bc4      	ldr	r3, [pc, #784]	@ (8004148 <NT35510_Init+0x340>)
 8003e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  const uint8_t nt35510_reg4[]  = {0x36, 0x36, 0x36, 0xB7};
 8003e3a:	4bc4      	ldr	r3, [pc, #784]	@ (800414c <NT35510_Init+0x344>)
 8003e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  const uint8_t nt35510_reg5[]  = {0x00, 0x00, 0x02, 0xB2};
 8003e40:	4bc3      	ldr	r3, [pc, #780]	@ (8004150 <NT35510_Init+0x348>)
 8003e42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  const uint8_t nt35510_reg6[]  = {0x26, 0x26, 0x26, 0xB8};
 8003e46:	4bc3      	ldr	r3, [pc, #780]	@ (8004154 <NT35510_Init+0x34c>)
 8003e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  const uint8_t nt35510_reg7[]  = {0xBF, 0x01};
 8003e4c:	f240 13bf 	movw	r3, #447	@ 0x1bf
 8003e50:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
  const uint8_t nt35510_reg8[]  = {0x09, 0x09, 0x09, 0xB3};
 8003e54:	4bc0      	ldr	r3, [pc, #768]	@ (8004158 <NT35510_Init+0x350>)
 8003e56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  const uint8_t nt35510_reg9[]  = {0x36, 0x36, 0x36, 0xB9};
 8003e5a:	4bc0      	ldr	r3, [pc, #768]	@ (800415c <NT35510_Init+0x354>)
 8003e5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  const uint8_t nt35510_reg10[] = {0x08, 0x08, 0x08, 0xB5};
 8003e60:	4bbf      	ldr	r3, [pc, #764]	@ (8004160 <NT35510_Init+0x358>)
 8003e62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  const uint8_t nt35510_reg12[] = {0x26, 0x26, 0x26, 0xBA};
 8003e66:	4bbf      	ldr	r3, [pc, #764]	@ (8004164 <NT35510_Init+0x35c>)
 8003e68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  const uint8_t nt35510_reg13[] = {0x00, 0x80, 0x00, 0xBC};
 8003e6c:	4bbe      	ldr	r3, [pc, #760]	@ (8004168 <NT35510_Init+0x360>)
 8003e6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  const uint8_t nt35510_reg14[] = {0x00, 0x80, 0x00, 0xBD};
 8003e72:	4bbe      	ldr	r3, [pc, #760]	@ (800416c <NT35510_Init+0x364>)
 8003e74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  const uint8_t nt35510_reg15[] = {0x00, 0x50, 0xBE};
 8003e78:	4abd      	ldr	r2, [pc, #756]	@ (8004170 <NT35510_Init+0x368>)
 8003e7a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	4611      	mov	r1, r2
 8003e82:	8019      	strh	r1, [r3, #0]
 8003e84:	3302      	adds	r3, #2
 8003e86:	0c12      	lsrs	r2, r2, #16
 8003e88:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg16[] = {0x55, 0xAA, 0x52, 0x08, 0x00, 0xF0};
 8003e8a:	4aba      	ldr	r2, [pc, #744]	@ (8004174 <NT35510_Init+0x36c>)
 8003e8c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e94:	6018      	str	r0, [r3, #0]
 8003e96:	3304      	adds	r3, #4
 8003e98:	8019      	strh	r1, [r3, #0]
  const uint8_t nt35510_reg17[] = {0xFC, 0x00, 0xB1};
 8003e9a:	4ab7      	ldr	r2, [pc, #732]	@ (8004178 <NT35510_Init+0x370>)
 8003e9c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003ea0:	6812      	ldr	r2, [r2, #0]
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	8019      	strh	r1, [r3, #0]
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	0c12      	lsrs	r2, r2, #16
 8003eaa:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg18[] = {0xB6, 0x03};
 8003eac:	f240 33b6 	movw	r3, #950	@ 0x3b6
 8003eb0:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  const uint8_t nt35510_reg19[] = {0xB5, 0x50};
 8003eb4:	f245 03b5 	movw	r3, #20661	@ 0x50b5
 8003eb8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  const uint8_t nt35510_reg20[] = {0x00, 0x00, 0xB7};
 8003ebc:	4aaf      	ldr	r2, [pc, #700]	@ (800417c <NT35510_Init+0x374>)
 8003ebe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	8019      	strh	r1, [r3, #0]
 8003ec8:	3302      	adds	r3, #2
 8003eca:	0c12      	lsrs	r2, r2, #16
 8003ecc:	701a      	strb	r2, [r3, #0]
  const uint8_t nt35510_reg21[] = {0x01, 0x02, 0x02, 0x02, 0xB8};
 8003ece:	4aac      	ldr	r2, [pc, #688]	@ (8004180 <NT35510_Init+0x378>)
 8003ed0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003ed4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003ed8:	6018      	str	r0, [r3, #0]
 8003eda:	3304      	adds	r3, #4
 8003edc:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg22[] = {0x00, 0x00, 0x00, 0xBC};
 8003ede:	f04f 433c 	mov.w	r3, #3154116608	@ 0xbc000000
 8003ee2:	667b      	str	r3, [r7, #100]	@ 0x64
  const uint8_t nt35510_reg23[] = {0x03, 0x00, 0x00, 0xCC};
 8003ee4:	4ba7      	ldr	r3, [pc, #668]	@ (8004184 <NT35510_Init+0x37c>)
 8003ee6:	663b      	str	r3, [r7, #96]	@ 0x60
  const uint8_t nt35510_reg24[] = {0xBA, 0x01};
 8003ee8:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 8003eec:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
  const uint8_t nt35510_madctl_portrait[] = {NT35510_CMD_MADCTL ,0x00};
 8003ef0:	2336      	movs	r3, #54	@ 0x36
 8003ef2:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  const uint8_t nt35510_caset_portrait[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_CASET};
 8003ef6:	4aa4      	ldr	r2, [pc, #656]	@ (8004188 <NT35510_Init+0x380>)
 8003ef8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f00:	6018      	str	r0, [r3, #0]
 8003f02:	3304      	adds	r3, #4
 8003f04:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_portrait[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_RASET};
 8003f06:	4aa1      	ldr	r2, [pc, #644]	@ (800418c <NT35510_Init+0x384>)
 8003f08:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003f0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f10:	6018      	str	r0, [r3, #0]
 8003f12:	3304      	adds	r3, #4
 8003f14:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_madctl_landscape[] = {NT35510_CMD_MADCTL, 0x60};
 8003f16:	f246 0336 	movw	r3, #24630	@ 0x6036
 8003f1a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  const uint8_t nt35510_caset_landscape[] = {0x00, 0x00, 0x03, 0x1F ,NT35510_CMD_CASET};
 8003f1e:	4a9c      	ldr	r2, [pc, #624]	@ (8004190 <NT35510_Init+0x388>)
 8003f20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f28:	6018      	str	r0, [r3, #0]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_raset_landscape[] = {0x00, 0x00, 0x01, 0xDF ,NT35510_CMD_RASET};
 8003f2e:	4a99      	ldr	r2, [pc, #612]	@ (8004194 <NT35510_Init+0x38c>)
 8003f30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003f38:	6018      	str	r0, [r3, #0]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	7019      	strb	r1, [r3, #0]
  const uint8_t nt35510_reg26[] = {NT35510_CMD_TEEON, 0x00};  /* Tear on */
 8003f3e:	2335      	movs	r3, #53	@ 0x35
 8003f40:	863b      	strh	r3, [r7, #48]	@ 0x30
  const uint8_t nt35510_reg27[] = {NT35510_CMD_SLPOUT, 0x00}; /* Sleep out */
 8003f42:	2311      	movs	r3, #17
 8003f44:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  const uint8_t nt35510_reg30[] = {NT35510_CMD_DISPON, 0x00};
 8003f46:	2329      	movs	r3, #41	@ 0x29
 8003f48:	853b      	strh	r3, [r7, #40]	@ 0x28

  const uint8_t nt35510_reg31[] = {NT35510_CMD_WRDISBV, 0x7F};
 8003f4a:	f647 7351 	movw	r3, #32593	@ 0x7f51
 8003f4e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  const uint8_t nt35510_reg32[] = {NT35510_CMD_WRCTRLD, 0x2C};
 8003f50:	f642 4353 	movw	r3, #11347	@ 0x2c53
 8003f54:	843b      	strh	r3, [r7, #32]
  const uint8_t nt35510_reg33[] = {NT35510_CMD_WRCABC, 0x02};
 8003f56:	f240 2355 	movw	r3, #597	@ 0x255
 8003f5a:	83bb      	strh	r3, [r7, #28]
  const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
 8003f5c:	f64f 735e 	movw	r3, #65374	@ 0xff5e
 8003f60:	833b      	strh	r3, [r7, #24]
  const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
 8003f62:	232c      	movs	r3, #44	@ 0x2c
 8003f64:	82bb      	strh	r3, [r7, #20]
  const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
 8003f66:	f245 533a 	movw	r3, #21818	@ 0x553a
 8003f6a:	823b      	strh	r3, [r7, #16]
  const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};
 8003f6c:	f247 733a 	movw	r3, #30522	@ 0x773a
 8003f70:	81bb      	strh	r3, [r7, #12]

  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg); /* LV2:  Page 1 enable */
 8003f72:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8003f76:	4619      	mov	r1, r3
 8003f78:	2005      	movs	r0, #5
 8003f7a:	f002 fee5 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg1);/* AVDD: 5.2V */
 8003f7e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8003f82:	4619      	mov	r1, r3
 8003f84:	2003      	movs	r0, #3
 8003f86:	f002 fedf 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg2);/* AVDD: Ratio */
 8003f8a:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8003f8e:	4619      	mov	r1, r3
 8003f90:	2003      	movs	r0, #3
 8003f92:	f002 fed9 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg3);/* AVEE: -5.2V */
 8003f96:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	2003      	movs	r0, #3
 8003f9e:	f002 fed3 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg4);/* AVEE: Ratio */
 8003fa2:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	2003      	movs	r0, #3
 8003faa:	f002 fecd 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg5);/* VCL: -2.5V */
 8003fae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	2003      	movs	r0, #3
 8003fb6:	f002 fec7 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg6);/* VCL: Ratio */
 8003fba:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	2003      	movs	r0, #3
 8003fc2:	f002 fec1 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg7);/* VGH: 15V (Free Pump) */
 8003fc6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	2001      	movs	r0, #1
 8003fce:	f002 febb 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg8);
 8003fd2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	2003      	movs	r0, #3
 8003fda:	f002 feb5 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg9);/* VGH: Ratio */
 8003fde:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	2003      	movs	r0, #3
 8003fe6:	f002 feaf 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg10);/* VGL_REG: -10V */
 8003fea:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8003fee:	4619      	mov	r1, r3
 8003ff0:	2003      	movs	r0, #3
 8003ff2:	f002 fea9 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg12);/* VGLX: Ratio */
 8003ff6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	2003      	movs	r0, #3
 8003ffe:	f002 fea3 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg13);/* VGMP/VGSP: 4.5V/0V */
 8004002:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8004006:	4619      	mov	r1, r3
 8004008:	2003      	movs	r0, #3
 800400a:	f002 fe9d 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg14);/* VGMN/VGSN:-4.5V/0V */
 800400e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004012:	4619      	mov	r1, r3
 8004014:	2003      	movs	r0, #3
 8004016:	f002 fe97 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg15);/* VCOM: -1.325V */
 800401a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800401e:	4619      	mov	r1, r3
 8004020:	2002      	movs	r0, #2
 8004022:	f002 fe91 	bl	8006d48 <DSI_IO_WriteCmd>

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */
  DSI_IO_WriteCmd(5, (uint8_t *)nt35510_reg16);/* LV2: Page 0 enable */
 8004026:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800402a:	4619      	mov	r1, r3
 800402c:	2005      	movs	r0, #5
 800402e:	f002 fe8b 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg17);/* Display control */
 8004032:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8004036:	4619      	mov	r1, r3
 8004038:	2002      	movs	r0, #2
 800403a:	f002 fe85 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg18);/* Src hold time */
 800403e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004042:	4619      	mov	r1, r3
 8004044:	2001      	movs	r0, #1
 8004046:	f002 fe7f 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg19);
 800404a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800404e:	4619      	mov	r1, r3
 8004050:	2001      	movs	r0, #1
 8004052:	f002 fe79 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(2, (uint8_t *)nt35510_reg20);/* Gate EQ control */
 8004056:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800405a:	4619      	mov	r1, r3
 800405c:	2002      	movs	r0, #2
 800405e:	f002 fe73 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(4, (uint8_t *)nt35510_reg21);/* Src EQ control(Mode2) */
 8004062:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004066:	4619      	mov	r1, r3
 8004068:	2004      	movs	r0, #4
 800406a:	f002 fe6d 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg22);/* Inv. mode(2-dot) */
 800406e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004072:	4619      	mov	r1, r3
 8004074:	2003      	movs	r0, #3
 8004076:	f002 fe67 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(3, (uint8_t *)nt35510_reg23);
 800407a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800407e:	4619      	mov	r1, r3
 8004080:	2003      	movs	r0, #3
 8004082:	f002 fe61 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg24);
 8004086:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800408a:	4619      	mov	r1, r3
 800408c:	2001      	movs	r0, #1
 800408e:	f002 fe5b 	bl	8006d48 <DSI_IO_WriteCmd>
  /* Tear on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg26);
 8004092:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004096:	4619      	mov	r1, r3
 8004098:	2000      	movs	r0, #0
 800409a:	f002 fe55 	bl	8006d48 <DSI_IO_WriteCmd>
  /* Set Pixel color format to RGB888 */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg37);
 800409e:	f107 030c 	add.w	r3, r7, #12
 80040a2:	4619      	mov	r1, r3
 80040a4:	2000      	movs	r0, #0
 80040a6:	f002 fe4f 	bl	8006d48 <DSI_IO_WriteCmd>
/* ************************************************************************** */
/* Standard DCS Initialization                                                */
/* ************************************************************************** */

  /* Add a delay, otherwise MADCTL not taken */
  NT35510_IO_Delay(200);
 80040aa:	20c8      	movs	r0, #200	@ 0xc8
 80040ac:	f000 fef4 	bl	8004e98 <NT35510_IO_Delay>

  /* Configure orientation */
  if(orientation == NT35510_ORIENTATION_PORTRAIT)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d112      	bne.n	80040dc <NT35510_Init+0x2d4>
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_portrait);
 80040b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80040ba:	4619      	mov	r1, r3
 80040bc:	2001      	movs	r0, #1
 80040be:	f002 fe43 	bl	8006d48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_portrait);
 80040c2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80040c6:	4619      	mov	r1, r3
 80040c8:	2004      	movs	r0, #4
 80040ca:	f002 fe3d 	bl	8006d48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_portrait);
 80040ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80040d2:	4619      	mov	r1, r3
 80040d4:	2004      	movs	r0, #4
 80040d6:	f002 fe37 	bl	8006d48 <DSI_IO_WriteCmd>
 80040da:	e011      	b.n	8004100 <NT35510_Init+0x2f8>
  }
  else
  {
    DSI_IO_WriteCmd(1, (uint8_t *)nt35510_madctl_landscape);
 80040dc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80040e0:	4619      	mov	r1, r3
 80040e2:	2001      	movs	r0, #1
 80040e4:	f002 fe30 	bl	8006d48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_caset_landscape);
 80040e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80040ec:	4619      	mov	r1, r3
 80040ee:	2004      	movs	r0, #4
 80040f0:	f002 fe2a 	bl	8006d48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd(4, (uint8_t *)nt35510_raset_landscape);
 80040f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80040f8:	4619      	mov	r1, r3
 80040fa:	2004      	movs	r0, #4
 80040fc:	f002 fe24 	bl	8006d48 <DSI_IO_WriteCmd>
  }

  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg27);
 8004100:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004104:	4619      	mov	r1, r3
 8004106:	2000      	movs	r0, #0
 8004108:	f002 fe1e 	bl	8006d48 <DSI_IO_WriteCmd>
  /* Wait for sleep out exit */
  NT35510_IO_Delay(120);
 800410c:	2078      	movs	r0, #120	@ 0x78
 800410e:	f000 fec3 	bl	8004e98 <NT35510_IO_Delay>

  switch(ColorCoding)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <NT35510_Init+0x324>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d13c      	bne.n	8004198 <NT35510_Init+0x390>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg36);
 800411e:	f107 0310 	add.w	r3, r7, #16
 8004122:	4619      	mov	r1, r3
 8004124:	2001      	movs	r0, #1
 8004126:	f002 fe0f 	bl	8006d48 <DSI_IO_WriteCmd>
      break;
 800412a:	e03c      	b.n	80041a6 <NT35510_Init+0x39e>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 800412c:	f107 030c 	add.w	r3, r7, #12
 8004130:	4619      	mov	r1, r3
 8004132:	2001      	movs	r0, #1
 8004134:	f002 fe08 	bl	8006d48 <DSI_IO_WriteCmd>
      break;
 8004138:	e035      	b.n	80041a6 <NT35510_Init+0x39e>
 800413a:	bf00      	nop
 800413c:	0801d034 	.word	0x0801d034
 8004140:	b0030303 	.word	0xb0030303
 8004144:	b6464646 	.word	0xb6464646
 8004148:	b1030303 	.word	0xb1030303
 800414c:	b7363636 	.word	0xb7363636
 8004150:	b2020000 	.word	0xb2020000
 8004154:	b8262626 	.word	0xb8262626
 8004158:	b3090909 	.word	0xb3090909
 800415c:	b9363636 	.word	0xb9363636
 8004160:	b5080808 	.word	0xb5080808
 8004164:	ba262626 	.word	0xba262626
 8004168:	bc008000 	.word	0xbc008000
 800416c:	bd008000 	.word	0xbd008000
 8004170:	0801d03c 	.word	0x0801d03c
 8004174:	0801d040 	.word	0x0801d040
 8004178:	0801d048 	.word	0x0801d048
 800417c:	0801d04c 	.word	0x0801d04c
 8004180:	0801d050 	.word	0x0801d050
 8004184:	cc000003 	.word	0xcc000003
 8004188:	0801d058 	.word	0x0801d058
 800418c:	0801d060 	.word	0x0801d060
 8004190:	0801d068 	.word	0x0801d068
 8004194:	0801d070 	.word	0x0801d070
    default :
      /* Set Pixel color format to RGB888 */
      DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg37);
 8004198:	f107 030c 	add.w	r3, r7, #12
 800419c:	4619      	mov	r1, r3
 800419e:	2001      	movs	r0, #1
 80041a0:	f002 fdd2 	bl	8006d48 <DSI_IO_WriteCmd>
      break;
 80041a4:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg31);
 80041a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041aa:	4619      	mov	r1, r3
 80041ac:	2001      	movs	r0, #1
 80041ae:	f002 fdcb 	bl	8006d48 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg32);
 80041b2:	f107 0320 	add.w	r3, r7, #32
 80041b6:	4619      	mov	r1, r3
 80041b8:	2001      	movs	r0, #1
 80041ba:	f002 fdc5 	bl	8006d48 <DSI_IO_WriteCmd>
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg33);
 80041be:	f107 031c 	add.w	r3, r7, #28
 80041c2:	4619      	mov	r1, r3
 80041c4:	2001      	movs	r0, #1
 80041c6:	f002 fdbf 	bl	8006d48 <DSI_IO_WriteCmd>
  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(1, (uint8_t *)nt35510_reg34);
 80041ca:	f107 0318 	add.w	r3, r7, #24
 80041ce:	4619      	mov	r1, r3
 80041d0:	2001      	movs	r0, #1
 80041d2:	f002 fdb9 	bl	8006d48 <DSI_IO_WriteCmd>
  /** CABC : Content Adaptive Backlight Control section end << */

  /* Display on */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg30);
 80041d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041da:	4619      	mov	r1, r3
 80041dc:	2000      	movs	r0, #0
 80041de:	f002 fdb3 	bl	8006d48 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)nt35510_reg35);
 80041e2:	f107 0314 	add.w	r3, r7, #20
 80041e6:	4619      	mov	r1, r3
 80041e8:	2000      	movs	r0, #0
 80041ea:	f002 fdad 	bl	8006d48 <DSI_IO_WriteCmd>

  return 0;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	37c8      	adds	r7, #200	@ 0xc8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <NT35510_ReadID>:
/**
  * @brief  Read the component ID.
  * @retval Component ID
  */
uint16_t NT35510_ReadID(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
  uint8_t pData=0;
 80041fe:	2300      	movs	r3, #0
 8004200:	71fb      	strb	r3, [r7, #7]
  DSI_IO_ReadCmd(NT35510_CMD_RDID2, &pData, 1);
 8004202:	1dfb      	adds	r3, r7, #7
 8004204:	2201      	movs	r2, #1
 8004206:	4619      	mov	r1, r3
 8004208:	20db      	movs	r0, #219	@ 0xdb
 800420a:	f002 fdc7 	bl	8006d9c <DSI_IO_ReadCmd>
  return pData;
 800420e:	79fb      	ldrb	r3, [r7, #7]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004222:	49c1      	ldr	r1, [pc, #772]	@ (8004528 <OTM8009A_Init+0x310>)
 8004224:	2000      	movs	r0, #0
 8004226:	f002 fd8f 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800422a:	49c0      	ldr	r1, [pc, #768]	@ (800452c <OTM8009A_Init+0x314>)
 800422c:	2003      	movs	r0, #3
 800422e:	f002 fd8b 	bl	8006d48 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8004232:	49bf      	ldr	r1, [pc, #764]	@ (8004530 <OTM8009A_Init+0x318>)
 8004234:	2000      	movs	r0, #0
 8004236:	f002 fd87 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 800423a:	49be      	ldr	r1, [pc, #760]	@ (8004534 <OTM8009A_Init+0x31c>)
 800423c:	2002      	movs	r0, #2
 800423e:	f002 fd83 	bl	8006d48 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8004242:	49bb      	ldr	r1, [pc, #748]	@ (8004530 <OTM8009A_Init+0x318>)
 8004244:	2000      	movs	r0, #0
 8004246:	f002 fd7f 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800424a:	49bb      	ldr	r1, [pc, #748]	@ (8004538 <OTM8009A_Init+0x320>)
 800424c:	2000      	movs	r0, #0
 800424e:	f002 fd7b 	bl	8006d48 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8004252:	200a      	movs	r0, #10
 8004254:	f000 fe15 	bl	8004e82 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8004258:	49b8      	ldr	r1, [pc, #736]	@ (800453c <OTM8009A_Init+0x324>)
 800425a:	2000      	movs	r0, #0
 800425c:	f002 fd74 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8004260:	49b7      	ldr	r1, [pc, #732]	@ (8004540 <OTM8009A_Init+0x328>)
 8004262:	2000      	movs	r0, #0
 8004264:	f002 fd70 	bl	8006d48 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8004268:	200a      	movs	r0, #10
 800426a:	f000 fe0a 	bl	8004e82 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800426e:	49b5      	ldr	r1, [pc, #724]	@ (8004544 <OTM8009A_Init+0x32c>)
 8004270:	2000      	movs	r0, #0
 8004272:	f002 fd69 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8004276:	49b4      	ldr	r1, [pc, #720]	@ (8004548 <OTM8009A_Init+0x330>)
 8004278:	2000      	movs	r0, #0
 800427a:	f002 fd65 	bl	8006d48 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800427e:	49b3      	ldr	r1, [pc, #716]	@ (800454c <OTM8009A_Init+0x334>)
 8004280:	2000      	movs	r0, #0
 8004282:	f002 fd61 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8004286:	49b2      	ldr	r1, [pc, #712]	@ (8004550 <OTM8009A_Init+0x338>)
 8004288:	2000      	movs	r0, #0
 800428a:	f002 fd5d 	bl	8006d48 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800428e:	49b1      	ldr	r1, [pc, #708]	@ (8004554 <OTM8009A_Init+0x33c>)
 8004290:	2000      	movs	r0, #0
 8004292:	f002 fd59 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8004296:	49b0      	ldr	r1, [pc, #704]	@ (8004558 <OTM8009A_Init+0x340>)
 8004298:	2000      	movs	r0, #0
 800429a:	f002 fd55 	bl	8006d48 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800429e:	49a2      	ldr	r1, [pc, #648]	@ (8004528 <OTM8009A_Init+0x310>)
 80042a0:	2000      	movs	r0, #0
 80042a2:	f002 fd51 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80042a6:	49ad      	ldr	r1, [pc, #692]	@ (800455c <OTM8009A_Init+0x344>)
 80042a8:	2000      	movs	r0, #0
 80042aa:	f002 fd4d 	bl	8006d48 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80042ae:	49ac      	ldr	r1, [pc, #688]	@ (8004560 <OTM8009A_Init+0x348>)
 80042b0:	2000      	movs	r0, #0
 80042b2:	f002 fd49 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80042b6:	49ab      	ldr	r1, [pc, #684]	@ (8004564 <OTM8009A_Init+0x34c>)
 80042b8:	2000      	movs	r0, #0
 80042ba:	f002 fd45 	bl	8006d48 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80042be:	49aa      	ldr	r1, [pc, #680]	@ (8004568 <OTM8009A_Init+0x350>)
 80042c0:	2000      	movs	r0, #0
 80042c2:	f002 fd41 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80042c6:	49a9      	ldr	r1, [pc, #676]	@ (800456c <OTM8009A_Init+0x354>)
 80042c8:	2000      	movs	r0, #0
 80042ca:	f002 fd3d 	bl	8006d48 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80042ce:	49a8      	ldr	r1, [pc, #672]	@ (8004570 <OTM8009A_Init+0x358>)
 80042d0:	2000      	movs	r0, #0
 80042d2:	f002 fd39 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80042d6:	49a7      	ldr	r1, [pc, #668]	@ (8004574 <OTM8009A_Init+0x35c>)
 80042d8:	2000      	movs	r0, #0
 80042da:	f002 fd35 	bl	8006d48 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80042de:	49a6      	ldr	r1, [pc, #664]	@ (8004578 <OTM8009A_Init+0x360>)
 80042e0:	2000      	movs	r0, #0
 80042e2:	f002 fd31 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80042e6:	499a      	ldr	r1, [pc, #616]	@ (8004550 <OTM8009A_Init+0x338>)
 80042e8:	2000      	movs	r0, #0
 80042ea:	f002 fd2d 	bl	8006d48 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80042ee:	498e      	ldr	r1, [pc, #568]	@ (8004528 <OTM8009A_Init+0x310>)
 80042f0:	2000      	movs	r0, #0
 80042f2:	f002 fd29 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80042f6:	49a1      	ldr	r1, [pc, #644]	@ (800457c <OTM8009A_Init+0x364>)
 80042f8:	2002      	movs	r0, #2
 80042fa:	f002 fd25 	bl	8006d48 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80042fe:	49a0      	ldr	r1, [pc, #640]	@ (8004580 <OTM8009A_Init+0x368>)
 8004300:	2000      	movs	r0, #0
 8004302:	f002 fd21 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8004306:	499f      	ldr	r1, [pc, #636]	@ (8004584 <OTM8009A_Init+0x36c>)
 8004308:	2000      	movs	r0, #0
 800430a:	f002 fd1d 	bl	8006d48 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800430e:	499e      	ldr	r1, [pc, #632]	@ (8004588 <OTM8009A_Init+0x370>)
 8004310:	2000      	movs	r0, #0
 8004312:	f002 fd19 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8004316:	499d      	ldr	r1, [pc, #628]	@ (800458c <OTM8009A_Init+0x374>)
 8004318:	2000      	movs	r0, #0
 800431a:	f002 fd15 	bl	8006d48 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800431e:	499c      	ldr	r1, [pc, #624]	@ (8004590 <OTM8009A_Init+0x378>)
 8004320:	2000      	movs	r0, #0
 8004322:	f002 fd11 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8004326:	499b      	ldr	r1, [pc, #620]	@ (8004594 <OTM8009A_Init+0x37c>)
 8004328:	2000      	movs	r0, #0
 800432a:	f002 fd0d 	bl	8006d48 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800432e:	498c      	ldr	r1, [pc, #560]	@ (8004560 <OTM8009A_Init+0x348>)
 8004330:	2000      	movs	r0, #0
 8004332:	f002 fd09 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8004336:	4998      	ldr	r1, [pc, #608]	@ (8004598 <OTM8009A_Init+0x380>)
 8004338:	2000      	movs	r0, #0
 800433a:	f002 fd05 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800433e:	498a      	ldr	r1, [pc, #552]	@ (8004568 <OTM8009A_Init+0x350>)
 8004340:	2000      	movs	r0, #0
 8004342:	f002 fd01 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8004346:	4995      	ldr	r1, [pc, #596]	@ (800459c <OTM8009A_Init+0x384>)
 8004348:	2000      	movs	r0, #0
 800434a:	f002 fcfd 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800434e:	4994      	ldr	r1, [pc, #592]	@ (80045a0 <OTM8009A_Init+0x388>)
 8004350:	2000      	movs	r0, #0
 8004352:	f002 fcf9 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8004356:	4993      	ldr	r1, [pc, #588]	@ (80045a4 <OTM8009A_Init+0x38c>)
 8004358:	2002      	movs	r0, #2
 800435a:	f002 fcf5 	bl	8006d48 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800435e:	4974      	ldr	r1, [pc, #464]	@ (8004530 <OTM8009A_Init+0x318>)
 8004360:	2000      	movs	r0, #0
 8004362:	f002 fcf1 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8004366:	4990      	ldr	r1, [pc, #576]	@ (80045a8 <OTM8009A_Init+0x390>)
 8004368:	2006      	movs	r0, #6
 800436a:	f002 fced 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800436e:	498f      	ldr	r1, [pc, #572]	@ (80045ac <OTM8009A_Init+0x394>)
 8004370:	2000      	movs	r0, #0
 8004372:	f002 fce9 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8004376:	498e      	ldr	r1, [pc, #568]	@ (80045b0 <OTM8009A_Init+0x398>)
 8004378:	200e      	movs	r0, #14
 800437a:	f002 fce5 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800437e:	498d      	ldr	r1, [pc, #564]	@ (80045b4 <OTM8009A_Init+0x39c>)
 8004380:	2000      	movs	r0, #0
 8004382:	f002 fce1 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8004386:	498c      	ldr	r1, [pc, #560]	@ (80045b8 <OTM8009A_Init+0x3a0>)
 8004388:	200e      	movs	r0, #14
 800438a:	f002 fcdd 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800438e:	498b      	ldr	r1, [pc, #556]	@ (80045bc <OTM8009A_Init+0x3a4>)
 8004390:	2000      	movs	r0, #0
 8004392:	f002 fcd9 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8004396:	498a      	ldr	r1, [pc, #552]	@ (80045c0 <OTM8009A_Init+0x3a8>)
 8004398:	200a      	movs	r0, #10
 800439a:	f002 fcd5 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800439e:	4989      	ldr	r1, [pc, #548]	@ (80045c4 <OTM8009A_Init+0x3ac>)
 80043a0:	2000      	movs	r0, #0
 80043a2:	f002 fcd1 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80043a6:	4988      	ldr	r1, [pc, #544]	@ (80045c8 <OTM8009A_Init+0x3b0>)
 80043a8:	2000      	movs	r0, #0
 80043aa:	f002 fccd 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80043ae:	4960      	ldr	r1, [pc, #384]	@ (8004530 <OTM8009A_Init+0x318>)
 80043b0:	2000      	movs	r0, #0
 80043b2:	f002 fcc9 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80043b6:	4985      	ldr	r1, [pc, #532]	@ (80045cc <OTM8009A_Init+0x3b4>)
 80043b8:	200a      	movs	r0, #10
 80043ba:	f002 fcc5 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80043be:	4984      	ldr	r1, [pc, #528]	@ (80045d0 <OTM8009A_Init+0x3b8>)
 80043c0:	2000      	movs	r0, #0
 80043c2:	f002 fcc1 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80043c6:	4983      	ldr	r1, [pc, #524]	@ (80045d4 <OTM8009A_Init+0x3bc>)
 80043c8:	200f      	movs	r0, #15
 80043ca:	f002 fcbd 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80043ce:	4977      	ldr	r1, [pc, #476]	@ (80045ac <OTM8009A_Init+0x394>)
 80043d0:	2000      	movs	r0, #0
 80043d2:	f002 fcb9 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80043d6:	4980      	ldr	r1, [pc, #512]	@ (80045d8 <OTM8009A_Init+0x3c0>)
 80043d8:	200f      	movs	r0, #15
 80043da:	f002 fcb5 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80043de:	4975      	ldr	r1, [pc, #468]	@ (80045b4 <OTM8009A_Init+0x39c>)
 80043e0:	2000      	movs	r0, #0
 80043e2:	f002 fcb1 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80043e6:	497d      	ldr	r1, [pc, #500]	@ (80045dc <OTM8009A_Init+0x3c4>)
 80043e8:	200a      	movs	r0, #10
 80043ea:	f002 fcad 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80043ee:	4973      	ldr	r1, [pc, #460]	@ (80045bc <OTM8009A_Init+0x3a4>)
 80043f0:	2000      	movs	r0, #0
 80043f2:	f002 fca9 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80043f6:	497a      	ldr	r1, [pc, #488]	@ (80045e0 <OTM8009A_Init+0x3c8>)
 80043f8:	200f      	movs	r0, #15
 80043fa:	f002 fca5 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80043fe:	4971      	ldr	r1, [pc, #452]	@ (80045c4 <OTM8009A_Init+0x3ac>)
 8004400:	2000      	movs	r0, #0
 8004402:	f002 fca1 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8004406:	4977      	ldr	r1, [pc, #476]	@ (80045e4 <OTM8009A_Init+0x3cc>)
 8004408:	200f      	movs	r0, #15
 800440a:	f002 fc9d 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800440e:	4976      	ldr	r1, [pc, #472]	@ (80045e8 <OTM8009A_Init+0x3d0>)
 8004410:	2000      	movs	r0, #0
 8004412:	f002 fc99 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8004416:	4975      	ldr	r1, [pc, #468]	@ (80045ec <OTM8009A_Init+0x3d4>)
 8004418:	200a      	movs	r0, #10
 800441a:	f002 fc95 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800441e:	4974      	ldr	r1, [pc, #464]	@ (80045f0 <OTM8009A_Init+0x3d8>)
 8004420:	2000      	movs	r0, #0
 8004422:	f002 fc91 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8004426:	4973      	ldr	r1, [pc, #460]	@ (80045f4 <OTM8009A_Init+0x3dc>)
 8004428:	200a      	movs	r0, #10
 800442a:	f002 fc8d 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800442e:	4940      	ldr	r1, [pc, #256]	@ (8004530 <OTM8009A_Init+0x318>)
 8004430:	2000      	movs	r0, #0
 8004432:	f002 fc89 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8004436:	4970      	ldr	r1, [pc, #448]	@ (80045f8 <OTM8009A_Init+0x3e0>)
 8004438:	200a      	movs	r0, #10
 800443a:	f002 fc85 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800443e:	4964      	ldr	r1, [pc, #400]	@ (80045d0 <OTM8009A_Init+0x3b8>)
 8004440:	2000      	movs	r0, #0
 8004442:	f002 fc81 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8004446:	496d      	ldr	r1, [pc, #436]	@ (80045fc <OTM8009A_Init+0x3e4>)
 8004448:	200f      	movs	r0, #15
 800444a:	f002 fc7d 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800444e:	4957      	ldr	r1, [pc, #348]	@ (80045ac <OTM8009A_Init+0x394>)
 8004450:	2000      	movs	r0, #0
 8004452:	f002 fc79 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8004456:	496a      	ldr	r1, [pc, #424]	@ (8004600 <OTM8009A_Init+0x3e8>)
 8004458:	200f      	movs	r0, #15
 800445a:	f002 fc75 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800445e:	4955      	ldr	r1, [pc, #340]	@ (80045b4 <OTM8009A_Init+0x39c>)
 8004460:	2000      	movs	r0, #0
 8004462:	f002 fc71 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8004466:	4967      	ldr	r1, [pc, #412]	@ (8004604 <OTM8009A_Init+0x3ec>)
 8004468:	200a      	movs	r0, #10
 800446a:	f002 fc6d 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800446e:	4953      	ldr	r1, [pc, #332]	@ (80045bc <OTM8009A_Init+0x3a4>)
 8004470:	2000      	movs	r0, #0
 8004472:	f002 fc69 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8004476:	4964      	ldr	r1, [pc, #400]	@ (8004608 <OTM8009A_Init+0x3f0>)
 8004478:	200f      	movs	r0, #15
 800447a:	f002 fc65 	bl	8006d48 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800447e:	4951      	ldr	r1, [pc, #324]	@ (80045c4 <OTM8009A_Init+0x3ac>)
 8004480:	2000      	movs	r0, #0
 8004482:	f002 fc61 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8004486:	4961      	ldr	r1, [pc, #388]	@ (800460c <OTM8009A_Init+0x3f4>)
 8004488:	200f      	movs	r0, #15
 800448a:	f002 fc5d 	bl	8006d48 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800448e:	4934      	ldr	r1, [pc, #208]	@ (8004560 <OTM8009A_Init+0x348>)
 8004490:	2000      	movs	r0, #0
 8004492:	f002 fc59 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8004496:	495e      	ldr	r1, [pc, #376]	@ (8004610 <OTM8009A_Init+0x3f8>)
 8004498:	2000      	movs	r0, #0
 800449a:	f002 fc55 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 800449e:	495d      	ldr	r1, [pc, #372]	@ (8004614 <OTM8009A_Init+0x3fc>)
 80044a0:	2000      	movs	r0, #0
 80044a2:	f002 fc51 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80044a6:	495c      	ldr	r1, [pc, #368]	@ (8004618 <OTM8009A_Init+0x400>)
 80044a8:	2000      	movs	r0, #0
 80044aa:	f002 fc4d 	bl	8006d48 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80044ae:	495b      	ldr	r1, [pc, #364]	@ (800461c <OTM8009A_Init+0x404>)
 80044b0:	2000      	movs	r0, #0
 80044b2:	f002 fc49 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80044b6:	495a      	ldr	r1, [pc, #360]	@ (8004620 <OTM8009A_Init+0x408>)
 80044b8:	2000      	movs	r0, #0
 80044ba:	f002 fc45 	bl	8006d48 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80044be:	491a      	ldr	r1, [pc, #104]	@ (8004528 <OTM8009A_Init+0x310>)
 80044c0:	2000      	movs	r0, #0
 80044c2:	f002 fc41 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80044c6:	4957      	ldr	r1, [pc, #348]	@ (8004624 <OTM8009A_Init+0x40c>)
 80044c8:	2003      	movs	r0, #3
 80044ca:	f002 fc3d 	bl	8006d48 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80044ce:	4916      	ldr	r1, [pc, #88]	@ (8004528 <OTM8009A_Init+0x310>)
 80044d0:	2000      	movs	r0, #0
 80044d2:	f002 fc39 	bl	8006d48 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80044d6:	4914      	ldr	r1, [pc, #80]	@ (8004528 <OTM8009A_Init+0x310>)
 80044d8:	2000      	movs	r0, #0
 80044da:	f002 fc35 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80044de:	4952      	ldr	r1, [pc, #328]	@ (8004628 <OTM8009A_Init+0x410>)
 80044e0:	2010      	movs	r0, #16
 80044e2:	f002 fc31 	bl	8006d48 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80044e6:	4910      	ldr	r1, [pc, #64]	@ (8004528 <OTM8009A_Init+0x310>)
 80044e8:	2000      	movs	r0, #0
 80044ea:	f002 fc2d 	bl	8006d48 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80044ee:	494f      	ldr	r1, [pc, #316]	@ (800462c <OTM8009A_Init+0x414>)
 80044f0:	2010      	movs	r0, #16
 80044f2:	f002 fc29 	bl	8006d48 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80044f6:	494e      	ldr	r1, [pc, #312]	@ (8004630 <OTM8009A_Init+0x418>)
 80044f8:	2000      	movs	r0, #0
 80044fa:	f002 fc25 	bl	8006d48 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80044fe:	2078      	movs	r0, #120	@ 0x78
 8004500:	f000 fcbf 	bl	8004e82 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <OTM8009A_Init+0x304>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b02      	cmp	r3, #2
 800450e:	f040 8095 	bne.w	800463c <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8004512:	4948      	ldr	r1, [pc, #288]	@ (8004634 <OTM8009A_Init+0x41c>)
 8004514:	2000      	movs	r0, #0
 8004516:	f002 fc17 	bl	8006d48 <DSI_IO_WriteCmd>
    break;
 800451a:	e090      	b.n	800463e <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 800451c:	4946      	ldr	r1, [pc, #280]	@ (8004638 <OTM8009A_Init+0x420>)
 800451e:	2000      	movs	r0, #0
 8004520:	f002 fc12 	bl	8006d48 <DSI_IO_WriteCmd>
    break;
 8004524:	e08b      	b.n	800463e <OTM8009A_Init+0x426>
 8004526:	bf00      	nop
 8004528:	0801d8d4 	.word	0x0801d8d4
 800452c:	0801d78c 	.word	0x0801d78c
 8004530:	0801d8d8 	.word	0x0801d8d8
 8004534:	0801d790 	.word	0x0801d790
 8004538:	0801d8dc 	.word	0x0801d8dc
 800453c:	0801d8e0 	.word	0x0801d8e0
 8004540:	0801d8e4 	.word	0x0801d8e4
 8004544:	0801d8e8 	.word	0x0801d8e8
 8004548:	0801d8ec 	.word	0x0801d8ec
 800454c:	0801d8f0 	.word	0x0801d8f0
 8004550:	0801d8f4 	.word	0x0801d8f4
 8004554:	0801d8f8 	.word	0x0801d8f8
 8004558:	0801d8fc 	.word	0x0801d8fc
 800455c:	0801d900 	.word	0x0801d900
 8004560:	0801d904 	.word	0x0801d904
 8004564:	0801d908 	.word	0x0801d908
 8004568:	0801d90c 	.word	0x0801d90c
 800456c:	0801d910 	.word	0x0801d910
 8004570:	0801d914 	.word	0x0801d914
 8004574:	0801d918 	.word	0x0801d918
 8004578:	0801d91c 	.word	0x0801d91c
 800457c:	0801d7bc 	.word	0x0801d7bc
 8004580:	0801d920 	.word	0x0801d920
 8004584:	0801d924 	.word	0x0801d924
 8004588:	0801d928 	.word	0x0801d928
 800458c:	0801d92c 	.word	0x0801d92c
 8004590:	0801d930 	.word	0x0801d930
 8004594:	0801d934 	.word	0x0801d934
 8004598:	0801d938 	.word	0x0801d938
 800459c:	0801d93c 	.word	0x0801d93c
 80045a0:	0801d940 	.word	0x0801d940
 80045a4:	0801d7c0 	.word	0x0801d7c0
 80045a8:	0801d7c4 	.word	0x0801d7c4
 80045ac:	0801d944 	.word	0x0801d944
 80045b0:	0801d7cc 	.word	0x0801d7cc
 80045b4:	0801d948 	.word	0x0801d948
 80045b8:	0801d7dc 	.word	0x0801d7dc
 80045bc:	0801d94c 	.word	0x0801d94c
 80045c0:	0801d7ec 	.word	0x0801d7ec
 80045c4:	0801d950 	.word	0x0801d950
 80045c8:	0801d988 	.word	0x0801d988
 80045cc:	0801d7f8 	.word	0x0801d7f8
 80045d0:	0801d954 	.word	0x0801d954
 80045d4:	0801d804 	.word	0x0801d804
 80045d8:	0801d814 	.word	0x0801d814
 80045dc:	0801d824 	.word	0x0801d824
 80045e0:	0801d830 	.word	0x0801d830
 80045e4:	0801d840 	.word	0x0801d840
 80045e8:	0801d958 	.word	0x0801d958
 80045ec:	0801d850 	.word	0x0801d850
 80045f0:	0801d95c 	.word	0x0801d95c
 80045f4:	0801d85c 	.word	0x0801d85c
 80045f8:	0801d868 	.word	0x0801d868
 80045fc:	0801d874 	.word	0x0801d874
 8004600:	0801d884 	.word	0x0801d884
 8004604:	0801d894 	.word	0x0801d894
 8004608:	0801d8a0 	.word	0x0801d8a0
 800460c:	0801d8b0 	.word	0x0801d8b0
 8004610:	0801d98c 	.word	0x0801d98c
 8004614:	0801d990 	.word	0x0801d990
 8004618:	0801d994 	.word	0x0801d994
 800461c:	0801d998 	.word	0x0801d998
 8004620:	0801d99c 	.word	0x0801d99c
 8004624:	0801d8c0 	.word	0x0801d8c0
 8004628:	0801d794 	.word	0x0801d794
 800462c:	0801d7a8 	.word	0x0801d7a8
 8004630:	0801d960 	.word	0x0801d960
 8004634:	0801d964 	.word	0x0801d964
 8004638:	0801d968 	.word	0x0801d968
  default :
    break;
 800463c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d10b      	bne.n	800465c <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8004644:	4916      	ldr	r1, [pc, #88]	@ (80046a0 <OTM8009A_Init+0x488>)
 8004646:	2000      	movs	r0, #0
 8004648:	f002 fb7e 	bl	8006d48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800464c:	4915      	ldr	r1, [pc, #84]	@ (80046a4 <OTM8009A_Init+0x48c>)
 800464e:	2004      	movs	r0, #4
 8004650:	f002 fb7a 	bl	8006d48 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8004654:	4914      	ldr	r1, [pc, #80]	@ (80046a8 <OTM8009A_Init+0x490>)
 8004656:	2004      	movs	r0, #4
 8004658:	f002 fb76 	bl	8006d48 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800465c:	4913      	ldr	r1, [pc, #76]	@ (80046ac <OTM8009A_Init+0x494>)
 800465e:	2000      	movs	r0, #0
 8004660:	f002 fb72 	bl	8006d48 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8004664:	4912      	ldr	r1, [pc, #72]	@ (80046b0 <OTM8009A_Init+0x498>)
 8004666:	2000      	movs	r0, #0
 8004668:	f002 fb6e 	bl	8006d48 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800466c:	4911      	ldr	r1, [pc, #68]	@ (80046b4 <OTM8009A_Init+0x49c>)
 800466e:	2000      	movs	r0, #0
 8004670:	f002 fb6a 	bl	8006d48 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8004674:	4910      	ldr	r1, [pc, #64]	@ (80046b8 <OTM8009A_Init+0x4a0>)
 8004676:	2000      	movs	r0, #0
 8004678:	f002 fb66 	bl	8006d48 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800467c:	490f      	ldr	r1, [pc, #60]	@ (80046bc <OTM8009A_Init+0x4a4>)
 800467e:	2000      	movs	r0, #0
 8004680:	f002 fb62 	bl	8006d48 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8004684:	490e      	ldr	r1, [pc, #56]	@ (80046c0 <OTM8009A_Init+0x4a8>)
 8004686:	2000      	movs	r0, #0
 8004688:	f002 fb5e 	bl	8006d48 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 800468c:	490d      	ldr	r1, [pc, #52]	@ (80046c4 <OTM8009A_Init+0x4ac>)
 800468e:	2000      	movs	r0, #0
 8004690:	f002 fb5a 	bl	8006d48 <DSI_IO_WriteCmd>

  return 0;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	0801d96c 	.word	0x0801d96c
 80046a4:	0801d8c4 	.word	0x0801d8c4
 80046a8:	0801d8cc 	.word	0x0801d8cc
 80046ac:	0801d970 	.word	0x0801d970
 80046b0:	0801d974 	.word	0x0801d974
 80046b4:	0801d978 	.word	0x0801d978
 80046b8:	0801d97c 	.word	0x0801d97c
 80046bc:	0801d980 	.word	0x0801d980
 80046c0:	0801d8d4 	.word	0x0801d8d4
 80046c4:	0801d984 	.word	0x0801d984

080046c8 <OTM8009A_ReadID>:
/**
  * @brief  Read the component ID.
  * @retval Component ID
  */
uint16_t OTM8009A_ReadID(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
  uint8_t pData=0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	71fb      	strb	r3, [r7, #7]
  DSI_IO_ReadCmd(OTM8009A_CMD_ID1, &pData, 1);
 80046d2:	1dfb      	adds	r3, r7, #7
 80046d4:	2201      	movs	r2, #1
 80046d6:	4619      	mov	r1, r3
 80046d8:	20da      	movs	r0, #218	@ 0xda
 80046da:	f002 fb5f 	bl	8006d9c <DSI_IO_ReadCmd>
  return pData;
 80046de:	79fb      	ldrb	r3, [r7, #7]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b08c      	sub	sp, #48	@ 0x30
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led <= LED4)
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d86d      	bhi.n	80047d4 <BSP_LED_Init+0xec>
  {
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	4a38      	ldr	r2, [pc, #224]	@ (80047dc <BSP_LED_Init+0xf4>)
 80046fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004700:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004702:	2301      	movs	r3, #1
 8004704:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8004706:	2301      	movs	r3, #1
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800470a:	2303      	movs	r3, #3
 800470c:	62bb      	str	r3, [r7, #40]	@ 0x28

    switch(Led)
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2b03      	cmp	r3, #3
 8004712:	d847      	bhi.n	80047a4 <BSP_LED_Init+0xbc>
 8004714:	a201      	add	r2, pc, #4	@ (adr r2, 800471c <BSP_LED_Init+0x34>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	0800472d 	.word	0x0800472d
 8004720:	0800474b 	.word	0x0800474b
 8004724:	08004769 	.word	0x08004769
 8004728:	08004787 	.word	0x08004787
    {
    case LED1 :
      LED1_GPIO_CLK_ENABLE();
 800472c:	2300      	movs	r3, #0
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	4b2b      	ldr	r3, [pc, #172]	@ (80047e0 <BSP_LED_Init+0xf8>)
 8004732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004734:	4a2a      	ldr	r2, [pc, #168]	@ (80047e0 <BSP_LED_Init+0xf8>)
 8004736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800473a:	6313      	str	r3, [r2, #48]	@ 0x30
 800473c:	4b28      	ldr	r3, [pc, #160]	@ (80047e0 <BSP_LED_Init+0xf8>)
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	69bb      	ldr	r3, [r7, #24]
      break;
 8004748:	e02d      	b.n	80047a6 <BSP_LED_Init+0xbe>
    case LED2 :
      LED2_GPIO_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	4b24      	ldr	r3, [pc, #144]	@ (80047e0 <BSP_LED_Init+0xf8>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	4a23      	ldr	r2, [pc, #140]	@ (80047e0 <BSP_LED_Init+0xf8>)
 8004754:	f043 0308 	orr.w	r3, r3, #8
 8004758:	6313      	str	r3, [r2, #48]	@ 0x30
 800475a:	4b21      	ldr	r3, [pc, #132]	@ (80047e0 <BSP_LED_Init+0xf8>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	697b      	ldr	r3, [r7, #20]
      break;
 8004766:	e01e      	b.n	80047a6 <BSP_LED_Init+0xbe>
    case LED3 :
      LED3_GPIO_CLK_ENABLE();
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	4b1c      	ldr	r3, [pc, #112]	@ (80047e0 <BSP_LED_Init+0xf8>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004770:	4a1b      	ldr	r2, [pc, #108]	@ (80047e0 <BSP_LED_Init+0xf8>)
 8004772:	f043 0308 	orr.w	r3, r3, #8
 8004776:	6313      	str	r3, [r2, #48]	@ 0x30
 8004778:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <BSP_LED_Init+0xf8>)
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	693b      	ldr	r3, [r7, #16]
      break;
 8004784:	e00f      	b.n	80047a6 <BSP_LED_Init+0xbe>
    case LED4 :
      LED4_GPIO_CLK_ENABLE();
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	4b15      	ldr	r3, [pc, #84]	@ (80047e0 <BSP_LED_Init+0xf8>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	4a14      	ldr	r2, [pc, #80]	@ (80047e0 <BSP_LED_Init+0xf8>)
 8004790:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004794:	6313      	str	r3, [r2, #48]	@ 0x30
 8004796:	4b12      	ldr	r3, [pc, #72]	@ (80047e0 <BSP_LED_Init+0xf8>)
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	68fb      	ldr	r3, [r7, #12]
      break;
 80047a2:	e000      	b.n	80047a6 <BSP_LED_Init+0xbe>
    default :
      break;
 80047a4:	bf00      	nop

    } /* end switch */

    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	4a0e      	ldr	r2, [pc, #56]	@ (80047e4 <BSP_LED_Init+0xfc>)
 80047aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ae:	f107 021c 	add.w	r2, r7, #28
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f005 f983 	bl	8009ac0 <HAL_GPIO_Init>

    /* By default, turn off LED by setting a high level on corresponding GPIO */
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	4a09      	ldr	r2, [pc, #36]	@ (80047e4 <BSP_LED_Init+0xfc>)
 80047be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	4a05      	ldr	r2, [pc, #20]	@ (80047dc <BSP_LED_Init+0xf4>)
 80047c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2201      	movs	r2, #1
 80047ce:	4619      	mov	r1, r3
 80047d0:	f005 fb3a 	bl	8009e48 <HAL_GPIO_WritePin>

  } /* of if (Led <= LED4) */

}
 80047d4:	bf00      	nop
 80047d6:	3730      	adds	r7, #48	@ 0x30
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	2000008c 	.word	0x2000008c
 80047e0:	40023800 	.word	0x40023800
 80047e4:	2000009c 	.word	0x2000009c

080047e8 <BSP_LED_Toggle>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d80c      	bhi.n	8004812 <BSP_LED_Toggle+0x2a>
  {
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	4a08      	ldr	r2, [pc, #32]	@ (800481c <BSP_LED_Toggle+0x34>)
 80047fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	4907      	ldr	r1, [pc, #28]	@ (8004820 <BSP_LED_Toggle+0x38>)
 8004804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004808:	b29b      	uxth	r3, r3
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f005 fb34 	bl	8009e7a <HAL_GPIO_TogglePin>
  }
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	2000009c 	.word	0x2000009c
 8004820:	2000008c 	.word	0x2000008c

08004824 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	460a      	mov	r2, r1
 800482e:	71fb      	strb	r3, [r7, #7]
 8004830:	4613      	mov	r3, r2
 8004832:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable the BUTTON clock */
  BUTTON_GPIO_CLK_ENABLE();
 8004834:	2300      	movs	r3, #0
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	4b23      	ldr	r3, [pc, #140]	@ (80048c8 <BSP_PB_Init+0xa4>)
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	4a22      	ldr	r2, [pc, #136]	@ (80048c8 <BSP_PB_Init+0xa4>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6313      	str	r3, [r2, #48]	@ 0x30
 8004844:	4b20      	ldr	r3, [pc, #128]	@ (80048c8 <BSP_PB_Init+0xa4>)
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	68bb      	ldr	r3, [r7, #8]

  if(Button_Mode == BUTTON_MODE_GPIO)
 8004850:	79bb      	ldrb	r3, [r7, #6]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d111      	bne.n	800487a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004856:	2301      	movs	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004862:	2302      	movs	r3, #2
 8004864:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	4a18      	ldr	r2, [pc, #96]	@ (80048cc <BSP_PB_Init+0xa8>)
 800486a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486e:	f107 020c 	add.w	r2, r7, #12
 8004872:	4611      	mov	r1, r2
 8004874:	4618      	mov	r0, r3
 8004876:	f005 f923 	bl	8009ac0 <HAL_GPIO_Init>
  }

  if(Button_Mode == BUTTON_MODE_EXTI)
 800487a:	79bb      	ldrb	r3, [r7, #6]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d11e      	bne.n	80048be <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004880:	2301      	movs	r3, #1
 8004882:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004888:	2302      	movs	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]

    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800488c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004890:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	4a0d      	ldr	r2, [pc, #52]	@ (80048cc <BSP_PB_Init+0xa8>)
 8004896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489a:	f107 020c 	add.w	r2, r7, #12
 800489e:	4611      	mov	r1, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f005 f90d 	bl	8009ac0 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80048a6:	2306      	movs	r3, #6
 80048a8:	b25b      	sxtb	r3, r3
 80048aa:	2200      	movs	r2, #0
 80048ac:	210f      	movs	r1, #15
 80048ae:	4618      	mov	r0, r3
 80048b0:	f003 fb1b 	bl	8007eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80048b4:	2306      	movs	r3, #6
 80048b6:	b25b      	sxtb	r3, r3
 80048b8:	4618      	mov	r0, r3
 80048ba:	f003 fb32 	bl	8007f22 <HAL_NVIC_EnableIRQ>
  }
}
 80048be:	bf00      	nop
 80048c0:	3720      	adds	r7, #32
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	200000ac 	.word	0x200000ac

080048d0 <BSP_PB_GetState>:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	4a06      	ldr	r2, [pc, #24]	@ (80048f8 <BSP_PB_GetState+0x28>)
 80048de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e2:	2201      	movs	r2, #1
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f005 fa96 	bl	8009e18 <HAL_GPIO_ReadPin>
 80048ec:	4603      	mov	r3, r0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200000ac 	.word	0x200000ac

080048fc <I2C1_MspInit>:
/******************************* I2C Routines *********************************/
/**
  * @brief  Initializes I2C MSP.
  */
static void I2C1_MspInit(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	4b40      	ldr	r3, [pc, #256]	@ (8004a08 <I2C1_MspInit+0x10c>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a08 <I2C1_MspInit+0x10c>)
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	6313      	str	r3, [r2, #48]	@ 0x30
 8004912:	4b3d      	ldr	r3, [pc, #244]	@ (8004a08 <I2C1_MspInit+0x10c>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	687b      	ldr	r3, [r7, #4]

#if defined(USE_STM32469I_DISCO_REVC)
  /* Perform 10 pulses on SCL to unlock I2C devices if previous I2C transaction aborted.*/
  /* This configuration is needed with STM32F469I Disco RevC when using touch screen controller FT6336U */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 800491e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004922:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_OD;
 8004924:	2311      	movs	r3, #17
 8004926:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800492c:	2302      	movs	r3, #2
 800492e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init( DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure );
 8004934:	f107 0308 	add.w	r3, r7, #8
 8004938:	4619      	mov	r1, r3
 800493a:	4834      	ldr	r0, [pc, #208]	@ (8004a0c <I2C1_MspInit+0x110>)
 800493c:	f005 f8c0 	bl	8009ac0 <HAL_GPIO_Init>
  for(uint8_t count = 10; count > 0; count-- )
 8004940:	230a      	movs	r3, #10
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e014      	b.n	8004970 <I2C1_MspInit+0x74>
  {
    HAL_GPIO_WritePin( DISCO_I2C1_SCL_SDA_GPIO_PORT, DISCO_I2C1_SCL_PIN, GPIO_PIN_SET );
 8004946:	2201      	movs	r2, #1
 8004948:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800494c:	482f      	ldr	r0, [pc, #188]	@ (8004a0c <I2C1_MspInit+0x110>)
 800494e:	f005 fa7b 	bl	8009e48 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004952:	2001      	movs	r0, #1
 8004954:	f003 f9ca 	bl	8007cec <HAL_Delay>
    HAL_GPIO_WritePin( DISCO_I2C1_SCL_SDA_GPIO_PORT, DISCO_I2C1_SCL_PIN, GPIO_PIN_RESET );
 8004958:	2200      	movs	r2, #0
 800495a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800495e:	482b      	ldr	r0, [pc, #172]	@ (8004a0c <I2C1_MspInit+0x110>)
 8004960:	f005 fa72 	bl	8009e48 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8004964:	2001      	movs	r0, #1
 8004966:	f003 f9c1 	bl	8007cec <HAL_Delay>
  for(uint8_t count = 10; count > 0; count-- )
 800496a:	7ffb      	ldrb	r3, [r7, #31]
 800496c:	3b01      	subs	r3, #1
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	7ffb      	ldrb	r3, [r7, #31]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e7      	bne.n	8004946 <I2C1_MspInit+0x4a>
  }
#endif /* USE_STM32469I_DISCO_REVC */

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 8004976:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800497a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800497c:	2312      	movs	r3, #18
 800497e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004984:	2302      	movs	r3, #2
 8004986:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 8004988:	2304      	movs	r3, #4
 800498a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800498c:	f107 0308 	add.w	r3, r7, #8
 8004990:	4619      	mov	r1, r3
 8004992:	481e      	ldr	r0, [pc, #120]	@ (8004a0c <I2C1_MspInit+0x110>)
 8004994:	f005 f894 	bl	8009ac0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 8004998:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800499c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800499e:	f107 0308 	add.w	r3, r7, #8
 80049a2:	4619      	mov	r1, r3
 80049a4:	4819      	ldr	r0, [pc, #100]	@ (8004a0c <I2C1_MspInit+0x110>)
 80049a6:	f005 f88b 	bl	8009ac0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCO_I2C1_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	4b16      	ldr	r3, [pc, #88]	@ (8004a08 <I2C1_MspInit+0x10c>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	4a15      	ldr	r2, [pc, #84]	@ (8004a08 <I2C1_MspInit+0x10c>)
 80049b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <I2C1_MspInit+0x10c>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	683b      	ldr	r3, [r7, #0]

  /* Force the I2C peripheral clock reset */
  DISCO_I2C1_FORCE_RESET();
 80049c6:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <I2C1_MspInit+0x10c>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004a08 <I2C1_MspInit+0x10c>)
 80049cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80049d0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCO_I2C1_RELEASE_RESET();
 80049d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a08 <I2C1_MspInit+0x10c>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004a08 <I2C1_MspInit+0x10c>)
 80049d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80049dc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 80049de:	2200      	movs	r2, #0
 80049e0:	2105      	movs	r1, #5
 80049e2:	201f      	movs	r0, #31
 80049e4:	f003 fa81 	bl	8007eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 80049e8:	201f      	movs	r0, #31
 80049ea:	f003 fa9a 	bl	8007f22 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2105      	movs	r1, #5
 80049f2:	2020      	movs	r0, #32
 80049f4:	f003 fa79 	bl	8007eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 80049f8:	2020      	movs	r0, #32
 80049fa:	f003 fa92 	bl	8007f22 <HAL_NVIC_EnableIRQ>
}
 80049fe:	bf00      	nop
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40020400 	.word	0x40020400

08004a10 <I2C2_MspInit>:

/**
  * @brief  Initializes I2C MSP.
  */
static void I2C2_MspInit(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCO_I2C2_SCL_SDA_GPIO_CLK_ENABLE();
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	4b29      	ldr	r3, [pc, #164]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	4a28      	ldr	r2, [pc, #160]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a26:	4b26      	ldr	r3, [pc, #152]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	68bb      	ldr	r3, [r7, #8]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C2_SCL_PIN;
 8004a32:	2310      	movs	r3, #16
 8004a34:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004a36:	2312      	movs	r3, #18
 8004a38:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = DISCO_I2C2_SCL_SDA_AF;
 8004a42:	2304      	movs	r3, #4
 8004a44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCO_I2C2_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004a46:	f107 030c 	add.w	r3, r7, #12
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	481d      	ldr	r0, [pc, #116]	@ (8004ac4 <I2C2_MspInit+0xb4>)
 8004a4e:	f005 f837 	bl	8009ac0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C2_SDA_PIN;
 8004a52:	2320      	movs	r3, #32
 8004a54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DISCO_I2C2_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004a56:	f107 030c 	add.w	r3, r7, #12
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4819      	ldr	r0, [pc, #100]	@ (8004ac4 <I2C2_MspInit+0xb4>)
 8004a5e:	f005 f82f 	bl	8009ac0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCO_I2C2_CLK_ENABLE();
 8004a62:	2300      	movs	r3, #0
 8004a64:	607b      	str	r3, [r7, #4]
 8004a66:	4b16      	ldr	r3, [pc, #88]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a72:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a7a:	607b      	str	r3, [r7, #4]
 8004a7c:	687b      	ldr	r3, [r7, #4]

  /* Force the I2C peripheral clock reset */
  DISCO_I2C2_FORCE_RESET();
 8004a7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	4a0f      	ldr	r2, [pc, #60]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a88:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCO_I2C2_RELEASE_RESET();
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ac0 <I2C2_MspInit+0xb0>)
 8004a90:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004a94:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C2_EV_IRQn, 0x05, 0);
 8004a96:	2200      	movs	r2, #0
 8004a98:	2105      	movs	r1, #5
 8004a9a:	2021      	movs	r0, #33	@ 0x21
 8004a9c:	f003 fa25 	bl	8007eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C2_EV_IRQn);
 8004aa0:	2021      	movs	r0, #33	@ 0x21
 8004aa2:	f003 fa3e 	bl	8007f22 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C2_ER_IRQn, 0x05, 0);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2105      	movs	r1, #5
 8004aaa:	2022      	movs	r0, #34	@ 0x22
 8004aac:	f003 fa1d 	bl	8007eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C2_ER_IRQn);
 8004ab0:	2022      	movs	r0, #34	@ 0x22
 8004ab2:	f003 fa36 	bl	8007f22 <HAL_NVIC_EnableIRQ>
}
 8004ab6:	bf00      	nop
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40021c00 	.word	0x40021c00

08004ac8 <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 8004acc:	4814      	ldr	r0, [pc, #80]	@ (8004b20 <I2C1_Init+0x58>)
 8004ace:	f007 fffb 	bl	800cac8 <HAL_I2C_GetState>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d120      	bne.n	8004b1a <I2C1_Init+0x52>
  {
    heval_I2c1.Instance = I2C1;
 8004ad8:	4b11      	ldr	r3, [pc, #68]	@ (8004b20 <I2C1_Init+0x58>)
 8004ada:	4a12      	ldr	r2, [pc, #72]	@ (8004b24 <I2C1_Init+0x5c>)
 8004adc:	601a      	str	r2, [r3, #0]
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 8004ade:	4b10      	ldr	r3, [pc, #64]	@ (8004b20 <I2C1_Init+0x58>)
 8004ae0:	4a11      	ldr	r2, [pc, #68]	@ (8004b28 <I2C1_Init+0x60>)
 8004ae2:	605a      	str	r2, [r3, #4]
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b20 <I2C1_Init+0x58>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]
    heval_I2c1.Init.OwnAddress1     = 0;
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <I2C1_Init+0x58>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	60da      	str	r2, [r3, #12]
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8004af0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <I2C1_Init+0x58>)
 8004af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004af6:	611a      	str	r2, [r3, #16]
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004af8:	4b09      	ldr	r3, [pc, #36]	@ (8004b20 <I2C1_Init+0x58>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	615a      	str	r2, [r3, #20]
    heval_I2c1.Init.OwnAddress2     = 0;
 8004afe:	4b08      	ldr	r3, [pc, #32]	@ (8004b20 <I2C1_Init+0x58>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	619a      	str	r2, [r3, #24]
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b04:	4b06      	ldr	r3, [pc, #24]	@ (8004b20 <I2C1_Init+0x58>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	61da      	str	r2, [r3, #28]
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <I2C1_Init+0x58>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C1_MspInit();
 8004b10:	f7ff fef4 	bl	80048fc <I2C1_MspInit>
    HAL_I2C_Init(&heval_I2c1);
 8004b14:	4802      	ldr	r0, [pc, #8]	@ (8004b20 <I2C1_Init+0x58>)
 8004b16:	f007 fb23 	bl	800c160 <HAL_I2C_Init>
  }
}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	200083e0 	.word	0x200083e0
 8004b24:	40005400 	.word	0x40005400
 8004b28:	00061a80 	.word	0x00061a80

08004b2c <I2C2_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C2_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&heval_I2c2) == HAL_I2C_STATE_RESET)
 8004b30:	4814      	ldr	r0, [pc, #80]	@ (8004b84 <I2C2_Init+0x58>)
 8004b32:	f007 ffc9 	bl	800cac8 <HAL_I2C_GetState>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d120      	bne.n	8004b7e <I2C2_Init+0x52>
  {
    heval_I2c2.Instance = I2C2;
 8004b3c:	4b11      	ldr	r3, [pc, #68]	@ (8004b84 <I2C2_Init+0x58>)
 8004b3e:	4a12      	ldr	r2, [pc, #72]	@ (8004b88 <I2C2_Init+0x5c>)
 8004b40:	601a      	str	r2, [r3, #0]
    heval_I2c2.Init.ClockSpeed      = I2C2_SCL_FREQ_KHZ;
 8004b42:	4b10      	ldr	r3, [pc, #64]	@ (8004b84 <I2C2_Init+0x58>)
 8004b44:	4a11      	ldr	r2, [pc, #68]	@ (8004b8c <I2C2_Init+0x60>)
 8004b46:	605a      	str	r2, [r3, #4]
    heval_I2c2.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 8004b48:	4b0e      	ldr	r3, [pc, #56]	@ (8004b84 <I2C2_Init+0x58>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	609a      	str	r2, [r3, #8]
    heval_I2c2.Init.OwnAddress1     = 0;
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b84 <I2C2_Init+0x58>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	60da      	str	r2, [r3, #12]
    heval_I2c2.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <I2C2_Init+0x58>)
 8004b56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004b5a:	611a      	str	r2, [r3, #16]
    heval_I2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <I2C2_Init+0x58>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	615a      	str	r2, [r3, #20]
    heval_I2c2.Init.OwnAddress2     = 0;
 8004b62:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <I2C2_Init+0x58>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	619a      	str	r2, [r3, #24]
    heval_I2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004b68:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <I2C2_Init+0x58>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	61da      	str	r2, [r3, #28]
    heval_I2c2.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8004b6e:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <I2C2_Init+0x58>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit();
 8004b74:	f7ff ff4c 	bl	8004a10 <I2C2_MspInit>
    HAL_I2C_Init(&heval_I2c2);
 8004b78:	4802      	ldr	r0, [pc, #8]	@ (8004b84 <I2C2_Init+0x58>)
 8004b7a:	f007 faf1 	bl	800c160 <HAL_I2C_Init>
  }
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20008434 	.word	0x20008434
 8004b88:	40005800 	.word	0x40005800
 8004b8c:	000186a0 	.word	0x000186a0

08004b90 <I2C1_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
static void I2C1_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	4603      	mov	r3, r0
 8004b98:	71fb      	strb	r3, [r7, #7]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	71bb      	strb	r3, [r7, #6]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&heval_I2c1,
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	b299      	uxth	r1, r3
 8004baa:	79bb      	ldrb	r3, [r7, #6]
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	2364      	movs	r3, #100	@ 0x64
 8004bb0:	9302      	str	r3, [sp, #8]
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	1d7b      	adds	r3, r7, #5
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4807      	ldr	r0, [pc, #28]	@ (8004bdc <I2C1_Write+0x4c>)
 8004bbe:	f007 fc57 	bl	800c470 <HAL_I2C_Mem_Write>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]
                         &Value,
                         1,
                         100);

  /* Check the communication status */
  if(status != HAL_OK)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <I2C1_Write+0x44>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f8b6 	bl	8004d40 <I2C1_Error>
  }
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	200083e0 	.word	0x200083e0

08004be0 <I2C1_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
static uint8_t I2C1_Read(uint8_t Addr, uint8_t Reg)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af04      	add	r7, sp, #16
 8004be6:	4603      	mov	r3, r0
 8004be8:	460a      	mov	r2, r1
 8004bea:	71fb      	strb	r3, [r7, #7]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	73fb      	strb	r3, [r7, #15]
  uint8_t Value = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	b299      	uxth	r1, r3
 8004bfc:	79bb      	ldrb	r3, [r7, #6]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c04:	9302      	str	r3, [sp, #8]
 8004c06:	2301      	movs	r3, #1
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	f107 030e 	add.w	r3, r7, #14
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2301      	movs	r3, #1
 8004c12:	4808      	ldr	r0, [pc, #32]	@ (8004c34 <I2C1_Read+0x54>)
 8004c14:	f007 fd26 	bl	800c664 <HAL_I2C_Mem_Read>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
                        &Value,
                        1,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <I2C1_Read+0x4a>
  {
    /* Execute user timeout callback */
    I2C1_Error(Addr);
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 f88b 	bl	8004d40 <I2C1_Error>
  }
  return Value;
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	200083e0 	.word	0x200083e0

08004c38 <I2C1_ReadMultiple>:
static HAL_StatusTypeDef I2C1_ReadMultiple(uint8_t Addr,
                                       uint16_t Reg,
                                       uint16_t MemAddress,
                                       uint8_t *Buffer,
                                       uint16_t Length)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	@ 0x28
 8004c3c:	af04      	add	r7, sp, #16
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	4603      	mov	r3, r0
 8004c42:	73fb      	strb	r3, [r7, #15]
 8004c44:	460b      	mov	r3, r1
 8004c46:	81bb      	strh	r3, [r7, #12]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&heval_I2c1,
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	b299      	uxth	r1, r3
 8004c54:	8978      	ldrh	r0, [r7, #10]
 8004c56:	89ba      	ldrh	r2, [r7, #12]
 8004c58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c5c:	9302      	str	r3, [sp, #8]
 8004c5e:	8c3b      	ldrh	r3, [r7, #32]
 8004c60:	9301      	str	r3, [sp, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	9300      	str	r3, [sp, #0]
 8004c66:	4603      	mov	r3, r0
 8004c68:	4808      	ldr	r0, [pc, #32]	@ (8004c8c <I2C1_ReadMultiple+0x54>)
 8004c6a:	f007 fcfb 	bl	800c664 <HAL_I2C_Mem_Read>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	75fb      	strb	r3, [r7, #23]
                        Buffer,
                        Length,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <I2C1_ReadMultiple+0x48>
  {
    /* I2C error occurred */
    I2C1_Error(Addr);
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 f860 	bl	8004d40 <I2C1_Error>
  }
  return status;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200083e0 	.word	0x200083e0

08004c90 <I2C2_ReadMultiple>:
static HAL_StatusTypeDef I2C2_ReadMultiple(uint8_t Addr,
                                       uint16_t Reg,
                                       uint16_t MemAddress,
                                       uint8_t *Buffer,
                                       uint16_t Length)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	@ 0x28
 8004c94:	af04      	add	r7, sp, #16
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	4603      	mov	r3, r0
 8004c9a:	73fb      	strb	r3, [r7, #15]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	81bb      	strh	r3, [r7, #12]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(&heval_I2c2,
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	b299      	uxth	r1, r3
 8004cac:	8978      	ldrh	r0, [r7, #10]
 8004cae:	89ba      	ldrh	r2, [r7, #12]
 8004cb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cb4:	9302      	str	r3, [sp, #8]
 8004cb6:	8c3b      	ldrh	r3, [r7, #32]
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	4808      	ldr	r0, [pc, #32]	@ (8004ce4 <I2C2_ReadMultiple+0x54>)
 8004cc2:	f007 fccf 	bl	800c664 <HAL_I2C_Mem_Read>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	75fb      	strb	r3, [r7, #23]
                        Buffer,
                        Length,
                        1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8004cca:	7dfb      	ldrb	r3, [r7, #23]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <I2C2_ReadMultiple+0x48>
  {
    /* I2C2 error occurred */
    I2C2_Error(Addr);
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f844 	bl	8004d60 <I2C2_Error>
  }
  return status;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	20008434 	.word	0x20008434

08004ce8 <I2C2_WriteMultiple>:
static HAL_StatusTypeDef I2C2_WriteMultiple(uint8_t Addr,
                                        uint16_t Reg,
                                        uint16_t MemAddress,
                                        uint8_t *Buffer,
                                        uint16_t Length)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af04      	add	r7, sp, #16
 8004cee:	607b      	str	r3, [r7, #4]
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	73fb      	strb	r3, [r7, #15]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	81bb      	strh	r3, [r7, #12]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(&heval_I2c2,
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	b299      	uxth	r1, r3
 8004d04:	8978      	ldrh	r0, [r7, #10]
 8004d06:	89ba      	ldrh	r2, [r7, #12]
 8004d08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d0c:	9302      	str	r3, [sp, #8]
 8004d0e:	8c3b      	ldrh	r3, [r7, #32]
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4603      	mov	r3, r0
 8004d18:	4808      	ldr	r0, [pc, #32]	@ (8004d3c <I2C2_WriteMultiple+0x54>)
 8004d1a:	f007 fba9 	bl	800c470 <HAL_I2C_Mem_Write>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	75fb      	strb	r3, [r7, #23]
                         Buffer,
                         Length,
                         1000);

  /* Check the communication status */
  if(status != HAL_OK)
 8004d22:	7dfb      	ldrb	r3, [r7, #23]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <I2C2_WriteMultiple+0x48>
  {
    /* Re-Initiaize the I2C2 Bus */
    I2C2_Error(Addr);
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f818 	bl	8004d60 <I2C2_Error>
  }
  return status;
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20008434 	.word	0x20008434

08004d40 <I2C1_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 8004d4a:	4804      	ldr	r0, [pc, #16]	@ (8004d5c <I2C1_Error+0x1c>)
 8004d4c:	f007 fb4c 	bl	800c3e8 <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C communication bus */
  I2C1_Init();
 8004d50:	f7ff feba 	bl	8004ac8 <I2C1_Init>
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	200083e0 	.word	0x200083e0

08004d60 <I2C2_Error>:

static void I2C2_Error(uint8_t Addr)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b082      	sub	sp, #8
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C2 communication bus */
  HAL_I2C_DeInit(&heval_I2c2);
 8004d6a:	4804      	ldr	r0, [pc, #16]	@ (8004d7c <I2C2_Error+0x1c>)
 8004d6c:	f007 fb3c 	bl	800c3e8 <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C2 communication bus */
  I2C2_Init();
 8004d70:	f7ff fedc 	bl	8004b2c <I2C2_Init>
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20008434 	.word	0x20008434

08004d80 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  I2C2_Init();
 8004d84:	f7ff fed2 	bl	8004b2c <I2C2_Init>
}
 8004d88:	bf00      	nop
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <AUDIO_IO_DeInit>:

/**
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0

}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af02      	add	r7, sp, #8
 8004da0:	4603      	mov	r3, r0
 8004da2:	71fb      	strb	r3, [r7, #7]
 8004da4:	460b      	mov	r3, r1
 8004da6:	71bb      	strb	r3, [r7, #6]
 8004da8:	4613      	mov	r3, r2
 8004daa:	717b      	strb	r3, [r7, #5]
  I2C2_WriteMultiple(Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
 8004dac:	79bb      	ldrb	r3, [r7, #6]
 8004dae:	b299      	uxth	r1, r3
 8004db0:	1d7b      	adds	r3, r7, #5
 8004db2:	79f8      	ldrb	r0, [r7, #7]
 8004db4:	2201      	movs	r2, #1
 8004db6:	9200      	str	r2, [sp, #0]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f7ff ff95 	bl	8004ce8 <I2C2_WriteMultiple>
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b086      	sub	sp, #24
 8004dca:	af02      	add	r7, sp, #8
 8004dcc:	4603      	mov	r3, r0
 8004dce:	460a      	mov	r2, r1
 8004dd0:	71fb      	strb	r3, [r7, #7]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	73fb      	strb	r3, [r7, #15]

  I2C2_ReadMultiple(Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004dda:	79bb      	ldrb	r3, [r7, #6]
 8004ddc:	b299      	uxth	r1, r3
 8004dde:	f107 030f 	add.w	r3, r7, #15
 8004de2:	79f8      	ldrb	r0, [r7, #7]
 8004de4:	2201      	movs	r2, #1
 8004de6:	9200      	str	r2, [sp, #0]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f7ff ff51 	bl	8004c90 <I2C2_ReadMultiple>

  return read_value;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <TS_IO_Init>:
/**
  * @brief  Initialize I2C communication
  *         channel from MCU to TouchScreen (TS).
  */
void TS_IO_Init(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  I2C1_Init();
 8004dfc:	f7ff fe64 	bl	8004ac8 <I2C1_Init>
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	71bb      	strb	r3, [r7, #6]
 8004e12:	4613      	mov	r3, r2
 8004e14:	717b      	strb	r3, [r7, #5]
  I2C1_Write(Addr, Reg, Value);
 8004e16:	797a      	ldrb	r2, [r7, #5]
 8004e18:	79b9      	ldrb	r1, [r7, #6]
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff feb7 	bl	8004b90 <I2C1_Write>
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	4603      	mov	r3, r0
 8004e32:	460a      	mov	r2, r1
 8004e34:	71fb      	strb	r3, [r7, #7]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71bb      	strb	r3, [r7, #6]
  return I2C1_Read(Addr, Reg);
 8004e3a:	79ba      	ldrb	r2, [r7, #6]
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff fecd 	bl	8004be0 <I2C1_Read>
 8004e46:	4603      	mov	r3, r0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	603a      	str	r2, [r7, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	71fb      	strb	r3, [r7, #7]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	71bb      	strb	r3, [r7, #6]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80bb      	strh	r3, [r7, #4]
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8004e66:	79bb      	ldrb	r3, [r7, #6]
 8004e68:	b299      	uxth	r1, r3
 8004e6a:	79f8      	ldrb	r0, [r7, #7]
 8004e6c:	88bb      	ldrh	r3, [r7, #4]
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f7ff fee0 	bl	8004c38 <I2C1_ReadMultiple>
 8004e78:	4603      	mov	r3, r0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f002 ff2e 	bl	8007cec <HAL_Delay>
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay: Delay in ms
  */
void NT35510_IO_Delay(uint32_t Delay)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f002 ff23 	bl	8007cec <HAL_Delay>
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <BSP_AUDIO_OUT_Init>:
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Init(uint16_t OutputDevice, 
                           uint8_t Volume, 
                           uint32_t AudioFreq)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	603a      	str	r2, [r7, #0]
 8004eba:	80fb      	strh	r3, [r7, #6]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	717b      	strb	r3, [r7, #5]
  uint8_t ret = AUDIO_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]

  SAIx_DeInit();
 8004ec4:	f000 faca 	bl	800545c <SAIx_DeInit>
  
  /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */ 
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	481e      	ldr	r0, [pc, #120]	@ (8004f48 <BSP_AUDIO_OUT_Init+0x98>)
 8004ece:	f000 fa1f 	bl	8005310 <BSP_AUDIO_OUT_ClockConfig>

  /* SAI data transfer preparation:
  Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
  haudio_out_sai.Instance = AUDIO_SAIx;
 8004ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f48 <BSP_AUDIO_OUT_Init+0x98>)
 8004ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f4c <BSP_AUDIO_OUT_Init+0x9c>)
 8004ed6:	601a      	str	r2, [r3, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8004ed8:	481b      	ldr	r0, [pc, #108]	@ (8004f48 <BSP_AUDIO_OUT_Init+0x98>)
 8004eda:	f00a fe87 	bl	800fbec <HAL_SAI_GetState>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d103      	bne.n	8004eec <BSP_AUDIO_OUT_Init+0x3c>
  {
    /* Init the SAI MSP: this __weak function can be redefined by the application*/
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4818      	ldr	r0, [pc, #96]	@ (8004f48 <BSP_AUDIO_OUT_Init+0x98>)
 8004ee8:	f000 f93e 	bl	8005168 <BSP_AUDIO_OUT_MspInit>
  }

  if (SAIx_Init(AudioFreq) != AUDIO_OK)
 8004eec:	6838      	ldr	r0, [r7, #0]
 8004eee:	f000 fa4b 	bl	8005388 <SAIx_Init>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <BSP_AUDIO_OUT_Init+0x4c>
  {
    ret = AUDIO_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10c      	bne.n	8004f1c <BSP_AUDIO_OUT_Init+0x6c>
  {
    /* Retrieve audio codec identifier */
    if (cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS) == CS43L22_ID)
 8004f02:	4b13      	ldr	r3, [pc, #76]	@ (8004f50 <BSP_AUDIO_OUT_Init+0xa0>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2094      	movs	r0, #148	@ 0x94
 8004f08:	4798      	blx	r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2be0      	cmp	r3, #224	@ 0xe0
 8004f0e:	d103      	bne.n	8004f18 <BSP_AUDIO_OUT_Init+0x68>
    {  
      /* Initialize the audio driver structure */
      audio_drv = &cs43l22_drv;
 8004f10:	4b10      	ldr	r3, [pc, #64]	@ (8004f54 <BSP_AUDIO_OUT_Init+0xa4>)
 8004f12:	4a0f      	ldr	r2, [pc, #60]	@ (8004f50 <BSP_AUDIO_OUT_Init+0xa0>)
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e001      	b.n	8004f1c <BSP_AUDIO_OUT_Init+0x6c>
    }
    else
    {
      ret = AUDIO_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
    }
  }

  if(ret == AUDIO_OK)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10c      	bne.n	8004f3c <BSP_AUDIO_OUT_Init+0x8c>
  {
    /* Initialize the audio codec internal registers */
    if (audio_drv->Init(AUDIO_I2C_ADDRESS,
 8004f22:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <BSP_AUDIO_OUT_Init+0xa4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681c      	ldr	r4, [r3, #0]
 8004f28:	797a      	ldrb	r2, [r7, #5]
 8004f2a:	88f9      	ldrh	r1, [r7, #6]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2094      	movs	r0, #148	@ 0x94
 8004f30:	47a0      	blx	r4
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <BSP_AUDIO_OUT_Init+0x8c>
                        OutputDevice, 
                        Volume, 
                        AudioFreq) != AUDIO_OK)
    {
      ret = AUDIO_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	bf00      	nop
 8004f48:	2000848c 	.word	0x2000848c
 8004f4c:	40015804 	.word	0x40015804
 8004f50:	20000030 	.word	0x20000030
 8004f54:	20008488 	.word	0x20008488

08004f58 <BSP_AUDIO_OUT_Play>:
  * @param  pBuffer: Pointer to the buffer
  * @param  Size: Number of audio data BYTES.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint8_t ret = AUDIO_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	73fb      	strb	r3, [r7, #15]

  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8004f66:	4b14      	ldr	r3, [pc, #80]	@ (8004fb8 <BSP_AUDIO_OUT_Play+0x60>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	2094      	movs	r0, #148	@ 0x94
 8004f74:	4798      	blx	r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <BSP_AUDIO_OUT_Play+0x28>
  {  
    ret = AUDIO_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Initiate a DMA transfer of PCM samples towards the serial audio interface */  
  if(ret == AUDIO_OK)
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d113      	bne.n	8004fae <BSP_AUDIO_OUT_Play+0x56>
  {
    if (HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE))!= HAL_OK)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f8c:	d203      	bcs.n	8004f96 <BSP_AUDIO_OUT_Play+0x3e>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	e001      	b.n	8004f9a <BSP_AUDIO_OUT_Play+0x42>
 8004f96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4807      	ldr	r0, [pc, #28]	@ (8004fbc <BSP_AUDIO_OUT_Play+0x64>)
 8004fa0:	f00a fd74 	bl	800fa8c <HAL_SAI_Transmit_DMA>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <BSP_AUDIO_OUT_Play+0x56>
    {
      ret = AUDIO_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
    }
  }
        
  return ret;
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20008488 	.word	0x20008488
 8004fbc:	2000848c 	.word	0x2000848c

08004fc0 <BSP_AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play()
  *          function for resume could lead to unexpected behavior).
  * @retval  AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Pause(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
  uint8_t ret = AUDIO_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	71fb      	strb	r3, [r7, #7]

  /* Call the Audio Codec Pause/Resume function */
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <BSP_AUDIO_OUT_Pause+0x40>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2094      	movs	r0, #148	@ 0x94
 8004fd2:	4798      	blx	r3
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <BSP_AUDIO_OUT_Pause+0x1e>
  {
    ret =  AUDIO_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	71fb      	strb	r3, [r7, #7]
  }
 
  /* Pause DMA transfer of PCM samples towards the serial audio interface */  
  if(ret == AUDIO_OK)
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d107      	bne.n	8004ff4 <BSP_AUDIO_OUT_Pause+0x34>
  {
    if (HAL_SAI_DMAPause(&haudio_out_sai)!= HAL_OK)
 8004fe4:	4807      	ldr	r0, [pc, #28]	@ (8005004 <BSP_AUDIO_OUT_Pause+0x44>)
 8004fe6:	f00a fc8a 	bl	800f8fe <HAL_SAI_DMAPause>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <BSP_AUDIO_OUT_Pause+0x34>
    {
      ret =  AUDIO_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return AUDIO_OK when all operations are correctly done */
  return ret;
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20008488 	.word	0x20008488
 8005004:	2000848c 	.word	0x2000848c

08005008 <BSP_AUDIO_OUT_Resume>:
  *          (use of BSP_AUDIO_OUT_Play() function for resume could lead to 
  *           unexpected behavior).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Resume(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
  uint8_t ret = AUDIO_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	71fb      	strb	r3, [r7, #7]

  /* Call the Audio Codec Pause/Resume function */
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8005012:	4b0d      	ldr	r3, [pc, #52]	@ (8005048 <BSP_AUDIO_OUT_Resume+0x40>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	2094      	movs	r0, #148	@ 0x94
 800501a:	4798      	blx	r3
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <BSP_AUDIO_OUT_Resume+0x1e>
  {
    ret =  AUDIO_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	71fb      	strb	r3, [r7, #7]
  }

  /* Resume DMA transfer of PCM samples towards the serial audio interface */  
  if(ret == AUDIO_OK)
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d107      	bne.n	800503c <BSP_AUDIO_OUT_Resume+0x34>
  {
    if (HAL_SAI_DMAResume(&haudio_out_sai)!= HAL_OK)
 800502c:	4807      	ldr	r0, [pc, #28]	@ (800504c <BSP_AUDIO_OUT_Resume+0x44>)
 800502e:	f00a fc88 	bl	800f942 <HAL_SAI_DMAResume>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d001      	beq.n	800503c <BSP_AUDIO_OUT_Resume+0x34>
    {
      ret =  AUDIO_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	71fb      	strb	r3, [r7, #7]
    }
  }

  /* Return AUDIO_OK when all operations are correctly done */
  return ret;
 800503c:	79fb      	ldrb	r3, [r7, #7]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20008488 	.word	0x20008488
 800504c:	2000848c 	.word	0x2000848c

08005050 <BSP_AUDIO_OUT_Stop>:
  *           - CODEC_PDWN_HW: completely shut down the codec (physically).
  *                            Then need to reconfigure the Codec after power on.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Stop(uint32_t Option)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint8_t ret = AUDIO_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	73fb      	strb	r3, [r7, #15]

 /* Call Audio Codec Stop function */
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 800505c:	4b10      	ldr	r3, [pc, #64]	@ (80050a0 <BSP_AUDIO_OUT_Stop+0x50>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	2094      	movs	r0, #148	@ 0x94
 8005066:	4798      	blx	r3
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <BSP_AUDIO_OUT_Stop+0x22>
  {
    ret = AUDIO_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == AUDIO_OK)
 8005072:	7bfb      	ldrb	r3, [r7, #15]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10d      	bne.n	8005094 <BSP_AUDIO_OUT_Stop+0x44>
  {
    if(Option == CODEC_PDWN_HW)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d102      	bne.n	8005084 <BSP_AUDIO_OUT_Stop+0x34>
    {
      /* Wait at least 100us */
      HAL_Delay(2);
 800507e:	2002      	movs	r0, #2
 8005080:	f002 fe34 	bl	8007cec <HAL_Delay>
    }

    /* Stop DMA transfer of PCM samples towards the serial audio interface */  
    if (HAL_SAI_DMAStop(&haudio_out_sai)!= HAL_OK)
 8005084:	4807      	ldr	r0, [pc, #28]	@ (80050a4 <BSP_AUDIO_OUT_Stop+0x54>)
 8005086:	f00a fc8d 	bl	800f9a4 <HAL_SAI_DMAStop>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <BSP_AUDIO_OUT_Stop+0x44>
    {
      ret = AUDIO_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return AUDIO_OK when all operations are correctly done */
  return ret;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20008488 	.word	0x20008488
 80050a4:	2000848c 	.word	0x2000848c

080050a8 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = AUDIO_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]

  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80050b6:	4b08      	ldr	r3, [pc, #32]	@ (80050d8 <BSP_AUDIO_OUT_SetVolume+0x30>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	79fa      	ldrb	r2, [r7, #7]
 80050be:	4611      	mov	r1, r2
 80050c0:	2094      	movs	r0, #148	@ 0x94
 80050c2:	4798      	blx	r3
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <BSP_AUDIO_OUT_SetVolume+0x26>
  {
    ret =  AUDIO_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return AUDIO_OK when all operations are correctly done */
  return ret;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20008488 	.word	0x20008488

080050dc <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  *         This parameter can be any value of @ref CODEC_AudioFrame_SLOT_TDMMode
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005118 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050f2:	601a      	str	r2, [r3, #0]

  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 80050f4:	4a08      	ldr	r2, [pc, #32]	@ (8005118 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6653      	str	r3, [r2, #100]	@ 0x64
  HAL_SAI_Init(&haudio_out_sai);
 80050fa:	4807      	ldr	r0, [pc, #28]	@ (8005118 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80050fc:	f00a fa8e 	bl	800f61c <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8005100:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800510e:	601a      	str	r2, [r3, #0]
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	2000848c 	.word	0x2000848c

0800511c <HAL_SAI_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32469i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8005124:	f7fd f854 	bl	80021d0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_SAI_TxHalfCpltCallback>:
/**
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32469i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8005138:	f7fd f85e 	bl	80021f8 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_SAI_ErrorCallback>:
/**
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 800514c:	f000 f804 	bl	8005158 <BSP_AUDIO_OUT_Error_CallBack>
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <BSP_AUDIO_OUT_MspInit>:
  * @brief  Initializes BSP_AUDIO_OUT MSP.
  * @param  hsai: SAI handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08c      	sub	sp, #48	@ 0x30
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;

  /* Put CS43L2 codec reset high -----------------------------------*/
  AUDIO_RESET_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	4b60      	ldr	r3, [pc, #384]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 8005178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517a:	4a5f      	ldr	r2, [pc, #380]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 800517c:	f043 0310 	orr.w	r3, r3, #16
 8005180:	6313      	str	r3, [r2, #48]	@ 0x30
 8005182:	4b5d      	ldr	r3, [pc, #372]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 8005184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	69bb      	ldr	r3, [r7, #24]
  gpio_init_structure.Pin =  AUDIO_RESET_PIN;
 800518e:	2304      	movs	r3, #4
 8005190:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8005192:	2301      	movs	r3, #1
 8005194:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800519a:	2303      	movs	r3, #3
 800519c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_RESET_GPIO_PORT, &gpio_init_structure);
 800519e:	f107 031c 	add.w	r3, r7, #28
 80051a2:	4619      	mov	r1, r3
 80051a4:	4855      	ldr	r0, [pc, #340]	@ (80052fc <BSP_AUDIO_OUT_MspInit+0x194>)
 80051a6:	f004 fc8b 	bl	8009ac0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO_PORT, AUDIO_RESET_PIN, GPIO_PIN_SET);
 80051aa:	2201      	movs	r2, #1
 80051ac:	2104      	movs	r1, #4
 80051ae:	4853      	ldr	r0, [pc, #332]	@ (80052fc <BSP_AUDIO_OUT_MspInit+0x194>)
 80051b0:	f004 fe4a 	bl	8009e48 <HAL_GPIO_WritePin>

  /* Enable SAI clock */
  AUDIO_SAIx_CLK_ENABLE();
 80051b4:	2300      	movs	r3, #0
 80051b6:	617b      	str	r3, [r7, #20]
 80051b8:	4b4f      	ldr	r3, [pc, #316]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 80051ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051bc:	4a4e      	ldr	r2, [pc, #312]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 80051be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80051c4:	4b4c      	ldr	r3, [pc, #304]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 80051c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIO clock */
  AUDIO_SAIx_MCLK_ENABLE();
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	4b48      	ldr	r3, [pc, #288]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 80051d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d8:	4a47      	ldr	r2, [pc, #284]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 80051da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051de:	6313      	str	r3, [r2, #48]	@ 0x30
 80051e0:	4b45      	ldr	r3, [pc, #276]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 80051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	693b      	ldr	r3, [r7, #16]
  AUDIO_SAIx_SCK_SD_FS_ENABLE();
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	4b41      	ldr	r3, [pc, #260]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 80051f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f4:	4a40      	ldr	r2, [pc, #256]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 80051f6:	f043 0310 	orr.w	r3, r3, #16
 80051fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80051fc:	4b3e      	ldr	r3, [pc, #248]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]

  /* CODEC_SAI pins configuration: MCK pin -----------------------------------*/
  gpio_init_structure.Pin =  AUDIO_SAIx_MCK_PIN;
 8005208:	2380      	movs	r3, #128	@ 0x80
 800520a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800520c:	2302      	movs	r3, #2
 800520e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005214:	2303      	movs	r3, #3
 8005216:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_SAIx_MCLK_SCK_SD_FS_AF;
 8005218:	2306      	movs	r3, #6
 800521a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800521c:	f107 031c 	add.w	r3, r7, #28
 8005220:	4619      	mov	r1, r3
 8005222:	4837      	ldr	r0, [pc, #220]	@ (8005300 <BSP_AUDIO_OUT_MspInit+0x198>)
 8005224:	f004 fc4c 	bl	8009ac0 <HAL_GPIO_Init>

  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_SAIx_FS_PIN | AUDIO_SAIx_SCK_PIN | AUDIO_SAIx_SD_PIN;
 8005228:	2370      	movs	r3, #112	@ 0x70
 800522a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800522c:	2302      	movs	r3, #2
 800522e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005234:	2303      	movs	r3, #3
 8005236:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_SAIx_MCLK_SCK_SD_FS_AF;
 8005238:	2306      	movs	r3, #6
 800523a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_SAIx_SCK_SD_FS_GPIO_PORT, &gpio_init_structure);
 800523c:	f107 031c 	add.w	r3, r7, #28
 8005240:	4619      	mov	r1, r3
 8005242:	482e      	ldr	r0, [pc, #184]	@ (80052fc <BSP_AUDIO_OUT_MspInit+0x194>)
 8005244:	f004 fc3c 	bl	8009ac0 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_SAIx_DMAx_CLK_ENABLE();
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	4b2a      	ldr	r3, [pc, #168]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 800524e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005250:	4a29      	ldr	r2, [pc, #164]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 8005252:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005256:	6313      	str	r3, [r2, #48]	@ 0x30
 8005258:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <BSP_AUDIO_OUT_MspInit+0x190>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800525c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	68bb      	ldr	r3, [r7, #8]

  if(hsai->Instance == AUDIO_SAIx)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a26      	ldr	r2, [pc, #152]	@ (8005304 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d137      	bne.n	80052de <BSP_AUDIO_OUT_MspInit+0x176>
  {
    /* Configure the hdma_saiTx handle parameters */
    hdma_sai_tx.Init.Channel             = AUDIO_SAIx_DMAx_CHANNEL;
 800526e:	4b26      	ldr	r3, [pc, #152]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8005270:	2200      	movs	r2, #0
 8005272:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8005274:	4b24      	ldr	r3, [pc, #144]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8005276:	2240      	movs	r2, #64	@ 0x40
 8005278:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800527a:	4b23      	ldr	r3, [pc, #140]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 800527c:	2200      	movs	r2, #0
 800527e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8005280:	4b21      	ldr	r3, [pc, #132]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8005282:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005286:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_SAIx_DMAx_PERIPH_DATA_SIZE;
 8005288:	4b1f      	ldr	r3, [pc, #124]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 800528a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800528e:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_SAIx_DMAx_MEM_DATA_SIZE;
 8005290:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8005292:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005296:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8005298:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 800529a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800529e:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80052a0:	4b19      	ldr	r3, [pc, #100]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052a6:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80052a8:	4b17      	ldr	r3, [pc, #92]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052aa:	2204      	movs	r2, #4
 80052ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80052ae:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052b0:	2203      	movs	r2, #3
 80052b2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80052b4:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80052ba:	4b13      	ldr	r3, [pc, #76]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_tx.Instance = AUDIO_SAIx_DMAx_STREAM;
 80052c0:	4b11      	ldr	r3, [pc, #68]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052c2:	4a12      	ldr	r2, [pc, #72]	@ (800530c <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80052c4:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052ca:	671a      	str	r2, [r3, #112]	@ 0x70
 80052cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80052d2:	480d      	ldr	r0, [pc, #52]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052d4:	f002 feee 	bl	80080b4 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);
 80052d8:	480b      	ldr	r0, [pc, #44]	@ (8005308 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80052da:	f002 fe3d 	bl	8007f58 <HAL_DMA_Init>
  }

  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80052de:	2200      	movs	r2, #0
 80052e0:	2105      	movs	r1, #5
 80052e2:	203b      	movs	r0, #59	@ 0x3b
 80052e4:	f002 fe01 	bl	8007eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_SAIx_DMAx_IRQ);
 80052e8:	203b      	movs	r0, #59	@ 0x3b
 80052ea:	f002 fe1a 	bl	8007f22 <HAL_NVIC_EnableIRQ>

}
 80052ee:	bf00      	nop
 80052f0:	3730      	adds	r7, #48	@ 0x30
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800
 80052fc:	40021000 	.word	0x40021000
 8005300:	40021800 	.word	0x40021800
 8005304:	40015804 	.word	0x40015804
 8005308:	20008648 	.word	0x20008648
 800530c:	40026458 	.word	0x40026458

08005310 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8005310:	b580      	push	{r7, lr}
 8005312:	b094      	sub	sp, #80	@ 0x50
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	4618      	mov	r0, r3
 8005322:	f009 fe15 	bl	800ef50 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800532c:	4293      	cmp	r3, r2
 800532e:	d009      	beq.n	8005344 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f245 6222 	movw	r2, #22050	@ 0x5622
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8005340:	4293      	cmp	r3, r2
 8005342:	d10e      	bne.n	8005362 <BSP_AUDIO_OUT_ClockConfig+0x52>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLI2S;
 8005344:	2302      	movs	r3, #2
 8005346:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8005348:	f240 13ad 	movw	r3, #429	@ 0x1ad
 800534c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800534e:	2302      	movs	r3, #2
 8005350:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8005352:	2313      	movs	r3, #19
 8005354:	637b      	str	r3, [r7, #52]	@ 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005356:	f107 0314 	add.w	r3, r7, #20
 800535a:	4618      	mov	r0, r3
 800535c:	f009 fbba 	bl	800ead4 <HAL_RCCEx_PeriphCLKConfig>
 8005360:	e00e      	b.n	8005380 <BSP_AUDIO_OUT_ClockConfig+0x70>
  {
    /* SAI clock config 
    PLLSAI_VCO: VCO_344M 
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz 
    I2S_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */  
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLI2S;
 8005362:	2302      	movs	r3, #2
 8005364:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344; 
 8005366:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800536a:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7; 
 800536c:	2307      	movs	r3, #7
 800536e:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;       
 8005370:	2301      	movs	r3, #1
 8005372:	637b      	str	r3, [r7, #52]	@ 0x34
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	4618      	mov	r0, r3
 800537a:	f009 fbab 	bl	800ead4 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800537e:	bf00      	nop
 8005380:	bf00      	nop
 8005382:	3750      	adds	r7, #80	@ 0x50
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <SAIx_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @note   The default SlotActive configuration is set to CODEC_AUDIOFRAME_SLOT_0123
  *         and user can update this configuration using
  */
static uint8_t SAIx_Init(uint32_t AudioFreq)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint8_t ret = AUDIO_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	73fb      	strb	r3, [r7, #15]

  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_SAIx;
 8005394:	4b2f      	ldr	r3, [pc, #188]	@ (8005454 <SAIx_Init+0xcc>)
 8005396:	4a30      	ldr	r2, [pc, #192]	@ (8005458 <SAIx_Init+0xd0>)
 8005398:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800539a:	4b2e      	ldr	r3, [pc, #184]	@ (8005454 <SAIx_Init+0xcc>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005454 <SAIx_Init+0xcc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80053a8:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80053aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005454 <SAIx_Init+0xcc>)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6213      	str	r3, [r2, #32]
  haudio_out_sai.Init.ClockSource = SAI_CLKSOURCE_PLLI2S;
 80053b0:	4b28      	ldr	r3, [pc, #160]	@ (8005454 <SAIx_Init+0xcc>)
 80053b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80053b6:	61da      	str	r2, [r3, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80053b8:	4b26      	ldr	r3, [pc, #152]	@ (8005454 <SAIx_Init+0xcc>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	605a      	str	r2, [r3, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80053be:	4b25      	ldr	r3, [pc, #148]	@ (8005454 <SAIx_Init+0xcc>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80053c4:	4b23      	ldr	r3, [pc, #140]	@ (8005454 <SAIx_Init+0xcc>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	635a      	str	r2, [r3, #52]	@ 0x34
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80053ca:	4b22      	ldr	r3, [pc, #136]	@ (8005454 <SAIx_Init+0xcc>)
 80053cc:	2280      	movs	r2, #128	@ 0x80
 80053ce:	639a      	str	r2, [r3, #56]	@ 0x38
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80053d0:	4b20      	ldr	r3, [pc, #128]	@ (8005454 <SAIx_Init+0xcc>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80053d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005454 <SAIx_Init+0xcc>)
 80053d8:	2200      	movs	r2, #0
 80053da:	641a      	str	r2, [r3, #64]	@ 0x40
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80053dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005454 <SAIx_Init+0xcc>)
 80053de:	2200      	movs	r2, #0
 80053e0:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80053e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005454 <SAIx_Init+0xcc>)
 80053e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80053e8:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80053ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005454 <SAIx_Init+0xcc>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 80053f0:	4b18      	ldr	r3, [pc, #96]	@ (8005454 <SAIx_Init+0xcc>)
 80053f2:	2240      	movs	r2, #64	@ 0x40
 80053f4:	645a      	str	r2, [r3, #68]	@ 0x44
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80053f6:	4b17      	ldr	r3, [pc, #92]	@ (8005454 <SAIx_Init+0xcc>)
 80053f8:	2220      	movs	r2, #32
 80053fa:	649a      	str	r2, [r3, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80053fc:	4b15      	ldr	r3, [pc, #84]	@ (8005454 <SAIx_Init+0xcc>)
 80053fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005402:	64da      	str	r2, [r3, #76]	@ 0x4c
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005404:	4b13      	ldr	r3, [pc, #76]	@ (8005454 <SAIx_Init+0xcc>)
 8005406:	2200      	movs	r2, #0
 8005408:	651a      	str	r2, [r3, #80]	@ 0x50
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800540a:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <SAIx_Init+0xcc>)
 800540c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <SAIx_Init+0xcc>)
 8005414:	2200      	movs	r2, #0
 8005416:	659a      	str	r2, [r3, #88]	@ 0x58
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005418:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <SAIx_Init+0xcc>)
 800541a:	2200      	movs	r2, #0
 800541c:	65da      	str	r2, [r3, #92]	@ 0x5c
  haudio_out_sai.SlotInit.SlotNumber = 4;
 800541e:	4b0d      	ldr	r3, [pc, #52]	@ (8005454 <SAIx_Init+0xcc>)
 8005420:	2204      	movs	r2, #4
 8005422:	661a      	str	r2, [r3, #96]	@ 0x60
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8005424:	4b0b      	ldr	r3, [pc, #44]	@ (8005454 <SAIx_Init+0xcc>)
 8005426:	220f      	movs	r2, #15
 8005428:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initializes the SAI peripheral*/
  if (HAL_SAI_Init(&haudio_out_sai) != HAL_OK)
 800542a:	480a      	ldr	r0, [pc, #40]	@ (8005454 <SAIx_Init+0xcc>)
 800542c:	f00a f8f6 	bl	800f61c <HAL_SAI_Init>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <SAIx_Init+0xb2>
  {
    ret = AUDIO_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800543a:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <SAIx_Init+0xcc>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <SAIx_Init+0xcc>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005448:	601a      	str	r2, [r3, #0]

  return ret;
 800544a:	7bfb      	ldrb	r3, [r7, #15]

}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	2000848c 	.word	0x2000848c
 8005458:	40015804 	.word	0x40015804

0800545c <SAIx_DeInit>:

/**
  * @brief  Deinitializes the Audio Codec audio interface (SAI).
  */
static void SAIx_DeInit(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* Initialize the hAudioOutSai Instance parameter */
  haudio_out_sai.Instance = AUDIO_SAIx;
 8005460:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <SAIx_DeInit+0x24>)
 8005462:	4a08      	ldr	r2, [pc, #32]	@ (8005484 <SAIx_DeInit+0x28>)
 8005464:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8005466:	4b06      	ldr	r3, [pc, #24]	@ (8005480 <SAIx_DeInit+0x24>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	4b04      	ldr	r3, [pc, #16]	@ (8005480 <SAIx_DeInit+0x24>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005474:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8005476:	4802      	ldr	r0, [pc, #8]	@ (8005480 <SAIx_DeInit+0x24>)
 8005478:	f00a f9f8 	bl	800f86c <HAL_SAI_DeInit>
}
 800547c:	bf00      	nop
 800547e:	bd80      	pop	{r7, pc}
 8005480:	2000848c 	.word	0x2000848c
 8005484:	40015804 	.word	0x40015804

08005488 <BSP_AUDIO_IN_Init>:
  * @param  BitRes: Audio frequency to be configured for the I2S peripheral.
  * @param  ChnlNbr: Audio frequency to be configured for the I2S peripheral.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  /* DeInit the I2S */
  I2Sx_DeInit();
 8005494:	f000 fae4 	bl	8005a60 <I2Sx_DeInit>

  /* Configure PLL clock */ 
  BSP_AUDIO_IN_ClockConfig(&haudio_in_i2s, NULL);
 8005498:	2100      	movs	r1, #0
 800549a:	480e      	ldr	r0, [pc, #56]	@ (80054d4 <BSP_AUDIO_IN_Init+0x4c>)
 800549c:	f000 f93a 	bl	8005714 <BSP_AUDIO_IN_ClockConfig>

  /* Configure the PDM library */
  PDMDecoder_Init(AudioFreq, ChnlNbr, ChnlNbr);
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 fa05 	bl	80058b4 <PDMDecoder_Init>
 
  /* Configure the I2S peripheral */
  haudio_in_i2s.Instance = AUDIO_I2Sx;
 80054aa:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <BSP_AUDIO_IN_Init+0x4c>)
 80054ac:	4a0a      	ldr	r2, [pc, #40]	@ (80054d8 <BSP_AUDIO_IN_Init+0x50>)
 80054ae:	601a      	str	r2, [r3, #0]
  if(HAL_I2S_GetState(&haudio_in_i2s) == HAL_I2S_STATE_RESET)
 80054b0:	4808      	ldr	r0, [pc, #32]	@ (80054d4 <BSP_AUDIO_IN_Init+0x4c>)
 80054b2:	f008 fa0f 	bl	800d8d4 <HAL_I2S_GetState>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d103      	bne.n	80054c4 <BSP_AUDIO_IN_Init+0x3c>
  { 
    /* Initialize the I2S Msp: this __weak function can be rewritten by the application */
    BSP_AUDIO_IN_MspInit(&haudio_in_i2s, NULL);
 80054bc:	2100      	movs	r1, #0
 80054be:	4805      	ldr	r0, [pc, #20]	@ (80054d4 <BSP_AUDIO_IN_Init+0x4c>)
 80054c0:	f000 f94a 	bl	8005758 <BSP_AUDIO_IN_MspInit>
  }

  I2Sx_Init(AudioFreq);
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fa91 	bl	80059ec <I2Sx_Init>

  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	20008514 	.word	0x20008514
 80054d8:	40003c00 	.word	0x40003c00

080054dc <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&haudio_in_i2s, pbuf, size);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4805      	ldr	r0, [pc, #20]	@ (8005508 <BSP_AUDIO_IN_Record+0x2c>)
 80054f4:	f008 f836 	bl	800d564 <HAL_I2S_Receive_DMA>

  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]

  return ret;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	b2db      	uxtb	r3, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	20008514 	.word	0x20008514

0800550c <BSP_AUDIO_IN_Stop>:
/**
  * @brief  Stops audio recording.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
  uint32_t ret = AUDIO_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	607b      	str	r3, [r7, #4]

  /* Call the Media layer pause function */
  HAL_I2S_DMAPause(&haudio_in_i2s);
 8005516:	4808      	ldr	r0, [pc, #32]	@ (8005538 <BSP_AUDIO_IN_Stop+0x2c>)
 8005518:	f008 f8dc 	bl	800d6d4 <HAL_I2S_DMAPause>

  /* TIMx Peripheral clock disable */
  AUDIO_TIMx_CLK_DISABLE();
 800551c:	4b07      	ldr	r3, [pc, #28]	@ (800553c <BSP_AUDIO_IN_Stop+0x30>)
 800551e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005520:	4a06      	ldr	r2, [pc, #24]	@ (800553c <BSP_AUDIO_IN_Stop+0x30>)
 8005522:	f023 0304 	bic.w	r3, r3, #4
 8005526:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	607b      	str	r3, [r7, #4]

  return ret;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	b2db      	uxtb	r3, r3
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20008514 	.word	0x20008514
 800553c:	40023800 	.word	0x40023800

08005540 <BSP_AUDIO_IN_Pause>:
/**
  * @brief  Pauses the audio file stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Pause(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Call the Media layer pause function */
  HAL_I2S_DMAPause(&haudio_in_i2s);
 8005544:	4802      	ldr	r0, [pc, #8]	@ (8005550 <BSP_AUDIO_IN_Pause+0x10>)
 8005546:	f008 f8c5 	bl	800d6d4 <HAL_I2S_DMAPause>

  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20008514 	.word	0x20008514

08005554 <BSP_AUDIO_IN_Resume>:
/**
  * @brief  Resumes the audio file stream.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Resume(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  /* Call the Media layer pause/resume function */
  HAL_I2S_DMAResume(&haudio_in_i2s);
 8005558:	4802      	ldr	r0, [pc, #8]	@ (8005564 <BSP_AUDIO_IN_Resume+0x10>)
 800555a:	f008 f91d 	bl	800d798 <HAL_I2S_DMAResume>

  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20008514 	.word	0x20008514

08005568 <BSP_AUDIO_IN_SetVolume>:
  * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
  *         Mute and 100 for Max volume level).
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_SetVolume(uint8_t Volume)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	71fb      	strb	r3, [r7, #7]
  /* Set the Global variable AudioInVolume  */
  AudioInVolume = Volume;
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	b29a      	uxth	r2, r3
 8005576:	4b04      	ldr	r3, [pc, #16]	@ (8005588 <BSP_AUDIO_IN_SetVolume+0x20>)
 8005578:	801a      	strh	r2, [r3, #0]

  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	20000130 	.word	0x20000130

0800558c <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t* PDMBuf, uint16_t* PCMBuf)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8005592:	af00      	add	r7, sp, #0
 8005594:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8005598:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800559c:	6018      	str	r0, [r3, #0]
 800559e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80055a2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80055a6:	6019      	str	r1, [r3, #0]
  uint8_t app_pdm[INTERNAL_BUFF_SIZE*2];
  uint8_t byte1 = 0, byte2 = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
 80055ae:	2300      	movs	r3, #0
 80055b0:	f887 320a 	strb.w	r3, [r7, #522]	@ 0x20a
  uint32_t index = 0;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80055ba:	2300      	movs	r3, #0
 80055bc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80055c0:	e057      	b.n	8005672 <BSP_AUDIO_IN_PDMToPCM+0xe6>
  {
    byte2 = (PDMBuf[index] >> 8)& 0xFF;
 80055c2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80055cc:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80055d0:	6812      	ldr	r2, [r2, #0]
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	b29b      	uxth	r3, r3
 80055da:	f887 320a 	strb.w	r3, [r7, #522]	@ 0x20a
    byte1 = (PDMBuf[index] & 0xFF);
 80055de:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80055e8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    app_pdm[(index*2)+1] = Channel_Demux[byte1 & CHANNEL_DEMUX_MASK] | Channel_Demux[byte2 & CHANNEL_DEMUX_MASK] << 4;
 80055f6:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 80055fa:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 80055fe:	4a34      	ldr	r2, [pc, #208]	@ (80056d0 <BSP_AUDIO_IN_PDMToPCM+0x144>)
 8005600:	5cd3      	ldrb	r3, [r2, r3]
 8005602:	b25a      	sxtb	r2, r3
 8005604:	f897 320a 	ldrb.w	r3, [r7, #522]	@ 0x20a
 8005608:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 800560c:	4930      	ldr	r1, [pc, #192]	@ (80056d0 <BSP_AUDIO_IN_PDMToPCM+0x144>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	b25b      	sxtb	r3, r3
 8005614:	4313      	orrs	r3, r2
 8005616:	b25a      	sxtb	r2, r3
 8005618:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	3301      	adds	r3, #1
 8005620:	b2d1      	uxtb	r1, r2
 8005622:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8005626:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 800562a:	54d1      	strb	r1, [r2, r3]
    app_pdm[(index*2)] = Channel_Demux[(byte1 >> 1) & CHANNEL_DEMUX_MASK] | Channel_Demux[(byte2 >> 1) & CHANNEL_DEMUX_MASK] << 4;
 800562c:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8005630:	085b      	lsrs	r3, r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 8005638:	4a25      	ldr	r2, [pc, #148]	@ (80056d0 <BSP_AUDIO_IN_PDMToPCM+0x144>)
 800563a:	5cd3      	ldrb	r3, [r2, r3]
 800563c:	b25a      	sxtb	r2, r3
 800563e:	f897 320a 	ldrb.w	r3, [r7, #522]	@ 0x20a
 8005642:	085b      	lsrs	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 0355 	and.w	r3, r3, #85	@ 0x55
 800564a:	4921      	ldr	r1, [pc, #132]	@ (80056d0 <BSP_AUDIO_IN_PDMToPCM+0x144>)
 800564c:	5ccb      	ldrb	r3, [r1, r3]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	b25b      	sxtb	r3, r3
 8005652:	4313      	orrs	r3, r2
 8005654:	b25a      	sxtb	r2, r3
 8005656:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	b2d1      	uxtb	r1, r2
 800565e:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8005662:	f5a2 7202 	sub.w	r2, r2, #520	@ 0x208
 8005666:	54d1      	strb	r1, [r2, r3]
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8005668:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800566c:	3301      	adds	r3, #1
 800566e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8005672:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8005676:	2b7f      	cmp	r3, #127	@ 0x7f
 8005678:	d9a3      	bls.n	80055c2 <BSP_AUDIO_IN_PDMToPCM+0x36>
  }

  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
 800567a:	2300      	movs	r3, #0
 800567c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8005680:	e01c      	b.n	80056bc <BSP_AUDIO_IN_PDMToPCM+0x130>
  {
    /* PDM to PCM filter */
    PDM_Filter((uint8_t*)&app_pdm[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8005682:	f107 0208 	add.w	r2, r7, #8
 8005686:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800568a:	18d0      	adds	r0, r2, r3
 800568c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8005696:	f5a2 7204 	sub.w	r2, r2, #528	@ 0x210
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	18d1      	adds	r1, r2, r3
 800569e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80056a2:	224c      	movs	r2, #76	@ 0x4c
 80056a4:	fb02 f303 	mul.w	r3, r2, r3
 80056a8:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <BSP_AUDIO_IN_PDMToPCM+0x148>)
 80056aa:	4413      	add	r3, r2
 80056ac:	461a      	mov	r2, r3
 80056ae:	f015 fc51 	bl	801af54 <PDM_Filter>
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
 80056b2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80056b6:	3301      	adds	r3, #1
 80056b8:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80056bc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d9de      	bls.n	8005682 <BSP_AUDIO_IN_PDMToPCM+0xf6>
  }

  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	200000b0 	.word	0x200000b0
 80056d4:	200085a4 	.word	0x200085a4

080056d8 <HAL_I2S_RxCpltCallback>:
 /**
  * @brief  Rx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80056e0:	f7fd fc34 	bl	8002f4c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80056e4:	bf00      	nop
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_I2S_RxHalfCpltCallback>:
/**
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32469i_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80056f4:	f7fd fc7e 	bl	8002ff4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function
     should be coded by user (its prototype is already declared in stm32469i_discovery_audio.h) */
  BSP_AUDIO_IN_Error_Callback();
 8005708:	f000 f81e 	bl	8005748 <BSP_AUDIO_IN_Error_Callback>
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, void *Params)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b092      	sub	sp, #72	@ 0x48
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  RCC_PeriphCLKInitTypeDef RCC_ExCLKInitStruct;
  
  HAL_RCCEx_GetPeriphCLKConfig(&RCC_ExCLKInitStruct);
 800571e:	f107 030c 	add.w	r3, r7, #12
 8005722:	4618      	mov	r0, r3
 8005724:	f009 fc14 	bl	800ef50 <HAL_RCCEx_GetPeriphCLKConfig>
  RCC_ExCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8005728:	2301      	movs	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
  RCC_ExCLKInitStruct.PLLI2S.PLLI2SN = 384;
 800572c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8005730:	613b      	str	r3, [r7, #16]
  RCC_ExCLKInitStruct.PLLI2S.PLLI2SR = 2;
 8005732:	2302      	movs	r3, #2
 8005734:	617b      	str	r3, [r7, #20]
  HAL_RCCEx_PeriphCLKConfig(&RCC_ExCLKInitStruct); 
 8005736:	f107 030c 	add.w	r3, r7, #12
 800573a:	4618      	mov	r0, r3
 800573c:	f009 f9ca 	bl	800ead4 <HAL_RCCEx_PeriphCLKConfig>
}
 8005740:	bf00      	nop
 8005742:	3748      	adds	r7, #72	@ 0x48
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08c      	sub	sp, #48	@ 0x30
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_i2s_rx;
  GPIO_InitTypeDef  gpio_init_structure;

  /* Configure the Timer which clocks the MEMS */
  /* Moved inside MSP to allow applic to redefine the TIMx_MspInit */
  TIMx_Init();
 8005762:	f000 f9d5 	bl	8005b10 <TIMx_Init>
  
  /* Enable I2S clock */
  AUDIO_I2Sx_CLK_ENABLE();
 8005766:	2300      	movs	r3, #0
 8005768:	61bb      	str	r3, [r7, #24]
 800576a:	4b4c      	ldr	r3, [pc, #304]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576e:	4a4b      	ldr	r2, [pc, #300]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 8005770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005774:	6413      	str	r3, [r2, #64]	@ 0x40
 8005776:	4b49      	ldr	r3, [pc, #292]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800577e:	61bb      	str	r3, [r7, #24]
 8005780:	69bb      	ldr	r3, [r7, #24]

  /* Enable SCK and SD GPIO clock */
  AUDIO_I2Sx_SD_GPIO_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	4b45      	ldr	r3, [pc, #276]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578a:	4a44      	ldr	r2, [pc, #272]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 800578c:	f043 0308 	orr.w	r3, r3, #8
 8005790:	6313      	str	r3, [r2, #48]	@ 0x30
 8005792:	4b42      	ldr	r3, [pc, #264]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 8005794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	697b      	ldr	r3, [r7, #20]
  AUDIO_I2Sx_SCK_GPIO_CLK_ENABLE();
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	4b3e      	ldr	r3, [pc, #248]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a6:	4a3d      	ldr	r2, [pc, #244]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 80057a8:	f043 0302 	orr.w	r3, r3, #2
 80057ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80057ae:	4b3b      	ldr	r3, [pc, #236]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	693b      	ldr	r3, [r7, #16]
  /* CODEC_I2S pins configuration: SCK and SD pins */
  gpio_init_structure.Pin = AUDIO_I2Sx_SCK_PIN;
 80057ba:	2308      	movs	r3, #8
 80057bc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80057be:	2302      	movs	r3, #2
 80057c0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80057c6:	2302      	movs	r3, #2
 80057c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = AUDIO_I2Sx_SCK_AF;
 80057ca:	2306      	movs	r3, #6
 80057cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_I2Sx_SCK_GPIO_PORT, &gpio_init_structure);
 80057ce:	f107 031c 	add.w	r3, r7, #28
 80057d2:	4619      	mov	r1, r3
 80057d4:	4832      	ldr	r0, [pc, #200]	@ (80058a0 <BSP_AUDIO_IN_MspInit+0x148>)
 80057d6:	f004 f973 	bl	8009ac0 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_I2Sx_SD_PIN;
 80057da:	2340      	movs	r3, #64	@ 0x40
 80057dc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = AUDIO_I2Sx_SD_AF;
 80057de:	2305      	movs	r3, #5
 80057e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(AUDIO_I2Sx_SD_GPIO_PORT, &gpio_init_structure);
 80057e2:	f107 031c 	add.w	r3, r7, #28
 80057e6:	4619      	mov	r1, r3
 80057e8:	482e      	ldr	r0, [pc, #184]	@ (80058a4 <BSP_AUDIO_IN_MspInit+0x14c>)
 80057ea:	f004 f969 	bl	8009ac0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = AUDIO_I2Sx_SCK_AF;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure); */
  

  /* Enable the DMA clock */
  AUDIO_I2Sx_DMAx_CLK_ENABLE();
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	4b2a      	ldr	r3, [pc, #168]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	4a29      	ldr	r2, [pc, #164]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 80057f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80057fe:	4b27      	ldr	r3, [pc, #156]	@ (800589c <BSP_AUDIO_IN_MspInit+0x144>)
 8005800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]

  if(hi2s->Instance == AUDIO_I2Sx)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a26      	ldr	r2, [pc, #152]	@ (80058a8 <BSP_AUDIO_IN_MspInit+0x150>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d137      	bne.n	8005884 <BSP_AUDIO_IN_MspInit+0x12c>
  {
    /* Configure the hdma_i2sRx handle parameters */
    hdma_i2s_rx.Init.Channel             = AUDIO_I2Sx_DMAx_CHANNEL;
 8005814:	4b25      	ldr	r3, [pc, #148]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005816:	2200      	movs	r2, #0
 8005818:	605a      	str	r2, [r3, #4]
    hdma_i2s_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800581a:	4b24      	ldr	r3, [pc, #144]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 800581c:	2200      	movs	r2, #0
 800581e:	609a      	str	r2, [r3, #8]
    hdma_i2s_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005820:	4b22      	ldr	r3, [pc, #136]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005822:	2200      	movs	r2, #0
 8005824:	60da      	str	r2, [r3, #12]
    hdma_i2s_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8005826:	4b21      	ldr	r3, [pc, #132]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005828:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800582c:	611a      	str	r2, [r3, #16]
    hdma_i2s_rx.Init.PeriphDataAlignment = AUDIO_I2Sx_DMAx_PERIPH_DATA_SIZE;
 800582e:	4b1f      	ldr	r3, [pc, #124]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005830:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005834:	615a      	str	r2, [r3, #20]
    hdma_i2s_rx.Init.MemDataAlignment    = AUDIO_I2Sx_DMAx_MEM_DATA_SIZE;
 8005836:	4b1d      	ldr	r3, [pc, #116]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005838:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800583c:	619a      	str	r2, [r3, #24]
    hdma_i2s_rx.Init.Mode                = DMA_CIRCULAR;
 800583e:	4b1b      	ldr	r3, [pc, #108]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005840:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005844:	61da      	str	r2, [r3, #28]
    hdma_i2s_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005846:	4b19      	ldr	r3, [pc, #100]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005848:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800584c:	621a      	str	r2, [r3, #32]
    hdma_i2s_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800584e:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005850:	2200      	movs	r2, #0
 8005852:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_i2s_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005854:	4b15      	ldr	r3, [pc, #84]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005856:	2203      	movs	r2, #3
 8005858:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_i2s_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800585a:	4b14      	ldr	r3, [pc, #80]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 800585c:	2200      	movs	r2, #0
 800585e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_i2s_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8005860:	4b12      	ldr	r3, [pc, #72]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_i2s_rx.Instance = AUDIO_I2Sx_DMAx_STREAM;
 8005866:	4b11      	ldr	r3, [pc, #68]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005868:	4a11      	ldr	r2, [pc, #68]	@ (80058b0 <BSP_AUDIO_IN_MspInit+0x158>)
 800586a:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2s_rx);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a0f      	ldr	r2, [pc, #60]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005870:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005872:	4a0e      	ldr	r2, [pc, #56]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2s_rx);
 8005878:	480c      	ldr	r0, [pc, #48]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 800587a:	f002 fc1b 	bl	80080b4 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2s_rx);
 800587e:	480b      	ldr	r0, [pc, #44]	@ (80058ac <BSP_AUDIO_IN_MspInit+0x154>)
 8005880:	f002 fb6a 	bl	8007f58 <HAL_DMA_Init>
  }

  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_I2Sx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8005884:	2200      	movs	r2, #0
 8005886:	2106      	movs	r1, #6
 8005888:	200d      	movs	r0, #13
 800588a:	f002 fb2e 	bl	8007eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_I2Sx_DMAx_IRQ);
 800588e:	200d      	movs	r0, #13
 8005890:	f002 fb47 	bl	8007f22 <HAL_NVIC_EnableIRQ>
}
 8005894:	bf00      	nop
 8005896:	3730      	adds	r7, #48	@ 0x30
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40023800 	.word	0x40023800
 80058a0:	40020400 	.word	0x40020400
 80058a4:	40020c00 	.word	0x40020c00
 80058a8:	40003c00 	.word	0x40003c00
 80058ac:	200086a8 	.word	0x200086a8
 80058b0:	40026040 	.word	0x40026040

080058b4 <PDMDecoder_Init>:
  * @param  ChnlNbrIn: Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut: Number of desired output audio channels in the  resulting PCM buffer
  *         Number of audio channels (1: mono; 2: stereo)
  */
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	4b43      	ldr	r3, [pc, #268]	@ (80059d8 <PDMDecoder_Init+0x124>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058cc:	4a42      	ldr	r2, [pc, #264]	@ (80059d8 <PDMDecoder_Init+0x124>)
 80058ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80058d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80058d4:	4b40      	ldr	r3, [pc, #256]	@ (80059d8 <PDMDecoder_Init+0x124>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	693b      	ldr	r3, [r7, #16]

  for(index = 0; index < ChnlNbrIn; index++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e06e      	b.n	80059c4 <PDMDecoder_Init+0x110>
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 80058e6:	4a3d      	ldr	r2, [pc, #244]	@ (80059dc <PDMDecoder_Init+0x128>)
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	214c      	movs	r1, #76	@ 0x4c
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	4413      	add	r3, r2
 80058f2:	2200      	movs	r2, #0
 80058f4:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80058f6:	4a39      	ldr	r2, [pc, #228]	@ (80059dc <PDMDecoder_Init+0x128>)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	214c      	movs	r1, #76	@ 0x4c
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	4413      	add	r3, r2
 8005902:	3302      	adds	r3, #2
 8005904:	2200      	movs	r2, #0
 8005906:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8005908:	4a34      	ldr	r2, [pc, #208]	@ (80059dc <PDMDecoder_Init+0x128>)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	214c      	movs	r1, #76	@ 0x4c
 800590e:	fb01 f303 	mul.w	r3, r1, r3
 8005912:	4413      	add	r3, r2
 8005914:	3304      	adds	r3, #4
 8005916:	4a32      	ldr	r2, [pc, #200]	@ (80059e0 <PDMDecoder_Init+0x12c>)
 8005918:	601a      	str	r2, [r3, #0]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	b298      	uxth	r0, r3
 800591e:	4a2f      	ldr	r2, [pc, #188]	@ (80059dc <PDMDecoder_Init+0x128>)
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	214c      	movs	r1, #76	@ 0x4c
 8005924:	fb01 f303 	mul.w	r3, r1, r3
 8005928:	4413      	add	r3, r2
 800592a:	330a      	adds	r3, #10
 800592c:	4602      	mov	r2, r0
 800592e:	801a      	strh	r2, [r3, #0]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	b298      	uxth	r0, r3
 8005934:	4a29      	ldr	r2, [pc, #164]	@ (80059dc <PDMDecoder_Init+0x128>)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	214c      	movs	r1, #76	@ 0x4c
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	4413      	add	r3, r2
 8005940:	3308      	adds	r3, #8
 8005942:	4602      	mov	r2, r0
 8005944:	801a      	strh	r2, [r3, #0]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	224c      	movs	r2, #76	@ 0x4c
 800594a:	fb02 f303 	mul.w	r3, r2, r3
 800594e:	4a23      	ldr	r2, [pc, #140]	@ (80059dc <PDMDecoder_Init+0x128>)
 8005950:	4413      	add	r3, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f015 f928 	bl	801aba8 <PDM_Filter_Init>

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a22      	ldr	r2, [pc, #136]	@ (80059e4 <PDMDecoder_Init+0x130>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	099b      	lsrs	r3, r3, #6
 8005962:	b298      	uxth	r0, r3
 8005964:	4920      	ldr	r1, [pc, #128]	@ (80059e8 <PDMDecoder_Init+0x134>)
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4613      	mov	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4413      	add	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	440b      	add	r3, r1
 8005972:	3302      	adds	r3, #2
 8005974:	4602      	mov	r2, r0
 8005976:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].mic_gain = 24;
 8005978:	491b      	ldr	r1, [pc, #108]	@ (80059e8 <PDMDecoder_Init+0x134>)
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4613      	mov	r3, r2
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	4413      	add	r3, r2
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	440b      	add	r3, r1
 8005986:	3304      	adds	r3, #4
 8005988:	2218      	movs	r2, #24
 800598a:	801a      	strh	r2, [r3, #0]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800598c:	4916      	ldr	r1, [pc, #88]	@ (80059e8 <PDMDecoder_Init+0x134>)
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4613      	mov	r3, r2
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	4413      	add	r3, r2
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	440b      	add	r3, r1
 800599a:	2202      	movs	r2, #2
 800599c:	801a      	strh	r2, [r3, #0]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	224c      	movs	r2, #76	@ 0x4c
 80059a2:	fb02 f303 	mul.w	r3, r2, r3
 80059a6:	4a0d      	ldr	r2, [pc, #52]	@ (80059dc <PDMDecoder_Init+0x128>)
 80059a8:	1898      	adds	r0, r3, r2
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4613      	mov	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4a0c      	ldr	r2, [pc, #48]	@ (80059e8 <PDMDecoder_Init+0x134>)
 80059b6:	4413      	add	r3, r2
 80059b8:	4619      	mov	r1, r3
 80059ba:	f015 f9c5 	bl	801ad48 <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	3301      	adds	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d38c      	bcc.n	80058e6 <PDMDecoder_Init+0x32>
  }
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800
 80059dc:	200085a4 	.word	0x200085a4
 80059e0:	7e809d48 	.word	0x7e809d48
 80059e4:	10624dd3 	.word	0x10624dd3
 80059e8:	2000863c 	.word	0x2000863c

080059ec <I2Sx_Init>:
  * @note   This function assumes that the I2S input clock (through dedicated PLLI2S_R)
  *         is already configured and ready to be used.
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
  */
static void I2Sx_Init(uint32_t AudioFreq)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Initialize the haudio_in_i2s Instance parameter */
  haudio_in_i2s.Instance = AUDIO_I2Sx;
 80059f4:	4b18      	ldr	r3, [pc, #96]	@ (8005a58 <I2Sx_Init+0x6c>)
 80059f6:	4a19      	ldr	r2, [pc, #100]	@ (8005a5c <I2Sx_Init+0x70>)
 80059f8:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&haudio_in_i2s);
 80059fa:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <I2Sx_Init+0x6c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69da      	ldr	r2, [r3, #28]
 8005a00:	4b15      	ldr	r3, [pc, #84]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a08:	61da      	str	r2, [r3, #28]

  /* I2S2 peripheral configuration */
  haudio_in_i2s.Init.AudioFreq = 4 * AudioFreq;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4a12      	ldr	r2, [pc, #72]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a10:	6153      	str	r3, [r2, #20]
  haudio_in_i2s.Init.ClockSource = I2S_CLOCK_PLL;
 8005a12:	4b11      	ldr	r3, [pc, #68]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	61da      	str	r2, [r3, #28]
  haudio_in_i2s.Init.CPOL = I2S_CPOL_LOW;
 8005a18:	4b0f      	ldr	r3, [pc, #60]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	619a      	str	r2, [r3, #24]
  haudio_in_i2s.Init.DataFormat = I2S_DATAFORMAT_16B;
 8005a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	60da      	str	r2, [r3, #12]
  haudio_in_i2s.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005a24:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]
  haudio_in_i2s.Init.Mode = I2S_MODE_MASTER_RX;
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a2c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8005a30:	605a      	str	r2, [r3, #4]
  haudio_in_i2s.Init.Standard = I2S_STANDARD_LSB;
 8005a32:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a34:	2220      	movs	r2, #32
 8005a36:	609a      	str	r2, [r3, #8]
  
  /* Init the I2S */
  HAL_I2S_Init(&haudio_in_i2s); 
 8005a38:	4807      	ldr	r0, [pc, #28]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a3a:	f007 fc07 	bl	800d24c <HAL_I2S_Init>

 /* Disable I2S block */
  __HAL_I2S_ENABLE(&haudio_in_i2s);
 8005a3e:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	4b04      	ldr	r3, [pc, #16]	@ (8005a58 <I2Sx_Init+0x6c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a4c:	61da      	str	r2, [r3, #28]

}
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20008514 	.word	0x20008514
 8005a5c:	40003c00 	.word	0x40003c00

08005a60 <I2Sx_DeInit>:

/**
  * @brief  Deinitializes the Audio Codec audio interface (I2S).
  */
static void I2Sx_DeInit(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Initialize the hAudioInI2s Instance parameter */
  haudio_in_i2s.Instance = AUDIO_I2Sx;
 8005a64:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <I2Sx_DeInit+0x24>)
 8005a66:	4a08      	ldr	r2, [pc, #32]	@ (8005a88 <I2Sx_DeInit+0x28>)
 8005a68:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&haudio_in_i2s);
 8005a6a:	4b06      	ldr	r3, [pc, #24]	@ (8005a84 <I2Sx_DeInit+0x24>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <I2Sx_DeInit+0x24>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a78:	61da      	str	r2, [r3, #28]

  /* DeInit the I2S */
  HAL_I2S_DeInit(&haudio_in_i2s); 
 8005a7a:	4802      	ldr	r0, [pc, #8]	@ (8005a84 <I2Sx_DeInit+0x24>)
 8005a7c:	f007 fd36 	bl	800d4ec <HAL_I2S_DeInit>
}
 8005a80:	bf00      	nop
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20008514 	.word	0x20008514
 8005a88:	40003c00 	.word	0x40003c00

08005a8c <TIMx_IC_MspInit>:
/**
  * @brief  Initializes the TIM INput Capture MSP.
  * @param  htim: TIM handle
  */
static void TIMx_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08a      	sub	sp, #40	@ 0x28
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   gpio_init_structure;

  /* Enable peripherals and GPIO Clocks --------------------------------------*/
  /* TIMx Peripheral clock enable */
  AUDIO_TIMx_CLK_ENABLE();
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <TIMx_IC_MspInit+0x7c>)
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005b08 <TIMx_IC_MspInit+0x7c>)
 8005a9e:	f043 0304 	orr.w	r3, r3, #4
 8005aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aa4:	4b18      	ldr	r3, [pc, #96]	@ (8005b08 <TIMx_IC_MspInit+0x7c>)
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	693b      	ldr	r3, [r7, #16]

  /* Enable GPIO Channels Clock */
  AUDIO_TIMx_GPIO_CLK_ENABLE();
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	4b14      	ldr	r3, [pc, #80]	@ (8005b08 <TIMx_IC_MspInit+0x7c>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab8:	4a13      	ldr	r2, [pc, #76]	@ (8005b08 <TIMx_IC_MspInit+0x7c>)
 8005aba:	f043 0308 	orr.w	r3, r3, #8
 8005abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ac0:	4b11      	ldr	r3, [pc, #68]	@ (8005b08 <TIMx_IC_MspInit+0x7c>)
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]

  /* Configure I/Os ----------------------------------------------------------*/
  /* Common configuration for all channels */
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005acc:	2302      	movs	r3, #2
 8005ace:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = AUDIO_TIMx_AF;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure TIM input channel */
  gpio_init_structure.Pin = AUDIO_TIMx_IN_GPIO_PIN;
 8005adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ae0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AUDIO_TIMx_GPIO_PORT, &gpio_init_structure);
 8005ae2:	f107 0314 	add.w	r3, r7, #20
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4808      	ldr	r0, [pc, #32]	@ (8005b0c <TIMx_IC_MspInit+0x80>)
 8005aea:	f003 ffe9 	bl	8009ac0 <HAL_GPIO_Init>

  /* Configure TIM output channel */
  gpio_init_structure.Pin = AUDIO_TIMx_OUT_GPIO_PIN;
 8005aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005af2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(AUDIO_TIMx_GPIO_PORT, &gpio_init_structure);
 8005af4:	f107 0314 	add.w	r3, r7, #20
 8005af8:	4619      	mov	r1, r3
 8005afa:	4804      	ldr	r0, [pc, #16]	@ (8005b0c <TIMx_IC_MspInit+0x80>)
 8005afc:	f003 ffe0 	bl	8009ac0 <HAL_GPIO_Init>
}
 8005b00:	bf00      	nop
 8005b02:	3728      	adds	r7, #40	@ 0x28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	40020c00 	.word	0x40020c00

08005b10 <TIMx_Init>:
/**
  * @brief  Configure TIM as a clock divider by 2.
  *         I2S_SCK is externally connected to TIMx input channel
  */
static void TIMx_Init(void)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b094      	sub	sp, #80	@ 0x50
 8005b14:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef s_clk_source_config;
  TIM_SlaveConfigTypeDef s_slave_config;
  
  /* Configure the TIM peripheral --------------------------------------------*/
  /* Set TIMx instance */
  haudio_tim.Instance = AUDIO_TIMx;
 8005b16:	4b32      	ldr	r3, [pc, #200]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b18:	4a32      	ldr	r2, [pc, #200]	@ (8005be4 <TIMx_Init+0xd4>)
 8005b1a:	601a      	str	r2, [r3, #0]
       + Period = 0xFFFF
       + Prescaler = 0
       + ClockDivision = 0
       + Counter direction = Up
  */
  haudio_tim.Init.Period        = 1;
 8005b1c:	4b30      	ldr	r3, [pc, #192]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	60da      	str	r2, [r3, #12]
  haudio_tim.Init.Prescaler     = 0;
 8005b22:	4b2f      	ldr	r3, [pc, #188]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	605a      	str	r2, [r3, #4]
  haudio_tim.Init.ClockDivision = 0;
 8005b28:	4b2d      	ldr	r3, [pc, #180]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	611a      	str	r2, [r3, #16]
  haudio_tim.Init.CounterMode   = TIM_COUNTERMODE_UP;
 8005b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	609a      	str	r2, [r3, #8]

  /* Initialize the TIMx peripheral with the structure above */
  TIMx_IC_MspInit(&haudio_tim);
 8005b34:	482a      	ldr	r0, [pc, #168]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b36:	f7ff ffa9 	bl	8005a8c <TIMx_IC_MspInit>
  HAL_TIM_IC_Init(&haudio_tim);
 8005b3a:	4829      	ldr	r0, [pc, #164]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b3c:	f00a fb72 	bl	8010224 <HAL_TIM_IC_Init>

  /* Configure the Input Capture channel -------------------------------------*/
  /* Configure the Input Capture of channel 2 */
  s_ic_config.ICPolarity  = TIM_ICPOLARITY_FALLING;
 8005b40:	2302      	movs	r3, #2
 8005b42:	643b      	str	r3, [r7, #64]	@ 0x40
  s_ic_config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005b44:	2301      	movs	r3, #1
 8005b46:	647b      	str	r3, [r7, #68]	@ 0x44
  s_ic_config.ICPrescaler = TIM_ICPSC_DIV1;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  s_ic_config.ICFilter    = 0;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_TIM_IC_ConfigChannel(&haudio_tim, &s_ic_config, AUDIO_TIMx_IN_CHANNEL);
 8005b50:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005b54:	2200      	movs	r2, #0
 8005b56:	4619      	mov	r1, r3
 8005b58:	4821      	ldr	r0, [pc, #132]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b5a:	f00a fc99 	bl	8010490 <HAL_TIM_IC_ConfigChannel>
  
  /* Select external clock mode 1 */
  s_clk_source_config.ClockSource = TIM_CLOCKSOURCE_ETRMODE1;
 8005b5e:	2370      	movs	r3, #112	@ 0x70
 8005b60:	617b      	str	r3, [r7, #20]
  s_clk_source_config.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
  s_clk_source_config.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
  s_clk_source_config.ClockFilter = 0;   
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	623b      	str	r3, [r7, #32]
  HAL_TIM_ConfigClockSource(&haudio_tim, &s_clk_source_config);
 8005b6e:	f107 0314 	add.w	r3, r7, #20
 8005b72:	4619      	mov	r1, r3
 8005b74:	481a      	ldr	r0, [pc, #104]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b76:	f00a fde9 	bl	801074c <HAL_TIM_ConfigClockSource>
  
  /* Select Input Channel as input trigger */
  s_slave_config.InputTrigger = TIM_TS_TI1FP1;
 8005b7a:	2350      	movs	r3, #80	@ 0x50
 8005b7c:	607b      	str	r3, [r7, #4]
  s_slave_config.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8005b7e:	2307      	movs	r3, #7
 8005b80:	603b      	str	r3, [r7, #0]
  s_slave_config.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]
  s_slave_config.TriggerPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  s_slave_config.TriggerFilter = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	613b      	str	r3, [r7, #16]
  HAL_TIM_SlaveConfigSynchronization(&haudio_tim, &s_slave_config);
 8005b8e:	463b      	mov	r3, r7
 8005b90:	4619      	mov	r1, r3
 8005b92:	4813      	ldr	r0, [pc, #76]	@ (8005be0 <TIMx_Init+0xd0>)
 8005b94:	f00a fea1 	bl	80108da <HAL_TIM_SlaveConfigSynchro>
  
  /* Output Compare PWM Mode configuration: Channel2 */
  s_oc_config.OCMode = TIM_OCMODE_PWM1;
 8005b98:	2360      	movs	r3, #96	@ 0x60
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  s_oc_config.OCIdleState = TIM_OCIDLESTATE_SET;
 8005b9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_oc_config.Pulse = 1;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_oc_config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_oc_config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005baa:	2300      	movs	r3, #0
 8005bac:	633b      	str	r3, [r7, #48]	@ 0x30
  s_oc_config.OCFastMode = TIM_OCFAST_DISABLE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  s_oc_config.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8005bb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* Initialize the TIM3 Channel2 with the structure above */
  HAL_TIM_PWM_ConfigChannel(&haudio_tim, &s_oc_config, AUDIO_TIMx_OUT_CHANNEL);
 8005bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4807      	ldr	r0, [pc, #28]	@ (8005be0 <TIMx_Init+0xd0>)
 8005bc2:	f00a fd01 	bl	80105c8 <HAL_TIM_PWM_ConfigChannel>

  /* Start the TIM3 Channel2 */
  HAL_TIM_PWM_Start(&haudio_tim, AUDIO_TIMx_OUT_CHANNEL);
 8005bc6:	2104      	movs	r1, #4
 8005bc8:	4805      	ldr	r0, [pc, #20]	@ (8005be0 <TIMx_Init+0xd0>)
 8005bca:	f00a fa63 	bl	8010094 <HAL_TIM_PWM_Start>

  /* Start the TIM3 Channel1 */
  HAL_TIM_IC_Start(&haudio_tim, AUDIO_TIMx_IN_CHANNEL);
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4803      	ldr	r0, [pc, #12]	@ (8005be0 <TIMx_Init+0xd0>)
 8005bd2:	f00a fb81 	bl	80102d8 <HAL_TIM_IC_Start>
}
 8005bd6:	bf00      	nop
 8005bd8:	3750      	adds	r7, #80	@ 0x50
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	2000855c 	.word	0x2000855c
 8005be4:	40000800 	.word	0x40000800

08005be8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8005bec:	2001      	movs	r0, #1
 8005bee:	f000 f803 	bl	8005bf8 <BSP_LCD_InitEx>
 8005bf2:	4603      	mov	r3, r0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <BSP_LCD_InitEx>:
  *     - LTDC ititialization
  *     - OTM8009A LCD Display IC Driver ititialization
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b096      	sub	sp, #88	@ 0x58
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4603      	mov	r3, r0
 8005c00:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  DSI_PHY_TimerTypeDef  PhyTimings;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8005c02:	f646 3325 	movw	r3, #27429	@ 0x6b25
 8005c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  uint32_t laneByteClk_kHz = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */
  
  
  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8005c0c:	f000 f980 	bl	8005f10 <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8005c10:	f001 f8e4 	bl	8006ddc <BSP_LCD_MspInit>
  
/*************************DSI Initialization***********************************/  
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_eval.Instance = DSI;
 8005c14:	4b2f      	ldr	r3, [pc, #188]	@ (8005cd4 <BSP_LCD_InitEx+0xdc>)
 8005c16:	4a30      	ldr	r2, [pc, #192]	@ (8005cd8 <BSP_LCD_InitEx+0xe0>)
 8005c18:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hdsi_eval));
 8005c1a:	482e      	ldr	r0, [pc, #184]	@ (8005cd4 <BSP_LCD_InitEx+0xdc>)
 8005c1c:	f003 fa38 	bl	8009090 <HAL_DSI_DeInit>
  
#if !defined(USE_STM32469I_DISCO_REVA)
  dsiPllInit.PLLNDIV  = 125;
 8005c20:	237d      	movs	r3, #125	@ 0x7d
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV2;
 8005c24:	2302      	movs	r3, #2
 8005c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#else  
  dsiPllInit.PLLNDIV  = 100;
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
  dsiPllInit.PLLODF   = DSI_PLL_OUT_DIV1;
#endif
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8005c2c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  /* Set number of Lanes */
  hdsi_eval.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8005c32:	4b28      	ldr	r3, [pc, #160]	@ (8005cd4 <BSP_LCD_InitEx+0xdc>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	60da      	str	r2, [r3, #12]
  
  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_eval.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	089b      	lsrs	r3, r3, #2
 8005c3c:	4a27      	ldr	r2, [pc, #156]	@ (8005cdc <BSP_LCD_InitEx+0xe4>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	0a9b      	lsrs	r3, r3, #10
 8005c44:	4a23      	ldr	r2, [pc, #140]	@ (8005cd4 <BSP_LCD_InitEx+0xdc>)
 8005c46:	6093      	str	r3, [r2, #8]
  
  HAL_DSI_Init(&(hdsi_eval), &(dsiPllInit));
 8005c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4821      	ldr	r0, [pc, #132]	@ (8005cd4 <BSP_LCD_InitEx+0xdc>)
 8005c50:	f003 f89e 	bl	8008d90 <HAL_DSI_Init>

  /* Start DSI */
  HAL_DSI_Start(&hdsi_eval);
 8005c54:	481f      	ldr	r0, [pc, #124]	@ (8005cd4 <BSP_LCD_InitEx+0xdc>)
 8005c56:	f003 fd3d 	bl	80096d4 <HAL_DSI_Start>
  /* Enable the DSI BTW for read operations */
  HAL_DSI_ConfigFlowControl(&hdsi_eval, DSI_FLOW_CONTROL_BTA);
 8005c5a:	2104      	movs	r1, #4
 8005c5c:	481d      	ldr	r0, [pc, #116]	@ (8005cd4 <BSP_LCD_InitEx+0xdc>)
 8005c5e:	f003 fca7 	bl	80095b0 <HAL_DSI_ConfigFlowControl>
  Lcd_Driver_Type = LCD_ReadType(Lcd_Driver_Type);
 8005c62:	4b1f      	ldr	r3, [pc, #124]	@ (8005ce0 <BSP_LCD_InitEx+0xe8>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f001 fafc 	bl	8007264 <LCD_ReadType>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <BSP_LCD_InitEx+0xe8>)
 8005c72:	701a      	strb	r2, [r3, #0]

  BSP_LCD_Reset();
 8005c74:	f000 f94c 	bl	8005f10 <BSP_LCD_Reset>
  HAL_DSI_Stop(&hdsi_eval);
 8005c78:	4816      	ldr	r0, [pc, #88]	@ (8005cd4 <BSP_LCD_InitEx+0xdc>)
 8005c7a:	f003 fd67 	bl	800974c <HAL_DSI_Stop>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d108      	bne.n	8005c96 <BSP_LCD_InitEx+0x9e>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8005c84:	4b17      	ldr	r3, [pc, #92]	@ (8005ce4 <BSP_LCD_InitEx+0xec>)
 8005c86:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005c8a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8005c8c:	4b16      	ldr	r3, [pc, #88]	@ (8005ce8 <BSP_LCD_InitEx+0xf0>)
 8005c8e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e007      	b.n	8005ca6 <BSP_LCD_InitEx+0xae>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8005c96:	4b13      	ldr	r3, [pc, #76]	@ (8005ce4 <BSP_LCD_InitEx+0xec>)
 8005c98:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8005c9c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8005c9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ce8 <BSP_LCD_InitEx+0xf0>)
 8005ca0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005ca4:	601a      	str	r2, [r3, #0]
  }
  
  HACT = lcd_x_size;
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce4 <BSP_LCD_InitEx+0xec>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	637b      	str	r3, [r7, #52]	@ 0x34
  VACT = lcd_y_size;
 8005cac:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce8 <BSP_LCD_InitEx+0xf0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  
  /* The following values are same for portrait and landscape orientations */
  if (Lcd_Driver_Type == LCD_CTRL_NT35510)
 8005cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce0 <BSP_LCD_InitEx+0xe8>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d118      	bne.n	8005cec <BSP_LCD_InitEx+0xf4>
  {
    VSA  = NT35510_480X800_VSYNC;
 8005cba:	2378      	movs	r3, #120	@ 0x78
 8005cbc:	657b      	str	r3, [r7, #84]	@ 0x54
    VBP  = NT35510_480X800_VBP;
 8005cbe:	2396      	movs	r3, #150	@ 0x96
 8005cc0:	653b      	str	r3, [r7, #80]	@ 0x50
    VFP  = NT35510_480X800_VFP;
 8005cc2:	2396      	movs	r3, #150	@ 0x96
 8005cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HSA  = NT35510_480X800_HSYNC;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
    HBP  = NT35510_480X800_HBP;
 8005cca:	2322      	movs	r3, #34	@ 0x22
 8005ccc:	647b      	str	r3, [r7, #68]	@ 0x44
    HFP  = NT35510_480X800_HFP;
 8005cce:	2322      	movs	r3, #34	@ 0x22
 8005cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cd2:	e017      	b.n	8005d04 <BSP_LCD_InitEx+0x10c>
 8005cd4:	2000885c 	.word	0x2000885c
 8005cd8:	40016c00 	.word	0x40016c00
 8005cdc:	43215e57 	.word	0x43215e57
 8005ce0:	20008878 	.word	0x20008878
 8005ce4:	20000154 	.word	0x20000154
 8005ce8:	20000158 	.word	0x20000158
  }
  else
  {
    VSA  = OTM8009A_480X800_VSYNC;
 8005cec:	2301      	movs	r3, #1
 8005cee:	657b      	str	r3, [r7, #84]	@ 0x54
    VBP  = OTM8009A_480X800_VBP;
 8005cf0:	230f      	movs	r3, #15
 8005cf2:	653b      	str	r3, [r7, #80]	@ 0x50
    VFP  = OTM8009A_480X800_VFP;
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HSA  = OTM8009A_480X800_HSYNC;
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
    HBP  = OTM8009A_480X800_HBP;
 8005cfc:	2322      	movs	r3, #34	@ 0x22
 8005cfe:	647b      	str	r3, [r7, #68]	@ 0x44
    HFP  = OTM8009A_480X800_HFP;
 8005d00:	2322      	movs	r3, #34	@ 0x22
 8005d02:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  hdsivideo_handle.VirtualChannelID = LCD_Driver_ID;
 8005d04:	4b79      	ldr	r3, [pc, #484]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8005d0a:	4b78      	ldr	r3, [pc, #480]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d0c:	2205      	movs	r2, #5
 8005d0e:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8005d10:	4b76      	ldr	r3, [pc, #472]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8005d16:	4b75      	ldr	r3, [pc, #468]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8005d1c:	4b73      	ldr	r3, [pc, #460]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	625a      	str	r2, [r3, #36]	@ 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8005d22:	4b72      	ldr	r3, [pc, #456]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d24:	2202      	movs	r2, #2
 8005d26:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8005d28:	4b70      	ldr	r3, [pc, #448]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d2a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8005d2e:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8005d30:	4b6e      	ldr	r3, [pc, #440]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8005d36:	4a6d      	ldr	r2, [pc, #436]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3a:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz) / LcdClock;
 8005d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d40:	fb03 f202 	mul.w	r2, r3, r2
 8005d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4a:	4a68      	ldr	r2, [pc, #416]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d4c:	6293      	str	r3, [r2, #40]	@ 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz) / LcdClock;
 8005d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d52:	fb03 f202 	mul.w	r2, r3, r2
 8005d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5c:	4a63      	ldr	r2, [pc, #396]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz) / LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8005d60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d64:	441a      	add	r2, r3
 8005d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d68:	441a      	add	r2, r3
 8005d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d6c:	4413      	add	r3, r2
 8005d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d70:	fb03 f202 	mul.w	r2, r3, r2
 8005d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d7c:	6313      	str	r3, [r2, #48]	@ 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8005d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d82:	6353      	str	r3, [r2, #52]	@ 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8005d84:	4a59      	ldr	r2, [pc, #356]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d88:	6393      	str	r3, [r2, #56]	@ 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8005d8a:	4a58      	ldr	r2, [pc, #352]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8005d90:	4a56      	ldr	r2, [pc, #344]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	6413      	str	r3, [r2, #64]	@ 0x40
  
  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8005d96:	4b55      	ldr	r3, [pc, #340]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005d98:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005d9c:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8005d9e:	4b53      	ldr	r3, [pc, #332]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005da0:	2210      	movs	r2, #16
 8005da2:	649a      	str	r2, [r3, #72]	@ 0x48
  
  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8005da4:	4b51      	ldr	r3, [pc, #324]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	64da      	str	r2, [r3, #76]	@ 0x4c
  
  
  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8005daa:	4b50      	ldr	r3, [pc, #320]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005dac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005db0:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8005db2:	4b4e      	ldr	r3, [pc, #312]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005db4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005db8:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8005dba:	4b4c      	ldr	r3, [pc, #304]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005dbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005dc0:	659a      	str	r2, [r3, #88]	@ 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8005dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005dc4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8005dca:	4b48      	ldr	r3, [pc, #288]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8005dd2:	4b46      	ldr	r3, [pc, #280]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005dd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dd8:	665a      	str	r2, [r3, #100]	@ 0x64
  
  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_eval), &(hdsivideo_handle));
 8005dda:	4944      	ldr	r1, [pc, #272]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005ddc:	4844      	ldr	r0, [pc, #272]	@ (8005ef0 <BSP_LCD_InitEx+0x2f8>)
 8005dde:	f003 f9df 	bl	80091a0 <HAL_DSI_ConfigVideoMode>

  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 8005de2:	2323      	movs	r3, #35	@ 0x23
 8005de4:	60fb      	str	r3, [r7, #12]
  PhyTimings.ClockLaneLP2HSTime = 35;
 8005de6:	2323      	movs	r3, #35	@ 0x23
 8005de8:	613b      	str	r3, [r7, #16]
  PhyTimings.DataLaneHS2LPTime = 35;
 8005dea:	2323      	movs	r3, #35	@ 0x23
 8005dec:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneLP2HSTime = 35;
 8005dee:	2323      	movs	r3, #35	@ 0x23
 8005df0:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneMaxReadTime = 0;
 8005df2:	2300      	movs	r3, #0
 8005df4:	61fb      	str	r3, [r7, #28]
  PhyTimings.StopWaitTime = 10;
 8005df6:	230a      	movs	r3, #10
 8005df8:	623b      	str	r3, [r7, #32]
  HAL_DSI_ConfigPhyTimer(&hdsi_eval, &PhyTimings);
 8005dfa:	f107 030c 	add.w	r3, r7, #12
 8005dfe:	4619      	mov	r1, r3
 8005e00:	483b      	ldr	r0, [pc, #236]	@ (8005ef0 <BSP_LCD_InitEx+0x2f8>)
 8005e02:	f003 fbfd 	bl	8009600 <HAL_DSI_ConfigPhyTimer>


/************************LTDC Initialization***********************************/  
  
  /* Timing Configuration */    
  hltdc_eval.Init.HorizontalSync = (HSA - 1);
 8005e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	4a3a      	ldr	r2, [pc, #232]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e0c:	6153      	str	r3, [r2, #20]
  hltdc_eval.Init.AccumulatedHBP = (HSA + HBP - 1);
 8005e0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e12:	4413      	add	r3, r2
 8005e14:	3b01      	subs	r3, #1
 8005e16:	4a37      	ldr	r2, [pc, #220]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e18:	61d3      	str	r3, [r2, #28]
  hltdc_eval.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8005e1a:	4b37      	ldr	r3, [pc, #220]	@ (8005ef8 <BSP_LCD_InitEx+0x300>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e20:	441a      	add	r2, r3
 8005e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e24:	4413      	add	r3, r2
 8005e26:	3b01      	subs	r3, #1
 8005e28:	4a32      	ldr	r2, [pc, #200]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e2a:	6253      	str	r3, [r2, #36]	@ 0x24
  hltdc_eval.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8005e2c:	4b32      	ldr	r3, [pc, #200]	@ (8005ef8 <BSP_LCD_InitEx+0x300>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e32:	441a      	add	r2, r3
 8005e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e36:	441a      	add	r2, r3
 8005e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e40:	62d3      	str	r3, [r2, #44]	@ 0x2c
  
  /* Initialize the LCD pixel width and pixel height */
  hltdc_eval.LayerCfg->ImageWidth  = lcd_x_size;
 8005e42:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef8 <BSP_LCD_InitEx+0x300>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a2b      	ldr	r2, [pc, #172]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e48:	6613      	str	r3, [r2, #96]	@ 0x60
  hltdc_eval.LayerCfg->ImageHeight = lcd_y_size;   
 8005e4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005efc <BSP_LCD_InitEx+0x304>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a29      	ldr	r2, [pc, #164]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e50:	6653      	str	r3, [r2, #100]	@ 0x64
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.857 MHz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.857 MHz / 2 = 27.429 MHz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005e52:	4b2b      	ldr	r3, [pc, #172]	@ (8005f00 <BSP_LCD_InitEx+0x308>)
 8005e54:	2208      	movs	r2, #8
 8005e56:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8005e58:	4b29      	ldr	r3, [pc, #164]	@ (8005f00 <BSP_LCD_InitEx+0x308>)
 8005e5a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005e5e:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8005e60:	4b27      	ldr	r3, [pc, #156]	@ (8005f00 <BSP_LCD_InitEx+0x308>)
 8005e62:	2207      	movs	r2, #7
 8005e64:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8005e66:	4b26      	ldr	r3, [pc, #152]	@ (8005f00 <BSP_LCD_InitEx+0x308>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8005e6c:	4824      	ldr	r0, [pc, #144]	@ (8005f00 <BSP_LCD_InitEx+0x308>)
 8005e6e:	f008 fe31 	bl	800ead4 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Background value */
  hltdc_eval.Init.Backcolor.Blue = 0;
 8005e72:	4b20      	ldr	r3, [pc, #128]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc_eval.Init.Backcolor.Green = 0;
 8005e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc_eval.Init.Backcolor.Red = 0;
 8005e82:	4b1c      	ldr	r3, [pc, #112]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  hltdc_eval.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	611a      	str	r2, [r3, #16]
  hltdc_eval.Instance = LTDC;
 8005e90:	4b18      	ldr	r3, [pc, #96]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e92:	4a1c      	ldr	r2, [pc, #112]	@ (8005f04 <BSP_LCD_InitEx+0x30c>)
 8005e94:	601a      	str	r2, [r3, #0]
  
  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDCEx_StructInitFromVideoConfig(&(hltdc_eval), &(hdsivideo_handle));
 8005e96:	4915      	ldr	r1, [pc, #84]	@ (8005eec <BSP_LCD_InitEx+0x2f4>)
 8005e98:	4816      	ldr	r0, [pc, #88]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005e9a:	f008 fb6e 	bl	800e57a <HAL_LTDCEx_StructInitFromVideoConfig>
  
  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_eval);
 8005e9e:	4815      	ldr	r0, [pc, #84]	@ (8005ef4 <BSP_LCD_InitEx+0x2fc>)
 8005ea0:	f008 f8bc 	bl	800e01c <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&(hdsi_eval));
 8005ea4:	4812      	ldr	r0, [pc, #72]	@ (8005ef0 <BSP_LCD_InitEx+0x2f8>)
 8005ea6:	f003 fc15 	bl	80096d4 <HAL_DSI_Start>
  
#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8005eaa:	f001 f9fb 	bl	80072a4 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */
  
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005eae:	4816      	ldr	r0, [pc, #88]	@ (8005f08 <BSP_LCD_InitEx+0x310>)
 8005eb0:	f000 f928 	bl	8006104 <BSP_LCD_SetFont>
  /************************End LTDC Initialization*******************************/

  /* Checking the ID to determine the type of component */
  if (Lcd_Driver_Type == LCD_CTRL_NT35510)
 8005eb4:	4b15      	ldr	r3, [pc, #84]	@ (8005f0c <BSP_LCD_InitEx+0x314>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d105      	bne.n	8005ec8 <BSP_LCD_InitEx+0x2d0>
  {
    /***********************NT35510 Initialization********************************/  
    /* Initialize the NT35510 LCD Display IC Driver (TechShine LCD IC Driver)
    * depending on configuration set in 'hdsivideo_handle'.
    */
    NT35510_Init(NT35510_FORMAT_RGB888, orientation);
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	f7fd ffa1 	bl	8003e08 <NT35510_Init>
 8005ec6:	e00b      	b.n	8005ee0 <BSP_LCD_InitEx+0x2e8>
    /***********************End NT35510 Initialization****************************/
  }
  else if (Lcd_Driver_Type == LCD_CTRL_OTM8009A)
 8005ec8:	4b10      	ldr	r3, [pc, #64]	@ (8005f0c <BSP_LCD_InitEx+0x314>)
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d105      	bne.n	8005edc <BSP_LCD_InitEx+0x2e4>
  {
    /***********************OTM8009A Initialization********************************/  
    /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
    *  depending on configuration set in 'hdsivideo_handle'.
    */
    OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8005ed0:	79fb      	ldrb	r3, [r7, #7]
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	f7fe f99f 	bl	8004218 <OTM8009A_Init>
 8005eda:	e001      	b.n	8005ee0 <BSP_LCD_InitEx+0x2e8>
    /***********************End OTM8009A Initialization****************************/ 
  }
  else
  {
    return LCD_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <BSP_LCD_InitEx+0x2ea>
  }

  return LCD_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3758      	adds	r7, #88	@ 0x58
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20008708 	.word	0x20008708
 8005ef0:	2000885c 	.word	0x2000885c
 8005ef4:	200087b4 	.word	0x200087b4
 8005ef8:	20000154 	.word	0x20000154
 8005efc:	20000158 	.word	0x20000158
 8005f00:	20008898 	.word	0x20008898
 8005f04:	40016800 	.word	0x40016800
 8005f08:	20000134 	.word	0x20000134
 8005f0c:	20008878 	.word	0x20008878

08005f10 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  *         This signal is only cabled on Discovery Rev B and beyond.
  */
void BSP_LCD_Reset(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
#if !defined(USE_STM32469I_DISCO_REVA)
  /* Disco Rev B and beyond : reset the LCD by activation of XRES (active low) connected to PH7 */
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f16:	2300      	movs	r3, #0
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f84 <BSP_LCD_Reset+0x74>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1e:	4a19      	ldr	r2, [pc, #100]	@ (8005f84 <BSP_LCD_Reset+0x74>)
 8005f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f26:	4b17      	ldr	r3, [pc, #92]	@ (8005f84 <BSP_LCD_Reset+0x74>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]

  /* Configure the GPIO on PH7 */
  gpio_init_structure.Pin   = GPIO_PIN_7;
 8005f32:	2380      	movs	r3, #128	@ 0x80
 8005f34:	607b      	str	r3, [r7, #4]
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8005f36:	4b14      	ldr	r3, [pc, #80]	@ (8005f88 <BSP_LCD_Reset+0x78>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <BSP_LCD_Reset+0x34>
  {
    /* Push Pull Mode is required for TechShine LCD (NT35510) */
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	e001      	b.n	8005f48 <BSP_LCD_Reset+0x38>
  }
  else
  {
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_OD;
 8005f44:	2311      	movs	r3, #17
 8005f46:	60bb      	str	r3, [r7, #8]
  }
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005f50:	1d3b      	adds	r3, r7, #4
 8005f52:	4619      	mov	r1, r3
 8005f54:	480d      	ldr	r0, [pc, #52]	@ (8005f8c <BSP_LCD_Reset+0x7c>)
 8005f56:	f003 fdb3 	bl	8009ac0 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2180      	movs	r1, #128	@ 0x80
 8005f5e:	480b      	ldr	r0, [pc, #44]	@ (8005f8c <BSP_LCD_Reset+0x7c>)
 8005f60:	f003 ff72 	bl	8009e48 <HAL_GPIO_WritePin>

  HAL_Delay(20); /* wait 20 ms */
 8005f64:	2014      	movs	r0, #20
 8005f66:	f001 fec1 	bl	8007cec <HAL_Delay>

  /* Deactivate XRES */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	2180      	movs	r1, #128	@ 0x80
 8005f6e:	4807      	ldr	r0, [pc, #28]	@ (8005f8c <BSP_LCD_Reset+0x7c>)
 8005f70:	f003 ff6a 	bl	8009e48 <HAL_GPIO_WritePin>

  /* Wait for 20ms after releasing XRES before sending commands */
  HAL_Delay(20);
 8005f74:	2014      	movs	r0, #20
 8005f76:	f001 feb9 	bl	8007cec <HAL_Delay>
#else
  /* Nothing to do in case of Disco Rev A */
#endif /* USE_STM32469I_DISCO_REVA == 0 */
}
 8005f7a:	bf00      	nop
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40023800 	.word	0x40023800
 8005f88:	20008878 	.word	0x20008878
 8005f8c:	40021c00 	.word	0x40021c00

08005f90 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8005f94:	4b03      	ldr	r3, [pc, #12]	@ (8005fa4 <BSP_LCD_GetXSize+0x14>)
 8005f96:	681b      	ldr	r3, [r3, #0]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20000154 	.word	0x20000154

08005fa8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8005fac:	4b03      	ldr	r3, [pc, #12]	@ (8005fbc <BSP_LCD_GetYSize+0x14>)
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000158 	.word	0x20000158

08005fc0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b090      	sub	sp, #64	@ 0x40
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	6039      	str	r1, [r7, #0]
 8005fca:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8005fd0:	f7ff ffde 	bl	8005f90 <BSP_LCD_GetXSize>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005fdc:	f7ff ffe4 	bl	8005fa8 <BSP_LCD_GetYSize>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8005fec:	23ff      	movs	r3, #255	@ 0xff
 8005fee:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8006006:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800600a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800600c:	2307      	movs	r3, #7
 800600e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8006010:	f7ff ffbe 	bl	8005f90 <BSP_LCD_GetXSize>
 8006014:	4603      	mov	r3, r0
 8006016:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8006018:	f7ff ffc6 	bl	8005fa8 <BSP_LCD_GetYSize>
 800601c:	4603      	mov	r3, r0
 800601e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_eval, &Layercfg, LayerIndex); 
 8006020:	88fa      	ldrh	r2, [r7, #6]
 8006022:	f107 030c 	add.w	r3, r7, #12
 8006026:	4619      	mov	r1, r3
 8006028:	4812      	ldr	r0, [pc, #72]	@ (8006074 <BSP_LCD_LayerDefaultInit+0xb4>)
 800602a:	f008 f8d1 	bl	800e1d0 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	4911      	ldr	r1, [pc, #68]	@ (8006078 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	440b      	add	r3, r1
 800603c:	3304      	adds	r3, #4
 800603e:	f04f 32ff 	mov.w	r2, #4294967295
 8006042:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006044:	88fa      	ldrh	r2, [r7, #6]
 8006046:	490c      	ldr	r1, [pc, #48]	@ (8006078 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006048:	4613      	mov	r3, r2
 800604a:	005b      	lsls	r3, r3, #1
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	3308      	adds	r3, #8
 8006054:	4a09      	ldr	r2, [pc, #36]	@ (800607c <BSP_LCD_LayerDefaultInit+0xbc>)
 8006056:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8006058:	88fa      	ldrh	r2, [r7, #6]
 800605a:	4907      	ldr	r1, [pc, #28]	@ (8006078 <BSP_LCD_LayerDefaultInit+0xb8>)
 800605c:	4613      	mov	r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800606a:	601a      	str	r2, [r3, #0]
}
 800606c:	bf00      	nop
 800606e:	3740      	adds	r7, #64	@ 0x40
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	200087b4 	.word	0x200087b4
 8006078:	20008880 	.word	0x20008880
 800607c:	20000134 	.word	0x20000134

08006080 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8006088:	4a04      	ldr	r2, [pc, #16]	@ (800609c <BSP_LCD_SelectLayer+0x1c>)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6013      	str	r3, [r2, #0]
}
 800608e:	bf00      	nop
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	2000887c 	.word	0x2000887c

080060a0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80060a8:	4b07      	ldr	r3, [pc, #28]	@ (80060c8 <BSP_LCD_SetTextColor+0x28>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	4907      	ldr	r1, [pc, #28]	@ (80060cc <BSP_LCD_SetTextColor+0x2c>)
 80060ae:	4613      	mov	r3, r2
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	601a      	str	r2, [r3, #0]
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	2000887c 	.word	0x2000887c
 80060cc:	20008880 	.word	0x20008880

080060d0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80060d8:	4b08      	ldr	r3, [pc, #32]	@ (80060fc <BSP_LCD_SetBackColor+0x2c>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	4908      	ldr	r1, [pc, #32]	@ (8006100 <BSP_LCD_SetBackColor+0x30>)
 80060de:	4613      	mov	r3, r2
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	3304      	adds	r3, #4
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	2000887c 	.word	0x2000887c
 8006100:	20008880 	.word	0x20008880

08006104 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800610c:	4b08      	ldr	r3, [pc, #32]	@ (8006130 <BSP_LCD_SetFont+0x2c>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4908      	ldr	r1, [pc, #32]	@ (8006134 <BSP_LCD_SetFont+0x30>)
 8006112:	4613      	mov	r3, r2
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	4413      	add	r3, r2
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	440b      	add	r3, r1
 800611c:	3308      	adds	r3, #8
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	2000887c 	.word	0x2000887c
 8006134:	20008880 	.word	0x20008880

08006138 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800613c:	4b07      	ldr	r3, [pc, #28]	@ (800615c <BSP_LCD_GetFont+0x24>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4907      	ldr	r1, [pc, #28]	@ (8006160 <BSP_LCD_GetFont+0x28>)
 8006142:	4613      	mov	r3, r2
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	3308      	adds	r3, #8
 800614e:	681b      	ldr	r3, [r3, #0]
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	2000887c 	.word	0x2000887c
 8006160:	20008880 	.word	0x20008880

08006164 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8006164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006166:	b085      	sub	sp, #20
 8006168:	af02      	add	r7, sp, #8
 800616a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800616c:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <BSP_LCD_Clear+0x48>)
 800616e:	681c      	ldr	r4, [r3, #0]
 8006170:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <BSP_LCD_Clear+0x48>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a0e      	ldr	r2, [pc, #56]	@ (80061b0 <BSP_LCD_Clear+0x4c>)
 8006176:	2134      	movs	r1, #52	@ 0x34
 8006178:	fb01 f303 	mul.w	r3, r1, r3
 800617c:	4413      	add	r3, r2
 800617e:	335c      	adds	r3, #92	@ 0x5c
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461e      	mov	r6, r3
 8006184:	f7ff ff04 	bl	8005f90 <BSP_LCD_GetXSize>
 8006188:	4605      	mov	r5, r0
 800618a:	f7ff ff0d 	bl	8005fa8 <BSP_LCD_GetYSize>
 800618e:	4602      	mov	r2, r0
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	2300      	movs	r3, #0
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	462a      	mov	r2, r5
 800619c:	4631      	mov	r1, r6
 800619e:	4620      	mov	r0, r4
 80061a0:	f001 f828 	bl	80071f4 <LL_FillBuffer>
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ac:	2000887c 	.word	0x2000887c
 80061b0:	200087b4 	.word	0x200087b4

080061b4 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line: Line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 80061b4:	b590      	push	{r4, r7, lr}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 80061bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006274 <BSP_LCD_ClearStringLine+0xc0>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	492d      	ldr	r1, [pc, #180]	@ (8006278 <BSP_LCD_ClearStringLine+0xc4>)
 80061c2:	4613      	mov	r3, r2
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	440b      	add	r3, r1
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 80061d0:	4b28      	ldr	r3, [pc, #160]	@ (8006274 <BSP_LCD_ClearStringLine+0xc0>)
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	4b27      	ldr	r3, [pc, #156]	@ (8006274 <BSP_LCD_ClearStringLine+0xc0>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4827      	ldr	r0, [pc, #156]	@ (8006278 <BSP_LCD_ClearStringLine+0xc4>)
 80061da:	460b      	mov	r3, r1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	440b      	add	r3, r1
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4403      	add	r3, r0
 80061e4:	3304      	adds	r3, #4
 80061e6:	6819      	ldr	r1, [r3, #0]
 80061e8:	4823      	ldr	r0, [pc, #140]	@ (8006278 <BSP_LCD_ClearStringLine+0xc4>)
 80061ea:	4613      	mov	r3, r2
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4403      	add	r3, r0
 80061f4:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 80061f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006274 <BSP_LCD_ClearStringLine+0xc0>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	491f      	ldr	r1, [pc, #124]	@ (8006278 <BSP_LCD_ClearStringLine+0xc4>)
 80061fc:	4613      	mov	r3, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	3308      	adds	r3, #8
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	88da      	ldrh	r2, [r3, #6]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	b29b      	uxth	r3, r3
 8006210:	fb12 f303 	smulbb	r3, r2, r3
 8006214:	b29c      	uxth	r4, r3
 8006216:	f7ff febb 	bl	8005f90 <BSP_LCD_GetXSize>
 800621a:	4603      	mov	r3, r0
 800621c:	b299      	uxth	r1, r3
 800621e:	4b15      	ldr	r3, [pc, #84]	@ (8006274 <BSP_LCD_ClearStringLine+0xc0>)
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4815      	ldr	r0, [pc, #84]	@ (8006278 <BSP_LCD_ClearStringLine+0xc4>)
 8006224:	4613      	mov	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4403      	add	r3, r0
 800622e:	3308      	adds	r3, #8
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	88db      	ldrh	r3, [r3, #6]
 8006234:	460a      	mov	r2, r1
 8006236:	4621      	mov	r1, r4
 8006238:	2000      	movs	r0, #0
 800623a:	f000 fba9 	bl	8006990 <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = color_backup;
 800623e:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <BSP_LCD_ClearStringLine+0xc0>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	490d      	ldr	r1, [pc, #52]	@ (8006278 <BSP_LCD_ClearStringLine+0xc4>)
 8006244:	4613      	mov	r3, r2
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	4413      	add	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	440b      	add	r3, r1
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006252:	4b08      	ldr	r3, [pc, #32]	@ (8006274 <BSP_LCD_ClearStringLine+0xc0>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4908      	ldr	r1, [pc, #32]	@ (8006278 <BSP_LCD_ClearStringLine+0xc4>)
 8006258:	4613      	mov	r3, r2
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff ff1b 	bl	80060a0 <BSP_LCD_SetTextColor>
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	bd90      	pop	{r4, r7, pc}
 8006272:	bf00      	nop
 8006274:	2000887c 	.word	0x2000887c
 8006278:	20008880 	.word	0x20008880

0800627c <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800627c:	b590      	push	{r4, r7, lr}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	4603      	mov	r3, r0
 8006284:	80fb      	strh	r3, [r7, #6]
 8006286:	460b      	mov	r3, r1
 8006288:	80bb      	strh	r3, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800628e:	4b1b      	ldr	r3, [pc, #108]	@ (80062fc <BSP_LCD_DisplayChar+0x80>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	491b      	ldr	r1, [pc, #108]	@ (8006300 <BSP_LCD_DisplayChar+0x84>)
 8006294:	4613      	mov	r3, r2
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	3308      	adds	r3, #8
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80062aa:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <BSP_LCD_DisplayChar+0x80>)
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4c14      	ldr	r4, [pc, #80]	@ (8006300 <BSP_LCD_DisplayChar+0x84>)
 80062b0:	4613      	mov	r3, r2
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4423      	add	r3, r4
 80062ba:	3308      	adds	r3, #8
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80062c0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80062c4:	4b0d      	ldr	r3, [pc, #52]	@ (80062fc <BSP_LCD_DisplayChar+0x80>)
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006300 <BSP_LCD_DisplayChar+0x84>)
 80062ca:	4613      	mov	r3, r2
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4423      	add	r3, r4
 80062d4:	3308      	adds	r3, #8
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	889b      	ldrh	r3, [r3, #4]
 80062da:	3307      	adds	r3, #7
 80062dc:	2b00      	cmp	r3, #0
 80062de:	da00      	bge.n	80062e2 <BSP_LCD_DisplayChar+0x66>
 80062e0:	3307      	adds	r3, #7
 80062e2:	10db      	asrs	r3, r3, #3
 80062e4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80062e8:	18ca      	adds	r2, r1, r3
 80062ea:	88b9      	ldrh	r1, [r7, #4]
 80062ec:	88fb      	ldrh	r3, [r7, #6]
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fe0a 	bl	8006f08 <DrawChar>
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd90      	pop	{r4, r7, pc}
 80062fc:	2000887c 	.word	0x2000887c
 8006300:	20008880 	.word	0x20008880

08006304 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006304:	b5b0      	push	{r4, r5, r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af00      	add	r7, sp, #0
 800630a:	60ba      	str	r2, [r7, #8]
 800630c:	461a      	mov	r2, r3
 800630e:	4603      	mov	r3, r0
 8006310:	81fb      	strh	r3, [r7, #14]
 8006312:	460b      	mov	r3, r1
 8006314:	81bb      	strh	r3, [r7, #12]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800631a:	2301      	movs	r3, #1
 800631c:	83fb      	strh	r3, [r7, #30]
 800631e:	2300      	movs	r3, #0
 8006320:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8006322:	2300      	movs	r3, #0
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	2300      	movs	r3, #0
 8006328:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800632e:	e002      	b.n	8006336 <BSP_LCD_DisplayStringAt+0x32>
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	3301      	adds	r3, #1
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	617a      	str	r2, [r7, #20]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f6      	bne.n	8006330 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006342:	f7ff fe25 	bl	8005f90 <BSP_LCD_GetXSize>
 8006346:	4601      	mov	r1, r0
 8006348:	4b50      	ldr	r3, [pc, #320]	@ (800648c <BSP_LCD_DisplayStringAt+0x188>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	4850      	ldr	r0, [pc, #320]	@ (8006490 <BSP_LCD_DisplayStringAt+0x18c>)
 800634e:	4613      	mov	r3, r2
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4403      	add	r3, r0
 8006358:	3308      	adds	r3, #8
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	889b      	ldrh	r3, [r3, #4]
 800635e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006362:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	2b03      	cmp	r3, #3
 8006368:	d01c      	beq.n	80063a4 <BSP_LCD_DisplayStringAt+0xa0>
 800636a:	2b03      	cmp	r3, #3
 800636c:	dc33      	bgt.n	80063d6 <BSP_LCD_DisplayStringAt+0xd2>
 800636e:	2b01      	cmp	r3, #1
 8006370:	d002      	beq.n	8006378 <BSP_LCD_DisplayStringAt+0x74>
 8006372:	2b02      	cmp	r3, #2
 8006374:	d019      	beq.n	80063aa <BSP_LCD_DisplayStringAt+0xa6>
 8006376:	e02e      	b.n	80063d6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	1ad1      	subs	r1, r2, r3
 800637e:	4b43      	ldr	r3, [pc, #268]	@ (800648c <BSP_LCD_DisplayStringAt+0x188>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4843      	ldr	r0, [pc, #268]	@ (8006490 <BSP_LCD_DisplayStringAt+0x18c>)
 8006384:	4613      	mov	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4403      	add	r3, r0
 800638e:	3308      	adds	r3, #8
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	889b      	ldrh	r3, [r3, #4]
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	085b      	lsrs	r3, r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	89fb      	ldrh	r3, [r7, #14]
 800639e:	4413      	add	r3, r2
 80063a0:	83fb      	strh	r3, [r7, #30]
      break;
 80063a2:	e01b      	b.n	80063dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80063a4:	89fb      	ldrh	r3, [r7, #14]
 80063a6:	83fb      	strh	r3, [r7, #30]
      break;
 80063a8:	e018      	b.n	80063dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	b299      	uxth	r1, r3
 80063b2:	4b36      	ldr	r3, [pc, #216]	@ (800648c <BSP_LCD_DisplayStringAt+0x188>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4836      	ldr	r0, [pc, #216]	@ (8006490 <BSP_LCD_DisplayStringAt+0x18c>)
 80063b8:	4613      	mov	r3, r2
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4403      	add	r3, r0
 80063c2:	3308      	adds	r3, #8
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	889b      	ldrh	r3, [r3, #4]
 80063c8:	fb11 f303 	smulbb	r3, r1, r3
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	89fb      	ldrh	r3, [r7, #14]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	83fb      	strh	r3, [r7, #30]
      break;
 80063d4:	e002      	b.n	80063dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 80063d6:	89fb      	ldrh	r3, [r7, #14]
 80063d8:	83fb      	strh	r3, [r7, #30]
      break;
 80063da:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80063dc:	8bfb      	ldrh	r3, [r7, #30]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <BSP_LCD_DisplayStringAt+0xe6>
 80063e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	da1d      	bge.n	8006426 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 80063ea:	2301      	movs	r3, #1
 80063ec:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80063ee:	e01a      	b.n	8006426 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	781a      	ldrb	r2, [r3, #0]
 80063f4:	89b9      	ldrh	r1, [r7, #12]
 80063f6:	8bfb      	ldrh	r3, [r7, #30]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff ff3f 	bl	800627c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80063fe:	4b23      	ldr	r3, [pc, #140]	@ (800648c <BSP_LCD_DisplayStringAt+0x188>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4923      	ldr	r1, [pc, #140]	@ (8006490 <BSP_LCD_DisplayStringAt+0x18c>)
 8006404:	4613      	mov	r3, r2
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	3308      	adds	r3, #8
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	889a      	ldrh	r2, [r3, #4]
 8006414:	8bfb      	ldrh	r3, [r7, #30]
 8006416:	4413      	add	r3, r2
 8006418:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	3301      	adds	r3, #1
 800641e:	60bb      	str	r3, [r7, #8]
    i++;
 8006420:	8bbb      	ldrh	r3, [r7, #28]
 8006422:	3301      	adds	r3, #1
 8006424:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	bf14      	ite	ne
 800642e:	2301      	movne	r3, #1
 8006430:	2300      	moveq	r3, #0
 8006432:	b2dc      	uxtb	r4, r3
 8006434:	f7ff fdac 	bl	8005f90 <BSP_LCD_GetXSize>
 8006438:	8bb9      	ldrh	r1, [r7, #28]
 800643a:	4b14      	ldr	r3, [pc, #80]	@ (800648c <BSP_LCD_DisplayStringAt+0x188>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4d14      	ldr	r5, [pc, #80]	@ (8006490 <BSP_LCD_DisplayStringAt+0x18c>)
 8006440:	4613      	mov	r3, r2
 8006442:	005b      	lsls	r3, r3, #1
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	442b      	add	r3, r5
 800644a:	3308      	adds	r3, #8
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	889b      	ldrh	r3, [r3, #4]
 8006450:	fb01 f303 	mul.w	r3, r1, r3
 8006454:	1ac3      	subs	r3, r0, r3
 8006456:	b299      	uxth	r1, r3
 8006458:	4b0c      	ldr	r3, [pc, #48]	@ (800648c <BSP_LCD_DisplayStringAt+0x188>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	480c      	ldr	r0, [pc, #48]	@ (8006490 <BSP_LCD_DisplayStringAt+0x18c>)
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4403      	add	r3, r0
 8006468:	3308      	adds	r3, #8
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	889b      	ldrh	r3, [r3, #4]
 800646e:	4299      	cmp	r1, r3
 8006470:	bf2c      	ite	cs
 8006472:	2301      	movcs	r3, #1
 8006474:	2300      	movcc	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	4023      	ands	r3, r4
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1b7      	bne.n	80063f0 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	3720      	adds	r7, #32
 8006486:	46bd      	mov	sp, r7
 8006488:	bdb0      	pop	{r4, r5, r7, pc}
 800648a:	bf00      	nop
 800648c:	2000887c 	.word	0x2000887c
 8006490:	20008880 	.word	0x20008880

08006494 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	6039      	str	r1, [r7, #0]
 800649e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80064a0:	f7ff fe4a 	bl	8006138 <BSP_LCD_GetFont>
 80064a4:	4603      	mov	r3, r0
 80064a6:	88db      	ldrh	r3, [r3, #6]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	fb12 f303 	smulbb	r3, r2, r3
 80064ae:	b299      	uxth	r1, r3
 80064b0:	2303      	movs	r3, #3
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	2000      	movs	r0, #0
 80064b6:	f7ff ff25 	bl	8006304 <BSP_LCD_DisplayStringAt>
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80064c4:	b5b0      	push	{r4, r5, r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	4603      	mov	r3, r0
 80064cc:	80fb      	strh	r3, [r7, #6]
 80064ce:	460b      	mov	r3, r1
 80064d0:	80bb      	strh	r3, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80064da:	4b16      	ldr	r3, [pc, #88]	@ (8006534 <BSP_LCD_DrawHLine+0x70>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a16      	ldr	r2, [pc, #88]	@ (8006538 <BSP_LCD_DrawHLine+0x74>)
 80064e0:	2134      	movs	r1, #52	@ 0x34
 80064e2:	fb01 f303 	mul.w	r3, r1, r3
 80064e6:	4413      	add	r3, r2
 80064e8:	335c      	adds	r3, #92	@ 0x5c
 80064ea:	681c      	ldr	r4, [r3, #0]
 80064ec:	f7ff fd50 	bl	8005f90 <BSP_LCD_GetXSize>
 80064f0:	4602      	mov	r2, r0
 80064f2:	88bb      	ldrh	r3, [r7, #4]
 80064f4:	fb03 f202 	mul.w	r2, r3, r2
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4423      	add	r3, r4
 8006500:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8006502:	4b0c      	ldr	r3, [pc, #48]	@ (8006534 <BSP_LCD_DrawHLine+0x70>)
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	68f9      	ldr	r1, [r7, #12]
 8006508:	887c      	ldrh	r4, [r7, #2]
 800650a:	4b0a      	ldr	r3, [pc, #40]	@ (8006534 <BSP_LCD_DrawHLine+0x70>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4d0b      	ldr	r5, [pc, #44]	@ (800653c <BSP_LCD_DrawHLine+0x78>)
 8006510:	4613      	mov	r3, r2
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	442b      	add	r3, r5
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	2300      	movs	r3, #0
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	2301      	movs	r3, #1
 8006524:	4622      	mov	r2, r4
 8006526:	f000 fe65 	bl	80071f4 <LL_FillBuffer>
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bdb0      	pop	{r4, r5, r7, pc}
 8006532:	bf00      	nop
 8006534:	2000887c 	.word	0x2000887c
 8006538:	200087b4 	.word	0x200087b4
 800653c:	20008880 	.word	0x20008880

08006540 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006542:	b087      	sub	sp, #28
 8006544:	af02      	add	r7, sp, #8
 8006546:	4603      	mov	r3, r0
 8006548:	80fb      	strh	r3, [r7, #6]
 800654a:	460b      	mov	r3, r1
 800654c:	80bb      	strh	r3, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006556:	4b18      	ldr	r3, [pc, #96]	@ (80065b8 <BSP_LCD_DrawVLine+0x78>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a18      	ldr	r2, [pc, #96]	@ (80065bc <BSP_LCD_DrawVLine+0x7c>)
 800655c:	2134      	movs	r1, #52	@ 0x34
 800655e:	fb01 f303 	mul.w	r3, r1, r3
 8006562:	4413      	add	r3, r2
 8006564:	335c      	adds	r3, #92	@ 0x5c
 8006566:	681c      	ldr	r4, [r3, #0]
 8006568:	f7ff fd12 	bl	8005f90 <BSP_LCD_GetXSize>
 800656c:	4602      	mov	r2, r0
 800656e:	88bb      	ldrh	r3, [r7, #4]
 8006570:	fb03 f202 	mul.w	r2, r3, r2
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4423      	add	r3, r4
 800657c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800657e:	4b0e      	ldr	r3, [pc, #56]	@ (80065b8 <BSP_LCD_DrawVLine+0x78>)
 8006580:	681c      	ldr	r4, [r3, #0]
 8006582:	68fd      	ldr	r5, [r7, #12]
 8006584:	887e      	ldrh	r6, [r7, #2]
 8006586:	f7ff fd03 	bl	8005f90 <BSP_LCD_GetXSize>
 800658a:	4603      	mov	r3, r0
 800658c:	1e59      	subs	r1, r3, #1
 800658e:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <BSP_LCD_DrawVLine+0x78>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	480b      	ldr	r0, [pc, #44]	@ (80065c0 <BSP_LCD_DrawVLine+0x80>)
 8006594:	4613      	mov	r3, r2
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4403      	add	r3, r0
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	9100      	str	r1, [sp, #0]
 80065a4:	4633      	mov	r3, r6
 80065a6:	2201      	movs	r2, #1
 80065a8:	4629      	mov	r1, r5
 80065aa:	4620      	mov	r0, r4
 80065ac:	f000 fe22 	bl	80071f4 <LL_FillBuffer>
}
 80065b0:	bf00      	nop
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065b8:	2000887c 	.word	0x2000887c
 80065bc:	200087b4 	.word	0x200087b4
 80065c0:	20008880 	.word	0x20008880

080065c4 <BSP_LCD_DrawLine>:
  * @param  y1: Point 1 Y position
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80065c4:	b590      	push	{r4, r7, lr}
 80065c6:	b08b      	sub	sp, #44	@ 0x2c
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4604      	mov	r4, r0
 80065cc:	4608      	mov	r0, r1
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	4623      	mov	r3, r4
 80065d4:	80fb      	strh	r3, [r7, #6]
 80065d6:	4603      	mov	r3, r0
 80065d8:	80bb      	strh	r3, [r7, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	807b      	strh	r3, [r7, #2]
 80065de:	4613      	mov	r3, r2
 80065e0:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 80065e2:	2300      	movs	r3, #0
 80065e4:	823b      	strh	r3, [r7, #16]
 80065e6:	2300      	movs	r3, #0
 80065e8:	81fb      	strh	r3, [r7, #14]
 80065ea:	2300      	movs	r3, #0
 80065ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80065ee:	2300      	movs	r3, #0
 80065f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80065f2:	2300      	movs	r3, #0
 80065f4:	847b      	strh	r3, [r7, #34]	@ 0x22
 80065f6:	2300      	movs	r3, #0
 80065f8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 80065fa:	2300      	movs	r3, #0
 80065fc:	83fb      	strh	r3, [r7, #30]
 80065fe:	2300      	movs	r3, #0
 8006600:	83bb      	strh	r3, [r7, #28]
 8006602:	2300      	movs	r3, #0
 8006604:	837b      	strh	r3, [r7, #26]
 8006606:	2300      	movs	r3, #0
 8006608:	833b      	strh	r3, [r7, #24]
 800660a:	2300      	movs	r3, #0
 800660c:	82fb      	strh	r3, [r7, #22]
 800660e:	2300      	movs	r3, #0
 8006610:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	827b      	strh	r3, [r7, #18]

  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8006616:	887a      	ldrh	r2, [r7, #2]
 8006618:	88fb      	ldrh	r3, [r7, #6]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	bfb8      	it	lt
 8006620:	425b      	neglt	r3, r3
 8006622:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8006624:	883a      	ldrh	r2, [r7, #0]
 8006626:	88bb      	ldrh	r3, [r7, #4]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	bfb8      	it	lt
 800662e:	425b      	neglt	r3, r3
 8006630:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = y1;                       /* Start y off at the first pixel */
 8006636:	88bb      	ldrh	r3, [r7, #4]
 8006638:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (x2 >= x1)                 /* The x-values are increasing */
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	429a      	cmp	r2, r3
 8006640:	d304      	bcc.n	800664c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8006642:	2301      	movs	r3, #1
 8006644:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8006646:	2301      	movs	r3, #1
 8006648:	843b      	strh	r3, [r7, #32]
 800664a:	e005      	b.n	8006658 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800664c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006650:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8006652:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006656:	843b      	strh	r3, [r7, #32]
  }

  if (y2 >= y1)                 /* The y-values are increasing */
 8006658:	883a      	ldrh	r2, [r7, #0]
 800665a:	88bb      	ldrh	r3, [r7, #4]
 800665c:	429a      	cmp	r2, r3
 800665e:	d304      	bcc.n	800666a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8006660:	2301      	movs	r3, #1
 8006662:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8006664:	2301      	movs	r3, #1
 8006666:	83bb      	strh	r3, [r7, #28]
 8006668:	e005      	b.n	8006676 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800666a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800666e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8006670:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006674:	83bb      	strh	r3, [r7, #28]
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8006676:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800667a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800667e:	429a      	cmp	r2, r3
 8006680:	db10      	blt.n	80066a4 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8006682:	2300      	movs	r3, #0
 8006684:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8006686:	2300      	movs	r3, #0
 8006688:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800668a:	8a3b      	ldrh	r3, [r7, #16]
 800668c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800668e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006692:	0fda      	lsrs	r2, r3, #31
 8006694:	4413      	add	r3, r2
 8006696:	105b      	asrs	r3, r3, #1
 8006698:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800669a:	89fb      	ldrh	r3, [r7, #14]
 800669c:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800669e:	8a3b      	ldrh	r3, [r7, #16]
 80066a0:	82bb      	strh	r3, [r7, #20]
 80066a2:	e00f      	b.n	80066c4 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80066a4:	2300      	movs	r3, #0
 80066a6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80066a8:	2300      	movs	r3, #0
 80066aa:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80066ac:	89fb      	ldrh	r3, [r7, #14]
 80066ae:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80066b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066b4:	0fda      	lsrs	r2, r3, #31
 80066b6:	4413      	add	r3, r2
 80066b8:	105b      	asrs	r3, r3, #1
 80066ba:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80066bc:	8a3b      	ldrh	r3, [r7, #16]
 80066be:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80066c0:	89fb      	ldrh	r3, [r7, #14]
 80066c2:	82bb      	strh	r3, [r7, #20]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80066c4:	2300      	movs	r3, #0
 80066c6:	827b      	strh	r3, [r7, #18]
 80066c8:	e037      	b.n	800673a <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80066ca:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80066cc:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80066ce:	4b20      	ldr	r3, [pc, #128]	@ (8006750 <BSP_LCD_DrawLine+0x18c>)
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4c20      	ldr	r4, [pc, #128]	@ (8006754 <BSP_LCD_DrawLine+0x190>)
 80066d4:	4613      	mov	r3, r2
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4423      	add	r3, r4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	f000 fbeb 	bl	8006ebc <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80066e6:	8b3a      	ldrh	r2, [r7, #24]
 80066e8:	8afb      	ldrh	r3, [r7, #22]
 80066ea:	4413      	add	r3, r2
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80066f0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80066f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	db0e      	blt.n	800671a <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 80066fc:	8b3a      	ldrh	r2, [r7, #24]
 80066fe:	8b7b      	ldrh	r3, [r7, #26]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	b29b      	uxth	r3, r3
 8006704:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8006706:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006708:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800670a:	4413      	add	r3, r2
 800670c:	b29b      	uxth	r3, r3
 800670e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8006710:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006712:	8bfb      	ldrh	r3, [r7, #30]
 8006714:	4413      	add	r3, r2
 8006716:	b29b      	uxth	r3, r3
 8006718:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800671a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800671c:	8c3b      	ldrh	r3, [r7, #32]
 800671e:	4413      	add	r3, r2
 8006720:	b29b      	uxth	r3, r3
 8006722:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8006724:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006726:	8bbb      	ldrh	r3, [r7, #28]
 8006728:	4413      	add	r3, r2
 800672a:	b29b      	uxth	r3, r3
 800672c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800672e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006732:	b29b      	uxth	r3, r3
 8006734:	3301      	adds	r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	827b      	strh	r3, [r7, #18]
 800673a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800673e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006742:	429a      	cmp	r2, r3
 8006744:	ddc1      	ble.n	80066ca <BSP_LCD_DrawLine+0x106>
  }
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	372c      	adds	r7, #44	@ 0x2c
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}
 8006750:	2000887c 	.word	0x2000887c
 8006754:	20008880 	.word	0x20008880

08006758 <BSP_LCD_DrawRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8006758:	b590      	push	{r4, r7, lr}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	4604      	mov	r4, r0
 8006760:	4608      	mov	r0, r1
 8006762:	4611      	mov	r1, r2
 8006764:	461a      	mov	r2, r3
 8006766:	4623      	mov	r3, r4
 8006768:	80fb      	strh	r3, [r7, #6]
 800676a:	4603      	mov	r3, r0
 800676c:	80bb      	strh	r3, [r7, #4]
 800676e:	460b      	mov	r3, r1
 8006770:	807b      	strh	r3, [r7, #2]
 8006772:	4613      	mov	r3, r2
 8006774:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8006776:	887a      	ldrh	r2, [r7, #2]
 8006778:	88b9      	ldrh	r1, [r7, #4]
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	4618      	mov	r0, r3
 800677e:	f7ff fea1 	bl	80064c4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8006782:	88ba      	ldrh	r2, [r7, #4]
 8006784:	883b      	ldrh	r3, [r7, #0]
 8006786:	4413      	add	r3, r2
 8006788:	b299      	uxth	r1, r3
 800678a:	887a      	ldrh	r2, [r7, #2]
 800678c:	88fb      	ldrh	r3, [r7, #6]
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fe98 	bl	80064c4 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8006794:	883a      	ldrh	r2, [r7, #0]
 8006796:	88b9      	ldrh	r1, [r7, #4]
 8006798:	88fb      	ldrh	r3, [r7, #6]
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fed0 	bl	8006540 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80067a0:	88fa      	ldrh	r2, [r7, #6]
 80067a2:	887b      	ldrh	r3, [r7, #2]
 80067a4:	4413      	add	r3, r2
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	883a      	ldrh	r2, [r7, #0]
 80067aa:	88b9      	ldrh	r1, [r7, #4]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff fec7 	bl	8006540 <BSP_LCD_DrawVLine>
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd90      	pop	{r4, r7, pc}
	...

080067bc <BSP_LCD_DrawCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80067bc:	b590      	push	{r4, r7, lr}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	80fb      	strh	r3, [r7, #6]
 80067c6:	460b      	mov	r3, r1
 80067c8:	80bb      	strh	r3, [r7, #4]
 80067ca:	4613      	mov	r3, r2
 80067cc:	807b      	strh	r3, [r7, #2]
  int32_t   D;    /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 80067ce:	887b      	ldrh	r3, [r7, #2]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	f1c3 0303 	rsb	r3, r3, #3
 80067d6:	617b      	str	r3, [r7, #20]
  CurX = 0;
 80067d8:	2300      	movs	r3, #0
 80067da:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80067dc:	887b      	ldrh	r3, [r7, #2]
 80067de:	60fb      	str	r3, [r7, #12]

  while (CurX <= CurY)
 80067e0:	e0c7      	b.n	8006972 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	4413      	add	r3, r2
 80067ea:	b298      	uxth	r0, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	88ba      	ldrh	r2, [r7, #4]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	b299      	uxth	r1, r3
 80067f6:	4b64      	ldr	r3, [pc, #400]	@ (8006988 <BSP_LCD_DrawCircle+0x1cc>)
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4c64      	ldr	r4, [pc, #400]	@ (800698c <BSP_LCD_DrawCircle+0x1d0>)
 80067fc:	4613      	mov	r3, r2
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4423      	add	r3, r4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	f000 fb57 	bl	8006ebc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp[ActiveLayer].TextColor);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	b29b      	uxth	r3, r3
 8006812:	88fa      	ldrh	r2, [r7, #6]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	b298      	uxth	r0, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	b29b      	uxth	r3, r3
 800681c:	88ba      	ldrh	r2, [r7, #4]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	b299      	uxth	r1, r3
 8006822:	4b59      	ldr	r3, [pc, #356]	@ (8006988 <BSP_LCD_DrawCircle+0x1cc>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4c59      	ldr	r4, [pc, #356]	@ (800698c <BSP_LCD_DrawCircle+0x1d0>)
 8006828:	4613      	mov	r3, r2
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4423      	add	r3, r4
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	f000 fb41 	bl	8006ebc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	b29a      	uxth	r2, r3
 800683e:	88fb      	ldrh	r3, [r7, #6]
 8006840:	4413      	add	r3, r2
 8006842:	b298      	uxth	r0, r3
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	b29b      	uxth	r3, r3
 8006848:	88ba      	ldrh	r2, [r7, #4]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	b299      	uxth	r1, r3
 800684e:	4b4e      	ldr	r3, [pc, #312]	@ (8006988 <BSP_LCD_DrawCircle+0x1cc>)
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4c4e      	ldr	r4, [pc, #312]	@ (800698c <BSP_LCD_DrawCircle+0x1d0>)
 8006854:	4613      	mov	r3, r2
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4423      	add	r3, r4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	f000 fb2b 	bl	8006ebc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp[ActiveLayer].TextColor);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	b29b      	uxth	r3, r3
 800686a:	88fa      	ldrh	r2, [r7, #6]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	b298      	uxth	r0, r3
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	b29b      	uxth	r3, r3
 8006874:	88ba      	ldrh	r2, [r7, #4]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	b299      	uxth	r1, r3
 800687a:	4b43      	ldr	r3, [pc, #268]	@ (8006988 <BSP_LCD_DrawCircle+0x1cc>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4c43      	ldr	r4, [pc, #268]	@ (800698c <BSP_LCD_DrawCircle+0x1d0>)
 8006880:	4613      	mov	r3, r2
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	4413      	add	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4423      	add	r3, r4
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	f000 fb15 	bl	8006ebc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	b29a      	uxth	r2, r3
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	4413      	add	r3, r2
 800689a:	b298      	uxth	r0, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	b29a      	uxth	r2, r3
 80068a0:	88bb      	ldrh	r3, [r7, #4]
 80068a2:	4413      	add	r3, r2
 80068a4:	b299      	uxth	r1, r3
 80068a6:	4b38      	ldr	r3, [pc, #224]	@ (8006988 <BSP_LCD_DrawCircle+0x1cc>)
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	4c38      	ldr	r4, [pc, #224]	@ (800698c <BSP_LCD_DrawCircle+0x1d0>)
 80068ac:	4613      	mov	r3, r2
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	4423      	add	r3, r4
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	f000 faff 	bl	8006ebc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp[ActiveLayer].TextColor);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	88fa      	ldrh	r2, [r7, #6]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	b298      	uxth	r0, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	88bb      	ldrh	r3, [r7, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	b299      	uxth	r1, r3
 80068d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006988 <BSP_LCD_DrawCircle+0x1cc>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	4c2d      	ldr	r4, [pc, #180]	@ (800698c <BSP_LCD_DrawCircle+0x1d0>)
 80068d8:	4613      	mov	r3, r2
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4423      	add	r3, r4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	f000 fae9 	bl	8006ebc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	88fb      	ldrh	r3, [r7, #6]
 80068f0:	4413      	add	r3, r2
 80068f2:	b298      	uxth	r0, r3
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	88bb      	ldrh	r3, [r7, #4]
 80068fa:	4413      	add	r3, r2
 80068fc:	b299      	uxth	r1, r3
 80068fe:	4b22      	ldr	r3, [pc, #136]	@ (8006988 <BSP_LCD_DrawCircle+0x1cc>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4c22      	ldr	r4, [pc, #136]	@ (800698c <BSP_LCD_DrawCircle+0x1d0>)
 8006904:	4613      	mov	r3, r2
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4423      	add	r3, r4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	f000 fad3 	bl	8006ebc <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp[ActiveLayer].TextColor);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	b29b      	uxth	r3, r3
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	b298      	uxth	r0, r3
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	b29a      	uxth	r2, r3
 8006924:	88bb      	ldrh	r3, [r7, #4]
 8006926:	4413      	add	r3, r2
 8006928:	b299      	uxth	r1, r3
 800692a:	4b17      	ldr	r3, [pc, #92]	@ (8006988 <BSP_LCD_DrawCircle+0x1cc>)
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4c17      	ldr	r4, [pc, #92]	@ (800698c <BSP_LCD_DrawCircle+0x1d0>)
 8006930:	4613      	mov	r3, r2
 8006932:	005b      	lsls	r3, r3, #1
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4423      	add	r3, r4
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	f000 fabd 	bl	8006ebc <BSP_LCD_DrawPixel>

    if (D < 0)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	da06      	bge.n	8006956 <BSP_LCD_DrawCircle+0x19a>
    {
      D += (CurX << 2) + 6;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	009a      	lsls	r2, r3, #2
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	4413      	add	r3, r2
 8006950:	3306      	adds	r3, #6
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e00a      	b.n	800696c <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	009a      	lsls	r2, r3, #2
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4413      	add	r3, r2
 8006962:	330a      	adds	r3, #10
 8006964:	617b      	str	r3, [r7, #20]
      CurY--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3b01      	subs	r3, #1
 800696a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	3301      	adds	r3, #1
 8006970:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	429a      	cmp	r2, r3
 8006978:	f67f af33 	bls.w	80067e2 <BSP_LCD_DrawCircle+0x26>
  }
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	bd90      	pop	{r4, r7, pc}
 8006986:	bf00      	nop
 8006988:	2000887c 	.word	0x2000887c
 800698c:	20008880 	.word	0x20008880

08006990 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8006990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006994:	b086      	sub	sp, #24
 8006996:	af02      	add	r7, sp, #8
 8006998:	4604      	mov	r4, r0
 800699a:	4608      	mov	r0, r1
 800699c:	4611      	mov	r1, r2
 800699e:	461a      	mov	r2, r3
 80069a0:	4623      	mov	r3, r4
 80069a2:	80fb      	strh	r3, [r7, #6]
 80069a4:	4603      	mov	r3, r0
 80069a6:	80bb      	strh	r3, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	807b      	strh	r3, [r7, #2]
 80069ac:	4613      	mov	r3, r2
 80069ae:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80069b4:	4b20      	ldr	r3, [pc, #128]	@ (8006a38 <BSP_LCD_FillRect+0xa8>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4920      	ldr	r1, [pc, #128]	@ (8006a3c <BSP_LCD_FillRect+0xac>)
 80069ba:	4613      	mov	r3, r2
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	440b      	add	r3, r1
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff fb6a 	bl	80060a0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80069cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006a38 <BSP_LCD_FillRect+0xa8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a1b      	ldr	r2, [pc, #108]	@ (8006a40 <BSP_LCD_FillRect+0xb0>)
 80069d2:	2134      	movs	r1, #52	@ 0x34
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	4413      	add	r3, r2
 80069da:	335c      	adds	r3, #92	@ 0x5c
 80069dc:	681c      	ldr	r4, [r3, #0]
 80069de:	f7ff fad7 	bl	8005f90 <BSP_LCD_GetXSize>
 80069e2:	4602      	mov	r2, r0
 80069e4:	88bb      	ldrh	r3, [r7, #4]
 80069e6:	fb03 f202 	mul.w	r2, r3, r2
 80069ea:	88fb      	ldrh	r3, [r7, #6]
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4423      	add	r3, r4
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80069f4:	4b10      	ldr	r3, [pc, #64]	@ (8006a38 <BSP_LCD_FillRect+0xa8>)
 80069f6:	681c      	ldr	r4, [r3, #0]
 80069f8:	68fd      	ldr	r5, [r7, #12]
 80069fa:	887e      	ldrh	r6, [r7, #2]
 80069fc:	f8b7 8000 	ldrh.w	r8, [r7]
 8006a00:	f7ff fac6 	bl	8005f90 <BSP_LCD_GetXSize>
 8006a04:	4602      	mov	r2, r0
 8006a06:	887b      	ldrh	r3, [r7, #2]
 8006a08:	1ad1      	subs	r1, r2, r3
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a38 <BSP_LCD_FillRect+0xa8>)
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	480b      	ldr	r0, [pc, #44]	@ (8006a3c <BSP_LCD_FillRect+0xac>)
 8006a10:	4613      	mov	r3, r2
 8006a12:	005b      	lsls	r3, r3, #1
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4403      	add	r3, r0
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	9100      	str	r1, [sp, #0]
 8006a20:	4643      	mov	r3, r8
 8006a22:	4632      	mov	r2, r6
 8006a24:	4629      	mov	r1, r5
 8006a26:	4620      	mov	r0, r4
 8006a28:	f000 fbe4 	bl	80071f4 <LL_FillBuffer>
}
 8006a2c:	bf00      	nop
 8006a2e:	3710      	adds	r7, #16
 8006a30:	46bd      	mov	sp, r7
 8006a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a36:	bf00      	nop
 8006a38:	2000887c 	.word	0x2000887c
 8006a3c:	20008880 	.word	0x20008880
 8006a40:	200087b4 	.word	0x200087b4

08006a44 <BSP_LCD_FillCircle>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	80fb      	strh	r3, [r7, #6]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	80bb      	strh	r3, [r7, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	807b      	strh	r3, [r7, #2]
  int32_t  D;     /* Decision Variable */
  uint32_t  CurX; /* Current X Value */
  uint32_t  CurY; /* Current Y Value */

  D = 3 - (Radius << 1);
 8006a56:	887b      	ldrh	r3, [r7, #2]
 8006a58:	005b      	lsls	r3, r3, #1
 8006a5a:	f1c3 0303 	rsb	r3, r3, #3
 8006a5e:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006a68:	4b44      	ldr	r3, [pc, #272]	@ (8006b7c <BSP_LCD_FillCircle+0x138>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	4944      	ldr	r1, [pc, #272]	@ (8006b80 <BSP_LCD_FillCircle+0x13c>)
 8006a6e:	4613      	mov	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4413      	add	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff fb10 	bl	80060a0 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8006a80:	e061      	b.n	8006b46 <BSP_LCD_FillCircle+0x102>
  {
    if(CurY > 0)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d021      	beq.n	8006acc <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	88fa      	ldrh	r2, [r7, #6]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	b298      	uxth	r0, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	88bb      	ldrh	r3, [r7, #4]
 8006a98:	4413      	add	r3, r2
 8006a9a:	b299      	uxth	r1, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	f7ff fd0d 	bl	80064c4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	88fa      	ldrh	r2, [r7, #6]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	b298      	uxth	r0, r3
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	88ba      	ldrh	r2, [r7, #4]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	b299      	uxth	r1, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f7ff fcfc 	bl	80064c4 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d021      	beq.n	8006b16 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	b298      	uxth	r0, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	88ba      	ldrh	r2, [r7, #4]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	b299      	uxth	r1, r3
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7ff fce8 	bl	80064c4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	88fa      	ldrh	r2, [r7, #6]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	b298      	uxth	r0, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	88bb      	ldrh	r3, [r7, #4]
 8006b04:	4413      	add	r3, r2
 8006b06:	b299      	uxth	r1, r3
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	f7ff fcd7 	bl	80064c4 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	da06      	bge.n	8006b2a <BSP_LCD_FillCircle+0xe6>
    {
      D += (CurX << 2) + 6;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	009a      	lsls	r2, r3, #2
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	4413      	add	r3, r2
 8006b24:	3306      	adds	r3, #6
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	e00a      	b.n	8006b40 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	009a      	lsls	r2, r3, #2
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	4413      	add	r3, r2
 8006b36:	330a      	adds	r3, #10
 8006b38:	617b      	str	r3, [r7, #20]
      CurY--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	3301      	adds	r3, #1
 8006b44:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d999      	bls.n	8006a82 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b7c <BSP_LCD_FillCircle+0x138>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	490b      	ldr	r1, [pc, #44]	@ (8006b80 <BSP_LCD_FillCircle+0x13c>)
 8006b54:	4613      	mov	r3, r2
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	440b      	add	r3, r1
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fa9d 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8006b66:	887a      	ldrh	r2, [r7, #2]
 8006b68:	88b9      	ldrh	r1, [r7, #4]
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff fe25 	bl	80067bc <BSP_LCD_DrawCircle>
}
 8006b72:	bf00      	nop
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	2000887c 	.word	0x2000887c
 8006b80:	20008880 	.word	0x20008880

08006b84 <BSP_LCD_FillPolygon>:
  * @brief  Draws a full poly-line (between many points) in currently active layer.
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8006b84:	b5b0      	push	{r4, r5, r7, lr}
 8006b86:	b08c      	sub	sp, #48	@ 0x30
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	833b      	strh	r3, [r7, #24]
 8006b94:	2300      	movs	r3, #0
 8006b96:	82fb      	strh	r3, [r7, #22]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	82bb      	strh	r3, [r7, #20]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	827b      	strh	r3, [r7, #18]
 8006ba8:	2300      	movs	r3, #0
 8006baa:	823b      	strh	r3, [r7, #16]
 8006bac:	2300      	movs	r3, #0
 8006bae:	81fb      	strh	r3, [r7, #14]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	81bb      	strh	r3, [r7, #12]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	817b      	strh	r3, [r7, #10]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	843b      	strh	r3, [r7, #32]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	83fb      	strh	r3, [r7, #30]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	83bb      	strh	r3, [r7, #28]
 8006bc8:	2300      	movs	r3, #0
 8006bca:	837b      	strh	r3, [r7, #26]

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bd2:	83fb      	strh	r3, [r7, #30]
 8006bd4:	8bfb      	ldrh	r3, [r7, #30]
 8006bd6:	843b      	strh	r3, [r7, #32]
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006bde:	837b      	strh	r3, [r7, #26]
 8006be0:	8b7b      	ldrh	r3, [r7, #26]
 8006be2:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8006be4:	2301      	movs	r3, #1
 8006be6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006be8:	e02f      	b.n	8006c4a <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 8006bea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	81bb      	strh	r3, [r7, #12]
    if(pixelX < IMAGE_LEFT)
 8006bf8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006bfc:	8c3b      	ldrh	r3, [r7, #32]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	da01      	bge.n	8006c06 <BSP_LCD_FillPolygon+0x82>
    {
      IMAGE_LEFT = pixelX;
 8006c02:	89bb      	ldrh	r3, [r7, #12]
 8006c04:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > IMAGE_RIGHT)
 8006c06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006c0a:	8bfb      	ldrh	r3, [r7, #30]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	dd01      	ble.n	8006c14 <BSP_LCD_FillPolygon+0x90>
    {
      IMAGE_RIGHT = pixelX;
 8006c10:	89bb      	ldrh	r3, [r7, #12]
 8006c12:	83fb      	strh	r3, [r7, #30]
    }

    pixelY = POLY_Y(counter);
 8006c14:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	885b      	ldrh	r3, [r3, #2]
 8006c20:	817b      	strh	r3, [r7, #10]
    if(pixelY < IMAGE_TOP)
 8006c22:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006c26:	8bbb      	ldrh	r3, [r7, #28]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	da01      	bge.n	8006c30 <BSP_LCD_FillPolygon+0xac>
    {
      IMAGE_TOP = pixelY;
 8006c2c:	897b      	ldrh	r3, [r7, #10]
 8006c2e:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > IMAGE_BOTTOM)
 8006c30:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006c34:	8b7b      	ldrh	r3, [r7, #26]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	dd01      	ble.n	8006c3e <BSP_LCD_FillPolygon+0xba>
    {
      IMAGE_BOTTOM = pixelY;
 8006c3a:	897b      	ldrh	r3, [r7, #10]
 8006c3c:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8006c3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3301      	adds	r3, #1
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c4a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8006c4e:	887b      	ldrh	r3, [r7, #2]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	dbca      	blt.n	8006bea <BSP_LCD_FillPolygon+0x66>
    }
  }

  if(PointCount < 2)
 8006c54:	887b      	ldrh	r3, [r7, #2]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d972      	bls.n	8006d40 <BSP_LCD_FillPolygon+0x1bc>
  {
    return;
  }

  X_center = (IMAGE_LEFT + IMAGE_RIGHT)/2;
 8006c5a:	8c3a      	ldrh	r2, [r7, #32]
 8006c5c:	8bfb      	ldrh	r3, [r7, #30]
 8006c5e:	4413      	add	r3, r2
 8006c60:	0fda      	lsrs	r2, r3, #31
 8006c62:	4413      	add	r3, r2
 8006c64:	105b      	asrs	r3, r3, #1
 8006c66:	82bb      	strh	r3, [r7, #20]
  Y_center = (IMAGE_BOTTOM + IMAGE_TOP)/2;
 8006c68:	8b7a      	ldrh	r2, [r7, #26]
 8006c6a:	8bbb      	ldrh	r3, [r7, #28]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	0fda      	lsrs	r2, r3, #31
 8006c70:	4413      	add	r3, r2
 8006c72:	105b      	asrs	r3, r3, #1
 8006c74:	827b      	strh	r3, [r7, #18]

  X_first = Points->X;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	885b      	ldrh	r3, [r3, #2]
 8006c80:	81fb      	strh	r3, [r7, #14]

  while(--PointCount)
 8006c82:	e032      	b.n	8006cea <BSP_LCD_FillPolygon+0x166>
  {
    X = Points->X;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	881b      	ldrh	r3, [r3, #0]
 8006c88:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	885b      	ldrh	r3, [r3, #2]
 8006c8e:	82fb      	strh	r3, [r7, #22]
    Points++;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	3304      	adds	r3, #4
 8006c94:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    Y2 = Points->Y;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	885b      	ldrh	r3, [r3, #2]
 8006ca0:	84bb      	strh	r3, [r7, #36]	@ 0x24

    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8006ca2:	8b38      	ldrh	r0, [r7, #24]
 8006ca4:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8006ca6:	8abc      	ldrh	r4, [r7, #20]
 8006ca8:	8afd      	ldrh	r5, [r7, #22]
 8006caa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cac:	8a7a      	ldrh	r2, [r7, #18]
 8006cae:	9201      	str	r2, [sp, #4]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	4622      	mov	r2, r4
 8006cb6:	f000 f9df 	bl	8007078 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8006cba:	8b38      	ldrh	r0, [r7, #24]
 8006cbc:	8ab9      	ldrh	r1, [r7, #20]
 8006cbe:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8006cc0:	8afd      	ldrh	r5, [r7, #22]
 8006cc2:	8a7b      	ldrh	r3, [r7, #18]
 8006cc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006cc6:	9201      	str	r2, [sp, #4]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	462b      	mov	r3, r5
 8006ccc:	4622      	mov	r2, r4
 8006cce:	f000 f9d3 	bl	8007078 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);
 8006cd2:	8ab8      	ldrh	r0, [r7, #20]
 8006cd4:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8006cd6:	8b3c      	ldrh	r4, [r7, #24]
 8006cd8:	8a7d      	ldrh	r5, [r7, #18]
 8006cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006cdc:	8afa      	ldrh	r2, [r7, #22]
 8006cde:	9201      	str	r2, [sp, #4]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	4622      	mov	r2, r4
 8006ce6:	f000 f9c7 	bl	8007078 <FillTriangle>
  while(--PointCount)
 8006cea:	887b      	ldrh	r3, [r7, #2]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	807b      	strh	r3, [r7, #2]
 8006cf0:	887b      	ldrh	r3, [r7, #2]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1c6      	bne.n	8006c84 <BSP_LCD_FillPolygon+0x100>
  }

  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8006cf6:	8a38      	ldrh	r0, [r7, #16]
 8006cf8:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8006cfa:	8abc      	ldrh	r4, [r7, #20]
 8006cfc:	89fd      	ldrh	r5, [r7, #14]
 8006cfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d00:	8a7a      	ldrh	r2, [r7, #18]
 8006d02:	9201      	str	r2, [sp, #4]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	462b      	mov	r3, r5
 8006d08:	4622      	mov	r2, r4
 8006d0a:	f000 f9b5 	bl	8007078 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8006d0e:	8a38      	ldrh	r0, [r7, #16]
 8006d10:	8ab9      	ldrh	r1, [r7, #20]
 8006d12:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8006d14:	89fd      	ldrh	r5, [r7, #14]
 8006d16:	8a7b      	ldrh	r3, [r7, #18]
 8006d18:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006d1a:	9201      	str	r2, [sp, #4]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	462b      	mov	r3, r5
 8006d20:	4622      	mov	r2, r4
 8006d22:	f000 f9a9 	bl	8007078 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);
 8006d26:	8ab8      	ldrh	r0, [r7, #20]
 8006d28:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8006d2a:	8a3c      	ldrh	r4, [r7, #16]
 8006d2c:	8a7d      	ldrh	r5, [r7, #18]
 8006d2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d30:	89fa      	ldrh	r2, [r7, #14]
 8006d32:	9201      	str	r2, [sp, #4]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	462b      	mov	r3, r5
 8006d38:	4622      	mov	r2, r4
 8006d3a:	f000 f99d 	bl	8007078 <FillTriangle>
 8006d3e:	e000      	b.n	8006d42 <BSP_LCD_FillPolygon+0x1be>
    return;
 8006d40:	bf00      	nop
}
 8006d42:	3728      	adds	r7, #40	@ 0x28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bdb0      	pop	{r4, r5, r7, pc}

08006d48 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d80d      	bhi.n	8006d74 <DSI_IO_WriteCmd+0x2c>
  {
    HAL_DSI_ShortWrite(&hdsi_eval, LCD_Driver_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4613      	mov	r3, r2
 8006d68:	2215      	movs	r2, #21
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	480a      	ldr	r0, [pc, #40]	@ (8006d98 <DSI_IO_WriteCmd+0x50>)
 8006d6e:	f002 fd29 	bl	80097c4 <HAL_DSI_ShortWrite>
  }
  else
  {
    HAL_DSI_LongWrite(&hdsi_eval,  LCD_Driver_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
  }
}
 8006d72:	e00d      	b.n	8006d90 <DSI_IO_WriteCmd+0x48>
    HAL_DSI_LongWrite(&hdsi_eval,  LCD_Driver_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams);
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	9301      	str	r3, [sp, #4]
 8006d82:	9200      	str	r2, [sp, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2239      	movs	r2, #57	@ 0x39
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4803      	ldr	r0, [pc, #12]	@ (8006d98 <DSI_IO_WriteCmd+0x50>)
 8006d8c:	f002 fd3c 	bl	8009808 <HAL_DSI_LongWrite>
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	2000885c 	.word	0x2000885c

08006d9c <DSI_IO_ReadCmd>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
int32_t DSI_IO_ReadCmd(uint32_t Reg, uint8_t *pData, uint32_t Size)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	@ 0x28
 8006da0:	af04      	add	r7, sp, #16
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  int32_t ret = LCD_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hdsi_eval, LCD_Driver_ID, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData)!= HAL_OK)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	9302      	str	r3, [sp, #8]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	2306      	movs	r3, #6
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	4806      	ldr	r0, [pc, #24]	@ (8006dd8 <DSI_IO_ReadCmd+0x3c>)
 8006dc0:	f002 fdba 	bl	8009938 <HAL_DSI_Read>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <DSI_IO_ReadCmd+0x32>
  {
    ret = LCD_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8006dce:	697b      	ldr	r3, [r7, #20]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3718      	adds	r7, #24
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	2000885c 	.word	0x2000885c

08006ddc <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	4b34      	ldr	r3, [pc, #208]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dea:	4a33      	ldr	r2, [pc, #204]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006dec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006df2:	4b31      	ldr	r3, [pc, #196]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8006dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e04:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e08:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8006e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e14:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	4b27      	ldr	r3, [pc, #156]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e1e:	4a26      	ldr	r2, [pc, #152]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e26:	4b24      	ldr	r3, [pc, #144]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8006e32:	4b21      	ldr	r3, [pc, #132]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	4a20      	ldr	r2, [pc, #128]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e3c:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8006e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006e48:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	607b      	str	r3, [r7, #4]
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e52:	4a19      	ldr	r2, [pc, #100]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e5a:	4b17      	ldr	r3, [pc, #92]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8006e66:	4b14      	ldr	r3, [pc, #80]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6a:	4a13      	ldr	r2, [pc, #76]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e70:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8006e72:	4b11      	ldr	r3, [pc, #68]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	4a10      	ldr	r2, [pc, #64]	@ (8006eb8 <BSP_LCD_MspInit+0xdc>)
 8006e78:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8006e7c:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2103      	movs	r1, #3
 8006e82:	2058      	movs	r0, #88	@ 0x58
 8006e84:	f001 f831 	bl	8007eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006e88:	2058      	movs	r0, #88	@ 0x58
 8006e8a:	f001 f84a 	bl	8007f22 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8006e8e:	2200      	movs	r2, #0
 8006e90:	2103      	movs	r1, #3
 8006e92:	205a      	movs	r0, #90	@ 0x5a
 8006e94:	f001 f829 	bl	8007eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006e98:	205a      	movs	r0, #90	@ 0x5a
 8006e9a:	f001 f842 	bl	8007f22 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2103      	movs	r1, #3
 8006ea2:	205c      	movs	r0, #92	@ 0x5c
 8006ea4:	f001 f821 	bl	8007eea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8006ea8:	205c      	movs	r0, #92	@ 0x5c
 8006eaa:	f001 f83a 	bl	8007f22 <HAL_NVIC_EnableIRQ>
}
 8006eae:	bf00      	nop
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40023800 	.word	0x40023800

08006ebc <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8006ebc:	b5b0      	push	{r4, r5, r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	603a      	str	r2, [r7, #0]
 8006ec6:	80fb      	strh	r3, [r7, #6]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_eval.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8006f00 <BSP_LCD_DrawPixel+0x44>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f04 <BSP_LCD_DrawPixel+0x48>)
 8006ed2:	2134      	movs	r1, #52	@ 0x34
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	4413      	add	r3, r2
 8006eda:	335c      	adds	r3, #92	@ 0x5c
 8006edc:	681c      	ldr	r4, [r3, #0]
 8006ede:	88bd      	ldrh	r5, [r7, #4]
 8006ee0:	f7ff f856 	bl	8005f90 <BSP_LCD_GetXSize>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	fb03 f205 	mul.w	r2, r3, r5
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4423      	add	r3, r4
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	6013      	str	r3, [r2, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bdb0      	pop	{r4, r5, r7, pc}
 8006f00:	2000887c 	.word	0x2000887c
 8006f04:	200087b4 	.word	0x200087b4

08006f08 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	603a      	str	r2, [r7, #0]
 8006f12:	80fb      	strh	r3, [r7, #6]
 8006f14:	460b      	mov	r3, r1
 8006f16:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61fb      	str	r3, [r7, #28]
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8006f20:	4b53      	ldr	r3, [pc, #332]	@ (8007070 <DrawChar+0x168>)
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	4953      	ldr	r1, [pc, #332]	@ (8007074 <DrawChar+0x16c>)
 8006f26:	4613      	mov	r3, r2
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	3308      	adds	r3, #8
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	88db      	ldrh	r3, [r3, #6]
 8006f36:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006f38:	4b4d      	ldr	r3, [pc, #308]	@ (8007070 <DrawChar+0x168>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	494d      	ldr	r1, [pc, #308]	@ (8007074 <DrawChar+0x16c>)
 8006f3e:	4613      	mov	r3, r2
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	4413      	add	r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	440b      	add	r3, r1
 8006f48:	3308      	adds	r3, #8
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	889b      	ldrh	r3, [r3, #4]
 8006f4e:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8006f50:	8a3b      	ldrh	r3, [r7, #16]
 8006f52:	3307      	adds	r3, #7
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	da00      	bge.n	8006f5a <DrawChar+0x52>
 8006f58:	3307      	adds	r3, #7
 8006f5a:	10db      	asrs	r3, r3, #3
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	8a3b      	ldrh	r3, [r7, #16]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61fb      	str	r3, [r7, #28]
 8006f6e:	e076      	b.n	800705e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006f70:	8a3b      	ldrh	r3, [r7, #16]
 8006f72:	3307      	adds	r3, #7
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	da00      	bge.n	8006f7a <DrawChar+0x72>
 8006f78:	3307      	adds	r3, #7
 8006f7a:	10db      	asrs	r3, r3, #3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	fb02 f303 	mul.w	r3, r2, r3
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	4413      	add	r3, r2
 8006f88:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8006f8a:	8a3b      	ldrh	r3, [r7, #16]
 8006f8c:	3307      	adds	r3, #7
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	da00      	bge.n	8006f94 <DrawChar+0x8c>
 8006f92:	3307      	adds	r3, #7
 8006f94:	10db      	asrs	r3, r3, #3
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d002      	beq.n	8006fa0 <DrawChar+0x98>
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d004      	beq.n	8006fa8 <DrawChar+0xa0>
 8006f9e:	e00c      	b.n	8006fba <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	617b      	str	r3, [r7, #20]
      break;
 8006fa6:	e016      	b.n	8006fd6 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	3201      	adds	r2, #1
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]
      break;
 8006fb8:	e00d      	b.n	8006fd6 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	041a      	lsls	r2, r3, #16
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	3202      	adds	r2, #2
 8006fce:	7812      	ldrb	r2, [r2, #0]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]
      break;
 8006fd4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	e036      	b.n	800704a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8006fdc:	8a3a      	ldrh	r2, [r7, #16]
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	1ad2      	subs	r2, r2, r3
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2201      	movs	r2, #1
 8006fea:	fa02 f303 	lsl.w	r3, r2, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d012      	beq.n	800701e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	4413      	add	r3, r2
 8007000:	b298      	uxth	r0, r3
 8007002:	4b1b      	ldr	r3, [pc, #108]	@ (8007070 <DrawChar+0x168>)
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	491b      	ldr	r1, [pc, #108]	@ (8007074 <DrawChar+0x16c>)
 8007008:	4613      	mov	r3, r2
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	88bb      	ldrh	r3, [r7, #4]
 8007016:	4619      	mov	r1, r3
 8007018:	f7ff ff50 	bl	8006ebc <BSP_LCD_DrawPixel>
 800701c:	e012      	b.n	8007044 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	b29a      	uxth	r2, r3
 8007022:	88fb      	ldrh	r3, [r7, #6]
 8007024:	4413      	add	r3, r2
 8007026:	b298      	uxth	r0, r3
 8007028:	4b11      	ldr	r3, [pc, #68]	@ (8007070 <DrawChar+0x168>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	4911      	ldr	r1, [pc, #68]	@ (8007074 <DrawChar+0x16c>)
 800702e:	4613      	mov	r3, r2
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3304      	adds	r3, #4
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	88bb      	ldrh	r3, [r7, #4]
 800703e:	4619      	mov	r1, r3
 8007040:	f7ff ff3c 	bl	8006ebc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	3301      	adds	r3, #1
 8007048:	61bb      	str	r3, [r7, #24]
 800704a:	8a3b      	ldrh	r3, [r7, #16]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	429a      	cmp	r2, r3
 8007050:	d3c4      	bcc.n	8006fdc <DrawChar+0xd4>
      }
    }
    Ypos++;
 8007052:	88bb      	ldrh	r3, [r7, #4]
 8007054:	3301      	adds	r3, #1
 8007056:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	3301      	adds	r3, #1
 800705c:	61fb      	str	r3, [r7, #28]
 800705e:	8a7b      	ldrh	r3, [r7, #18]
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	429a      	cmp	r2, r3
 8007064:	d384      	bcc.n	8006f70 <DrawChar+0x68>
  }
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	3720      	adds	r7, #32
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	2000887c 	.word	0x2000887c
 8007074:	20008880 	.word	0x20008880

08007078 <FillTriangle>:
  * @param  y2: Point 2 Y position
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{
 8007078:	b590      	push	{r4, r7, lr}
 800707a:	b08b      	sub	sp, #44	@ 0x2c
 800707c:	af00      	add	r7, sp, #0
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	4611      	mov	r1, r2
 8007084:	461a      	mov	r2, r3
 8007086:	4623      	mov	r3, r4
 8007088:	80fb      	strh	r3, [r7, #6]
 800708a:	4603      	mov	r3, r0
 800708c:	80bb      	strh	r3, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	807b      	strh	r3, [r7, #2]
 8007092:	4613      	mov	r3, r2
 8007094:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8007096:	2300      	movs	r3, #0
 8007098:	823b      	strh	r3, [r7, #16]
 800709a:	2300      	movs	r3, #0
 800709c:	81fb      	strh	r3, [r7, #14]
 800709e:	2300      	movs	r3, #0
 80070a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80070a2:	2300      	movs	r3, #0
 80070a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80070a6:	2300      	movs	r3, #0
 80070a8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80070aa:	2300      	movs	r3, #0
 80070ac:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 80070ae:	2300      	movs	r3, #0
 80070b0:	83fb      	strh	r3, [r7, #30]
 80070b2:	2300      	movs	r3, #0
 80070b4:	83bb      	strh	r3, [r7, #28]
 80070b6:	2300      	movs	r3, #0
 80070b8:	837b      	strh	r3, [r7, #26]
 80070ba:	2300      	movs	r3, #0
 80070bc:	833b      	strh	r3, [r7, #24]
 80070be:	2300      	movs	r3, #0
 80070c0:	82fb      	strh	r3, [r7, #22]
 80070c2:	2300      	movs	r3, #0
 80070c4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	827b      	strh	r3, [r7, #18]

  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80070ca:	88ba      	ldrh	r2, [r7, #4]
 80070cc:	88fb      	ldrh	r3, [r7, #6]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bfb8      	it	lt
 80070d4:	425b      	neglt	r3, r3
 80070d6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80070d8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80070da:	883b      	ldrh	r3, [r7, #0]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	bfb8      	it	lt
 80070e2:	425b      	neglt	r3, r3
 80070e4:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = y1;                       /* Start y off at the first pixel */
 80070ea:	883b      	ldrh	r3, [r7, #0]
 80070ec:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (x2 >= x1)                 /* The x-values are increasing */
 80070ee:	88ba      	ldrh	r2, [r7, #4]
 80070f0:	88fb      	ldrh	r3, [r7, #6]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d304      	bcc.n	8007100 <FillTriangle+0x88>
  {
    xinc1 = 1;
 80070f6:	2301      	movs	r3, #1
 80070f8:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 80070fa:	2301      	movs	r3, #1
 80070fc:	843b      	strh	r3, [r7, #32]
 80070fe:	e005      	b.n	800710c <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8007100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007104:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8007106:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800710a:	843b      	strh	r3, [r7, #32]
  }

  if (y2 >= y1)                 /* The y-values are increasing */
 800710c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800710e:	883b      	ldrh	r3, [r7, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d304      	bcc.n	800711e <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8007114:	2301      	movs	r3, #1
 8007116:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8007118:	2301      	movs	r3, #1
 800711a:	83bb      	strh	r3, [r7, #28]
 800711c:	e005      	b.n	800712a <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800711e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007122:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8007124:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007128:	83bb      	strh	r3, [r7, #28]
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800712a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800712e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007132:	429a      	cmp	r2, r3
 8007134:	db10      	blt.n	8007158 <FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8007136:	2300      	movs	r3, #0
 8007138:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800713a:	2300      	movs	r3, #0
 800713c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800713e:	8a3b      	ldrh	r3, [r7, #16]
 8007140:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8007142:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007146:	0fda      	lsrs	r2, r3, #31
 8007148:	4413      	add	r3, r2
 800714a:	105b      	asrs	r3, r3, #1
 800714c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800714e:	89fb      	ldrh	r3, [r7, #14]
 8007150:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8007152:	8a3b      	ldrh	r3, [r7, #16]
 8007154:	82bb      	strh	r3, [r7, #20]
 8007156:	e00f      	b.n	8007178 <FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8007158:	2300      	movs	r3, #0
 800715a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800715c:	2300      	movs	r3, #0
 800715e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8007160:	89fb      	ldrh	r3, [r7, #14]
 8007162:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8007164:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007168:	0fda      	lsrs	r2, r3, #31
 800716a:	4413      	add	r3, r2
 800716c:	105b      	asrs	r3, r3, #1
 800716e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8007170:	8a3b      	ldrh	r3, [r7, #16]
 8007172:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8007174:	89fb      	ldrh	r3, [r7, #14]
 8007176:	82bb      	strh	r3, [r7, #20]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8007178:	2300      	movs	r3, #0
 800717a:	827b      	strh	r3, [r7, #18]
 800717c:	e02f      	b.n	80071de <FillTriangle+0x166>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 800717e:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8007180:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8007182:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007184:	887a      	ldrh	r2, [r7, #2]
 8007186:	f7ff fa1d 	bl	80065c4 <BSP_LCD_DrawLine>

    num += numadd;              /* Increase the numerator by the top of the fraction */
 800718a:	8b3a      	ldrh	r2, [r7, #24]
 800718c:	8afb      	ldrh	r3, [r7, #22]
 800718e:	4413      	add	r3, r2
 8007190:	b29b      	uxth	r3, r3
 8007192:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8007194:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8007198:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800719c:	429a      	cmp	r2, r3
 800719e:	db0e      	blt.n	80071be <FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 80071a0:	8b3a      	ldrh	r2, [r7, #24]
 80071a2:	8b7b      	ldrh	r3, [r7, #26]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 80071aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80071ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80071ae:	4413      	add	r3, r2
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;               /* Change the y as appropriate */
 80071b4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071b6:	8bfb      	ldrh	r3, [r7, #30]
 80071b8:	4413      	add	r3, r2
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80071be:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80071c0:	8c3b      	ldrh	r3, [r7, #32]
 80071c2:	4413      	add	r3, r2
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80071c8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80071ca:	8bbb      	ldrh	r3, [r7, #28]
 80071cc:	4413      	add	r3, r2
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80071d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	3301      	adds	r3, #1
 80071da:	b29b      	uxth	r3, r3
 80071dc:	827b      	strh	r3, [r7, #18]
 80071de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80071e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	ddc9      	ble.n	800717e <FillTriangle+0x106>
  }
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	372c      	adds	r7, #44	@ 0x2c
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd90      	pop	{r4, r7, pc}

080071f4 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_eval.Init.Mode         = DMA2D_R2M;
 8007202:	4b16      	ldr	r3, [pc, #88]	@ (800725c <LL_FillBuffer+0x68>)
 8007204:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8007208:	605a      	str	r2, [r3, #4]
  hdma2d_eval.Init.ColorMode    = DMA2D_ARGB8888;
 800720a:	4b14      	ldr	r3, [pc, #80]	@ (800725c <LL_FillBuffer+0x68>)
 800720c:	2200      	movs	r2, #0
 800720e:	609a      	str	r2, [r3, #8]
  hdma2d_eval.Init.OutputOffset = OffLine;
 8007210:	4a12      	ldr	r2, [pc, #72]	@ (800725c <LL_FillBuffer+0x68>)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	60d3      	str	r3, [r2, #12]

  hdma2d_eval.Instance = DMA2D;
 8007216:	4b11      	ldr	r3, [pc, #68]	@ (800725c <LL_FillBuffer+0x68>)
 8007218:	4a11      	ldr	r2, [pc, #68]	@ (8007260 <LL_FillBuffer+0x6c>)
 800721a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_eval) == HAL_OK)
 800721c:	480f      	ldr	r0, [pc, #60]	@ (800725c <LL_FillBuffer+0x68>)
 800721e:	f001 fad9 	bl	80087d4 <HAL_DMA2D_Init>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d115      	bne.n	8007254 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_eval, LayerIndex) == HAL_OK)
 8007228:	68f9      	ldr	r1, [r7, #12]
 800722a:	480c      	ldr	r0, [pc, #48]	@ (800725c <LL_FillBuffer+0x68>)
 800722c:	f001 fc3a 	bl	8008aa4 <HAL_DMA2D_ConfigLayer>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10e      	bne.n	8007254 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_eval, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	69f9      	ldr	r1, [r7, #28]
 8007240:	4806      	ldr	r0, [pc, #24]	@ (800725c <LL_FillBuffer+0x68>)
 8007242:	f001 fb1a 	bl	800887a <HAL_DMA2D_Start>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d103      	bne.n	8007254 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_eval, 10);
 800724c:	210a      	movs	r1, #10
 800724e:	4803      	ldr	r0, [pc, #12]	@ (800725c <LL_FillBuffer+0x68>)
 8007250:	f001 fb3e 	bl	80088d0 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8007254:	bf00      	nop
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20008774 	.word	0x20008774
 8007260:	4002b000 	.word	0x4002b000

08007264 <LCD_ReadType>:
/**
  * @brief  Check if the component ID is correct.
  * @param  Lcd_type Driver Type Control NT35510 or OTM8009A
  */
static LCD_Driver_TypeDef LCD_ReadType(LCD_Driver_TypeDef Lcd_type)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	71fb      	strb	r3, [r7, #7]
  uint16_t read_id;
  /* Read the NT35510 ID */
  read_id = NT35510_ReadID();
 800726e:	f7fc ffc3 	bl	80041f8 <NT35510_ReadID>
 8007272:	4603      	mov	r3, r0
 8007274:	81fb      	strh	r3, [r7, #14]
  if(read_id == NT35510_ID)
 8007276:	89fb      	ldrh	r3, [r7, #14]
 8007278:	2b80      	cmp	r3, #128	@ 0x80
 800727a:	d102      	bne.n	8007282 <LCD_ReadType+0x1e>
  {
    Lcd_type= LCD_CTRL_NT35510;
 800727c:	2300      	movs	r3, #0
 800727e:	71fb      	strb	r3, [r7, #7]
 8007280:	e00b      	b.n	800729a <LCD_ReadType+0x36>
  }
  else
  {
    /* Read the OTM8009A ID */
    read_id = OTM8009A_ReadID();
 8007282:	f7fd fa21 	bl	80046c8 <OTM8009A_ReadID>
 8007286:	4603      	mov	r3, r0
 8007288:	81fb      	strh	r3, [r7, #14]
    if(read_id == OTM8009A_ID)
 800728a:	89fb      	ldrh	r3, [r7, #14]
 800728c:	2b40      	cmp	r3, #64	@ 0x40
 800728e:	d102      	bne.n	8007296 <LCD_ReadType+0x32>
    {
      Lcd_type= LCD_CTRL_OTM8009A;
 8007290:	2301      	movs	r3, #1
 8007292:	71fb      	strb	r3, [r7, #7]
 8007294:	e001      	b.n	800729a <LCD_ReadType+0x36>
    }
    else
    {
      Lcd_type= LCD_CTRL_NONE;
 8007296:	2302      	movs	r3, #2
 8007298:	71fb      	strb	r3, [r7, #7]
    }
  }

  return Lcd_type;
 800729a:	79fb      	ldrb	r3, [r7, #7]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80072a8:	4b29      	ldr	r3, [pc, #164]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 80072aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007354 <BSP_SDRAM_Init+0xb0>)
 80072ac:	601a      	str	r2, [r3, #0]

  /* Timing configuration for 90 MHz as SD clock frequency (System clock is up to 180 MHz) */
  Timing.LoadToActiveDelay    = 2;
 80072ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007358 <BSP_SDRAM_Init+0xb4>)
 80072b0:	2202      	movs	r2, #2
 80072b2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80072b4:	4b28      	ldr	r3, [pc, #160]	@ (8007358 <BSP_SDRAM_Init+0xb4>)
 80072b6:	2207      	movs	r2, #7
 80072b8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80072ba:	4b27      	ldr	r3, [pc, #156]	@ (8007358 <BSP_SDRAM_Init+0xb4>)
 80072bc:	2204      	movs	r2, #4
 80072be:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80072c0:	4b25      	ldr	r3, [pc, #148]	@ (8007358 <BSP_SDRAM_Init+0xb4>)
 80072c2:	2207      	movs	r2, #7
 80072c4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80072c6:	4b24      	ldr	r3, [pc, #144]	@ (8007358 <BSP_SDRAM_Init+0xb4>)
 80072c8:	2202      	movs	r2, #2
 80072ca:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80072cc:	4b22      	ldr	r3, [pc, #136]	@ (8007358 <BSP_SDRAM_Init+0xb4>)
 80072ce:	2202      	movs	r2, #2
 80072d0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80072d2:	4b21      	ldr	r3, [pc, #132]	@ (8007358 <BSP_SDRAM_Init+0xb4>)
 80072d4:	2202      	movs	r2, #2
 80072d6:	619a      	str	r2, [r3, #24]

  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80072d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 80072da:	2200      	movs	r2, #0
 80072dc:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80072de:	4b1c      	ldr	r3, [pc, #112]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80072e4:	4b1a      	ldr	r3, [pc, #104]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 80072e6:	2204      	movs	r2, #4
 80072e8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80072ea:	4b19      	ldr	r3, [pc, #100]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 80072ec:	2220      	movs	r2, #32
 80072ee:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80072f0:	4b17      	ldr	r3, [pc, #92]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 80072f2:	2240      	movs	r2, #64	@ 0x40
 80072f4:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80072f6:	4b16      	ldr	r3, [pc, #88]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 80072f8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80072fc:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80072fe:	4b14      	ldr	r3, [pc, #80]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 8007300:	2200      	movs	r2, #0
 8007302:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8007304:	4b12      	ldr	r3, [pc, #72]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 8007306:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800730a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800730c:	4b10      	ldr	r3, [pc, #64]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 800730e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007312:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8007314:	4b0e      	ldr	r3, [pc, #56]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 8007316:	2200      	movs	r2, #0
 8007318:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&sdramHandle, (void *)NULL);
 800731a:	2100      	movs	r1, #0
 800731c:	480c      	ldr	r0, [pc, #48]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 800731e:	f000 f87f 	bl	8007420 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8007322:	490d      	ldr	r1, [pc, #52]	@ (8007358 <BSP_SDRAM_Init+0xb4>)
 8007324:	480a      	ldr	r0, [pc, #40]	@ (8007350 <BSP_SDRAM_Init+0xac>)
 8007326:	f008 fe19 	bl	800ff5c <HAL_SDRAM_Init>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <BSP_SDRAM_Init+0xb8>)
 8007332:	2201      	movs	r2, #1
 8007334:	701a      	strb	r2, [r3, #0]
 8007336:	e002      	b.n	800733e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8007338:	4b08      	ldr	r3, [pc, #32]	@ (800735c <BSP_SDRAM_Init+0xb8>)
 800733a:	2200      	movs	r2, #0
 800733c:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800733e:	f240 5069 	movw	r0, #1385	@ 0x569
 8007342:	f000 f80d 	bl	8007360 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8007346:	4b05      	ldr	r3, [pc, #20]	@ (800735c <BSP_SDRAM_Init+0xb8>)
 8007348:	781b      	ldrb	r3, [r3, #0]
}
 800734a:	4618      	mov	r0, r3
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	200088d4 	.word	0x200088d4
 8007354:	a0000140 	.word	0xa0000140
 8007358:	20008908 	.word	0x20008908
 800735c:	2000015c 	.word	0x2000015c

08007360 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800736c:	4b2a      	ldr	r3, [pc, #168]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800736e:	2201      	movs	r2, #1
 8007370:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007372:	4b29      	ldr	r3, [pc, #164]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007374:	2210      	movs	r2, #16
 8007376:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007378:	4b27      	ldr	r3, [pc, #156]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800737a:	2201      	movs	r2, #1
 800737c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800737e:	4b26      	ldr	r3, [pc, #152]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007380:	2200      	movs	r2, #0
 8007382:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007384:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007388:	4923      	ldr	r1, [pc, #140]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800738a:	4824      	ldr	r0, [pc, #144]	@ (800741c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800738c:	f008 fe24 	bl	800ffd8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8007390:	2001      	movs	r0, #1
 8007392:	f000 fcab 	bl	8007cec <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8007396:	4b20      	ldr	r3, [pc, #128]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007398:	2202      	movs	r2, #2
 800739a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800739c:	4b1e      	ldr	r3, [pc, #120]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800739e:	2210      	movs	r2, #16
 80073a0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80073a2:	4b1d      	ldr	r3, [pc, #116]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80073a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80073ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80073b2:	4919      	ldr	r1, [pc, #100]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073b4:	4819      	ldr	r0, [pc, #100]	@ (800741c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80073b6:	f008 fe0f 	bl	800ffd8 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80073ba:	4b17      	ldr	r3, [pc, #92]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073bc:	2203      	movs	r2, #3
 80073be:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80073c0:	4b15      	ldr	r3, [pc, #84]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073c2:	2210      	movs	r2, #16
 80073c4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80073c6:	4b14      	ldr	r3, [pc, #80]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073c8:	2208      	movs	r2, #8
 80073ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80073cc:	4b12      	ldr	r3, [pc, #72]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80073d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80073d6:	4910      	ldr	r1, [pc, #64]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073d8:	4810      	ldr	r0, [pc, #64]	@ (800741c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80073da:	f008 fdfd 	bl	800ffd8 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80073de:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80073e2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80073e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073e6:	2204      	movs	r2, #4
 80073e8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80073ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073ec:	2210      	movs	r2, #16
 80073ee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80073f0:	4b09      	ldr	r3, [pc, #36]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073f2:	2201      	movs	r2, #1
 80073f4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a07      	ldr	r2, [pc, #28]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80073fa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80073fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007400:	4905      	ldr	r1, [pc, #20]	@ (8007418 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007402:	4806      	ldr	r0, [pc, #24]	@ (800741c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007404:	f008 fde8 	bl	800ffd8 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount);
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4804      	ldr	r0, [pc, #16]	@ (800741c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800740c:	f008 fe19 	bl	8010042 <HAL_SDRAM_ProgramRefreshRate>
}
 8007410:	bf00      	nop
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20008924 	.word	0x20008924
 800741c:	200088d4 	.word	0x200088d4

08007420 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b090      	sub	sp, #64	@ 0x40
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8104 	beq.w	800763a <BSP_SDRAM_MspInit+0x21a>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8007432:	2300      	movs	r3, #0
 8007434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007436:	4b83      	ldr	r3, [pc, #524]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743a:	4a82      	ldr	r2, [pc, #520]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 800743c:	f043 0301 	orr.w	r3, r3, #1
 8007440:	6393      	str	r3, [r2, #56]	@ 0x38
 8007442:	4b80      	ldr	r3, [pc, #512]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800744c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 800744e:	2300      	movs	r3, #0
 8007450:	627b      	str	r3, [r7, #36]	@ 0x24
 8007452:	4b7c      	ldr	r3, [pc, #496]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007456:	4a7b      	ldr	r2, [pc, #492]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007458:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800745c:	6313      	str	r3, [r2, #48]	@ 0x30
 800745e:	4b79      	ldr	r3, [pc, #484]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007466:	627b      	str	r3, [r7, #36]	@ 0x24
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800746a:	2300      	movs	r3, #0
 800746c:	623b      	str	r3, [r7, #32]
 800746e:	4b75      	ldr	r3, [pc, #468]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007472:	4a74      	ldr	r2, [pc, #464]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007474:	f043 0304 	orr.w	r3, r3, #4
 8007478:	6313      	str	r3, [r2, #48]	@ 0x30
 800747a:	4b72      	ldr	r3, [pc, #456]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 800747c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	623b      	str	r3, [r7, #32]
 8007484:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007486:	2300      	movs	r3, #0
 8007488:	61fb      	str	r3, [r7, #28]
 800748a:	4b6e      	ldr	r3, [pc, #440]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748e:	4a6d      	ldr	r2, [pc, #436]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007490:	f043 0308 	orr.w	r3, r3, #8
 8007494:	6313      	str	r3, [r2, #48]	@ 0x30
 8007496:	4b6b      	ldr	r3, [pc, #428]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	61fb      	str	r3, [r7, #28]
 80074a0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80074a2:	2300      	movs	r3, #0
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	4b67      	ldr	r3, [pc, #412]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074aa:	4a66      	ldr	r2, [pc, #408]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074ac:	f043 0310 	orr.w	r3, r3, #16
 80074b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80074b2:	4b64      	ldr	r3, [pc, #400]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	61bb      	str	r3, [r7, #24]
 80074bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80074be:	2300      	movs	r3, #0
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	4b60      	ldr	r3, [pc, #384]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c6:	4a5f      	ldr	r2, [pc, #380]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074c8:	f043 0320 	orr.w	r3, r3, #32
 80074cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80074ce:	4b5d      	ldr	r3, [pc, #372]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d2:	f003 0320 	and.w	r3, r3, #32
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80074da:	2300      	movs	r3, #0
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	4b59      	ldr	r3, [pc, #356]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e2:	4a58      	ldr	r2, [pc, #352]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80074ea:	4b56      	ldr	r3, [pc, #344]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	4b52      	ldr	r3, [pc, #328]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 80074fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fe:	4a51      	ldr	r2, [pc, #324]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007504:	6313      	str	r3, [r2, #48]	@ 0x30
 8007506:	4b4f      	ldr	r3, [pc, #316]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8007512:	2300      	movs	r3, #0
 8007514:	60bb      	str	r3, [r7, #8]
 8007516:	4b4b      	ldr	r3, [pc, #300]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	4a4a      	ldr	r2, [pc, #296]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 800751c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007520:	6313      	str	r3, [r2, #48]	@ 0x30
 8007522:	4b48      	ldr	r3, [pc, #288]	@ (8007644 <BSP_SDRAM_MspInit+0x224>)
 8007524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800752a:	60bb      	str	r3, [r7, #8]
 800752c:	68bb      	ldr	r3, [r7, #8]

    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800752e:	2302      	movs	r3, #2
 8007530:	633b      	str	r3, [r7, #48]	@ 0x30
    gpio_init_structure.Pull      = GPIO_PULLUP;
 8007532:	2301      	movs	r3, #1
 8007534:	637b      	str	r3, [r7, #52]	@ 0x34
    gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007536:	2302      	movs	r3, #2
 8007538:	63bb      	str	r3, [r7, #56]	@ 0x38
    gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800753a:	230c      	movs	r3, #12
 800753c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOC configuration : PC0 is SDNWE */
    gpio_init_structure.Pin   = GPIO_PIN_0;
 800753e:	2301      	movs	r3, #1
 8007540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007542:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007546:	4619      	mov	r1, r3
 8007548:	483f      	ldr	r0, [pc, #252]	@ (8007648 <BSP_SDRAM_MspInit+0x228>)
 800754a:	f002 fab9 	bl	8009ac0 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800754e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007552:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_14 | GPIO_PIN_15;


    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007554:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007558:	4619      	mov	r1, r3
 800755a:	483c      	ldr	r0, [pc, #240]	@ (800764c <BSP_SDRAM_MspInit+0x22c>)
 800755c:	f002 fab0 	bl	8009ac0 <HAL_GPIO_Init>

    /* GPIOE configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007560:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8007564:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007566:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800756a:	4619      	mov	r1, r3
 800756c:	4838      	ldr	r0, [pc, #224]	@ (8007650 <BSP_SDRAM_MspInit+0x230>)
 800756e:	f002 faa7 	bl	8009ac0 <HAL_GPIO_Init>

    /* GPIOF configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007572:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8007576:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;

    HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800757c:	4619      	mov	r1, r3
 800757e:	4835      	ldr	r0, [pc, #212]	@ (8007654 <BSP_SDRAM_MspInit+0x234>)
 8007580:	f002 fa9e 	bl	8009ac0 <HAL_GPIO_Init>

    /* GPIOG configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007584:	f248 1333 	movw	r3, #33075	@ 0x8133
 8007588:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800758a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800758e:	4619      	mov	r1, r3
 8007590:	4831      	ldr	r0, [pc, #196]	@ (8007658 <BSP_SDRAM_MspInit+0x238>)
 8007592:	f002 fa95 	bl	8009ac0 <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8007596:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 800759a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                                GPIO_PIN_15;
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800759c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80075a0:	4619      	mov	r1, r3
 80075a2:	482e      	ldr	r0, [pc, #184]	@ (800765c <BSP_SDRAM_MspInit+0x23c>)
 80075a4:	f002 fa8c 	bl	8009ac0 <HAL_GPIO_Init>

    /* GPIOI configuration */
    gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80075a8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 80075ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80075ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80075b2:	4619      	mov	r1, r3
 80075b4:	482a      	ldr	r0, [pc, #168]	@ (8007660 <BSP_SDRAM_MspInit+0x240>)
 80075b6:	f002 fa83 	bl	8009ac0 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80075ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075bc:	2200      	movs	r2, #0
 80075be:	605a      	str	r2, [r3, #4]
    dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80075c0:	4b28      	ldr	r3, [pc, #160]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075c2:	2280      	movs	r2, #128	@ 0x80
 80075c4:	609a      	str	r2, [r3, #8]
    dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80075c6:	4b27      	ldr	r3, [pc, #156]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075cc:	60da      	str	r2, [r3, #12]
    dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80075ce:	4b25      	ldr	r3, [pc, #148]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80075d4:	611a      	str	r2, [r3, #16]
    dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80075d6:	4b23      	ldr	r3, [pc, #140]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80075dc:	615a      	str	r2, [r3, #20]
    dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80075de:	4b21      	ldr	r3, [pc, #132]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80075e4:	619a      	str	r2, [r3, #24]
    dma_handle.Init.Mode                = DMA_NORMAL;
 80075e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	61da      	str	r2, [r3, #28]
    dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80075ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80075f2:	621a      	str	r2, [r3, #32]
    dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80075f4:	4b1b      	ldr	r3, [pc, #108]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	625a      	str	r2, [r3, #36]	@ 0x24
    dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80075fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 80075fc:	2203      	movs	r2, #3
 80075fe:	629a      	str	r2, [r3, #40]	@ 0x28
    dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007600:	4b18      	ldr	r3, [pc, #96]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 8007602:	2200      	movs	r2, #0
 8007604:	62da      	str	r2, [r3, #44]	@ 0x2c
    dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8007606:	4b17      	ldr	r3, [pc, #92]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 8007608:	2200      	movs	r2, #0
 800760a:	631a      	str	r2, [r3, #48]	@ 0x30

    dma_handle.Instance = SDRAM_DMAx_STREAM;
 800760c:	4b15      	ldr	r3, [pc, #84]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 800760e:	4a16      	ldr	r2, [pc, #88]	@ (8007668 <BSP_SDRAM_MspInit+0x248>)
 8007610:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a13      	ldr	r2, [pc, #76]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 8007616:	631a      	str	r2, [r3, #48]	@ 0x30
 8007618:	4a12      	ldr	r2, [pc, #72]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dma_handle);
 800761e:	4811      	ldr	r0, [pc, #68]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 8007620:	f000 fd48 	bl	80080b4 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dma_handle);
 8007624:	480f      	ldr	r0, [pc, #60]	@ (8007664 <BSP_SDRAM_MspInit+0x244>)
 8007626:	f000 fc97 	bl	8007f58 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 5, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	2105      	movs	r1, #5
 800762e:	2038      	movs	r0, #56	@ 0x38
 8007630:	f000 fc5b 	bl	8007eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007634:	2038      	movs	r0, #56	@ 0x38
 8007636:	f000 fc74 	bl	8007f22 <HAL_NVIC_EnableIRQ>

  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800763a:	bf00      	nop
 800763c:	3740      	adds	r7, #64	@ 0x40
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800
 8007648:	40020800 	.word	0x40020800
 800764c:	40020c00 	.word	0x40020c00
 8007650:	40021000 	.word	0x40021000
 8007654:	40021400 	.word	0x40021400
 8007658:	40021800 	.word	0x40021800
 800765c:	40021c00 	.word	0x40021c00
 8007660:	40022000 	.word	0x40022000
 8007664:	20008934 	.word	0x20008934
 8007668:	40026410 	.word	0x40026410

0800766c <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	4603      	mov	r3, r0
 8007674:	460a      	mov	r2, r1
 8007676:	80fb      	strh	r3, [r7, #6]
 8007678:	4613      	mov	r3, r2
 800767a:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8007684:	4b25      	ldr	r3, [pc, #148]	@ (800771c <BSP_TS_Init+0xb0>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a25      	ldr	r2, [pc, #148]	@ (8007720 <BSP_TS_Init+0xb4>)
 800768a:	7812      	ldrb	r2, [r2, #0]
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8007690:	4b22      	ldr	r3, [pc, #136]	@ (800771c <BSP_TS_Init+0xb0>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	2054      	movs	r0, #84	@ 0x54
 8007696:	4798      	blx	r3
 8007698:	4603      	mov	r3, r0
 800769a:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 800769c:	7b7b      	ldrb	r3, [r7, #13]
 800769e:	2b11      	cmp	r3, #17
 80076a0:	d009      	beq.n	80076b6 <BSP_TS_Init+0x4a>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 80076a2:	4b1e      	ldr	r3, [pc, #120]	@ (800771c <BSP_TS_Init+0xb0>)
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2070      	movs	r0, #112	@ 0x70
 80076a8:	4798      	blx	r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 80076ae:	4b1c      	ldr	r3, [pc, #112]	@ (8007720 <BSP_TS_Init+0xb4>)
 80076b0:	2270      	movs	r2, #112	@ 0x70
 80076b2:	701a      	strb	r2, [r3, #0]
 80076b4:	e002      	b.n	80076bc <BSP_TS_Init+0x50>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 80076b6:	4b1a      	ldr	r3, [pc, #104]	@ (8007720 <BSP_TS_Init+0xb4>)
 80076b8:	2254      	movs	r2, #84	@ 0x54
 80076ba:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE) || (ts_id2 == FT6X36_ID2_VALUE))
 80076bc:	7b7b      	ldrb	r3, [r7, #13]
 80076be:	2b11      	cmp	r3, #17
 80076c0:	d005      	beq.n	80076ce <BSP_TS_Init+0x62>
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b11      	cmp	r3, #17
 80076c6:	d002      	beq.n	80076ce <BSP_TS_Init+0x62>
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2bd8      	cmp	r3, #216	@ 0xd8
 80076cc:	d11f      	bne.n	800770e <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80076ce:	4b15      	ldr	r3, [pc, #84]	@ (8007724 <BSP_TS_Init+0xb8>)
 80076d0:	4a12      	ldr	r2, [pc, #72]	@ (800771c <BSP_TS_Init+0xb0>)
 80076d2:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80076d4:	88fa      	ldrh	r2, [r7, #6]
 80076d6:	88bb      	ldrh	r3, [r7, #4]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d203      	bcs.n	80076e4 <BSP_TS_Init+0x78>
    {
      ts_orientation = TS_SWAP_NONE;                
 80076dc:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <BSP_TS_Init+0xbc>)
 80076de:	2201      	movs	r2, #1
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	e002      	b.n	80076ea <BSP_TS_Init+0x7e>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80076e4:	4b10      	ldr	r3, [pc, #64]	@ (8007728 <BSP_TS_Init+0xbc>)
 80076e6:	220c      	movs	r2, #12
 80076e8:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d110      	bne.n	8007712 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80076f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007724 <BSP_TS_Init+0xb8>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007720 <BSP_TS_Init+0xb4>)
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	4610      	mov	r0, r2
 80076fc:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80076fe:	4b09      	ldr	r3, [pc, #36]	@ (8007724 <BSP_TS_Init+0xb8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	4a06      	ldr	r2, [pc, #24]	@ (8007720 <BSP_TS_Init+0xb4>)
 8007706:	7812      	ldrb	r2, [r2, #0]
 8007708:	4610      	mov	r0, r2
 800770a:	4798      	blx	r3
    if(ts_status == TS_OK)
 800770c:	e001      	b.n	8007712 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 800770e:	2303      	movs	r3, #3
 8007710:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8007712:	7bfb      	ldrb	r3, [r7, #15]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000064 	.word	0x20000064
 8007720:	20008999 	.word	0x20008999
 8007724:	20008994 	.word	0x20008994
 8007728:	20008998 	.word	0x20008998

0800772c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800772c:	b590      	push	{r4, r7, lr}
 800772e:	b08f      	sub	sp, #60	@ 0x3c
 8007730:	af02      	add	r7, sp, #8
 8007732:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8007734:	2300      	movs	r3, #0
 8007736:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint16_t Raw_y[TS_MAX_NB_TOUCH];
  uint16_t xDiff;
  uint16_t yDiff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]
  uint32_t area = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	613b      	str	r3, [r7, #16]
  uint32_t event = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8007746:	4bab      	ldr	r3, [pc, #684]	@ (80079f4 <BSP_TS_GetState+0x2c8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	4aaa      	ldr	r2, [pc, #680]	@ (80079f8 <BSP_TS_GetState+0x2cc>)
 800774e:	7812      	ldrb	r2, [r2, #0]
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	4603      	mov	r3, r0
 8007756:	461a      	mov	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 8141 	beq.w	80079e8 <BSP_TS_GetState+0x2bc>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8007766:	2300      	movs	r3, #0
 8007768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800776a:	e130      	b.n	80079ce <BSP_TS_GetState+0x2a2>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800776c:	4ba1      	ldr	r3, [pc, #644]	@ (80079f4 <BSP_TS_GetState+0x2c8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	4aa1      	ldr	r2, [pc, #644]	@ (80079f8 <BSP_TS_GetState+0x2cc>)
 8007774:	7812      	ldrb	r2, [r2, #0]
 8007776:	4614      	mov	r4, r2
 8007778:	f107 011c 	add.w	r1, r7, #28
 800777c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800777e:	0052      	lsls	r2, r2, #1
 8007780:	1888      	adds	r0, r1, r2
 8007782:	f107 0118 	add.w	r1, r7, #24
 8007786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007788:	0052      	lsls	r2, r2, #1
 800778a:	440a      	add	r2, r1
 800778c:	4601      	mov	r1, r0
 800778e:	4620      	mov	r0, r4
 8007790:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8007792:	4b9a      	ldr	r3, [pc, #616]	@ (80079fc <BSP_TS_GetState+0x2d0>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	f003 0308 	and.w	r3, r3, #8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d019      	beq.n	80077d2 <BSP_TS_GetState+0xa6>
      {
        tmp = Raw_x[index];
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	005b      	lsls	r3, r3, #1
 80077a2:	3330      	adds	r3, #48	@ 0x30
 80077a4:	443b      	add	r3, r7
 80077a6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80077aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
        Raw_x[index] = Raw_y[index]; 
 80077ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	3330      	adds	r3, #48	@ 0x30
 80077b2:	443b      	add	r3, r7
 80077b4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80077b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	3330      	adds	r3, #48	@ 0x30
 80077be:	443b      	add	r3, r7
 80077c0:	f823 2c14 	strh.w	r2, [r3, #-20]
        Raw_y[index] = tmp;
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	3330      	adds	r3, #48	@ 0x30
 80077ca:	443b      	add	r3, r7
 80077cc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80077ce:	f823 2c18 	strh.w	r2, [r3, #-24]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80077d2:	4b8a      	ldr	r3, [pc, #552]	@ (80079fc <BSP_TS_GetState+0x2d0>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00f      	beq.n	80077fe <BSP_TS_GetState+0xd2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	3330      	adds	r3, #48	@ 0x30
 80077e4:	443b      	add	r3, r7
 80077e6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80077ea:	f5c3 7347 	rsb	r3, r3, #796	@ 0x31c
 80077ee:	3303      	adds	r3, #3
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	3330      	adds	r3, #48	@ 0x30
 80077f8:	443b      	add	r3, r7
 80077fa:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if(ts_orientation & TS_SWAP_Y)
 80077fe:	4b7f      	ldr	r3, [pc, #508]	@ (80079fc <BSP_TS_GetState+0x2d0>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00f      	beq.n	800782a <BSP_TS_GetState+0xfe>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800780a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	3330      	adds	r3, #48	@ 0x30
 8007810:	443b      	add	r3, r7
 8007812:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007816:	f5c3 73ef 	rsb	r3, r3, #478	@ 0x1de
 800781a:	3301      	adds	r3, #1
 800781c:	b29a      	uxth	r2, r3
 800781e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	3330      	adds	r3, #48	@ 0x30
 8007824:	443b      	add	r3, r7
 8007826:	f823 2c18 	strh.w	r2, [r3, #-24]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	3330      	adds	r3, #48	@ 0x30
 8007830:	443b      	add	r3, r7
 8007832:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8007836:	4619      	mov	r1, r3
 8007838:	4a71      	ldr	r2, [pc, #452]	@ (8007a00 <BSP_TS_GetState+0x2d4>)
 800783a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007840:	4299      	cmp	r1, r3
 8007842:	d90d      	bls.n	8007860 <BSP_TS_GetState+0x134>
 8007844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	3330      	adds	r3, #48	@ 0x30
 800784a:	443b      	add	r3, r7
 800784c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8007850:	496b      	ldr	r1, [pc, #428]	@ (8007a00 <BSP_TS_GetState+0x2d4>)
 8007852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007854:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007858:	b29b      	uxth	r3, r3
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	b29b      	uxth	r3, r3
 800785e:	e00c      	b.n	800787a <BSP_TS_GetState+0x14e>
 8007860:	4a67      	ldr	r2, [pc, #412]	@ (8007a00 <BSP_TS_GetState+0x2d4>)
 8007862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007868:	b29a      	uxth	r2, r3
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	005b      	lsls	r3, r3, #1
 800786e:	3330      	adds	r3, #48	@ 0x30
 8007870:	443b      	add	r3, r7
 8007872:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	b29b      	uxth	r3, r3
 800787a:	84bb      	strh	r3, [r7, #36]	@ 0x24
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 800787c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	3330      	adds	r3, #48	@ 0x30
 8007882:	443b      	add	r3, r7
 8007884:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007888:	4619      	mov	r1, r3
 800788a:	4a5e      	ldr	r2, [pc, #376]	@ (8007a04 <BSP_TS_GetState+0x2d8>)
 800788c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007892:	4299      	cmp	r1, r3
 8007894:	d90d      	bls.n	80078b2 <BSP_TS_GetState+0x186>
 8007896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007898:	005b      	lsls	r3, r3, #1
 800789a:	3330      	adds	r3, #48	@ 0x30
 800789c:	443b      	add	r3, r7
 800789e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80078a2:	4958      	ldr	r1, [pc, #352]	@ (8007a04 <BSP_TS_GetState+0x2d8>)
 80078a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	e00c      	b.n	80078cc <BSP_TS_GetState+0x1a0>
 80078b2:	4a54      	ldr	r2, [pc, #336]	@ (8007a04 <BSP_TS_GetState+0x2d8>)
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078be:	005b      	lsls	r3, r3, #1
 80078c0:	3330      	adds	r3, #48	@ 0x30
 80078c2:	443b      	add	r3, r7
 80078c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	847b      	strh	r3, [r7, #34]	@ 0x22

      if ((xDiff + yDiff) > 5)
 80078ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80078d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80078d2:	4413      	add	r3, r2
 80078d4:	2b05      	cmp	r3, #5
 80078d6:	dd15      	ble.n	8007904 <BSP_TS_GetState+0x1d8>
      {
        _x[index] = Raw_x[index];
 80078d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	3330      	adds	r3, #48	@ 0x30
 80078de:	443b      	add	r3, r7
 80078e0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80078e4:	4619      	mov	r1, r3
 80078e6:	4a46      	ldr	r2, [pc, #280]	@ (8007a00 <BSP_TS_GetState+0x2d4>)
 80078e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	3330      	adds	r3, #48	@ 0x30
 80078f4:	443b      	add	r3, r7
 80078f6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80078fa:	4619      	mov	r1, r3
 80078fc:	4a41      	ldr	r2, [pc, #260]	@ (8007a04 <BSP_TS_GetState+0x2d8>)
 80078fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8007904:	4a3e      	ldr	r2, [pc, #248]	@ (8007a00 <BSP_TS_GetState+0x2d4>)
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800790c:	b299      	uxth	r1, r3
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	4413      	add	r3, r2
 8007916:	460a      	mov	r2, r1
 8007918:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800791a:	4a3a      	ldr	r2, [pc, #232]	@ (8007a04 <BSP_TS_GetState+0x2d8>)
 800791c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007922:	b299      	uxth	r1, r3
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4413      	add	r3, r2
 800792c:	460a      	mov	r2, r1
 800792e:	80da      	strh	r2, [r3, #6]

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft6x06_TS_GetTouchInfo(I2C_Address, index, &weight, &area, &event);
 8007930:	4b31      	ldr	r3, [pc, #196]	@ (80079f8 <BSP_TS_GetState+0x2cc>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f107 0110 	add.w	r1, r7, #16
 800793a:	f107 0214 	add.w	r2, r7, #20
 800793e:	f107 030c 	add.w	r3, r7, #12
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	460b      	mov	r3, r1
 8007946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007948:	f7fc f9f2 	bl	8003d30 <ft6x06_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	b2d9      	uxtb	r1, r3
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007954:	4413      	add	r3, r2
 8007956:	330a      	adds	r3, #10
 8007958:	460a      	mov	r2, r1
 800795a:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	b2d9      	uxtb	r1, r3
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007964:	4413      	add	r3, r2
 8007966:	330e      	adds	r3, #14
 8007968:	460a      	mov	r2, r1
 800796a:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b03      	cmp	r3, #3
 8007970:	d826      	bhi.n	80079c0 <BSP_TS_GetState+0x294>
 8007972:	a201      	add	r2, pc, #4	@ (adr r2, 8007978 <BSP_TS_GetState+0x24c>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007989 	.word	0x08007989
 800797c:	08007997 	.word	0x08007997
 8007980:	080079a5 	.word	0x080079a5
 8007984:	080079b3 	.word	0x080079b3
      {
        case FT6206_TOUCH_EVT_FLAG_PRESS_DOWN  :
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798c:	4413      	add	r3, r2
 800798e:	330c      	adds	r3, #12
 8007990:	2201      	movs	r2, #1
 8007992:	701a      	strb	r2, [r3, #0]
          break;
 8007994:	e018      	b.n	80079c8 <BSP_TS_GetState+0x29c>
        case FT6206_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799a:	4413      	add	r3, r2
 800799c:	330c      	adds	r3, #12
 800799e:	2202      	movs	r2, #2
 80079a0:	701a      	strb	r2, [r3, #0]
          break;
 80079a2:	e011      	b.n	80079c8 <BSP_TS_GetState+0x29c>
        case FT6206_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079a8:	4413      	add	r3, r2
 80079aa:	330c      	adds	r3, #12
 80079ac:	2203      	movs	r2, #3
 80079ae:	701a      	strb	r2, [r3, #0]
          break;
 80079b0:	e00a      	b.n	80079c8 <BSP_TS_GetState+0x29c>
        case FT6206_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	4413      	add	r3, r2
 80079b8:	330c      	adds	r3, #12
 80079ba:	2200      	movs	r2, #0
 80079bc:	701a      	strb	r2, [r3, #0]
          break;
 80079be:	e003      	b.n	80079c8 <BSP_TS_GetState+0x29c>
        default :
          ts_status = TS_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 80079c6:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	3301      	adds	r3, #1
 80079cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d6:	4293      	cmp	r3, r2
 80079d8:	f4ff aec8 	bcc.w	800776c <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f813 	bl	8007a08 <BSP_TS_Get_GestureId>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80079e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3734      	adds	r7, #52	@ 0x34
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd90      	pop	{r4, r7, pc}
 80079f4:	20008994 	.word	0x20008994
 80079f8:	20008999 	.word	0x20008999
 80079fc:	20008998 	.word	0x20008998
 8007a00:	2000899c 	.word	0x2000899c
 8007a04:	200089a4 	.word	0x200089a4

08007a08 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft6x06_TS_GetGestureID(I2C_Address, &gestureId);
 8007a18:	4b3b      	ldr	r3, [pc, #236]	@ (8007b08 <BSP_TS_Get_GestureId+0x100>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f107 0308 	add.w	r3, r7, #8
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fc f96a 	bl	8003cfe <ft6x06_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b49      	cmp	r3, #73	@ 0x49
 8007a2e:	d05e      	beq.n	8007aee <BSP_TS_Get_GestureId+0xe6>
 8007a30:	2b49      	cmp	r3, #73	@ 0x49
 8007a32:	d860      	bhi.n	8007af6 <BSP_TS_Get_GestureId+0xee>
 8007a34:	2b1c      	cmp	r3, #28
 8007a36:	d83f      	bhi.n	8007ab8 <BSP_TS_Get_GestureId+0xb0>
 8007a38:	2b1c      	cmp	r3, #28
 8007a3a:	d85c      	bhi.n	8007af6 <BSP_TS_Get_GestureId+0xee>
 8007a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <BSP_TS_Get_GestureId+0x3c>)
 8007a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a42:	bf00      	nop
 8007a44:	08007abf 	.word	0x08007abf
 8007a48:	08007af7 	.word	0x08007af7
 8007a4c:	08007af7 	.word	0x08007af7
 8007a50:	08007af7 	.word	0x08007af7
 8007a54:	08007af7 	.word	0x08007af7
 8007a58:	08007af7 	.word	0x08007af7
 8007a5c:	08007af7 	.word	0x08007af7
 8007a60:	08007af7 	.word	0x08007af7
 8007a64:	08007af7 	.word	0x08007af7
 8007a68:	08007af7 	.word	0x08007af7
 8007a6c:	08007af7 	.word	0x08007af7
 8007a70:	08007af7 	.word	0x08007af7
 8007a74:	08007af7 	.word	0x08007af7
 8007a78:	08007af7 	.word	0x08007af7
 8007a7c:	08007af7 	.word	0x08007af7
 8007a80:	08007af7 	.word	0x08007af7
 8007a84:	08007ac7 	.word	0x08007ac7
 8007a88:	08007af7 	.word	0x08007af7
 8007a8c:	08007af7 	.word	0x08007af7
 8007a90:	08007af7 	.word	0x08007af7
 8007a94:	08007acf 	.word	0x08007acf
 8007a98:	08007af7 	.word	0x08007af7
 8007a9c:	08007af7 	.word	0x08007af7
 8007aa0:	08007af7 	.word	0x08007af7
 8007aa4:	08007ad7 	.word	0x08007ad7
 8007aa8:	08007af7 	.word	0x08007af7
 8007aac:	08007af7 	.word	0x08007af7
 8007ab0:	08007af7 	.word	0x08007af7
 8007ab4:	08007adf 	.word	0x08007adf
 8007ab8:	2b48      	cmp	r3, #72	@ 0x48
 8007aba:	d014      	beq.n	8007ae6 <BSP_TS_Get_GestureId+0xde>
 8007abc:	e01b      	b.n	8007af6 <BSP_TS_Get_GestureId+0xee>
  {
    case FT6206_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	611a      	str	r2, [r3, #16]
      break;
 8007ac4:	e01a      	b.n	8007afc <BSP_TS_Get_GestureId+0xf4>
    case FT6206_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	611a      	str	r2, [r3, #16]
      break;
 8007acc:	e016      	b.n	8007afc <BSP_TS_Get_GestureId+0xf4>
    case FT6206_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	611a      	str	r2, [r3, #16]
      break;
 8007ad4:	e012      	b.n	8007afc <BSP_TS_Get_GestureId+0xf4>
    case FT6206_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2203      	movs	r2, #3
 8007ada:	611a      	str	r2, [r3, #16]
      break;
 8007adc:	e00e      	b.n	8007afc <BSP_TS_Get_GestureId+0xf4>
    case FT6206_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	611a      	str	r2, [r3, #16]
      break;
 8007ae4:	e00a      	b.n	8007afc <BSP_TS_Get_GestureId+0xf4>
    case FT6206_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2205      	movs	r2, #5
 8007aea:	611a      	str	r2, [r3, #16]
      break;
 8007aec:	e006      	b.n	8007afc <BSP_TS_Get_GestureId+0xf4>
    case FT6206_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2206      	movs	r2, #6
 8007af2:	611a      	str	r2, [r3, #16]
      break;
 8007af4:	e002      	b.n	8007afc <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	73fb      	strb	r3, [r7, #15]
      break;
 8007afa:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20008999 	.word	0x20008999

08007b0c <BSP_TS_ResetTouchData>:
  *         of touch information.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if OK, TE_ERROR if problem found.
  */
uint8_t BSP_TS_ResetTouchData(TS_StateTypeDef *TS_State)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint8_t ts_status = TS_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
  uint32_t index;

  if (TS_State != (TS_StateTypeDef *)NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d02e      	beq.n	8007b7c <BSP_TS_ResetTouchData+0x70>
  {
    TS_State->gestureId = GEST_ID_NO_GESTURE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	611a      	str	r2, [r3, #16]
    TS_State->touchDetected = 0;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	701a      	strb	r2, [r3, #0]

    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60bb      	str	r3, [r7, #8]
 8007b2e:	e020      	b.n	8007b72 <BSP_TS_ResetTouchData+0x66>
    {
      TS_State->touchX[index]       = 0;
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	4413      	add	r3, r2
 8007b38:	2200      	movs	r2, #0
 8007b3a:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index]       = 0;
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	4413      	add	r3, r2
 8007b44:	2200      	movs	r2, #0
 8007b46:	80da      	strh	r2, [r3, #6]
      TS_State->touchArea[index]    = 0;
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	330e      	adds	r3, #14
 8007b50:	2200      	movs	r2, #0
 8007b52:	701a      	strb	r2, [r3, #0]
      TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	4413      	add	r3, r2
 8007b5a:	330c      	adds	r3, #12
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	701a      	strb	r2, [r3, #0]
      TS_State->touchWeight[index]  = 0;
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4413      	add	r3, r2
 8007b66:	330a      	adds	r3, #10
 8007b68:	2200      	movs	r2, #0
 8007b6a:	701a      	strb	r2, [r3, #0]
    for(index = 0; index < TS_MAX_NB_TOUCH; index++)
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60bb      	str	r3, [r7, #8]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d9db      	bls.n	8007b30 <BSP_TS_ResetTouchData+0x24>
    }

    ts_status = TS_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]

  } /* of if (TS_State != (TS_StateTypeDef *)NULL) */

  return (ts_status);
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007b90:	4b16      	ldr	r3, [pc, #88]	@ (8007bec <SystemInit+0x60>)
 8007b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b96:	4a15      	ldr	r2, [pc, #84]	@ (8007bec <SystemInit+0x60>)
 8007b98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007ba0:	4b13      	ldr	r3, [pc, #76]	@ (8007bf0 <SystemInit+0x64>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a12      	ldr	r2, [pc, #72]	@ (8007bf0 <SystemInit+0x64>)
 8007ba6:	f043 0301 	orr.w	r3, r3, #1
 8007baa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007bac:	4b10      	ldr	r3, [pc, #64]	@ (8007bf0 <SystemInit+0x64>)
 8007bae:	2200      	movs	r2, #0
 8007bb0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf0 <SystemInit+0x64>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8007bf0 <SystemInit+0x64>)
 8007bb8:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8007bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bc0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf0 <SystemInit+0x64>)
 8007bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8007bf4 <SystemInit+0x68>)
 8007bc6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007bc8:	4b09      	ldr	r3, [pc, #36]	@ (8007bf0 <SystemInit+0x64>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a08      	ldr	r2, [pc, #32]	@ (8007bf0 <SystemInit+0x64>)
 8007bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007bd4:	4b06      	ldr	r3, [pc, #24]	@ (8007bf0 <SystemInit+0x64>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007bda:	4b04      	ldr	r3, [pc, #16]	@ (8007bec <SystemInit+0x60>)
 8007bdc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007be0:	609a      	str	r2, [r3, #8]
#endif
}
 8007be2:	bf00      	nop
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	e000ed00 	.word	0xe000ed00
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	24003010 	.word	0x24003010

08007bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8007c38 <HAL_Init+0x40>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a0d      	ldr	r2, [pc, #52]	@ (8007c38 <HAL_Init+0x40>)
 8007c02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c08:	4b0b      	ldr	r3, [pc, #44]	@ (8007c38 <HAL_Init+0x40>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8007c38 <HAL_Init+0x40>)
 8007c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c14:	4b08      	ldr	r3, [pc, #32]	@ (8007c38 <HAL_Init+0x40>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a07      	ldr	r2, [pc, #28]	@ (8007c38 <HAL_Init+0x40>)
 8007c1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c20:	2003      	movs	r0, #3
 8007c22:	f000 f957 	bl	8007ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c26:	200f      	movs	r0, #15
 8007c28:	f000 f810 	bl	8007c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c2c:	f000 f806 	bl	8007c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	40023c00 	.word	0x40023c00

08007c3c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007c54:	4b12      	ldr	r3, [pc, #72]	@ (8007ca0 <HAL_InitTick+0x54>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	4b12      	ldr	r3, [pc, #72]	@ (8007ca4 <HAL_InitTick+0x58>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f967 	bl	8007f3e <HAL_SYSTICK_Config>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e00e      	b.n	8007c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b0f      	cmp	r3, #15
 8007c7e:	d80a      	bhi.n	8007c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c80:	2200      	movs	r2, #0
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	f000 f92f 	bl	8007eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007c8c:	4a06      	ldr	r2, [pc, #24]	@ (8007ca8 <HAL_InitTick+0x5c>)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	e000      	b.n	8007c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3708      	adds	r7, #8
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000160 	.word	0x20000160
 8007ca4:	20000168 	.word	0x20000168
 8007ca8:	20000164 	.word	0x20000164

08007cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007cac:	b480      	push	{r7}
 8007cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007cb0:	4b06      	ldr	r3, [pc, #24]	@ (8007ccc <HAL_IncTick+0x20>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4b06      	ldr	r3, [pc, #24]	@ (8007cd0 <HAL_IncTick+0x24>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4413      	add	r3, r2
 8007cbc:	4a04      	ldr	r2, [pc, #16]	@ (8007cd0 <HAL_IncTick+0x24>)
 8007cbe:	6013      	str	r3, [r2, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20000168 	.word	0x20000168
 8007cd0:	200089ac 	.word	0x200089ac

08007cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8007cd8:	4b03      	ldr	r3, [pc, #12]	@ (8007ce8 <HAL_GetTick+0x14>)
 8007cda:	681b      	ldr	r3, [r3, #0]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	200089ac 	.word	0x200089ac

08007cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007cf4:	f7ff ffee 	bl	8007cd4 <HAL_GetTick>
 8007cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d04:	d005      	beq.n	8007d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d06:	4b0a      	ldr	r3, [pc, #40]	@ (8007d30 <HAL_Delay+0x44>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007d12:	bf00      	nop
 8007d14:	f7ff ffde 	bl	8007cd4 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d8f7      	bhi.n	8007d14 <HAL_Delay+0x28>
  {
  }
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000168 	.word	0x20000168

08007d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d44:	4b0c      	ldr	r3, [pc, #48]	@ (8007d78 <__NVIC_SetPriorityGrouping+0x44>)
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007d50:	4013      	ands	r3, r2
 8007d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d66:	4a04      	ldr	r2, [pc, #16]	@ (8007d78 <__NVIC_SetPriorityGrouping+0x44>)
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	60d3      	str	r3, [r2, #12]
}
 8007d6c:	bf00      	nop
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	e000ed00 	.word	0xe000ed00

08007d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d80:	4b04      	ldr	r3, [pc, #16]	@ (8007d94 <__NVIC_GetPriorityGrouping+0x18>)
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	f003 0307 	and.w	r3, r3, #7
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	e000ed00 	.word	0xe000ed00

08007d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	db0b      	blt.n	8007dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007daa:	79fb      	ldrb	r3, [r7, #7]
 8007dac:	f003 021f 	and.w	r2, r3, #31
 8007db0:	4907      	ldr	r1, [pc, #28]	@ (8007dd0 <__NVIC_EnableIRQ+0x38>)
 8007db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	2001      	movs	r0, #1
 8007dba:	fa00 f202 	lsl.w	r2, r0, r2
 8007dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	e000e100 	.word	0xe000e100

08007dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	6039      	str	r1, [r7, #0]
 8007dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	db0a      	blt.n	8007dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	490c      	ldr	r1, [pc, #48]	@ (8007e20 <__NVIC_SetPriority+0x4c>)
 8007dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007df2:	0112      	lsls	r2, r2, #4
 8007df4:	b2d2      	uxtb	r2, r2
 8007df6:	440b      	add	r3, r1
 8007df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007dfc:	e00a      	b.n	8007e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	b2da      	uxtb	r2, r3
 8007e02:	4908      	ldr	r1, [pc, #32]	@ (8007e24 <__NVIC_SetPriority+0x50>)
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	3b04      	subs	r3, #4
 8007e0c:	0112      	lsls	r2, r2, #4
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	440b      	add	r3, r1
 8007e12:	761a      	strb	r2, [r3, #24]
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	e000e100 	.word	0xe000e100
 8007e24:	e000ed00 	.word	0xe000ed00

08007e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b089      	sub	sp, #36	@ 0x24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f1c3 0307 	rsb	r3, r3, #7
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	bf28      	it	cs
 8007e46:	2304      	movcs	r3, #4
 8007e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	2b06      	cmp	r3, #6
 8007e50:	d902      	bls.n	8007e58 <NVIC_EncodePriority+0x30>
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	3b03      	subs	r3, #3
 8007e56:	e000      	b.n	8007e5a <NVIC_EncodePriority+0x32>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	fa02 f303 	lsl.w	r3, r2, r3
 8007e66:	43da      	mvns	r2, r3
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	401a      	ands	r2, r3
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e70:	f04f 31ff 	mov.w	r1, #4294967295
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7a:	43d9      	mvns	r1, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e80:	4313      	orrs	r3, r2
         );
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3724      	adds	r7, #36	@ 0x24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ea0:	d301      	bcc.n	8007ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e00f      	b.n	8007ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ed0 <SysTick_Config+0x40>)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007eae:	210f      	movs	r1, #15
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	f7ff ff8e 	bl	8007dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007eb8:	4b05      	ldr	r3, [pc, #20]	@ (8007ed0 <SysTick_Config+0x40>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ebe:	4b04      	ldr	r3, [pc, #16]	@ (8007ed0 <SysTick_Config+0x40>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	e000e010 	.word	0xe000e010

08007ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f7ff ff29 	bl	8007d34 <__NVIC_SetPriorityGrouping>
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b086      	sub	sp, #24
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
 8007ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007efc:	f7ff ff3e 	bl	8007d7c <__NVIC_GetPriorityGrouping>
 8007f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	6978      	ldr	r0, [r7, #20]
 8007f08:	f7ff ff8e 	bl	8007e28 <NVIC_EncodePriority>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f12:	4611      	mov	r1, r2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7ff ff5d 	bl	8007dd4 <__NVIC_SetPriority>
}
 8007f1a:	bf00      	nop
 8007f1c:	3718      	adds	r7, #24
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	4603      	mov	r3, r0
 8007f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff ff31 	bl	8007d98 <__NVIC_EnableIRQ>
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff ffa2 	bl	8007e90 <SysTick_Config>
 8007f4c:	4603      	mov	r3, r0
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f64:	f7ff feb6 	bl	8007cd4 <HAL_GetTick>
 8007f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e099      	b.n	80080a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 0201 	bic.w	r2, r2, #1
 8007f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f94:	e00f      	b.n	8007fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f96:	f7ff fe9d 	bl	8007cd4 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	2b05      	cmp	r3, #5
 8007fa2:	d908      	bls.n	8007fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2203      	movs	r2, #3
 8007fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e078      	b.n	80080a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e8      	bne.n	8007f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4b38      	ldr	r3, [pc, #224]	@ (80080b0 <HAL_DMA_Init+0x158>)
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a1b      	ldr	r3, [r3, #32]
 8008000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800c:	2b04      	cmp	r3, #4
 800800e:	d107      	bne.n	8008020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008018:	4313      	orrs	r3, r2
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	4313      	orrs	r3, r2
 800801e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f023 0307 	bic.w	r3, r3, #7
 8008036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008046:	2b04      	cmp	r3, #4
 8008048:	d117      	bne.n	800807a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00e      	beq.n	800807a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb3d 	bl	80086dc <DMA_CheckFifoParam>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d008      	beq.n	800807a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2240      	movs	r2, #64	@ 0x40
 800806c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008076:	2301      	movs	r3, #1
 8008078:	e016      	b.n	80080a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 faf4 	bl	8008670 <DMA_CalcBaseAndBitshift>
 8008088:	4603      	mov	r3, r0
 800808a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008090:	223f      	movs	r2, #63	@ 0x3f
 8008092:	409a      	lsls	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	f010803f 	.word	0xf010803f

080080b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e050      	b.n	8008168 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d101      	bne.n	80080d6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80080d2:	2302      	movs	r3, #2
 80080d4:	e048      	b.n	8008168 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0201 	bic.w	r2, r2, #1
 80080e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2200      	movs	r2, #0
 80080f4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2200      	movs	r2, #0
 80080fc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2200      	movs	r2, #0
 8008104:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2200      	movs	r2, #0
 800810c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2221      	movs	r2, #33	@ 0x21
 8008114:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 faaa 	bl	8008670 <DMA_CalcBaseAndBitshift>
 800811c:	4603      	mov	r3, r0
 800811e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008148:	223f      	movs	r2, #63	@ 0x3f
 800814a:	409a      	lsls	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	607a      	str	r2, [r7, #4]
 800817c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008186:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_DMA_Start_IT+0x26>
 8008192:	2302      	movs	r3, #2
 8008194:	e040      	b.n	8008218 <HAL_DMA_Start_IT+0xa8>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d12f      	bne.n	800820a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68b9      	ldr	r1, [r7, #8]
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fa28 	bl	8008614 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081c8:	223f      	movs	r2, #63	@ 0x3f
 80081ca:	409a      	lsls	r2, r3
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0216 	orr.w	r2, r2, #22
 80081de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d007      	beq.n	80081f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0208 	orr.w	r2, r2, #8
 80081f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	e005      	b.n	8008216 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008212:	2302      	movs	r3, #2
 8008214:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800822c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800822e:	f7ff fd51 	bl	8007cd4 <HAL_GetTick>
 8008232:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d008      	beq.n	8008252 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2280      	movs	r2, #128	@ 0x80
 8008244:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e052      	b.n	80082f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0216 	bic.w	r2, r2, #22
 8008260:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	695a      	ldr	r2, [r3, #20]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008270:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008276:	2b00      	cmp	r3, #0
 8008278:	d103      	bne.n	8008282 <HAL_DMA_Abort+0x62>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 0208 	bic.w	r2, r2, #8
 8008290:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0201 	bic.w	r2, r2, #1
 80082a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082a2:	e013      	b.n	80082cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082a4:	f7ff fd16 	bl	8007cd4 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b05      	cmp	r3, #5
 80082b0:	d90c      	bls.n	80082cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2203      	movs	r2, #3
 80082bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e015      	b.n	80082f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1e4      	bne.n	80082a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082de:	223f      	movs	r2, #63	@ 0x3f
 80082e0:	409a      	lsls	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800830c:	4b8e      	ldr	r3, [pc, #568]	@ (8008548 <HAL_DMA_IRQHandler+0x248>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a8e      	ldr	r2, [pc, #568]	@ (800854c <HAL_DMA_IRQHandler+0x24c>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	0a9b      	lsrs	r3, r3, #10
 8008318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800831e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800832a:	2208      	movs	r2, #8
 800832c:	409a      	lsls	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4013      	ands	r3, r2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01a      	beq.n	800836c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d013      	beq.n	800836c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f022 0204 	bic.w	r2, r2, #4
 8008352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008358:	2208      	movs	r2, #8
 800835a:	409a      	lsls	r2, r3
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008364:	f043 0201 	orr.w	r2, r3, #1
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008370:	2201      	movs	r2, #1
 8008372:	409a      	lsls	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	4013      	ands	r3, r2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d012      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800838e:	2201      	movs	r2, #1
 8008390:	409a      	lsls	r2, r3
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800839a:	f043 0202 	orr.w	r2, r3, #2
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a6:	2204      	movs	r2, #4
 80083a8:	409a      	lsls	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4013      	ands	r3, r2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d012      	beq.n	80083d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0302 	and.w	r3, r3, #2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00b      	beq.n	80083d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083c4:	2204      	movs	r2, #4
 80083c6:	409a      	lsls	r2, r3
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d0:	f043 0204 	orr.w	r2, r3, #4
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083dc:	2210      	movs	r2, #16
 80083de:	409a      	lsls	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4013      	ands	r3, r2
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d043      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d03c      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083fa:	2210      	movs	r2, #16
 80083fc:	409a      	lsls	r2, r3
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d018      	beq.n	8008442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d108      	bne.n	8008430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d024      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
 800842e:	e01f      	b.n	8008470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01b      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	4798      	blx	r3
 8008440:	e016      	b.n	8008470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800844c:	2b00      	cmp	r3, #0
 800844e:	d107      	bne.n	8008460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0208 	bic.w	r2, r2, #8
 800845e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008474:	2220      	movs	r2, #32
 8008476:	409a      	lsls	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4013      	ands	r3, r2
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 808f 	beq.w	80085a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 8087 	beq.w	80085a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008496:	2220      	movs	r2, #32
 8008498:	409a      	lsls	r2, r3
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b05      	cmp	r3, #5
 80084a8:	d136      	bne.n	8008518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 0216 	bic.w	r2, r2, #22
 80084b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695a      	ldr	r2, [r3, #20]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d103      	bne.n	80084da <HAL_DMA_IRQHandler+0x1da>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0208 	bic.w	r2, r2, #8
 80084e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ee:	223f      	movs	r2, #63	@ 0x3f
 80084f0:	409a      	lsls	r2, r3
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800850a:	2b00      	cmp	r3, #0
 800850c:	d07e      	beq.n	800860c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	4798      	blx	r3
        }
        return;
 8008516:	e079      	b.n	800860c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01d      	beq.n	8008562 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10d      	bne.n	8008550 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008538:	2b00      	cmp	r3, #0
 800853a:	d031      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	4798      	blx	r3
 8008544:	e02c      	b.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
 8008546:	bf00      	nop
 8008548:	20000160 	.word	0x20000160
 800854c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d023      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	4798      	blx	r3
 8008560:	e01e      	b.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10f      	bne.n	8008590 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0210 	bic.w	r2, r2, #16
 800857e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008594:	2b00      	cmp	r3, #0
 8008596:	d003      	beq.n	80085a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d032      	beq.n	800860e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d022      	beq.n	80085fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2205      	movs	r2, #5
 80085b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0201 	bic.w	r2, r2, #1
 80085ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	3301      	adds	r3, #1
 80085d0:	60bb      	str	r3, [r7, #8]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d307      	bcc.n	80085e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1f2      	bne.n	80085cc <HAL_DMA_IRQHandler+0x2cc>
 80085e6:	e000      	b.n	80085ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80085e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d005      	beq.n	800860e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
 800860a:	e000      	b.n	800860e <HAL_DMA_IRQHandler+0x30e>
        return;
 800860c:	bf00      	nop
    }
  }
}
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008630:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2b40      	cmp	r3, #64	@ 0x40
 8008640:	d108      	bne.n	8008654 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008652:	e007      	b.n	8008664 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	60da      	str	r2, [r3, #12]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	b2db      	uxtb	r3, r3
 800867e:	3b10      	subs	r3, #16
 8008680:	4a14      	ldr	r2, [pc, #80]	@ (80086d4 <DMA_CalcBaseAndBitshift+0x64>)
 8008682:	fba2 2303 	umull	r2, r3, r2, r3
 8008686:	091b      	lsrs	r3, r3, #4
 8008688:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800868a:	4a13      	ldr	r2, [pc, #76]	@ (80086d8 <DMA_CalcBaseAndBitshift+0x68>)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4413      	add	r3, r2
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b03      	cmp	r3, #3
 800869c:	d909      	bls.n	80086b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80086a6:	f023 0303 	bic.w	r3, r3, #3
 80086aa:	1d1a      	adds	r2, r3, #4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80086b0:	e007      	b.n	80086c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80086ba:	f023 0303 	bic.w	r3, r3, #3
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	aaaaaaab 	.word	0xaaaaaaab
 80086d8:	0802139c 	.word	0x0802139c

080086dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d11f      	bne.n	8008736 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d856      	bhi.n	80087aa <DMA_CheckFifoParam+0xce>
 80086fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008704 <DMA_CheckFifoParam+0x28>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008715 	.word	0x08008715
 8008708:	08008727 	.word	0x08008727
 800870c:	08008715 	.word	0x08008715
 8008710:	080087ab 	.word	0x080087ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008718:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d046      	beq.n	80087ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008724:	e043      	b.n	80087ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800872e:	d140      	bne.n	80087b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008734:	e03d      	b.n	80087b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800873e:	d121      	bne.n	8008784 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b03      	cmp	r3, #3
 8008744:	d837      	bhi.n	80087b6 <DMA_CheckFifoParam+0xda>
 8008746:	a201      	add	r2, pc, #4	@ (adr r2, 800874c <DMA_CheckFifoParam+0x70>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	0800875d 	.word	0x0800875d
 8008750:	08008763 	.word	0x08008763
 8008754:	0800875d 	.word	0x0800875d
 8008758:	08008775 	.word	0x08008775
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
      break;
 8008760:	e030      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d025      	beq.n	80087ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008772:	e022      	b.n	80087ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008778:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800877c:	d11f      	bne.n	80087be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008782:	e01c      	b.n	80087be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d903      	bls.n	8008792 <DMA_CheckFifoParam+0xb6>
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b03      	cmp	r3, #3
 800878e:	d003      	beq.n	8008798 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008790:	e018      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	73fb      	strb	r3, [r7, #15]
      break;
 8008796:	e015      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00e      	beq.n	80087c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
      break;
 80087a8:	e00b      	b.n	80087c2 <DMA_CheckFifoParam+0xe6>
      break;
 80087aa:	bf00      	nop
 80087ac:	e00a      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087ae:	bf00      	nop
 80087b0:	e008      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087b2:	bf00      	nop
 80087b4:	e006      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087b6:	bf00      	nop
 80087b8:	e004      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087ba:	bf00      	nop
 80087bc:	e002      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80087be:	bf00      	nop
 80087c0:	e000      	b.n	80087c4 <DMA_CheckFifoParam+0xe8>
      break;
 80087c2:	bf00      	nop
    }
  } 
  
  return status; 
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop

080087d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e03b      	b.n	800885e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f833 	bl	8008866 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2202      	movs	r2, #2
 8008804:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008824:	f023 0107 	bic.w	r1, r3, #7
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800883e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	68d1      	ldr	r1, [r2, #12]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	430b      	orrs	r3, r1
 800884c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8008866:	b480      	push	{r7}
 8008868:	b083      	sub	sp, #12
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800886e:	bf00      	nop
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af02      	add	r7, sp, #8
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <HAL_DMA2D_Start+0x1c>
 8008892:	2302      	movs	r3, #2
 8008894:	e018      	b.n	80088c8 <HAL_DMA2D_Start+0x4e>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2202      	movs	r2, #2
 80088a2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f989 	bl	8008bc8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f042 0201 	orr.w	r2, r2, #1
 80088c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b086      	sub	sp, #24
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80088da:	2300      	movs	r3, #0
 80088dc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d056      	beq.n	800899a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80088ec:	f7ff f9f2 	bl	8007cd4 <HAL_GetTick>
 80088f0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80088f2:	e04b      	b.n	800898c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008902:	2b00      	cmp	r3, #0
 8008904:	d023      	beq.n	800894e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b00      	cmp	r3, #0
 800890e:	d005      	beq.n	800891c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008914:	f043 0202 	orr.w	r2, r3, #2
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892a:	f043 0201 	orr.w	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2221      	movs	r2, #33	@ 0x21
 8008938:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2204      	movs	r2, #4
 800893e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e0a5      	b.n	8008a9a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008954:	d01a      	beq.n	800898c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008956:	f7ff f9bd 	bl	8007cd4 <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d302      	bcc.n	800896c <HAL_DMA2D_PollForTransfer+0x9c>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10f      	bne.n	800898c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008970:	f043 0220 	orr.w	r2, r3, #32
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2203      	movs	r2, #3
 800897c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e086      	b.n	8008a9a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0ac      	beq.n	80088f4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	f003 0320 	and.w	r3, r3, #32
 80089a4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d061      	beq.n	8008a80 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80089bc:	f7ff f98a 	bl	8007cd4 <HAL_GetTick>
 80089c0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80089c2:	e056      	b.n	8008a72 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d02e      	beq.n	8008a34 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f003 0308 	and.w	r3, r3, #8
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d005      	beq.n	80089ec <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089e4:	f043 0204 	orr.w	r2, r3, #4
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f003 0320 	and.w	r3, r3, #32
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089fa:	f043 0202 	orr.w	r2, r3, #2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d005      	beq.n	8008a18 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a10:	f043 0201 	orr.w	r2, r3, #1
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2229      	movs	r2, #41	@ 0x29
 8008a1e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2204      	movs	r2, #4
 8008a24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e032      	b.n	8008a9a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a3a:	d01a      	beq.n	8008a72 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a3c:	f7ff f94a 	bl	8007cd4 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d302      	bcc.n	8008a52 <HAL_DMA2D_PollForTransfer+0x182>
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10f      	bne.n	8008a72 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a56:	f043 0220 	orr.w	r2, r3, #32
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2203      	movs	r2, #3
 8008a62:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e013      	b.n	8008a9a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f003 0310 	and.w	r3, r3, #16
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0a1      	beq.n	80089c4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2212      	movs	r2, #18
 8008a86:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d101      	bne.n	8008ac4 <HAL_DMA2D_ConfigLayer+0x20>
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e079      	b.n	8008bb8 <HAL_DMA2D_ConfigLayer+0x114>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	011b      	lsls	r3, r3, #4
 8008ad8:	3318      	adds	r3, #24
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	4413      	add	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	041b      	lsls	r3, r3, #16
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008aee:	4b35      	ldr	r3, [pc, #212]	@ (8008bc4 <HAL_DMA2D_ConfigLayer+0x120>)
 8008af0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2b0a      	cmp	r3, #10
 8008af8:	d003      	beq.n	8008b02 <HAL_DMA2D_ConfigLayer+0x5e>
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	d107      	bne.n	8008b12 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	e005      	b.n	8008b1e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	061b      	lsls	r3, r3, #24
 8008b18:	697a      	ldr	r2, [r7, #20]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d120      	bne.n	8008b66 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	43db      	mvns	r3, r3
 8008b2e:	ea02 0103 	and.w	r1, r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	430a      	orrs	r2, r1
 8008b3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	6812      	ldr	r2, [r2, #0]
 8008b44:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	2b0a      	cmp	r3, #10
 8008b4c:	d003      	beq.n	8008b56 <HAL_DMA2D_ConfigLayer+0xb2>
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2b09      	cmp	r3, #9
 8008b54:	d127      	bne.n	8008ba6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008b62:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b64:	e01f      	b.n	8008ba6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	69da      	ldr	r2, [r3, #28]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	43db      	mvns	r3, r3
 8008b70:	ea02 0103 	and.w	r1, r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	6812      	ldr	r2, [r2, #0]
 8008b86:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	2b0a      	cmp	r3, #10
 8008b8e:	d003      	beq.n	8008b98 <HAL_DMA2D_ConfigLayer+0xf4>
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2b09      	cmp	r3, #9
 8008b96:	d106      	bne.n	8008ba6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	68da      	ldr	r2, [r3, #12]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8008ba4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	371c      	adds	r7, #28
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	ff03000f 	.word	0xff03000f

08008bc8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b08b      	sub	sp, #44	@ 0x2c
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	60b9      	str	r1, [r7, #8]
 8008bd2:	607a      	str	r2, [r7, #4]
 8008bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bdc:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	041a      	lsls	r2, r3, #16
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	431a      	orrs	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c00:	d174      	bne.n	8008cec <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008c08:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008c10:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008c18:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d108      	bne.n	8008c3a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c38:	e053      	b.n	8008ce2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d106      	bne.n	8008c50 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c4e:	e048      	b.n	8008ce2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	d111      	bne.n	8008c7c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	0cdb      	lsrs	r3, r3, #19
 8008c5c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	0a9b      	lsrs	r3, r3, #10
 8008c62:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	08db      	lsrs	r3, r3, #3
 8008c68:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	015a      	lsls	r2, r3, #5
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	02db      	lsls	r3, r3, #11
 8008c72:	4313      	orrs	r3, r2
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c7a:	e032      	b.n	8008ce2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d117      	bne.n	8008cb4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	0fdb      	lsrs	r3, r3, #31
 8008c88:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	0cdb      	lsrs	r3, r3, #19
 8008c8e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	0adb      	lsrs	r3, r3, #11
 8008c94:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	08db      	lsrs	r3, r3, #3
 8008c9a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	029b      	lsls	r3, r3, #10
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	03db      	lsls	r3, r3, #15
 8008caa:	4313      	orrs	r3, r2
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cb2:	e016      	b.n	8008ce2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	0f1b      	lsrs	r3, r3, #28
 8008cb8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	0d1b      	lsrs	r3, r3, #20
 8008cbe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	0b1b      	lsrs	r3, r3, #12
 8008cc4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	091b      	lsrs	r3, r3, #4
 8008cca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	011a      	lsls	r2, r3, #4
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	031b      	lsls	r3, r3, #12
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	697a      	ldr	r2, [r7, #20]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ce8:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008cea:	e003      	b.n	8008cf4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	60da      	str	r2, [r3, #12]
}
 8008cf4:	bf00      	nop
 8008cf6:	372c      	adds	r7, #44	@ 0x2c
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	019a      	lsls	r2, r3, #6
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	431a      	orrs	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	041b      	lsls	r3, r3, #16
 8008d20:	431a      	orrs	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8008d26:	bf00      	nop
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b086      	sub	sp, #24
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
 8008d3e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d40:	f7fe ffc8 	bl	8007cd4 <HAL_GetTick>
 8008d44:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008d46:	e009      	b.n	8008d5c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008d48:	f7fe ffc4 	bl	8007cd4 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d56:	d901      	bls.n	8008d5c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e015      	b.n	8008d88 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d0ee      	beq.n	8008d48 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	019a      	lsls	r2, r3, #6
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	431a      	orrs	r2, r3
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	ea42 0103 	orr.w	r1, r2, r3
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	041a      	lsls	r2, r3, #16
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	@ 0x28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e16e      	b.n	8009082 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	7c5b      	ldrb	r3, [r3, #17]
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d102      	bne.n	8008db4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f9e2 	bl	8009178 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2203      	movs	r2, #3
 8008db8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61bb      	str	r3, [r7, #24]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8008dce:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008dda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008dde:	61bb      	str	r3, [r7, #24]
 8008de0:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008de2:	f7fe ff77 	bl	8007cd4 <HAL_GetTick>
 8008de6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008de8:	e009      	b.n	8008dfe <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008dea:	f7fe ff73 	bl	8007cd4 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008df8:	d901      	bls.n	8008dfe <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	e141      	b.n	8009082 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8008e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0ed      	beq.n	8008dea <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	6812      	ldr	r2, [r2, #0]
 8008e1a:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8008e1e:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8008e22:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008e3a:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8008e42:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0201 	orr.w	r2, r2, #1
 8008e62:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8008e76:	2001      	movs	r0, #1
 8008e78:	f7fe ff38 	bl	8007cec <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e7c:	f7fe ff2a 	bl	8007cd4 <HAL_GetTick>
 8008e80:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008e82:	e009      	b.n	8008e98 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008e84:	f7fe ff26 	bl	8007cd4 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e92:	d901      	bls.n	8008e98 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e0f4      	b.n	8009082 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8008ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0ed      	beq.n	8008e84 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	613b      	str	r3, [r7, #16]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0201 	orr.w	r2, r2, #1
 8008eba:	605a      	str	r2, [r3, #4]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	613b      	str	r3, [r7, #16]
 8008ec8:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008ed8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6899      	ldr	r1, [r3, #8]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f042 0202 	orr.w	r2, r2, #2
 8008efc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f042 0204 	orr.w	r2, r2, #4
 8008f10:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0203 	bic.w	r2, r2, #3
 8008f24:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f3e:	f7fe fec9 	bl	8007cd4 <HAL_GetTick>
 8008f42:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008f4c:	f003 0303 	and.w	r3, r3, #3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d123      	bne.n	8008f9c <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8008f54:	e00c      	b.n	8008f70 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008f56:	f7fe febd 	bl	8007cd4 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f64:	d904      	bls.n	8008f70 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e088      	b.n	8009082 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008f78:	f003 0314 	and.w	r3, r3, #20
 8008f7c:	2b14      	cmp	r3, #20
 8008f7e:	d1ea      	bne.n	8008f56 <HAL_DSI_Init+0x1c6>
 8008f80:	e014      	b.n	8008fac <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008f82:	f7fe fea7 	bl	8007cd4 <HAL_GetTick>
 8008f86:	4602      	mov	r2, r0
 8008f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f90:	d904      	bls.n	8008f9c <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e072      	b.n	8009082 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008fa4:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8008fa8:	2b94      	cmp	r3, #148	@ 0x94
 8008faa:	d1ea      	bne.n	8008f82 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <HAL_DSI_Init+0x22a>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	e000      	b.n	8008fbc <HAL_DSI_Init+0x22c>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008fbe:	6a3b      	ldr	r3, [r7, #32]
 8008fc0:	4a32      	ldr	r2, [pc, #200]	@ (800908c <HAL_DSI_Init+0x2fc>)
 8008fc2:	fb03 f202 	mul.w	r2, r3, r2
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 0303 	and.w	r3, r3, #3
 8008fce:	409a      	lsls	r2, r3
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8008fd8:	fb01 f303 	mul.w	r3, r1, r3
 8008fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fe0:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8008ff2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69fa      	ldr	r2, [r7, #28]
 8009004:	430a      	orrs	r2, r1
 8009006:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2200      	movs	r2, #0
 800901a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0201 	bic.w	r2, r2, #1
 8009036:	605a      	str	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f022 0203 	bic.w	r2, r2, #3
 8009056:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	431a      	orrs	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f042 0201 	orr.w	r2, r2, #1
 8009070:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3728      	adds	r7, #40	@ 0x28
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	003d0900 	.word	0x003d0900

08009090 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e066      	b.n	8009170 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2203      	movs	r2, #3
 80090a6:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80090a8:	2300      	movs	r3, #0
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0208 	bic.w	r2, r2, #8
 80090bc:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80090c8:	f003 0308 	and.w	r3, r3, #8
 80090cc:	617b      	str	r3, [r7, #20]
 80090ce:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80090d0:	2300      	movs	r3, #0
 80090d2:	613b      	str	r3, [r7, #16]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 0201 	bic.w	r2, r2, #1
 80090e2:	605a      	str	r2, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	613b      	str	r3, [r7, #16]
 80090f0:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f022 0206 	bic.w	r2, r2, #6
 8009102:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f022 0201 	bic.w	r2, r2, #1
 800911a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8009126:	f003 0301 	and.w	r3, r3, #1
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800912e:	2300      	movs	r3, #0
 8009130:	60bb      	str	r3, [r7, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8009142:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800914e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009152:	60bb      	str	r3, [r7, #8]
 8009154:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f818 	bl	800918c <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7c1b      	ldrb	r3, [r3, #16]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d101      	bne.n	80091b6 <HAL_DSI_ConfigVideoMode+0x16>
 80091b2:	2302      	movs	r3, #2
 80091b4:	e1f6      	b.n	80095a4 <HAL_DSI_ConfigVideoMode+0x404>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f022 0201 	bic.w	r2, r2, #1
 80091ca:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 0201 	bic.w	r2, r2, #1
 80091dc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0203 	bic.w	r2, r2, #3
 80091ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	68da      	ldr	r2, [r3, #12]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	430a      	orrs	r2, r1
 8009200:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	6812      	ldr	r2, [r2, #0]
 800920c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8009210:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009214:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	691a      	ldr	r2, [r3, #16]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	430a      	orrs	r2, r1
 8009226:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6812      	ldr	r2, [r2, #0]
 8009232:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8009236:	f023 031f 	bic.w	r3, r3, #31
 800923a:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	695a      	ldr	r2, [r3, #20]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	430a      	orrs	r2, r1
 800924c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6812      	ldr	r2, [r2, #0]
 8009258:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800925c:	f023 031f 	bic.w	r3, r3, #31
 8009260:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	699a      	ldr	r2, [r3, #24]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	430a      	orrs	r2, r1
 8009272:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 0203 	bic.w	r2, r2, #3
 8009282:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68d9      	ldr	r1, [r3, #12]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	695a      	ldr	r2, [r3, #20]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0207 	bic.w	r2, r2, #7
 80092a4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6959      	ldr	r1, [r3, #20]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	431a      	orrs	r2, r3
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	430a      	orrs	r2, r1
 80092c2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	691a      	ldr	r2, [r3, #16]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 020f 	bic.w	r2, r2, #15
 80092d2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6919      	ldr	r1, [r3, #16]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 020e 	bic.w	r2, r2, #14
 80092f6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	005a      	lsls	r2, r3, #1
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	430a      	orrs	r2, r1
 800930e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2b03      	cmp	r3, #3
 8009318:	d110      	bne.n	800933c <HAL_DSI_ConfigVideoMode+0x19c>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691a      	ldr	r2, [r3, #16]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009328:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6919      	ldr	r1, [r3, #16]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	430a      	orrs	r2, r1
 800933a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800934a:	f023 030f 	bic.w	r3, r3, #15
 800934e:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6812      	ldr	r2, [r2, #0]
 800936c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8009370:	f023 030f 	bic.w	r3, r3, #15
 8009374:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	6812      	ldr	r2, [r2, #0]
 8009392:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009396:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800939a:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	430a      	orrs	r2, r1
 80093ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	6812      	ldr	r2, [r2, #0]
 80093b8:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6812      	ldr	r2, [r2, #0]
 80093de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80093e2:	f023 0303 	bic.w	r3, r3, #3
 80093e6:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009408:	f023 0303 	bic.w	r3, r3, #3
 800940c:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	6812      	ldr	r2, [r2, #0]
 800942a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800942e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009432:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	430a      	orrs	r2, r1
 8009444:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009454:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	430a      	orrs	r2, r1
 8009466:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699a      	ldr	r2, [r3, #24]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 8009476:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6999      	ldr	r1, [r3, #24]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009482:	041a      	lsls	r2, r3, #16
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	699a      	ldr	r2, [r3, #24]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800949a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6999      	ldr	r1, [r3, #24]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80094de:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009500:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009522:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009544:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	430a      	orrs	r2, r1
 8009556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009566:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009588:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	7c1b      	ldrb	r3, [r3, #16]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d101      	bne.n	80095c6 <HAL_DSI_ConfigFlowControl+0x16>
 80095c2:	2302      	movs	r3, #2
 80095c4:	e016      	b.n	80095f4 <HAL_DSI_ConfigFlowControl+0x44>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2201      	movs	r2, #1
 80095ca:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 021f 	bic.w	r2, r2, #31
 80095da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	7c1b      	ldrb	r3, [r3, #16]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d101      	bne.n	8009616 <HAL_DSI_ConfigPhyTimer+0x16>
 8009612:	2302      	movs	r3, #2
 8009614:	e058      	b.n	80096c8 <HAL_DSI_ConfigPhyTimer+0xc8>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	4293      	cmp	r3, r2
 8009626:	bf38      	it	cc
 8009628:	4613      	movcc	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 800963c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	041a      	lsls	r2, r3, #16
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	431a      	orrs	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	430a      	orrs	r2, r1
 8009656:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800966a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	041b      	lsls	r3, r3, #16
 8009680:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8009688:	431a      	orrs	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80096a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	695b      	ldr	r3, [r3, #20]
 80096b4:	021a      	lsls	r2, r3, #8
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	7c1b      	ldrb	r3, [r3, #16]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_DSI_Start+0x14>
 80096e4:	2302      	movs	r3, #2
 80096e6:	e02b      	b.n	8009740 <HAL_DSI_Start+0x6c>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f042 0201 	orr.w	r2, r2, #1
 8009700:	605a      	str	r2, [r3, #4]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	60fb      	str	r3, [r7, #12]
 800970e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8009710:	2300      	movs	r3, #0
 8009712:	60bb      	str	r3, [r7, #8]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f042 0208 	orr.w	r2, r2, #8
 8009724:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8009730:	f003 0308 	and.w	r3, r3, #8
 8009734:	60bb      	str	r3, [r7, #8]
 8009736:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_DSI_Stop>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Stop(DSI_HandleTypeDef *hdsi)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	7c1b      	ldrb	r3, [r3, #16]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_DSI_Stop+0x14>
 800975c:	2302      	movs	r3, #2
 800975e:	e02b      	b.n	80097b8 <HAL_DSI_Stop+0x6c>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	741a      	strb	r2, [r3, #16]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	685a      	ldr	r2, [r3, #4]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	605a      	str	r2, [r3, #4]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	68fb      	ldr	r3, [r7, #12]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8009788:	2300      	movs	r3, #0
 800978a:	60bb      	str	r3, [r7, #8]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0208 	bic.w	r2, r2, #8
 800979c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80097a8:	f003 0308 	and.w	r3, r3, #8
 80097ac:	60bb      	str	r3, [r7, #8]
 80097ae:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af02      	add	r7, sp, #8
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	607a      	str	r2, [r7, #4]
 80097d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	7c1b      	ldrb	r3, [r3, #16]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d101      	bne.n	80097de <HAL_DSI_ShortWrite+0x1a>
 80097da:	2302      	movs	r3, #2
 80097dc:	e010      	b.n	8009800 <HAL_DSI_ShortWrite+0x3c>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2201      	movs	r2, #1
 80097e2:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	68b9      	ldr	r1, [r7, #8]
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f7ff fa9f 	bl	8008d32 <DSI_ShortWrite>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	741a      	strb	r2, [r3, #16]

  return status;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08c      	sub	sp, #48	@ 0x30
 800980c:	af02      	add	r7, sp, #8
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
 8009814:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;
 8009816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009818:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	7c1b      	ldrb	r3, [r3, #16]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <HAL_DSI_LongWrite+0x1e>
 8009822:	2302      	movs	r3, #2
 8009824:	e084      	b.n	8009930 <HAL_DSI_LongWrite+0x128>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800982c:	f7fe fa52 	bl	8007cd4 <HAL_GetTick>
 8009830:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8009832:	e00c      	b.n	800984e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009834:	f7fe fa4e 	bl	8007cd4 <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009842:	d904      	bls.n	800984e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e070      	b.n	8009930 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0eb      	beq.n	8009834 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800985c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b03      	cmp	r3, #3
 8009864:	bf28      	it	cs
 8009866:	2303      	movcs	r3, #3
 8009868:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800986a:	2300      	movs	r3, #0
 800986c:	623b      	str	r3, [r7, #32]
 800986e:	e00f      	b.n	8009890 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8009870:	69ba      	ldr	r2, [r7, #24]
 8009872:	6a3b      	ldr	r3, [r7, #32]
 8009874:	4413      	add	r3, r2
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	461a      	mov	r2, r3
 800987a:	6a3b      	ldr	r3, [r7, #32]
 800987c:	3301      	adds	r3, #1
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	fa02 f303 	lsl.w	r3, r2, r3
 8009884:	69fa      	ldr	r2, [r7, #28]
 8009886:	4313      	orrs	r3, r2
 8009888:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	3301      	adds	r3, #1
 800988e:	623b      	str	r3, [r7, #32]
 8009890:	6a3a      	ldr	r2, [r7, #32]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	429a      	cmp	r2, r3
 8009896:	d3eb      	bcc.n	8009870 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	4413      	add	r3, r2
 80098ae:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80098b0:	e028      	b.n	8009904 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	bf28      	it	cs
 80098b8:	2304      	movcs	r3, #4
 80098ba:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80098bc:	2300      	movs	r3, #0
 80098be:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80098c0:	2300      	movs	r3, #0
 80098c2:	623b      	str	r3, [r7, #32]
 80098c4:	e00e      	b.n	80098e4 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	4413      	add	r3, r2
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	fa02 f303 	lsl.w	r3, r2, r3
 80098d8:	69fa      	ldr	r2, [r7, #28]
 80098da:	4313      	orrs	r3, r2
 80098dc:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	3301      	adds	r3, #1
 80098e2:	623b      	str	r3, [r7, #32]
 80098e4:	6a3a      	ldr	r2, [r7, #32]
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d3ec      	bcc.n	80098c6 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 80098f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	1ad3      	subs	r3, r2, r3
 80098fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	4413      	add	r3, r2
 8009902:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8009904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1d3      	bne.n	80098b2 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8009912:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	3301      	adds	r3, #1
 8009918:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800991a:	b2db      	uxtb	r3, r3
 800991c:	9300      	str	r3, [sp, #0]
 800991e:	4613      	mov	r3, r2
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	68b9      	ldr	r1, [r7, #8]
 8009924:	f7ff f9ec 	bl	8008d00 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2200      	movs	r2, #0
 800992c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3728      	adds	r7, #40	@ 0x28
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08c      	sub	sp, #48	@ 0x30
 800993c:	af02      	add	r7, sp, #8
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t datasize = Size;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	7c1b      	ldrb	r3, [r3, #16]
 8009952:	2b01      	cmp	r3, #1
 8009954:	d101      	bne.n	800995a <HAL_DSI_Read+0x22>
 8009956:	2302      	movs	r3, #2
 8009958:	e0ae      	b.n	8009ab8 <HAL_DSI_Read+0x180>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2201      	movs	r2, #1
 800995e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d913      	bls.n	800998e <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	b2da      	uxtb	r2, r3
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800996e:	b2db      	uxtb	r3, r3
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	4613      	mov	r3, r2
 8009974:	2237      	movs	r2, #55	@ 0x37
 8009976:	68b9      	ldr	r1, [r7, #8]
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f7ff f9da 	bl	8008d32 <DSI_ShortWrite>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d004      	beq.n	800998e <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e094      	b.n	8009ab8 <HAL_DSI_Read+0x180>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009990:	2b06      	cmp	r3, #6
 8009992:	d109      	bne.n	80099a8 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6818      	ldr	r0, [r3, #0]
 8009998:	2300      	movs	r3, #0
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800999e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	f7ff f9ad 	bl	8008d00 <DSI_ConfigPacketHeader>
 80099a6:	e033      	b.n	8009a10 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	d109      	bne.n	80099c2 <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	2300      	movs	r3, #0
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	2300      	movs	r3, #0
 80099b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ba:	68b9      	ldr	r1, [r7, #8]
 80099bc:	f7ff f9a0 	bl	8008d00 <DSI_ConfigPacketHeader>
 80099c0:	e026      	b.n	8009a10 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	2b14      	cmp	r3, #20
 80099c6:	d10c      	bne.n	80099e2 <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6818      	ldr	r0, [r3, #0]
 80099cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	2300      	movs	r3, #0
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	4613      	mov	r3, r2
 80099d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099da:	68b9      	ldr	r1, [r7, #8]
 80099dc:	f7ff f990 	bl	8008d00 <DSI_ConfigPacketHeader>
 80099e0:	e016      	b.n	8009a10 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	2b24      	cmp	r3, #36	@ 0x24
 80099e6:	d10e      	bne.n	8009a06 <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6818      	ldr	r0, [r3, #0]
 80099ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f4:	3301      	adds	r3, #1
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	4613      	mov	r3, r2
 80099fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	f7ff f97e 	bl	8008d00 <DSI_ConfigPacketHeader>
 8009a04:	e004      	b.n	8009a10 <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e053      	b.n	8009ab8 <HAL_DSI_Read+0x180>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a10:	f7fe f960 	bl	8007cd4 <HAL_GetTick>
 8009a14:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 8009a16:	e048      	b.n	8009aaa <HAL_DSI_Read+0x172>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d120      	bne.n	8009a68 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a2c:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	bf28      	it	cs
 8009a34:	2304      	movcs	r3, #4
 8009a36:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61fb      	str	r3, [r7, #28]
 8009a3c:	e010      	b.n	8009a60 <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	00db      	lsls	r3, r3, #3
 8009a42:	697a      	ldr	r2, [r7, #20]
 8009a44:	fa22 f303 	lsr.w	r3, r2, r3
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a4c:	701a      	strb	r2, [r3, #0]
        pdata++;
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a50:	3301      	adds	r3, #1
 8009a52:	627b      	str	r3, [r7, #36]	@ 0x24
        datasize--;
 8009a54:	6a3b      	ldr	r3, [r7, #32]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	61fb      	str	r3, [r7, #28]
 8009a60:	69fa      	ldr	r2, [r7, #28]
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d3ea      	bcc.n	8009a3e <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8009a68:	f7fe f934 	bl	8007cd4 <HAL_GetTick>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	1ad3      	subs	r3, r2, r3
 8009a72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a76:	d904      	bls.n	8009a82 <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e01a      	b.n	8009ab8 <HAL_DSI_Read+0x180>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10c      	bne.n	8009aaa <HAL_DSI_Read+0x172>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a98:	f003 0320 	and.w	r3, r3, #32
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	d104      	bne.n	8009aaa <HAL_DSI_Read+0x172>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	741a      	strb	r2, [r3, #16]

        return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e006      	b.n	8009ab8 <HAL_DSI_Read+0x180>
  while (((int32_t)(datasize)) > 0)
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	dcb3      	bgt.n	8009a18 <HAL_DSI_Read+0xe0>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3728      	adds	r7, #40	@ 0x28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b089      	sub	sp, #36	@ 0x24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	61fb      	str	r3, [r7, #28]
 8009ada:	e177      	b.n	8009dcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009adc:	2201      	movs	r2, #1
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	4013      	ands	r3, r2
 8009aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	f040 8166 	bne.w	8009dc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f003 0303 	and.w	r3, r3, #3
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d005      	beq.n	8009b12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d130      	bne.n	8009b74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	2203      	movs	r2, #3
 8009b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b22:	43db      	mvns	r3, r3
 8009b24:	69ba      	ldr	r2, [r7, #24]
 8009b26:	4013      	ands	r3, r2
 8009b28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	fa02 f303 	lsl.w	r3, r2, r3
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69ba      	ldr	r2, [r7, #24]
 8009b40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b48:	2201      	movs	r2, #1
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b50:	43db      	mvns	r3, r3
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	4013      	ands	r3, r2
 8009b56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	091b      	lsrs	r3, r3, #4
 8009b5e:	f003 0201 	and.w	r2, r3, #1
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	fa02 f303 	lsl.w	r3, r2, r3
 8009b68:	69ba      	ldr	r2, [r7, #24]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	69ba      	ldr	r2, [r7, #24]
 8009b72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	f003 0303 	and.w	r3, r3, #3
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d017      	beq.n	8009bb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	2203      	movs	r2, #3
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	43db      	mvns	r3, r3
 8009b92:	69ba      	ldr	r2, [r7, #24]
 8009b94:	4013      	ands	r3, r2
 8009b96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ba4:	69ba      	ldr	r2, [r7, #24]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f003 0303 	and.w	r3, r3, #3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d123      	bne.n	8009c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	08da      	lsrs	r2, r3, #3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	3208      	adds	r2, #8
 8009bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	f003 0307 	and.w	r3, r3, #7
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	220f      	movs	r2, #15
 8009bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd8:	43db      	mvns	r3, r3
 8009bda:	69ba      	ldr	r2, [r7, #24]
 8009bdc:	4013      	ands	r3, r2
 8009bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	691a      	ldr	r2, [r3, #16]
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	f003 0307 	and.w	r3, r3, #7
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf0:	69ba      	ldr	r2, [r7, #24]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	08da      	lsrs	r2, r3, #3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	3208      	adds	r2, #8
 8009bfe:	69b9      	ldr	r1, [r7, #24]
 8009c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	2203      	movs	r2, #3
 8009c10:	fa02 f303 	lsl.w	r3, r2, r3
 8009c14:	43db      	mvns	r3, r3
 8009c16:	69ba      	ldr	r2, [r7, #24]
 8009c18:	4013      	ands	r3, r2
 8009c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	f003 0203 	and.w	r2, r3, #3
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2c:	69ba      	ldr	r2, [r7, #24]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 80c0 	beq.w	8009dc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c46:	2300      	movs	r3, #0
 8009c48:	60fb      	str	r3, [r7, #12]
 8009c4a:	4b66      	ldr	r3, [pc, #408]	@ (8009de4 <HAL_GPIO_Init+0x324>)
 8009c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c4e:	4a65      	ldr	r2, [pc, #404]	@ (8009de4 <HAL_GPIO_Init+0x324>)
 8009c50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c56:	4b63      	ldr	r3, [pc, #396]	@ (8009de4 <HAL_GPIO_Init+0x324>)
 8009c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c62:	4a61      	ldr	r2, [pc, #388]	@ (8009de8 <HAL_GPIO_Init+0x328>)
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	089b      	lsrs	r3, r3, #2
 8009c68:	3302      	adds	r3, #2
 8009c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	f003 0303 	and.w	r3, r3, #3
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	220f      	movs	r2, #15
 8009c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c7e:	43db      	mvns	r3, r3
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	4013      	ands	r3, r2
 8009c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a58      	ldr	r2, [pc, #352]	@ (8009dec <HAL_GPIO_Init+0x32c>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d037      	beq.n	8009cfe <HAL_GPIO_Init+0x23e>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a57      	ldr	r2, [pc, #348]	@ (8009df0 <HAL_GPIO_Init+0x330>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d031      	beq.n	8009cfa <HAL_GPIO_Init+0x23a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a56      	ldr	r2, [pc, #344]	@ (8009df4 <HAL_GPIO_Init+0x334>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d02b      	beq.n	8009cf6 <HAL_GPIO_Init+0x236>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a55      	ldr	r2, [pc, #340]	@ (8009df8 <HAL_GPIO_Init+0x338>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d025      	beq.n	8009cf2 <HAL_GPIO_Init+0x232>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a54      	ldr	r2, [pc, #336]	@ (8009dfc <HAL_GPIO_Init+0x33c>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d01f      	beq.n	8009cee <HAL_GPIO_Init+0x22e>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a53      	ldr	r2, [pc, #332]	@ (8009e00 <HAL_GPIO_Init+0x340>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d019      	beq.n	8009cea <HAL_GPIO_Init+0x22a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a52      	ldr	r2, [pc, #328]	@ (8009e04 <HAL_GPIO_Init+0x344>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d013      	beq.n	8009ce6 <HAL_GPIO_Init+0x226>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a51      	ldr	r2, [pc, #324]	@ (8009e08 <HAL_GPIO_Init+0x348>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00d      	beq.n	8009ce2 <HAL_GPIO_Init+0x222>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a50      	ldr	r2, [pc, #320]	@ (8009e0c <HAL_GPIO_Init+0x34c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d007      	beq.n	8009cde <HAL_GPIO_Init+0x21e>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a4f      	ldr	r2, [pc, #316]	@ (8009e10 <HAL_GPIO_Init+0x350>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d101      	bne.n	8009cda <HAL_GPIO_Init+0x21a>
 8009cd6:	2309      	movs	r3, #9
 8009cd8:	e012      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009cda:	230a      	movs	r3, #10
 8009cdc:	e010      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009cde:	2308      	movs	r3, #8
 8009ce0:	e00e      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009ce2:	2307      	movs	r3, #7
 8009ce4:	e00c      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009ce6:	2306      	movs	r3, #6
 8009ce8:	e00a      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009cea:	2305      	movs	r3, #5
 8009cec:	e008      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009cee:	2304      	movs	r3, #4
 8009cf0:	e006      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e004      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e002      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e000      	b.n	8009d00 <HAL_GPIO_Init+0x240>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	69fa      	ldr	r2, [r7, #28]
 8009d02:	f002 0203 	and.w	r2, r2, #3
 8009d06:	0092      	lsls	r2, r2, #2
 8009d08:	4093      	lsls	r3, r2
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d10:	4935      	ldr	r1, [pc, #212]	@ (8009de8 <HAL_GPIO_Init+0x328>)
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	089b      	lsrs	r3, r3, #2
 8009d16:	3302      	adds	r3, #2
 8009d18:	69ba      	ldr	r2, [r7, #24]
 8009d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8009e14 <HAL_GPIO_Init+0x354>)
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	43db      	mvns	r3, r3
 8009d28:	69ba      	ldr	r2, [r7, #24]
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009d3a:	69ba      	ldr	r2, [r7, #24]
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d42:	4a34      	ldr	r2, [pc, #208]	@ (8009e14 <HAL_GPIO_Init+0x354>)
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d48:	4b32      	ldr	r3, [pc, #200]	@ (8009e14 <HAL_GPIO_Init+0x354>)
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	43db      	mvns	r3, r3
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	4013      	ands	r3, r2
 8009d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d003      	beq.n	8009d6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d6c:	4a29      	ldr	r2, [pc, #164]	@ (8009e14 <HAL_GPIO_Init+0x354>)
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009d72:	4b28      	ldr	r3, [pc, #160]	@ (8009e14 <HAL_GPIO_Init+0x354>)
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	43db      	mvns	r3, r3
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	4013      	ands	r3, r2
 8009d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009d96:	4a1f      	ldr	r2, [pc, #124]	@ (8009e14 <HAL_GPIO_Init+0x354>)
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009e14 <HAL_GPIO_Init+0x354>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	43db      	mvns	r3, r3
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	4013      	ands	r3, r2
 8009daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009db8:	69ba      	ldr	r2, [r7, #24]
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009dc0:	4a14      	ldr	r2, [pc, #80]	@ (8009e14 <HAL_GPIO_Init+0x354>)
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	61fb      	str	r3, [r7, #28]
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	2b0f      	cmp	r3, #15
 8009dd0:	f67f ae84 	bls.w	8009adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009dd4:	bf00      	nop
 8009dd6:	bf00      	nop
 8009dd8:	3724      	adds	r7, #36	@ 0x24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	40023800 	.word	0x40023800
 8009de8:	40013800 	.word	0x40013800
 8009dec:	40020000 	.word	0x40020000
 8009df0:	40020400 	.word	0x40020400
 8009df4:	40020800 	.word	0x40020800
 8009df8:	40020c00 	.word	0x40020c00
 8009dfc:	40021000 	.word	0x40021000
 8009e00:	40021400 	.word	0x40021400
 8009e04:	40021800 	.word	0x40021800
 8009e08:	40021c00 	.word	0x40021c00
 8009e0c:	40022000 	.word	0x40022000
 8009e10:	40022400 	.word	0x40022400
 8009e14:	40013c00 	.word	0x40013c00

08009e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	460b      	mov	r3, r1
 8009e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	691a      	ldr	r2, [r3, #16]
 8009e28:	887b      	ldrh	r3, [r7, #2]
 8009e2a:	4013      	ands	r3, r2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d002      	beq.n	8009e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e30:	2301      	movs	r3, #1
 8009e32:	73fb      	strb	r3, [r7, #15]
 8009e34:	e001      	b.n	8009e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	807b      	strh	r3, [r7, #2]
 8009e54:	4613      	mov	r3, r2
 8009e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009e58:	787b      	ldrb	r3, [r7, #1]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e5e:	887a      	ldrh	r2, [r7, #2]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009e64:	e003      	b.n	8009e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009e66:	887b      	ldrh	r3, [r7, #2]
 8009e68:	041a      	lsls	r2, r3, #16
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	619a      	str	r2, [r3, #24]
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	460b      	mov	r3, r1
 8009e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e8c:	887a      	ldrh	r2, [r7, #2]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	4013      	ands	r3, r2
 8009e92:	041a      	lsls	r2, r3, #16
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	43d9      	mvns	r1, r3
 8009e98:	887b      	ldrh	r3, [r7, #2]
 8009e9a:	400b      	ands	r3, r1
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	619a      	str	r2, [r3, #24]
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
	...

08009eb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009eba:	4b08      	ldr	r3, [pc, #32]	@ (8009edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009ebc:	695a      	ldr	r2, [r3, #20]
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d006      	beq.n	8009ed4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009ec6:	4a05      	ldr	r2, [pc, #20]	@ (8009edc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009ec8:	88fb      	ldrh	r3, [r7, #6]
 8009eca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009ecc:	88fb      	ldrh	r3, [r7, #6]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 f806 	bl	8009ee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	40013c00 	.word	0x40013c00

08009ee0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009eea:	bf00      	nop
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b086      	sub	sp, #24
 8009efa:	af02      	add	r7, sp, #8
 8009efc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e059      	b.n	8009fbc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f7f7 fb02 	bl	800152c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f36:	d102      	bne.n	8009f3e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f007 fb72 	bl	801162c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6818      	ldr	r0, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	7c1a      	ldrb	r2, [r3, #16]
 8009f50:	f88d 2000 	strb.w	r2, [sp]
 8009f54:	3304      	adds	r3, #4
 8009f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f58:	f007 faf3 	bl	8011542 <USB_CoreInit>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d005      	beq.n	8009f6e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2202      	movs	r2, #2
 8009f66:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e026      	b.n	8009fbc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2101      	movs	r1, #1
 8009f74:	4618      	mov	r0, r3
 8009f76:	f007 fb6a 	bl	801164e <USB_SetCurrentMode>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d005      	beq.n	8009f8c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e017      	b.n	8009fbc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6818      	ldr	r0, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7c1a      	ldrb	r2, [r3, #16]
 8009f94:	f88d 2000 	strb.w	r2, [sp]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f9c:	f007 fd0c 	bl	80119b8 <USB_HostInit>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d005      	beq.n	8009fb2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2202      	movs	r2, #2
 8009faa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e004      	b.n	8009fbc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009fc4:	b590      	push	{r4, r7, lr}
 8009fc6:	b08b      	sub	sp, #44	@ 0x2c
 8009fc8:	af04      	add	r7, sp, #16
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	70fb      	strb	r3, [r7, #3]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70bb      	strb	r3, [r7, #2]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8009fde:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009fe0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d101      	bne.n	8009ff0 <HAL_HCD_HC_Init+0x2c>
 8009fec:	2302      	movs	r3, #2
 8009fee:	e09d      	b.n	800a12c <HAL_HCD_HC_Init+0x168>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8009ff8:	78fa      	ldrb	r2, [r7, #3]
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	011b      	lsls	r3, r3, #4
 800a000:	1a9b      	subs	r3, r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	3319      	adds	r3, #25
 800a008:	2200      	movs	r2, #0
 800a00a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800a00c:	78fa      	ldrb	r2, [r7, #3]
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	4613      	mov	r3, r2
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	1a9b      	subs	r3, r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	440b      	add	r3, r1
 800a01a:	3314      	adds	r3, #20
 800a01c:	787a      	ldrb	r2, [r7, #1]
 800a01e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	4613      	mov	r3, r2
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	1a9b      	subs	r3, r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	440b      	add	r3, r1
 800a02e:	3315      	adds	r3, #21
 800a030:	78fa      	ldrb	r2, [r7, #3]
 800a032:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800a034:	78fa      	ldrb	r2, [r7, #3]
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	4613      	mov	r3, r2
 800a03a:	011b      	lsls	r3, r3, #4
 800a03c:	1a9b      	subs	r3, r3, r2
 800a03e:	009b      	lsls	r3, r3, #2
 800a040:	440b      	add	r3, r1
 800a042:	3326      	adds	r3, #38	@ 0x26
 800a044:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800a048:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800a04a:	78fa      	ldrb	r2, [r7, #3]
 800a04c:	78bb      	ldrb	r3, [r7, #2]
 800a04e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a052:	b2d8      	uxtb	r0, r3
 800a054:	6879      	ldr	r1, [r7, #4]
 800a056:	4613      	mov	r3, r2
 800a058:	011b      	lsls	r3, r3, #4
 800a05a:	1a9b      	subs	r3, r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	440b      	add	r3, r1
 800a060:	3316      	adds	r3, #22
 800a062:	4602      	mov	r2, r0
 800a064:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fbc8 	bl	800a800 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800a070:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a074:	2b00      	cmp	r3, #0
 800a076:	da0a      	bge.n	800a08e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800a078:	78fa      	ldrb	r2, [r7, #3]
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	011b      	lsls	r3, r3, #4
 800a080:	1a9b      	subs	r3, r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	440b      	add	r3, r1
 800a086:	3317      	adds	r3, #23
 800a088:	2201      	movs	r2, #1
 800a08a:	701a      	strb	r2, [r3, #0]
 800a08c:	e009      	b.n	800a0a2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800a08e:	78fa      	ldrb	r2, [r7, #3]
 800a090:	6879      	ldr	r1, [r7, #4]
 800a092:	4613      	mov	r3, r2
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	1a9b      	subs	r3, r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	440b      	add	r3, r1
 800a09c:	3317      	adds	r3, #23
 800a09e:	2200      	movs	r2, #0
 800a0a0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f007 fdde 	bl	8011c68 <USB_GetHostSpeed>
 800a0ac:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800a0ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d10b      	bne.n	800a0ce <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800a0b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d107      	bne.n	800a0ce <HAL_HCD_HC_Init+0x10a>
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d104      	bne.n	800a0ce <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2bbc      	cmp	r3, #188	@ 0xbc
 800a0c8:	d901      	bls.n	800a0ce <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800a0ca:	23bc      	movs	r3, #188	@ 0xbc
 800a0cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800a0ce:	78fa      	ldrb	r2, [r7, #3]
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	011b      	lsls	r3, r3, #4
 800a0d6:	1a9b      	subs	r3, r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	3318      	adds	r3, #24
 800a0de:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a0e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800a0e4:	78fa      	ldrb	r2, [r7, #3]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	b298      	uxth	r0, r3
 800a0ea:	6879      	ldr	r1, [r7, #4]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	011b      	lsls	r3, r3, #4
 800a0f0:	1a9b      	subs	r3, r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	3328      	adds	r3, #40	@ 0x28
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6818      	ldr	r0, [r3, #0]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	b29b      	uxth	r3, r3
 800a104:	787c      	ldrb	r4, [r7, #1]
 800a106:	78ba      	ldrb	r2, [r7, #2]
 800a108:	78f9      	ldrb	r1, [r7, #3]
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	4623      	mov	r3, r4
 800a11a:	f007 fdcd 	bl	8011cb8 <USB_HC_Init>
 800a11e:	4603      	mov	r3, r0
 800a120:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	371c      	adds	r7, #28
 800a130:	46bd      	mov	sp, r7
 800a132:	bd90      	pop	{r4, r7, pc}

0800a134 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d101      	bne.n	800a152 <HAL_HCD_HC_Halt+0x1e>
 800a14e:	2302      	movs	r3, #2
 800a150:	e00f      	b.n	800a172 <HAL_HCD_HC_Halt+0x3e>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	78fa      	ldrb	r2, [r7, #3]
 800a160:	4611      	mov	r1, r2
 800a162:	4618      	mov	r0, r3
 800a164:	f008 f95f 	bl	8012426 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800a170:	7bfb      	ldrb	r3, [r7, #15]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	4608      	mov	r0, r1
 800a186:	4611      	mov	r1, r2
 800a188:	461a      	mov	r2, r3
 800a18a:	4603      	mov	r3, r0
 800a18c:	70fb      	strb	r3, [r7, #3]
 800a18e:	460b      	mov	r3, r1
 800a190:	70bb      	strb	r3, [r7, #2]
 800a192:	4613      	mov	r3, r2
 800a194:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800a196:	78fa      	ldrb	r2, [r7, #3]
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	4613      	mov	r3, r2
 800a19c:	011b      	lsls	r3, r3, #4
 800a19e:	1a9b      	subs	r3, r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	440b      	add	r3, r1
 800a1a4:	3317      	adds	r3, #23
 800a1a6:	78ba      	ldrb	r2, [r7, #2]
 800a1a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	6879      	ldr	r1, [r7, #4]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	011b      	lsls	r3, r3, #4
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	440b      	add	r3, r1
 800a1b8:	3326      	adds	r3, #38	@ 0x26
 800a1ba:	787a      	ldrb	r2, [r7, #1]
 800a1bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800a1be:	7c3b      	ldrb	r3, [r7, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d114      	bne.n	800a1ee <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800a1c4:	78fa      	ldrb	r2, [r7, #3]
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	011b      	lsls	r3, r3, #4
 800a1cc:	1a9b      	subs	r3, r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	440b      	add	r3, r1
 800a1d2:	332a      	adds	r3, #42	@ 0x2a
 800a1d4:	2203      	movs	r2, #3
 800a1d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800a1d8:	78fa      	ldrb	r2, [r7, #3]
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	011b      	lsls	r3, r3, #4
 800a1e0:	1a9b      	subs	r3, r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	3319      	adds	r3, #25
 800a1e8:	7f3a      	ldrb	r2, [r7, #28]
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	e009      	b.n	800a202 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a1ee:	78fa      	ldrb	r2, [r7, #3]
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	1a9b      	subs	r3, r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	440b      	add	r3, r1
 800a1fc:	332a      	adds	r3, #42	@ 0x2a
 800a1fe:	2202      	movs	r2, #2
 800a200:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800a202:	787b      	ldrb	r3, [r7, #1]
 800a204:	2b03      	cmp	r3, #3
 800a206:	f200 8102 	bhi.w	800a40e <HAL_HCD_HC_SubmitRequest+0x292>
 800a20a:	a201      	add	r2, pc, #4	@ (adr r2, 800a210 <HAL_HCD_HC_SubmitRequest+0x94>)
 800a20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a210:	0800a221 	.word	0x0800a221
 800a214:	0800a3f9 	.word	0x0800a3f9
 800a218:	0800a2e5 	.word	0x0800a2e5
 800a21c:	0800a36f 	.word	0x0800a36f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800a220:	7c3b      	ldrb	r3, [r7, #16]
 800a222:	2b01      	cmp	r3, #1
 800a224:	f040 80f5 	bne.w	800a412 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800a228:	78bb      	ldrb	r3, [r7, #2]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d12d      	bne.n	800a28a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800a22e:	8b3b      	ldrh	r3, [r7, #24]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d109      	bne.n	800a248 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800a234:	78fa      	ldrb	r2, [r7, #3]
 800a236:	6879      	ldr	r1, [r7, #4]
 800a238:	4613      	mov	r3, r2
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	1a9b      	subs	r3, r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	440b      	add	r3, r1
 800a242:	333d      	adds	r3, #61	@ 0x3d
 800a244:	2201      	movs	r2, #1
 800a246:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800a248:	78fa      	ldrb	r2, [r7, #3]
 800a24a:	6879      	ldr	r1, [r7, #4]
 800a24c:	4613      	mov	r3, r2
 800a24e:	011b      	lsls	r3, r3, #4
 800a250:	1a9b      	subs	r3, r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	333d      	adds	r3, #61	@ 0x3d
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a25e:	78fa      	ldrb	r2, [r7, #3]
 800a260:	6879      	ldr	r1, [r7, #4]
 800a262:	4613      	mov	r3, r2
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	1a9b      	subs	r3, r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	440b      	add	r3, r1
 800a26c:	332a      	adds	r3, #42	@ 0x2a
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800a272:	e0ce      	b.n	800a412 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a274:	78fa      	ldrb	r2, [r7, #3]
 800a276:	6879      	ldr	r1, [r7, #4]
 800a278:	4613      	mov	r3, r2
 800a27a:	011b      	lsls	r3, r3, #4
 800a27c:	1a9b      	subs	r3, r3, r2
 800a27e:	009b      	lsls	r3, r3, #2
 800a280:	440b      	add	r3, r1
 800a282:	332a      	adds	r3, #42	@ 0x2a
 800a284:	2202      	movs	r2, #2
 800a286:	701a      	strb	r2, [r3, #0]
      break;
 800a288:	e0c3      	b.n	800a412 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800a28a:	78fa      	ldrb	r2, [r7, #3]
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	4613      	mov	r3, r2
 800a290:	011b      	lsls	r3, r3, #4
 800a292:	1a9b      	subs	r3, r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	440b      	add	r3, r1
 800a298:	331a      	adds	r3, #26
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	f040 80b8 	bne.w	800a412 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800a2a2:	78fa      	ldrb	r2, [r7, #3]
 800a2a4:	6879      	ldr	r1, [r7, #4]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	011b      	lsls	r3, r3, #4
 800a2aa:	1a9b      	subs	r3, r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	440b      	add	r3, r1
 800a2b0:	333c      	adds	r3, #60	@ 0x3c
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10a      	bne.n	800a2ce <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a2b8:	78fa      	ldrb	r2, [r7, #3]
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	1a9b      	subs	r3, r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	332a      	adds	r3, #42	@ 0x2a
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	701a      	strb	r2, [r3, #0]
      break;
 800a2cc:	e0a1      	b.n	800a412 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a2ce:	78fa      	ldrb	r2, [r7, #3]
 800a2d0:	6879      	ldr	r1, [r7, #4]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	011b      	lsls	r3, r3, #4
 800a2d6:	1a9b      	subs	r3, r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	440b      	add	r3, r1
 800a2dc:	332a      	adds	r3, #42	@ 0x2a
 800a2de:	2202      	movs	r2, #2
 800a2e0:	701a      	strb	r2, [r3, #0]
      break;
 800a2e2:	e096      	b.n	800a412 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800a2e4:	78bb      	ldrb	r3, [r7, #2]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d120      	bne.n	800a32c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	440b      	add	r3, r1
 800a2f8:	333d      	adds	r3, #61	@ 0x3d
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a300:	78fa      	ldrb	r2, [r7, #3]
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	4613      	mov	r3, r2
 800a306:	011b      	lsls	r3, r3, #4
 800a308:	1a9b      	subs	r3, r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	440b      	add	r3, r1
 800a30e:	332a      	adds	r3, #42	@ 0x2a
 800a310:	2200      	movs	r2, #0
 800a312:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800a314:	e07e      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a316:	78fa      	ldrb	r2, [r7, #3]
 800a318:	6879      	ldr	r1, [r7, #4]
 800a31a:	4613      	mov	r3, r2
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	1a9b      	subs	r3, r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	440b      	add	r3, r1
 800a324:	332a      	adds	r3, #42	@ 0x2a
 800a326:	2202      	movs	r2, #2
 800a328:	701a      	strb	r2, [r3, #0]
      break;
 800a32a:	e073      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800a32c:	78fa      	ldrb	r2, [r7, #3]
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	4613      	mov	r3, r2
 800a332:	011b      	lsls	r3, r3, #4
 800a334:	1a9b      	subs	r3, r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	440b      	add	r3, r1
 800a33a:	333c      	adds	r3, #60	@ 0x3c
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10a      	bne.n	800a358 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a342:	78fa      	ldrb	r2, [r7, #3]
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	4613      	mov	r3, r2
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	1a9b      	subs	r3, r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	440b      	add	r3, r1
 800a350:	332a      	adds	r3, #42	@ 0x2a
 800a352:	2200      	movs	r2, #0
 800a354:	701a      	strb	r2, [r3, #0]
      break;
 800a356:	e05d      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a358:	78fa      	ldrb	r2, [r7, #3]
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	4613      	mov	r3, r2
 800a35e:	011b      	lsls	r3, r3, #4
 800a360:	1a9b      	subs	r3, r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	440b      	add	r3, r1
 800a366:	332a      	adds	r3, #42	@ 0x2a
 800a368:	2202      	movs	r2, #2
 800a36a:	701a      	strb	r2, [r3, #0]
      break;
 800a36c:	e052      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800a36e:	78bb      	ldrb	r3, [r7, #2]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d120      	bne.n	800a3b6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800a374:	78fa      	ldrb	r2, [r7, #3]
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	4613      	mov	r3, r2
 800a37a:	011b      	lsls	r3, r3, #4
 800a37c:	1a9b      	subs	r3, r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	440b      	add	r3, r1
 800a382:	333d      	adds	r3, #61	@ 0x3d
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10a      	bne.n	800a3a0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a38a:	78fa      	ldrb	r2, [r7, #3]
 800a38c:	6879      	ldr	r1, [r7, #4]
 800a38e:	4613      	mov	r3, r2
 800a390:	011b      	lsls	r3, r3, #4
 800a392:	1a9b      	subs	r3, r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	440b      	add	r3, r1
 800a398:	332a      	adds	r3, #42	@ 0x2a
 800a39a:	2200      	movs	r2, #0
 800a39c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800a39e:	e039      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a3a0:	78fa      	ldrb	r2, [r7, #3]
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	009b      	lsls	r3, r3, #2
 800a3ac:	440b      	add	r3, r1
 800a3ae:	332a      	adds	r3, #42	@ 0x2a
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	701a      	strb	r2, [r3, #0]
      break;
 800a3b4:	e02e      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800a3b6:	78fa      	ldrb	r2, [r7, #3]
 800a3b8:	6879      	ldr	r1, [r7, #4]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	011b      	lsls	r3, r3, #4
 800a3be:	1a9b      	subs	r3, r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	440b      	add	r3, r1
 800a3c4:	333c      	adds	r3, #60	@ 0x3c
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10a      	bne.n	800a3e2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a3cc:	78fa      	ldrb	r2, [r7, #3]
 800a3ce:	6879      	ldr	r1, [r7, #4]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	011b      	lsls	r3, r3, #4
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	440b      	add	r3, r1
 800a3da:	332a      	adds	r3, #42	@ 0x2a
 800a3dc:	2200      	movs	r2, #0
 800a3de:	701a      	strb	r2, [r3, #0]
      break;
 800a3e0:	e018      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800a3e2:	78fa      	ldrb	r2, [r7, #3]
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	011b      	lsls	r3, r3, #4
 800a3ea:	1a9b      	subs	r3, r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	440b      	add	r3, r1
 800a3f0:	332a      	adds	r3, #42	@ 0x2a
 800a3f2:	2202      	movs	r2, #2
 800a3f4:	701a      	strb	r2, [r3, #0]
      break;
 800a3f6:	e00d      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800a3f8:	78fa      	ldrb	r2, [r7, #3]
 800a3fa:	6879      	ldr	r1, [r7, #4]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	011b      	lsls	r3, r3, #4
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	440b      	add	r3, r1
 800a406:	332a      	adds	r3, #42	@ 0x2a
 800a408:	2200      	movs	r2, #0
 800a40a:	701a      	strb	r2, [r3, #0]
      break;
 800a40c:	e002      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800a40e:	bf00      	nop
 800a410:	e000      	b.n	800a414 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800a412:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800a414:	78fa      	ldrb	r2, [r7, #3]
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	4613      	mov	r3, r2
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	1a9b      	subs	r3, r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	440b      	add	r3, r1
 800a422:	332c      	adds	r3, #44	@ 0x2c
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800a428:	78fa      	ldrb	r2, [r7, #3]
 800a42a:	8b39      	ldrh	r1, [r7, #24]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	4613      	mov	r3, r2
 800a430:	011b      	lsls	r3, r3, #4
 800a432:	1a9b      	subs	r3, r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	4403      	add	r3, r0
 800a438:	3334      	adds	r3, #52	@ 0x34
 800a43a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800a43c:	78fa      	ldrb	r2, [r7, #3]
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	4613      	mov	r3, r2
 800a442:	011b      	lsls	r3, r3, #4
 800a444:	1a9b      	subs	r3, r3, r2
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	440b      	add	r3, r1
 800a44a:	334c      	adds	r3, #76	@ 0x4c
 800a44c:	2200      	movs	r2, #0
 800a44e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800a450:	78fa      	ldrb	r2, [r7, #3]
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	4613      	mov	r3, r2
 800a456:	011b      	lsls	r3, r3, #4
 800a458:	1a9b      	subs	r3, r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	440b      	add	r3, r1
 800a45e:	3338      	adds	r3, #56	@ 0x38
 800a460:	2200      	movs	r2, #0
 800a462:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800a464:	78fa      	ldrb	r2, [r7, #3]
 800a466:	6879      	ldr	r1, [r7, #4]
 800a468:	4613      	mov	r3, r2
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	1a9b      	subs	r3, r3, r2
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	440b      	add	r3, r1
 800a472:	3315      	adds	r3, #21
 800a474:	78fa      	ldrb	r2, [r7, #3]
 800a476:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800a478:	78fa      	ldrb	r2, [r7, #3]
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	4613      	mov	r3, r2
 800a47e:	011b      	lsls	r3, r3, #4
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	334d      	adds	r3, #77	@ 0x4d
 800a488:	2200      	movs	r2, #0
 800a48a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	78fa      	ldrb	r2, [r7, #3]
 800a492:	4613      	mov	r3, r2
 800a494:	011b      	lsls	r3, r3, #4
 800a496:	1a9b      	subs	r3, r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	3310      	adds	r3, #16
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	4413      	add	r3, r2
 800a4a0:	1d19      	adds	r1, r3, #4
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	799b      	ldrb	r3, [r3, #6]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	f007 fd32 	bl	8011f10 <USB_HC_StartXfer>
 800a4ac:	4603      	mov	r3, r0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop

0800a4b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f007 fa33 	bl	801193a <USB_GetMode>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	f040 80fb 	bne.w	800a6d2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f007 f9f6 	bl	80118d2 <USB_ReadInterrupts>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	f000 80f1 	beq.w	800a6d0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f007 f9ed 	bl	80118d2 <USB_ReadInterrupts>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a502:	d104      	bne.n	800a50e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800a50c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4618      	mov	r0, r3
 800a514:	f007 f9dd 	bl	80118d2 <USB_ReadInterrupts>
 800a518:	4603      	mov	r3, r0
 800a51a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a51e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a522:	d104      	bne.n	800a52e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a52c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	f007 f9cd 	bl	80118d2 <USB_ReadInterrupts>
 800a538:	4603      	mov	r3, r0
 800a53a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a53e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a542:	d104      	bne.n	800a54e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800a54c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4618      	mov	r0, r3
 800a554:	f007 f9bd 	bl	80118d2 <USB_ReadInterrupts>
 800a558:	4603      	mov	r3, r0
 800a55a:	f003 0302 	and.w	r3, r3, #2
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d103      	bne.n	800a56a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2202      	movs	r2, #2
 800a568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4618      	mov	r0, r3
 800a570:	f007 f9af 	bl	80118d2 <USB_ReadInterrupts>
 800a574:	4603      	mov	r3, r0
 800a576:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a57a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a57e:	d120      	bne.n	800a5c2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800a588:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	d113      	bne.n	800a5c2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800a59a:	2110      	movs	r1, #16
 800a59c:	6938      	ldr	r0, [r7, #16]
 800a59e:	f007 f8a2 	bl	80116e6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800a5a2:	6938      	ldr	r0, [r7, #16]
 800a5a4:	f007 f8d1 	bl	801174a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	7a5b      	ldrb	r3, [r3, #9]
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d105      	bne.n	800a5bc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f007 fab6 	bl	8011b28 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f7f7 f843 	bl	8001648 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f007 f983 	bl	80118d2 <USB_ReadInterrupts>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5d6:	d102      	bne.n	800a5de <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f001 fd4d 	bl	800c078 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f007 f975 	bl	80118d2 <USB_ReadInterrupts>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f003 0308 	and.w	r3, r3, #8
 800a5ee:	2b08      	cmp	r3, #8
 800a5f0:	d106      	bne.n	800a600 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7f7 f80c 	bl	8001610 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	2208      	movs	r2, #8
 800a5fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4618      	mov	r0, r3
 800a606:	f007 f964 	bl	80118d2 <USB_ReadInterrupts>
 800a60a:	4603      	mov	r3, r0
 800a60c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a610:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a614:	d139      	bne.n	800a68a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f007 fef2 	bl	8012404 <USB_HC_ReadInterrupt>
 800a620:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a622:	2300      	movs	r3, #0
 800a624:	617b      	str	r3, [r7, #20]
 800a626:	e025      	b.n	800a674 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	f003 030f 	and.w	r3, r3, #15
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	fa22 f303 	lsr.w	r3, r2, r3
 800a634:	f003 0301 	and.w	r3, r3, #1
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d018      	beq.n	800a66e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a64e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a652:	d106      	bne.n	800a662 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	b2db      	uxtb	r3, r3
 800a658:	4619      	mov	r1, r3
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f905 	bl	800a86a <HCD_HC_IN_IRQHandler>
 800a660:	e005      	b.n	800a66e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	b2db      	uxtb	r3, r3
 800a666:	4619      	mov	r1, r3
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 ff67 	bl	800b53c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	3301      	adds	r3, #1
 800a672:	617b      	str	r3, [r7, #20]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	795b      	ldrb	r3, [r3, #5]
 800a678:	461a      	mov	r2, r3
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d3d3      	bcc.n	800a628 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800a688:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4618      	mov	r0, r3
 800a690:	f007 f91f 	bl	80118d2 <USB_ReadInterrupts>
 800a694:	4603      	mov	r3, r0
 800a696:	f003 0310 	and.w	r3, r3, #16
 800a69a:	2b10      	cmp	r3, #16
 800a69c:	d101      	bne.n	800a6a2 <HAL_HCD_IRQHandler+0x1ea>
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e000      	b.n	800a6a4 <HAL_HCD_IRQHandler+0x1ec>
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d014      	beq.n	800a6d2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f022 0210 	bic.w	r2, r2, #16
 800a6b6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 fbfe 	bl	800beba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	699a      	ldr	r2, [r3, #24]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f042 0210 	orr.w	r2, r2, #16
 800a6cc:	619a      	str	r2, [r3, #24]
 800a6ce:	e000      	b.n	800a6d2 <HAL_HCD_IRQHandler+0x21a>
      return;
 800a6d0:	bf00      	nop
    }
  }
}
 800a6d2:	3718      	adds	r7, #24
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d101      	bne.n	800a6ee <HAL_HCD_Start+0x16>
 800a6ea:	2302      	movs	r3, #2
 800a6ec:	e013      	b.n	800a716 <HAL_HCD_Start+0x3e>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f007 fa7a 	bl	8011bf6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f006 ff7f 	bl	801160a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d101      	bne.n	800a734 <HAL_HCD_Stop+0x16>
 800a730:	2302      	movs	r3, #2
 800a732:	e00d      	b.n	800a750 <HAL_HCD_Stop+0x32>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4618      	mov	r0, r3
 800a742:	f007 ffcd 	bl	80126e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4618      	mov	r0, r3
 800a766:	f007 fa1c 	bl	8011ba2 <USB_ResetPort>
 800a76a:	4603      	mov	r3, r0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800a780:	78fa      	ldrb	r2, [r7, #3]
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	4613      	mov	r3, r2
 800a786:	011b      	lsls	r3, r3, #4
 800a788:	1a9b      	subs	r3, r3, r2
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	440b      	add	r3, r1
 800a78e:	334c      	adds	r3, #76	@ 0x4c
 800a790:	781b      	ldrb	r3, [r3, #0]
}
 800a792:	4618      	mov	r0, r3
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800a7aa:	78fa      	ldrb	r2, [r7, #3]
 800a7ac:	6879      	ldr	r1, [r7, #4]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	011b      	lsls	r3, r3, #4
 800a7b2:	1a9b      	subs	r3, r3, r2
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	440b      	add	r3, r1
 800a7b8:	3338      	adds	r3, #56	@ 0x38
 800a7ba:	681b      	ldr	r3, [r3, #0]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f007 fa5e 	bl	8011c96 <USB_GetCurrentFrame>
 800a7da:	4603      	mov	r3, r0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f007 fa39 	bl	8011c68 <USB_GetHostSpeed>
 800a7f6:	4603      	mov	r3, r0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	460b      	mov	r3, r1
 800a80a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800a80c:	78fa      	ldrb	r2, [r7, #3]
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	4613      	mov	r3, r2
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	1a9b      	subs	r3, r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	440b      	add	r3, r1
 800a81a:	331a      	adds	r3, #26
 800a81c:	2200      	movs	r2, #0
 800a81e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800a820:	78fa      	ldrb	r2, [r7, #3]
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	4613      	mov	r3, r2
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	1a9b      	subs	r3, r3, r2
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	440b      	add	r3, r1
 800a82e:	331b      	adds	r3, #27
 800a830:	2200      	movs	r2, #0
 800a832:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800a834:	78fa      	ldrb	r2, [r7, #3]
 800a836:	6879      	ldr	r1, [r7, #4]
 800a838:	4613      	mov	r3, r2
 800a83a:	011b      	lsls	r3, r3, #4
 800a83c:	1a9b      	subs	r3, r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	440b      	add	r3, r1
 800a842:	3325      	adds	r3, #37	@ 0x25
 800a844:	2200      	movs	r2, #0
 800a846:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800a848:	78fa      	ldrb	r2, [r7, #3]
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	4613      	mov	r3, r2
 800a84e:	011b      	lsls	r3, r3, #4
 800a850:	1a9b      	subs	r3, r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	440b      	add	r3, r1
 800a856:	3324      	adds	r3, #36	@ 0x24
 800a858:	2200      	movs	r2, #0
 800a85a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b086      	sub	sp, #24
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	460b      	mov	r3, r1
 800a874:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	78fa      	ldrb	r2, [r7, #3]
 800a886:	4611      	mov	r1, r2
 800a888:	4618      	mov	r0, r3
 800a88a:	f007 f835 	bl	80118f8 <USB_ReadChInterrupts>
 800a88e:	4603      	mov	r3, r0
 800a890:	f003 0304 	and.w	r3, r3, #4
 800a894:	2b04      	cmp	r3, #4
 800a896:	d11a      	bne.n	800a8ce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a898:	78fb      	ldrb	r3, [r7, #3]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	2304      	movs	r3, #4
 800a8a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a8aa:	78fa      	ldrb	r2, [r7, #3]
 800a8ac:	6879      	ldr	r1, [r7, #4]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	011b      	lsls	r3, r3, #4
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	440b      	add	r3, r1
 800a8b8:	334d      	adds	r3, #77	@ 0x4d
 800a8ba:	2207      	movs	r2, #7
 800a8bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	78fa      	ldrb	r2, [r7, #3]
 800a8c4:	4611      	mov	r1, r2
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f007 fdad 	bl	8012426 <USB_HC_Halt>
 800a8cc:	e09e      	b.n	800aa0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	78fa      	ldrb	r2, [r7, #3]
 800a8d4:	4611      	mov	r1, r2
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f007 f80e 	bl	80118f8 <USB_ReadChInterrupts>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8e6:	d11b      	bne.n	800a920 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800a8e8:	78fb      	ldrb	r3, [r7, #3]
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800a8fc:	78fa      	ldrb	r2, [r7, #3]
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	4613      	mov	r3, r2
 800a902:	011b      	lsls	r3, r3, #4
 800a904:	1a9b      	subs	r3, r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	440b      	add	r3, r1
 800a90a:	334d      	adds	r3, #77	@ 0x4d
 800a90c:	2208      	movs	r2, #8
 800a90e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	4611      	mov	r1, r2
 800a918:	4618      	mov	r0, r3
 800a91a:	f007 fd84 	bl	8012426 <USB_HC_Halt>
 800a91e:	e075      	b.n	800aa0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	78fa      	ldrb	r2, [r7, #3]
 800a926:	4611      	mov	r1, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f006 ffe5 	bl	80118f8 <USB_ReadChInterrupts>
 800a92e:	4603      	mov	r3, r0
 800a930:	f003 0308 	and.w	r3, r3, #8
 800a934:	2b08      	cmp	r3, #8
 800a936:	d11a      	bne.n	800a96e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a938:	78fb      	ldrb	r3, [r7, #3]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a944:	461a      	mov	r2, r3
 800a946:	2308      	movs	r3, #8
 800a948:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a94a:	78fa      	ldrb	r2, [r7, #3]
 800a94c:	6879      	ldr	r1, [r7, #4]
 800a94e:	4613      	mov	r3, r2
 800a950:	011b      	lsls	r3, r3, #4
 800a952:	1a9b      	subs	r3, r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	440b      	add	r3, r1
 800a958:	334d      	adds	r3, #77	@ 0x4d
 800a95a:	2206      	movs	r2, #6
 800a95c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	78fa      	ldrb	r2, [r7, #3]
 800a964:	4611      	mov	r1, r2
 800a966:	4618      	mov	r0, r3
 800a968:	f007 fd5d 	bl	8012426 <USB_HC_Halt>
 800a96c:	e04e      	b.n	800aa0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	78fa      	ldrb	r2, [r7, #3]
 800a974:	4611      	mov	r1, r2
 800a976:	4618      	mov	r0, r3
 800a978:	f006 ffbe 	bl	80118f8 <USB_ReadChInterrupts>
 800a97c:	4603      	mov	r3, r0
 800a97e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a986:	d11b      	bne.n	800a9c0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a994:	461a      	mov	r2, r3
 800a996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a99a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800a99c:	78fa      	ldrb	r2, [r7, #3]
 800a99e:	6879      	ldr	r1, [r7, #4]
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	011b      	lsls	r3, r3, #4
 800a9a4:	1a9b      	subs	r3, r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	440b      	add	r3, r1
 800a9aa:	334d      	adds	r3, #77	@ 0x4d
 800a9ac:	2209      	movs	r2, #9
 800a9ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	78fa      	ldrb	r2, [r7, #3]
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f007 fd34 	bl	8012426 <USB_HC_Halt>
 800a9be:	e025      	b.n	800aa0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	78fa      	ldrb	r2, [r7, #3]
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f006 ff95 	bl	80118f8 <USB_ReadChInterrupts>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9d4:	2b80      	cmp	r3, #128	@ 0x80
 800a9d6:	d119      	bne.n	800aa0c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	015a      	lsls	r2, r3, #5
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	2380      	movs	r3, #128	@ 0x80
 800a9e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a9ea:	78fa      	ldrb	r2, [r7, #3]
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	011b      	lsls	r3, r3, #4
 800a9f2:	1a9b      	subs	r3, r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	440b      	add	r3, r1
 800a9f8:	334d      	adds	r3, #77	@ 0x4d
 800a9fa:	2207      	movs	r2, #7
 800a9fc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	78fa      	ldrb	r2, [r7, #3]
 800aa04:	4611      	mov	r1, r2
 800aa06:	4618      	mov	r0, r3
 800aa08:	f007 fd0d 	bl	8012426 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	78fa      	ldrb	r2, [r7, #3]
 800aa12:	4611      	mov	r1, r2
 800aa14:	4618      	mov	r0, r3
 800aa16:	f006 ff6f 	bl	80118f8 <USB_ReadChInterrupts>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa24:	d112      	bne.n	800aa4c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	78fa      	ldrb	r2, [r7, #3]
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f007 fcf9 	bl	8012426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800aa34:	78fb      	ldrb	r3, [r7, #3]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa40:	461a      	mov	r2, r3
 800aa42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa46:	6093      	str	r3, [r2, #8]
 800aa48:	f000 bd75 	b.w	800b536 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	78fa      	ldrb	r2, [r7, #3]
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f006 ff4f 	bl	80118f8 <USB_ReadChInterrupts>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	f040 8128 	bne.w	800acb6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800aa66:	78fb      	ldrb	r3, [r7, #3]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aa72:	461a      	mov	r2, r3
 800aa74:	2320      	movs	r3, #32
 800aa76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800aa78:	78fa      	ldrb	r2, [r7, #3]
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	011b      	lsls	r3, r3, #4
 800aa80:	1a9b      	subs	r3, r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	440b      	add	r3, r1
 800aa86:	331b      	adds	r3, #27
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d119      	bne.n	800aac2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800aa8e:	78fa      	ldrb	r2, [r7, #3]
 800aa90:	6879      	ldr	r1, [r7, #4]
 800aa92:	4613      	mov	r3, r2
 800aa94:	011b      	lsls	r3, r3, #4
 800aa96:	1a9b      	subs	r3, r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	331b      	adds	r3, #27
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800aaa2:	78fb      	ldrb	r3, [r7, #3]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	78fa      	ldrb	r2, [r7, #3]
 800aab2:	0151      	lsls	r1, r2, #5
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	440a      	add	r2, r1
 800aab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aabc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aac0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	799b      	ldrb	r3, [r3, #6]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d01b      	beq.n	800ab02 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800aaca:	78fa      	ldrb	r2, [r7, #3]
 800aacc:	6879      	ldr	r1, [r7, #4]
 800aace:	4613      	mov	r3, r2
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	1a9b      	subs	r3, r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	440b      	add	r3, r1
 800aad8:	3330      	adds	r3, #48	@ 0x30
 800aada:	6819      	ldr	r1, [r3, #0]
 800aadc:	78fb      	ldrb	r3, [r7, #3]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aae8:	691b      	ldr	r3, [r3, #16]
 800aaea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaee:	78fa      	ldrb	r2, [r7, #3]
 800aaf0:	1ac9      	subs	r1, r1, r3
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	1a9b      	subs	r3, r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4403      	add	r3, r0
 800aafe:	3338      	adds	r3, #56	@ 0x38
 800ab00:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800ab02:	78fa      	ldrb	r2, [r7, #3]
 800ab04:	6879      	ldr	r1, [r7, #4]
 800ab06:	4613      	mov	r3, r2
 800ab08:	011b      	lsls	r3, r3, #4
 800ab0a:	1a9b      	subs	r3, r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	440b      	add	r3, r1
 800ab10:	334d      	adds	r3, #77	@ 0x4d
 800ab12:	2201      	movs	r2, #1
 800ab14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800ab16:	78fa      	ldrb	r2, [r7, #3]
 800ab18:	6879      	ldr	r1, [r7, #4]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	011b      	lsls	r3, r3, #4
 800ab1e:	1a9b      	subs	r3, r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	440b      	add	r3, r1
 800ab24:	3344      	adds	r3, #68	@ 0x44
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800ab2a:	78fb      	ldrb	r3, [r7, #3]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab36:	461a      	mov	r2, r3
 800ab38:	2301      	movs	r3, #1
 800ab3a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800ab3c:	78fa      	ldrb	r2, [r7, #3]
 800ab3e:	6879      	ldr	r1, [r7, #4]
 800ab40:	4613      	mov	r3, r2
 800ab42:	011b      	lsls	r3, r3, #4
 800ab44:	1a9b      	subs	r3, r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	440b      	add	r3, r1
 800ab4a:	3326      	adds	r3, #38	@ 0x26
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00a      	beq.n	800ab68 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800ab52:	78fa      	ldrb	r2, [r7, #3]
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4613      	mov	r3, r2
 800ab58:	011b      	lsls	r3, r3, #4
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	440b      	add	r3, r1
 800ab60:	3326      	adds	r3, #38	@ 0x26
 800ab62:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d110      	bne.n	800ab8a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	78fa      	ldrb	r2, [r7, #3]
 800ab6e:	4611      	mov	r1, r2
 800ab70:	4618      	mov	r0, r3
 800ab72:	f007 fc58 	bl	8012426 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800ab76:	78fb      	ldrb	r3, [r7, #3]
 800ab78:	015a      	lsls	r2, r3, #5
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab82:	461a      	mov	r2, r3
 800ab84:	2310      	movs	r3, #16
 800ab86:	6093      	str	r3, [r2, #8]
 800ab88:	e03d      	b.n	800ac06 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800ab8a:	78fa      	ldrb	r2, [r7, #3]
 800ab8c:	6879      	ldr	r1, [r7, #4]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	011b      	lsls	r3, r3, #4
 800ab92:	1a9b      	subs	r3, r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	440b      	add	r3, r1
 800ab98:	3326      	adds	r3, #38	@ 0x26
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b03      	cmp	r3, #3
 800ab9e:	d00a      	beq.n	800abb6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800aba0:	78fa      	ldrb	r2, [r7, #3]
 800aba2:	6879      	ldr	r1, [r7, #4]
 800aba4:	4613      	mov	r3, r2
 800aba6:	011b      	lsls	r3, r3, #4
 800aba8:	1a9b      	subs	r3, r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	440b      	add	r3, r1
 800abae:	3326      	adds	r3, #38	@ 0x26
 800abb0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d127      	bne.n	800ac06 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800abb6:	78fb      	ldrb	r3, [r7, #3]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	78fa      	ldrb	r2, [r7, #3]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800abd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800abd4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800abd6:	78fa      	ldrb	r2, [r7, #3]
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	4613      	mov	r3, r2
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	1a9b      	subs	r3, r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	440b      	add	r3, r1
 800abe4:	334c      	adds	r3, #76	@ 0x4c
 800abe6:	2201      	movs	r2, #1
 800abe8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800abea:	78fa      	ldrb	r2, [r7, #3]
 800abec:	6879      	ldr	r1, [r7, #4]
 800abee:	4613      	mov	r3, r2
 800abf0:	011b      	lsls	r3, r3, #4
 800abf2:	1a9b      	subs	r3, r3, r2
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	440b      	add	r3, r1
 800abf8:	334c      	adds	r3, #76	@ 0x4c
 800abfa:	781a      	ldrb	r2, [r3, #0]
 800abfc:	78fb      	ldrb	r3, [r7, #3]
 800abfe:	4619      	mov	r1, r3
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7f6 fd4b 	bl	800169c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	799b      	ldrb	r3, [r3, #6]
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d13b      	bne.n	800ac86 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800ac0e:	78fa      	ldrb	r2, [r7, #3]
 800ac10:	6879      	ldr	r1, [r7, #4]
 800ac12:	4613      	mov	r3, r2
 800ac14:	011b      	lsls	r3, r3, #4
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	440b      	add	r3, r1
 800ac1c:	3338      	adds	r3, #56	@ 0x38
 800ac1e:	6819      	ldr	r1, [r3, #0]
 800ac20:	78fa      	ldrb	r2, [r7, #3]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4613      	mov	r3, r2
 800ac26:	011b      	lsls	r3, r3, #4
 800ac28:	1a9b      	subs	r3, r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	4403      	add	r3, r0
 800ac2e:	3328      	adds	r3, #40	@ 0x28
 800ac30:	881b      	ldrh	r3, [r3, #0]
 800ac32:	440b      	add	r3, r1
 800ac34:	1e59      	subs	r1, r3, #1
 800ac36:	78fa      	ldrb	r2, [r7, #3]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	011b      	lsls	r3, r3, #4
 800ac3e:	1a9b      	subs	r3, r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4403      	add	r3, r0
 800ac44:	3328      	adds	r3, #40	@ 0x28
 800ac46:	881b      	ldrh	r3, [r3, #0]
 800ac48:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 8470 	beq.w	800b536 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800ac56:	78fa      	ldrb	r2, [r7, #3]
 800ac58:	6879      	ldr	r1, [r7, #4]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	011b      	lsls	r3, r3, #4
 800ac5e:	1a9b      	subs	r3, r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	440b      	add	r3, r1
 800ac64:	333c      	adds	r3, #60	@ 0x3c
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	78fa      	ldrb	r2, [r7, #3]
 800ac6a:	f083 0301 	eor.w	r3, r3, #1
 800ac6e:	b2d8      	uxtb	r0, r3
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	4613      	mov	r3, r2
 800ac74:	011b      	lsls	r3, r3, #4
 800ac76:	1a9b      	subs	r3, r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	333c      	adds	r3, #60	@ 0x3c
 800ac7e:	4602      	mov	r2, r0
 800ac80:	701a      	strb	r2, [r3, #0]
 800ac82:	f000 bc58 	b.w	800b536 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800ac86:	78fa      	ldrb	r2, [r7, #3]
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	011b      	lsls	r3, r3, #4
 800ac8e:	1a9b      	subs	r3, r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	333c      	adds	r3, #60	@ 0x3c
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	78fa      	ldrb	r2, [r7, #3]
 800ac9a:	f083 0301 	eor.w	r3, r3, #1
 800ac9e:	b2d8      	uxtb	r0, r3
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	4613      	mov	r3, r2
 800aca4:	011b      	lsls	r3, r3, #4
 800aca6:	1a9b      	subs	r3, r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	440b      	add	r3, r1
 800acac:	333c      	adds	r3, #60	@ 0x3c
 800acae:	4602      	mov	r2, r0
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	f000 bc40 	b.w	800b536 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	78fa      	ldrb	r2, [r7, #3]
 800acbc:	4611      	mov	r1, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f006 fe1a 	bl	80118f8 <USB_ReadChInterrupts>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f003 0320 	and.w	r3, r3, #32
 800acca:	2b20      	cmp	r3, #32
 800accc:	d131      	bne.n	800ad32 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	015a      	lsls	r2, r3, #5
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	4413      	add	r3, r2
 800acd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800acda:	461a      	mov	r2, r3
 800acdc:	2320      	movs	r3, #32
 800acde:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800ace0:	78fa      	ldrb	r2, [r7, #3]
 800ace2:	6879      	ldr	r1, [r7, #4]
 800ace4:	4613      	mov	r3, r2
 800ace6:	011b      	lsls	r3, r3, #4
 800ace8:	1a9b      	subs	r3, r3, r2
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	440b      	add	r3, r1
 800acee:	331a      	adds	r3, #26
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	f040 841f 	bne.w	800b536 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800acf8:	78fa      	ldrb	r2, [r7, #3]
 800acfa:	6879      	ldr	r1, [r7, #4]
 800acfc:	4613      	mov	r3, r2
 800acfe:	011b      	lsls	r3, r3, #4
 800ad00:	1a9b      	subs	r3, r3, r2
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	440b      	add	r3, r1
 800ad06:	331b      	adds	r3, #27
 800ad08:	2201      	movs	r2, #1
 800ad0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800ad0c:	78fa      	ldrb	r2, [r7, #3]
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	4613      	mov	r3, r2
 800ad12:	011b      	lsls	r3, r3, #4
 800ad14:	1a9b      	subs	r3, r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	440b      	add	r3, r1
 800ad1a:	334d      	adds	r3, #77	@ 0x4d
 800ad1c:	2203      	movs	r2, #3
 800ad1e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	78fa      	ldrb	r2, [r7, #3]
 800ad26:	4611      	mov	r1, r2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f007 fb7c 	bl	8012426 <USB_HC_Halt>
 800ad2e:	f000 bc02 	b.w	800b536 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	78fa      	ldrb	r2, [r7, #3]
 800ad38:	4611      	mov	r1, r2
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f006 fddc 	bl	80118f8 <USB_ReadChInterrupts>
 800ad40:	4603      	mov	r3, r0
 800ad42:	f003 0302 	and.w	r3, r3, #2
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	f040 8305 	bne.w	800b356 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800ad4c:	78fb      	ldrb	r3, [r7, #3]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ad58:	461a      	mov	r2, r3
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800ad5e:	78fa      	ldrb	r2, [r7, #3]
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	011b      	lsls	r3, r3, #4
 800ad66:	1a9b      	subs	r3, r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	440b      	add	r3, r1
 800ad6c:	334d      	adds	r3, #77	@ 0x4d
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d114      	bne.n	800ad9e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ad74:	78fa      	ldrb	r2, [r7, #3]
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	011b      	lsls	r3, r3, #4
 800ad7c:	1a9b      	subs	r3, r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	440b      	add	r3, r1
 800ad82:	334d      	adds	r3, #77	@ 0x4d
 800ad84:	2202      	movs	r2, #2
 800ad86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800ad88:	78fa      	ldrb	r2, [r7, #3]
 800ad8a:	6879      	ldr	r1, [r7, #4]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	1a9b      	subs	r3, r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	440b      	add	r3, r1
 800ad96:	334c      	adds	r3, #76	@ 0x4c
 800ad98:	2201      	movs	r2, #1
 800ad9a:	701a      	strb	r2, [r3, #0]
 800ad9c:	e2cc      	b.n	800b338 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800ad9e:	78fa      	ldrb	r2, [r7, #3]
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	011b      	lsls	r3, r3, #4
 800ada6:	1a9b      	subs	r3, r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	334d      	adds	r3, #77	@ 0x4d
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	2b06      	cmp	r3, #6
 800adb2:	d114      	bne.n	800adde <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800adb4:	78fa      	ldrb	r2, [r7, #3]
 800adb6:	6879      	ldr	r1, [r7, #4]
 800adb8:	4613      	mov	r3, r2
 800adba:	011b      	lsls	r3, r3, #4
 800adbc:	1a9b      	subs	r3, r3, r2
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	440b      	add	r3, r1
 800adc2:	334d      	adds	r3, #77	@ 0x4d
 800adc4:	2202      	movs	r2, #2
 800adc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800adc8:	78fa      	ldrb	r2, [r7, #3]
 800adca:	6879      	ldr	r1, [r7, #4]
 800adcc:	4613      	mov	r3, r2
 800adce:	011b      	lsls	r3, r3, #4
 800add0:	1a9b      	subs	r3, r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	440b      	add	r3, r1
 800add6:	334c      	adds	r3, #76	@ 0x4c
 800add8:	2205      	movs	r2, #5
 800adda:	701a      	strb	r2, [r3, #0]
 800addc:	e2ac      	b.n	800b338 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800adde:	78fa      	ldrb	r2, [r7, #3]
 800ade0:	6879      	ldr	r1, [r7, #4]
 800ade2:	4613      	mov	r3, r2
 800ade4:	011b      	lsls	r3, r3, #4
 800ade6:	1a9b      	subs	r3, r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	440b      	add	r3, r1
 800adec:	334d      	adds	r3, #77	@ 0x4d
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2b07      	cmp	r3, #7
 800adf2:	d00b      	beq.n	800ae0c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800adf4:	78fa      	ldrb	r2, [r7, #3]
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	4613      	mov	r3, r2
 800adfa:	011b      	lsls	r3, r3, #4
 800adfc:	1a9b      	subs	r3, r3, r2
 800adfe:	009b      	lsls	r3, r3, #2
 800ae00:	440b      	add	r3, r1
 800ae02:	334d      	adds	r3, #77	@ 0x4d
 800ae04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800ae06:	2b09      	cmp	r3, #9
 800ae08:	f040 80a6 	bne.w	800af58 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ae0c:	78fa      	ldrb	r2, [r7, #3]
 800ae0e:	6879      	ldr	r1, [r7, #4]
 800ae10:	4613      	mov	r3, r2
 800ae12:	011b      	lsls	r3, r3, #4
 800ae14:	1a9b      	subs	r3, r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	440b      	add	r3, r1
 800ae1a:	334d      	adds	r3, #77	@ 0x4d
 800ae1c:	2202      	movs	r2, #2
 800ae1e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800ae20:	78fa      	ldrb	r2, [r7, #3]
 800ae22:	6879      	ldr	r1, [r7, #4]
 800ae24:	4613      	mov	r3, r2
 800ae26:	011b      	lsls	r3, r3, #4
 800ae28:	1a9b      	subs	r3, r3, r2
 800ae2a:	009b      	lsls	r3, r3, #2
 800ae2c:	440b      	add	r3, r1
 800ae2e:	3344      	adds	r3, #68	@ 0x44
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	1c59      	adds	r1, r3, #1
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	4613      	mov	r3, r2
 800ae38:	011b      	lsls	r3, r3, #4
 800ae3a:	1a9b      	subs	r3, r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4403      	add	r3, r0
 800ae40:	3344      	adds	r3, #68	@ 0x44
 800ae42:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800ae44:	78fa      	ldrb	r2, [r7, #3]
 800ae46:	6879      	ldr	r1, [r7, #4]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	011b      	lsls	r3, r3, #4
 800ae4c:	1a9b      	subs	r3, r3, r2
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	440b      	add	r3, r1
 800ae52:	3344      	adds	r3, #68	@ 0x44
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d943      	bls.n	800aee2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800ae5a:	78fa      	ldrb	r2, [r7, #3]
 800ae5c:	6879      	ldr	r1, [r7, #4]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	011b      	lsls	r3, r3, #4
 800ae62:	1a9b      	subs	r3, r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	440b      	add	r3, r1
 800ae68:	3344      	adds	r3, #68	@ 0x44
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800ae6e:	78fa      	ldrb	r2, [r7, #3]
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	4613      	mov	r3, r2
 800ae74:	011b      	lsls	r3, r3, #4
 800ae76:	1a9b      	subs	r3, r3, r2
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	440b      	add	r3, r1
 800ae7c:	331a      	adds	r3, #26
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d123      	bne.n	800aecc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800ae84:	78fa      	ldrb	r2, [r7, #3]
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	011b      	lsls	r3, r3, #4
 800ae8c:	1a9b      	subs	r3, r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	440b      	add	r3, r1
 800ae92:	331b      	adds	r3, #27
 800ae94:	2200      	movs	r2, #0
 800ae96:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800ae98:	78fa      	ldrb	r2, [r7, #3]
 800ae9a:	6879      	ldr	r1, [r7, #4]
 800ae9c:	4613      	mov	r3, r2
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	1a9b      	subs	r3, r3, r2
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	440b      	add	r3, r1
 800aea6:	331c      	adds	r3, #28
 800aea8:	2200      	movs	r2, #0
 800aeaa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800aeac:	78fb      	ldrb	r3, [r7, #3]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	693b      	ldr	r3, [r7, #16]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	78fa      	ldrb	r2, [r7, #3]
 800aebc:	0151      	lsls	r1, r2, #5
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	440a      	add	r2, r1
 800aec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800aec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aeca:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800aecc:	78fa      	ldrb	r2, [r7, #3]
 800aece:	6879      	ldr	r1, [r7, #4]
 800aed0:	4613      	mov	r3, r2
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	1a9b      	subs	r3, r3, r2
 800aed6:	009b      	lsls	r3, r3, #2
 800aed8:	440b      	add	r3, r1
 800aeda:	334c      	adds	r3, #76	@ 0x4c
 800aedc:	2204      	movs	r2, #4
 800aede:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aee0:	e229      	b.n	800b336 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800aee2:	78fa      	ldrb	r2, [r7, #3]
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	4613      	mov	r3, r2
 800aee8:	011b      	lsls	r3, r3, #4
 800aeea:	1a9b      	subs	r3, r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	334c      	adds	r3, #76	@ 0x4c
 800aef2:	2202      	movs	r2, #2
 800aef4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800aef6:	78fa      	ldrb	r2, [r7, #3]
 800aef8:	6879      	ldr	r1, [r7, #4]
 800aefa:	4613      	mov	r3, r2
 800aefc:	011b      	lsls	r3, r3, #4
 800aefe:	1a9b      	subs	r3, r3, r2
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	440b      	add	r3, r1
 800af04:	3326      	adds	r3, #38	@ 0x26
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00b      	beq.n	800af24 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800af0c:	78fa      	ldrb	r2, [r7, #3]
 800af0e:	6879      	ldr	r1, [r7, #4]
 800af10:	4613      	mov	r3, r2
 800af12:	011b      	lsls	r3, r3, #4
 800af14:	1a9b      	subs	r3, r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	440b      	add	r3, r1
 800af1a:	3326      	adds	r3, #38	@ 0x26
 800af1c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800af1e:	2b02      	cmp	r3, #2
 800af20:	f040 8209 	bne.w	800b336 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800af24:	78fb      	ldrb	r3, [r7, #3]
 800af26:	015a      	lsls	r2, r3, #5
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	4413      	add	r3, r2
 800af2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800af3a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af42:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	015a      	lsls	r2, r3, #5
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	4413      	add	r3, r2
 800af4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af50:	461a      	mov	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800af56:	e1ee      	b.n	800b336 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800af58:	78fa      	ldrb	r2, [r7, #3]
 800af5a:	6879      	ldr	r1, [r7, #4]
 800af5c:	4613      	mov	r3, r2
 800af5e:	011b      	lsls	r3, r3, #4
 800af60:	1a9b      	subs	r3, r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	440b      	add	r3, r1
 800af66:	334d      	adds	r3, #77	@ 0x4d
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b05      	cmp	r3, #5
 800af6c:	f040 80c8 	bne.w	800b100 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800af70:	78fa      	ldrb	r2, [r7, #3]
 800af72:	6879      	ldr	r1, [r7, #4]
 800af74:	4613      	mov	r3, r2
 800af76:	011b      	lsls	r3, r3, #4
 800af78:	1a9b      	subs	r3, r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	440b      	add	r3, r1
 800af7e:	334d      	adds	r3, #77	@ 0x4d
 800af80:	2202      	movs	r2, #2
 800af82:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800af84:	78fa      	ldrb	r2, [r7, #3]
 800af86:	6879      	ldr	r1, [r7, #4]
 800af88:	4613      	mov	r3, r2
 800af8a:	011b      	lsls	r3, r3, #4
 800af8c:	1a9b      	subs	r3, r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	440b      	add	r3, r1
 800af92:	331b      	adds	r3, #27
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	2b01      	cmp	r3, #1
 800af98:	f040 81ce 	bne.w	800b338 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800af9c:	78fa      	ldrb	r2, [r7, #3]
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	4613      	mov	r3, r2
 800afa2:	011b      	lsls	r3, r3, #4
 800afa4:	1a9b      	subs	r3, r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	440b      	add	r3, r1
 800afaa:	3326      	adds	r3, #38	@ 0x26
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b03      	cmp	r3, #3
 800afb0:	d16b      	bne.n	800b08a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800afb2:	78fa      	ldrb	r2, [r7, #3]
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	4613      	mov	r3, r2
 800afb8:	011b      	lsls	r3, r3, #4
 800afba:	1a9b      	subs	r3, r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	440b      	add	r3, r1
 800afc0:	3348      	adds	r3, #72	@ 0x48
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	1c59      	adds	r1, r3, #1
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	4613      	mov	r3, r2
 800afca:	011b      	lsls	r3, r3, #4
 800afcc:	1a9b      	subs	r3, r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4403      	add	r3, r0
 800afd2:	3348      	adds	r3, #72	@ 0x48
 800afd4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800afd6:	78fa      	ldrb	r2, [r7, #3]
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	4613      	mov	r3, r2
 800afdc:	011b      	lsls	r3, r3, #4
 800afde:	1a9b      	subs	r3, r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	440b      	add	r3, r1
 800afe4:	3348      	adds	r3, #72	@ 0x48
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d943      	bls.n	800b074 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800afec:	78fa      	ldrb	r2, [r7, #3]
 800afee:	6879      	ldr	r1, [r7, #4]
 800aff0:	4613      	mov	r3, r2
 800aff2:	011b      	lsls	r3, r3, #4
 800aff4:	1a9b      	subs	r3, r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	440b      	add	r3, r1
 800affa:	3348      	adds	r3, #72	@ 0x48
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800b000:	78fa      	ldrb	r2, [r7, #3]
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	4613      	mov	r3, r2
 800b006:	011b      	lsls	r3, r3, #4
 800b008:	1a9b      	subs	r3, r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	440b      	add	r3, r1
 800b00e:	331b      	adds	r3, #27
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800b014:	78fa      	ldrb	r2, [r7, #3]
 800b016:	6879      	ldr	r1, [r7, #4]
 800b018:	4613      	mov	r3, r2
 800b01a:	011b      	lsls	r3, r3, #4
 800b01c:	1a9b      	subs	r3, r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	440b      	add	r3, r1
 800b022:	3344      	adds	r3, #68	@ 0x44
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b02      	cmp	r3, #2
 800b028:	d809      	bhi.n	800b03e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800b02a:	78fa      	ldrb	r2, [r7, #3]
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4613      	mov	r3, r2
 800b030:	011b      	lsls	r3, r3, #4
 800b032:	1a9b      	subs	r3, r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	440b      	add	r3, r1
 800b038:	331c      	adds	r3, #28
 800b03a:	2201      	movs	r2, #1
 800b03c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800b03e:	78fb      	ldrb	r3, [r7, #3]
 800b040:	015a      	lsls	r2, r3, #5
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	4413      	add	r3, r2
 800b046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	78fa      	ldrb	r2, [r7, #3]
 800b04e:	0151      	lsls	r1, r2, #5
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	440a      	add	r2, r1
 800b054:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b058:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b05c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800b05e:	78fa      	ldrb	r2, [r7, #3]
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	4613      	mov	r3, r2
 800b064:	011b      	lsls	r3, r3, #4
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	440b      	add	r3, r1
 800b06c:	334c      	adds	r3, #76	@ 0x4c
 800b06e:	2204      	movs	r2, #4
 800b070:	701a      	strb	r2, [r3, #0]
 800b072:	e014      	b.n	800b09e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800b074:	78fa      	ldrb	r2, [r7, #3]
 800b076:	6879      	ldr	r1, [r7, #4]
 800b078:	4613      	mov	r3, r2
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	1a9b      	subs	r3, r3, r2
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	440b      	add	r3, r1
 800b082:	334c      	adds	r3, #76	@ 0x4c
 800b084:	2202      	movs	r2, #2
 800b086:	701a      	strb	r2, [r3, #0]
 800b088:	e009      	b.n	800b09e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800b08a:	78fa      	ldrb	r2, [r7, #3]
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	4613      	mov	r3, r2
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	1a9b      	subs	r3, r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	440b      	add	r3, r1
 800b098:	334c      	adds	r3, #76	@ 0x4c
 800b09a:	2202      	movs	r2, #2
 800b09c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b09e:	78fa      	ldrb	r2, [r7, #3]
 800b0a0:	6879      	ldr	r1, [r7, #4]
 800b0a2:	4613      	mov	r3, r2
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	1a9b      	subs	r3, r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	440b      	add	r3, r1
 800b0ac:	3326      	adds	r3, #38	@ 0x26
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00b      	beq.n	800b0cc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800b0b4:	78fa      	ldrb	r2, [r7, #3]
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	011b      	lsls	r3, r3, #4
 800b0bc:	1a9b      	subs	r3, r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	3326      	adds	r3, #38	@ 0x26
 800b0c4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	f040 8136 	bne.w	800b338 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800b0cc:	78fb      	ldrb	r3, [r7, #3]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b0e2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b0ea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800b0ec:	78fb      	ldrb	r3, [r7, #3]
 800b0ee:	015a      	lsls	r2, r3, #5
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	e11b      	b.n	800b338 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800b100:	78fa      	ldrb	r2, [r7, #3]
 800b102:	6879      	ldr	r1, [r7, #4]
 800b104:	4613      	mov	r3, r2
 800b106:	011b      	lsls	r3, r3, #4
 800b108:	1a9b      	subs	r3, r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	440b      	add	r3, r1
 800b10e:	334d      	adds	r3, #77	@ 0x4d
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	2b03      	cmp	r3, #3
 800b114:	f040 8081 	bne.w	800b21a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800b118:	78fa      	ldrb	r2, [r7, #3]
 800b11a:	6879      	ldr	r1, [r7, #4]
 800b11c:	4613      	mov	r3, r2
 800b11e:	011b      	lsls	r3, r3, #4
 800b120:	1a9b      	subs	r3, r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	440b      	add	r3, r1
 800b126:	334d      	adds	r3, #77	@ 0x4d
 800b128:	2202      	movs	r2, #2
 800b12a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800b12c:	78fa      	ldrb	r2, [r7, #3]
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	4613      	mov	r3, r2
 800b132:	011b      	lsls	r3, r3, #4
 800b134:	1a9b      	subs	r3, r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	331b      	adds	r3, #27
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	f040 80fa 	bne.w	800b338 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800b144:	78fa      	ldrb	r2, [r7, #3]
 800b146:	6879      	ldr	r1, [r7, #4]
 800b148:	4613      	mov	r3, r2
 800b14a:	011b      	lsls	r3, r3, #4
 800b14c:	1a9b      	subs	r3, r3, r2
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	440b      	add	r3, r1
 800b152:	334c      	adds	r3, #76	@ 0x4c
 800b154:	2202      	movs	r2, #2
 800b156:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b158:	78fb      	ldrb	r3, [r7, #3]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	78fa      	ldrb	r2, [r7, #3]
 800b168:	0151      	lsls	r1, r2, #5
 800b16a:	693a      	ldr	r2, [r7, #16]
 800b16c:	440a      	add	r2, r1
 800b16e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b176:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b178:	78fb      	ldrb	r3, [r7, #3]
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	78fa      	ldrb	r2, [r7, #3]
 800b188:	0151      	lsls	r1, r2, #5
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	440a      	add	r2, r1
 800b18e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b196:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800b198:	78fb      	ldrb	r3, [r7, #3]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	78fa      	ldrb	r2, [r7, #3]
 800b1a8:	0151      	lsls	r1, r2, #5
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	440a      	add	r2, r1
 800b1ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b1b2:	f023 0320 	bic.w	r3, r3, #32
 800b1b6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b1b8:	78fa      	ldrb	r2, [r7, #3]
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	4613      	mov	r3, r2
 800b1be:	011b      	lsls	r3, r3, #4
 800b1c0:	1a9b      	subs	r3, r3, r2
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	440b      	add	r3, r1
 800b1c6:	3326      	adds	r3, #38	@ 0x26
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00b      	beq.n	800b1e6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800b1ce:	78fa      	ldrb	r2, [r7, #3]
 800b1d0:	6879      	ldr	r1, [r7, #4]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	011b      	lsls	r3, r3, #4
 800b1d6:	1a9b      	subs	r3, r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	440b      	add	r3, r1
 800b1dc:	3326      	adds	r3, #38	@ 0x26
 800b1de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	f040 80a9 	bne.w	800b338 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800b1e6:	78fb      	ldrb	r3, [r7, #3]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b1fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b204:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800b206:	78fb      	ldrb	r3, [r7, #3]
 800b208:	015a      	lsls	r2, r3, #5
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	4413      	add	r3, r2
 800b20e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b212:	461a      	mov	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	6013      	str	r3, [r2, #0]
 800b218:	e08e      	b.n	800b338 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800b21a:	78fa      	ldrb	r2, [r7, #3]
 800b21c:	6879      	ldr	r1, [r7, #4]
 800b21e:	4613      	mov	r3, r2
 800b220:	011b      	lsls	r3, r3, #4
 800b222:	1a9b      	subs	r3, r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	440b      	add	r3, r1
 800b228:	334d      	adds	r3, #77	@ 0x4d
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	d143      	bne.n	800b2b8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800b230:	78fa      	ldrb	r2, [r7, #3]
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	4613      	mov	r3, r2
 800b236:	011b      	lsls	r3, r3, #4
 800b238:	1a9b      	subs	r3, r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	440b      	add	r3, r1
 800b23e:	334d      	adds	r3, #77	@ 0x4d
 800b240:	2202      	movs	r2, #2
 800b242:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800b244:	78fa      	ldrb	r2, [r7, #3]
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	4613      	mov	r3, r2
 800b24a:	011b      	lsls	r3, r3, #4
 800b24c:	1a9b      	subs	r3, r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	440b      	add	r3, r1
 800b252:	334c      	adds	r3, #76	@ 0x4c
 800b254:	2202      	movs	r2, #2
 800b256:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b258:	78fa      	ldrb	r2, [r7, #3]
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	4613      	mov	r3, r2
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	1a9b      	subs	r3, r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	440b      	add	r3, r1
 800b266:	3326      	adds	r3, #38	@ 0x26
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00a      	beq.n	800b284 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800b26e:	78fa      	ldrb	r2, [r7, #3]
 800b270:	6879      	ldr	r1, [r7, #4]
 800b272:	4613      	mov	r3, r2
 800b274:	011b      	lsls	r3, r3, #4
 800b276:	1a9b      	subs	r3, r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	440b      	add	r3, r1
 800b27c:	3326      	adds	r3, #38	@ 0x26
 800b27e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b280:	2b02      	cmp	r3, #2
 800b282:	d159      	bne.n	800b338 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800b284:	78fb      	ldrb	r3, [r7, #3]
 800b286:	015a      	lsls	r2, r3, #5
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	4413      	add	r3, r2
 800b28c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b29a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b2a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800b2a4:	78fb      	ldrb	r3, [r7, #3]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6013      	str	r3, [r2, #0]
 800b2b6:	e03f      	b.n	800b338 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800b2b8:	78fa      	ldrb	r2, [r7, #3]
 800b2ba:	6879      	ldr	r1, [r7, #4]
 800b2bc:	4613      	mov	r3, r2
 800b2be:	011b      	lsls	r3, r3, #4
 800b2c0:	1a9b      	subs	r3, r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	440b      	add	r3, r1
 800b2c6:	334d      	adds	r3, #77	@ 0x4d
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b08      	cmp	r3, #8
 800b2cc:	d126      	bne.n	800b31c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800b2ce:	78fa      	ldrb	r2, [r7, #3]
 800b2d0:	6879      	ldr	r1, [r7, #4]
 800b2d2:	4613      	mov	r3, r2
 800b2d4:	011b      	lsls	r3, r3, #4
 800b2d6:	1a9b      	subs	r3, r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	440b      	add	r3, r1
 800b2dc:	334d      	adds	r3, #77	@ 0x4d
 800b2de:	2202      	movs	r2, #2
 800b2e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800b2e2:	78fa      	ldrb	r2, [r7, #3]
 800b2e4:	6879      	ldr	r1, [r7, #4]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	011b      	lsls	r3, r3, #4
 800b2ea:	1a9b      	subs	r3, r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	440b      	add	r3, r1
 800b2f0:	3344      	adds	r3, #68	@ 0x44
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	1c59      	adds	r1, r3, #1
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	011b      	lsls	r3, r3, #4
 800b2fc:	1a9b      	subs	r3, r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4403      	add	r3, r0
 800b302:	3344      	adds	r3, #68	@ 0x44
 800b304:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800b306:	78fa      	ldrb	r2, [r7, #3]
 800b308:	6879      	ldr	r1, [r7, #4]
 800b30a:	4613      	mov	r3, r2
 800b30c:	011b      	lsls	r3, r3, #4
 800b30e:	1a9b      	subs	r3, r3, r2
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	440b      	add	r3, r1
 800b314:	334c      	adds	r3, #76	@ 0x4c
 800b316:	2204      	movs	r2, #4
 800b318:	701a      	strb	r2, [r3, #0]
 800b31a:	e00d      	b.n	800b338 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800b31c:	78fa      	ldrb	r2, [r7, #3]
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	4613      	mov	r3, r2
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	1a9b      	subs	r3, r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	440b      	add	r3, r1
 800b32a:	334d      	adds	r3, #77	@ 0x4d
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	2b02      	cmp	r3, #2
 800b330:	f000 8100 	beq.w	800b534 <HCD_HC_IN_IRQHandler+0xcca>
 800b334:	e000      	b.n	800b338 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800b336:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800b338:	78fa      	ldrb	r2, [r7, #3]
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	4613      	mov	r3, r2
 800b33e:	011b      	lsls	r3, r3, #4
 800b340:	1a9b      	subs	r3, r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	440b      	add	r3, r1
 800b346:	334c      	adds	r3, #76	@ 0x4c
 800b348:	781a      	ldrb	r2, [r3, #0]
 800b34a:	78fb      	ldrb	r3, [r7, #3]
 800b34c:	4619      	mov	r1, r3
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7f6 f9a4 	bl	800169c <HAL_HCD_HC_NotifyURBChange_Callback>
 800b354:	e0ef      	b.n	800b536 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	78fa      	ldrb	r2, [r7, #3]
 800b35c:	4611      	mov	r1, r2
 800b35e:	4618      	mov	r0, r3
 800b360:	f006 faca 	bl	80118f8 <USB_ReadChInterrupts>
 800b364:	4603      	mov	r3, r0
 800b366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b36a:	2b40      	cmp	r3, #64	@ 0x40
 800b36c:	d12f      	bne.n	800b3ce <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800b36e:	78fb      	ldrb	r3, [r7, #3]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	4413      	add	r3, r2
 800b376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b37a:	461a      	mov	r2, r3
 800b37c:	2340      	movs	r3, #64	@ 0x40
 800b37e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800b380:	78fa      	ldrb	r2, [r7, #3]
 800b382:	6879      	ldr	r1, [r7, #4]
 800b384:	4613      	mov	r3, r2
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	1a9b      	subs	r3, r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	440b      	add	r3, r1
 800b38e:	334d      	adds	r3, #77	@ 0x4d
 800b390:	2205      	movs	r2, #5
 800b392:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800b394:	78fa      	ldrb	r2, [r7, #3]
 800b396:	6879      	ldr	r1, [r7, #4]
 800b398:	4613      	mov	r3, r2
 800b39a:	011b      	lsls	r3, r3, #4
 800b39c:	1a9b      	subs	r3, r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	440b      	add	r3, r1
 800b3a2:	331a      	adds	r3, #26
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d109      	bne.n	800b3be <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800b3aa:	78fa      	ldrb	r2, [r7, #3]
 800b3ac:	6879      	ldr	r1, [r7, #4]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	011b      	lsls	r3, r3, #4
 800b3b2:	1a9b      	subs	r3, r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	440b      	add	r3, r1
 800b3b8:	3344      	adds	r3, #68	@ 0x44
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	78fa      	ldrb	r2, [r7, #3]
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f007 f82d 	bl	8012426 <USB_HC_Halt>
 800b3cc:	e0b3      	b.n	800b536 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	78fa      	ldrb	r2, [r7, #3]
 800b3d4:	4611      	mov	r1, r2
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f006 fa8e 	bl	80118f8 <USB_ReadChInterrupts>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	f003 0310 	and.w	r3, r3, #16
 800b3e2:	2b10      	cmp	r3, #16
 800b3e4:	f040 80a7 	bne.w	800b536 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800b3e8:	78fa      	ldrb	r2, [r7, #3]
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	011b      	lsls	r3, r3, #4
 800b3f0:	1a9b      	subs	r3, r3, r2
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	440b      	add	r3, r1
 800b3f6:	3326      	adds	r3, #38	@ 0x26
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	2b03      	cmp	r3, #3
 800b3fc:	d11b      	bne.n	800b436 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800b3fe:	78fa      	ldrb	r2, [r7, #3]
 800b400:	6879      	ldr	r1, [r7, #4]
 800b402:	4613      	mov	r3, r2
 800b404:	011b      	lsls	r3, r3, #4
 800b406:	1a9b      	subs	r3, r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	440b      	add	r3, r1
 800b40c:	3344      	adds	r3, #68	@ 0x44
 800b40e:	2200      	movs	r2, #0
 800b410:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800b412:	78fa      	ldrb	r2, [r7, #3]
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	4613      	mov	r3, r2
 800b418:	011b      	lsls	r3, r3, #4
 800b41a:	1a9b      	subs	r3, r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	440b      	add	r3, r1
 800b420:	334d      	adds	r3, #77	@ 0x4d
 800b422:	2204      	movs	r2, #4
 800b424:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	78fa      	ldrb	r2, [r7, #3]
 800b42c:	4611      	mov	r1, r2
 800b42e:	4618      	mov	r0, r3
 800b430:	f006 fff9 	bl	8012426 <USB_HC_Halt>
 800b434:	e03f      	b.n	800b4b6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b436:	78fa      	ldrb	r2, [r7, #3]
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	4613      	mov	r3, r2
 800b43c:	011b      	lsls	r3, r3, #4
 800b43e:	1a9b      	subs	r3, r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	440b      	add	r3, r1
 800b444:	3326      	adds	r3, #38	@ 0x26
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00a      	beq.n	800b462 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800b44c:	78fa      	ldrb	r2, [r7, #3]
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	4613      	mov	r3, r2
 800b452:	011b      	lsls	r3, r3, #4
 800b454:	1a9b      	subs	r3, r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	440b      	add	r3, r1
 800b45a:	3326      	adds	r3, #38	@ 0x26
 800b45c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d129      	bne.n	800b4b6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800b462:	78fa      	ldrb	r2, [r7, #3]
 800b464:	6879      	ldr	r1, [r7, #4]
 800b466:	4613      	mov	r3, r2
 800b468:	011b      	lsls	r3, r3, #4
 800b46a:	1a9b      	subs	r3, r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	440b      	add	r3, r1
 800b470:	3344      	adds	r3, #68	@ 0x44
 800b472:	2200      	movs	r2, #0
 800b474:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	799b      	ldrb	r3, [r3, #6]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00a      	beq.n	800b494 <HCD_HC_IN_IRQHandler+0xc2a>
 800b47e:	78fa      	ldrb	r2, [r7, #3]
 800b480:	6879      	ldr	r1, [r7, #4]
 800b482:	4613      	mov	r3, r2
 800b484:	011b      	lsls	r3, r3, #4
 800b486:	1a9b      	subs	r3, r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	440b      	add	r3, r1
 800b48c:	331b      	adds	r3, #27
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	2b01      	cmp	r3, #1
 800b492:	d110      	bne.n	800b4b6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800b494:	78fa      	ldrb	r2, [r7, #3]
 800b496:	6879      	ldr	r1, [r7, #4]
 800b498:	4613      	mov	r3, r2
 800b49a:	011b      	lsls	r3, r3, #4
 800b49c:	1a9b      	subs	r3, r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	440b      	add	r3, r1
 800b4a2:	334d      	adds	r3, #77	@ 0x4d
 800b4a4:	2204      	movs	r2, #4
 800b4a6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	78fa      	ldrb	r2, [r7, #3]
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f006 ffb8 	bl	8012426 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800b4b6:	78fa      	ldrb	r2, [r7, #3]
 800b4b8:	6879      	ldr	r1, [r7, #4]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	011b      	lsls	r3, r3, #4
 800b4be:	1a9b      	subs	r3, r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	440b      	add	r3, r1
 800b4c4:	331b      	adds	r3, #27
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d129      	bne.n	800b520 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800b4cc:	78fa      	ldrb	r2, [r7, #3]
 800b4ce:	6879      	ldr	r1, [r7, #4]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	011b      	lsls	r3, r3, #4
 800b4d4:	1a9b      	subs	r3, r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	440b      	add	r3, r1
 800b4da:	331b      	adds	r3, #27
 800b4dc:	2200      	movs	r2, #0
 800b4de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800b4e0:	78fb      	ldrb	r3, [r7, #3]
 800b4e2:	015a      	lsls	r2, r3, #5
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	78fa      	ldrb	r2, [r7, #3]
 800b4f0:	0151      	lsls	r1, r2, #5
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	440a      	add	r2, r1
 800b4f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4fe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	015a      	lsls	r2, r3, #5
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	4413      	add	r3, r2
 800b508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	78fa      	ldrb	r2, [r7, #3]
 800b510:	0151      	lsls	r1, r2, #5
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	440a      	add	r2, r1
 800b516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b51a:	f043 0320 	orr.w	r3, r3, #32
 800b51e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800b520:	78fb      	ldrb	r3, [r7, #3]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	4413      	add	r3, r2
 800b528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b52c:	461a      	mov	r2, r3
 800b52e:	2310      	movs	r3, #16
 800b530:	6093      	str	r3, [r2, #8]
 800b532:	e000      	b.n	800b536 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800b534:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	460b      	mov	r3, r1
 800b546:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	78fa      	ldrb	r2, [r7, #3]
 800b558:	4611      	mov	r1, r2
 800b55a:	4618      	mov	r0, r3
 800b55c:	f006 f9cc 	bl	80118f8 <USB_ReadChInterrupts>
 800b560:	4603      	mov	r3, r0
 800b562:	f003 0304 	and.w	r3, r3, #4
 800b566:	2b04      	cmp	r3, #4
 800b568:	d11b      	bne.n	800b5a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800b56a:	78fb      	ldrb	r3, [r7, #3]
 800b56c:	015a      	lsls	r2, r3, #5
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	4413      	add	r3, r2
 800b572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b576:	461a      	mov	r2, r3
 800b578:	2304      	movs	r3, #4
 800b57a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800b57c:	78fa      	ldrb	r2, [r7, #3]
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	4613      	mov	r3, r2
 800b582:	011b      	lsls	r3, r3, #4
 800b584:	1a9b      	subs	r3, r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	440b      	add	r3, r1
 800b58a:	334d      	adds	r3, #77	@ 0x4d
 800b58c:	2207      	movs	r2, #7
 800b58e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	78fa      	ldrb	r2, [r7, #3]
 800b596:	4611      	mov	r1, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f006 ff44 	bl	8012426 <USB_HC_Halt>
 800b59e:	f000 bc89 	b.w	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	78fa      	ldrb	r2, [r7, #3]
 800b5a8:	4611      	mov	r1, r2
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f006 f9a4 	bl	80118f8 <USB_ReadChInterrupts>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	f003 0320 	and.w	r3, r3, #32
 800b5b6:	2b20      	cmp	r3, #32
 800b5b8:	f040 8082 	bne.w	800b6c0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800b5bc:	78fb      	ldrb	r3, [r7, #3]
 800b5be:	015a      	lsls	r2, r3, #5
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	2320      	movs	r3, #32
 800b5cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800b5ce:	78fa      	ldrb	r2, [r7, #3]
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	4613      	mov	r3, r2
 800b5d4:	011b      	lsls	r3, r3, #4
 800b5d6:	1a9b      	subs	r3, r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	440b      	add	r3, r1
 800b5dc:	3319      	adds	r3, #25
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d124      	bne.n	800b62e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800b5e4:	78fa      	ldrb	r2, [r7, #3]
 800b5e6:	6879      	ldr	r1, [r7, #4]
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	011b      	lsls	r3, r3, #4
 800b5ec:	1a9b      	subs	r3, r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	440b      	add	r3, r1
 800b5f2:	3319      	adds	r3, #25
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800b5f8:	78fa      	ldrb	r2, [r7, #3]
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	011b      	lsls	r3, r3, #4
 800b600:	1a9b      	subs	r3, r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	440b      	add	r3, r1
 800b606:	334c      	adds	r3, #76	@ 0x4c
 800b608:	2202      	movs	r2, #2
 800b60a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800b60c:	78fa      	ldrb	r2, [r7, #3]
 800b60e:	6879      	ldr	r1, [r7, #4]
 800b610:	4613      	mov	r3, r2
 800b612:	011b      	lsls	r3, r3, #4
 800b614:	1a9b      	subs	r3, r3, r2
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	440b      	add	r3, r1
 800b61a:	334d      	adds	r3, #77	@ 0x4d
 800b61c:	2203      	movs	r2, #3
 800b61e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	78fa      	ldrb	r2, [r7, #3]
 800b626:	4611      	mov	r1, r2
 800b628:	4618      	mov	r0, r3
 800b62a:	f006 fefc 	bl	8012426 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800b62e:	78fa      	ldrb	r2, [r7, #3]
 800b630:	6879      	ldr	r1, [r7, #4]
 800b632:	4613      	mov	r3, r2
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	440b      	add	r3, r1
 800b63c:	331a      	adds	r3, #26
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	2b01      	cmp	r3, #1
 800b642:	f040 8437 	bne.w	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
 800b646:	78fa      	ldrb	r2, [r7, #3]
 800b648:	6879      	ldr	r1, [r7, #4]
 800b64a:	4613      	mov	r3, r2
 800b64c:	011b      	lsls	r3, r3, #4
 800b64e:	1a9b      	subs	r3, r3, r2
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	440b      	add	r3, r1
 800b654:	331b      	adds	r3, #27
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f040 842b 	bne.w	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800b65e:	78fa      	ldrb	r2, [r7, #3]
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	4613      	mov	r3, r2
 800b664:	011b      	lsls	r3, r3, #4
 800b666:	1a9b      	subs	r3, r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	440b      	add	r3, r1
 800b66c:	3326      	adds	r3, #38	@ 0x26
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d009      	beq.n	800b688 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800b674:	78fa      	ldrb	r2, [r7, #3]
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	4613      	mov	r3, r2
 800b67a:	011b      	lsls	r3, r3, #4
 800b67c:	1a9b      	subs	r3, r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	440b      	add	r3, r1
 800b682:	331b      	adds	r3, #27
 800b684:	2201      	movs	r2, #1
 800b686:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800b688:	78fa      	ldrb	r2, [r7, #3]
 800b68a:	6879      	ldr	r1, [r7, #4]
 800b68c:	4613      	mov	r3, r2
 800b68e:	011b      	lsls	r3, r3, #4
 800b690:	1a9b      	subs	r3, r3, r2
 800b692:	009b      	lsls	r3, r3, #2
 800b694:	440b      	add	r3, r1
 800b696:	334d      	adds	r3, #77	@ 0x4d
 800b698:	2203      	movs	r2, #3
 800b69a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	78fa      	ldrb	r2, [r7, #3]
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f006 febe 	bl	8012426 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	6879      	ldr	r1, [r7, #4]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	011b      	lsls	r3, r3, #4
 800b6b2:	1a9b      	subs	r3, r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	440b      	add	r3, r1
 800b6b8:	3344      	adds	r3, #68	@ 0x44
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	e3f9      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	78fa      	ldrb	r2, [r7, #3]
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f006 f915 	bl	80118f8 <USB_ReadChInterrupts>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6d8:	d111      	bne.n	800b6fe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800b6da:	78fb      	ldrb	r3, [r7, #3]
 800b6dc:	015a      	lsls	r2, r3, #5
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b6ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	78fa      	ldrb	r2, [r7, #3]
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f006 fe95 	bl	8012426 <USB_HC_Halt>
 800b6fc:	e3da      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	78fa      	ldrb	r2, [r7, #3]
 800b704:	4611      	mov	r1, r2
 800b706:	4618      	mov	r0, r3
 800b708:	f006 f8f6 	bl	80118f8 <USB_ReadChInterrupts>
 800b70c:	4603      	mov	r3, r0
 800b70e:	f003 0301 	and.w	r3, r3, #1
 800b712:	2b01      	cmp	r3, #1
 800b714:	d168      	bne.n	800b7e8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800b716:	78fa      	ldrb	r2, [r7, #3]
 800b718:	6879      	ldr	r1, [r7, #4]
 800b71a:	4613      	mov	r3, r2
 800b71c:	011b      	lsls	r3, r3, #4
 800b71e:	1a9b      	subs	r3, r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	440b      	add	r3, r1
 800b724:	3344      	adds	r3, #68	@ 0x44
 800b726:	2200      	movs	r2, #0
 800b728:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	78fa      	ldrb	r2, [r7, #3]
 800b730:	4611      	mov	r1, r2
 800b732:	4618      	mov	r0, r3
 800b734:	f006 f8e0 	bl	80118f8 <USB_ReadChInterrupts>
 800b738:	4603      	mov	r3, r0
 800b73a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b73e:	2b40      	cmp	r3, #64	@ 0x40
 800b740:	d112      	bne.n	800b768 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800b742:	78fa      	ldrb	r2, [r7, #3]
 800b744:	6879      	ldr	r1, [r7, #4]
 800b746:	4613      	mov	r3, r2
 800b748:	011b      	lsls	r3, r3, #4
 800b74a:	1a9b      	subs	r3, r3, r2
 800b74c:	009b      	lsls	r3, r3, #2
 800b74e:	440b      	add	r3, r1
 800b750:	3319      	adds	r3, #25
 800b752:	2201      	movs	r2, #1
 800b754:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800b756:	78fb      	ldrb	r3, [r7, #3]
 800b758:	015a      	lsls	r2, r3, #5
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	4413      	add	r3, r2
 800b75e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b762:	461a      	mov	r2, r3
 800b764:	2340      	movs	r3, #64	@ 0x40
 800b766:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800b768:	78fa      	ldrb	r2, [r7, #3]
 800b76a:	6879      	ldr	r1, [r7, #4]
 800b76c:	4613      	mov	r3, r2
 800b76e:	011b      	lsls	r3, r3, #4
 800b770:	1a9b      	subs	r3, r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	440b      	add	r3, r1
 800b776:	331b      	adds	r3, #27
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d019      	beq.n	800b7b2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800b77e:	78fa      	ldrb	r2, [r7, #3]
 800b780:	6879      	ldr	r1, [r7, #4]
 800b782:	4613      	mov	r3, r2
 800b784:	011b      	lsls	r3, r3, #4
 800b786:	1a9b      	subs	r3, r3, r2
 800b788:	009b      	lsls	r3, r3, #2
 800b78a:	440b      	add	r3, r1
 800b78c:	331b      	adds	r3, #27
 800b78e:	2200      	movs	r2, #0
 800b790:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800b792:	78fb      	ldrb	r3, [r7, #3]
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	78fa      	ldrb	r2, [r7, #3]
 800b7a2:	0151      	lsls	r1, r2, #5
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	440a      	add	r2, r1
 800b7a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7b0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	015a      	lsls	r2, r3, #5
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7be:	461a      	mov	r2, r3
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800b7c4:	78fa      	ldrb	r2, [r7, #3]
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	011b      	lsls	r3, r3, #4
 800b7cc:	1a9b      	subs	r3, r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	440b      	add	r3, r1
 800b7d2:	334d      	adds	r3, #77	@ 0x4d
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	78fa      	ldrb	r2, [r7, #3]
 800b7de:	4611      	mov	r1, r2
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f006 fe20 	bl	8012426 <USB_HC_Halt>
 800b7e6:	e365      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	78fa      	ldrb	r2, [r7, #3]
 800b7ee:	4611      	mov	r1, r2
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f006 f881 	bl	80118f8 <USB_ReadChInterrupts>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7fc:	2b40      	cmp	r3, #64	@ 0x40
 800b7fe:	d139      	bne.n	800b874 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800b800:	78fa      	ldrb	r2, [r7, #3]
 800b802:	6879      	ldr	r1, [r7, #4]
 800b804:	4613      	mov	r3, r2
 800b806:	011b      	lsls	r3, r3, #4
 800b808:	1a9b      	subs	r3, r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	440b      	add	r3, r1
 800b80e:	334d      	adds	r3, #77	@ 0x4d
 800b810:	2205      	movs	r2, #5
 800b812:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800b814:	78fa      	ldrb	r2, [r7, #3]
 800b816:	6879      	ldr	r1, [r7, #4]
 800b818:	4613      	mov	r3, r2
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	1a9b      	subs	r3, r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	440b      	add	r3, r1
 800b822:	331a      	adds	r3, #26
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d109      	bne.n	800b83e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800b82a:	78fa      	ldrb	r2, [r7, #3]
 800b82c:	6879      	ldr	r1, [r7, #4]
 800b82e:	4613      	mov	r3, r2
 800b830:	011b      	lsls	r3, r3, #4
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	440b      	add	r3, r1
 800b838:	3319      	adds	r3, #25
 800b83a:	2201      	movs	r2, #1
 800b83c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800b83e:	78fa      	ldrb	r2, [r7, #3]
 800b840:	6879      	ldr	r1, [r7, #4]
 800b842:	4613      	mov	r3, r2
 800b844:	011b      	lsls	r3, r3, #4
 800b846:	1a9b      	subs	r3, r3, r2
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	440b      	add	r3, r1
 800b84c:	3344      	adds	r3, #68	@ 0x44
 800b84e:	2200      	movs	r2, #0
 800b850:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	78fa      	ldrb	r2, [r7, #3]
 800b858:	4611      	mov	r1, r2
 800b85a:	4618      	mov	r0, r3
 800b85c:	f006 fde3 	bl	8012426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800b860:	78fb      	ldrb	r3, [r7, #3]
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	4413      	add	r3, r2
 800b868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b86c:	461a      	mov	r2, r3
 800b86e:	2340      	movs	r3, #64	@ 0x40
 800b870:	6093      	str	r3, [r2, #8]
 800b872:	e31f      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	78fa      	ldrb	r2, [r7, #3]
 800b87a:	4611      	mov	r1, r2
 800b87c:	4618      	mov	r0, r3
 800b87e:	f006 f83b 	bl	80118f8 <USB_ReadChInterrupts>
 800b882:	4603      	mov	r3, r0
 800b884:	f003 0308 	and.w	r3, r3, #8
 800b888:	2b08      	cmp	r3, #8
 800b88a:	d11a      	bne.n	800b8c2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800b88c:	78fb      	ldrb	r3, [r7, #3]
 800b88e:	015a      	lsls	r2, r3, #5
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	4413      	add	r3, r2
 800b894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b898:	461a      	mov	r2, r3
 800b89a:	2308      	movs	r3, #8
 800b89c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800b89e:	78fa      	ldrb	r2, [r7, #3]
 800b8a0:	6879      	ldr	r1, [r7, #4]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	1a9b      	subs	r3, r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	334d      	adds	r3, #77	@ 0x4d
 800b8ae:	2206      	movs	r2, #6
 800b8b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	78fa      	ldrb	r2, [r7, #3]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f006 fdb3 	bl	8012426 <USB_HC_Halt>
 800b8c0:	e2f8      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	78fa      	ldrb	r2, [r7, #3]
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f006 f814 	bl	80118f8 <USB_ReadChInterrupts>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	f003 0310 	and.w	r3, r3, #16
 800b8d6:	2b10      	cmp	r3, #16
 800b8d8:	d144      	bne.n	800b964 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800b8da:	78fa      	ldrb	r2, [r7, #3]
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	011b      	lsls	r3, r3, #4
 800b8e2:	1a9b      	subs	r3, r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	440b      	add	r3, r1
 800b8e8:	3344      	adds	r3, #68	@ 0x44
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800b8ee:	78fa      	ldrb	r2, [r7, #3]
 800b8f0:	6879      	ldr	r1, [r7, #4]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	1a9b      	subs	r3, r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	440b      	add	r3, r1
 800b8fc:	334d      	adds	r3, #77	@ 0x4d
 800b8fe:	2204      	movs	r2, #4
 800b900:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800b902:	78fa      	ldrb	r2, [r7, #3]
 800b904:	6879      	ldr	r1, [r7, #4]
 800b906:	4613      	mov	r3, r2
 800b908:	011b      	lsls	r3, r3, #4
 800b90a:	1a9b      	subs	r3, r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	440b      	add	r3, r1
 800b910:	3319      	adds	r3, #25
 800b912:	781b      	ldrb	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d114      	bne.n	800b942 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800b918:	78fa      	ldrb	r2, [r7, #3]
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	4613      	mov	r3, r2
 800b91e:	011b      	lsls	r3, r3, #4
 800b920:	1a9b      	subs	r3, r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	440b      	add	r3, r1
 800b926:	3318      	adds	r3, #24
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d109      	bne.n	800b942 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800b92e:	78fa      	ldrb	r2, [r7, #3]
 800b930:	6879      	ldr	r1, [r7, #4]
 800b932:	4613      	mov	r3, r2
 800b934:	011b      	lsls	r3, r3, #4
 800b936:	1a9b      	subs	r3, r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	440b      	add	r3, r1
 800b93c:	3319      	adds	r3, #25
 800b93e:	2201      	movs	r2, #1
 800b940:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	78fa      	ldrb	r2, [r7, #3]
 800b948:	4611      	mov	r1, r2
 800b94a:	4618      	mov	r0, r3
 800b94c:	f006 fd6b 	bl	8012426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800b950:	78fb      	ldrb	r3, [r7, #3]
 800b952:	015a      	lsls	r2, r3, #5
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	4413      	add	r3, r2
 800b958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b95c:	461a      	mov	r2, r3
 800b95e:	2310      	movs	r3, #16
 800b960:	6093      	str	r3, [r2, #8]
 800b962:	e2a7      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	78fa      	ldrb	r2, [r7, #3]
 800b96a:	4611      	mov	r1, r2
 800b96c:	4618      	mov	r0, r3
 800b96e:	f005 ffc3 	bl	80118f8 <USB_ReadChInterrupts>
 800b972:	4603      	mov	r3, r0
 800b974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b978:	2b80      	cmp	r3, #128	@ 0x80
 800b97a:	f040 8083 	bne.w	800ba84 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	799b      	ldrb	r3, [r3, #6]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d111      	bne.n	800b9aa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800b986:	78fa      	ldrb	r2, [r7, #3]
 800b988:	6879      	ldr	r1, [r7, #4]
 800b98a:	4613      	mov	r3, r2
 800b98c:	011b      	lsls	r3, r3, #4
 800b98e:	1a9b      	subs	r3, r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	440b      	add	r3, r1
 800b994:	334d      	adds	r3, #77	@ 0x4d
 800b996:	2207      	movs	r2, #7
 800b998:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	78fa      	ldrb	r2, [r7, #3]
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f006 fd3f 	bl	8012426 <USB_HC_Halt>
 800b9a8:	e062      	b.n	800ba70 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800b9aa:	78fa      	ldrb	r2, [r7, #3]
 800b9ac:	6879      	ldr	r1, [r7, #4]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	011b      	lsls	r3, r3, #4
 800b9b2:	1a9b      	subs	r3, r3, r2
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	440b      	add	r3, r1
 800b9b8:	3344      	adds	r3, #68	@ 0x44
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	1c59      	adds	r1, r3, #1
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	011b      	lsls	r3, r3, #4
 800b9c4:	1a9b      	subs	r3, r3, r2
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	4403      	add	r3, r0
 800b9ca:	3344      	adds	r3, #68	@ 0x44
 800b9cc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800b9ce:	78fa      	ldrb	r2, [r7, #3]
 800b9d0:	6879      	ldr	r1, [r7, #4]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	011b      	lsls	r3, r3, #4
 800b9d6:	1a9b      	subs	r3, r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	440b      	add	r3, r1
 800b9dc:	3344      	adds	r3, #68	@ 0x44
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d922      	bls.n	800ba2a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800b9e4:	78fa      	ldrb	r2, [r7, #3]
 800b9e6:	6879      	ldr	r1, [r7, #4]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	011b      	lsls	r3, r3, #4
 800b9ec:	1a9b      	subs	r3, r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	440b      	add	r3, r1
 800b9f2:	3344      	adds	r3, #68	@ 0x44
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800b9f8:	78fa      	ldrb	r2, [r7, #3]
 800b9fa:	6879      	ldr	r1, [r7, #4]
 800b9fc:	4613      	mov	r3, r2
 800b9fe:	011b      	lsls	r3, r3, #4
 800ba00:	1a9b      	subs	r3, r3, r2
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	440b      	add	r3, r1
 800ba06:	334c      	adds	r3, #76	@ 0x4c
 800ba08:	2204      	movs	r2, #4
 800ba0a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800ba0c:	78fa      	ldrb	r2, [r7, #3]
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	4613      	mov	r3, r2
 800ba12:	011b      	lsls	r3, r3, #4
 800ba14:	1a9b      	subs	r3, r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	440b      	add	r3, r1
 800ba1a:	334c      	adds	r3, #76	@ 0x4c
 800ba1c:	781a      	ldrb	r2, [r3, #0]
 800ba1e:	78fb      	ldrb	r3, [r7, #3]
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f7f5 fe3a 	bl	800169c <HAL_HCD_HC_NotifyURBChange_Callback>
 800ba28:	e022      	b.n	800ba70 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ba2a:	78fa      	ldrb	r2, [r7, #3]
 800ba2c:	6879      	ldr	r1, [r7, #4]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	011b      	lsls	r3, r3, #4
 800ba32:	1a9b      	subs	r3, r3, r2
 800ba34:	009b      	lsls	r3, r3, #2
 800ba36:	440b      	add	r3, r1
 800ba38:	334c      	adds	r3, #76	@ 0x4c
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800ba3e:	78fb      	ldrb	r3, [r7, #3]
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba54:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba5c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800ba5e:	78fb      	ldrb	r3, [r7, #3]
 800ba60:	015a      	lsls	r2, r3, #5
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	4413      	add	r3, r2
 800ba66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800ba70:	78fb      	ldrb	r3, [r7, #3]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	2380      	movs	r3, #128	@ 0x80
 800ba80:	6093      	str	r3, [r2, #8]
 800ba82:	e217      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	78fa      	ldrb	r2, [r7, #3]
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f005 ff33 	bl	80118f8 <USB_ReadChInterrupts>
 800ba92:	4603      	mov	r3, r0
 800ba94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba9c:	d11b      	bne.n	800bad6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800ba9e:	78fa      	ldrb	r2, [r7, #3]
 800baa0:	6879      	ldr	r1, [r7, #4]
 800baa2:	4613      	mov	r3, r2
 800baa4:	011b      	lsls	r3, r3, #4
 800baa6:	1a9b      	subs	r3, r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	440b      	add	r3, r1
 800baac:	334d      	adds	r3, #77	@ 0x4d
 800baae:	2209      	movs	r2, #9
 800bab0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	78fa      	ldrb	r2, [r7, #3]
 800bab8:	4611      	mov	r1, r2
 800baba:	4618      	mov	r0, r3
 800babc:	f006 fcb3 	bl	8012426 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800bac0:	78fb      	ldrb	r3, [r7, #3]
 800bac2:	015a      	lsls	r2, r3, #5
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	4413      	add	r3, r2
 800bac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bacc:	461a      	mov	r2, r3
 800bace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bad2:	6093      	str	r3, [r2, #8]
 800bad4:	e1ee      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	78fa      	ldrb	r2, [r7, #3]
 800badc:	4611      	mov	r1, r2
 800bade:	4618      	mov	r0, r3
 800bae0:	f005 ff0a 	bl	80118f8 <USB_ReadChInterrupts>
 800bae4:	4603      	mov	r3, r0
 800bae6:	f003 0302 	and.w	r3, r3, #2
 800baea:	2b02      	cmp	r3, #2
 800baec:	f040 81df 	bne.w	800beae <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800baf0:	78fb      	ldrb	r3, [r7, #3]
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bafc:	461a      	mov	r2, r3
 800bafe:	2302      	movs	r3, #2
 800bb00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800bb02:	78fa      	ldrb	r2, [r7, #3]
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	4613      	mov	r3, r2
 800bb08:	011b      	lsls	r3, r3, #4
 800bb0a:	1a9b      	subs	r3, r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	440b      	add	r3, r1
 800bb10:	334d      	adds	r3, #77	@ 0x4d
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	f040 8093 	bne.w	800bc40 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800bb1a:	78fa      	ldrb	r2, [r7, #3]
 800bb1c:	6879      	ldr	r1, [r7, #4]
 800bb1e:	4613      	mov	r3, r2
 800bb20:	011b      	lsls	r3, r3, #4
 800bb22:	1a9b      	subs	r3, r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	440b      	add	r3, r1
 800bb28:	334d      	adds	r3, #77	@ 0x4d
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800bb2e:	78fa      	ldrb	r2, [r7, #3]
 800bb30:	6879      	ldr	r1, [r7, #4]
 800bb32:	4613      	mov	r3, r2
 800bb34:	011b      	lsls	r3, r3, #4
 800bb36:	1a9b      	subs	r3, r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	440b      	add	r3, r1
 800bb3c:	334c      	adds	r3, #76	@ 0x4c
 800bb3e:	2201      	movs	r2, #1
 800bb40:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800bb42:	78fa      	ldrb	r2, [r7, #3]
 800bb44:	6879      	ldr	r1, [r7, #4]
 800bb46:	4613      	mov	r3, r2
 800bb48:	011b      	lsls	r3, r3, #4
 800bb4a:	1a9b      	subs	r3, r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	440b      	add	r3, r1
 800bb50:	3326      	adds	r3, #38	@ 0x26
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d00b      	beq.n	800bb70 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800bb58:	78fa      	ldrb	r2, [r7, #3]
 800bb5a:	6879      	ldr	r1, [r7, #4]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	011b      	lsls	r3, r3, #4
 800bb60:	1a9b      	subs	r3, r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	440b      	add	r3, r1
 800bb66:	3326      	adds	r3, #38	@ 0x26
 800bb68:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	f040 8190 	bne.w	800be90 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	799b      	ldrb	r3, [r3, #6]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d115      	bne.n	800bba4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800bb78:	78fa      	ldrb	r2, [r7, #3]
 800bb7a:	6879      	ldr	r1, [r7, #4]
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	011b      	lsls	r3, r3, #4
 800bb80:	1a9b      	subs	r3, r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	440b      	add	r3, r1
 800bb86:	333d      	adds	r3, #61	@ 0x3d
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	78fa      	ldrb	r2, [r7, #3]
 800bb8c:	f083 0301 	eor.w	r3, r3, #1
 800bb90:	b2d8      	uxtb	r0, r3
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	4613      	mov	r3, r2
 800bb96:	011b      	lsls	r3, r3, #4
 800bb98:	1a9b      	subs	r3, r3, r2
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	440b      	add	r3, r1
 800bb9e:	333d      	adds	r3, #61	@ 0x3d
 800bba0:	4602      	mov	r2, r0
 800bba2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	799b      	ldrb	r3, [r3, #6]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	f040 8171 	bne.w	800be90 <HCD_HC_OUT_IRQHandler+0x954>
 800bbae:	78fa      	ldrb	r2, [r7, #3]
 800bbb0:	6879      	ldr	r1, [r7, #4]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	011b      	lsls	r3, r3, #4
 800bbb6:	1a9b      	subs	r3, r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	440b      	add	r3, r1
 800bbbc:	3334      	adds	r3, #52	@ 0x34
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 8165 	beq.w	800be90 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800bbc6:	78fa      	ldrb	r2, [r7, #3]
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	011b      	lsls	r3, r3, #4
 800bbce:	1a9b      	subs	r3, r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	440b      	add	r3, r1
 800bbd4:	3334      	adds	r3, #52	@ 0x34
 800bbd6:	6819      	ldr	r1, [r3, #0]
 800bbd8:	78fa      	ldrb	r2, [r7, #3]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	011b      	lsls	r3, r3, #4
 800bbe0:	1a9b      	subs	r3, r3, r2
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4403      	add	r3, r0
 800bbe6:	3328      	adds	r3, #40	@ 0x28
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	440b      	add	r3, r1
 800bbec:	1e59      	subs	r1, r3, #1
 800bbee:	78fa      	ldrb	r2, [r7, #3]
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	011b      	lsls	r3, r3, #4
 800bbf6:	1a9b      	subs	r3, r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	4403      	add	r3, r0
 800bbfc:	3328      	adds	r3, #40	@ 0x28
 800bbfe:	881b      	ldrh	r3, [r3, #0]
 800bc00:	fbb1 f3f3 	udiv	r3, r1, r3
 800bc04:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 813f 	beq.w	800be90 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800bc12:	78fa      	ldrb	r2, [r7, #3]
 800bc14:	6879      	ldr	r1, [r7, #4]
 800bc16:	4613      	mov	r3, r2
 800bc18:	011b      	lsls	r3, r3, #4
 800bc1a:	1a9b      	subs	r3, r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	440b      	add	r3, r1
 800bc20:	333d      	adds	r3, #61	@ 0x3d
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	78fa      	ldrb	r2, [r7, #3]
 800bc26:	f083 0301 	eor.w	r3, r3, #1
 800bc2a:	b2d8      	uxtb	r0, r3
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	011b      	lsls	r3, r3, #4
 800bc32:	1a9b      	subs	r3, r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	440b      	add	r3, r1
 800bc38:	333d      	adds	r3, #61	@ 0x3d
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	701a      	strb	r2, [r3, #0]
 800bc3e:	e127      	b.n	800be90 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800bc40:	78fa      	ldrb	r2, [r7, #3]
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4613      	mov	r3, r2
 800bc46:	011b      	lsls	r3, r3, #4
 800bc48:	1a9b      	subs	r3, r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	334d      	adds	r3, #77	@ 0x4d
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d120      	bne.n	800bc98 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800bc56:	78fa      	ldrb	r2, [r7, #3]
 800bc58:	6879      	ldr	r1, [r7, #4]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	011b      	lsls	r3, r3, #4
 800bc5e:	1a9b      	subs	r3, r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	440b      	add	r3, r1
 800bc64:	334d      	adds	r3, #77	@ 0x4d
 800bc66:	2202      	movs	r2, #2
 800bc68:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800bc6a:	78fa      	ldrb	r2, [r7, #3]
 800bc6c:	6879      	ldr	r1, [r7, #4]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	011b      	lsls	r3, r3, #4
 800bc72:	1a9b      	subs	r3, r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	440b      	add	r3, r1
 800bc78:	331b      	adds	r3, #27
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	f040 8107 	bne.w	800be90 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800bc82:	78fa      	ldrb	r2, [r7, #3]
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	4613      	mov	r3, r2
 800bc88:	011b      	lsls	r3, r3, #4
 800bc8a:	1a9b      	subs	r3, r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	440b      	add	r3, r1
 800bc90:	334c      	adds	r3, #76	@ 0x4c
 800bc92:	2202      	movs	r2, #2
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	e0fb      	b.n	800be90 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800bc98:	78fa      	ldrb	r2, [r7, #3]
 800bc9a:	6879      	ldr	r1, [r7, #4]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	011b      	lsls	r3, r3, #4
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	440b      	add	r3, r1
 800bca6:	334d      	adds	r3, #77	@ 0x4d
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	2b04      	cmp	r3, #4
 800bcac:	d13a      	bne.n	800bd24 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800bcae:	78fa      	ldrb	r2, [r7, #3]
 800bcb0:	6879      	ldr	r1, [r7, #4]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	011b      	lsls	r3, r3, #4
 800bcb6:	1a9b      	subs	r3, r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	440b      	add	r3, r1
 800bcbc:	334d      	adds	r3, #77	@ 0x4d
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800bcc2:	78fa      	ldrb	r2, [r7, #3]
 800bcc4:	6879      	ldr	r1, [r7, #4]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	011b      	lsls	r3, r3, #4
 800bcca:	1a9b      	subs	r3, r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	440b      	add	r3, r1
 800bcd0:	334c      	adds	r3, #76	@ 0x4c
 800bcd2:	2202      	movs	r2, #2
 800bcd4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800bcd6:	78fa      	ldrb	r2, [r7, #3]
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	011b      	lsls	r3, r3, #4
 800bcde:	1a9b      	subs	r3, r3, r2
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	440b      	add	r3, r1
 800bce4:	331b      	adds	r3, #27
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	f040 80d1 	bne.w	800be90 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800bcee:	78fa      	ldrb	r2, [r7, #3]
 800bcf0:	6879      	ldr	r1, [r7, #4]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	011b      	lsls	r3, r3, #4
 800bcf6:	1a9b      	subs	r3, r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	440b      	add	r3, r1
 800bcfc:	331b      	adds	r3, #27
 800bcfe:	2200      	movs	r2, #0
 800bd00:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800bd02:	78fb      	ldrb	r3, [r7, #3]
 800bd04:	015a      	lsls	r2, r3, #5
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	4413      	add	r3, r2
 800bd0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	78fa      	ldrb	r2, [r7, #3]
 800bd12:	0151      	lsls	r1, r2, #5
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	440a      	add	r2, r1
 800bd18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd20:	6053      	str	r3, [r2, #4]
 800bd22:	e0b5      	b.n	800be90 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800bd24:	78fa      	ldrb	r2, [r7, #3]
 800bd26:	6879      	ldr	r1, [r7, #4]
 800bd28:	4613      	mov	r3, r2
 800bd2a:	011b      	lsls	r3, r3, #4
 800bd2c:	1a9b      	subs	r3, r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	440b      	add	r3, r1
 800bd32:	334d      	adds	r3, #77	@ 0x4d
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	d114      	bne.n	800bd64 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800bd3a:	78fa      	ldrb	r2, [r7, #3]
 800bd3c:	6879      	ldr	r1, [r7, #4]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	011b      	lsls	r3, r3, #4
 800bd42:	1a9b      	subs	r3, r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	440b      	add	r3, r1
 800bd48:	334d      	adds	r3, #77	@ 0x4d
 800bd4a:	2202      	movs	r2, #2
 800bd4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800bd4e:	78fa      	ldrb	r2, [r7, #3]
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	4613      	mov	r3, r2
 800bd54:	011b      	lsls	r3, r3, #4
 800bd56:	1a9b      	subs	r3, r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	440b      	add	r3, r1
 800bd5c:	334c      	adds	r3, #76	@ 0x4c
 800bd5e:	2202      	movs	r2, #2
 800bd60:	701a      	strb	r2, [r3, #0]
 800bd62:	e095      	b.n	800be90 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800bd64:	78fa      	ldrb	r2, [r7, #3]
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	011b      	lsls	r3, r3, #4
 800bd6c:	1a9b      	subs	r3, r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	440b      	add	r3, r1
 800bd72:	334d      	adds	r3, #77	@ 0x4d
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	2b06      	cmp	r3, #6
 800bd78:	d114      	bne.n	800bda4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800bd7a:	78fa      	ldrb	r2, [r7, #3]
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	011b      	lsls	r3, r3, #4
 800bd82:	1a9b      	subs	r3, r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	440b      	add	r3, r1
 800bd88:	334d      	adds	r3, #77	@ 0x4d
 800bd8a:	2202      	movs	r2, #2
 800bd8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800bd8e:	78fa      	ldrb	r2, [r7, #3]
 800bd90:	6879      	ldr	r1, [r7, #4]
 800bd92:	4613      	mov	r3, r2
 800bd94:	011b      	lsls	r3, r3, #4
 800bd96:	1a9b      	subs	r3, r3, r2
 800bd98:	009b      	lsls	r3, r3, #2
 800bd9a:	440b      	add	r3, r1
 800bd9c:	334c      	adds	r3, #76	@ 0x4c
 800bd9e:	2205      	movs	r2, #5
 800bda0:	701a      	strb	r2, [r3, #0]
 800bda2:	e075      	b.n	800be90 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800bda4:	78fa      	ldrb	r2, [r7, #3]
 800bda6:	6879      	ldr	r1, [r7, #4]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	011b      	lsls	r3, r3, #4
 800bdac:	1a9b      	subs	r3, r3, r2
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	440b      	add	r3, r1
 800bdb2:	334d      	adds	r3, #77	@ 0x4d
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	2b07      	cmp	r3, #7
 800bdb8:	d00a      	beq.n	800bdd0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800bdba:	78fa      	ldrb	r2, [r7, #3]
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	011b      	lsls	r3, r3, #4
 800bdc2:	1a9b      	subs	r3, r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	440b      	add	r3, r1
 800bdc8:	334d      	adds	r3, #77	@ 0x4d
 800bdca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800bdcc:	2b09      	cmp	r3, #9
 800bdce:	d170      	bne.n	800beb2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800bdd0:	78fa      	ldrb	r2, [r7, #3]
 800bdd2:	6879      	ldr	r1, [r7, #4]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	011b      	lsls	r3, r3, #4
 800bdd8:	1a9b      	subs	r3, r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	440b      	add	r3, r1
 800bdde:	334d      	adds	r3, #77	@ 0x4d
 800bde0:	2202      	movs	r2, #2
 800bde2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800bde4:	78fa      	ldrb	r2, [r7, #3]
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	011b      	lsls	r3, r3, #4
 800bdec:	1a9b      	subs	r3, r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	3344      	adds	r3, #68	@ 0x44
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	1c59      	adds	r1, r3, #1
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	011b      	lsls	r3, r3, #4
 800bdfe:	1a9b      	subs	r3, r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4403      	add	r3, r0
 800be04:	3344      	adds	r3, #68	@ 0x44
 800be06:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800be08:	78fa      	ldrb	r2, [r7, #3]
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	4613      	mov	r3, r2
 800be0e:	011b      	lsls	r3, r3, #4
 800be10:	1a9b      	subs	r3, r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	440b      	add	r3, r1
 800be16:	3344      	adds	r3, #68	@ 0x44
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b02      	cmp	r3, #2
 800be1c:	d914      	bls.n	800be48 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800be1e:	78fa      	ldrb	r2, [r7, #3]
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4613      	mov	r3, r2
 800be24:	011b      	lsls	r3, r3, #4
 800be26:	1a9b      	subs	r3, r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	3344      	adds	r3, #68	@ 0x44
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800be32:	78fa      	ldrb	r2, [r7, #3]
 800be34:	6879      	ldr	r1, [r7, #4]
 800be36:	4613      	mov	r3, r2
 800be38:	011b      	lsls	r3, r3, #4
 800be3a:	1a9b      	subs	r3, r3, r2
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	440b      	add	r3, r1
 800be40:	334c      	adds	r3, #76	@ 0x4c
 800be42:	2204      	movs	r2, #4
 800be44:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800be46:	e022      	b.n	800be8e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800be48:	78fa      	ldrb	r2, [r7, #3]
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	4613      	mov	r3, r2
 800be4e:	011b      	lsls	r3, r3, #4
 800be50:	1a9b      	subs	r3, r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	440b      	add	r3, r1
 800be56:	334c      	adds	r3, #76	@ 0x4c
 800be58:	2202      	movs	r2, #2
 800be5a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	4413      	add	r3, r2
 800be64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800be72:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800be7a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800be7c:	78fb      	ldrb	r3, [r7, #3]
 800be7e:	015a      	lsls	r2, r3, #5
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	4413      	add	r3, r2
 800be84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be88:	461a      	mov	r2, r3
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800be8e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800be90:	78fa      	ldrb	r2, [r7, #3]
 800be92:	6879      	ldr	r1, [r7, #4]
 800be94:	4613      	mov	r3, r2
 800be96:	011b      	lsls	r3, r3, #4
 800be98:	1a9b      	subs	r3, r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	440b      	add	r3, r1
 800be9e:	334c      	adds	r3, #76	@ 0x4c
 800bea0:	781a      	ldrb	r2, [r3, #0]
 800bea2:	78fb      	ldrb	r3, [r7, #3]
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f7f5 fbf8 	bl	800169c <HAL_HCD_HC_NotifyURBChange_Callback>
 800beac:	e002      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800beae:	bf00      	nop
 800beb0:	e000      	b.n	800beb4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800beb2:	bf00      	nop
  }
}
 800beb4:	3718      	adds	r7, #24
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b08a      	sub	sp, #40	@ 0x28
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	f003 030f 	and.w	r3, r3, #15
 800beda:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	0c5b      	lsrs	r3, r3, #17
 800bee0:	f003 030f 	and.w	r3, r3, #15
 800bee4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	091b      	lsrs	r3, r3, #4
 800beea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800beee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d004      	beq.n	800bf00 <HCD_RXQLVL_IRQHandler+0x46>
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	2b05      	cmp	r3, #5
 800befa:	f000 80b6 	beq.w	800c06a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800befe:	e0b7      	b.n	800c070 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 80b3 	beq.w	800c06e <HCD_RXQLVL_IRQHandler+0x1b4>
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	011b      	lsls	r3, r3, #4
 800bf10:	1a9b      	subs	r3, r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	440b      	add	r3, r1
 800bf16:	332c      	adds	r3, #44	@ 0x2c
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f000 80a7 	beq.w	800c06e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800bf20:	6879      	ldr	r1, [r7, #4]
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	4613      	mov	r3, r2
 800bf26:	011b      	lsls	r3, r3, #4
 800bf28:	1a9b      	subs	r3, r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	440b      	add	r3, r1
 800bf2e:	3338      	adds	r3, #56	@ 0x38
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	18d1      	adds	r1, r2, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	69ba      	ldr	r2, [r7, #24]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	011b      	lsls	r3, r3, #4
 800bf3e:	1a9b      	subs	r3, r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4403      	add	r3, r0
 800bf44:	3334      	adds	r3, #52	@ 0x34
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4299      	cmp	r1, r3
 800bf4a:	f200 8083 	bhi.w	800c054 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	6879      	ldr	r1, [r7, #4]
 800bf54:	69ba      	ldr	r2, [r7, #24]
 800bf56:	4613      	mov	r3, r2
 800bf58:	011b      	lsls	r3, r3, #4
 800bf5a:	1a9b      	subs	r3, r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	440b      	add	r3, r1
 800bf60:	332c      	adds	r3, #44	@ 0x2c
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	693a      	ldr	r2, [r7, #16]
 800bf66:	b292      	uxth	r2, r2
 800bf68:	4619      	mov	r1, r3
 800bf6a:	f005 fc5a 	bl	8011822 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800bf6e:	6879      	ldr	r1, [r7, #4]
 800bf70:	69ba      	ldr	r2, [r7, #24]
 800bf72:	4613      	mov	r3, r2
 800bf74:	011b      	lsls	r3, r3, #4
 800bf76:	1a9b      	subs	r3, r3, r2
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	440b      	add	r3, r1
 800bf7c:	332c      	adds	r3, #44	@ 0x2c
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	18d1      	adds	r1, r2, r3
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	69ba      	ldr	r2, [r7, #24]
 800bf88:	4613      	mov	r3, r2
 800bf8a:	011b      	lsls	r3, r3, #4
 800bf8c:	1a9b      	subs	r3, r3, r2
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4403      	add	r3, r0
 800bf92:	332c      	adds	r3, #44	@ 0x2c
 800bf94:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800bf96:	6879      	ldr	r1, [r7, #4]
 800bf98:	69ba      	ldr	r2, [r7, #24]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	011b      	lsls	r3, r3, #4
 800bf9e:	1a9b      	subs	r3, r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	440b      	add	r3, r1
 800bfa4:	3338      	adds	r3, #56	@ 0x38
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	18d1      	adds	r1, r2, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	69ba      	ldr	r2, [r7, #24]
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	1a9b      	subs	r3, r3, r2
 800bfb6:	009b      	lsls	r3, r3, #2
 800bfb8:	4403      	add	r3, r0
 800bfba:	3338      	adds	r3, #56	@ 0x38
 800bfbc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	015a      	lsls	r2, r3, #5
 800bfc2:	6a3b      	ldr	r3, [r7, #32]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	0cdb      	lsrs	r3, r3, #19
 800bfce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfd2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	69ba      	ldr	r2, [r7, #24]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	011b      	lsls	r3, r3, #4
 800bfdc:	1a9b      	subs	r3, r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	440b      	add	r3, r1
 800bfe2:	3328      	adds	r3, #40	@ 0x28
 800bfe4:	881b      	ldrh	r3, [r3, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d13f      	bne.n	800c06e <HCD_RXQLVL_IRQHandler+0x1b4>
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d03c      	beq.n	800c06e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	015a      	lsls	r2, r3, #5
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	4413      	add	r3, r2
 800bffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c00a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c012:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800c014:	69bb      	ldr	r3, [r7, #24]
 800c016:	015a      	lsls	r2, r3, #5
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	4413      	add	r3, r2
 800c01c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c020:	461a      	mov	r2, r3
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800c026:	6879      	ldr	r1, [r7, #4]
 800c028:	69ba      	ldr	r2, [r7, #24]
 800c02a:	4613      	mov	r3, r2
 800c02c:	011b      	lsls	r3, r3, #4
 800c02e:	1a9b      	subs	r3, r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	440b      	add	r3, r1
 800c034:	333c      	adds	r3, #60	@ 0x3c
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	f083 0301 	eor.w	r3, r3, #1
 800c03c:	b2d8      	uxtb	r0, r3
 800c03e:	6879      	ldr	r1, [r7, #4]
 800c040:	69ba      	ldr	r2, [r7, #24]
 800c042:	4613      	mov	r3, r2
 800c044:	011b      	lsls	r3, r3, #4
 800c046:	1a9b      	subs	r3, r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	440b      	add	r3, r1
 800c04c:	333c      	adds	r3, #60	@ 0x3c
 800c04e:	4602      	mov	r2, r0
 800c050:	701a      	strb	r2, [r3, #0]
      break;
 800c052:	e00c      	b.n	800c06e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800c054:	6879      	ldr	r1, [r7, #4]
 800c056:	69ba      	ldr	r2, [r7, #24]
 800c058:	4613      	mov	r3, r2
 800c05a:	011b      	lsls	r3, r3, #4
 800c05c:	1a9b      	subs	r3, r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	440b      	add	r3, r1
 800c062:	334c      	adds	r3, #76	@ 0x4c
 800c064:	2204      	movs	r2, #4
 800c066:	701a      	strb	r2, [r3, #0]
      break;
 800c068:	e001      	b.n	800c06e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800c06a:	bf00      	nop
 800c06c:	e000      	b.n	800c070 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800c06e:	bf00      	nop
  }
}
 800c070:	bf00      	nop
 800c072:	3728      	adds	r7, #40	@ 0x28
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c0a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f003 0302 	and.w	r3, r3, #2
 800c0ac:	2b02      	cmp	r3, #2
 800c0ae:	d10b      	bne.n	800c0c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d102      	bne.n	800c0c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7f5 fab6 	bl	800162c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	f043 0302 	orr.w	r3, r3, #2
 800c0c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f003 0308 	and.w	r3, r3, #8
 800c0ce:	2b08      	cmp	r3, #8
 800c0d0:	d132      	bne.n	800c138 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	f043 0308 	orr.w	r3, r3, #8
 800c0d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	f003 0304 	and.w	r3, r3, #4
 800c0e0:	2b04      	cmp	r3, #4
 800c0e2:	d126      	bne.n	800c132 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7a5b      	ldrb	r3, [r3, #9]
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d113      	bne.n	800c114 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800c0f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c0f6:	d106      	bne.n	800c106 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2102      	movs	r1, #2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f005 fd12 	bl	8011b28 <USB_InitFSLSPClkSel>
 800c104:	e011      	b.n	800c12a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2101      	movs	r1, #1
 800c10c:	4618      	mov	r0, r3
 800c10e:	f005 fd0b 	bl	8011b28 <USB_InitFSLSPClkSel>
 800c112:	e00a      	b.n	800c12a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	79db      	ldrb	r3, [r3, #7]
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d106      	bne.n	800c12a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c122:	461a      	mov	r2, r3
 800c124:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800c128:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7f5 fa9a 	bl	8001664 <HAL_HCD_PortEnabled_Callback>
 800c130:	e002      	b.n	800c138 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7f5 faa4 	bl	8001680 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f003 0320 	and.w	r3, r3, #32
 800c13e:	2b20      	cmp	r3, #32
 800c140:	d103      	bne.n	800c14a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f043 0320 	orr.w	r3, r3, #32
 800c148:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c150:	461a      	mov	r2, r3
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	6013      	str	r3, [r2, #0]
}
 800c156:	bf00      	nop
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e12b      	b.n	800c3ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d106      	bne.n	800c18c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f95d 	bl	800c446 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2224      	movs	r2, #36	@ 0x24
 800c190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f022 0201 	bic.w	r2, r2, #1
 800c1a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c1b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	681a      	ldr	r2, [r3, #0]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c1c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c1c4:	f002 fc72 	bl	800eaac <HAL_RCC_GetPCLK1Freq>
 800c1c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	4a81      	ldr	r2, [pc, #516]	@ (800c3d4 <HAL_I2C_Init+0x274>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d807      	bhi.n	800c1e4 <HAL_I2C_Init+0x84>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	4a80      	ldr	r2, [pc, #512]	@ (800c3d8 <HAL_I2C_Init+0x278>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	bf94      	ite	ls
 800c1dc:	2301      	movls	r3, #1
 800c1de:	2300      	movhi	r3, #0
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	e006      	b.n	800c1f2 <HAL_I2C_Init+0x92>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	4a7d      	ldr	r2, [pc, #500]	@ (800c3dc <HAL_I2C_Init+0x27c>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	bf94      	ite	ls
 800c1ec:	2301      	movls	r3, #1
 800c1ee:	2300      	movhi	r3, #0
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d001      	beq.n	800c1fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e0e7      	b.n	800c3ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	4a78      	ldr	r2, [pc, #480]	@ (800c3e0 <HAL_I2C_Init+0x280>)
 800c1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c202:	0c9b      	lsrs	r3, r3, #18
 800c204:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	430a      	orrs	r2, r1
 800c218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	6a1b      	ldr	r3, [r3, #32]
 800c220:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	4a6a      	ldr	r2, [pc, #424]	@ (800c3d4 <HAL_I2C_Init+0x274>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d802      	bhi.n	800c234 <HAL_I2C_Init+0xd4>
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	3301      	adds	r3, #1
 800c232:	e009      	b.n	800c248 <HAL_I2C_Init+0xe8>
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800c23a:	fb02 f303 	mul.w	r3, r2, r3
 800c23e:	4a69      	ldr	r2, [pc, #420]	@ (800c3e4 <HAL_I2C_Init+0x284>)
 800c240:	fba2 2303 	umull	r2, r3, r2, r3
 800c244:	099b      	lsrs	r3, r3, #6
 800c246:	3301      	adds	r3, #1
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	6812      	ldr	r2, [r2, #0]
 800c24c:	430b      	orrs	r3, r1
 800c24e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	69db      	ldr	r3, [r3, #28]
 800c256:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800c25a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	495c      	ldr	r1, [pc, #368]	@ (800c3d4 <HAL_I2C_Init+0x274>)
 800c264:	428b      	cmp	r3, r1
 800c266:	d819      	bhi.n	800c29c <HAL_I2C_Init+0x13c>
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	1e59      	subs	r1, r3, #1
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	005b      	lsls	r3, r3, #1
 800c272:	fbb1 f3f3 	udiv	r3, r1, r3
 800c276:	1c59      	adds	r1, r3, #1
 800c278:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c27c:	400b      	ands	r3, r1
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00a      	beq.n	800c298 <HAL_I2C_Init+0x138>
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	1e59      	subs	r1, r3, #1
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	fbb1 f3f3 	udiv	r3, r1, r3
 800c290:	3301      	adds	r3, #1
 800c292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c296:	e051      	b.n	800c33c <HAL_I2C_Init+0x1dc>
 800c298:	2304      	movs	r3, #4
 800c29a:	e04f      	b.n	800c33c <HAL_I2C_Init+0x1dc>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d111      	bne.n	800c2c8 <HAL_I2C_Init+0x168>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	1e58      	subs	r0, r3, #1
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6859      	ldr	r1, [r3, #4]
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	440b      	add	r3, r1
 800c2b2:	fbb0 f3f3 	udiv	r3, r0, r3
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	bf0c      	ite	eq
 800c2c0:	2301      	moveq	r3, #1
 800c2c2:	2300      	movne	r3, #0
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	e012      	b.n	800c2ee <HAL_I2C_Init+0x18e>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	1e58      	subs	r0, r3, #1
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6859      	ldr	r1, [r3, #4]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	440b      	add	r3, r1
 800c2d6:	0099      	lsls	r1, r3, #2
 800c2d8:	440b      	add	r3, r1
 800c2da:	fbb0 f3f3 	udiv	r3, r0, r3
 800c2de:	3301      	adds	r3, #1
 800c2e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	bf0c      	ite	eq
 800c2e8:	2301      	moveq	r3, #1
 800c2ea:	2300      	movne	r3, #0
 800c2ec:	b2db      	uxtb	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <HAL_I2C_Init+0x196>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e022      	b.n	800c33c <HAL_I2C_Init+0x1dc>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d10e      	bne.n	800c31c <HAL_I2C_Init+0x1bc>
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	1e58      	subs	r0, r3, #1
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6859      	ldr	r1, [r3, #4]
 800c306:	460b      	mov	r3, r1
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	440b      	add	r3, r1
 800c30c:	fbb0 f3f3 	udiv	r3, r0, r3
 800c310:	3301      	adds	r3, #1
 800c312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c31a:	e00f      	b.n	800c33c <HAL_I2C_Init+0x1dc>
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	1e58      	subs	r0, r3, #1
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6859      	ldr	r1, [r3, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	440b      	add	r3, r1
 800c32a:	0099      	lsls	r1, r3, #2
 800c32c:	440b      	add	r3, r1
 800c32e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c332:	3301      	adds	r3, #1
 800c334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c338:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c33c:	6879      	ldr	r1, [r7, #4]
 800c33e:	6809      	ldr	r1, [r1, #0]
 800c340:	4313      	orrs	r3, r2
 800c342:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	69da      	ldr	r2, [r3, #28]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	431a      	orrs	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	430a      	orrs	r2, r1
 800c35e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800c36a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	6911      	ldr	r1, [r2, #16]
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	68d2      	ldr	r2, [r2, #12]
 800c376:	4311      	orrs	r1, r2
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	6812      	ldr	r2, [r2, #0]
 800c37c:	430b      	orrs	r3, r1
 800c37e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	695a      	ldr	r2, [r3, #20]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	699b      	ldr	r3, [r3, #24]
 800c392:	431a      	orrs	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	430a      	orrs	r2, r1
 800c39a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f042 0201 	orr.w	r2, r2, #1
 800c3aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2220      	movs	r2, #32
 800c3b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	000186a0 	.word	0x000186a0
 800c3d8:	001e847f 	.word	0x001e847f
 800c3dc:	003d08ff 	.word	0x003d08ff
 800c3e0:	431bde83 	.word	0x431bde83
 800c3e4:	10624dd3 	.word	0x10624dd3

0800c3e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d101      	bne.n	800c3fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e021      	b.n	800c43e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2224      	movs	r2, #36	@ 0x24
 800c3fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f022 0201 	bic.w	r2, r2, #1
 800c410:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f821 	bl	800c45a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c446:	b480      	push	{r7}
 800c448:	b083      	sub	sp, #12
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c44e:	bf00      	nop
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c462:	bf00      	nop
 800c464:	370c      	adds	r7, #12
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
	...

0800c470 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b088      	sub	sp, #32
 800c474:	af02      	add	r7, sp, #8
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	4608      	mov	r0, r1
 800c47a:	4611      	mov	r1, r2
 800c47c:	461a      	mov	r2, r3
 800c47e:	4603      	mov	r3, r0
 800c480:	817b      	strh	r3, [r7, #10]
 800c482:	460b      	mov	r3, r1
 800c484:	813b      	strh	r3, [r7, #8]
 800c486:	4613      	mov	r3, r2
 800c488:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c48a:	f7fb fc23 	bl	8007cd4 <HAL_GetTick>
 800c48e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c496:	b2db      	uxtb	r3, r3
 800c498:	2b20      	cmp	r3, #32
 800c49a:	f040 80d9 	bne.w	800c650 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	2319      	movs	r3, #25
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	496d      	ldr	r1, [pc, #436]	@ (800c65c <HAL_I2C_Mem_Write+0x1ec>)
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f000 fc99 	bl	800cde0 <I2C_WaitOnFlagUntilTimeout>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d001      	beq.n	800c4b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c4b4:	2302      	movs	r3, #2
 800c4b6:	e0cc      	b.n	800c652 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d101      	bne.n	800c4c6 <HAL_I2C_Mem_Write+0x56>
 800c4c2:	2302      	movs	r3, #2
 800c4c4:	e0c5      	b.n	800c652 <HAL_I2C_Mem_Write+0x1e2>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f003 0301 	and.w	r3, r3, #1
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d007      	beq.n	800c4ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f042 0201 	orr.w	r2, r2, #1
 800c4ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c4fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2221      	movs	r2, #33	@ 0x21
 800c500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2240      	movs	r2, #64	@ 0x40
 800c508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	6a3a      	ldr	r2, [r7, #32]
 800c516:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c51c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c522:	b29a      	uxth	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4a4d      	ldr	r2, [pc, #308]	@ (800c660 <HAL_I2C_Mem_Write+0x1f0>)
 800c52c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c52e:	88f8      	ldrh	r0, [r7, #6]
 800c530:	893a      	ldrh	r2, [r7, #8]
 800c532:	8979      	ldrh	r1, [r7, #10]
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	9301      	str	r3, [sp, #4]
 800c538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	4603      	mov	r3, r0
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f000 fad0 	bl	800cae4 <I2C_RequestMemoryWrite>
 800c544:	4603      	mov	r3, r0
 800c546:	2b00      	cmp	r3, #0
 800c548:	d052      	beq.n	800c5f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	e081      	b.n	800c652 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c54e:	697a      	ldr	r2, [r7, #20]
 800c550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f000 fd5e 	bl	800d014 <I2C_WaitOnTXEFlagUntilTimeout>
 800c558:	4603      	mov	r3, r0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00d      	beq.n	800c57a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c562:	2b04      	cmp	r3, #4
 800c564:	d107      	bne.n	800c576 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c574:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e06b      	b.n	800c652 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c57e:	781a      	ldrb	r2, [r3, #0]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c594:	3b01      	subs	r3, #1
 800c596:	b29a      	uxth	r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	f003 0304 	and.w	r3, r3, #4
 800c5b4:	2b04      	cmp	r3, #4
 800c5b6:	d11b      	bne.n	800c5f0 <HAL_I2C_Mem_Write+0x180>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d017      	beq.n	800c5f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c4:	781a      	ldrb	r2, [r3, #0]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d0:	1c5a      	adds	r2, r3, #1
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5da:	3b01      	subs	r3, #1
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	b29a      	uxth	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1aa      	bne.n	800c54e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c5f8:	697a      	ldr	r2, [r7, #20]
 800c5fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c5fc:	68f8      	ldr	r0, [r7, #12]
 800c5fe:	f000 fd51 	bl	800d0a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00d      	beq.n	800c624 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c60c:	2b04      	cmp	r3, #4
 800c60e:	d107      	bne.n	800c620 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c61e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	e016      	b.n	800c652 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2220      	movs	r2, #32
 800c638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c64c:	2300      	movs	r3, #0
 800c64e:	e000      	b.n	800c652 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c650:	2302      	movs	r3, #2
  }
}
 800c652:	4618      	mov	r0, r3
 800c654:	3718      	adds	r7, #24
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	00100002 	.word	0x00100002
 800c660:	ffff0000 	.word	0xffff0000

0800c664 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08c      	sub	sp, #48	@ 0x30
 800c668:	af02      	add	r7, sp, #8
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	4608      	mov	r0, r1
 800c66e:	4611      	mov	r1, r2
 800c670:	461a      	mov	r2, r3
 800c672:	4603      	mov	r3, r0
 800c674:	817b      	strh	r3, [r7, #10]
 800c676:	460b      	mov	r3, r1
 800c678:	813b      	strh	r3, [r7, #8]
 800c67a:	4613      	mov	r3, r2
 800c67c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c67e:	f7fb fb29 	bl	8007cd4 <HAL_GetTick>
 800c682:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b20      	cmp	r3, #32
 800c68e:	f040 8214 	bne.w	800caba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	9300      	str	r3, [sp, #0]
 800c696:	2319      	movs	r3, #25
 800c698:	2201      	movs	r2, #1
 800c69a:	497b      	ldr	r1, [pc, #492]	@ (800c888 <HAL_I2C_Mem_Read+0x224>)
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f000 fb9f 	bl	800cde0 <I2C_WaitOnFlagUntilTimeout>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	e207      	b.n	800cabc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c6b2:	2b01      	cmp	r3, #1
 800c6b4:	d101      	bne.n	800c6ba <HAL_I2C_Mem_Read+0x56>
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	e200      	b.n	800cabc <HAL_I2C_Mem_Read+0x458>
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f003 0301 	and.w	r3, r3, #1
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d007      	beq.n	800c6e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f042 0201 	orr.w	r2, r2, #1
 800c6de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c6ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2222      	movs	r2, #34	@ 0x22
 800c6f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2240      	movs	r2, #64	@ 0x40
 800c6fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c70a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800c710:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c716:	b29a      	uxth	r2, r3
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4a5b      	ldr	r2, [pc, #364]	@ (800c88c <HAL_I2C_Mem_Read+0x228>)
 800c720:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c722:	88f8      	ldrh	r0, [r7, #6]
 800c724:	893a      	ldrh	r2, [r7, #8]
 800c726:	8979      	ldrh	r1, [r7, #10]
 800c728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72a:	9301      	str	r3, [sp, #4]
 800c72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72e:	9300      	str	r3, [sp, #0]
 800c730:	4603      	mov	r3, r0
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f000 fa6c 	bl	800cc10 <I2C_RequestMemoryRead>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d001      	beq.n	800c742 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c73e:	2301      	movs	r3, #1
 800c740:	e1bc      	b.n	800cabc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c746:	2b00      	cmp	r3, #0
 800c748:	d113      	bne.n	800c772 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c74a:	2300      	movs	r3, #0
 800c74c:	623b      	str	r3, [r7, #32]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	623b      	str	r3, [r7, #32]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	699b      	ldr	r3, [r3, #24]
 800c75c:	623b      	str	r3, [r7, #32]
 800c75e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c76e:	601a      	str	r2, [r3, #0]
 800c770:	e190      	b.n	800ca94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c776:	2b01      	cmp	r3, #1
 800c778:	d11b      	bne.n	800c7b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c788:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c78a:	2300      	movs	r3, #0
 800c78c:	61fb      	str	r3, [r7, #28]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	61fb      	str	r3, [r7, #28]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	61fb      	str	r3, [r7, #28]
 800c79e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7ae:	601a      	str	r2, [r3, #0]
 800c7b0:	e170      	b.n	800ca94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	d11b      	bne.n	800c7f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c7da:	2300      	movs	r3, #0
 800c7dc:	61bb      	str	r3, [r7, #24]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	695b      	ldr	r3, [r3, #20]
 800c7e4:	61bb      	str	r3, [r7, #24]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	61bb      	str	r3, [r7, #24]
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	e150      	b.n	800ca94 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	617b      	str	r3, [r7, #20]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	695b      	ldr	r3, [r3, #20]
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	617b      	str	r3, [r7, #20]
 800c806:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c808:	e144      	b.n	800ca94 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c80e:	2b03      	cmp	r3, #3
 800c810:	f200 80f1 	bhi.w	800c9f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d123      	bne.n	800c864 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c81c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c81e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f000 fc87 	bl	800d134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d001      	beq.n	800c830 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	e145      	b.n	800cabc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	691a      	ldr	r2, [r3, #16]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c83a:	b2d2      	uxtb	r2, r2
 800c83c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c842:	1c5a      	adds	r2, r3, #1
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c84c:	3b01      	subs	r3, #1
 800c84e:	b29a      	uxth	r2, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c858:	b29b      	uxth	r3, r3
 800c85a:	3b01      	subs	r3, #1
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c862:	e117      	b.n	800ca94 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c868:	2b02      	cmp	r3, #2
 800c86a:	d14e      	bne.n	800c90a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c872:	2200      	movs	r2, #0
 800c874:	4906      	ldr	r1, [pc, #24]	@ (800c890 <HAL_I2C_Mem_Read+0x22c>)
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f000 fab2 	bl	800cde0 <I2C_WaitOnFlagUntilTimeout>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d008      	beq.n	800c894 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	e11a      	b.n	800cabc <HAL_I2C_Mem_Read+0x458>
 800c886:	bf00      	nop
 800c888:	00100002 	.word	0x00100002
 800c88c:	ffff0000 	.word	0xffff0000
 800c890:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c8a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	691a      	ldr	r2, [r3, #16]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ae:	b2d2      	uxtb	r2, r2
 800c8b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	691a      	ldr	r2, [r3, #16]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e0:	b2d2      	uxtb	r2, r2
 800c8e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8f2:	3b01      	subs	r3, #1
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	3b01      	subs	r3, #1
 800c902:	b29a      	uxth	r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c908:	e0c4      	b.n	800ca94 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c910:	2200      	movs	r2, #0
 800c912:	496c      	ldr	r1, [pc, #432]	@ (800cac4 <HAL_I2C_Mem_Read+0x460>)
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f000 fa63 	bl	800cde0 <I2C_WaitOnFlagUntilTimeout>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d001      	beq.n	800c924 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	e0cb      	b.n	800cabc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	691a      	ldr	r2, [r3, #16]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c93e:	b2d2      	uxtb	r2, r2
 800c940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c950:	3b01      	subs	r3, #1
 800c952:	b29a      	uxth	r2, r3
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	3b01      	subs	r3, #1
 800c960:	b29a      	uxth	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c96c:	2200      	movs	r2, #0
 800c96e:	4955      	ldr	r1, [pc, #340]	@ (800cac4 <HAL_I2C_Mem_Read+0x460>)
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 fa35 	bl	800cde0 <I2C_WaitOnFlagUntilTimeout>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c97c:	2301      	movs	r3, #1
 800c97e:	e09d      	b.n	800cabc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c98e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	691a      	ldr	r2, [r3, #16]
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c99a:	b2d2      	uxtb	r2, r2
 800c99c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9a2:	1c5a      	adds	r2, r3, #1
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	3b01      	subs	r3, #1
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	691a      	ldr	r2, [r3, #16]
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9cc:	b2d2      	uxtb	r2, r2
 800c9ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9d4:	1c5a      	adds	r2, r3, #1
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	b29a      	uxth	r2, r3
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c9f4:	e04e      	b.n	800ca94 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f000 fb9a 	bl	800d134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e058      	b.n	800cabc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	691a      	ldr	r2, [r3, #16]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca14:	b2d2      	uxtb	r2, r2
 800ca16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca1c:	1c5a      	adds	r2, r3, #1
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca26:	3b01      	subs	r3, #1
 800ca28:	b29a      	uxth	r2, r3
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	3b01      	subs	r3, #1
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	f003 0304 	and.w	r3, r3, #4
 800ca46:	2b04      	cmp	r3, #4
 800ca48:	d124      	bne.n	800ca94 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d107      	bne.n	800ca62 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca60:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	691a      	ldr	r2, [r3, #16]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca6c:	b2d2      	uxtb	r2, r2
 800ca6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca74:	1c5a      	adds	r2, r3, #1
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	b29a      	uxth	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f47f aeb6 	bne.w	800c80a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2220      	movs	r2, #32
 800caa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800cab6:	2300      	movs	r3, #0
 800cab8:	e000      	b.n	800cabc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800caba:	2302      	movs	r3, #2
  }
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3728      	adds	r7, #40	@ 0x28
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	00010004 	.word	0x00010004

0800cac8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cad6:	b2db      	uxtb	r3, r3
}
 800cad8:	4618      	mov	r0, r3
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b088      	sub	sp, #32
 800cae8:	af02      	add	r7, sp, #8
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	4608      	mov	r0, r1
 800caee:	4611      	mov	r1, r2
 800caf0:	461a      	mov	r2, r3
 800caf2:	4603      	mov	r3, r0
 800caf4:	817b      	strh	r3, [r7, #10]
 800caf6:	460b      	mov	r3, r1
 800caf8:	813b      	strh	r3, [r7, #8]
 800cafa:	4613      	mov	r3, r2
 800cafc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cb0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	6a3b      	ldr	r3, [r7, #32]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	f000 f960 	bl	800cde0 <I2C_WaitOnFlagUntilTimeout>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00d      	beq.n	800cb42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb34:	d103      	bne.n	800cb3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	e05f      	b.n	800cc02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cb42:	897b      	ldrh	r3, [r7, #10]
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	461a      	mov	r2, r3
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800cb50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb54:	6a3a      	ldr	r2, [r7, #32]
 800cb56:	492d      	ldr	r1, [pc, #180]	@ (800cc0c <I2C_RequestMemoryWrite+0x128>)
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f000 f9bb 	bl	800ced4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e04c      	b.n	800cc02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cb68:	2300      	movs	r3, #0
 800cb6a:	617b      	str	r3, [r7, #20]
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	695b      	ldr	r3, [r3, #20]
 800cb72:	617b      	str	r3, [r7, #20]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	699b      	ldr	r3, [r3, #24]
 800cb7a:	617b      	str	r3, [r7, #20]
 800cb7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb80:	6a39      	ldr	r1, [r7, #32]
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f000 fa46 	bl	800d014 <I2C_WaitOnTXEFlagUntilTimeout>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00d      	beq.n	800cbaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb92:	2b04      	cmp	r3, #4
 800cb94:	d107      	bne.n	800cba6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cba4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e02b      	b.n	800cc02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cbaa:	88fb      	ldrh	r3, [r7, #6]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d105      	bne.n	800cbbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cbb0:	893b      	ldrh	r3, [r7, #8]
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	611a      	str	r2, [r3, #16]
 800cbba:	e021      	b.n	800cc00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800cbbc:	893b      	ldrh	r3, [r7, #8]
 800cbbe:	0a1b      	lsrs	r3, r3, #8
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	b2da      	uxtb	r2, r3
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cbca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbcc:	6a39      	ldr	r1, [r7, #32]
 800cbce:	68f8      	ldr	r0, [r7, #12]
 800cbd0:	f000 fa20 	bl	800d014 <I2C_WaitOnTXEFlagUntilTimeout>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d00d      	beq.n	800cbf6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbde:	2b04      	cmp	r3, #4
 800cbe0:	d107      	bne.n	800cbf2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cbf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e005      	b.n	800cc02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cbf6:	893b      	ldrh	r3, [r7, #8]
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800cc00:	2300      	movs	r3, #0
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3718      	adds	r7, #24
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	00010002 	.word	0x00010002

0800cc10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b088      	sub	sp, #32
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	4608      	mov	r0, r1
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	4603      	mov	r3, r0
 800cc20:	817b      	strh	r3, [r7, #10]
 800cc22:	460b      	mov	r3, r1
 800cc24:	813b      	strh	r3, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cc38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cc48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cc56:	68f8      	ldr	r0, [r7, #12]
 800cc58:	f000 f8c2 	bl	800cde0 <I2C_WaitOnFlagUntilTimeout>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00d      	beq.n	800cc7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc70:	d103      	bne.n	800cc7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800cc7a:	2303      	movs	r3, #3
 800cc7c:	e0aa      	b.n	800cdd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cc7e:	897b      	ldrh	r3, [r7, #10]
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	461a      	mov	r2, r3
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800cc8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc90:	6a3a      	ldr	r2, [r7, #32]
 800cc92:	4952      	ldr	r1, [pc, #328]	@ (800cddc <I2C_RequestMemoryRead+0x1cc>)
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f000 f91d 	bl	800ced4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d001      	beq.n	800cca4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800cca0:	2301      	movs	r3, #1
 800cca2:	e097      	b.n	800cdd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cca4:	2300      	movs	r3, #0
 800cca6:	617b      	str	r3, [r7, #20]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	617b      	str	r3, [r7, #20]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	699b      	ldr	r3, [r3, #24]
 800ccb6:	617b      	str	r3, [r7, #20]
 800ccb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ccba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccbc:	6a39      	ldr	r1, [r7, #32]
 800ccbe:	68f8      	ldr	r0, [r7, #12]
 800ccc0:	f000 f9a8 	bl	800d014 <I2C_WaitOnTXEFlagUntilTimeout>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00d      	beq.n	800cce6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccce:	2b04      	cmp	r3, #4
 800ccd0:	d107      	bne.n	800cce2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cce0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	e076      	b.n	800cdd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cce6:	88fb      	ldrh	r3, [r7, #6]
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d105      	bne.n	800ccf8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ccec:	893b      	ldrh	r3, [r7, #8]
 800ccee:	b2da      	uxtb	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	611a      	str	r2, [r3, #16]
 800ccf6:	e021      	b.n	800cd3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ccf8:	893b      	ldrh	r3, [r7, #8]
 800ccfa:	0a1b      	lsrs	r3, r3, #8
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd08:	6a39      	ldr	r1, [r7, #32]
 800cd0a:	68f8      	ldr	r0, [r7, #12]
 800cd0c:	f000 f982 	bl	800d014 <I2C_WaitOnTXEFlagUntilTimeout>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00d      	beq.n	800cd32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd1a:	2b04      	cmp	r3, #4
 800cd1c:	d107      	bne.n	800cd2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e050      	b.n	800cdd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800cd32:	893b      	ldrh	r3, [r7, #8]
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd3e:	6a39      	ldr	r1, [r7, #32]
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f000 f967 	bl	800d014 <I2C_WaitOnTXEFlagUntilTimeout>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00d      	beq.n	800cd68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd50:	2b04      	cmp	r3, #4
 800cd52:	d107      	bne.n	800cd64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cd62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800cd64:	2301      	movs	r3, #1
 800cd66:	e035      	b.n	800cdd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681a      	ldr	r2, [r3, #0]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cd76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	6a3b      	ldr	r3, [r7, #32]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 f82b 	bl	800cde0 <I2C_WaitOnFlagUntilTimeout>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00d      	beq.n	800cdac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd9e:	d103      	bne.n	800cda8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cda6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e013      	b.n	800cdd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800cdac:	897b      	ldrh	r3, [r7, #10]
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	f043 0301 	orr.w	r3, r3, #1
 800cdb4:	b2da      	uxtb	r2, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbe:	6a3a      	ldr	r2, [r7, #32]
 800cdc0:	4906      	ldr	r1, [pc, #24]	@ (800cddc <I2C_RequestMemoryRead+0x1cc>)
 800cdc2:	68f8      	ldr	r0, [r7, #12]
 800cdc4:	f000 f886 	bl	800ced4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d001      	beq.n	800cdd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e000      	b.n	800cdd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800cdd2:	2300      	movs	r3, #0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3718      	adds	r7, #24
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}
 800cddc:	00010002 	.word	0x00010002

0800cde0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	60f8      	str	r0, [r7, #12]
 800cde8:	60b9      	str	r1, [r7, #8]
 800cdea:	603b      	str	r3, [r7, #0]
 800cdec:	4613      	mov	r3, r2
 800cdee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cdf0:	e048      	b.n	800ce84 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf8:	d044      	beq.n	800ce84 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdfa:	f7fa ff6b 	bl	8007cd4 <HAL_GetTick>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	1ad3      	subs	r3, r2, r3
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d302      	bcc.n	800ce10 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d139      	bne.n	800ce84 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	0c1b      	lsrs	r3, r3, #16
 800ce14:	b2db      	uxtb	r3, r3
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d10d      	bne.n	800ce36 <I2C_WaitOnFlagUntilTimeout+0x56>
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	695b      	ldr	r3, [r3, #20]
 800ce20:	43da      	mvns	r2, r3
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	4013      	ands	r3, r2
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	bf0c      	ite	eq
 800ce2c:	2301      	moveq	r3, #1
 800ce2e:	2300      	movne	r3, #0
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	461a      	mov	r2, r3
 800ce34:	e00c      	b.n	800ce50 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	699b      	ldr	r3, [r3, #24]
 800ce3c:	43da      	mvns	r2, r3
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	4013      	ands	r3, r2
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	bf0c      	ite	eq
 800ce48:	2301      	moveq	r3, #1
 800ce4a:	2300      	movne	r3, #0
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	461a      	mov	r2, r3
 800ce50:	79fb      	ldrb	r3, [r7, #7]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d116      	bne.n	800ce84 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2220      	movs	r2, #32
 800ce60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce70:	f043 0220 	orr.w	r2, r3, #32
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ce80:	2301      	movs	r3, #1
 800ce82:	e023      	b.n	800cecc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	0c1b      	lsrs	r3, r3, #16
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d10d      	bne.n	800ceaa <I2C_WaitOnFlagUntilTimeout+0xca>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	695b      	ldr	r3, [r3, #20]
 800ce94:	43da      	mvns	r2, r3
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	4013      	ands	r3, r2
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	bf0c      	ite	eq
 800cea0:	2301      	moveq	r3, #1
 800cea2:	2300      	movne	r3, #0
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	461a      	mov	r2, r3
 800cea8:	e00c      	b.n	800cec4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	43da      	mvns	r2, r3
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	4013      	ands	r3, r2
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	bf0c      	ite	eq
 800cebc:	2301      	moveq	r3, #1
 800cebe:	2300      	movne	r3, #0
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	461a      	mov	r2, r3
 800cec4:	79fb      	ldrb	r3, [r7, #7]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d093      	beq.n	800cdf2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
 800cee0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cee2:	e071      	b.n	800cfc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	695b      	ldr	r3, [r3, #20]
 800ceea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ceee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cef2:	d123      	bne.n	800cf3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800cf0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2220      	movs	r2, #32
 800cf18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf28:	f043 0204 	orr.w	r2, r3, #4
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	e067      	b.n	800d00c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf42:	d041      	beq.n	800cfc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf44:	f7fa fec6 	bl	8007cd4 <HAL_GetTick>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d302      	bcc.n	800cf5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d136      	bne.n	800cfc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	0c1b      	lsrs	r3, r3, #16
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d10c      	bne.n	800cf7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	43da      	mvns	r2, r3
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	4013      	ands	r3, r2
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	bf14      	ite	ne
 800cf76:	2301      	movne	r3, #1
 800cf78:	2300      	moveq	r3, #0
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	e00b      	b.n	800cf96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	43da      	mvns	r2, r3
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	4013      	ands	r3, r2
 800cf8a:	b29b      	uxth	r3, r3
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	bf14      	ite	ne
 800cf90:	2301      	movne	r3, #1
 800cf92:	2300      	moveq	r3, #0
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d016      	beq.n	800cfc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2220      	movs	r2, #32
 800cfa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfb4:	f043 0220 	orr.w	r2, r3, #32
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e021      	b.n	800d00c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	0c1b      	lsrs	r3, r3, #16
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d10c      	bne.n	800cfec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	695b      	ldr	r3, [r3, #20]
 800cfd8:	43da      	mvns	r2, r3
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	4013      	ands	r3, r2
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	bf14      	ite	ne
 800cfe4:	2301      	movne	r3, #1
 800cfe6:	2300      	moveq	r3, #0
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	e00b      	b.n	800d004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	699b      	ldr	r3, [r3, #24]
 800cff2:	43da      	mvns	r2, r3
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	4013      	ands	r3, r2
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	bf14      	ite	ne
 800cffe:	2301      	movne	r3, #1
 800d000:	2300      	moveq	r3, #0
 800d002:	b2db      	uxtb	r3, r3
 800d004:	2b00      	cmp	r3, #0
 800d006:	f47f af6d 	bne.w	800cee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800d00a:	2300      	movs	r3, #0
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3710      	adds	r7, #16
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}

0800d014 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	60f8      	str	r0, [r7, #12]
 800d01c:	60b9      	str	r1, [r7, #8]
 800d01e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d020:	e034      	b.n	800d08c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f000 f8e3 	bl	800d1ee <I2C_IsAcknowledgeFailed>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d001      	beq.n	800d032 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e034      	b.n	800d09c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d038:	d028      	beq.n	800d08c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d03a:	f7fa fe4b 	bl	8007cd4 <HAL_GetTick>
 800d03e:	4602      	mov	r2, r0
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	429a      	cmp	r2, r3
 800d048:	d302      	bcc.n	800d050 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d11d      	bne.n	800d08c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	695b      	ldr	r3, [r3, #20]
 800d056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d05a:	2b80      	cmp	r3, #128	@ 0x80
 800d05c:	d016      	beq.n	800d08c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2200      	movs	r2, #0
 800d062:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2220      	movs	r2, #32
 800d068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d078:	f043 0220 	orr.w	r2, r3, #32
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	e007      	b.n	800d09c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d096:	2b80      	cmp	r3, #128	@ 0x80
 800d098:	d1c3      	bne.n	800d022 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d0b0:	e034      	b.n	800d11c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f000 f89b 	bl	800d1ee <I2C_IsAcknowledgeFailed>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d001      	beq.n	800d0c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e034      	b.n	800d12c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c8:	d028      	beq.n	800d11c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0ca:	f7fa fe03 	bl	8007cd4 <HAL_GetTick>
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	1ad3      	subs	r3, r2, r3
 800d0d4:	68ba      	ldr	r2, [r7, #8]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d302      	bcc.n	800d0e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d11d      	bne.n	800d11c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	695b      	ldr	r3, [r3, #20]
 800d0e6:	f003 0304 	and.w	r3, r3, #4
 800d0ea:	2b04      	cmp	r3, #4
 800d0ec:	d016      	beq.n	800d11c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2220      	movs	r2, #32
 800d0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d108:	f043 0220 	orr.w	r2, r3, #32
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e007      	b.n	800d12c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	695b      	ldr	r3, [r3, #20]
 800d122:	f003 0304 	and.w	r3, r3, #4
 800d126:	2b04      	cmp	r3, #4
 800d128:	d1c3      	bne.n	800d0b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d140:	e049      	b.n	800d1d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	f003 0310 	and.w	r3, r3, #16
 800d14c:	2b10      	cmp	r3, #16
 800d14e:	d119      	bne.n	800d184 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f06f 0210 	mvn.w	r2, #16
 800d158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2220      	movs	r2, #32
 800d164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800d180:	2301      	movs	r3, #1
 800d182:	e030      	b.n	800d1e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d184:	f7fa fda6 	bl	8007cd4 <HAL_GetTick>
 800d188:	4602      	mov	r2, r0
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	68ba      	ldr	r2, [r7, #8]
 800d190:	429a      	cmp	r2, r3
 800d192:	d302      	bcc.n	800d19a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d11d      	bne.n	800d1d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	695b      	ldr	r3, [r3, #20]
 800d1a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1a4:	2b40      	cmp	r3, #64	@ 0x40
 800d1a6:	d016      	beq.n	800d1d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2220      	movs	r2, #32
 800d1b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1c2:	f043 0220 	orr.w	r2, r3, #32
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e007      	b.n	800d1e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	695b      	ldr	r3, [r3, #20]
 800d1dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1e0:	2b40      	cmp	r3, #64	@ 0x40
 800d1e2:	d1ae      	bne.n	800d142 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d1ee:	b480      	push	{r7}
 800d1f0:	b083      	sub	sp, #12
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	695b      	ldr	r3, [r3, #20]
 800d1fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d200:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d204:	d11b      	bne.n	800d23e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d20e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2200      	movs	r2, #0
 800d214:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2220      	movs	r2, #32
 800d21a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d22a:	f043 0204 	orr.w	r2, r3, #4
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e000      	b.n	800d240 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b088      	sub	sp, #32
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d101      	bne.n	800d25e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e138      	b.n	800d4d0 <HAL_I2S_Init+0x284>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d264:	b2db      	uxtb	r3, r3
 800d266:	2b00      	cmp	r3, #0
 800d268:	d109      	bne.n	800d27e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a98      	ldr	r2, [pc, #608]	@ (800d4d8 <HAL_I2S_Init+0x28c>)
 800d276:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f95f 	bl	800d53c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2202      	movs	r2, #2
 800d282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	69db      	ldr	r3, [r3, #28]
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	6812      	ldr	r2, [r2, #0]
 800d290:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800d294:	f023 030f 	bic.w	r3, r3, #15
 800d298:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2202      	movs	r2, #2
 800d2a0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	695b      	ldr	r3, [r3, #20]
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d060      	beq.n	800d36c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	68db      	ldr	r3, [r3, #12]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d102      	bne.n	800d2b8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800d2b2:	2310      	movs	r3, #16
 800d2b4:	617b      	str	r3, [r7, #20]
 800d2b6:	e001      	b.n	800d2bc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800d2b8:	2320      	movs	r3, #32
 800d2ba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	2b20      	cmp	r3, #32
 800d2c2:	d802      	bhi.n	800d2ca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	005b      	lsls	r3, r3, #1
 800d2c8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800d2ca:	2001      	movs	r0, #1
 800d2cc:	f001 fec2 	bl	800f054 <HAL_RCCEx_GetPeriphCLKFreq>
 800d2d0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	691b      	ldr	r3, [r3, #16]
 800d2d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2da:	d125      	bne.n	800d328 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d010      	beq.n	800d306 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	fbb2 f2f3 	udiv	r2, r2, r3
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	4413      	add	r3, r2
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	695b      	ldr	r3, [r3, #20]
 800d2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d300:	3305      	adds	r3, #5
 800d302:	613b      	str	r3, [r7, #16]
 800d304:	e01f      	b.n	800d346 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	00db      	lsls	r3, r3, #3
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d310:	4613      	mov	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	005b      	lsls	r3, r3, #1
 800d318:	461a      	mov	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	695b      	ldr	r3, [r3, #20]
 800d31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d322:	3305      	adds	r3, #5
 800d324:	613b      	str	r3, [r7, #16]
 800d326:	e00e      	b.n	800d346 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d330:	4613      	mov	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4413      	add	r3, r2
 800d336:	005b      	lsls	r3, r3, #1
 800d338:	461a      	mov	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d342:	3305      	adds	r3, #5
 800d344:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	4a64      	ldr	r2, [pc, #400]	@ (800d4dc <HAL_I2S_Init+0x290>)
 800d34a:	fba2 2303 	umull	r2, r3, r2, r3
 800d34e:	08db      	lsrs	r3, r3, #3
 800d350:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	f003 0301 	and.w	r3, r3, #1
 800d358:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800d35a:	693a      	ldr	r2, [r7, #16]
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	085b      	lsrs	r3, r3, #1
 800d362:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800d364:	69bb      	ldr	r3, [r7, #24]
 800d366:	021b      	lsls	r3, r3, #8
 800d368:	61bb      	str	r3, [r7, #24]
 800d36a:	e003      	b.n	800d374 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800d36c:	2302      	movs	r3, #2
 800d36e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800d370:	2300      	movs	r3, #0
 800d372:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	2b01      	cmp	r3, #1
 800d378:	d902      	bls.n	800d380 <HAL_I2S_Init+0x134>
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	2bff      	cmp	r3, #255	@ 0xff
 800d37e:	d907      	bls.n	800d390 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d384:	f043 0210 	orr.w	r2, r3, #16
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800d38c:	2301      	movs	r3, #1
 800d38e:	e09f      	b.n	800d4d0 <HAL_I2S_Init+0x284>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	691a      	ldr	r2, [r3, #16]
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	ea42 0103 	orr.w	r1, r2, r3
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	69fa      	ldr	r2, [r7, #28]
 800d3a0:	430a      	orrs	r2, r1
 800d3a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	69db      	ldr	r3, [r3, #28]
 800d3aa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800d3ae:	f023 030f 	bic.w	r3, r3, #15
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	6851      	ldr	r1, [r2, #4]
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	6892      	ldr	r2, [r2, #8]
 800d3ba:	4311      	orrs	r1, r2
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	68d2      	ldr	r2, [r2, #12]
 800d3c0:	4311      	orrs	r1, r2
 800d3c2:	687a      	ldr	r2, [r7, #4]
 800d3c4:	6992      	ldr	r2, [r2, #24]
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	431a      	orrs	r2, r3
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d3d2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	2b30      	cmp	r3, #48	@ 0x30
 800d3da:	d003      	beq.n	800d3e4 <HAL_I2S_Init+0x198>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	2bb0      	cmp	r3, #176	@ 0xb0
 800d3e2:	d107      	bne.n	800d3f4 <HAL_I2S_Init+0x1a8>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	69da      	ldr	r2, [r3, #28]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d3f2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a1b      	ldr	r3, [r3, #32]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d161      	bne.n	800d4c0 <HAL_I2S_Init+0x274>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4a38      	ldr	r2, [pc, #224]	@ (800d4e0 <HAL_I2S_Init+0x294>)
 800d400:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a37      	ldr	r2, [pc, #220]	@ (800d4e4 <HAL_I2S_Init+0x298>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d101      	bne.n	800d410 <HAL_I2S_Init+0x1c4>
 800d40c:	4b36      	ldr	r3, [pc, #216]	@ (800d4e8 <HAL_I2S_Init+0x29c>)
 800d40e:	e001      	b.n	800d414 <HAL_I2S_Init+0x1c8>
 800d410:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d414:	69db      	ldr	r3, [r3, #28]
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	6812      	ldr	r2, [r2, #0]
 800d41a:	4932      	ldr	r1, [pc, #200]	@ (800d4e4 <HAL_I2S_Init+0x298>)
 800d41c:	428a      	cmp	r2, r1
 800d41e:	d101      	bne.n	800d424 <HAL_I2S_Init+0x1d8>
 800d420:	4a31      	ldr	r2, [pc, #196]	@ (800d4e8 <HAL_I2S_Init+0x29c>)
 800d422:	e001      	b.n	800d428 <HAL_I2S_Init+0x1dc>
 800d424:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800d428:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800d42c:	f023 030f 	bic.w	r3, r3, #15
 800d430:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a2b      	ldr	r2, [pc, #172]	@ (800d4e4 <HAL_I2S_Init+0x298>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d101      	bne.n	800d440 <HAL_I2S_Init+0x1f4>
 800d43c:	4b2a      	ldr	r3, [pc, #168]	@ (800d4e8 <HAL_I2S_Init+0x29c>)
 800d43e:	e001      	b.n	800d444 <HAL_I2S_Init+0x1f8>
 800d440:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d444:	2202      	movs	r2, #2
 800d446:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a25      	ldr	r2, [pc, #148]	@ (800d4e4 <HAL_I2S_Init+0x298>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d101      	bne.n	800d456 <HAL_I2S_Init+0x20a>
 800d452:	4b25      	ldr	r3, [pc, #148]	@ (800d4e8 <HAL_I2S_Init+0x29c>)
 800d454:	e001      	b.n	800d45a <HAL_I2S_Init+0x20e>
 800d456:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d45a:	69db      	ldr	r3, [r3, #28]
 800d45c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d466:	d003      	beq.n	800d470 <HAL_I2S_Init+0x224>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d103      	bne.n	800d478 <HAL_I2S_Init+0x22c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800d470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d474:	613b      	str	r3, [r7, #16]
 800d476:	e001      	b.n	800d47c <HAL_I2S_Init+0x230>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800d478:	2300      	movs	r3, #0
 800d47a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800d486:	4313      	orrs	r3, r2
 800d488:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800d490:	4313      	orrs	r3, r2
 800d492:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	699b      	ldr	r3, [r3, #24]
 800d498:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800d49a:	4313      	orrs	r3, r2
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	897b      	ldrh	r3, [r7, #10]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d4a8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a0d      	ldr	r2, [pc, #52]	@ (800d4e4 <HAL_I2S_Init+0x298>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d101      	bne.n	800d4b8 <HAL_I2S_Init+0x26c>
 800d4b4:	4b0c      	ldr	r3, [pc, #48]	@ (800d4e8 <HAL_I2S_Init+0x29c>)
 800d4b6:	e001      	b.n	800d4bc <HAL_I2S_Init+0x270>
 800d4b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d4bc:	897a      	ldrh	r2, [r7, #10]
 800d4be:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800d4ce:	2300      	movs	r3, #0
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3720      	adds	r7, #32
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	0800da55 	.word	0x0800da55
 800d4dc:	cccccccd 	.word	0xcccccccd
 800d4e0:	0800db69 	.word	0x0800db69
 800d4e4:	40003800 	.word	0x40003800
 800d4e8:	40003400 	.word	0x40003400

0800d4ec <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d101      	bne.n	800d4fe <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e01a      	b.n	800d534 <HAL_I2S_DeInit+0x48>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2202      	movs	r2, #2
 800d502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	69da      	ldr	r2, [r3, #28]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d514:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f000 f81a 	bl	800d550 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2200      	movs	r2, #0
 800d520:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_RESET;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d532:	2300      	movs	r3, #0
}
 800d534:	4618      	mov	r0, r3
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <HAL_I2S_MspInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 800d544:	bf00      	nop
 800d546:	370c      	adds	r7, #12
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <HAL_I2S_MspDeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_MspDeInit(I2S_HandleTypeDef *hi2s)
{
 800d550:	b480      	push	{r7}
 800d552:	b083      	sub	sp, #12
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspDeInit could be implemented in the user file
   */
}
 800d558:	bf00      	nop
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	4613      	mov	r3, r2
 800d570:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <HAL_I2S_Receive_DMA+0x1a>
 800d578:	88fb      	ldrh	r3, [r7, #6]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d101      	bne.n	800d582 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800d57e:	2301      	movs	r3, #1
 800d580:	e09d      	b.n	800d6be <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d001      	beq.n	800d592 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 800d58e:	2302      	movs	r3, #2
 800d590:	e095      	b.n	800d6be <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d101      	bne.n	800d5a2 <HAL_I2S_Receive_DMA+0x3e>
 800d59e:	2302      	movs	r3, #2
 800d5a0:	e08d      	b.n	800d6be <HAL_I2S_Receive_DMA+0x15a>
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	2204      	movs	r2, #4
 800d5ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	f003 0307 	and.w	r3, r3, #7
 800d5c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2b03      	cmp	r3, #3
 800d5ce:	d002      	beq.n	800d5d6 <HAL_I2S_Receive_DMA+0x72>
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	2b05      	cmp	r3, #5
 800d5d4:	d10a      	bne.n	800d5ec <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 800d5d6:	88fb      	ldrh	r3, [r7, #6]
 800d5d8:	005b      	lsls	r3, r3, #1
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 800d5e0:	88fb      	ldrh	r3, [r7, #6]
 800d5e2:	005b      	lsls	r3, r3, #1
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	865a      	strh	r2, [r3, #50]	@ 0x32
 800d5ea:	e005      	b.n	800d5f8 <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	88fa      	ldrh	r2, [r7, #6]
 800d5f0:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	88fa      	ldrh	r2, [r7, #6]
 800d5f6:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5fc:	4a32      	ldr	r2, [pc, #200]	@ (800d6c8 <HAL_I2S_Receive_DMA+0x164>)
 800d5fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d604:	4a31      	ldr	r2, [pc, #196]	@ (800d6cc <HAL_I2S_Receive_DMA+0x168>)
 800d606:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d60c:	4a30      	ldr	r2, [pc, #192]	@ (800d6d0 <HAL_I2S_Receive_DMA+0x16c>)
 800d60e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	69db      	ldr	r3, [r3, #28]
 800d616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d61a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d61e:	d10a      	bne.n	800d636 <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800d620:	2300      	movs	r3, #0
 800d622:	613b      	str	r3, [r7, #16]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	613b      	str	r3, [r7, #16]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	613b      	str	r3, [r7, #16]
 800d634:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	330c      	adds	r3, #12
 800d640:	4619      	mov	r1, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d646:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 800d64c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d64e:	f7fa fd8f 	bl	8008170 <HAL_DMA_Start_IT>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00f      	beq.n	800d678 <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d65c:	f043 0208 	orr.w	r2, r3, #8
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2201      	movs	r2, #1
 800d668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2200      	movs	r2, #0
 800d670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	e022      	b.n	800d6be <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d107      	bne.n	800d69e <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f042 0201 	orr.w	r2, r2, #1
 800d69c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	69db      	ldr	r3, [r3, #28]
 800d6a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d107      	bne.n	800d6bc <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	69da      	ldr	r2, [r3, #28]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d6ba:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 800d6bc:	2300      	movs	r3, #0
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3718      	adds	r7, #24
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	0800d933 	.word	0x0800d933
 800d6cc:	0800d8f1 	.word	0x0800d8f1
 800d6d0:	0800d94f 	.word	0x0800d94f

0800d6d4 <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d101      	bne.n	800d6ec <HAL_I2S_DMAPause+0x18>
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	e04a      	b.n	800d782 <HAL_I2S_DMAPause+0xae>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	2b03      	cmp	r3, #3
 800d6fe:	d108      	bne.n	800d712 <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	685a      	ldr	r2, [r3, #4]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f022 0202 	bic.w	r2, r2, #2
 800d70e:	605a      	str	r2, [r3, #4]
 800d710:	e032      	b.n	800d778 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	2b04      	cmp	r3, #4
 800d71c:	d108      	bne.n	800d730 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f022 0201 	bic.w	r2, r2, #1
 800d72c:	605a      	str	r2, [r3, #4]
 800d72e:	e023      	b.n	800d778 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d736:	b2db      	uxtb	r3, r3
 800d738:	2b05      	cmp	r3, #5
 800d73a:	d11d      	bne.n	800d778 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f022 0203 	bic.w	r2, r2, #3
 800d74a:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a0f      	ldr	r2, [pc, #60]	@ (800d790 <HAL_I2S_DMAPause+0xbc>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d101      	bne.n	800d75a <HAL_I2S_DMAPause+0x86>
 800d756:	4b0f      	ldr	r3, [pc, #60]	@ (800d794 <HAL_I2S_DMAPause+0xc0>)
 800d758:	e001      	b.n	800d75e <HAL_I2S_DMAPause+0x8a>
 800d75a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d75e:	685a      	ldr	r2, [r3, #4]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	490a      	ldr	r1, [pc, #40]	@ (800d790 <HAL_I2S_DMAPause+0xbc>)
 800d766:	428b      	cmp	r3, r1
 800d768:	d101      	bne.n	800d76e <HAL_I2S_DMAPause+0x9a>
 800d76a:	4b0a      	ldr	r3, [pc, #40]	@ (800d794 <HAL_I2S_DMAPause+0xc0>)
 800d76c:	e001      	b.n	800d772 <HAL_I2S_DMAPause+0x9e>
 800d76e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d772:	f022 0203 	bic.w	r2, r2, #3
 800d776:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d780:	2300      	movs	r3, #0
}
 800d782:	4618      	mov	r0, r3
 800d784:	370c      	adds	r7, #12
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop
 800d790:	40003800 	.word	0x40003800
 800d794:	40003400 	.word	0x40003400

0800d798 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d101      	bne.n	800d7b0 <HAL_I2S_DMAResume+0x18>
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	e07d      	b.n	800d8ac <HAL_I2S_DMAResume+0x114>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	2b03      	cmp	r3, #3
 800d7c2:	d108      	bne.n	800d7d6 <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	685a      	ldr	r2, [r3, #4]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f042 0202 	orr.w	r2, r2, #2
 800d7d2:	605a      	str	r2, [r3, #4]
 800d7d4:	e056      	b.n	800d884 <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	2b04      	cmp	r3, #4
 800d7e0:	d108      	bne.n	800d7f4 <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	685a      	ldr	r2, [r3, #4]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f042 0201 	orr.w	r2, r2, #1
 800d7f0:	605a      	str	r2, [r3, #4]
 800d7f2:	e047      	b.n	800d884 <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	2b05      	cmp	r3, #5
 800d7fe:	d141      	bne.n	800d884 <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	685a      	ldr	r2, [r3, #4]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f042 0203 	orr.w	r2, r2, #3
 800d80e:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a28      	ldr	r2, [pc, #160]	@ (800d8b8 <HAL_I2S_DMAResume+0x120>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d101      	bne.n	800d81e <HAL_I2S_DMAResume+0x86>
 800d81a:	4b28      	ldr	r3, [pc, #160]	@ (800d8bc <HAL_I2S_DMAResume+0x124>)
 800d81c:	e001      	b.n	800d822 <HAL_I2S_DMAResume+0x8a>
 800d81e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4923      	ldr	r1, [pc, #140]	@ (800d8b8 <HAL_I2S_DMAResume+0x120>)
 800d82a:	428b      	cmp	r3, r1
 800d82c:	d101      	bne.n	800d832 <HAL_I2S_DMAResume+0x9a>
 800d82e:	4b23      	ldr	r3, [pc, #140]	@ (800d8bc <HAL_I2S_DMAResume+0x124>)
 800d830:	e001      	b.n	800d836 <HAL_I2S_DMAResume+0x9e>
 800d832:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d836:	f042 0203 	orr.w	r2, r2, #3
 800d83a:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a1d      	ldr	r2, [pc, #116]	@ (800d8b8 <HAL_I2S_DMAResume+0x120>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d101      	bne.n	800d84a <HAL_I2S_DMAResume+0xb2>
 800d846:	4b1d      	ldr	r3, [pc, #116]	@ (800d8bc <HAL_I2S_DMAResume+0x124>)
 800d848:	e001      	b.n	800d84e <HAL_I2S_DMAResume+0xb6>
 800d84a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d84e:	69db      	ldr	r3, [r3, #28]
 800d850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d854:	2b00      	cmp	r3, #0
 800d856:	d115      	bne.n	800d884 <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a16      	ldr	r2, [pc, #88]	@ (800d8b8 <HAL_I2S_DMAResume+0x120>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d101      	bne.n	800d866 <HAL_I2S_DMAResume+0xce>
 800d862:	4b16      	ldr	r3, [pc, #88]	@ (800d8bc <HAL_I2S_DMAResume+0x124>)
 800d864:	e001      	b.n	800d86a <HAL_I2S_DMAResume+0xd2>
 800d866:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d86a:	69da      	ldr	r2, [r3, #28]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	4911      	ldr	r1, [pc, #68]	@ (800d8b8 <HAL_I2S_DMAResume+0x120>)
 800d872:	428b      	cmp	r3, r1
 800d874:	d101      	bne.n	800d87a <HAL_I2S_DMAResume+0xe2>
 800d876:	4b11      	ldr	r3, [pc, #68]	@ (800d8bc <HAL_I2S_DMAResume+0x124>)
 800d878:	e001      	b.n	800d87e <HAL_I2S_DMAResume+0xe6>
 800d87a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800d87e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d882:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	69db      	ldr	r3, [r3, #28]
 800d88a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d107      	bne.n	800d8a2 <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	69da      	ldr	r2, [r3, #28]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d8a0:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	40003800 	.word	0x40003800
 800d8bc:	40003400 	.word	0x40003400

0800d8c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d8e2:	b2db      	uxtb	r3, r3
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8fc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	69db      	ldr	r3, [r3, #28]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10e      	bne.n	800d924 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685a      	ldr	r2, [r3, #4]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f022 0201 	bic.w	r2, r2, #1
 800d914:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f7f7 fed7 	bl	80056d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800d92a:	bf00      	nop
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b084      	sub	sp, #16
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d93e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f7f7 fed3 	bl	80056ec <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800d946:	bf00      	nop
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b084      	sub	sp, #16
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d95a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	685a      	ldr	r2, [r3, #4]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f022 0203 	bic.w	r2, r2, #3
 800d96a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2200      	movs	r2, #0
 800d976:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2201      	movs	r2, #1
 800d97c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d984:	f043 0208 	orr.w	r2, r3, #8
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f7f7 feb7 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800d992:	bf00      	nop
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b082      	sub	sp, #8
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9a6:	881a      	ldrh	r2, [r3, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9b2:	1c9a      	adds	r2, r3, #2
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d10e      	bne.n	800d9ee <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	685a      	ldr	r2, [r3, #4]
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800d9de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7ff ff69 	bl	800d8c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800d9ee:	bf00      	nop
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b082      	sub	sp, #8
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68da      	ldr	r2, [r3, #12]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da08:	b292      	uxth	r2, r2
 800da0a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da10:	1c9a      	adds	r2, r3, #2
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	3b01      	subs	r3, #1
 800da1e:	b29a      	uxth	r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da28:	b29b      	uxth	r3, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d10e      	bne.n	800da4c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	685a      	ldr	r2, [r3, #4]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800da3c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7f7 fe46 	bl	80056d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800da4c:	bf00      	nop
 800da4e:	3708      	adds	r7, #8
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	689b      	ldr	r3, [r3, #8]
 800da62:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	2b04      	cmp	r3, #4
 800da6e:	d13a      	bne.n	800dae6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	2b01      	cmp	r3, #1
 800da78:	d109      	bne.n	800da8e <I2S_IRQHandler+0x3a>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da84:	2b40      	cmp	r3, #64	@ 0x40
 800da86:	d102      	bne.n	800da8e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7ff ffb4 	bl	800d9f6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da94:	2b40      	cmp	r3, #64	@ 0x40
 800da96:	d126      	bne.n	800dae6 <I2S_IRQHandler+0x92>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	f003 0320 	and.w	r3, r3, #32
 800daa2:	2b20      	cmp	r3, #32
 800daa4:	d11f      	bne.n	800dae6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	685a      	ldr	r2, [r3, #4]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800dab4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800dab6:	2300      	movs	r3, #0
 800dab8:	613b      	str	r3, [r7, #16]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	613b      	str	r3, [r7, #16]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	689b      	ldr	r3, [r3, #8]
 800dac8:	613b      	str	r3, [r7, #16]
 800daca:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dad8:	f043 0202 	orr.w	r2, r3, #2
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7f7 fe0d 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d136      	bne.n	800db60 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	f003 0302 	and.w	r3, r3, #2
 800daf8:	2b02      	cmp	r3, #2
 800dafa:	d109      	bne.n	800db10 <I2S_IRQHandler+0xbc>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db06:	2b80      	cmp	r3, #128	@ 0x80
 800db08:	d102      	bne.n	800db10 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7ff ff45 	bl	800d99a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	f003 0308 	and.w	r3, r3, #8
 800db16:	2b08      	cmp	r3, #8
 800db18:	d122      	bne.n	800db60 <I2S_IRQHandler+0x10c>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	f003 0320 	and.w	r3, r3, #32
 800db24:	2b20      	cmp	r3, #32
 800db26:	d11b      	bne.n	800db60 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800db36:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800db38:	2300      	movs	r3, #0
 800db3a:	60fb      	str	r3, [r7, #12]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	60fb      	str	r3, [r7, #12]
 800db44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2201      	movs	r2, #1
 800db4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db52:	f043 0204 	orr.w	r2, r3, #4
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f7f7 fdd0 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800db60:	bf00      	nop
 800db62:	3718      	adds	r7, #24
 800db64:	46bd      	mov	sp, r7
 800db66:	bd80      	pop	{r7, pc}

0800db68 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b088      	sub	sp, #32
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a92      	ldr	r2, [pc, #584]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d101      	bne.n	800db86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800db82:	4b92      	ldr	r3, [pc, #584]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800db84:	e001      	b.n	800db8a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800db86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a8b      	ldr	r2, [pc, #556]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d101      	bne.n	800dba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800dba0:	4b8a      	ldr	r3, [pc, #552]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800dba2:	e001      	b.n	800dba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800dba4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbb4:	d004      	beq.n	800dbc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f040 8099 	bne.w	800dcf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	f003 0302 	and.w	r3, r3, #2
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	d107      	bne.n	800dbda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d002      	beq.n	800dbda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 f925 	bl	800de24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	f003 0301 	and.w	r3, r3, #1
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d107      	bne.n	800dbf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f9c8 	bl	800df84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbfa:	2b40      	cmp	r3, #64	@ 0x40
 800dbfc:	d13a      	bne.n	800dc74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	f003 0320 	and.w	r3, r3, #32
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d035      	beq.n	800dc74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a6e      	ldr	r2, [pc, #440]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d101      	bne.n	800dc16 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800dc12:	4b6e      	ldr	r3, [pc, #440]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800dc14:	e001      	b.n	800dc1a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800dc16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4969      	ldr	r1, [pc, #420]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800dc22:	428b      	cmp	r3, r1
 800dc24:	d101      	bne.n	800dc2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800dc26:	4b69      	ldr	r3, [pc, #420]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800dc28:	e001      	b.n	800dc2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800dc2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dc2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800dc32:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685a      	ldr	r2, [r3, #4]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800dc42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800dc44:	2300      	movs	r3, #0
 800dc46:	60fb      	str	r3, [r7, #12]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	60fb      	str	r3, [r7, #12]
 800dc58:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc66:	f043 0202 	orr.w	r2, r3, #2
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7f7 fd46 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	f003 0308 	and.w	r3, r3, #8
 800dc7a:	2b08      	cmp	r3, #8
 800dc7c:	f040 80c3 	bne.w	800de06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	f003 0320 	and.w	r3, r3, #32
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f000 80bd 	beq.w	800de06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	685a      	ldr	r2, [r3, #4]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800dc9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a49      	ldr	r2, [pc, #292]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d101      	bne.n	800dcaa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800dca6:	4b49      	ldr	r3, [pc, #292]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800dca8:	e001      	b.n	800dcae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800dcaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dcae:	685a      	ldr	r2, [r3, #4]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4944      	ldr	r1, [pc, #272]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800dcb6:	428b      	cmp	r3, r1
 800dcb8:	d101      	bne.n	800dcbe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800dcba:	4b44      	ldr	r3, [pc, #272]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800dcbc:	e001      	b.n	800dcc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800dcbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dcc2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800dcc6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800dcc8:	2300      	movs	r3, #0
 800dcca:	60bb      	str	r3, [r7, #8]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	60bb      	str	r3, [r7, #8]
 800dcd4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dce2:	f043 0204 	orr.w	r2, r3, #4
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f7f7 fd08 	bl	8005700 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800dcf0:	e089      	b.n	800de06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	f003 0302 	and.w	r3, r3, #2
 800dcf8:	2b02      	cmp	r3, #2
 800dcfa:	d107      	bne.n	800dd0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d002      	beq.n	800dd0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 f8be 	bl	800de88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	f003 0301 	and.w	r3, r3, #1
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d107      	bne.n	800dd26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d002      	beq.n	800dd26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 f8fd 	bl	800df20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd2c:	2b40      	cmp	r3, #64	@ 0x40
 800dd2e:	d12f      	bne.n	800dd90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	f003 0320 	and.w	r3, r3, #32
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d02a      	beq.n	800dd90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	685a      	ldr	r2, [r3, #4]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800dd48:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a1e      	ldr	r2, [pc, #120]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d101      	bne.n	800dd58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800dd54:	4b1d      	ldr	r3, [pc, #116]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800dd56:	e001      	b.n	800dd5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800dd58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dd5c:	685a      	ldr	r2, [r3, #4]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4919      	ldr	r1, [pc, #100]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800dd64:	428b      	cmp	r3, r1
 800dd66:	d101      	bne.n	800dd6c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800dd68:	4b18      	ldr	r3, [pc, #96]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800dd6a:	e001      	b.n	800dd70 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800dd6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dd70:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800dd74:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2201      	movs	r2, #1
 800dd7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd82:	f043 0202 	orr.w	r2, r3, #2
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f7f7 fcb8 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800dd90:	69bb      	ldr	r3, [r7, #24]
 800dd92:	f003 0308 	and.w	r3, r3, #8
 800dd96:	2b08      	cmp	r3, #8
 800dd98:	d136      	bne.n	800de08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	f003 0320 	and.w	r3, r3, #32
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d031      	beq.n	800de08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a07      	ldr	r2, [pc, #28]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d101      	bne.n	800ddb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800ddae:	4b07      	ldr	r3, [pc, #28]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800ddb0:	e001      	b.n	800ddb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800ddb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800ddb6:	685a      	ldr	r2, [r3, #4]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4902      	ldr	r1, [pc, #8]	@ (800ddc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800ddbe:	428b      	cmp	r3, r1
 800ddc0:	d106      	bne.n	800ddd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800ddc2:	4b02      	ldr	r3, [pc, #8]	@ (800ddcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800ddc4:	e006      	b.n	800ddd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800ddc6:	bf00      	nop
 800ddc8:	40003800 	.word	0x40003800
 800ddcc:	40003400 	.word	0x40003400
 800ddd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800ddd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ddd8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800dde8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddf6:	f043 0204 	orr.w	r2, r3, #4
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7f7 fc7e 	bl	8005700 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800de04:	e000      	b.n	800de08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800de06:	bf00      	nop
}
 800de08:	bf00      	nop
 800de0a:	3720      	adds	r7, #32
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800de18:	bf00      	nop
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr

0800de24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de30:	1c99      	adds	r1, r3, #2
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	6251      	str	r1, [r2, #36]	@ 0x24
 800de36:	881a      	ldrh	r2, [r3, #0]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de42:	b29b      	uxth	r3, r3
 800de44:	3b01      	subs	r3, #1
 800de46:	b29a      	uxth	r2, r3
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de50:	b29b      	uxth	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d113      	bne.n	800de7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	685a      	ldr	r2, [r3, #4]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800de64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d106      	bne.n	800de7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2201      	movs	r2, #1
 800de74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7ff ffc9 	bl	800de10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800de7e:	bf00      	nop
 800de80:	3708      	adds	r7, #8
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
	...

0800de88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de94:	1c99      	adds	r1, r3, #2
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	6251      	str	r1, [r2, #36]	@ 0x24
 800de9a:	8819      	ldrh	r1, [r3, #0]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4a1d      	ldr	r2, [pc, #116]	@ (800df18 <I2SEx_TxISR_I2SExt+0x90>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d101      	bne.n	800deaa <I2SEx_TxISR_I2SExt+0x22>
 800dea6:	4b1d      	ldr	r3, [pc, #116]	@ (800df1c <I2SEx_TxISR_I2SExt+0x94>)
 800dea8:	e001      	b.n	800deae <I2SEx_TxISR_I2SExt+0x26>
 800deaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800deae:	460a      	mov	r2, r1
 800deb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	3b01      	subs	r3, #1
 800deba:	b29a      	uxth	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d121      	bne.n	800df0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a12      	ldr	r2, [pc, #72]	@ (800df18 <I2SEx_TxISR_I2SExt+0x90>)
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d101      	bne.n	800ded8 <I2SEx_TxISR_I2SExt+0x50>
 800ded4:	4b11      	ldr	r3, [pc, #68]	@ (800df1c <I2SEx_TxISR_I2SExt+0x94>)
 800ded6:	e001      	b.n	800dedc <I2SEx_TxISR_I2SExt+0x54>
 800ded8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dedc:	685a      	ldr	r2, [r3, #4]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	490d      	ldr	r1, [pc, #52]	@ (800df18 <I2SEx_TxISR_I2SExt+0x90>)
 800dee4:	428b      	cmp	r3, r1
 800dee6:	d101      	bne.n	800deec <I2SEx_TxISR_I2SExt+0x64>
 800dee8:	4b0c      	ldr	r3, [pc, #48]	@ (800df1c <I2SEx_TxISR_I2SExt+0x94>)
 800deea:	e001      	b.n	800def0 <I2SEx_TxISR_I2SExt+0x68>
 800deec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800def0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800def4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800defa:	b29b      	uxth	r3, r3
 800defc:	2b00      	cmp	r3, #0
 800defe:	d106      	bne.n	800df0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2201      	movs	r2, #1
 800df04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f7ff ff81 	bl	800de10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800df0e:	bf00      	nop
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	40003800 	.word	0x40003800
 800df1c:	40003400 	.word	0x40003400

0800df20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68d8      	ldr	r0, [r3, #12]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df32:	1c99      	adds	r1, r3, #2
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800df38:	b282      	uxth	r2, r0
 800df3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800df40:	b29b      	uxth	r3, r3
 800df42:	3b01      	subs	r3, #1
 800df44:	b29a      	uxth	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800df4e:	b29b      	uxth	r3, r3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d113      	bne.n	800df7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800df62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df68:	b29b      	uxth	r3, r3
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d106      	bne.n	800df7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2201      	movs	r2, #1
 800df72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7ff ff4a 	bl	800de10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800df7c:	bf00      	nop
 800df7e:	3708      	adds	r7, #8
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b082      	sub	sp, #8
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a20      	ldr	r2, [pc, #128]	@ (800e014 <I2SEx_RxISR_I2SExt+0x90>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d101      	bne.n	800df9a <I2SEx_RxISR_I2SExt+0x16>
 800df96:	4b20      	ldr	r3, [pc, #128]	@ (800e018 <I2SEx_RxISR_I2SExt+0x94>)
 800df98:	e001      	b.n	800df9e <I2SEx_RxISR_I2SExt+0x1a>
 800df9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800df9e:	68d8      	ldr	r0, [r3, #12]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfa4:	1c99      	adds	r1, r3, #2
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800dfaa:	b282      	uxth	r2, r0
 800dfac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d121      	bne.n	800e00a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4a12      	ldr	r2, [pc, #72]	@ (800e014 <I2SEx_RxISR_I2SExt+0x90>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d101      	bne.n	800dfd4 <I2SEx_RxISR_I2SExt+0x50>
 800dfd0:	4b11      	ldr	r3, [pc, #68]	@ (800e018 <I2SEx_RxISR_I2SExt+0x94>)
 800dfd2:	e001      	b.n	800dfd8 <I2SEx_RxISR_I2SExt+0x54>
 800dfd4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dfd8:	685a      	ldr	r2, [r3, #4]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	490d      	ldr	r1, [pc, #52]	@ (800e014 <I2SEx_RxISR_I2SExt+0x90>)
 800dfe0:	428b      	cmp	r3, r1
 800dfe2:	d101      	bne.n	800dfe8 <I2SEx_RxISR_I2SExt+0x64>
 800dfe4:	4b0c      	ldr	r3, [pc, #48]	@ (800e018 <I2SEx_RxISR_I2SExt+0x94>)
 800dfe6:	e001      	b.n	800dfec <I2SEx_RxISR_I2SExt+0x68>
 800dfe8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800dfec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800dff0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dff6:	b29b      	uxth	r3, r3
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d106      	bne.n	800e00a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff ff03 	bl	800de10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800e00a:	bf00      	nop
 800e00c:	3708      	adds	r7, #8
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	40003800 	.word	0x40003800
 800e018:	40003400 	.word	0x40003400

0800e01c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d101      	bne.n	800e02e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	e0bf      	b.n	800e1ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800e034:	b2db      	uxtb	r3, r3
 800e036:	2b00      	cmp	r3, #0
 800e038:	d106      	bne.n	800e048 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2200      	movs	r2, #0
 800e03e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f8ba 	bl	800e1bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2202      	movs	r2, #2
 800e04c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	699a      	ldr	r2, [r3, #24]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800e05e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6999      	ldr	r1, [r3, #24]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	685a      	ldr	r2, [r3, #4]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e074:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	691b      	ldr	r3, [r3, #16]
 800e07a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	430a      	orrs	r2, r1
 800e082:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	6899      	ldr	r1, [r3, #8]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	4b4a      	ldr	r3, [pc, #296]	@ (800e1b8 <HAL_LTDC_Init+0x19c>)
 800e090:	400b      	ands	r3, r1
 800e092:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	695b      	ldr	r3, [r3, #20]
 800e098:	041b      	lsls	r3, r3, #16
 800e09a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6899      	ldr	r1, [r3, #8]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	699a      	ldr	r2, [r3, #24]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	431a      	orrs	r2, r3
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	68d9      	ldr	r1, [r3, #12]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681a      	ldr	r2, [r3, #0]
 800e0bc:	4b3e      	ldr	r3, [pc, #248]	@ (800e1b8 <HAL_LTDC_Init+0x19c>)
 800e0be:	400b      	ands	r3, r1
 800e0c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	69db      	ldr	r3, [r3, #28]
 800e0c6:	041b      	lsls	r3, r3, #16
 800e0c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	68d9      	ldr	r1, [r3, #12]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a1a      	ldr	r2, [r3, #32]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	431a      	orrs	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	430a      	orrs	r2, r1
 800e0de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6919      	ldr	r1, [r3, #16]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	4b33      	ldr	r3, [pc, #204]	@ (800e1b8 <HAL_LTDC_Init+0x19c>)
 800e0ec:	400b      	ands	r3, r1
 800e0ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0f4:	041b      	lsls	r3, r3, #16
 800e0f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	6919      	ldr	r1, [r3, #16]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	431a      	orrs	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	430a      	orrs	r2, r1
 800e10c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	6959      	ldr	r1, [r3, #20]
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	4b27      	ldr	r3, [pc, #156]	@ (800e1b8 <HAL_LTDC_Init+0x19c>)
 800e11a:	400b      	ands	r3, r1
 800e11c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e122:	041b      	lsls	r3, r3, #16
 800e124:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	6959      	ldr	r1, [r3, #20]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	431a      	orrs	r2, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	430a      	orrs	r2, r1
 800e13a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800e142:	021b      	lsls	r3, r3, #8
 800e144:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e14c:	041b      	lsls	r3, r3, #16
 800e14e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800e15e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800e166:	68ba      	ldr	r2, [r7, #8]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	4313      	orrs	r3, r2
 800e16c:	687a      	ldr	r2, [r7, #4]
 800e16e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800e172:	431a      	orrs	r2, r3
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	430a      	orrs	r2, r1
 800e17a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f042 0206 	orr.w	r2, r2, #6
 800e18a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	699a      	ldr	r2, [r3, #24]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f042 0201 	orr.w	r2, r2, #1
 800e19a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	f000f800 	.word	0xf000f800

0800e1bc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800e1d0:	b5b0      	push	{r4, r5, r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d101      	bne.n	800e1ea <HAL_LTDC_ConfigLayer+0x1a>
 800e1e6:	2302      	movs	r3, #2
 800e1e8:	e02c      	b.n	800e244 <HAL_LTDC_ConfigLayer+0x74>
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2202      	movs	r2, #2
 800e1f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2134      	movs	r1, #52	@ 0x34
 800e200:	fb01 f303 	mul.w	r3, r1, r3
 800e204:	4413      	add	r3, r2
 800e206:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	4614      	mov	r4, r2
 800e20e:	461d      	mov	r5, r3
 800e210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e21a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e21c:	682b      	ldr	r3, [r5, #0]
 800e21e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	68b9      	ldr	r1, [r7, #8]
 800e224:	68f8      	ldr	r0, [r7, #12]
 800e226:	f000 f811 	bl	800e24c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	2201      	movs	r2, #1
 800e230:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2201      	movs	r2, #1
 800e236:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2200      	movs	r2, #0
 800e23e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800e242:	2300      	movs	r3, #0
}
 800e244:	4618      	mov	r0, r3
 800e246:	3710      	adds	r7, #16
 800e248:	46bd      	mov	sp, r7
 800e24a:	bdb0      	pop	{r4, r5, r7, pc}

0800e24c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b089      	sub	sp, #36	@ 0x24
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	685a      	ldr	r2, [r3, #4]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	68db      	ldr	r3, [r3, #12]
 800e262:	0c1b      	lsrs	r3, r3, #16
 800e264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e268:	4413      	add	r3, r2
 800e26a:	041b      	lsls	r3, r3, #16
 800e26c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	461a      	mov	r2, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	01db      	lsls	r3, r3, #7
 800e278:	4413      	add	r3, r2
 800e27a:	3384      	adds	r3, #132	@ 0x84
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	6812      	ldr	r2, [r2, #0]
 800e282:	4611      	mov	r1, r2
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	01d2      	lsls	r2, r2, #7
 800e288:	440a      	add	r2, r1
 800e28a:	3284      	adds	r2, #132	@ 0x84
 800e28c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800e290:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	0c1b      	lsrs	r3, r3, #16
 800e29e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e2a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e2a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	01db      	lsls	r3, r3, #7
 800e2b0:	440b      	add	r3, r1
 800e2b2:	3384      	adds	r3, #132	@ 0x84
 800e2b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e2ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	68da      	ldr	r2, [r3, #12]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e2ca:	4413      	add	r3, r2
 800e2cc:	041b      	lsls	r3, r3, #16
 800e2ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	01db      	lsls	r3, r3, #7
 800e2da:	4413      	add	r3, r2
 800e2dc:	3384      	adds	r3, #132	@ 0x84
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	68fa      	ldr	r2, [r7, #12]
 800e2e2:	6812      	ldr	r2, [r2, #0]
 800e2e4:	4611      	mov	r1, r2
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	01d2      	lsls	r2, r2, #7
 800e2ea:	440a      	add	r2, r1
 800e2ec:	3284      	adds	r2, #132	@ 0x84
 800e2ee:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800e2f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	689a      	ldr	r2, [r3, #8]
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e302:	4413      	add	r3, r2
 800e304:	1c5a      	adds	r2, r3, #1
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4619      	mov	r1, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	01db      	lsls	r3, r3, #7
 800e310:	440b      	add	r3, r1
 800e312:	3384      	adds	r3, #132	@ 0x84
 800e314:	4619      	mov	r1, r3
 800e316:	69fb      	ldr	r3, [r7, #28]
 800e318:	4313      	orrs	r3, r2
 800e31a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	461a      	mov	r2, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	01db      	lsls	r3, r3, #7
 800e326:	4413      	add	r3, r2
 800e328:	3384      	adds	r3, #132	@ 0x84
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	6812      	ldr	r2, [r2, #0]
 800e330:	4611      	mov	r1, r2
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	01d2      	lsls	r2, r2, #7
 800e336:	440a      	add	r2, r1
 800e338:	3284      	adds	r2, #132	@ 0x84
 800e33a:	f023 0307 	bic.w	r3, r3, #7
 800e33e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	461a      	mov	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	01db      	lsls	r3, r3, #7
 800e34a:	4413      	add	r3, r2
 800e34c:	3384      	adds	r3, #132	@ 0x84
 800e34e:	461a      	mov	r2, r3
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800e35c:	021b      	lsls	r3, r3, #8
 800e35e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800e366:	041b      	lsls	r3, r3, #16
 800e368:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	699b      	ldr	r3, [r3, #24]
 800e36e:	061b      	lsls	r3, r3, #24
 800e370:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	01db      	lsls	r3, r3, #7
 800e37c:	4413      	add	r3, r2
 800e37e:	3384      	adds	r3, #132	@ 0x84
 800e380:	699b      	ldr	r3, [r3, #24]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	461a      	mov	r2, r3
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	01db      	lsls	r3, r3, #7
 800e38c:	4413      	add	r3, r2
 800e38e:	3384      	adds	r3, #132	@ 0x84
 800e390:	461a      	mov	r2, r3
 800e392:	2300      	movs	r3, #0
 800e394:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e39c:	461a      	mov	r2, r3
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	431a      	orrs	r2, r3
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	431a      	orrs	r2, r3
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	01db      	lsls	r3, r3, #7
 800e3b0:	440b      	add	r3, r1
 800e3b2:	3384      	adds	r3, #132	@ 0x84
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	01db      	lsls	r3, r3, #7
 800e3c6:	4413      	add	r3, r2
 800e3c8:	3384      	adds	r3, #132	@ 0x84
 800e3ca:	695b      	ldr	r3, [r3, #20]
 800e3cc:	68fa      	ldr	r2, [r7, #12]
 800e3ce:	6812      	ldr	r2, [r2, #0]
 800e3d0:	4611      	mov	r1, r2
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	01d2      	lsls	r2, r2, #7
 800e3d6:	440a      	add	r2, r1
 800e3d8:	3284      	adds	r2, #132	@ 0x84
 800e3da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e3de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	01db      	lsls	r3, r3, #7
 800e3ea:	4413      	add	r3, r2
 800e3ec:	3384      	adds	r3, #132	@ 0x84
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	695b      	ldr	r3, [r3, #20]
 800e3f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	01db      	lsls	r3, r3, #7
 800e400:	4413      	add	r3, r2
 800e402:	3384      	adds	r3, #132	@ 0x84
 800e404:	69db      	ldr	r3, [r3, #28]
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	6812      	ldr	r2, [r2, #0]
 800e40a:	4611      	mov	r1, r2
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	01d2      	lsls	r2, r2, #7
 800e410:	440a      	add	r2, r1
 800e412:	3284      	adds	r2, #132	@ 0x84
 800e414:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800e418:	f023 0307 	bic.w	r3, r3, #7
 800e41c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	69da      	ldr	r2, [r3, #28]
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	6a1b      	ldr	r3, [r3, #32]
 800e426:	68f9      	ldr	r1, [r7, #12]
 800e428:	6809      	ldr	r1, [r1, #0]
 800e42a:	4608      	mov	r0, r1
 800e42c:	6879      	ldr	r1, [r7, #4]
 800e42e:	01c9      	lsls	r1, r1, #7
 800e430:	4401      	add	r1, r0
 800e432:	3184      	adds	r1, #132	@ 0x84
 800e434:	4313      	orrs	r3, r2
 800e436:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	461a      	mov	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	01db      	lsls	r3, r3, #7
 800e442:	4413      	add	r3, r2
 800e444:	3384      	adds	r3, #132	@ 0x84
 800e446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	461a      	mov	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	01db      	lsls	r3, r3, #7
 800e452:	4413      	add	r3, r2
 800e454:	3384      	adds	r3, #132	@ 0x84
 800e456:	461a      	mov	r2, r3
 800e458:	2300      	movs	r3, #0
 800e45a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	461a      	mov	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	01db      	lsls	r3, r3, #7
 800e466:	4413      	add	r3, r2
 800e468:	3384      	adds	r3, #132	@ 0x84
 800e46a:	461a      	mov	r2, r3
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e470:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	691b      	ldr	r3, [r3, #16]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d102      	bne.n	800e480 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800e47a:	2304      	movs	r3, #4
 800e47c:	61fb      	str	r3, [r7, #28]
 800e47e:	e01b      	b.n	800e4b8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	691b      	ldr	r3, [r3, #16]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d102      	bne.n	800e48e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800e488:	2303      	movs	r3, #3
 800e48a:	61fb      	str	r3, [r7, #28]
 800e48c:	e014      	b.n	800e4b8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	691b      	ldr	r3, [r3, #16]
 800e492:	2b04      	cmp	r3, #4
 800e494:	d00b      	beq.n	800e4ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d007      	beq.n	800e4ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800e4a2:	2b03      	cmp	r3, #3
 800e4a4:	d003      	beq.n	800e4ae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800e4aa:	2b07      	cmp	r3, #7
 800e4ac:	d102      	bne.n	800e4b4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800e4ae:	2302      	movs	r3, #2
 800e4b0:	61fb      	str	r3, [r7, #28]
 800e4b2:	e001      	b.n	800e4b8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	461a      	mov	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	01db      	lsls	r3, r3, #7
 800e4c2:	4413      	add	r3, r2
 800e4c4:	3384      	adds	r3, #132	@ 0x84
 800e4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	6812      	ldr	r2, [r2, #0]
 800e4cc:	4611      	mov	r1, r2
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	01d2      	lsls	r2, r2, #7
 800e4d2:	440a      	add	r2, r1
 800e4d4:	3284      	adds	r2, #132	@ 0x84
 800e4d6:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800e4da:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4e0:	69fa      	ldr	r2, [r7, #28]
 800e4e2:	fb02 f303 	mul.w	r3, r2, r3
 800e4e6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	6859      	ldr	r1, [r3, #4]
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	1acb      	subs	r3, r1, r3
 800e4f2:	69f9      	ldr	r1, [r7, #28]
 800e4f4:	fb01 f303 	mul.w	r3, r1, r3
 800e4f8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800e4fa:	68f9      	ldr	r1, [r7, #12]
 800e4fc:	6809      	ldr	r1, [r1, #0]
 800e4fe:	4608      	mov	r0, r1
 800e500:	6879      	ldr	r1, [r7, #4]
 800e502:	01c9      	lsls	r1, r1, #7
 800e504:	4401      	add	r1, r0
 800e506:	3184      	adds	r1, #132	@ 0x84
 800e508:	4313      	orrs	r3, r2
 800e50a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	461a      	mov	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	01db      	lsls	r3, r3, #7
 800e516:	4413      	add	r3, r2
 800e518:	3384      	adds	r3, #132	@ 0x84
 800e51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	6812      	ldr	r2, [r2, #0]
 800e520:	4611      	mov	r1, r2
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	01d2      	lsls	r2, r2, #7
 800e526:	440a      	add	r2, r1
 800e528:	3284      	adds	r2, #132	@ 0x84
 800e52a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800e52e:	f023 0307 	bic.w	r3, r3, #7
 800e532:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	461a      	mov	r2, r3
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	01db      	lsls	r3, r3, #7
 800e53e:	4413      	add	r3, r2
 800e540:	3384      	adds	r3, #132	@ 0x84
 800e542:	461a      	mov	r2, r3
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e548:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	461a      	mov	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	01db      	lsls	r3, r3, #7
 800e554:	4413      	add	r3, r2
 800e556:	3384      	adds	r3, #132	@ 0x84
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	68fa      	ldr	r2, [r7, #12]
 800e55c:	6812      	ldr	r2, [r2, #0]
 800e55e:	4611      	mov	r1, r2
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	01d2      	lsls	r2, r2, #7
 800e564:	440a      	add	r2, r1
 800e566:	3284      	adds	r2, #132	@ 0x84
 800e568:	f043 0301 	orr.w	r3, r3, #1
 800e56c:	6013      	str	r3, [r2, #0]
}
 800e56e:	bf00      	nop
 800e570:	3724      	adds	r7, #36	@ 0x24
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr

0800e57a <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800e57a:	b480      	push	{r7}
 800e57c:	b083      	sub	sp, #12
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
 800e582:	6039      	str	r1, [r7, #0]
  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

#if !defined(POLARITIES_INVERSION_UPDATED)
  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d101      	bne.n	800e590 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800e58c:	2200      	movs	r2, #0
 800e58e:	e001      	b.n	800e594 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800e590:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	6a1b      	ldr	r3, [r3, #32]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d102      	bne.n	800e5a6 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800e5a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800e5a4:	e000      	b.n	800e5a8 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	69db      	ldr	r3, [r3, #28]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d102      	bne.n	800e5ba <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800e5b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e5b8:	e000      	b.n	800e5bc <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
  hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29;
#endif /* POLARITIES_INVERSION_UPDATED */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e5c4:	1e5a      	subs	r2, r3, #1
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5d2:	4413      	add	r3, r2
 800e5d4:	1e5a      	subs	r2, r3, #1
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5e2:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800e5e8:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 800e5ea:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e5f8:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800e5fe:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e604:	4413      	add	r3, r2
 800e606:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	370c      	adds	r7, #12
 800e612:	46bd      	mov	sp, r7
 800e614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e618:	4770      	bx	lr
	...

0800e61c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800e622:	2300      	movs	r3, #0
 800e624:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800e626:	2300      	movs	r3, #0
 800e628:	603b      	str	r3, [r7, #0]
 800e62a:	4b20      	ldr	r3, [pc, #128]	@ (800e6ac <HAL_PWREx_EnableOverDrive+0x90>)
 800e62c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e62e:	4a1f      	ldr	r2, [pc, #124]	@ (800e6ac <HAL_PWREx_EnableOverDrive+0x90>)
 800e630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e634:	6413      	str	r3, [r2, #64]	@ 0x40
 800e636:	4b1d      	ldr	r3, [pc, #116]	@ (800e6ac <HAL_PWREx_EnableOverDrive+0x90>)
 800e638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e63a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e63e:	603b      	str	r3, [r7, #0]
 800e640:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800e642:	4b1b      	ldr	r3, [pc, #108]	@ (800e6b0 <HAL_PWREx_EnableOverDrive+0x94>)
 800e644:	2201      	movs	r2, #1
 800e646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e648:	f7f9 fb44 	bl	8007cd4 <HAL_GetTick>
 800e64c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e64e:	e009      	b.n	800e664 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e650:	f7f9 fb40 	bl	8007cd4 <HAL_GetTick>
 800e654:	4602      	mov	r2, r0
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e65e:	d901      	bls.n	800e664 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800e660:	2303      	movs	r3, #3
 800e662:	e01f      	b.n	800e6a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800e664:	4b13      	ldr	r3, [pc, #76]	@ (800e6b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e66c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e670:	d1ee      	bne.n	800e650 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800e672:	4b11      	ldr	r3, [pc, #68]	@ (800e6b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800e674:	2201      	movs	r2, #1
 800e676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800e678:	f7f9 fb2c 	bl	8007cd4 <HAL_GetTick>
 800e67c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e67e:	e009      	b.n	800e694 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800e680:	f7f9 fb28 	bl	8007cd4 <HAL_GetTick>
 800e684:	4602      	mov	r2, r0
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e68e:	d901      	bls.n	800e694 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800e690:	2303      	movs	r3, #3
 800e692:	e007      	b.n	800e6a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800e694:	4b07      	ldr	r3, [pc, #28]	@ (800e6b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e69c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e6a0:	d1ee      	bne.n	800e680 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	40023800 	.word	0x40023800
 800e6b0:	420e0040 	.word	0x420e0040
 800e6b4:	40007000 	.word	0x40007000
 800e6b8:	420e0044 	.word	0x420e0044

0800e6bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d101      	bne.n	800e6d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	e0cc      	b.n	800e86a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e6d0:	4b68      	ldr	r3, [pc, #416]	@ (800e874 <HAL_RCC_ClockConfig+0x1b8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f003 030f 	and.w	r3, r3, #15
 800e6d8:	683a      	ldr	r2, [r7, #0]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d90c      	bls.n	800e6f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e6de:	4b65      	ldr	r3, [pc, #404]	@ (800e874 <HAL_RCC_ClockConfig+0x1b8>)
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	b2d2      	uxtb	r2, r2
 800e6e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e6e6:	4b63      	ldr	r3, [pc, #396]	@ (800e874 <HAL_RCC_ClockConfig+0x1b8>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f003 030f 	and.w	r3, r3, #15
 800e6ee:	683a      	ldr	r2, [r7, #0]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d001      	beq.n	800e6f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	e0b8      	b.n	800e86a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f003 0302 	and.w	r3, r3, #2
 800e700:	2b00      	cmp	r3, #0
 800e702:	d020      	beq.n	800e746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f003 0304 	and.w	r3, r3, #4
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d005      	beq.n	800e71c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e710:	4b59      	ldr	r3, [pc, #356]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e712:	689b      	ldr	r3, [r3, #8]
 800e714:	4a58      	ldr	r2, [pc, #352]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e716:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e71a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f003 0308 	and.w	r3, r3, #8
 800e724:	2b00      	cmp	r3, #0
 800e726:	d005      	beq.n	800e734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e728:	4b53      	ldr	r3, [pc, #332]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	4a52      	ldr	r2, [pc, #328]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e72e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e734:	4b50      	ldr	r3, [pc, #320]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	689b      	ldr	r3, [r3, #8]
 800e740:	494d      	ldr	r1, [pc, #308]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e742:	4313      	orrs	r3, r2
 800e744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	f003 0301 	and.w	r3, r3, #1
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d044      	beq.n	800e7dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d107      	bne.n	800e76a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e75a:	4b47      	ldr	r3, [pc, #284]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e762:	2b00      	cmp	r3, #0
 800e764:	d119      	bne.n	800e79a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e766:	2301      	movs	r3, #1
 800e768:	e07f      	b.n	800e86a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	685b      	ldr	r3, [r3, #4]
 800e76e:	2b02      	cmp	r3, #2
 800e770:	d003      	beq.n	800e77a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e776:	2b03      	cmp	r3, #3
 800e778:	d107      	bne.n	800e78a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e77a:	4b3f      	ldr	r3, [pc, #252]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e782:	2b00      	cmp	r3, #0
 800e784:	d109      	bne.n	800e79a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e786:	2301      	movs	r3, #1
 800e788:	e06f      	b.n	800e86a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e78a:	4b3b      	ldr	r3, [pc, #236]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	f003 0302 	and.w	r3, r3, #2
 800e792:	2b00      	cmp	r3, #0
 800e794:	d101      	bne.n	800e79a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e796:	2301      	movs	r3, #1
 800e798:	e067      	b.n	800e86a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e79a:	4b37      	ldr	r3, [pc, #220]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	f023 0203 	bic.w	r2, r3, #3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	4934      	ldr	r1, [pc, #208]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e7ac:	f7f9 fa92 	bl	8007cd4 <HAL_GetTick>
 800e7b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7b2:	e00a      	b.n	800e7ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e7b4:	f7f9 fa8e 	bl	8007cd4 <HAL_GetTick>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d901      	bls.n	800e7ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e7c6:	2303      	movs	r3, #3
 800e7c8:	e04f      	b.n	800e86a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e7ca:	4b2b      	ldr	r3, [pc, #172]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e7cc:	689b      	ldr	r3, [r3, #8]
 800e7ce:	f003 020c 	and.w	r2, r3, #12
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d1eb      	bne.n	800e7b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e7dc:	4b25      	ldr	r3, [pc, #148]	@ (800e874 <HAL_RCC_ClockConfig+0x1b8>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f003 030f 	and.w	r3, r3, #15
 800e7e4:	683a      	ldr	r2, [r7, #0]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d20c      	bcs.n	800e804 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e7ea:	4b22      	ldr	r3, [pc, #136]	@ (800e874 <HAL_RCC_ClockConfig+0x1b8>)
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	b2d2      	uxtb	r2, r2
 800e7f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e7f2:	4b20      	ldr	r3, [pc, #128]	@ (800e874 <HAL_RCC_ClockConfig+0x1b8>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	f003 030f 	and.w	r3, r3, #15
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d001      	beq.n	800e804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e800:	2301      	movs	r3, #1
 800e802:	e032      	b.n	800e86a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f003 0304 	and.w	r3, r3, #4
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d008      	beq.n	800e822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e810:	4b19      	ldr	r3, [pc, #100]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	4916      	ldr	r1, [pc, #88]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e81e:	4313      	orrs	r3, r2
 800e820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f003 0308 	and.w	r3, r3, #8
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d009      	beq.n	800e842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e82e:	4b12      	ldr	r3, [pc, #72]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e830:	689b      	ldr	r3, [r3, #8]
 800e832:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	00db      	lsls	r3, r3, #3
 800e83c:	490e      	ldr	r1, [pc, #56]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e83e:	4313      	orrs	r3, r2
 800e840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e842:	f000 f821 	bl	800e888 <HAL_RCC_GetSysClockFreq>
 800e846:	4602      	mov	r2, r0
 800e848:	4b0b      	ldr	r3, [pc, #44]	@ (800e878 <HAL_RCC_ClockConfig+0x1bc>)
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	091b      	lsrs	r3, r3, #4
 800e84e:	f003 030f 	and.w	r3, r3, #15
 800e852:	490a      	ldr	r1, [pc, #40]	@ (800e87c <HAL_RCC_ClockConfig+0x1c0>)
 800e854:	5ccb      	ldrb	r3, [r1, r3]
 800e856:	fa22 f303 	lsr.w	r3, r2, r3
 800e85a:	4a09      	ldr	r2, [pc, #36]	@ (800e880 <HAL_RCC_ClockConfig+0x1c4>)
 800e85c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800e85e:	4b09      	ldr	r3, [pc, #36]	@ (800e884 <HAL_RCC_ClockConfig+0x1c8>)
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4618      	mov	r0, r3
 800e864:	f7f9 f9f2 	bl	8007c4c <HAL_InitTick>

  return HAL_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	40023c00 	.word	0x40023c00
 800e878:	40023800 	.word	0x40023800
 800e87c:	08021384 	.word	0x08021384
 800e880:	20000160 	.word	0x20000160
 800e884:	20000164 	.word	0x20000164

0800e888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e88c:	b094      	sub	sp, #80	@ 0x50
 800e88e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e890:	2300      	movs	r3, #0
 800e892:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800e894:	2300      	movs	r3, #0
 800e896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800e898:	2300      	movs	r3, #0
 800e89a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800e89c:	2300      	movs	r3, #0
 800e89e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e8a0:	4b79      	ldr	r3, [pc, #484]	@ (800ea88 <HAL_RCC_GetSysClockFreq+0x200>)
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	f003 030c 	and.w	r3, r3, #12
 800e8a8:	2b08      	cmp	r3, #8
 800e8aa:	d00d      	beq.n	800e8c8 <HAL_RCC_GetSysClockFreq+0x40>
 800e8ac:	2b08      	cmp	r3, #8
 800e8ae:	f200 80e1 	bhi.w	800ea74 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d002      	beq.n	800e8bc <HAL_RCC_GetSysClockFreq+0x34>
 800e8b6:	2b04      	cmp	r3, #4
 800e8b8:	d003      	beq.n	800e8c2 <HAL_RCC_GetSysClockFreq+0x3a>
 800e8ba:	e0db      	b.n	800ea74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e8bc:	4b73      	ldr	r3, [pc, #460]	@ (800ea8c <HAL_RCC_GetSysClockFreq+0x204>)
 800e8be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e8c0:	e0db      	b.n	800ea7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e8c2:	4b73      	ldr	r3, [pc, #460]	@ (800ea90 <HAL_RCC_GetSysClockFreq+0x208>)
 800e8c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e8c6:	e0d8      	b.n	800ea7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e8c8:	4b6f      	ldr	r3, [pc, #444]	@ (800ea88 <HAL_RCC_GetSysClockFreq+0x200>)
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e8d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e8d2:	4b6d      	ldr	r3, [pc, #436]	@ (800ea88 <HAL_RCC_GetSysClockFreq+0x200>)
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d063      	beq.n	800e9a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e8de:	4b6a      	ldr	r3, [pc, #424]	@ (800ea88 <HAL_RCC_GetSysClockFreq+0x200>)
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	099b      	lsrs	r3, r3, #6
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e8fa:	4622      	mov	r2, r4
 800e8fc:	462b      	mov	r3, r5
 800e8fe:	f04f 0000 	mov.w	r0, #0
 800e902:	f04f 0100 	mov.w	r1, #0
 800e906:	0159      	lsls	r1, r3, #5
 800e908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e90c:	0150      	lsls	r0, r2, #5
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	4621      	mov	r1, r4
 800e914:	1a51      	subs	r1, r2, r1
 800e916:	6139      	str	r1, [r7, #16]
 800e918:	4629      	mov	r1, r5
 800e91a:	eb63 0301 	sbc.w	r3, r3, r1
 800e91e:	617b      	str	r3, [r7, #20]
 800e920:	f04f 0200 	mov.w	r2, #0
 800e924:	f04f 0300 	mov.w	r3, #0
 800e928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e92c:	4659      	mov	r1, fp
 800e92e:	018b      	lsls	r3, r1, #6
 800e930:	4651      	mov	r1, sl
 800e932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e936:	4651      	mov	r1, sl
 800e938:	018a      	lsls	r2, r1, #6
 800e93a:	4651      	mov	r1, sl
 800e93c:	ebb2 0801 	subs.w	r8, r2, r1
 800e940:	4659      	mov	r1, fp
 800e942:	eb63 0901 	sbc.w	r9, r3, r1
 800e946:	f04f 0200 	mov.w	r2, #0
 800e94a:	f04f 0300 	mov.w	r3, #0
 800e94e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e95a:	4690      	mov	r8, r2
 800e95c:	4699      	mov	r9, r3
 800e95e:	4623      	mov	r3, r4
 800e960:	eb18 0303 	adds.w	r3, r8, r3
 800e964:	60bb      	str	r3, [r7, #8]
 800e966:	462b      	mov	r3, r5
 800e968:	eb49 0303 	adc.w	r3, r9, r3
 800e96c:	60fb      	str	r3, [r7, #12]
 800e96e:	f04f 0200 	mov.w	r2, #0
 800e972:	f04f 0300 	mov.w	r3, #0
 800e976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e97a:	4629      	mov	r1, r5
 800e97c:	024b      	lsls	r3, r1, #9
 800e97e:	4621      	mov	r1, r4
 800e980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e984:	4621      	mov	r1, r4
 800e986:	024a      	lsls	r2, r1, #9
 800e988:	4610      	mov	r0, r2
 800e98a:	4619      	mov	r1, r3
 800e98c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e98e:	2200      	movs	r2, #0
 800e990:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e992:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e998:	f7f1 fc82 	bl	80002a0 <__aeabi_uldivmod>
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e9a4:	e058      	b.n	800ea58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e9a6:	4b38      	ldr	r3, [pc, #224]	@ (800ea88 <HAL_RCC_GetSysClockFreq+0x200>)
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	099b      	lsrs	r3, r3, #6
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e9b6:	623b      	str	r3, [r7, #32]
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e9c0:	4642      	mov	r2, r8
 800e9c2:	464b      	mov	r3, r9
 800e9c4:	f04f 0000 	mov.w	r0, #0
 800e9c8:	f04f 0100 	mov.w	r1, #0
 800e9cc:	0159      	lsls	r1, r3, #5
 800e9ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e9d2:	0150      	lsls	r0, r2, #5
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4641      	mov	r1, r8
 800e9da:	ebb2 0a01 	subs.w	sl, r2, r1
 800e9de:	4649      	mov	r1, r9
 800e9e0:	eb63 0b01 	sbc.w	fp, r3, r1
 800e9e4:	f04f 0200 	mov.w	r2, #0
 800e9e8:	f04f 0300 	mov.w	r3, #0
 800e9ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e9f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e9f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e9f8:	ebb2 040a 	subs.w	r4, r2, sl
 800e9fc:	eb63 050b 	sbc.w	r5, r3, fp
 800ea00:	f04f 0200 	mov.w	r2, #0
 800ea04:	f04f 0300 	mov.w	r3, #0
 800ea08:	00eb      	lsls	r3, r5, #3
 800ea0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ea0e:	00e2      	lsls	r2, r4, #3
 800ea10:	4614      	mov	r4, r2
 800ea12:	461d      	mov	r5, r3
 800ea14:	4643      	mov	r3, r8
 800ea16:	18e3      	adds	r3, r4, r3
 800ea18:	603b      	str	r3, [r7, #0]
 800ea1a:	464b      	mov	r3, r9
 800ea1c:	eb45 0303 	adc.w	r3, r5, r3
 800ea20:	607b      	str	r3, [r7, #4]
 800ea22:	f04f 0200 	mov.w	r2, #0
 800ea26:	f04f 0300 	mov.w	r3, #0
 800ea2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ea2e:	4629      	mov	r1, r5
 800ea30:	028b      	lsls	r3, r1, #10
 800ea32:	4621      	mov	r1, r4
 800ea34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ea38:	4621      	mov	r1, r4
 800ea3a:	028a      	lsls	r2, r1, #10
 800ea3c:	4610      	mov	r0, r2
 800ea3e:	4619      	mov	r1, r3
 800ea40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea42:	2200      	movs	r2, #0
 800ea44:	61bb      	str	r3, [r7, #24]
 800ea46:	61fa      	str	r2, [r7, #28]
 800ea48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ea4c:	f7f1 fc28 	bl	80002a0 <__aeabi_uldivmod>
 800ea50:	4602      	mov	r2, r0
 800ea52:	460b      	mov	r3, r1
 800ea54:	4613      	mov	r3, r2
 800ea56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800ea58:	4b0b      	ldr	r3, [pc, #44]	@ (800ea88 <HAL_RCC_GetSysClockFreq+0x200>)
 800ea5a:	685b      	ldr	r3, [r3, #4]
 800ea5c:	0c1b      	lsrs	r3, r3, #16
 800ea5e:	f003 0303 	and.w	r3, r3, #3
 800ea62:	3301      	adds	r3, #1
 800ea64:	005b      	lsls	r3, r3, #1
 800ea66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800ea68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ea6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ea72:	e002      	b.n	800ea7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ea74:	4b05      	ldr	r3, [pc, #20]	@ (800ea8c <HAL_RCC_GetSysClockFreq+0x204>)
 800ea76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ea78:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ea7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3750      	adds	r7, #80	@ 0x50
 800ea80:	46bd      	mov	sp, r7
 800ea82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea86:	bf00      	nop
 800ea88:	40023800 	.word	0x40023800
 800ea8c:	00f42400 	.word	0x00f42400
 800ea90:	007a1200 	.word	0x007a1200

0800ea94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ea94:	b480      	push	{r7}
 800ea96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ea98:	4b03      	ldr	r3, [pc, #12]	@ (800eaa8 <HAL_RCC_GetHCLKFreq+0x14>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	20000160 	.word	0x20000160

0800eaac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800eab0:	f7ff fff0 	bl	800ea94 <HAL_RCC_GetHCLKFreq>
 800eab4:	4602      	mov	r2, r0
 800eab6:	4b05      	ldr	r3, [pc, #20]	@ (800eacc <HAL_RCC_GetPCLK1Freq+0x20>)
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	0a9b      	lsrs	r3, r3, #10
 800eabc:	f003 0307 	and.w	r3, r3, #7
 800eac0:	4903      	ldr	r1, [pc, #12]	@ (800ead0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800eac2:	5ccb      	ldrb	r3, [r1, r3]
 800eac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	40023800 	.word	0x40023800
 800ead0:	08021394 	.word	0x08021394

0800ead4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b088      	sub	sp, #32
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800eadc:	2300      	movs	r3, #0
 800eade:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800eae0:	2300      	movs	r3, #0
 800eae2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800eae4:	2300      	movs	r3, #0
 800eae6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800eae8:	2300      	movs	r3, #0
 800eaea:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800eaec:	2300      	movs	r3, #0
 800eaee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00a      	beq.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800eafc:	4b66      	ldr	r3, [pc, #408]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800eafe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb02:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb0a:	4963      	ldr	r1, [pc, #396]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00a      	beq.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800eb1e:	4b5e      	ldr	r3, [pc, #376]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800eb20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eb24:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb2c:	495a      	ldr	r1, [pc, #360]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d10b      	bne.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d105      	bne.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d075      	beq.n	800ec44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800eb58:	4b50      	ldr	r3, [pc, #320]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800eb5e:	f7f9 f8b9 	bl	8007cd4 <HAL_GetTick>
 800eb62:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800eb64:	e008      	b.n	800eb78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800eb66:	f7f9 f8b5 	bl	8007cd4 <HAL_GetTick>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	1ad3      	subs	r3, r2, r3
 800eb70:	2b02      	cmp	r3, #2
 800eb72:	d901      	bls.n	800eb78 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800eb74:	2303      	movs	r3, #3
 800eb76:	e1dc      	b.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800eb78:	4b47      	ldr	r3, [pc, #284]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d1f0      	bne.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d009      	beq.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	019a      	lsls	r2, r3, #6
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	071b      	lsls	r3, r3, #28
 800eb9c:	493e      	ldr	r1, [pc, #248]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f003 0302 	and.w	r3, r3, #2
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d01f      	beq.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ebb0:	4b39      	ldr	r3, [pc, #228]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ebb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ebb6:	0f1b      	lsrs	r3, r3, #28
 800ebb8:	f003 0307 	and.w	r3, r3, #7
 800ebbc:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	685b      	ldr	r3, [r3, #4]
 800ebc2:	019a      	lsls	r2, r3, #6
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	061b      	lsls	r3, r3, #24
 800ebca:	431a      	orrs	r2, r3
 800ebcc:	69bb      	ldr	r3, [r7, #24]
 800ebce:	071b      	lsls	r3, r3, #28
 800ebd0:	4931      	ldr	r1, [pc, #196]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ebd8:	4b2f      	ldr	r3, [pc, #188]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ebda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ebde:	f023 021f 	bic.w	r2, r3, #31
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a1b      	ldr	r3, [r3, #32]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	492b      	ldr	r1, [pc, #172]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ebea:	4313      	orrs	r3, r2
 800ebec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d00d      	beq.n	800ec18 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	019a      	lsls	r2, r3, #6
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	061b      	lsls	r3, r3, #24
 800ec08:	431a      	orrs	r2, r3
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	071b      	lsls	r3, r3, #28
 800ec10:	4921      	ldr	r1, [pc, #132]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ec12:	4313      	orrs	r3, r2
 800ec14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ec18:	4b20      	ldr	r3, [pc, #128]	@ (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ec1e:	f7f9 f859 	bl	8007cd4 <HAL_GetTick>
 800ec22:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ec24:	e008      	b.n	800ec38 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ec26:	f7f9 f855 	bl	8007cd4 <HAL_GetTick>
 800ec2a:	4602      	mov	r2, r0
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	1ad3      	subs	r3, r2, r3
 800ec30:	2b02      	cmp	r3, #2
 800ec32:	d901      	bls.n	800ec38 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ec34:	2303      	movs	r3, #3
 800ec36:	e17c      	b.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ec38:	4b17      	ldr	r3, [pc, #92]	@ (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d0f0      	beq.n	800ec26 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d112      	bne.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10c      	bne.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f000 80ce 	beq.w	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ec6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ec72:	f040 80c8 	bne.w	800ee06 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ec76:	4b0a      	ldr	r3, [pc, #40]	@ (800eca0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800ec78:	2200      	movs	r2, #0
 800ec7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ec7c:	f7f9 f82a 	bl	8007cd4 <HAL_GetTick>
 800ec80:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ec82:	e00f      	b.n	800eca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ec84:	f7f9 f826 	bl	8007cd4 <HAL_GetTick>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	1ad3      	subs	r3, r2, r3
 800ec8e:	2b02      	cmp	r3, #2
 800ec90:	d908      	bls.n	800eca4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ec92:	2303      	movs	r3, #3
 800ec94:	e14d      	b.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800ec96:	bf00      	nop
 800ec98:	40023800 	.word	0x40023800
 800ec9c:	42470068 	.word	0x42470068
 800eca0:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800eca4:	4ba5      	ldr	r3, [pc, #660]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ecac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ecb0:	d0e8      	beq.n	800ec84 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f003 0304 	and.w	r3, r3, #4
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d02e      	beq.n	800ed1c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ecbe:	4b9f      	ldr	r3, [pc, #636]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ecc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecc4:	0c1b      	lsrs	r3, r3, #16
 800ecc6:	f003 0303 	and.w	r3, r3, #3
 800ecca:	3301      	adds	r3, #1
 800eccc:	005b      	lsls	r3, r3, #1
 800ecce:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ecd0:	4b9a      	ldr	r3, [pc, #616]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ecd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ecd6:	0f1b      	lsrs	r3, r3, #28
 800ecd8:	f003 0307 	and.w	r3, r3, #7
 800ecdc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	691b      	ldr	r3, [r3, #16]
 800ece2:	019a      	lsls	r2, r3, #6
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	085b      	lsrs	r3, r3, #1
 800ece8:	3b01      	subs	r3, #1
 800ecea:	041b      	lsls	r3, r3, #16
 800ecec:	431a      	orrs	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	061b      	lsls	r3, r3, #24
 800ecf4:	431a      	orrs	r2, r3
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	071b      	lsls	r3, r3, #28
 800ecfa:	4990      	ldr	r1, [pc, #576]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ed02:	4b8e      	ldr	r3, [pc, #568]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ed04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed08:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed10:	3b01      	subs	r3, #1
 800ed12:	021b      	lsls	r3, r3, #8
 800ed14:	4989      	ldr	r1, [pc, #548]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ed16:	4313      	orrs	r3, r2
 800ed18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f003 0308 	and.w	r3, r3, #8
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d02c      	beq.n	800ed82 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ed28:	4b84      	ldr	r3, [pc, #528]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ed2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed2e:	0c1b      	lsrs	r3, r3, #16
 800ed30:	f003 0303 	and.w	r3, r3, #3
 800ed34:	3301      	adds	r3, #1
 800ed36:	005b      	lsls	r3, r3, #1
 800ed38:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ed3a:	4b80      	ldr	r3, [pc, #512]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ed3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed40:	0e1b      	lsrs	r3, r3, #24
 800ed42:	f003 030f 	and.w	r3, r3, #15
 800ed46:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	691b      	ldr	r3, [r3, #16]
 800ed4c:	019a      	lsls	r2, r3, #6
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	085b      	lsrs	r3, r3, #1
 800ed52:	3b01      	subs	r3, #1
 800ed54:	041b      	lsls	r3, r3, #16
 800ed56:	431a      	orrs	r2, r3
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	061b      	lsls	r3, r3, #24
 800ed5c:	431a      	orrs	r2, r3
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	69db      	ldr	r3, [r3, #28]
 800ed62:	071b      	lsls	r3, r3, #28
 800ed64:	4975      	ldr	r1, [pc, #468]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ed66:	4313      	orrs	r3, r2
 800ed68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ed6c:	4b73      	ldr	r3, [pc, #460]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ed6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed72:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed7a:	4970      	ldr	r1, [pc, #448]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d024      	beq.n	800edd8 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800ed92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed96:	d11f      	bne.n	800edd8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ed98:	4b68      	ldr	r3, [pc, #416]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ed9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed9e:	0e1b      	lsrs	r3, r3, #24
 800eda0:	f003 030f 	and.w	r3, r3, #15
 800eda4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800eda6:	4b65      	ldr	r3, [pc, #404]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eda8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800edac:	0f1b      	lsrs	r3, r3, #28
 800edae:	f003 0307 	and.w	r3, r3, #7
 800edb2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	691b      	ldr	r3, [r3, #16]
 800edb8:	019a      	lsls	r2, r3, #6
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	695b      	ldr	r3, [r3, #20]
 800edbe:	085b      	lsrs	r3, r3, #1
 800edc0:	3b01      	subs	r3, #1
 800edc2:	041b      	lsls	r3, r3, #16
 800edc4:	431a      	orrs	r2, r3
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	061b      	lsls	r3, r3, #24
 800edca:	431a      	orrs	r2, r3
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	071b      	lsls	r3, r3, #28
 800edd0:	495a      	ldr	r1, [pc, #360]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800edd2:	4313      	orrs	r3, r2
 800edd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800edd8:	4b59      	ldr	r3, [pc, #356]	@ (800ef40 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800edda:	2201      	movs	r2, #1
 800eddc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800edde:	f7f8 ff79 	bl	8007cd4 <HAL_GetTick>
 800ede2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ede4:	e008      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ede6:	f7f8 ff75 	bl	8007cd4 <HAL_GetTick>
 800edea:	4602      	mov	r2, r0
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	2b02      	cmp	r3, #2
 800edf2:	d901      	bls.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800edf4:	2303      	movs	r3, #3
 800edf6:	e09c      	b.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800edf8:	4b50      	ldr	r3, [pc, #320]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ee00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee04:	d1ef      	bne.n	800ede6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f003 0320 	and.w	r3, r3, #32
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 8083 	beq.w	800ef1a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ee14:	2300      	movs	r3, #0
 800ee16:	60bb      	str	r3, [r7, #8]
 800ee18:	4b48      	ldr	r3, [pc, #288]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ee1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee1c:	4a47      	ldr	r2, [pc, #284]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ee1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ee22:	6413      	str	r3, [r2, #64]	@ 0x40
 800ee24:	4b45      	ldr	r3, [pc, #276]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ee26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ee2c:	60bb      	str	r3, [r7, #8]
 800ee2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ee30:	4b44      	ldr	r3, [pc, #272]	@ (800ef44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a43      	ldr	r2, [pc, #268]	@ (800ef44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ee36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ee3a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ee3c:	f7f8 ff4a 	bl	8007cd4 <HAL_GetTick>
 800ee40:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800ee42:	e008      	b.n	800ee56 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee44:	f7f8 ff46 	bl	8007cd4 <HAL_GetTick>
 800ee48:	4602      	mov	r2, r0
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	1ad3      	subs	r3, r2, r3
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	d901      	bls.n	800ee56 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800ee52:	2303      	movs	r3, #3
 800ee54:	e06d      	b.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800ee56:	4b3b      	ldr	r3, [pc, #236]	@ (800ef44 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d0f0      	beq.n	800ee44 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ee62:	4b36      	ldr	r3, [pc, #216]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ee64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ee6a:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d02f      	beq.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ee7a:	69ba      	ldr	r2, [r7, #24]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d028      	beq.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ee80:	4b2e      	ldr	r3, [pc, #184]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ee82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee88:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ee8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ee90:	4b2d      	ldr	r3, [pc, #180]	@ (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ee92:	2200      	movs	r2, #0
 800ee94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ee96:	4a29      	ldr	r2, [pc, #164]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ee98:	69bb      	ldr	r3, [r7, #24]
 800ee9a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ee9c:	4b27      	ldr	r3, [pc, #156]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ee9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eea0:	f003 0301 	and.w	r3, r3, #1
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d114      	bne.n	800eed2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800eea8:	f7f8 ff14 	bl	8007cd4 <HAL_GetTick>
 800eeac:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eeae:	e00a      	b.n	800eec6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eeb0:	f7f8 ff10 	bl	8007cd4 <HAL_GetTick>
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	1ad3      	subs	r3, r2, r3
 800eeba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d901      	bls.n	800eec6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800eec2:	2303      	movs	r3, #3
 800eec4:	e035      	b.n	800ef32 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800eec6:	4b1d      	ldr	r3, [pc, #116]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eeca:	f003 0302 	and.w	r3, r3, #2
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d0ee      	beq.n	800eeb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eeda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eede:	d10d      	bne.n	800eefc <HAL_RCCEx_PeriphCLKConfig+0x428>
 800eee0:	4b16      	ldr	r3, [pc, #88]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeec:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800eef0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eef4:	4911      	ldr	r1, [pc, #68]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eef6:	4313      	orrs	r3, r2
 800eef8:	608b      	str	r3, [r1, #8]
 800eefa:	e005      	b.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800eefc:	4b0f      	ldr	r3, [pc, #60]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	4a0e      	ldr	r2, [pc, #56]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ef02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800ef06:	6093      	str	r3, [r2, #8]
 800ef08:	4b0c      	ldr	r3, [pc, #48]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ef0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef14:	4909      	ldr	r1, [pc, #36]	@ (800ef3c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ef16:	4313      	orrs	r3, r2
 800ef18:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f003 0310 	and.w	r3, r3, #16
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d004      	beq.n	800ef30 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ef2c:	4b07      	ldr	r3, [pc, #28]	@ (800ef4c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800ef2e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ef30:	2300      	movs	r3, #0
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3720      	adds	r7, #32
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	40023800 	.word	0x40023800
 800ef40:	42470070 	.word	0x42470070
 800ef44:	40007000 	.word	0x40007000
 800ef48:	42470e40 	.word	0x42470e40
 800ef4c:	424711e0 	.word	0x424711e0

0800ef50 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  *         will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S        | RCC_PERIPHCLK_SAI_PLLSAI | \
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f240 12bf 	movw	r2, #447	@ 0x1bf
 800ef5e:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_SAI_PLLI2S | RCC_PERIPHCLK_LTDC       | \
                                        RCC_PERIPHCLK_TIM        | RCC_PERIPHCLK_RTC        | \
                                        RCC_PERIPHCLK_CLK48       | RCC_PERIPHCLK_SDIO;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800ef60:	4b3b      	ldr	r3, [pc, #236]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800ef62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef66:	099b      	lsrs	r3, r3, #6
 800ef68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ef70:	4b37      	ldr	r3, [pc, #220]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800ef72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef76:	0f1b      	lsrs	r3, r3, #28
 800ef78:	f003 0207 	and.w	r2, r3, #7
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ef80:	4b33      	ldr	r3, [pc, #204]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800ef82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef86:	0e1b      	lsrs	r3, r3, #24
 800ef88:	f003 020f 	and.w	r2, r3, #15
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	60da      	str	r2, [r3, #12]
  /* Get the PLLSAI Clock configuration --------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800ef90:	4b2f      	ldr	r3, [pc, #188]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800ef92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ef96:	099b      	lsrs	r3, r3, #6
 800ef98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800efa0:	4b2b      	ldr	r3, [pc, #172]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800efa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800efa6:	0f1b      	lsrs	r3, r3, #28
 800efa8:	f003 0207 	and.w	r2, r3, #7
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800efb0:	4b27      	ldr	r3, [pc, #156]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800efb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800efb6:	0e1b      	lsrs	r3, r3, #24
 800efb8:	f003 020f 	and.w	r2, r3, #15
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	619a      	str	r2, [r3, #24]
  /* Get the PLLSAI/PLLI2S division factors ----------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) >> RCC_DCKCFGR_PLLI2SDIVQ_Pos);
 800efc0:	4b23      	ldr	r3, [pc, #140]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800efc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efc6:	f003 021f 	and.w	r2, r3, #31
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> RCC_DCKCFGR_PLLSAIDIVQ_Pos);
 800efce:	4b20      	ldr	r3, [pc, #128]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800efd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efd4:	0a1b      	lsrs	r3, r3, #8
 800efd6:	f003 021f 	and.w	r2, r3, #31
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivR = (uint32_t)(RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVR);
 800efde:	4b1c      	ldr	r3, [pc, #112]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800efe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800efe4:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800efec:	4b18      	ldr	r3, [pc, #96]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800eff4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800eff6:	4b16      	ldr	r3, [pc, #88]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800eff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800effa:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	431a      	orrs	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the CLK48 clock configuration -------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800f006:	4b12      	ldr	r3, [pc, #72]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800f008:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f00c:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the SDIO clock configuration ----------------------------------------*/
  PeriphClkInit->SdioClockSelection = __HAL_RCC_GET_SDIO_SOURCE();
 800f014:	4b0e      	ldr	r3, [pc, #56]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800f016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f01a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 800f022:	4b0b      	ldr	r3, [pc, #44]	@ (800f050 <HAL_RCCEx_GetPeriphCLKConfig+0x100>)
 800f024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f028:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d104      	bne.n	800f03a <HAL_RCCEx_GetPeriphCLKConfig+0xea>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2200      	movs	r2, #0
 800f034:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800f038:	e003      	b.n	800f042 <HAL_RCCEx_GetPeriphCLKConfig+0xf2>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2201      	movs	r2, #1
 800f03e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 800f042:	bf00      	nop
 800f044:	3714      	adds	r7, #20
 800f046:	46bd      	mov	sp, r7
 800f048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04c:	4770      	bx	lr
 800f04e:	bf00      	nop
 800f050:	40023800 	.word	0x40023800

0800f054 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800f054:	b480      	push	{r7}
 800f056:	b087      	sub	sp, #28
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800f05c:	2300      	movs	r3, #0
 800f05e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800f060:	2300      	movs	r3, #0
 800f062:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800f064:	2300      	movs	r3, #0
 800f066:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800f068:	2300      	movs	r3, #0
 800f06a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d13f      	bne.n	800f0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800f072:	4b24      	ldr	r3, [pc, #144]	@ (800f104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f074:	689b      	ldr	r3, [r3, #8]
 800f076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f07a:	60fb      	str	r3, [r7, #12]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d006      	beq.n	800f090 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f088:	d12f      	bne.n	800f0ea <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800f08a:	4b1f      	ldr	r3, [pc, #124]	@ (800f108 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800f08c:	617b      	str	r3, [r7, #20]
          break;
 800f08e:	e02f      	b.n	800f0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
        case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800f090:	4b1c      	ldr	r3, [pc, #112]	@ (800f104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f092:	685b      	ldr	r3, [r3, #4]
 800f094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f098:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f09c:	d108      	bne.n	800f0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800f09e:	4b19      	ldr	r3, [pc, #100]	@ (800f104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f0a6:	4a19      	ldr	r2, [pc, #100]	@ (800f10c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800f0a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0ac:	613b      	str	r3, [r7, #16]
 800f0ae:	e007      	b.n	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800f0b0:	4b14      	ldr	r3, [pc, #80]	@ (800f104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f0b8:	4a15      	ldr	r2, [pc, #84]	@ (800f110 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800f0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0be:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800f0c0:	4b10      	ldr	r3, [pc, #64]	@ (800f104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f0c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0c6:	099b      	lsrs	r3, r3, #6
 800f0c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f0cc:	693b      	ldr	r3, [r7, #16]
 800f0ce:	fb02 f303 	mul.w	r3, r2, r3
 800f0d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800f0d4:	4b0b      	ldr	r3, [pc, #44]	@ (800f104 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800f0d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0da:	0f1b      	lsrs	r3, r3, #28
 800f0dc:	f003 0307 	and.w	r3, r3, #7
 800f0e0:	68ba      	ldr	r2, [r7, #8]
 800f0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0e6:	617b      	str	r3, [r7, #20]
          break;
 800f0e8:	e002      	b.n	800f0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	617b      	str	r3, [r7, #20]
          break;
 800f0ee:	bf00      	nop
        }
      }
      break;
 800f0f0:	e000      	b.n	800f0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800f0f2:	bf00      	nop
    }
  }
  return frequency;
 800f0f4:	697b      	ldr	r3, [r7, #20]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	371c      	adds	r7, #28
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	40023800 	.word	0x40023800
 800f108:	00bb8000 	.word	0x00bb8000
 800f10c:	007a1200 	.word	0x007a1200
 800f110:	00f42400 	.word	0x00f42400

0800f114 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b086      	sub	sp, #24
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d101      	bne.n	800f126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f122:	2301      	movs	r3, #1
 800f124:	e273      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f003 0301 	and.w	r3, r3, #1
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d075      	beq.n	800f21e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800f132:	4b88      	ldr	r3, [pc, #544]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	f003 030c 	and.w	r3, r3, #12
 800f13a:	2b04      	cmp	r3, #4
 800f13c:	d00c      	beq.n	800f158 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f13e:	4b85      	ldr	r3, [pc, #532]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f140:	689b      	ldr	r3, [r3, #8]
 800f142:	f003 030c 	and.w	r3, r3, #12
        || \
 800f146:	2b08      	cmp	r3, #8
 800f148:	d112      	bne.n	800f170 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800f14a:	4b82      	ldr	r3, [pc, #520]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f14c:	685b      	ldr	r3, [r3, #4]
 800f14e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800f156:	d10b      	bne.n	800f170 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f158:	4b7e      	ldr	r3, [pc, #504]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f160:	2b00      	cmp	r3, #0
 800f162:	d05b      	beq.n	800f21c <HAL_RCC_OscConfig+0x108>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d157      	bne.n	800f21c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800f16c:	2301      	movs	r3, #1
 800f16e:	e24e      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f178:	d106      	bne.n	800f188 <HAL_RCC_OscConfig+0x74>
 800f17a:	4b76      	ldr	r3, [pc, #472]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	4a75      	ldr	r2, [pc, #468]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f184:	6013      	str	r3, [r2, #0]
 800f186:	e01d      	b.n	800f1c4 <HAL_RCC_OscConfig+0xb0>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f190:	d10c      	bne.n	800f1ac <HAL_RCC_OscConfig+0x98>
 800f192:	4b70      	ldr	r3, [pc, #448]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a6f      	ldr	r2, [pc, #444]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f19c:	6013      	str	r3, [r2, #0]
 800f19e:	4b6d      	ldr	r3, [pc, #436]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4a6c      	ldr	r2, [pc, #432]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f1a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f1a8:	6013      	str	r3, [r2, #0]
 800f1aa:	e00b      	b.n	800f1c4 <HAL_RCC_OscConfig+0xb0>
 800f1ac:	4b69      	ldr	r3, [pc, #420]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a68      	ldr	r2, [pc, #416]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f1b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f1b6:	6013      	str	r3, [r2, #0]
 800f1b8:	4b66      	ldr	r3, [pc, #408]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4a65      	ldr	r2, [pc, #404]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f1be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f1c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d013      	beq.n	800f1f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1cc:	f7f8 fd82 	bl	8007cd4 <HAL_GetTick>
 800f1d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f1d2:	e008      	b.n	800f1e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f1d4:	f7f8 fd7e 	bl	8007cd4 <HAL_GetTick>
 800f1d8:	4602      	mov	r2, r0
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	1ad3      	subs	r3, r2, r3
 800f1de:	2b64      	cmp	r3, #100	@ 0x64
 800f1e0:	d901      	bls.n	800f1e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800f1e2:	2303      	movs	r3, #3
 800f1e4:	e213      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f1e6:	4b5b      	ldr	r3, [pc, #364]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d0f0      	beq.n	800f1d4 <HAL_RCC_OscConfig+0xc0>
 800f1f2:	e014      	b.n	800f21e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1f4:	f7f8 fd6e 	bl	8007cd4 <HAL_GetTick>
 800f1f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f1fa:	e008      	b.n	800f20e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f1fc:	f7f8 fd6a 	bl	8007cd4 <HAL_GetTick>
 800f200:	4602      	mov	r2, r0
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	2b64      	cmp	r3, #100	@ 0x64
 800f208:	d901      	bls.n	800f20e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f20a:	2303      	movs	r3, #3
 800f20c:	e1ff      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800f20e:	4b51      	ldr	r3, [pc, #324]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f216:	2b00      	cmp	r3, #0
 800f218:	d1f0      	bne.n	800f1fc <HAL_RCC_OscConfig+0xe8>
 800f21a:	e000      	b.n	800f21e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f21c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f003 0302 	and.w	r3, r3, #2
 800f226:	2b00      	cmp	r3, #0
 800f228:	d063      	beq.n	800f2f2 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800f22a:	4b4a      	ldr	r3, [pc, #296]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f22c:	689b      	ldr	r3, [r3, #8]
 800f22e:	f003 030c 	and.w	r3, r3, #12
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00b      	beq.n	800f24e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f236:	4b47      	ldr	r3, [pc, #284]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	f003 030c 	and.w	r3, r3, #12
        || \
 800f23e:	2b08      	cmp	r3, #8
 800f240:	d11c      	bne.n	800f27c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800f242:	4b44      	ldr	r3, [pc, #272]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d116      	bne.n	800f27c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f24e:	4b41      	ldr	r3, [pc, #260]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f003 0302 	and.w	r3, r3, #2
 800f256:	2b00      	cmp	r3, #0
 800f258:	d005      	beq.n	800f266 <HAL_RCC_OscConfig+0x152>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d001      	beq.n	800f266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f262:	2301      	movs	r3, #1
 800f264:	e1d3      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f266:	4b3b      	ldr	r3, [pc, #236]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	691b      	ldr	r3, [r3, #16]
 800f272:	00db      	lsls	r3, r3, #3
 800f274:	4937      	ldr	r1, [pc, #220]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f276:	4313      	orrs	r3, r2
 800f278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f27a:	e03a      	b.n	800f2f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d020      	beq.n	800f2c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f284:	4b34      	ldr	r3, [pc, #208]	@ (800f358 <HAL_RCC_OscConfig+0x244>)
 800f286:	2201      	movs	r2, #1
 800f288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f28a:	f7f8 fd23 	bl	8007cd4 <HAL_GetTick>
 800f28e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f290:	e008      	b.n	800f2a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f292:	f7f8 fd1f 	bl	8007cd4 <HAL_GetTick>
 800f296:	4602      	mov	r2, r0
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	d901      	bls.n	800f2a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f2a0:	2303      	movs	r3, #3
 800f2a2:	e1b4      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f2a4:	4b2b      	ldr	r3, [pc, #172]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f003 0302 	and.w	r3, r3, #2
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d0f0      	beq.n	800f292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f2b0:	4b28      	ldr	r3, [pc, #160]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	00db      	lsls	r3, r3, #3
 800f2be:	4925      	ldr	r1, [pc, #148]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	600b      	str	r3, [r1, #0]
 800f2c4:	e015      	b.n	800f2f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f2c6:	4b24      	ldr	r3, [pc, #144]	@ (800f358 <HAL_RCC_OscConfig+0x244>)
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2cc:	f7f8 fd02 	bl	8007cd4 <HAL_GetTick>
 800f2d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f2d2:	e008      	b.n	800f2e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f2d4:	f7f8 fcfe 	bl	8007cd4 <HAL_GetTick>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d901      	bls.n	800f2e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f2e2:	2303      	movs	r3, #3
 800f2e4:	e193      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f2e6:	4b1b      	ldr	r3, [pc, #108]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f003 0302 	and.w	r3, r3, #2
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d1f0      	bne.n	800f2d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	f003 0308 	and.w	r3, r3, #8
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d036      	beq.n	800f36c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	695b      	ldr	r3, [r3, #20]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d016      	beq.n	800f334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f306:	4b15      	ldr	r3, [pc, #84]	@ (800f35c <HAL_RCC_OscConfig+0x248>)
 800f308:	2201      	movs	r2, #1
 800f30a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f30c:	f7f8 fce2 	bl	8007cd4 <HAL_GetTick>
 800f310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f312:	e008      	b.n	800f326 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f314:	f7f8 fcde 	bl	8007cd4 <HAL_GetTick>
 800f318:	4602      	mov	r2, r0
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	1ad3      	subs	r3, r2, r3
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d901      	bls.n	800f326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f322:	2303      	movs	r3, #3
 800f324:	e173      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f326:	4b0b      	ldr	r3, [pc, #44]	@ (800f354 <HAL_RCC_OscConfig+0x240>)
 800f328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f32a:	f003 0302 	and.w	r3, r3, #2
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d0f0      	beq.n	800f314 <HAL_RCC_OscConfig+0x200>
 800f332:	e01b      	b.n	800f36c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f334:	4b09      	ldr	r3, [pc, #36]	@ (800f35c <HAL_RCC_OscConfig+0x248>)
 800f336:	2200      	movs	r2, #0
 800f338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f33a:	f7f8 fccb 	bl	8007cd4 <HAL_GetTick>
 800f33e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f340:	e00e      	b.n	800f360 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f342:	f7f8 fcc7 	bl	8007cd4 <HAL_GetTick>
 800f346:	4602      	mov	r2, r0
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	1ad3      	subs	r3, r2, r3
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	d907      	bls.n	800f360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f350:	2303      	movs	r3, #3
 800f352:	e15c      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
 800f354:	40023800 	.word	0x40023800
 800f358:	42470000 	.word	0x42470000
 800f35c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f360:	4b8a      	ldr	r3, [pc, #552]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f364:	f003 0302 	and.w	r3, r3, #2
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d1ea      	bne.n	800f342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f003 0304 	and.w	r3, r3, #4
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 8097 	beq.w	800f4a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f37a:	2300      	movs	r3, #0
 800f37c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f37e:	4b83      	ldr	r3, [pc, #524]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f386:	2b00      	cmp	r3, #0
 800f388:	d10f      	bne.n	800f3aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f38a:	2300      	movs	r3, #0
 800f38c:	60bb      	str	r3, [r7, #8]
 800f38e:	4b7f      	ldr	r3, [pc, #508]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f392:	4a7e      	ldr	r2, [pc, #504]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f398:	6413      	str	r3, [r2, #64]	@ 0x40
 800f39a:	4b7c      	ldr	r3, [pc, #496]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f39c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f39e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f3a2:	60bb      	str	r3, [r7, #8]
 800f3a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f3aa:	4b79      	ldr	r3, [pc, #484]	@ (800f590 <HAL_RCC_OscConfig+0x47c>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d118      	bne.n	800f3e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f3b6:	4b76      	ldr	r3, [pc, #472]	@ (800f590 <HAL_RCC_OscConfig+0x47c>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a75      	ldr	r2, [pc, #468]	@ (800f590 <HAL_RCC_OscConfig+0x47c>)
 800f3bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f3c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f3c2:	f7f8 fc87 	bl	8007cd4 <HAL_GetTick>
 800f3c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f3c8:	e008      	b.n	800f3dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f3ca:	f7f8 fc83 	bl	8007cd4 <HAL_GetTick>
 800f3ce:	4602      	mov	r2, r0
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d901      	bls.n	800f3dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f3d8:	2303      	movs	r3, #3
 800f3da:	e118      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f3dc:	4b6c      	ldr	r3, [pc, #432]	@ (800f590 <HAL_RCC_OscConfig+0x47c>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d0f0      	beq.n	800f3ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	689b      	ldr	r3, [r3, #8]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d106      	bne.n	800f3fe <HAL_RCC_OscConfig+0x2ea>
 800f3f0:	4b66      	ldr	r3, [pc, #408]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f3f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3f4:	4a65      	ldr	r2, [pc, #404]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f3f6:	f043 0301 	orr.w	r3, r3, #1
 800f3fa:	6713      	str	r3, [r2, #112]	@ 0x70
 800f3fc:	e01c      	b.n	800f438 <HAL_RCC_OscConfig+0x324>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	689b      	ldr	r3, [r3, #8]
 800f402:	2b05      	cmp	r3, #5
 800f404:	d10c      	bne.n	800f420 <HAL_RCC_OscConfig+0x30c>
 800f406:	4b61      	ldr	r3, [pc, #388]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f40a:	4a60      	ldr	r2, [pc, #384]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f40c:	f043 0304 	orr.w	r3, r3, #4
 800f410:	6713      	str	r3, [r2, #112]	@ 0x70
 800f412:	4b5e      	ldr	r3, [pc, #376]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f416:	4a5d      	ldr	r2, [pc, #372]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f418:	f043 0301 	orr.w	r3, r3, #1
 800f41c:	6713      	str	r3, [r2, #112]	@ 0x70
 800f41e:	e00b      	b.n	800f438 <HAL_RCC_OscConfig+0x324>
 800f420:	4b5a      	ldr	r3, [pc, #360]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f424:	4a59      	ldr	r2, [pc, #356]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f426:	f023 0301 	bic.w	r3, r3, #1
 800f42a:	6713      	str	r3, [r2, #112]	@ 0x70
 800f42c:	4b57      	ldr	r3, [pc, #348]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f42e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f430:	4a56      	ldr	r2, [pc, #344]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f432:	f023 0304 	bic.w	r3, r3, #4
 800f436:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	689b      	ldr	r3, [r3, #8]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d015      	beq.n	800f46c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f440:	f7f8 fc48 	bl	8007cd4 <HAL_GetTick>
 800f444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f446:	e00a      	b.n	800f45e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f448:	f7f8 fc44 	bl	8007cd4 <HAL_GetTick>
 800f44c:	4602      	mov	r2, r0
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	1ad3      	subs	r3, r2, r3
 800f452:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f456:	4293      	cmp	r3, r2
 800f458:	d901      	bls.n	800f45e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f45a:	2303      	movs	r3, #3
 800f45c:	e0d7      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f45e:	4b4b      	ldr	r3, [pc, #300]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f462:	f003 0302 	and.w	r3, r3, #2
 800f466:	2b00      	cmp	r3, #0
 800f468:	d0ee      	beq.n	800f448 <HAL_RCC_OscConfig+0x334>
 800f46a:	e014      	b.n	800f496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f46c:	f7f8 fc32 	bl	8007cd4 <HAL_GetTick>
 800f470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f472:	e00a      	b.n	800f48a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f474:	f7f8 fc2e 	bl	8007cd4 <HAL_GetTick>
 800f478:	4602      	mov	r2, r0
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	1ad3      	subs	r3, r2, r3
 800f47e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f482:	4293      	cmp	r3, r2
 800f484:	d901      	bls.n	800f48a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f486:	2303      	movs	r3, #3
 800f488:	e0c1      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f48a:	4b40      	ldr	r3, [pc, #256]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f48c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f48e:	f003 0302 	and.w	r3, r3, #2
 800f492:	2b00      	cmp	r3, #0
 800f494:	d1ee      	bne.n	800f474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800f496:	7dfb      	ldrb	r3, [r7, #23]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d105      	bne.n	800f4a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f49c:	4b3b      	ldr	r3, [pc, #236]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f49e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4a0:	4a3a      	ldr	r2, [pc, #232]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f4a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f4a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	699b      	ldr	r3, [r3, #24]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f000 80ad 	beq.w	800f60c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f4b2:	4b36      	ldr	r3, [pc, #216]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	f003 030c 	and.w	r3, r3, #12
 800f4ba:	2b08      	cmp	r3, #8
 800f4bc:	d060      	beq.n	800f580 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	699b      	ldr	r3, [r3, #24]
 800f4c2:	2b02      	cmp	r3, #2
 800f4c4:	d145      	bne.n	800f552 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f4c6:	4b33      	ldr	r3, [pc, #204]	@ (800f594 <HAL_RCC_OscConfig+0x480>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4cc:	f7f8 fc02 	bl	8007cd4 <HAL_GetTick>
 800f4d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f4d2:	e008      	b.n	800f4e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f4d4:	f7f8 fbfe 	bl	8007cd4 <HAL_GetTick>
 800f4d8:	4602      	mov	r2, r0
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	2b02      	cmp	r3, #2
 800f4e0:	d901      	bls.n	800f4e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f4e2:	2303      	movs	r3, #3
 800f4e4:	e093      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f4e6:	4b29      	ldr	r3, [pc, #164]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1f0      	bne.n	800f4d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	69da      	ldr	r2, [r3, #28]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6a1b      	ldr	r3, [r3, #32]
 800f4fa:	431a      	orrs	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f500:	019b      	lsls	r3, r3, #6
 800f502:	431a      	orrs	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f508:	085b      	lsrs	r3, r3, #1
 800f50a:	3b01      	subs	r3, #1
 800f50c:	041b      	lsls	r3, r3, #16
 800f50e:	431a      	orrs	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f514:	061b      	lsls	r3, r3, #24
 800f516:	431a      	orrs	r2, r3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f51c:	071b      	lsls	r3, r3, #28
 800f51e:	491b      	ldr	r1, [pc, #108]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f520:	4313      	orrs	r3, r2
 800f522:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f524:	4b1b      	ldr	r3, [pc, #108]	@ (800f594 <HAL_RCC_OscConfig+0x480>)
 800f526:	2201      	movs	r2, #1
 800f528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f52a:	f7f8 fbd3 	bl	8007cd4 <HAL_GetTick>
 800f52e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f530:	e008      	b.n	800f544 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f532:	f7f8 fbcf 	bl	8007cd4 <HAL_GetTick>
 800f536:	4602      	mov	r2, r0
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	1ad3      	subs	r3, r2, r3
 800f53c:	2b02      	cmp	r3, #2
 800f53e:	d901      	bls.n	800f544 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800f540:	2303      	movs	r3, #3
 800f542:	e064      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f544:	4b11      	ldr	r3, [pc, #68]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0f0      	beq.n	800f532 <HAL_RCC_OscConfig+0x41e>
 800f550:	e05c      	b.n	800f60c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f552:	4b10      	ldr	r3, [pc, #64]	@ (800f594 <HAL_RCC_OscConfig+0x480>)
 800f554:	2200      	movs	r2, #0
 800f556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f558:	f7f8 fbbc 	bl	8007cd4 <HAL_GetTick>
 800f55c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f55e:	e008      	b.n	800f572 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f560:	f7f8 fbb8 	bl	8007cd4 <HAL_GetTick>
 800f564:	4602      	mov	r2, r0
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	1ad3      	subs	r3, r2, r3
 800f56a:	2b02      	cmp	r3, #2
 800f56c:	d901      	bls.n	800f572 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800f56e:	2303      	movs	r3, #3
 800f570:	e04d      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f572:	4b06      	ldr	r3, [pc, #24]	@ (800f58c <HAL_RCC_OscConfig+0x478>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1f0      	bne.n	800f560 <HAL_RCC_OscConfig+0x44c>
 800f57e:	e045      	b.n	800f60c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	699b      	ldr	r3, [r3, #24]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d107      	bne.n	800f598 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800f588:	2301      	movs	r3, #1
 800f58a:	e040      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
 800f58c:	40023800 	.word	0x40023800
 800f590:	40007000 	.word	0x40007000
 800f594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f598:	4b1f      	ldr	r3, [pc, #124]	@ (800f618 <HAL_RCC_OscConfig+0x504>)
 800f59a:	685b      	ldr	r3, [r3, #4]
 800f59c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	699b      	ldr	r3, [r3, #24]
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d030      	beq.n	800f608 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d129      	bne.n	800f608 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d122      	bne.n	800f608 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f5c8:	4013      	ands	r3, r2
 800f5ca:	687a      	ldr	r2, [r7, #4]
 800f5cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f5ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d119      	bne.n	800f608 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5de:	085b      	lsrs	r3, r3, #1
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d10f      	bne.n	800f608 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d107      	bne.n	800f608 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f602:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f604:	429a      	cmp	r2, r3
 800f606:	d001      	beq.n	800f60c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800f608:	2301      	movs	r3, #1
 800f60a:	e000      	b.n	800f60e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800f60c:	2300      	movs	r3, #0
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3718      	adds	r7, #24
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	40023800 	.word	0x40023800

0800f61c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b086      	sub	sp, #24
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 800f624:	2300      	movs	r3, #0
 800f626:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800f628:	2300      	movs	r3, #0
 800f62a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 800f62c:	2300      	movs	r3, #0
 800f62e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 800f630:	2300      	movs	r3, #0
 800f632:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d101      	bne.n	800f63e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800f63a:	2301      	movs	r3, #1
 800f63c:	e10c      	b.n	800f858 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f644:	b2db      	uxtb	r3, r3
 800f646:	2b00      	cmp	r3, #0
 800f648:	d106      	bne.n	800f658 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2200      	movs	r2, #0
 800f64e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f93f 	bl	800f8d6 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2202      	movs	r2, #2
 800f65c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fb07 	bl	800fc74 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 fbae 	bl	800fdc8 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6a1b      	ldr	r3, [r3, #32]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d030      	beq.n	800f6d6 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 fbcd 	bl	800fe14 <SAI_GetInputClock>
 800f67a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 800f67c:	68ba      	ldr	r2, [r7, #8]
 800f67e:	4613      	mov	r3, r2
 800f680:	009b      	lsls	r3, r3, #2
 800f682:	4413      	add	r3, r2
 800f684:	005b      	lsls	r3, r3, #1
 800f686:	461a      	mov	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6a1b      	ldr	r3, [r3, #32]
 800f68c:	025b      	lsls	r3, r3, #9
 800f68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f692:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	4a72      	ldr	r2, [pc, #456]	@ (800f860 <HAL_SAI_Init+0x244>)
 800f698:	fba2 2303 	umull	r2, r3, r2, r3
 800f69c:	08da      	lsrs	r2, r3, #3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 800f6a2:	68f9      	ldr	r1, [r7, #12]
 800f6a4:	4b6e      	ldr	r3, [pc, #440]	@ (800f860 <HAL_SAI_Init+0x244>)
 800f6a6:	fba3 2301 	umull	r2, r3, r3, r1
 800f6aa:	08da      	lsrs	r2, r3, #3
 800f6ac:	4613      	mov	r3, r2
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	4413      	add	r3, r2
 800f6b2:	005b      	lsls	r3, r3, #1
 800f6b4:	1aca      	subs	r2, r1, r3
 800f6b6:	2a08      	cmp	r2, #8
 800f6b8:	d904      	bls.n	800f6c4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6be:	1c5a      	adds	r2, r3, #1
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6c8:	2b04      	cmp	r3, #4
 800f6ca:	d104      	bne.n	800f6d6 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6d0:	085a      	lsrs	r2, r3, #1
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d003      	beq.n	800f6e6 <HAL_SAI_Init+0xca>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	2b02      	cmp	r3, #2
 800f6e4:	d109      	bne.n	800f6fa <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d101      	bne.n	800f6f2 <HAL_SAI_Init+0xd6>
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	e001      	b.n	800f6f6 <HAL_SAI_Init+0xda>
 800f6f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f6f6:	617b      	str	r3, [r7, #20]
 800f6f8:	e008      	b.n	800f70c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d102      	bne.n	800f708 <HAL_SAI_Init+0xec>
 800f702:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f706:	e000      	b.n	800f70a <HAL_SAI_Init+0xee>
 800f708:	2300      	movs	r3, #0
 800f70a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	2b03      	cmp	r3, #3
 800f712:	d811      	bhi.n	800f738 <HAL_SAI_Init+0x11c>
 800f714:	2b02      	cmp	r3, #2
 800f716:	d20b      	bcs.n	800f730 <HAL_SAI_Init+0x114>
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d002      	beq.n	800f722 <HAL_SAI_Init+0x106>
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	d003      	beq.n	800f728 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 800f720:	e00a      	b.n	800f738 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800f722:	2300      	movs	r3, #0
 800f724:	613b      	str	r3, [r7, #16]
    break;
 800f726:	e008      	b.n	800f73a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800f728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f72c:	613b      	str	r3, [r7, #16]
    break;
 800f72e:	e004      	b.n	800f73a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800f730:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f734:	613b      	str	r3, [r7, #16]
    break;
 800f736:	e000      	b.n	800f73a <HAL_SAI_Init+0x11e>
      break;
 800f738:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	6819      	ldr	r1, [r3, #0]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	4b47      	ldr	r3, [pc, #284]	@ (800f864 <HAL_SAI_Init+0x248>)
 800f746:	400b      	ands	r3, r1
 800f748:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	6819      	ldr	r1, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	685a      	ldr	r2, [r3, #4]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f758:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f75e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f764:	431a      	orrs	r2, r3
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800f76a:	693b      	ldr	r3, [r7, #16]
 800f76c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800f772:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800f77e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f784:	051b      	lsls	r3, r3, #20
 800f786:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	430a      	orrs	r2, r1
 800f78e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	6812      	ldr	r2, [r2, #0]
 800f79a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800f79e:	f023 030f 	bic.w	r3, r3, #15
 800f7a2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	6859      	ldr	r1, [r3, #4]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	699a      	ldr	r2, [r3, #24]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b2:	431a      	orrs	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7b8:	431a      	orrs	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	430a      	orrs	r2, r1
 800f7c0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	6899      	ldr	r1, [r3, #8]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	4b26      	ldr	r3, [pc, #152]	@ (800f868 <HAL_SAI_Init+0x24c>)
 800f7ce:	400b      	ands	r3, r1
 800f7d0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	6899      	ldr	r1, [r3, #8]
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7dc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f7e2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 800f7e8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 800f7ee:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f7f4:	3b01      	subs	r3, #1
 800f7f6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800f7f8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	430a      	orrs	r2, r1
 800f800:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	68d9      	ldr	r1, [r3, #12]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681a      	ldr	r2, [r3, #0]
 800f80c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800f810:	400b      	ands	r3, r1
 800f812:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	68d9      	ldr	r1, [r3, #12]
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f822:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f828:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800f82a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f830:	3b01      	subs	r3, #1
 800f832:	021b      	lsls	r3, r3, #8
 800f834:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	430a      	orrs	r2, r1
 800f83c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2200      	movs	r2, #0
 800f852:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3718      	adds	r7, #24
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	cccccccd 	.word	0xcccccccd
 800f864:	ff05c010 	.word	0xff05c010
 800f868:	fff88000 	.word	0xfff88000

0800f86c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d101      	bne.n	800f87e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800f87a:	2301      	movs	r3, #1
 800f87c:	e027      	b.n	800f8ce <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2202      	movs	r2, #2
 800f882:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0U;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2200      	movs	r2, #0
 800f88c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f04f 32ff 	mov.w	r2, #4294967295
 800f896:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f9eb 	bl	800fc74 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	685a      	ldr	r2, [r3, #4]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	f042 0208 	orr.w	r2, r2, #8
 800f8ac:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f81b 	bl	800f8ea <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}

0800f8d6 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 800f8d6:	b480      	push	{r7}
 800f8d8:	b083      	sub	sp, #12
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 800f8de:	bf00      	nop
 800f8e0:	370c      	adds	r7, #12
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 800f8ea:	b480      	push	{r7}
 800f8ec:	b083      	sub	sp, #12
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 800f8f2:	bf00      	nop
 800f8f4:	370c      	adds	r7, #12
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr

0800f8fe <HAL_SAI_DMAPause>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
 800f8fe:	b480      	push	{r7}
 800f900:	b083      	sub	sp, #12
 800f902:	af00      	add	r7, sp, #0
 800f904:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f90c:	2b01      	cmp	r3, #1
 800f90e:	d101      	bne.n	800f914 <HAL_SAI_DMAPause+0x16>
 800f910:	2302      	movs	r3, #2
 800f912:	e010      	b.n	800f936 <HAL_SAI_DMAPause+0x38>
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2201      	movs	r2, #1
 800f918:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f92a:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	370c      	adds	r7, #12
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr

0800f942 <HAL_SAI_DMAResume>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAResume(SAI_HandleTypeDef *hsai)
{
 800f942:	b480      	push	{r7}
 800f944:	b083      	sub	sp, #12
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f950:	2b01      	cmp	r3, #1
 800f952:	d101      	bne.n	800f958 <HAL_SAI_DMAResume+0x16>
 800f954:	2302      	movs	r3, #2
 800f956:	e01f      	b.n	800f998 <HAL_SAI_DMAResume+0x56>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2201      	movs	r2, #1
 800f95c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable the SAI DMA requests */
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800f96e:	601a      	str	r2, [r3, #0]

  /* If the SAI peripheral is still not enabled, enable it */
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d107      	bne.n	800f98e <HAL_SAI_DMAResume+0x4c>
  {
    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(hsai);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f98c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2200      	movs	r2, #0
 800f992:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d101      	bne.n	800f9be <HAL_SAI_DMAStop+0x1a>
 800f9ba:	2302      	movs	r3, #2
 800f9bc:	e061      	b.n	800fa82 <HAL_SAI_DMAStop+0xde>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2201      	movs	r2, #1
 800f9c2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 800f9c6:	6878      	ldr	r0, [r7, #4]
 800f9c8:	f000 f954 	bl	800fc74 <SAI_Disable>

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800f9da:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d01c      	beq.n	800fa1e <HAL_SAI_DMAStop+0x7a>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b12      	cmp	r3, #18
 800f9ee:	d116      	bne.n	800fa1e <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7f8 fc13 	bl	8008220 <HAL_DMA_Abort>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00e      	beq.n	800fa1e <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fa04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa06:	2b80      	cmp	r3, #128	@ 0x80
 800fa08:	d009      	beq.n	800fa1e <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d01c      	beq.n	800fa60 <HAL_SAI_DMAStop+0xbc>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	2b22      	cmp	r3, #34	@ 0x22
 800fa30:	d116      	bne.n	800fa60 <HAL_SAI_DMAStop+0xbc>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7f8 fbf2 	bl	8008220 <HAL_DMA_Abort>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d00e      	beq.n	800fa60 <HAL_SAI_DMAStop+0xbc>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa48:	2b80      	cmp	r3, #128	@ 0x80
 800fa4a:	d009      	beq.n	800fa60 <HAL_SAI_DMAStop+0xbc>
      {
        status = HAL_ERROR;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	685a      	ldr	r2, [r3, #4]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f042 0208 	orr.w	r2, r2, #8
 800fa6e:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2201      	movs	r2, #1
 800fa74:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 800fa80:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}
	...

0800fa8c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b086      	sub	sp, #24
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	60f8      	str	r0, [r7, #12]
 800fa94:	60b9      	str	r1, [r7, #8]
 800fa96:	4613      	mov	r3, r2
 800fa98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800fa9a:	f7f8 f91b 	bl	8007cd4 <HAL_GetTick>
 800fa9e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d002      	beq.n	800faac <HAL_SAI_Transmit_DMA+0x20>
 800faa6:	88fb      	ldrh	r3, [r7, #6]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d101      	bne.n	800fab0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800faac:	2301      	movs	r3, #1
 800faae:	e093      	b.n	800fbd8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	2b01      	cmp	r3, #1
 800faba:	f040 808c 	bne.w	800fbd6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d101      	bne.n	800facc <HAL_SAI_Transmit_DMA+0x40>
 800fac8:	2302      	movs	r3, #2
 800faca:	e085      	b.n	800fbd8 <HAL_SAI_Transmit_DMA+0x14c>
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	2201      	movs	r2, #1
 800fad0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hsai->pBuffPtr = pData;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	68ba      	ldr	r2, [r7, #8]
 800fad8:	669a      	str	r2, [r3, #104]	@ 0x68
    hsai->XferSize = Size;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	88fa      	ldrh	r2, [r7, #6]
 800fade:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c
    hsai->XferCount = Size;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	88fa      	ldrh	r2, [r7, #6]
 800fae6:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2200      	movs	r2, #0
 800faee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2212      	movs	r2, #18
 800faf6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fafe:	4a38      	ldr	r2, [pc, #224]	@ (800fbe0 <HAL_SAI_Transmit_DMA+0x154>)
 800fb00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb06:	4a37      	ldr	r2, [pc, #220]	@ (800fbe4 <HAL_SAI_Transmit_DMA+0x158>)
 800fb08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb0e:	4a36      	ldr	r2, [pc, #216]	@ (800fbe8 <HAL_SAI_Transmit_DMA+0x15c>)
 800fb10:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb16:	2200      	movs	r2, #0
 800fb18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fb22:	4619      	mov	r1, r3
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	331c      	adds	r3, #28
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 800fb32:	f7f8 fb1d 	bl	8008170 <HAL_DMA_Start_IT>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d005      	beq.n	800fb48 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      return  HAL_ERROR;
 800fb44:	2301      	movs	r3, #1
 800fb46:	e047      	b.n	800fbd8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fb48:	2100      	movs	r1, #0
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f000 f85c 	bl	800fc08 <SAI_InterruptFlag>
 800fb50:	4601      	mov	r1, r0
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	691a      	ldr	r2, [r3, #16]
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	430a      	orrs	r2, r1
 800fb5e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	681a      	ldr	r2, [r3, #0]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800fb6e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fb70:	e015      	b.n	800fb9e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800fb72:	f7f8 f8af 	bl	8007cd4 <HAL_GetTick>
 800fb76:	4602      	mov	r2, r0
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800fb80:	d90d      	bls.n	800fb9e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fb88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	2200      	movs	r2, #0
 800fb96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	e01c      	b.n	800fbd8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	695b      	ldr	r3, [r3, #20]
 800fba4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d0e2      	beq.n	800fb72 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d107      	bne.n	800fbca <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800fbc8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	e000      	b.n	800fbd8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800fbd6:	2302      	movs	r3, #2
  }
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3718      	adds	r7, #24
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	0800fd45 	.word	0x0800fd45
 800fbe4:	0800fce5 	.word	0x0800fce5
 800fbe8:	0800fd61 	.word	0x0800fd61

0800fbec <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800fbfa:	b2db      	uxtb	r3, r3
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	370c      	adds	r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr

0800fc08 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b085      	sub	sp, #20
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800fc12:	2301      	movs	r3, #1
 800fc14:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d103      	bne.n	800fc24 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f043 0308 	orr.w	r3, r3, #8
 800fc22:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc28:	2b08      	cmp	r3, #8
 800fc2a:	d10b      	bne.n	800fc44 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800fc30:	2b03      	cmp	r3, #3
 800fc32:	d003      	beq.n	800fc3c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d103      	bne.n	800fc44 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f043 0310 	orr.w	r3, r3, #16
 800fc42:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	2b03      	cmp	r3, #3
 800fc4a:	d003      	beq.n	800fc54 <SAI_InterruptFlag+0x4c>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	2b02      	cmp	r3, #2
 800fc52:	d104      	bne.n	800fc5e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800fc5a:	60fb      	str	r3, [r7, #12]
 800fc5c:	e003      	b.n	800fc66 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f043 0304 	orr.w	r3, r3, #4
 800fc64:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800fc66:	68fb      	ldr	r3, [r7, #12]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3714      	adds	r7, #20
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr

0800fc74 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800fc7c:	4b17      	ldr	r3, [pc, #92]	@ (800fcdc <SAI_Disable+0x68>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a17      	ldr	r2, [pc, #92]	@ (800fce0 <SAI_Disable+0x6c>)
 800fc82:	fba2 2303 	umull	r2, r3, r2, r3
 800fc86:	0b1b      	lsrs	r3, r3, #12
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800fc9e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	1e5a      	subs	r2, r3, #1
 800fca4:	60fa      	str	r2, [r7, #12]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d10a      	bne.n	800fcc0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fcb0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 800fcba:	2303      	movs	r3, #3
 800fcbc:	72fb      	strb	r3, [r7, #11]
      break;
 800fcbe:	e006      	b.n	800fcce <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1e8      	bne.n	800fca0 <SAI_Disable+0x2c>

  return status;
 800fcce:	7afb      	ldrb	r3, [r7, #11]
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	20000160 	.word	0x20000160
 800fce0:	95cbec1b 	.word	0x95cbec1b

0800fce4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b084      	sub	sp, #16
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcf0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	69db      	ldr	r3, [r3, #28]
 800fcf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fcfa:	d01c      	beq.n	800fd36 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0U;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	681a      	ldr	r2, [r3, #0]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800fd12:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800fd14:	2100      	movs	r1, #0
 800fd16:	68f8      	ldr	r0, [r7, #12]
 800fd18:	f7ff ff76 	bl	800fc08 <SAI_InterruptFlag>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	43d9      	mvns	r1, r3
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	691a      	ldr	r2, [r3, #16]
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	400a      	ands	r2, r1
 800fd2c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2201      	movs	r2, #1
 800fd32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f7f5 f9f0 	bl	800511c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fd3c:	bf00      	nop
 800fd3e:	3710      	adds	r7, #16
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd50:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800fd52:	68f8      	ldr	r0, [r7, #12]
 800fd54:	f7f5 f9ec 	bl	8005130 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fd58:	bf00      	nop
 800fd5a:	3710      	adds	r7, #16
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b084      	sub	sp, #16
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd6c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d004      	beq.n	800fd92 <SAI_DMAError+0x32>
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd8e:	2b01      	cmp	r3, #1
 800fd90:	d112      	bne.n	800fdb8 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	681a      	ldr	r2, [r3, #0]
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800fda0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	f7ff ff66 	bl	800fc74 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2201      	movs	r2, #1
 800fdac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	f8a3 206e 	strh.w	r2, [r3, #110]	@ 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800fdb8:	68f8      	ldr	r0, [r7, #12]
 800fdba:	f7f5 f9c3 	bl	8005144 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800fdbe:	bf00      	nop
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}
	...

0800fdc8 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b085      	sub	sp, #20
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	68db      	ldr	r3, [r3, #12]
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	d00c      	beq.n	800fdf2 <SAI_BlockSynchroConfig+0x2a>
 800fdd8:	2b02      	cmp	r3, #2
 800fdda:	d80d      	bhi.n	800fdf8 <SAI_BlockSynchroConfig+0x30>
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d002      	beq.n	800fde6 <SAI_BlockSynchroConfig+0x1e>
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d003      	beq.n	800fdec <SAI_BlockSynchroConfig+0x24>
 800fde4:	e008      	b.n	800fdf8 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800fde6:	2300      	movs	r3, #0
 800fde8:	60fb      	str	r3, [r7, #12]
      break;
 800fdea:	e008      	b.n	800fdfe <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800fdec:	2310      	movs	r3, #16
 800fdee:	60fb      	str	r3, [r7, #12]
      break;
 800fdf0:	e005      	b.n	800fdfe <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800fdf2:	2320      	movs	r3, #32
 800fdf4:	60fb      	str	r3, [r7, #12]
      break;
 800fdf6:	e002      	b.n	800fdfe <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	60fb      	str	r3, [r7, #12]
      break;
 800fdfc:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 800fdfe:	4a04      	ldr	r2, [pc, #16]	@ (800fe10 <SAI_BlockSynchroConfig+0x48>)
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800fe04:	bf00      	nop
 800fe06:	3714      	adds	r7, #20
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr
 800fe10:	40015800 	.word	0x40015800

0800fe14 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 800fe14:	b480      	push	{r7}
 800fe16:	b087      	sub	sp, #28
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 800fe20:	2300      	movs	r3, #0
 800fe22:	613b      	str	r3, [r7, #16]
 800fe24:	2300      	movs	r3, #0
 800fe26:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	4a46      	ldr	r2, [pc, #280]	@ (800ff48 <SAI_GetInputClock+0x134>)
 800fe2e:	4293      	cmp	r3, r2
 800fe30:	d10b      	bne.n	800fe4a <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800fe32:	4b46      	ldr	r3, [pc, #280]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fe34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	69db      	ldr	r3, [r3, #28]
 800fe40:	4942      	ldr	r1, [pc, #264]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fe42:	4313      	orrs	r3, r2
 800fe44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 800fe48:	e00b      	b.n	800fe62 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 800fe4a:	4b40      	ldr	r3, [pc, #256]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fe4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	69db      	ldr	r3, [r3, #28]
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	493c      	ldr	r1, [pc, #240]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800fe62:	4b3a      	ldr	r3, [pc, #232]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d108      	bne.n	800fe80 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800fe6e:	4b37      	ldr	r3, [pc, #220]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fe70:	685b      	ldr	r3, [r3, #4]
 800fe72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe76:	4a36      	ldr	r2, [pc, #216]	@ (800ff50 <SAI_GetInputClock+0x13c>)
 800fe78:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe7c:	613b      	str	r3, [r7, #16]
 800fe7e:	e007      	b.n	800fe90 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800fe80:	4b32      	ldr	r3, [pc, #200]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fe82:	685b      	ldr	r3, [r3, #4]
 800fe84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe88:	4a32      	ldr	r2, [pc, #200]	@ (800ff54 <SAI_GetInputClock+0x140>)
 800fe8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe8e:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	69db      	ldr	r3, [r3, #28]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d121      	bne.n	800fedc <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 800fe98:	4b2c      	ldr	r3, [pc, #176]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fe9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe9e:	0e1b      	lsrs	r3, r3, #24
 800fea0:	f003 030f 	and.w	r3, r3, #15
 800fea4:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800fea6:	4b29      	ldr	r3, [pc, #164]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800feac:	099b      	lsrs	r3, r3, #6
 800feae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feb2:	693a      	ldr	r2, [r7, #16]
 800feb4:	fb03 f202 	mul.w	r2, r3, r2
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	fbb2 f3f3 	udiv	r3, r2, r3
 800febe:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 800fec0:	4b22      	ldr	r3, [pc, #136]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fec6:	0a1b      	lsrs	r3, r3, #8
 800fec8:	f003 031f 	and.w	r3, r3, #31
 800fecc:	3301      	adds	r3, #1
 800fece:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 800fed0:	697a      	ldr	r2, [r7, #20]
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fed8:	617b      	str	r3, [r7, #20]
 800feda:	e02d      	b.n	800ff38 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	69db      	ldr	r3, [r3, #28]
 800fee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fee4:	d120      	bne.n	800ff28 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800fee6:	4b19      	ldr	r3, [pc, #100]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800feec:	0e1b      	lsrs	r3, r3, #24
 800feee:	f003 030f 	and.w	r3, r3, #15
 800fef2:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800fef4:	4b15      	ldr	r3, [pc, #84]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800fef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fefa:	099b      	lsrs	r3, r3, #6
 800fefc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff00:	693a      	ldr	r2, [r7, #16]
 800ff02:	fb03 f202 	mul.w	r2, r3, r2
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff0c:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800ff0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800ff10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff14:	f003 031f 	and.w	r3, r3, #31
 800ff18:	3301      	adds	r3, #1
 800ff1a:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 800ff1c:	697a      	ldr	r2, [r7, #20]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff24:	617b      	str	r3, [r7, #20]
 800ff26:	e007      	b.n	800ff38 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 800ff28:	4b08      	ldr	r3, [pc, #32]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	4a07      	ldr	r2, [pc, #28]	@ (800ff4c <SAI_GetInputClock+0x138>)
 800ff2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ff32:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 800ff34:	4b08      	ldr	r3, [pc, #32]	@ (800ff58 <SAI_GetInputClock+0x144>)
 800ff36:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800ff38:	697b      	ldr	r3, [r7, #20]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	371c      	adds	r7, #28
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	40015804 	.word	0x40015804
 800ff4c:	40023800 	.word	0x40023800
 800ff50:	00f42400 	.word	0x00f42400
 800ff54:	007a1200 	.word	0x007a1200
 800ff58:	00bb8000 	.word	0x00bb8000

0800ff5c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b082      	sub	sp, #8
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d101      	bne.n	800ff70 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	e025      	b.n	800ffbc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d106      	bne.n	800ff8a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 f81d 	bl	800ffc4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	3304      	adds	r3, #4
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	f001 f9b6 	bl	801130e <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6818      	ldr	r0, [r3, #0]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	461a      	mov	r2, r3
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	f001 fa0b 	bl	80113c8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2201      	movs	r2, #1
 800ffb6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 800ffcc:	bf00      	nop
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr

0800ffd8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b086      	sub	sp, #24
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	60b9      	str	r1, [r7, #8]
 800ffe2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ffea:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ffec:	7dfb      	ldrb	r3, [r7, #23]
 800ffee:	2b02      	cmp	r3, #2
 800fff0:	d101      	bne.n	800fff6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800fff2:	2302      	movs	r3, #2
 800fff4:	e021      	b.n	801003a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800fff6:	7dfb      	ldrb	r3, [r7, #23]
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d002      	beq.n	8010002 <HAL_SDRAM_SendCommand+0x2a>
 800fffc:	7dfb      	ldrb	r3, [r7, #23]
 800fffe:	2b05      	cmp	r3, #5
 8010000:	d118      	bne.n	8010034 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	2202      	movs	r2, #2
 8010006:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	68b9      	ldr	r1, [r7, #8]
 8010012:	4618      	mov	r0, r3
 8010014:	f001 fa41 	bl	801149a <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b02      	cmp	r3, #2
 801001e:	d104      	bne.n	801002a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2205      	movs	r2, #5
 8010024:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010028:	e006      	b.n	8010038 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	2201      	movs	r2, #1
 801002e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8010032:	e001      	b.n	8010038 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8010034:	2301      	movs	r3, #1
 8010036:	e000      	b.n	801003a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3718      	adds	r7, #24
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8010042:	b580      	push	{r7, lr}
 8010044:	b082      	sub	sp, #8
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
 801004a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010052:	b2db      	uxtb	r3, r3
 8010054:	2b02      	cmp	r3, #2
 8010056:	d101      	bne.n	801005c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8010058:	2302      	movs	r3, #2
 801005a:	e016      	b.n	801008a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010062:	b2db      	uxtb	r3, r3
 8010064:	2b01      	cmp	r3, #1
 8010066:	d10f      	bne.n	8010088 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2202      	movs	r2, #2
 801006c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	6839      	ldr	r1, [r7, #0]
 8010076:	4618      	mov	r0, r3
 8010078:	f001 fa4c 	bl	8011514 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2201      	movs	r2, #1
 8010080:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8010084:	2300      	movs	r3, #0
 8010086:	e000      	b.n	801008a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8010088:	2301      	movs	r3, #1
}
 801008a:	4618      	mov	r0, r3
 801008c:	3708      	adds	r7, #8
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
	...

08010094 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d109      	bne.n	80100b8 <HAL_TIM_PWM_Start+0x24>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	bf14      	ite	ne
 80100b0:	2301      	movne	r3, #1
 80100b2:	2300      	moveq	r3, #0
 80100b4:	b2db      	uxtb	r3, r3
 80100b6:	e022      	b.n	80100fe <HAL_TIM_PWM_Start+0x6a>
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	2b04      	cmp	r3, #4
 80100bc:	d109      	bne.n	80100d2 <HAL_TIM_PWM_Start+0x3e>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	bf14      	ite	ne
 80100ca:	2301      	movne	r3, #1
 80100cc:	2300      	moveq	r3, #0
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	e015      	b.n	80100fe <HAL_TIM_PWM_Start+0x6a>
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	2b08      	cmp	r3, #8
 80100d6:	d109      	bne.n	80100ec <HAL_TIM_PWM_Start+0x58>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80100de:	b2db      	uxtb	r3, r3
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	bf14      	ite	ne
 80100e4:	2301      	movne	r3, #1
 80100e6:	2300      	moveq	r3, #0
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	e008      	b.n	80100fe <HAL_TIM_PWM_Start+0x6a>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	2b01      	cmp	r3, #1
 80100f6:	bf14      	ite	ne
 80100f8:	2301      	movne	r3, #1
 80100fa:	2300      	moveq	r3, #0
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d001      	beq.n	8010106 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8010102:	2301      	movs	r3, #1
 8010104:	e07c      	b.n	8010200 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d104      	bne.n	8010116 <HAL_TIM_PWM_Start+0x82>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2202      	movs	r2, #2
 8010110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010114:	e013      	b.n	801013e <HAL_TIM_PWM_Start+0xaa>
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	2b04      	cmp	r3, #4
 801011a:	d104      	bne.n	8010126 <HAL_TIM_PWM_Start+0x92>
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2202      	movs	r2, #2
 8010120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010124:	e00b      	b.n	801013e <HAL_TIM_PWM_Start+0xaa>
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	2b08      	cmp	r3, #8
 801012a:	d104      	bne.n	8010136 <HAL_TIM_PWM_Start+0xa2>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2202      	movs	r2, #2
 8010130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010134:	e003      	b.n	801013e <HAL_TIM_PWM_Start+0xaa>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2202      	movs	r2, #2
 801013a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2201      	movs	r2, #1
 8010144:	6839      	ldr	r1, [r7, #0]
 8010146:	4618      	mov	r0, r3
 8010148:	f001 f8bc 	bl	80112c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4a2d      	ldr	r2, [pc, #180]	@ (8010208 <HAL_TIM_PWM_Start+0x174>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d004      	beq.n	8010160 <HAL_TIM_PWM_Start+0xcc>
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4a2c      	ldr	r2, [pc, #176]	@ (801020c <HAL_TIM_PWM_Start+0x178>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d101      	bne.n	8010164 <HAL_TIM_PWM_Start+0xd0>
 8010160:	2301      	movs	r3, #1
 8010162:	e000      	b.n	8010166 <HAL_TIM_PWM_Start+0xd2>
 8010164:	2300      	movs	r3, #0
 8010166:	2b00      	cmp	r3, #0
 8010168:	d007      	beq.n	801017a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010178:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	4a22      	ldr	r2, [pc, #136]	@ (8010208 <HAL_TIM_PWM_Start+0x174>)
 8010180:	4293      	cmp	r3, r2
 8010182:	d022      	beq.n	80101ca <HAL_TIM_PWM_Start+0x136>
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801018c:	d01d      	beq.n	80101ca <HAL_TIM_PWM_Start+0x136>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	4a1f      	ldr	r2, [pc, #124]	@ (8010210 <HAL_TIM_PWM_Start+0x17c>)
 8010194:	4293      	cmp	r3, r2
 8010196:	d018      	beq.n	80101ca <HAL_TIM_PWM_Start+0x136>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	4a1d      	ldr	r2, [pc, #116]	@ (8010214 <HAL_TIM_PWM_Start+0x180>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d013      	beq.n	80101ca <HAL_TIM_PWM_Start+0x136>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	4a1c      	ldr	r2, [pc, #112]	@ (8010218 <HAL_TIM_PWM_Start+0x184>)
 80101a8:	4293      	cmp	r3, r2
 80101aa:	d00e      	beq.n	80101ca <HAL_TIM_PWM_Start+0x136>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4a16      	ldr	r2, [pc, #88]	@ (801020c <HAL_TIM_PWM_Start+0x178>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d009      	beq.n	80101ca <HAL_TIM_PWM_Start+0x136>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a18      	ldr	r2, [pc, #96]	@ (801021c <HAL_TIM_PWM_Start+0x188>)
 80101bc:	4293      	cmp	r3, r2
 80101be:	d004      	beq.n	80101ca <HAL_TIM_PWM_Start+0x136>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4a16      	ldr	r2, [pc, #88]	@ (8010220 <HAL_TIM_PWM_Start+0x18c>)
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d111      	bne.n	80101ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	f003 0307 	and.w	r3, r3, #7
 80101d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	2b06      	cmp	r3, #6
 80101da:	d010      	beq.n	80101fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f042 0201 	orr.w	r2, r2, #1
 80101ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101ec:	e007      	b.n	80101fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	681a      	ldr	r2, [r3, #0]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f042 0201 	orr.w	r2, r2, #1
 80101fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}
 8010208:	40010000 	.word	0x40010000
 801020c:	40010400 	.word	0x40010400
 8010210:	40000400 	.word	0x40000400
 8010214:	40000800 	.word	0x40000800
 8010218:	40000c00 	.word	0x40000c00
 801021c:	40014000 	.word	0x40014000
 8010220:	40001800 	.word	0x40001800

08010224 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d101      	bne.n	8010236 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010232:	2301      	movs	r3, #1
 8010234:	e041      	b.n	80102ba <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801023c:	b2db      	uxtb	r3, r3
 801023e:	2b00      	cmp	r3, #0
 8010240:	d106      	bne.n	8010250 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2200      	movs	r2, #0
 8010246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 f839 	bl	80102c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2202      	movs	r2, #2
 8010254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	3304      	adds	r3, #4
 8010260:	4619      	mov	r1, r3
 8010262:	4610      	mov	r0, r2
 8010264:	f000 fb7c 	bl	8010960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2201      	movs	r2, #1
 801026c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	2201      	movs	r2, #1
 8010274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2201      	movs	r2, #1
 801027c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2201      	movs	r2, #1
 8010284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2201      	movs	r2, #1
 801028c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2201      	movs	r2, #1
 8010294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2201      	movs	r2, #1
 801029c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2201      	movs	r2, #1
 80102a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2201      	movs	r2, #1
 80102ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2201      	movs	r2, #1
 80102b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80102b8:	2300      	movs	r3, #0
}
 80102ba:	4618      	mov	r0, r3
 80102bc:	3708      	adds	r7, #8
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd80      	pop	{r7, pc}

080102c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80102c2:	b480      	push	{r7}
 80102c4:	b083      	sub	sp, #12
 80102c6:	af00      	add	r7, sp, #0
 80102c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80102ca:	bf00      	nop
 80102cc:	370c      	adds	r7, #12
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
	...

080102d8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d104      	bne.n	80102f2 <HAL_TIM_IC_Start+0x1a>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	e013      	b.n	801031a <HAL_TIM_IC_Start+0x42>
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	2b04      	cmp	r3, #4
 80102f6:	d104      	bne.n	8010302 <HAL_TIM_IC_Start+0x2a>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	e00b      	b.n	801031a <HAL_TIM_IC_Start+0x42>
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	2b08      	cmp	r3, #8
 8010306:	d104      	bne.n	8010312 <HAL_TIM_IC_Start+0x3a>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801030e:	b2db      	uxtb	r3, r3
 8010310:	e003      	b.n	801031a <HAL_TIM_IC_Start+0x42>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010318:	b2db      	uxtb	r3, r3
 801031a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d104      	bne.n	801032c <HAL_TIM_IC_Start+0x54>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010328:	b2db      	uxtb	r3, r3
 801032a:	e013      	b.n	8010354 <HAL_TIM_IC_Start+0x7c>
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	2b04      	cmp	r3, #4
 8010330:	d104      	bne.n	801033c <HAL_TIM_IC_Start+0x64>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010338:	b2db      	uxtb	r3, r3
 801033a:	e00b      	b.n	8010354 <HAL_TIM_IC_Start+0x7c>
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	2b08      	cmp	r3, #8
 8010340:	d104      	bne.n	801034c <HAL_TIM_IC_Start+0x74>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010348:	b2db      	uxtb	r3, r3
 801034a:	e003      	b.n	8010354 <HAL_TIM_IC_Start+0x7c>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010352:	b2db      	uxtb	r3, r3
 8010354:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010356:	7bfb      	ldrb	r3, [r7, #15]
 8010358:	2b01      	cmp	r3, #1
 801035a:	d102      	bne.n	8010362 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801035c:	7bbb      	ldrb	r3, [r7, #14]
 801035e:	2b01      	cmp	r3, #1
 8010360:	d001      	beq.n	8010366 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8010362:	2301      	movs	r3, #1
 8010364:	e081      	b.n	801046a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d104      	bne.n	8010376 <HAL_TIM_IC_Start+0x9e>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2202      	movs	r2, #2
 8010370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010374:	e013      	b.n	801039e <HAL_TIM_IC_Start+0xc6>
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	2b04      	cmp	r3, #4
 801037a:	d104      	bne.n	8010386 <HAL_TIM_IC_Start+0xae>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2202      	movs	r2, #2
 8010380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010384:	e00b      	b.n	801039e <HAL_TIM_IC_Start+0xc6>
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	2b08      	cmp	r3, #8
 801038a:	d104      	bne.n	8010396 <HAL_TIM_IC_Start+0xbe>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2202      	movs	r2, #2
 8010390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010394:	e003      	b.n	801039e <HAL_TIM_IC_Start+0xc6>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	2202      	movs	r2, #2
 801039a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d104      	bne.n	80103ae <HAL_TIM_IC_Start+0xd6>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2202      	movs	r2, #2
 80103a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80103ac:	e013      	b.n	80103d6 <HAL_TIM_IC_Start+0xfe>
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	2b04      	cmp	r3, #4
 80103b2:	d104      	bne.n	80103be <HAL_TIM_IC_Start+0xe6>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2202      	movs	r2, #2
 80103b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80103bc:	e00b      	b.n	80103d6 <HAL_TIM_IC_Start+0xfe>
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	2b08      	cmp	r3, #8
 80103c2:	d104      	bne.n	80103ce <HAL_TIM_IC_Start+0xf6>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2202      	movs	r2, #2
 80103c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80103cc:	e003      	b.n	80103d6 <HAL_TIM_IC_Start+0xfe>
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2202      	movs	r2, #2
 80103d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	2201      	movs	r2, #1
 80103dc:	6839      	ldr	r1, [r7, #0]
 80103de:	4618      	mov	r0, r3
 80103e0:	f000 ff70 	bl	80112c4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	4a22      	ldr	r2, [pc, #136]	@ (8010474 <HAL_TIM_IC_Start+0x19c>)
 80103ea:	4293      	cmp	r3, r2
 80103ec:	d022      	beq.n	8010434 <HAL_TIM_IC_Start+0x15c>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103f6:	d01d      	beq.n	8010434 <HAL_TIM_IC_Start+0x15c>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	4a1e      	ldr	r2, [pc, #120]	@ (8010478 <HAL_TIM_IC_Start+0x1a0>)
 80103fe:	4293      	cmp	r3, r2
 8010400:	d018      	beq.n	8010434 <HAL_TIM_IC_Start+0x15c>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	4a1d      	ldr	r2, [pc, #116]	@ (801047c <HAL_TIM_IC_Start+0x1a4>)
 8010408:	4293      	cmp	r3, r2
 801040a:	d013      	beq.n	8010434 <HAL_TIM_IC_Start+0x15c>
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a1b      	ldr	r2, [pc, #108]	@ (8010480 <HAL_TIM_IC_Start+0x1a8>)
 8010412:	4293      	cmp	r3, r2
 8010414:	d00e      	beq.n	8010434 <HAL_TIM_IC_Start+0x15c>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4a1a      	ldr	r2, [pc, #104]	@ (8010484 <HAL_TIM_IC_Start+0x1ac>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d009      	beq.n	8010434 <HAL_TIM_IC_Start+0x15c>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	4a18      	ldr	r2, [pc, #96]	@ (8010488 <HAL_TIM_IC_Start+0x1b0>)
 8010426:	4293      	cmp	r3, r2
 8010428:	d004      	beq.n	8010434 <HAL_TIM_IC_Start+0x15c>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	4a17      	ldr	r2, [pc, #92]	@ (801048c <HAL_TIM_IC_Start+0x1b4>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d111      	bne.n	8010458 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	689b      	ldr	r3, [r3, #8]
 801043a:	f003 0307 	and.w	r3, r3, #7
 801043e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	2b06      	cmp	r3, #6
 8010444:	d010      	beq.n	8010468 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	681a      	ldr	r2, [r3, #0]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f042 0201 	orr.w	r2, r2, #1
 8010454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010456:	e007      	b.n	8010468 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f042 0201 	orr.w	r2, r2, #1
 8010466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010468:	2300      	movs	r3, #0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3710      	adds	r7, #16
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}
 8010472:	bf00      	nop
 8010474:	40010000 	.word	0x40010000
 8010478:	40000400 	.word	0x40000400
 801047c:	40000800 	.word	0x40000800
 8010480:	40000c00 	.word	0x40000c00
 8010484:	40010400 	.word	0x40010400
 8010488:	40014000 	.word	0x40014000
 801048c:	40001800 	.word	0x40001800

08010490 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801049c:	2300      	movs	r3, #0
 801049e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80104a6:	2b01      	cmp	r3, #1
 80104a8:	d101      	bne.n	80104ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80104aa:	2302      	movs	r3, #2
 80104ac:	e088      	b.n	80105c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2201      	movs	r2, #1
 80104b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d11b      	bne.n	80104f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80104cc:	f000 fd36 	bl	8010f3c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	699a      	ldr	r2, [r3, #24]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f022 020c 	bic.w	r2, r2, #12
 80104de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	6999      	ldr	r1, [r3, #24]
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	689a      	ldr	r2, [r3, #8]
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	430a      	orrs	r2, r1
 80104f0:	619a      	str	r2, [r3, #24]
 80104f2:	e060      	b.n	80105b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2b04      	cmp	r3, #4
 80104f8:	d11c      	bne.n	8010534 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 801050a:	f000 fdba 	bl	8011082 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	699a      	ldr	r2, [r3, #24]
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801051c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	6999      	ldr	r1, [r3, #24]
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	021a      	lsls	r2, r3, #8
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	430a      	orrs	r2, r1
 8010530:	619a      	str	r2, [r3, #24]
 8010532:	e040      	b.n	80105b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b08      	cmp	r3, #8
 8010538:	d11b      	bne.n	8010572 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010546:	68bb      	ldr	r3, [r7, #8]
 8010548:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 801054a:	f000 fe07 	bl	801115c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	69da      	ldr	r2, [r3, #28]
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f022 020c 	bic.w	r2, r2, #12
 801055c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	69d9      	ldr	r1, [r3, #28]
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	689a      	ldr	r2, [r3, #8]
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	430a      	orrs	r2, r1
 801056e:	61da      	str	r2, [r3, #28]
 8010570:	e021      	b.n	80105b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b0c      	cmp	r3, #12
 8010576:	d11c      	bne.n	80105b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8010588:	f000 fe24 	bl	80111d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	69da      	ldr	r2, [r3, #28]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 801059a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	69d9      	ldr	r1, [r3, #28]
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	021a      	lsls	r2, r3, #8
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	430a      	orrs	r2, r1
 80105ae:	61da      	str	r2, [r3, #28]
 80105b0:	e001      	b.n	80105b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80105b2:	2301      	movs	r3, #1
 80105b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2200      	movs	r2, #0
 80105ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80105be:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3718      	adds	r7, #24
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b086      	sub	sp, #24
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105d4:	2300      	movs	r3, #0
 80105d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d101      	bne.n	80105e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80105e2:	2302      	movs	r3, #2
 80105e4:	e0ae      	b.n	8010744 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2201      	movs	r2, #1
 80105ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2b0c      	cmp	r3, #12
 80105f2:	f200 809f 	bhi.w	8010734 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80105f6:	a201      	add	r2, pc, #4	@ (adr r2, 80105fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80105f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105fc:	08010631 	.word	0x08010631
 8010600:	08010735 	.word	0x08010735
 8010604:	08010735 	.word	0x08010735
 8010608:	08010735 	.word	0x08010735
 801060c:	08010671 	.word	0x08010671
 8010610:	08010735 	.word	0x08010735
 8010614:	08010735 	.word	0x08010735
 8010618:	08010735 	.word	0x08010735
 801061c:	080106b3 	.word	0x080106b3
 8010620:	08010735 	.word	0x08010735
 8010624:	08010735 	.word	0x08010735
 8010628:	08010735 	.word	0x08010735
 801062c:	080106f3 	.word	0x080106f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	68b9      	ldr	r1, [r7, #8]
 8010636:	4618      	mov	r0, r3
 8010638:	f000 fa3e 	bl	8010ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	699a      	ldr	r2, [r3, #24]
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	f042 0208 	orr.w	r2, r2, #8
 801064a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	699a      	ldr	r2, [r3, #24]
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f022 0204 	bic.w	r2, r2, #4
 801065a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	6999      	ldr	r1, [r3, #24]
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	691a      	ldr	r2, [r3, #16]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	430a      	orrs	r2, r1
 801066c:	619a      	str	r2, [r3, #24]
      break;
 801066e:	e064      	b.n	801073a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	68b9      	ldr	r1, [r7, #8]
 8010676:	4618      	mov	r0, r3
 8010678:	f000 fa8e 	bl	8010b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	699a      	ldr	r2, [r3, #24]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801068a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	699a      	ldr	r2, [r3, #24]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801069a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	6999      	ldr	r1, [r3, #24]
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	691b      	ldr	r3, [r3, #16]
 80106a6:	021a      	lsls	r2, r3, #8
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	430a      	orrs	r2, r1
 80106ae:	619a      	str	r2, [r3, #24]
      break;
 80106b0:	e043      	b.n	801073a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	68b9      	ldr	r1, [r7, #8]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f000 fae3 	bl	8010c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	69da      	ldr	r2, [r3, #28]
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f042 0208 	orr.w	r2, r2, #8
 80106cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	69da      	ldr	r2, [r3, #28]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f022 0204 	bic.w	r2, r2, #4
 80106dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	69d9      	ldr	r1, [r3, #28]
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	691a      	ldr	r2, [r3, #16]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	430a      	orrs	r2, r1
 80106ee:	61da      	str	r2, [r3, #28]
      break;
 80106f0:	e023      	b.n	801073a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	68b9      	ldr	r1, [r7, #8]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 fb37 	bl	8010d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	69da      	ldr	r2, [r3, #28]
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801070c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	69da      	ldr	r2, [r3, #28]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801071c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	69d9      	ldr	r1, [r3, #28]
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	691b      	ldr	r3, [r3, #16]
 8010728:	021a      	lsls	r2, r3, #8
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	430a      	orrs	r2, r1
 8010730:	61da      	str	r2, [r3, #28]
      break;
 8010732:	e002      	b.n	801073a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8010734:	2301      	movs	r3, #1
 8010736:	75fb      	strb	r3, [r7, #23]
      break;
 8010738:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	2200      	movs	r2, #0
 801073e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8010742:	7dfb      	ldrb	r3, [r7, #23]
}
 8010744:	4618      	mov	r0, r3
 8010746:	3718      	adds	r7, #24
 8010748:	46bd      	mov	sp, r7
 801074a:	bd80      	pop	{r7, pc}

0801074c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010756:	2300      	movs	r3, #0
 8010758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010760:	2b01      	cmp	r3, #1
 8010762:	d101      	bne.n	8010768 <HAL_TIM_ConfigClockSource+0x1c>
 8010764:	2302      	movs	r3, #2
 8010766:	e0b4      	b.n	80108d2 <HAL_TIM_ConfigClockSource+0x186>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2201      	movs	r2, #1
 801076c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2202      	movs	r2, #2
 8010774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010780:	68bb      	ldr	r3, [r7, #8]
 8010782:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801078e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	68ba      	ldr	r2, [r7, #8]
 8010796:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80107a0:	d03e      	beq.n	8010820 <HAL_TIM_ConfigClockSource+0xd4>
 80107a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80107a6:	f200 8087 	bhi.w	80108b8 <HAL_TIM_ConfigClockSource+0x16c>
 80107aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80107ae:	f000 8086 	beq.w	80108be <HAL_TIM_ConfigClockSource+0x172>
 80107b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80107b6:	d87f      	bhi.n	80108b8 <HAL_TIM_ConfigClockSource+0x16c>
 80107b8:	2b70      	cmp	r3, #112	@ 0x70
 80107ba:	d01a      	beq.n	80107f2 <HAL_TIM_ConfigClockSource+0xa6>
 80107bc:	2b70      	cmp	r3, #112	@ 0x70
 80107be:	d87b      	bhi.n	80108b8 <HAL_TIM_ConfigClockSource+0x16c>
 80107c0:	2b60      	cmp	r3, #96	@ 0x60
 80107c2:	d050      	beq.n	8010866 <HAL_TIM_ConfigClockSource+0x11a>
 80107c4:	2b60      	cmp	r3, #96	@ 0x60
 80107c6:	d877      	bhi.n	80108b8 <HAL_TIM_ConfigClockSource+0x16c>
 80107c8:	2b50      	cmp	r3, #80	@ 0x50
 80107ca:	d03c      	beq.n	8010846 <HAL_TIM_ConfigClockSource+0xfa>
 80107cc:	2b50      	cmp	r3, #80	@ 0x50
 80107ce:	d873      	bhi.n	80108b8 <HAL_TIM_ConfigClockSource+0x16c>
 80107d0:	2b40      	cmp	r3, #64	@ 0x40
 80107d2:	d058      	beq.n	8010886 <HAL_TIM_ConfigClockSource+0x13a>
 80107d4:	2b40      	cmp	r3, #64	@ 0x40
 80107d6:	d86f      	bhi.n	80108b8 <HAL_TIM_ConfigClockSource+0x16c>
 80107d8:	2b30      	cmp	r3, #48	@ 0x30
 80107da:	d064      	beq.n	80108a6 <HAL_TIM_ConfigClockSource+0x15a>
 80107dc:	2b30      	cmp	r3, #48	@ 0x30
 80107de:	d86b      	bhi.n	80108b8 <HAL_TIM_ConfigClockSource+0x16c>
 80107e0:	2b20      	cmp	r3, #32
 80107e2:	d060      	beq.n	80108a6 <HAL_TIM_ConfigClockSource+0x15a>
 80107e4:	2b20      	cmp	r3, #32
 80107e6:	d867      	bhi.n	80108b8 <HAL_TIM_ConfigClockSource+0x16c>
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d05c      	beq.n	80108a6 <HAL_TIM_ConfigClockSource+0x15a>
 80107ec:	2b10      	cmp	r3, #16
 80107ee:	d05a      	beq.n	80108a6 <HAL_TIM_ConfigClockSource+0x15a>
 80107f0:	e062      	b.n	80108b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010802:	f000 fd3f 	bl	8011284 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010814:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	68ba      	ldr	r2, [r7, #8]
 801081c:	609a      	str	r2, [r3, #8]
      break;
 801081e:	e04f      	b.n	80108c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8010830:	f000 fd28 	bl	8011284 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	689a      	ldr	r2, [r3, #8]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8010842:	609a      	str	r2, [r3, #8]
      break;
 8010844:	e03c      	b.n	80108c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010852:	461a      	mov	r2, r3
 8010854:	f000 fbe6 	bl	8011024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	2150      	movs	r1, #80	@ 0x50
 801085e:	4618      	mov	r0, r3
 8010860:	f000 fcf5 	bl	801124e <TIM_ITRx_SetConfig>
      break;
 8010864:	e02c      	b.n	80108c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010872:	461a      	mov	r2, r3
 8010874:	f000 fc42 	bl	80110fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2160      	movs	r1, #96	@ 0x60
 801087e:	4618      	mov	r0, r3
 8010880:	f000 fce5 	bl	801124e <TIM_ITRx_SetConfig>
      break;
 8010884:	e01c      	b.n	80108c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010892:	461a      	mov	r2, r3
 8010894:	f000 fbc6 	bl	8011024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2140      	movs	r1, #64	@ 0x40
 801089e:	4618      	mov	r0, r3
 80108a0:	f000 fcd5 	bl	801124e <TIM_ITRx_SetConfig>
      break;
 80108a4:	e00c      	b.n	80108c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681a      	ldr	r2, [r3, #0]
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4619      	mov	r1, r3
 80108b0:	4610      	mov	r0, r2
 80108b2:	f000 fccc 	bl	801124e <TIM_ITRx_SetConfig>
      break;
 80108b6:	e003      	b.n	80108c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80108b8:	2301      	movs	r3, #1
 80108ba:	73fb      	strb	r3, [r7, #15]
      break;
 80108bc:	e000      	b.n	80108c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80108be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2201      	movs	r2, #1
 80108c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	2200      	movs	r2, #0
 80108cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80108d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}

080108da <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80108da:	b580      	push	{r7, lr}
 80108dc:	b082      	sub	sp, #8
 80108de:	af00      	add	r7, sp, #0
 80108e0:	6078      	str	r0, [r7, #4]
 80108e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d101      	bne.n	80108f2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80108ee:	2302      	movs	r3, #2
 80108f0:	e031      	b.n	8010956 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2201      	movs	r2, #1
 80108f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2202      	movs	r2, #2
 80108fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8010902:	6839      	ldr	r1, [r7, #0]
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f000 fa87 	bl	8010e18 <TIM_SlaveTimer_SetConfig>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d009      	beq.n	8010924 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2201      	movs	r2, #1
 8010914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8010920:	2301      	movs	r3, #1
 8010922:	e018      	b.n	8010956 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	68da      	ldr	r2, [r3, #12]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010932:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	68da      	ldr	r2, [r3, #12]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8010942:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2201      	movs	r2, #1
 8010948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2200      	movs	r2, #0
 8010950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010954:	2300      	movs	r3, #0
}
 8010956:	4618      	mov	r0, r3
 8010958:	3708      	adds	r7, #8
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
	...

08010960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010960:	b480      	push	{r7}
 8010962:	b085      	sub	sp, #20
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4a46      	ldr	r2, [pc, #280]	@ (8010a8c <TIM_Base_SetConfig+0x12c>)
 8010974:	4293      	cmp	r3, r2
 8010976:	d013      	beq.n	80109a0 <TIM_Base_SetConfig+0x40>
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801097e:	d00f      	beq.n	80109a0 <TIM_Base_SetConfig+0x40>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a43      	ldr	r2, [pc, #268]	@ (8010a90 <TIM_Base_SetConfig+0x130>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d00b      	beq.n	80109a0 <TIM_Base_SetConfig+0x40>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4a42      	ldr	r2, [pc, #264]	@ (8010a94 <TIM_Base_SetConfig+0x134>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d007      	beq.n	80109a0 <TIM_Base_SetConfig+0x40>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a41      	ldr	r2, [pc, #260]	@ (8010a98 <TIM_Base_SetConfig+0x138>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d003      	beq.n	80109a0 <TIM_Base_SetConfig+0x40>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4a40      	ldr	r2, [pc, #256]	@ (8010a9c <TIM_Base_SetConfig+0x13c>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d108      	bne.n	80109b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	685b      	ldr	r3, [r3, #4]
 80109ac:	68fa      	ldr	r2, [r7, #12]
 80109ae:	4313      	orrs	r3, r2
 80109b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	4a35      	ldr	r2, [pc, #212]	@ (8010a8c <TIM_Base_SetConfig+0x12c>)
 80109b6:	4293      	cmp	r3, r2
 80109b8:	d02b      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80109c0:	d027      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4a32      	ldr	r2, [pc, #200]	@ (8010a90 <TIM_Base_SetConfig+0x130>)
 80109c6:	4293      	cmp	r3, r2
 80109c8:	d023      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4a31      	ldr	r2, [pc, #196]	@ (8010a94 <TIM_Base_SetConfig+0x134>)
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d01f      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4a30      	ldr	r2, [pc, #192]	@ (8010a98 <TIM_Base_SetConfig+0x138>)
 80109d6:	4293      	cmp	r3, r2
 80109d8:	d01b      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	4a2f      	ldr	r2, [pc, #188]	@ (8010a9c <TIM_Base_SetConfig+0x13c>)
 80109de:	4293      	cmp	r3, r2
 80109e0:	d017      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	4a2e      	ldr	r2, [pc, #184]	@ (8010aa0 <TIM_Base_SetConfig+0x140>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d013      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	4a2d      	ldr	r2, [pc, #180]	@ (8010aa4 <TIM_Base_SetConfig+0x144>)
 80109ee:	4293      	cmp	r3, r2
 80109f0:	d00f      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	4a2c      	ldr	r2, [pc, #176]	@ (8010aa8 <TIM_Base_SetConfig+0x148>)
 80109f6:	4293      	cmp	r3, r2
 80109f8:	d00b      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4a2b      	ldr	r2, [pc, #172]	@ (8010aac <TIM_Base_SetConfig+0x14c>)
 80109fe:	4293      	cmp	r3, r2
 8010a00:	d007      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	4a2a      	ldr	r2, [pc, #168]	@ (8010ab0 <TIM_Base_SetConfig+0x150>)
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d003      	beq.n	8010a12 <TIM_Base_SetConfig+0xb2>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4a29      	ldr	r2, [pc, #164]	@ (8010ab4 <TIM_Base_SetConfig+0x154>)
 8010a0e:	4293      	cmp	r3, r2
 8010a10:	d108      	bne.n	8010a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	68fa      	ldr	r2, [r7, #12]
 8010a20:	4313      	orrs	r3, r2
 8010a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	695b      	ldr	r3, [r3, #20]
 8010a2e:	4313      	orrs	r3, r2
 8010a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010a38:	683b      	ldr	r3, [r7, #0]
 8010a3a:	689a      	ldr	r2, [r3, #8]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4a10      	ldr	r2, [pc, #64]	@ (8010a8c <TIM_Base_SetConfig+0x12c>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d003      	beq.n	8010a58 <TIM_Base_SetConfig+0xf8>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a12      	ldr	r2, [pc, #72]	@ (8010a9c <TIM_Base_SetConfig+0x13c>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d103      	bne.n	8010a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	691a      	ldr	r2, [r3, #16]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2201      	movs	r2, #1
 8010a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	691b      	ldr	r3, [r3, #16]
 8010a6a:	f003 0301 	and.w	r3, r3, #1
 8010a6e:	2b01      	cmp	r3, #1
 8010a70:	d105      	bne.n	8010a7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	691b      	ldr	r3, [r3, #16]
 8010a76:	f023 0201 	bic.w	r2, r3, #1
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	611a      	str	r2, [r3, #16]
  }
}
 8010a7e:	bf00      	nop
 8010a80:	3714      	adds	r7, #20
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop
 8010a8c:	40010000 	.word	0x40010000
 8010a90:	40000400 	.word	0x40000400
 8010a94:	40000800 	.word	0x40000800
 8010a98:	40000c00 	.word	0x40000c00
 8010a9c:	40010400 	.word	0x40010400
 8010aa0:	40014000 	.word	0x40014000
 8010aa4:	40014400 	.word	0x40014400
 8010aa8:	40014800 	.word	0x40014800
 8010aac:	40001800 	.word	0x40001800
 8010ab0:	40001c00 	.word	0x40001c00
 8010ab4:	40002000 	.word	0x40002000

08010ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b087      	sub	sp, #28
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6a1b      	ldr	r3, [r3, #32]
 8010ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6a1b      	ldr	r3, [r3, #32]
 8010acc:	f023 0201 	bic.w	r2, r3, #1
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	699b      	ldr	r3, [r3, #24]
 8010ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f023 0303 	bic.w	r3, r3, #3
 8010aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	68fa      	ldr	r2, [r7, #12]
 8010af6:	4313      	orrs	r3, r2
 8010af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	f023 0302 	bic.w	r3, r3, #2
 8010b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	689b      	ldr	r3, [r3, #8]
 8010b06:	697a      	ldr	r2, [r7, #20]
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4a20      	ldr	r2, [pc, #128]	@ (8010b90 <TIM_OC1_SetConfig+0xd8>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d003      	beq.n	8010b1c <TIM_OC1_SetConfig+0x64>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	4a1f      	ldr	r2, [pc, #124]	@ (8010b94 <TIM_OC1_SetConfig+0xdc>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d10c      	bne.n	8010b36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	f023 0308 	bic.w	r3, r3, #8
 8010b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	697a      	ldr	r2, [r7, #20]
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	f023 0304 	bic.w	r3, r3, #4
 8010b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	4a15      	ldr	r2, [pc, #84]	@ (8010b90 <TIM_OC1_SetConfig+0xd8>)
 8010b3a:	4293      	cmp	r3, r2
 8010b3c:	d003      	beq.n	8010b46 <TIM_OC1_SetConfig+0x8e>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	4a14      	ldr	r2, [pc, #80]	@ (8010b94 <TIM_OC1_SetConfig+0xdc>)
 8010b42:	4293      	cmp	r3, r2
 8010b44:	d111      	bne.n	8010b6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010b4e:	693b      	ldr	r3, [r7, #16]
 8010b50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	695b      	ldr	r3, [r3, #20]
 8010b5a:	693a      	ldr	r2, [r7, #16]
 8010b5c:	4313      	orrs	r3, r2
 8010b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	699b      	ldr	r3, [r3, #24]
 8010b64:	693a      	ldr	r2, [r7, #16]
 8010b66:	4313      	orrs	r3, r2
 8010b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	693a      	ldr	r2, [r7, #16]
 8010b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	68fa      	ldr	r2, [r7, #12]
 8010b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	685a      	ldr	r2, [r3, #4]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	697a      	ldr	r2, [r7, #20]
 8010b82:	621a      	str	r2, [r3, #32]
}
 8010b84:	bf00      	nop
 8010b86:	371c      	adds	r7, #28
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr
 8010b90:	40010000 	.word	0x40010000
 8010b94:	40010400 	.word	0x40010400

08010b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b087      	sub	sp, #28
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6a1b      	ldr	r3, [r3, #32]
 8010ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6a1b      	ldr	r3, [r3, #32]
 8010bac:	f023 0210 	bic.w	r2, r3, #16
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	699b      	ldr	r3, [r3, #24]
 8010bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	021b      	lsls	r3, r3, #8
 8010bd6:	68fa      	ldr	r2, [r7, #12]
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	f023 0320 	bic.w	r3, r3, #32
 8010be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	689b      	ldr	r3, [r3, #8]
 8010be8:	011b      	lsls	r3, r3, #4
 8010bea:	697a      	ldr	r2, [r7, #20]
 8010bec:	4313      	orrs	r3, r2
 8010bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a22      	ldr	r2, [pc, #136]	@ (8010c7c <TIM_OC2_SetConfig+0xe4>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d003      	beq.n	8010c00 <TIM_OC2_SetConfig+0x68>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	4a21      	ldr	r2, [pc, #132]	@ (8010c80 <TIM_OC2_SetConfig+0xe8>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d10d      	bne.n	8010c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	011b      	lsls	r3, r3, #4
 8010c0e:	697a      	ldr	r2, [r7, #20]
 8010c10:	4313      	orrs	r3, r2
 8010c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	4a17      	ldr	r2, [pc, #92]	@ (8010c7c <TIM_OC2_SetConfig+0xe4>)
 8010c20:	4293      	cmp	r3, r2
 8010c22:	d003      	beq.n	8010c2c <TIM_OC2_SetConfig+0x94>
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	4a16      	ldr	r2, [pc, #88]	@ (8010c80 <TIM_OC2_SetConfig+0xe8>)
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d113      	bne.n	8010c54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	695b      	ldr	r3, [r3, #20]
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	693a      	ldr	r2, [r7, #16]
 8010c44:	4313      	orrs	r3, r2
 8010c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	699b      	ldr	r3, [r3, #24]
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	693a      	ldr	r2, [r7, #16]
 8010c50:	4313      	orrs	r3, r2
 8010c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	693a      	ldr	r2, [r7, #16]
 8010c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	697a      	ldr	r2, [r7, #20]
 8010c6c:	621a      	str	r2, [r3, #32]
}
 8010c6e:	bf00      	nop
 8010c70:	371c      	adds	r7, #28
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	40010000 	.word	0x40010000
 8010c80:	40010400 	.word	0x40010400

08010c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b087      	sub	sp, #28
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6a1b      	ldr	r3, [r3, #32]
 8010c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6a1b      	ldr	r3, [r3, #32]
 8010c98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	69db      	ldr	r3, [r3, #28]
 8010caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	f023 0303 	bic.w	r3, r3, #3
 8010cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8010ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	689b      	ldr	r3, [r3, #8]
 8010cd2:	021b      	lsls	r3, r3, #8
 8010cd4:	697a      	ldr	r2, [r7, #20]
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4a21      	ldr	r2, [pc, #132]	@ (8010d64 <TIM_OC3_SetConfig+0xe0>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d003      	beq.n	8010cea <TIM_OC3_SetConfig+0x66>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	4a20      	ldr	r2, [pc, #128]	@ (8010d68 <TIM_OC3_SetConfig+0xe4>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	d10d      	bne.n	8010d06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010cea:	697b      	ldr	r3, [r7, #20]
 8010cec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	68db      	ldr	r3, [r3, #12]
 8010cf6:	021b      	lsls	r3, r3, #8
 8010cf8:	697a      	ldr	r2, [r7, #20]
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8010d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4a16      	ldr	r2, [pc, #88]	@ (8010d64 <TIM_OC3_SetConfig+0xe0>)
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d003      	beq.n	8010d16 <TIM_OC3_SetConfig+0x92>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	4a15      	ldr	r2, [pc, #84]	@ (8010d68 <TIM_OC3_SetConfig+0xe4>)
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d113      	bne.n	8010d3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	695b      	ldr	r3, [r3, #20]
 8010d2a:	011b      	lsls	r3, r3, #4
 8010d2c:	693a      	ldr	r2, [r7, #16]
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	699b      	ldr	r3, [r3, #24]
 8010d36:	011b      	lsls	r3, r3, #4
 8010d38:	693a      	ldr	r2, [r7, #16]
 8010d3a:	4313      	orrs	r3, r2
 8010d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	693a      	ldr	r2, [r7, #16]
 8010d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	68fa      	ldr	r2, [r7, #12]
 8010d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	685a      	ldr	r2, [r3, #4]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	697a      	ldr	r2, [r7, #20]
 8010d56:	621a      	str	r2, [r3, #32]
}
 8010d58:	bf00      	nop
 8010d5a:	371c      	adds	r7, #28
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d62:	4770      	bx	lr
 8010d64:	40010000 	.word	0x40010000
 8010d68:	40010400 	.word	0x40010400

08010d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b087      	sub	sp, #28
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6a1b      	ldr	r3, [r3, #32]
 8010d7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6a1b      	ldr	r3, [r3, #32]
 8010d80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	69db      	ldr	r3, [r3, #28]
 8010d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010da4:	683b      	ldr	r3, [r7, #0]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	021b      	lsls	r3, r3, #8
 8010daa:	68fa      	ldr	r2, [r7, #12]
 8010dac:	4313      	orrs	r3, r2
 8010dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	689b      	ldr	r3, [r3, #8]
 8010dbc:	031b      	lsls	r3, r3, #12
 8010dbe:	693a      	ldr	r2, [r7, #16]
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4a12      	ldr	r2, [pc, #72]	@ (8010e10 <TIM_OC4_SetConfig+0xa4>)
 8010dc8:	4293      	cmp	r3, r2
 8010dca:	d003      	beq.n	8010dd4 <TIM_OC4_SetConfig+0x68>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	4a11      	ldr	r2, [pc, #68]	@ (8010e14 <TIM_OC4_SetConfig+0xa8>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d109      	bne.n	8010de8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	695b      	ldr	r3, [r3, #20]
 8010de0:	019b      	lsls	r3, r3, #6
 8010de2:	697a      	ldr	r2, [r7, #20]
 8010de4:	4313      	orrs	r3, r2
 8010de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	697a      	ldr	r2, [r7, #20]
 8010dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	68fa      	ldr	r2, [r7, #12]
 8010df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	685a      	ldr	r2, [r3, #4]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	693a      	ldr	r2, [r7, #16]
 8010e00:	621a      	str	r2, [r3, #32]
}
 8010e02:	bf00      	nop
 8010e04:	371c      	adds	r7, #28
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop
 8010e10:	40010000 	.word	0x40010000
 8010e14:	40010400 	.word	0x40010400

08010e18 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b086      	sub	sp, #24
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010e22:	2300      	movs	r3, #0
 8010e24:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	689b      	ldr	r3, [r3, #8]
 8010e2c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e34:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	693a      	ldr	r2, [r7, #16]
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	f023 0307 	bic.w	r3, r3, #7
 8010e46:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	693a      	ldr	r2, [r7, #16]
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	693a      	ldr	r2, [r7, #16]
 8010e58:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	2b70      	cmp	r3, #112	@ 0x70
 8010e60:	d01a      	beq.n	8010e98 <TIM_SlaveTimer_SetConfig+0x80>
 8010e62:	2b70      	cmp	r3, #112	@ 0x70
 8010e64:	d860      	bhi.n	8010f28 <TIM_SlaveTimer_SetConfig+0x110>
 8010e66:	2b60      	cmp	r3, #96	@ 0x60
 8010e68:	d054      	beq.n	8010f14 <TIM_SlaveTimer_SetConfig+0xfc>
 8010e6a:	2b60      	cmp	r3, #96	@ 0x60
 8010e6c:	d85c      	bhi.n	8010f28 <TIM_SlaveTimer_SetConfig+0x110>
 8010e6e:	2b50      	cmp	r3, #80	@ 0x50
 8010e70:	d046      	beq.n	8010f00 <TIM_SlaveTimer_SetConfig+0xe8>
 8010e72:	2b50      	cmp	r3, #80	@ 0x50
 8010e74:	d858      	bhi.n	8010f28 <TIM_SlaveTimer_SetConfig+0x110>
 8010e76:	2b40      	cmp	r3, #64	@ 0x40
 8010e78:	d019      	beq.n	8010eae <TIM_SlaveTimer_SetConfig+0x96>
 8010e7a:	2b40      	cmp	r3, #64	@ 0x40
 8010e7c:	d854      	bhi.n	8010f28 <TIM_SlaveTimer_SetConfig+0x110>
 8010e7e:	2b30      	cmp	r3, #48	@ 0x30
 8010e80:	d055      	beq.n	8010f2e <TIM_SlaveTimer_SetConfig+0x116>
 8010e82:	2b30      	cmp	r3, #48	@ 0x30
 8010e84:	d850      	bhi.n	8010f28 <TIM_SlaveTimer_SetConfig+0x110>
 8010e86:	2b20      	cmp	r3, #32
 8010e88:	d051      	beq.n	8010f2e <TIM_SlaveTimer_SetConfig+0x116>
 8010e8a:	2b20      	cmp	r3, #32
 8010e8c:	d84c      	bhi.n	8010f28 <TIM_SlaveTimer_SetConfig+0x110>
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d04d      	beq.n	8010f2e <TIM_SlaveTimer_SetConfig+0x116>
 8010e92:	2b10      	cmp	r3, #16
 8010e94:	d04b      	beq.n	8010f2e <TIM_SlaveTimer_SetConfig+0x116>
 8010e96:	e047      	b.n	8010f28 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8010ea8:	f000 f9ec 	bl	8011284 <TIM_ETR_SetConfig>
      break;
 8010eac:	e040      	b.n	8010f30 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b05      	cmp	r3, #5
 8010eb4:	d101      	bne.n	8010eba <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e03b      	b.n	8010f32 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	6a1b      	ldr	r3, [r3, #32]
 8010ec0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	6a1a      	ldr	r2, [r3, #32]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	f022 0201 	bic.w	r2, r2, #1
 8010ed0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	699b      	ldr	r3, [r3, #24]
 8010ed8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010ee0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	691b      	ldr	r3, [r3, #16]
 8010ee6:	011b      	lsls	r3, r3, #4
 8010ee8:	68ba      	ldr	r2, [r7, #8]
 8010eea:	4313      	orrs	r3, r2
 8010eec:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	68fa      	ldr	r2, [r7, #12]
 8010efc:	621a      	str	r2, [r3, #32]
      break;
 8010efe:	e017      	b.n	8010f30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	f000 f889 	bl	8011024 <TIM_TI1_ConfigInputStage>
      break;
 8010f12:	e00d      	b.n	8010f30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010f20:	461a      	mov	r2, r3
 8010f22:	f000 f8eb 	bl	80110fc <TIM_TI2_ConfigInputStage>
      break;
 8010f26:	e003      	b.n	8010f30 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8010f28:	2301      	movs	r3, #1
 8010f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8010f2c:	e000      	b.n	8010f30 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8010f2e:	bf00      	nop
  }

  return status;
 8010f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	3718      	adds	r7, #24
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
	...

08010f3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b087      	sub	sp, #28
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	60b9      	str	r1, [r7, #8]
 8010f46:	607a      	str	r2, [r7, #4]
 8010f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	6a1b      	ldr	r3, [r3, #32]
 8010f4e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	6a1b      	ldr	r3, [r3, #32]
 8010f54:	f023 0201 	bic.w	r2, r3, #1
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	699b      	ldr	r3, [r3, #24]
 8010f60:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	4a28      	ldr	r2, [pc, #160]	@ (8011008 <TIM_TI1_SetConfig+0xcc>)
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d01b      	beq.n	8010fa2 <TIM_TI1_SetConfig+0x66>
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f70:	d017      	beq.n	8010fa2 <TIM_TI1_SetConfig+0x66>
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	4a25      	ldr	r2, [pc, #148]	@ (801100c <TIM_TI1_SetConfig+0xd0>)
 8010f76:	4293      	cmp	r3, r2
 8010f78:	d013      	beq.n	8010fa2 <TIM_TI1_SetConfig+0x66>
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	4a24      	ldr	r2, [pc, #144]	@ (8011010 <TIM_TI1_SetConfig+0xd4>)
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d00f      	beq.n	8010fa2 <TIM_TI1_SetConfig+0x66>
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	4a23      	ldr	r2, [pc, #140]	@ (8011014 <TIM_TI1_SetConfig+0xd8>)
 8010f86:	4293      	cmp	r3, r2
 8010f88:	d00b      	beq.n	8010fa2 <TIM_TI1_SetConfig+0x66>
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	4a22      	ldr	r2, [pc, #136]	@ (8011018 <TIM_TI1_SetConfig+0xdc>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d007      	beq.n	8010fa2 <TIM_TI1_SetConfig+0x66>
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	4a21      	ldr	r2, [pc, #132]	@ (801101c <TIM_TI1_SetConfig+0xe0>)
 8010f96:	4293      	cmp	r3, r2
 8010f98:	d003      	beq.n	8010fa2 <TIM_TI1_SetConfig+0x66>
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	4a20      	ldr	r2, [pc, #128]	@ (8011020 <TIM_TI1_SetConfig+0xe4>)
 8010f9e:	4293      	cmp	r3, r2
 8010fa0:	d101      	bne.n	8010fa6 <TIM_TI1_SetConfig+0x6a>
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	e000      	b.n	8010fa8 <TIM_TI1_SetConfig+0x6c>
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d008      	beq.n	8010fbe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	f023 0303 	bic.w	r3, r3, #3
 8010fb2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8010fb4:	697a      	ldr	r2, [r7, #20]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	617b      	str	r3, [r7, #20]
 8010fbc:	e003      	b.n	8010fc6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	f043 0301 	orr.w	r3, r3, #1
 8010fc4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	011b      	lsls	r3, r3, #4
 8010fd2:	b2db      	uxtb	r3, r3
 8010fd4:	697a      	ldr	r2, [r7, #20]
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	f023 030a 	bic.w	r3, r3, #10
 8010fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	f003 030a 	and.w	r3, r3, #10
 8010fe8:	693a      	ldr	r2, [r7, #16]
 8010fea:	4313      	orrs	r3, r2
 8010fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	697a      	ldr	r2, [r7, #20]
 8010ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	693a      	ldr	r2, [r7, #16]
 8010ff8:	621a      	str	r2, [r3, #32]
}
 8010ffa:	bf00      	nop
 8010ffc:	371c      	adds	r7, #28
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	40010000 	.word	0x40010000
 801100c:	40000400 	.word	0x40000400
 8011010:	40000800 	.word	0x40000800
 8011014:	40000c00 	.word	0x40000c00
 8011018:	40010400 	.word	0x40010400
 801101c:	40014000 	.word	0x40014000
 8011020:	40001800 	.word	0x40001800

08011024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011024:	b480      	push	{r7}
 8011026:	b087      	sub	sp, #28
 8011028:	af00      	add	r7, sp, #0
 801102a:	60f8      	str	r0, [r7, #12]
 801102c:	60b9      	str	r1, [r7, #8]
 801102e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	6a1b      	ldr	r3, [r3, #32]
 8011034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	6a1b      	ldr	r3, [r3, #32]
 801103a:	f023 0201 	bic.w	r2, r3, #1
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	699b      	ldr	r3, [r3, #24]
 8011046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801104e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	011b      	lsls	r3, r3, #4
 8011054:	693a      	ldr	r2, [r7, #16]
 8011056:	4313      	orrs	r3, r2
 8011058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	f023 030a 	bic.w	r3, r3, #10
 8011060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011062:	697a      	ldr	r2, [r7, #20]
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	4313      	orrs	r3, r2
 8011068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	693a      	ldr	r2, [r7, #16]
 801106e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	697a      	ldr	r2, [r7, #20]
 8011074:	621a      	str	r2, [r3, #32]
}
 8011076:	bf00      	nop
 8011078:	371c      	adds	r7, #28
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr

08011082 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011082:	b480      	push	{r7}
 8011084:	b087      	sub	sp, #28
 8011086:	af00      	add	r7, sp, #0
 8011088:	60f8      	str	r0, [r7, #12]
 801108a:	60b9      	str	r1, [r7, #8]
 801108c:	607a      	str	r2, [r7, #4]
 801108e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	6a1b      	ldr	r3, [r3, #32]
 8011094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	6a1b      	ldr	r3, [r3, #32]
 801109a:	f023 0210 	bic.w	r2, r3, #16
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	699b      	ldr	r3, [r3, #24]
 80110a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80110ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	021b      	lsls	r3, r3, #8
 80110b4:	693a      	ldr	r2, [r7, #16]
 80110b6:	4313      	orrs	r3, r2
 80110b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80110c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	031b      	lsls	r3, r3, #12
 80110c6:	b29b      	uxth	r3, r3
 80110c8:	693a      	ldr	r2, [r7, #16]
 80110ca:	4313      	orrs	r3, r2
 80110cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80110d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80110d6:	68bb      	ldr	r3, [r7, #8]
 80110d8:	011b      	lsls	r3, r3, #4
 80110da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80110de:	697a      	ldr	r2, [r7, #20]
 80110e0:	4313      	orrs	r3, r2
 80110e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	693a      	ldr	r2, [r7, #16]
 80110e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	697a      	ldr	r2, [r7, #20]
 80110ee:	621a      	str	r2, [r3, #32]
}
 80110f0:	bf00      	nop
 80110f2:	371c      	adds	r7, #28
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80110fc:	b480      	push	{r7}
 80110fe:	b087      	sub	sp, #28
 8011100:	af00      	add	r7, sp, #0
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	60b9      	str	r1, [r7, #8]
 8011106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	6a1b      	ldr	r3, [r3, #32]
 801110c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	6a1b      	ldr	r3, [r3, #32]
 8011112:	f023 0210 	bic.w	r2, r3, #16
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	699b      	ldr	r3, [r3, #24]
 801111e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	031b      	lsls	r3, r3, #12
 801112c:	693a      	ldr	r2, [r7, #16]
 801112e:	4313      	orrs	r3, r2
 8011130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8011138:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	011b      	lsls	r3, r3, #4
 801113e:	697a      	ldr	r2, [r7, #20]
 8011140:	4313      	orrs	r3, r2
 8011142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	693a      	ldr	r2, [r7, #16]
 8011148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	697a      	ldr	r2, [r7, #20]
 801114e:	621a      	str	r2, [r3, #32]
}
 8011150:	bf00      	nop
 8011152:	371c      	adds	r7, #28
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801115c:	b480      	push	{r7}
 801115e:	b087      	sub	sp, #28
 8011160:	af00      	add	r7, sp, #0
 8011162:	60f8      	str	r0, [r7, #12]
 8011164:	60b9      	str	r1, [r7, #8]
 8011166:	607a      	str	r2, [r7, #4]
 8011168:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	6a1b      	ldr	r3, [r3, #32]
 801116e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6a1b      	ldr	r3, [r3, #32]
 8011174:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	69db      	ldr	r3, [r3, #28]
 8011180:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	f023 0303 	bic.w	r3, r3, #3
 8011188:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 801118a:	693a      	ldr	r2, [r7, #16]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	4313      	orrs	r3, r2
 8011190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8011198:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	011b      	lsls	r3, r3, #4
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	693a      	ldr	r2, [r7, #16]
 80111a2:	4313      	orrs	r3, r2
 80111a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80111ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	021b      	lsls	r3, r3, #8
 80111b2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80111b6:	697a      	ldr	r2, [r7, #20]
 80111b8:	4313      	orrs	r3, r2
 80111ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	693a      	ldr	r2, [r7, #16]
 80111c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	697a      	ldr	r2, [r7, #20]
 80111c6:	621a      	str	r2, [r3, #32]
}
 80111c8:	bf00      	nop
 80111ca:	371c      	adds	r7, #28
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b087      	sub	sp, #28
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6a1b      	ldr	r3, [r3, #32]
 80111e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	6a1b      	ldr	r3, [r3, #32]
 80111ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	69db      	ldr	r3, [r3, #28]
 80111f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80111fa:	693b      	ldr	r3, [r7, #16]
 80111fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011200:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	021b      	lsls	r3, r3, #8
 8011206:	693a      	ldr	r2, [r7, #16]
 8011208:	4313      	orrs	r3, r2
 801120a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011212:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	031b      	lsls	r3, r3, #12
 8011218:	b29b      	uxth	r3, r3
 801121a:	693a      	ldr	r2, [r7, #16]
 801121c:	4313      	orrs	r3, r2
 801121e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8011226:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	031b      	lsls	r3, r3, #12
 801122c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8011230:	697a      	ldr	r2, [r7, #20]
 8011232:	4313      	orrs	r3, r2
 8011234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	693a      	ldr	r2, [r7, #16]
 801123a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	697a      	ldr	r2, [r7, #20]
 8011240:	621a      	str	r2, [r3, #32]
}
 8011242:	bf00      	nop
 8011244:	371c      	adds	r7, #28
 8011246:	46bd      	mov	sp, r7
 8011248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124c:	4770      	bx	lr

0801124e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801124e:	b480      	push	{r7}
 8011250:	b085      	sub	sp, #20
 8011252:	af00      	add	r7, sp, #0
 8011254:	6078      	str	r0, [r7, #4]
 8011256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	689b      	ldr	r3, [r3, #8]
 801125c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011266:	683a      	ldr	r2, [r7, #0]
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	4313      	orrs	r3, r2
 801126c:	f043 0307 	orr.w	r3, r3, #7
 8011270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	68fa      	ldr	r2, [r7, #12]
 8011276:	609a      	str	r2, [r3, #8]
}
 8011278:	bf00      	nop
 801127a:	3714      	adds	r7, #20
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011284:	b480      	push	{r7}
 8011286:	b087      	sub	sp, #28
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
 8011290:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	689b      	ldr	r3, [r3, #8]
 8011296:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801129e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	021a      	lsls	r2, r3, #8
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	431a      	orrs	r2, r3
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	4313      	orrs	r3, r2
 80112ac:	697a      	ldr	r2, [r7, #20]
 80112ae:	4313      	orrs	r3, r2
 80112b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	697a      	ldr	r2, [r7, #20]
 80112b6:	609a      	str	r2, [r3, #8]
}
 80112b8:	bf00      	nop
 80112ba:	371c      	adds	r7, #28
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b087      	sub	sp, #28
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80112d0:	68bb      	ldr	r3, [r7, #8]
 80112d2:	f003 031f 	and.w	r3, r3, #31
 80112d6:	2201      	movs	r2, #1
 80112d8:	fa02 f303 	lsl.w	r3, r2, r3
 80112dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6a1a      	ldr	r2, [r3, #32]
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	43db      	mvns	r3, r3
 80112e6:	401a      	ands	r2, r3
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6a1a      	ldr	r2, [r3, #32]
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	f003 031f 	and.w	r3, r3, #31
 80112f6:	6879      	ldr	r1, [r7, #4]
 80112f8:	fa01 f303 	lsl.w	r3, r1, r3
 80112fc:	431a      	orrs	r2, r3
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	621a      	str	r2, [r3, #32]
}
 8011302:	bf00      	nop
 8011304:	371c      	adds	r7, #28
 8011306:	46bd      	mov	sp, r7
 8011308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130c:	4770      	bx	lr

0801130e <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 801130e:	b480      	push	{r7}
 8011310:	b083      	sub	sp, #12
 8011312:	af00      	add	r7, sp, #0
 8011314:	6078      	str	r0, [r7, #4]
 8011316:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d123      	bne.n	8011368 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8011328:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801132c:	683a      	ldr	r2, [r7, #0]
 801132e:	6851      	ldr	r1, [r2, #4]
 8011330:	683a      	ldr	r2, [r7, #0]
 8011332:	6892      	ldr	r2, [r2, #8]
 8011334:	4311      	orrs	r1, r2
 8011336:	683a      	ldr	r2, [r7, #0]
 8011338:	68d2      	ldr	r2, [r2, #12]
 801133a:	4311      	orrs	r1, r2
 801133c:	683a      	ldr	r2, [r7, #0]
 801133e:	6912      	ldr	r2, [r2, #16]
 8011340:	4311      	orrs	r1, r2
 8011342:	683a      	ldr	r2, [r7, #0]
 8011344:	6952      	ldr	r2, [r2, #20]
 8011346:	4311      	orrs	r1, r2
 8011348:	683a      	ldr	r2, [r7, #0]
 801134a:	6992      	ldr	r2, [r2, #24]
 801134c:	4311      	orrs	r1, r2
 801134e:	683a      	ldr	r2, [r7, #0]
 8011350:	69d2      	ldr	r2, [r2, #28]
 8011352:	4311      	orrs	r1, r2
 8011354:	683a      	ldr	r2, [r7, #0]
 8011356:	6a12      	ldr	r2, [r2, #32]
 8011358:	4311      	orrs	r1, r2
 801135a:	683a      	ldr	r2, [r7, #0]
 801135c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801135e:	430a      	orrs	r2, r1
 8011360:	431a      	orrs	r2, r3
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	601a      	str	r2, [r3, #0]
 8011366:	e028      	b.n	80113ba <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	69d9      	ldr	r1, [r3, #28]
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	6a1b      	ldr	r3, [r3, #32]
 8011378:	4319      	orrs	r1, r3
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801137e:	430b      	orrs	r3, r1
 8011380:	431a      	orrs	r2, r3
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 801138e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011392:	683a      	ldr	r2, [r7, #0]
 8011394:	6851      	ldr	r1, [r2, #4]
 8011396:	683a      	ldr	r2, [r7, #0]
 8011398:	6892      	ldr	r2, [r2, #8]
 801139a:	4311      	orrs	r1, r2
 801139c:	683a      	ldr	r2, [r7, #0]
 801139e:	68d2      	ldr	r2, [r2, #12]
 80113a0:	4311      	orrs	r1, r2
 80113a2:	683a      	ldr	r2, [r7, #0]
 80113a4:	6912      	ldr	r2, [r2, #16]
 80113a6:	4311      	orrs	r1, r2
 80113a8:	683a      	ldr	r2, [r7, #0]
 80113aa:	6952      	ldr	r2, [r2, #20]
 80113ac:	4311      	orrs	r1, r2
 80113ae:	683a      	ldr	r2, [r7, #0]
 80113b0:	6992      	ldr	r2, [r2, #24]
 80113b2:	430a      	orrs	r2, r1
 80113b4:	431a      	orrs	r2, r3
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80113ba:	2300      	movs	r3, #0
}
 80113bc:	4618      	mov	r0, r3
 80113be:	370c      	adds	r7, #12
 80113c0:	46bd      	mov	sp, r7
 80113c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c6:	4770      	bx	lr

080113c8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b085      	sub	sp, #20
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d128      	bne.n	801142c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	689b      	ldr	r3, [r3, #8]
 80113de:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	1e59      	subs	r1, r3, #1
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	3b01      	subs	r3, #1
 80113ee:	011b      	lsls	r3, r3, #4
 80113f0:	4319      	orrs	r1, r3
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	689b      	ldr	r3, [r3, #8]
 80113f6:	3b01      	subs	r3, #1
 80113f8:	021b      	lsls	r3, r3, #8
 80113fa:	4319      	orrs	r1, r3
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	68db      	ldr	r3, [r3, #12]
 8011400:	3b01      	subs	r3, #1
 8011402:	031b      	lsls	r3, r3, #12
 8011404:	4319      	orrs	r1, r3
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	691b      	ldr	r3, [r3, #16]
 801140a:	3b01      	subs	r3, #1
 801140c:	041b      	lsls	r3, r3, #16
 801140e:	4319      	orrs	r1, r3
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	695b      	ldr	r3, [r3, #20]
 8011414:	3b01      	subs	r3, #1
 8011416:	051b      	lsls	r3, r3, #20
 8011418:	4319      	orrs	r1, r3
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	699b      	ldr	r3, [r3, #24]
 801141e:	3b01      	subs	r3, #1
 8011420:	061b      	lsls	r3, r3, #24
 8011422:	430b      	orrs	r3, r1
 8011424:	431a      	orrs	r2, r3
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	609a      	str	r2, [r3, #8]
 801142a:	e02f      	b.n	801148c <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	689b      	ldr	r3, [r3, #8]
 8011430:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8011434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8011438:	68ba      	ldr	r2, [r7, #8]
 801143a:	68d2      	ldr	r2, [r2, #12]
 801143c:	3a01      	subs	r2, #1
 801143e:	0311      	lsls	r1, r2, #12
 8011440:	68ba      	ldr	r2, [r7, #8]
 8011442:	6952      	ldr	r2, [r2, #20]
 8011444:	3a01      	subs	r2, #1
 8011446:	0512      	lsls	r2, r2, #20
 8011448:	430a      	orrs	r2, r1
 801144a:	431a      	orrs	r2, r3
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	1e59      	subs	r1, r3, #1
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	3b01      	subs	r3, #1
 8011464:	011b      	lsls	r3, r3, #4
 8011466:	4319      	orrs	r1, r3
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	3b01      	subs	r3, #1
 801146e:	021b      	lsls	r3, r3, #8
 8011470:	4319      	orrs	r1, r3
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	691b      	ldr	r3, [r3, #16]
 8011476:	3b01      	subs	r3, #1
 8011478:	041b      	lsls	r3, r3, #16
 801147a:	4319      	orrs	r1, r3
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	699b      	ldr	r3, [r3, #24]
 8011480:	3b01      	subs	r3, #1
 8011482:	061b      	lsls	r3, r3, #24
 8011484:	430b      	orrs	r3, r1
 8011486:	431a      	orrs	r2, r3
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 801148c:	2300      	movs	r3, #0
}
 801148e:	4618      	mov	r0, r3
 8011490:	3714      	adds	r7, #20
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801149a:	b580      	push	{r7, lr}
 801149c:	b086      	sub	sp, #24
 801149e:	af00      	add	r7, sp, #0
 80114a0:	60f8      	str	r0, [r7, #12]
 80114a2:	60b9      	str	r1, [r7, #8]
 80114a4:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80114a6:	2300      	movs	r3, #0
 80114a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	691b      	ldr	r3, [r3, #16]
 80114ae:	0d9b      	lsrs	r3, r3, #22
 80114b0:	059b      	lsls	r3, r3, #22
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	6811      	ldr	r1, [r2, #0]
 80114b6:	68ba      	ldr	r2, [r7, #8]
 80114b8:	6852      	ldr	r2, [r2, #4]
 80114ba:	4311      	orrs	r1, r2
 80114bc:	68ba      	ldr	r2, [r7, #8]
 80114be:	6892      	ldr	r2, [r2, #8]
 80114c0:	3a01      	subs	r2, #1
 80114c2:	0152      	lsls	r2, r2, #5
 80114c4:	4311      	orrs	r1, r2
 80114c6:	68ba      	ldr	r2, [r7, #8]
 80114c8:	68d2      	ldr	r2, [r2, #12]
 80114ca:	0252      	lsls	r2, r2, #9
 80114cc:	430a      	orrs	r2, r1
 80114ce:	431a      	orrs	r2, r3
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80114d4:	f7f6 fbfe 	bl	8007cd4 <HAL_GetTick>
 80114d8:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80114da:	e010      	b.n	80114fe <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114e2:	d00c      	beq.n	80114fe <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d007      	beq.n	80114fa <FMC_SDRAM_SendCommand+0x60>
 80114ea:	f7f6 fbf3 	bl	8007cd4 <HAL_GetTick>
 80114ee:	4602      	mov	r2, r0
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	1ad3      	subs	r3, r2, r3
 80114f4:	687a      	ldr	r2, [r7, #4]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d201      	bcs.n	80114fe <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80114fa:	2303      	movs	r3, #3
 80114fc:	e006      	b.n	801150c <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	699b      	ldr	r3, [r3, #24]
 8011502:	f003 0320 	and.w	r3, r3, #32
 8011506:	2b20      	cmp	r3, #32
 8011508:	d0e8      	beq.n	80114dc <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 801150a:	2300      	movs	r3, #0
}
 801150c:	4618      	mov	r0, r3
 801150e:	3718      	adds	r7, #24
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8011514:	b480      	push	{r7}
 8011516:	b083      	sub	sp, #12
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	695b      	ldr	r3, [r3, #20]
 8011522:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8011526:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 801152a:	683a      	ldr	r2, [r7, #0]
 801152c:	0052      	lsls	r2, r2, #1
 801152e:	431a      	orrs	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8011534:	2300      	movs	r3, #0
}
 8011536:	4618      	mov	r0, r3
 8011538:	370c      	adds	r7, #12
 801153a:	46bd      	mov	sp, r7
 801153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011540:	4770      	bx	lr

08011542 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011542:	b084      	sub	sp, #16
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	f107 001c 	add.w	r0, r7, #28
 8011550:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011554:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011558:	2b01      	cmp	r3, #1
 801155a:	d123      	bne.n	80115a4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011560:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8011570:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011574:	687a      	ldr	r2, [r7, #4]
 8011576:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011584:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011588:	2b01      	cmp	r3, #1
 801158a:	d105      	bne.n	8011598 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	68db      	ldr	r3, [r3, #12]
 8011590:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 f9dc 	bl	8011956 <USB_CoreReset>
 801159e:	4603      	mov	r3, r0
 80115a0:	73fb      	strb	r3, [r7, #15]
 80115a2:	e01b      	b.n	80115dc <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f000 f9d0 	bl	8011956 <USB_CoreReset>
 80115b6:	4603      	mov	r3, r0
 80115b8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80115ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d106      	bne.n	80115d0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80115ce:	e005      	b.n	80115dc <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80115dc:	7fbb      	ldrb	r3, [r7, #30]
 80115de:	2b01      	cmp	r3, #1
 80115e0:	d10b      	bne.n	80115fa <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	689b      	ldr	r3, [r3, #8]
 80115e6:	f043 0206 	orr.w	r2, r3, #6
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	689b      	ldr	r3, [r3, #8]
 80115f2:	f043 0220 	orr.w	r2, r3, #32
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80115fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3710      	adds	r7, #16
 8011600:	46bd      	mov	sp, r7
 8011602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011606:	b004      	add	sp, #16
 8011608:	4770      	bx	lr

0801160a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801160a:	b480      	push	{r7}
 801160c:	b083      	sub	sp, #12
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	689b      	ldr	r3, [r3, #8]
 8011616:	f043 0201 	orr.w	r2, r3, #1
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801161e:	2300      	movs	r3, #0
}
 8011620:	4618      	mov	r0, r3
 8011622:	370c      	adds	r7, #12
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr

0801162c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801162c:	b480      	push	{r7}
 801162e:	b083      	sub	sp, #12
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	689b      	ldr	r3, [r3, #8]
 8011638:	f023 0201 	bic.w	r2, r3, #1
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011640:	2300      	movs	r3, #0
}
 8011642:	4618      	mov	r0, r3
 8011644:	370c      	adds	r7, #12
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr

0801164e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801164e:	b580      	push	{r7, lr}
 8011650:	b084      	sub	sp, #16
 8011652:	af00      	add	r7, sp, #0
 8011654:	6078      	str	r0, [r7, #4]
 8011656:	460b      	mov	r3, r1
 8011658:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801165a:	2300      	movs	r3, #0
 801165c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801166a:	78fb      	ldrb	r3, [r7, #3]
 801166c:	2b01      	cmp	r3, #1
 801166e:	d115      	bne.n	801169c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	68db      	ldr	r3, [r3, #12]
 8011674:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 801167c:	200a      	movs	r0, #10
 801167e:	f7f6 fb35 	bl	8007cec <HAL_Delay>
      ms += 10U;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	330a      	adds	r3, #10
 8011686:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 f956 	bl	801193a <USB_GetMode>
 801168e:	4603      	mov	r3, r0
 8011690:	2b01      	cmp	r3, #1
 8011692:	d01e      	beq.n	80116d2 <USB_SetCurrentMode+0x84>
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	2bc7      	cmp	r3, #199	@ 0xc7
 8011698:	d9f0      	bls.n	801167c <USB_SetCurrentMode+0x2e>
 801169a:	e01a      	b.n	80116d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801169c:	78fb      	ldrb	r3, [r7, #3]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d115      	bne.n	80116ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80116ae:	200a      	movs	r0, #10
 80116b0:	f7f6 fb1c 	bl	8007cec <HAL_Delay>
      ms += 10U;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	330a      	adds	r3, #10
 80116b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f000 f93d 	bl	801193a <USB_GetMode>
 80116c0:	4603      	mov	r3, r0
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d005      	beq.n	80116d2 <USB_SetCurrentMode+0x84>
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80116ca:	d9f0      	bls.n	80116ae <USB_SetCurrentMode+0x60>
 80116cc:	e001      	b.n	80116d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80116ce:	2301      	movs	r3, #1
 80116d0:	e005      	b.n	80116de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80116d6:	d101      	bne.n	80116dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80116d8:	2301      	movs	r3, #1
 80116da:	e000      	b.n	80116de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80116dc:	2300      	movs	r3, #0
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3710      	adds	r7, #16
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80116e6:	b480      	push	{r7}
 80116e8:	b085      	sub	sp, #20
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80116f0:	2300      	movs	r3, #0
 80116f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	3301      	adds	r3, #1
 80116f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011700:	d901      	bls.n	8011706 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011702:	2303      	movs	r3, #3
 8011704:	e01b      	b.n	801173e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	691b      	ldr	r3, [r3, #16]
 801170a:	2b00      	cmp	r3, #0
 801170c:	daf2      	bge.n	80116f4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801170e:	2300      	movs	r3, #0
 8011710:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	019b      	lsls	r3, r3, #6
 8011716:	f043 0220 	orr.w	r2, r3, #32
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	3301      	adds	r3, #1
 8011722:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801172a:	d901      	bls.n	8011730 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801172c:	2303      	movs	r3, #3
 801172e:	e006      	b.n	801173e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	691b      	ldr	r3, [r3, #16]
 8011734:	f003 0320 	and.w	r3, r3, #32
 8011738:	2b20      	cmp	r3, #32
 801173a:	d0f0      	beq.n	801171e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801173c:	2300      	movs	r3, #0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3714      	adds	r7, #20
 8011742:	46bd      	mov	sp, r7
 8011744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011748:	4770      	bx	lr

0801174a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801174a:	b480      	push	{r7}
 801174c:	b085      	sub	sp, #20
 801174e:	af00      	add	r7, sp, #0
 8011750:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011752:	2300      	movs	r3, #0
 8011754:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	3301      	adds	r3, #1
 801175a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011762:	d901      	bls.n	8011768 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011764:	2303      	movs	r3, #3
 8011766:	e018      	b.n	801179a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	691b      	ldr	r3, [r3, #16]
 801176c:	2b00      	cmp	r3, #0
 801176e:	daf2      	bge.n	8011756 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011770:	2300      	movs	r3, #0
 8011772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2210      	movs	r2, #16
 8011778:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	3301      	adds	r3, #1
 801177e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011786:	d901      	bls.n	801178c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011788:	2303      	movs	r3, #3
 801178a:	e006      	b.n	801179a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	691b      	ldr	r3, [r3, #16]
 8011790:	f003 0310 	and.w	r3, r3, #16
 8011794:	2b10      	cmp	r3, #16
 8011796:	d0f0      	beq.n	801177a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011798:	2300      	movs	r3, #0
}
 801179a:	4618      	mov	r0, r3
 801179c:	3714      	adds	r7, #20
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr

080117a6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80117a6:	b480      	push	{r7}
 80117a8:	b089      	sub	sp, #36	@ 0x24
 80117aa:	af00      	add	r7, sp, #0
 80117ac:	60f8      	str	r0, [r7, #12]
 80117ae:	60b9      	str	r1, [r7, #8]
 80117b0:	4611      	mov	r1, r2
 80117b2:	461a      	mov	r2, r3
 80117b4:	460b      	mov	r3, r1
 80117b6:	71fb      	strb	r3, [r7, #7]
 80117b8:	4613      	mov	r3, r2
 80117ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80117c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d123      	bne.n	8011814 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80117cc:	88bb      	ldrh	r3, [r7, #4]
 80117ce:	3303      	adds	r3, #3
 80117d0:	089b      	lsrs	r3, r3, #2
 80117d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80117d4:	2300      	movs	r3, #0
 80117d6:	61bb      	str	r3, [r7, #24]
 80117d8:	e018      	b.n	801180c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80117da:	79fb      	ldrb	r3, [r7, #7]
 80117dc:	031a      	lsls	r2, r3, #12
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	4413      	add	r3, r2
 80117e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80117e6:	461a      	mov	r2, r3
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	3301      	adds	r3, #1
 80117f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	3301      	adds	r3, #1
 80117f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80117fa:	69fb      	ldr	r3, [r7, #28]
 80117fc:	3301      	adds	r3, #1
 80117fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	3301      	adds	r3, #1
 8011804:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	3301      	adds	r3, #1
 801180a:	61bb      	str	r3, [r7, #24]
 801180c:	69ba      	ldr	r2, [r7, #24]
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	429a      	cmp	r2, r3
 8011812:	d3e2      	bcc.n	80117da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011814:	2300      	movs	r3, #0
}
 8011816:	4618      	mov	r0, r3
 8011818:	3724      	adds	r7, #36	@ 0x24
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr

08011822 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011822:	b480      	push	{r7}
 8011824:	b08b      	sub	sp, #44	@ 0x2c
 8011826:	af00      	add	r7, sp, #0
 8011828:	60f8      	str	r0, [r7, #12]
 801182a:	60b9      	str	r1, [r7, #8]
 801182c:	4613      	mov	r3, r2
 801182e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011838:	88fb      	ldrh	r3, [r7, #6]
 801183a:	089b      	lsrs	r3, r3, #2
 801183c:	b29b      	uxth	r3, r3
 801183e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011840:	88fb      	ldrh	r3, [r7, #6]
 8011842:	f003 0303 	and.w	r3, r3, #3
 8011846:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011848:	2300      	movs	r3, #0
 801184a:	623b      	str	r3, [r7, #32]
 801184c:	e014      	b.n	8011878 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011858:	601a      	str	r2, [r3, #0]
    pDest++;
 801185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801185c:	3301      	adds	r3, #1
 801185e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011862:	3301      	adds	r3, #1
 8011864:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011868:	3301      	adds	r3, #1
 801186a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186e:	3301      	adds	r3, #1
 8011870:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011872:	6a3b      	ldr	r3, [r7, #32]
 8011874:	3301      	adds	r3, #1
 8011876:	623b      	str	r3, [r7, #32]
 8011878:	6a3a      	ldr	r2, [r7, #32]
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	429a      	cmp	r2, r3
 801187e:	d3e6      	bcc.n	801184e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011880:	8bfb      	ldrh	r3, [r7, #30]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d01e      	beq.n	80118c4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011886:	2300      	movs	r3, #0
 8011888:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011890:	461a      	mov	r2, r3
 8011892:	f107 0310 	add.w	r3, r7, #16
 8011896:	6812      	ldr	r2, [r2, #0]
 8011898:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801189a:	693a      	ldr	r2, [r7, #16]
 801189c:	6a3b      	ldr	r3, [r7, #32]
 801189e:	b2db      	uxtb	r3, r3
 80118a0:	00db      	lsls	r3, r3, #3
 80118a2:	fa22 f303 	lsr.w	r3, r2, r3
 80118a6:	b2da      	uxtb	r2, r3
 80118a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118aa:	701a      	strb	r2, [r3, #0]
      i++;
 80118ac:	6a3b      	ldr	r3, [r7, #32]
 80118ae:	3301      	adds	r3, #1
 80118b0:	623b      	str	r3, [r7, #32]
      pDest++;
 80118b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b4:	3301      	adds	r3, #1
 80118b6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80118b8:	8bfb      	ldrh	r3, [r7, #30]
 80118ba:	3b01      	subs	r3, #1
 80118bc:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80118be:	8bfb      	ldrh	r3, [r7, #30]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1ea      	bne.n	801189a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80118c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	372c      	adds	r7, #44	@ 0x2c
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr

080118d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80118d2:	b480      	push	{r7}
 80118d4:	b085      	sub	sp, #20
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	699b      	ldr	r3, [r3, #24]
 80118e4:	68fa      	ldr	r2, [r7, #12]
 80118e6:	4013      	ands	r3, r2
 80118e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80118ea:	68fb      	ldr	r3, [r7, #12]
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3714      	adds	r7, #20
 80118f0:	46bd      	mov	sp, r7
 80118f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f6:	4770      	bx	lr

080118f8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b085      	sub	sp, #20
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	460b      	mov	r3, r1
 8011902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8011908:	78fb      	ldrb	r3, [r7, #3]
 801190a:	015a      	lsls	r2, r3, #5
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	4413      	add	r3, r2
 8011910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011914:	689b      	ldr	r3, [r3, #8]
 8011916:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8011918:	78fb      	ldrb	r3, [r7, #3]
 801191a:	015a      	lsls	r2, r3, #5
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	4413      	add	r3, r2
 8011920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	68ba      	ldr	r2, [r7, #8]
 8011928:	4013      	ands	r3, r2
 801192a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801192c:	68bb      	ldr	r3, [r7, #8]
}
 801192e:	4618      	mov	r0, r3
 8011930:	3714      	adds	r7, #20
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr

0801193a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801193a:	b480      	push	{r7}
 801193c:	b083      	sub	sp, #12
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	695b      	ldr	r3, [r3, #20]
 8011946:	f003 0301 	and.w	r3, r3, #1
}
 801194a:	4618      	mov	r0, r3
 801194c:	370c      	adds	r7, #12
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr

08011956 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011956:	b480      	push	{r7}
 8011958:	b085      	sub	sp, #20
 801195a:	af00      	add	r7, sp, #0
 801195c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801195e:	2300      	movs	r3, #0
 8011960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	3301      	adds	r3, #1
 8011966:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801196e:	d901      	bls.n	8011974 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011970:	2303      	movs	r3, #3
 8011972:	e01b      	b.n	80119ac <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	2b00      	cmp	r3, #0
 801197a:	daf2      	bge.n	8011962 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801197c:	2300      	movs	r3, #0
 801197e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	691b      	ldr	r3, [r3, #16]
 8011984:	f043 0201 	orr.w	r2, r3, #1
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	3301      	adds	r3, #1
 8011990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011998:	d901      	bls.n	801199e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801199a:	2303      	movs	r3, #3
 801199c:	e006      	b.n	80119ac <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	691b      	ldr	r3, [r3, #16]
 80119a2:	f003 0301 	and.w	r3, r3, #1
 80119a6:	2b01      	cmp	r3, #1
 80119a8:	d0f0      	beq.n	801198c <USB_CoreReset+0x36>

  return HAL_OK;
 80119aa:	2300      	movs	r3, #0
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3714      	adds	r7, #20
 80119b0:	46bd      	mov	sp, r7
 80119b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b6:	4770      	bx	lr

080119b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80119b8:	b084      	sub	sp, #16
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b086      	sub	sp, #24
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
 80119c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80119c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80119ca:	2300      	movs	r3, #0
 80119cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80119d8:	461a      	mov	r2, r3
 80119da:	2300      	movs	r3, #0
 80119dc:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119e2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d119      	bne.n	8011a2a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80119f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d10a      	bne.n	8011a14 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	68fa      	ldr	r2, [r7, #12]
 8011a08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011a0c:	f043 0304 	orr.w	r3, r3, #4
 8011a10:	6013      	str	r3, [r2, #0]
 8011a12:	e014      	b.n	8011a3e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	68fa      	ldr	r2, [r7, #12]
 8011a1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011a22:	f023 0304 	bic.w	r3, r3, #4
 8011a26:	6013      	str	r3, [r2, #0]
 8011a28:	e009      	b.n	8011a3e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	68fa      	ldr	r2, [r7, #12]
 8011a34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011a38:	f023 0304 	bic.w	r3, r3, #4
 8011a3c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011a3e:	2110      	movs	r1, #16
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f7ff fe50 	bl	80116e6 <USB_FlushTxFifo>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d001      	beq.n	8011a50 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f7ff fe7a 	bl	801174a <USB_FlushRxFifo>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d001      	beq.n	8011a60 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011a60:	2300      	movs	r3, #0
 8011a62:	613b      	str	r3, [r7, #16]
 8011a64:	e015      	b.n	8011a92 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	015a      	lsls	r2, r3, #5
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a72:	461a      	mov	r2, r3
 8011a74:	f04f 33ff 	mov.w	r3, #4294967295
 8011a78:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	015a      	lsls	r2, r3, #5
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	4413      	add	r3, r2
 8011a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a86:	461a      	mov	r2, r3
 8011a88:	2300      	movs	r3, #0
 8011a8a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8011a8c:	693b      	ldr	r3, [r7, #16]
 8011a8e:	3301      	adds	r3, #1
 8011a90:	613b      	str	r3, [r7, #16]
 8011a92:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8011a96:	461a      	mov	r2, r3
 8011a98:	693b      	ldr	r3, [r7, #16]
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d3e3      	bcc.n	8011a66 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2200      	movs	r2, #0
 8011aa2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8011aaa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	4a18      	ldr	r2, [pc, #96]	@ (8011b10 <USB_HostInit+0x158>)
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d10b      	bne.n	8011acc <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011aba:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	4a15      	ldr	r2, [pc, #84]	@ (8011b14 <USB_HostInit+0x15c>)
 8011ac0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	4a14      	ldr	r2, [pc, #80]	@ (8011b18 <USB_HostInit+0x160>)
 8011ac6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8011aca:	e009      	b.n	8011ae0 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2280      	movs	r2, #128	@ 0x80
 8011ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	4a11      	ldr	r2, [pc, #68]	@ (8011b1c <USB_HostInit+0x164>)
 8011ad6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	4a11      	ldr	r2, [pc, #68]	@ (8011b20 <USB_HostInit+0x168>)
 8011adc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d105      	bne.n	8011af4 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	699b      	ldr	r3, [r3, #24]
 8011aec:	f043 0210 	orr.w	r2, r3, #16
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	699a      	ldr	r2, [r3, #24]
 8011af8:	4b0a      	ldr	r3, [pc, #40]	@ (8011b24 <USB_HostInit+0x16c>)
 8011afa:	4313      	orrs	r3, r2
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8011b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3718      	adds	r7, #24
 8011b06:	46bd      	mov	sp, r7
 8011b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011b0c:	b004      	add	sp, #16
 8011b0e:	4770      	bx	lr
 8011b10:	40040000 	.word	0x40040000
 8011b14:	01000200 	.word	0x01000200
 8011b18:	00e00300 	.word	0x00e00300
 8011b1c:	00600080 	.word	0x00600080
 8011b20:	004000e0 	.word	0x004000e0
 8011b24:	a3200008 	.word	0xa3200008

08011b28 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b085      	sub	sp, #20
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	460b      	mov	r3, r1
 8011b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	68fa      	ldr	r2, [r7, #12]
 8011b42:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8011b46:	f023 0303 	bic.w	r3, r3, #3
 8011b4a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b52:	681a      	ldr	r2, [r3, #0]
 8011b54:	78fb      	ldrb	r3, [r7, #3]
 8011b56:	f003 0303 	and.w	r3, r3, #3
 8011b5a:	68f9      	ldr	r1, [r7, #12]
 8011b5c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011b60:	4313      	orrs	r3, r2
 8011b62:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011b64:	78fb      	ldrb	r3, [r7, #3]
 8011b66:	2b01      	cmp	r3, #1
 8011b68:	d107      	bne.n	8011b7a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b70:	461a      	mov	r2, r3
 8011b72:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8011b76:	6053      	str	r3, [r2, #4]
 8011b78:	e00c      	b.n	8011b94 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8011b7a:	78fb      	ldrb	r3, [r7, #3]
 8011b7c:	2b02      	cmp	r3, #2
 8011b7e:	d107      	bne.n	8011b90 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b86:	461a      	mov	r2, r3
 8011b88:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011b8c:	6053      	str	r3, [r2, #4]
 8011b8e:	e001      	b.n	8011b94 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8011b90:	2301      	movs	r3, #1
 8011b92:	e000      	b.n	8011b96 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011b94:	2300      	movs	r3, #0
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3714      	adds	r7, #20
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba0:	4770      	bx	lr

08011ba2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8011ba2:	b580      	push	{r7, lr}
 8011ba4:	b084      	sub	sp, #16
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8011bc2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	68fa      	ldr	r2, [r7, #12]
 8011bc8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011bd0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8011bd2:	2064      	movs	r0, #100	@ 0x64
 8011bd4:	f7f6 f88a 	bl	8007cec <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	68fa      	ldr	r2, [r7, #12]
 8011bdc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011be0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011be4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8011be6:	200a      	movs	r0, #10
 8011be8:	f7f6 f880 	bl	8007cec <HAL_Delay>

  return HAL_OK;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3710      	adds	r7, #16
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}

08011bf6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8011bf6:	b480      	push	{r7}
 8011bf8:	b085      	sub	sp, #20
 8011bfa:	af00      	add	r7, sp, #0
 8011bfc:	6078      	str	r0, [r7, #4]
 8011bfe:	460b      	mov	r3, r1
 8011c00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011c06:	2300      	movs	r3, #0
 8011c08:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8011c1a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d109      	bne.n	8011c3a <USB_DriveVbus+0x44>
 8011c26:	78fb      	ldrb	r3, [r7, #3]
 8011c28:	2b01      	cmp	r3, #1
 8011c2a:	d106      	bne.n	8011c3a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	68fa      	ldr	r2, [r7, #12]
 8011c30:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011c34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011c38:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8011c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011c44:	d109      	bne.n	8011c5a <USB_DriveVbus+0x64>
 8011c46:	78fb      	ldrb	r3, [r7, #3]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d106      	bne.n	8011c5a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	68fa      	ldr	r2, [r7, #12]
 8011c50:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8011c54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011c58:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8011c5a:	2300      	movs	r3, #0
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3714      	adds	r7, #20
 8011c60:	46bd      	mov	sp, r7
 8011c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c66:	4770      	bx	lr

08011c68 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8011c68:	b480      	push	{r7}
 8011c6a:	b085      	sub	sp, #20
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8011c74:	2300      	movs	r3, #0
 8011c76:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	0c5b      	lsrs	r3, r3, #17
 8011c86:	f003 0303 	and.w	r3, r3, #3
}
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	3714      	adds	r7, #20
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c94:	4770      	bx	lr

08011c96 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8011c96:	b480      	push	{r7}
 8011c98:	b085      	sub	sp, #20
 8011c9a:	af00      	add	r7, sp, #0
 8011c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	b29b      	uxth	r3, r3
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3714      	adds	r7, #20
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr

08011cb8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b088      	sub	sp, #32
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
 8011cc0:	4608      	mov	r0, r1
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	461a      	mov	r2, r3
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	70fb      	strb	r3, [r7, #3]
 8011cca:	460b      	mov	r3, r1
 8011ccc:	70bb      	strb	r3, [r7, #2]
 8011cce:	4613      	mov	r3, r2
 8011cd0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8011cda:	78fb      	ldrb	r3, [r7, #3]
 8011cdc:	015a      	lsls	r2, r3, #5
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cec:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8011cee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011cf2:	2b03      	cmp	r3, #3
 8011cf4:	d87c      	bhi.n	8011df0 <USB_HC_Init+0x138>
 8011cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8011cfc <USB_HC_Init+0x44>)
 8011cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cfc:	08011d0d 	.word	0x08011d0d
 8011d00:	08011db3 	.word	0x08011db3
 8011d04:	08011d0d 	.word	0x08011d0d
 8011d08:	08011d75 	.word	0x08011d75
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011d0c:	78fb      	ldrb	r3, [r7, #3]
 8011d0e:	015a      	lsls	r2, r3, #5
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	4413      	add	r3, r2
 8011d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d18:	461a      	mov	r2, r3
 8011d1a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8011d1e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8011d20:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	da10      	bge.n	8011d4a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011d28:	78fb      	ldrb	r3, [r7, #3]
 8011d2a:	015a      	lsls	r2, r3, #5
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	4413      	add	r3, r2
 8011d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	78fa      	ldrb	r2, [r7, #3]
 8011d38:	0151      	lsls	r1, r2, #5
 8011d3a:	693a      	ldr	r2, [r7, #16]
 8011d3c:	440a      	add	r2, r1
 8011d3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011d46:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8011d48:	e055      	b.n	8011df6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	4a6f      	ldr	r2, [pc, #444]	@ (8011f0c <USB_HC_Init+0x254>)
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	d151      	bne.n	8011df6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8011d52:	78fb      	ldrb	r3, [r7, #3]
 8011d54:	015a      	lsls	r2, r3, #5
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	4413      	add	r3, r2
 8011d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	78fa      	ldrb	r2, [r7, #3]
 8011d62:	0151      	lsls	r1, r2, #5
 8011d64:	693a      	ldr	r2, [r7, #16]
 8011d66:	440a      	add	r2, r1
 8011d68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011d6c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8011d70:	60d3      	str	r3, [r2, #12]
      break;
 8011d72:	e040      	b.n	8011df6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011d74:	78fb      	ldrb	r3, [r7, #3]
 8011d76:	015a      	lsls	r2, r3, #5
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d80:	461a      	mov	r2, r3
 8011d82:	f240 639d 	movw	r3, #1693	@ 0x69d
 8011d86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011d88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	da34      	bge.n	8011dfa <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011d90:	78fb      	ldrb	r3, [r7, #3]
 8011d92:	015a      	lsls	r2, r3, #5
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	4413      	add	r3, r2
 8011d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	78fa      	ldrb	r2, [r7, #3]
 8011da0:	0151      	lsls	r1, r2, #5
 8011da2:	693a      	ldr	r2, [r7, #16]
 8011da4:	440a      	add	r2, r1
 8011da6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011dae:	60d3      	str	r3, [r2, #12]
      }

      break;
 8011db0:	e023      	b.n	8011dfa <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011db2:	78fb      	ldrb	r3, [r7, #3]
 8011db4:	015a      	lsls	r2, r3, #5
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	4413      	add	r3, r2
 8011dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	f240 2325 	movw	r3, #549	@ 0x225
 8011dc4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8011dc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	da17      	bge.n	8011dfe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8011dce:	78fb      	ldrb	r3, [r7, #3]
 8011dd0:	015a      	lsls	r2, r3, #5
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	4413      	add	r3, r2
 8011dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	78fa      	ldrb	r2, [r7, #3]
 8011dde:	0151      	lsls	r1, r2, #5
 8011de0:	693a      	ldr	r2, [r7, #16]
 8011de2:	440a      	add	r2, r1
 8011de4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011de8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8011dec:	60d3      	str	r3, [r2, #12]
      }
      break;
 8011dee:	e006      	b.n	8011dfe <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8011df0:	2301      	movs	r3, #1
 8011df2:	77fb      	strb	r3, [r7, #31]
      break;
 8011df4:	e004      	b.n	8011e00 <USB_HC_Init+0x148>
      break;
 8011df6:	bf00      	nop
 8011df8:	e002      	b.n	8011e00 <USB_HC_Init+0x148>
      break;
 8011dfa:	bf00      	nop
 8011dfc:	e000      	b.n	8011e00 <USB_HC_Init+0x148>
      break;
 8011dfe:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011e00:	78fb      	ldrb	r3, [r7, #3]
 8011e02:	015a      	lsls	r2, r3, #5
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	4413      	add	r3, r2
 8011e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	2300      	movs	r3, #0
 8011e10:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8011e12:	78fb      	ldrb	r3, [r7, #3]
 8011e14:	015a      	lsls	r2, r3, #5
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	4413      	add	r3, r2
 8011e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	78fa      	ldrb	r2, [r7, #3]
 8011e22:	0151      	lsls	r1, r2, #5
 8011e24:	693a      	ldr	r2, [r7, #16]
 8011e26:	440a      	add	r2, r1
 8011e28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011e2c:	f043 0302 	orr.w	r3, r3, #2
 8011e30:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011e38:	699a      	ldr	r2, [r3, #24]
 8011e3a:	78fb      	ldrb	r3, [r7, #3]
 8011e3c:	f003 030f 	and.w	r3, r3, #15
 8011e40:	2101      	movs	r1, #1
 8011e42:	fa01 f303 	lsl.w	r3, r1, r3
 8011e46:	6939      	ldr	r1, [r7, #16]
 8011e48:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011e4c:	4313      	orrs	r3, r2
 8011e4e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	699b      	ldr	r3, [r3, #24]
 8011e54:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8011e5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	da03      	bge.n	8011e6c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8011e64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011e68:	61bb      	str	r3, [r7, #24]
 8011e6a:	e001      	b.n	8011e70 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7ff fef9 	bl	8011c68 <USB_GetHostSpeed>
 8011e76:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8011e78:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011e7c:	2b02      	cmp	r3, #2
 8011e7e:	d106      	bne.n	8011e8e <USB_HC_Init+0x1d6>
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2b02      	cmp	r3, #2
 8011e84:	d003      	beq.n	8011e8e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8011e86:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011e8a:	617b      	str	r3, [r7, #20]
 8011e8c:	e001      	b.n	8011e92 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011e92:	787b      	ldrb	r3, [r7, #1]
 8011e94:	059b      	lsls	r3, r3, #22
 8011e96:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011e9a:	78bb      	ldrb	r3, [r7, #2]
 8011e9c:	02db      	lsls	r3, r3, #11
 8011e9e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011ea2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011ea4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011ea8:	049b      	lsls	r3, r3, #18
 8011eaa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011eae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8011eb0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011eb6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8011eb8:	69bb      	ldr	r3, [r7, #24]
 8011eba:	431a      	orrs	r2, r3
 8011ebc:	697b      	ldr	r3, [r7, #20]
 8011ebe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011ec0:	78fa      	ldrb	r2, [r7, #3]
 8011ec2:	0151      	lsls	r1, r2, #5
 8011ec4:	693a      	ldr	r2, [r7, #16]
 8011ec6:	440a      	add	r2, r1
 8011ec8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8011ecc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011ed0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8011ed2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011ed6:	2b03      	cmp	r3, #3
 8011ed8:	d003      	beq.n	8011ee2 <USB_HC_Init+0x22a>
 8011eda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d10f      	bne.n	8011f02 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8011ee2:	78fb      	ldrb	r3, [r7, #3]
 8011ee4:	015a      	lsls	r2, r3, #5
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	4413      	add	r3, r2
 8011eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	78fa      	ldrb	r2, [r7, #3]
 8011ef2:	0151      	lsls	r1, r2, #5
 8011ef4:	693a      	ldr	r2, [r7, #16]
 8011ef6:	440a      	add	r2, r1
 8011ef8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011efc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011f00:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8011f02:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	3720      	adds	r7, #32
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	40040000 	.word	0x40040000

08011f10 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b08c      	sub	sp, #48	@ 0x30
 8011f14:	af02      	add	r7, sp, #8
 8011f16:	60f8      	str	r0, [r7, #12]
 8011f18:	60b9      	str	r1, [r7, #8]
 8011f1a:	4613      	mov	r3, r2
 8011f1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	785b      	ldrb	r3, [r3, #1]
 8011f26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8011f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f2c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	4a5d      	ldr	r2, [pc, #372]	@ (80120a8 <USB_HC_StartXfer+0x198>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d12f      	bne.n	8011f96 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8011f36:	79fb      	ldrb	r3, [r7, #7]
 8011f38:	2b01      	cmp	r3, #1
 8011f3a:	d11c      	bne.n	8011f76 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	7c9b      	ldrb	r3, [r3, #18]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d003      	beq.n	8011f4c <USB_HC_StartXfer+0x3c>
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	7c9b      	ldrb	r3, [r3, #18]
 8011f48:	2b02      	cmp	r3, #2
 8011f4a:	d124      	bne.n	8011f96 <USB_HC_StartXfer+0x86>
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	799b      	ldrb	r3, [r3, #6]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d120      	bne.n	8011f96 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	015a      	lsls	r2, r3, #5
 8011f58:	6a3b      	ldr	r3, [r7, #32]
 8011f5a:	4413      	add	r3, r2
 8011f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011f60:	68db      	ldr	r3, [r3, #12]
 8011f62:	69fa      	ldr	r2, [r7, #28]
 8011f64:	0151      	lsls	r1, r2, #5
 8011f66:	6a3a      	ldr	r2, [r7, #32]
 8011f68:	440a      	add	r2, r1
 8011f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f72:	60d3      	str	r3, [r2, #12]
 8011f74:	e00f      	b.n	8011f96 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	791b      	ldrb	r3, [r3, #4]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d10b      	bne.n	8011f96 <USB_HC_StartXfer+0x86>
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	795b      	ldrb	r3, [r3, #5]
 8011f82:	2b01      	cmp	r3, #1
 8011f84:	d107      	bne.n	8011f96 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	785b      	ldrb	r3, [r3, #1]
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	68f8      	ldr	r0, [r7, #12]
 8011f8e:	f000 fb6b 	bl	8012668 <USB_DoPing>
        return HAL_OK;
 8011f92:	2300      	movs	r3, #0
 8011f94:	e232      	b.n	80123fc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	799b      	ldrb	r3, [r3, #6]
 8011f9a:	2b01      	cmp	r3, #1
 8011f9c:	d158      	bne.n	8012050 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	78db      	ldrb	r3, [r3, #3]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d007      	beq.n	8011fba <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8011faa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011fac:	68ba      	ldr	r2, [r7, #8]
 8011fae:	8a92      	ldrh	r2, [r2, #20]
 8011fb0:	fb03 f202 	mul.w	r2, r3, r2
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	61da      	str	r2, [r3, #28]
 8011fb8:	e07c      	b.n	80120b4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	7c9b      	ldrb	r3, [r3, #18]
 8011fbe:	2b01      	cmp	r3, #1
 8011fc0:	d130      	bne.n	8012024 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	6a1b      	ldr	r3, [r3, #32]
 8011fc6:	2bbc      	cmp	r3, #188	@ 0xbc
 8011fc8:	d918      	bls.n	8011ffc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	8a9b      	ldrh	r3, [r3, #20]
 8011fce:	461a      	mov	r2, r3
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	69da      	ldr	r2, [r3, #28]
 8011fd8:	68bb      	ldr	r3, [r7, #8]
 8011fda:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	68db      	ldr	r3, [r3, #12]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d003      	beq.n	8011fec <USB_HC_StartXfer+0xdc>
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	68db      	ldr	r3, [r3, #12]
 8011fe8:	2b02      	cmp	r3, #2
 8011fea:	d103      	bne.n	8011ff4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	2202      	movs	r2, #2
 8011ff0:	60da      	str	r2, [r3, #12]
 8011ff2:	e05f      	b.n	80120b4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	60da      	str	r2, [r3, #12]
 8011ffa:	e05b      	b.n	80120b4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	6a1a      	ldr	r2, [r3, #32]
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d007      	beq.n	801201c <USB_HC_StartXfer+0x10c>
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	68db      	ldr	r3, [r3, #12]
 8012010:	2b02      	cmp	r3, #2
 8012012:	d003      	beq.n	801201c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	2204      	movs	r2, #4
 8012018:	60da      	str	r2, [r3, #12]
 801201a:	e04b      	b.n	80120b4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	2203      	movs	r2, #3
 8012020:	60da      	str	r2, [r3, #12]
 8012022:	e047      	b.n	80120b4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8012024:	79fb      	ldrb	r3, [r7, #7]
 8012026:	2b01      	cmp	r3, #1
 8012028:	d10d      	bne.n	8012046 <USB_HC_StartXfer+0x136>
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	6a1b      	ldr	r3, [r3, #32]
 801202e:	68ba      	ldr	r2, [r7, #8]
 8012030:	8a92      	ldrh	r2, [r2, #20]
 8012032:	4293      	cmp	r3, r2
 8012034:	d907      	bls.n	8012046 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012036:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012038:	68ba      	ldr	r2, [r7, #8]
 801203a:	8a92      	ldrh	r2, [r2, #20]
 801203c:	fb03 f202 	mul.w	r2, r3, r2
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	61da      	str	r2, [r3, #28]
 8012044:	e036      	b.n	80120b4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	6a1a      	ldr	r2, [r3, #32]
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	61da      	str	r2, [r3, #28]
 801204e:	e031      	b.n	80120b4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	6a1b      	ldr	r3, [r3, #32]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d018      	beq.n	801208a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	6a1b      	ldr	r3, [r3, #32]
 801205c:	68ba      	ldr	r2, [r7, #8]
 801205e:	8a92      	ldrh	r2, [r2, #20]
 8012060:	4413      	add	r3, r2
 8012062:	3b01      	subs	r3, #1
 8012064:	68ba      	ldr	r2, [r7, #8]
 8012066:	8a92      	ldrh	r2, [r2, #20]
 8012068:	fbb3 f3f2 	udiv	r3, r3, r2
 801206c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 801206e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012070:	8b7b      	ldrh	r3, [r7, #26]
 8012072:	429a      	cmp	r2, r3
 8012074:	d90b      	bls.n	801208e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8012076:	8b7b      	ldrh	r3, [r7, #26]
 8012078:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801207a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801207c:	68ba      	ldr	r2, [r7, #8]
 801207e:	8a92      	ldrh	r2, [r2, #20]
 8012080:	fb03 f202 	mul.w	r2, r3, r2
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	61da      	str	r2, [r3, #28]
 8012088:	e001      	b.n	801208e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 801208a:	2301      	movs	r3, #1
 801208c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	78db      	ldrb	r3, [r3, #3]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d00a      	beq.n	80120ac <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8012096:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	8a92      	ldrh	r2, [r2, #20]
 801209c:	fb03 f202 	mul.w	r2, r3, r2
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	61da      	str	r2, [r3, #28]
 80120a4:	e006      	b.n	80120b4 <USB_HC_StartXfer+0x1a4>
 80120a6:	bf00      	nop
 80120a8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	6a1a      	ldr	r2, [r3, #32]
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	69db      	ldr	r3, [r3, #28]
 80120b8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80120bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80120be:	04d9      	lsls	r1, r3, #19
 80120c0:	4ba3      	ldr	r3, [pc, #652]	@ (8012350 <USB_HC_StartXfer+0x440>)
 80120c2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80120c4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	7d9b      	ldrb	r3, [r3, #22]
 80120ca:	075b      	lsls	r3, r3, #29
 80120cc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80120d0:	69f9      	ldr	r1, [r7, #28]
 80120d2:	0148      	lsls	r0, r1, #5
 80120d4:	6a39      	ldr	r1, [r7, #32]
 80120d6:	4401      	add	r1, r0
 80120d8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80120dc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80120de:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80120e0:	79fb      	ldrb	r3, [r7, #7]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d009      	beq.n	80120fa <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	6999      	ldr	r1, [r3, #24]
 80120ea:	69fb      	ldr	r3, [r7, #28]
 80120ec:	015a      	lsls	r2, r3, #5
 80120ee:	6a3b      	ldr	r3, [r7, #32]
 80120f0:	4413      	add	r3, r2
 80120f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80120f6:	460a      	mov	r2, r1
 80120f8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80120fa:	6a3b      	ldr	r3, [r7, #32]
 80120fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012100:	689b      	ldr	r3, [r3, #8]
 8012102:	f003 0301 	and.w	r3, r3, #1
 8012106:	2b00      	cmp	r3, #0
 8012108:	bf0c      	ite	eq
 801210a:	2301      	moveq	r3, #1
 801210c:	2300      	movne	r3, #0
 801210e:	b2db      	uxtb	r3, r3
 8012110:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8012112:	69fb      	ldr	r3, [r7, #28]
 8012114:	015a      	lsls	r2, r3, #5
 8012116:	6a3b      	ldr	r3, [r7, #32]
 8012118:	4413      	add	r3, r2
 801211a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	69fa      	ldr	r2, [r7, #28]
 8012122:	0151      	lsls	r1, r2, #5
 8012124:	6a3a      	ldr	r2, [r7, #32]
 8012126:	440a      	add	r2, r1
 8012128:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801212c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012130:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	015a      	lsls	r2, r3, #5
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	4413      	add	r3, r2
 801213a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801213e:	681a      	ldr	r2, [r3, #0]
 8012140:	7e7b      	ldrb	r3, [r7, #25]
 8012142:	075b      	lsls	r3, r3, #29
 8012144:	69f9      	ldr	r1, [r7, #28]
 8012146:	0148      	lsls	r0, r1, #5
 8012148:	6a39      	ldr	r1, [r7, #32]
 801214a:	4401      	add	r1, r0
 801214c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8012150:	4313      	orrs	r3, r2
 8012152:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	799b      	ldrb	r3, [r3, #6]
 8012158:	2b01      	cmp	r3, #1
 801215a:	f040 80c3 	bne.w	80122e4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	7c5b      	ldrb	r3, [r3, #17]
 8012162:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8012164:	68ba      	ldr	r2, [r7, #8]
 8012166:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8012168:	4313      	orrs	r3, r2
 801216a:	69fa      	ldr	r2, [r7, #28]
 801216c:	0151      	lsls	r1, r2, #5
 801216e:	6a3a      	ldr	r2, [r7, #32]
 8012170:	440a      	add	r2, r1
 8012172:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8012176:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801217a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 801217c:	69fb      	ldr	r3, [r7, #28]
 801217e:	015a      	lsls	r2, r3, #5
 8012180:	6a3b      	ldr	r3, [r7, #32]
 8012182:	4413      	add	r3, r2
 8012184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012188:	68db      	ldr	r3, [r3, #12]
 801218a:	69fa      	ldr	r2, [r7, #28]
 801218c:	0151      	lsls	r1, r2, #5
 801218e:	6a3a      	ldr	r2, [r7, #32]
 8012190:	440a      	add	r2, r1
 8012192:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012196:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801219a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	79db      	ldrb	r3, [r3, #7]
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d123      	bne.n	80121ec <USB_HC_StartXfer+0x2dc>
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	78db      	ldrb	r3, [r3, #3]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d11f      	bne.n	80121ec <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	015a      	lsls	r2, r3, #5
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	4413      	add	r3, r2
 80121b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121b8:	685b      	ldr	r3, [r3, #4]
 80121ba:	69fa      	ldr	r2, [r7, #28]
 80121bc:	0151      	lsls	r1, r2, #5
 80121be:	6a3a      	ldr	r2, [r7, #32]
 80121c0:	440a      	add	r2, r1
 80121c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80121ca:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80121cc:	69fb      	ldr	r3, [r7, #28]
 80121ce:	015a      	lsls	r2, r3, #5
 80121d0:	6a3b      	ldr	r3, [r7, #32]
 80121d2:	4413      	add	r3, r2
 80121d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	69fa      	ldr	r2, [r7, #28]
 80121dc:	0151      	lsls	r1, r2, #5
 80121de:	6a3a      	ldr	r2, [r7, #32]
 80121e0:	440a      	add	r2, r1
 80121e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80121e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121ea:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	7c9b      	ldrb	r3, [r3, #18]
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	d003      	beq.n	80121fc <USB_HC_StartXfer+0x2ec>
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	7c9b      	ldrb	r3, [r3, #18]
 80121f8:	2b03      	cmp	r3, #3
 80121fa:	d117      	bne.n	801222c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8012200:	2b01      	cmp	r3, #1
 8012202:	d113      	bne.n	801222c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	78db      	ldrb	r3, [r3, #3]
 8012208:	2b01      	cmp	r3, #1
 801220a:	d10f      	bne.n	801222c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	015a      	lsls	r2, r3, #5
 8012210:	6a3b      	ldr	r3, [r7, #32]
 8012212:	4413      	add	r3, r2
 8012214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	69fa      	ldr	r2, [r7, #28]
 801221c:	0151      	lsls	r1, r2, #5
 801221e:	6a3a      	ldr	r2, [r7, #32]
 8012220:	440a      	add	r2, r1
 8012222:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801222a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	7c9b      	ldrb	r3, [r3, #18]
 8012230:	2b01      	cmp	r3, #1
 8012232:	d162      	bne.n	80122fa <USB_HC_StartXfer+0x3ea>
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	78db      	ldrb	r3, [r3, #3]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d15e      	bne.n	80122fa <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	68db      	ldr	r3, [r3, #12]
 8012240:	3b01      	subs	r3, #1
 8012242:	2b03      	cmp	r3, #3
 8012244:	d858      	bhi.n	80122f8 <USB_HC_StartXfer+0x3e8>
 8012246:	a201      	add	r2, pc, #4	@ (adr r2, 801224c <USB_HC_StartXfer+0x33c>)
 8012248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801224c:	0801225d 	.word	0x0801225d
 8012250:	0801227f 	.word	0x0801227f
 8012254:	080122a1 	.word	0x080122a1
 8012258:	080122c3 	.word	0x080122c3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	015a      	lsls	r2, r3, #5
 8012260:	6a3b      	ldr	r3, [r7, #32]
 8012262:	4413      	add	r3, r2
 8012264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012268:	685b      	ldr	r3, [r3, #4]
 801226a:	69fa      	ldr	r2, [r7, #28]
 801226c:	0151      	lsls	r1, r2, #5
 801226e:	6a3a      	ldr	r2, [r7, #32]
 8012270:	440a      	add	r2, r1
 8012272:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801227a:	6053      	str	r3, [r2, #4]
          break;
 801227c:	e03d      	b.n	80122fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 801227e:	69fb      	ldr	r3, [r7, #28]
 8012280:	015a      	lsls	r2, r3, #5
 8012282:	6a3b      	ldr	r3, [r7, #32]
 8012284:	4413      	add	r3, r2
 8012286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801228a:	685b      	ldr	r3, [r3, #4]
 801228c:	69fa      	ldr	r2, [r7, #28]
 801228e:	0151      	lsls	r1, r2, #5
 8012290:	6a3a      	ldr	r2, [r7, #32]
 8012292:	440a      	add	r2, r1
 8012294:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012298:	f043 030e 	orr.w	r3, r3, #14
 801229c:	6053      	str	r3, [r2, #4]
          break;
 801229e:	e02c      	b.n	80122fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80122a0:	69fb      	ldr	r3, [r7, #28]
 80122a2:	015a      	lsls	r2, r3, #5
 80122a4:	6a3b      	ldr	r3, [r7, #32]
 80122a6:	4413      	add	r3, r2
 80122a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122ac:	685b      	ldr	r3, [r3, #4]
 80122ae:	69fa      	ldr	r2, [r7, #28]
 80122b0:	0151      	lsls	r1, r2, #5
 80122b2:	6a3a      	ldr	r2, [r7, #32]
 80122b4:	440a      	add	r2, r1
 80122b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80122ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80122be:	6053      	str	r3, [r2, #4]
          break;
 80122c0:	e01b      	b.n	80122fa <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80122c2:	69fb      	ldr	r3, [r7, #28]
 80122c4:	015a      	lsls	r2, r3, #5
 80122c6:	6a3b      	ldr	r3, [r7, #32]
 80122c8:	4413      	add	r3, r2
 80122ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	69fa      	ldr	r2, [r7, #28]
 80122d2:	0151      	lsls	r1, r2, #5
 80122d4:	6a3a      	ldr	r2, [r7, #32]
 80122d6:	440a      	add	r2, r1
 80122d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80122dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80122e0:	6053      	str	r3, [r2, #4]
          break;
 80122e2:	e00a      	b.n	80122fa <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	015a      	lsls	r2, r3, #5
 80122e8:	6a3b      	ldr	r3, [r7, #32]
 80122ea:	4413      	add	r3, r2
 80122ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80122f0:	461a      	mov	r2, r3
 80122f2:	2300      	movs	r3, #0
 80122f4:	6053      	str	r3, [r2, #4]
 80122f6:	e000      	b.n	80122fa <USB_HC_StartXfer+0x3ea>
          break;
 80122f8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80122fa:	69fb      	ldr	r3, [r7, #28]
 80122fc:	015a      	lsls	r2, r3, #5
 80122fe:	6a3b      	ldr	r3, [r7, #32]
 8012300:	4413      	add	r3, r2
 8012302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012310:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8012312:	68bb      	ldr	r3, [r7, #8]
 8012314:	78db      	ldrb	r3, [r3, #3]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d004      	beq.n	8012324 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012320:	613b      	str	r3, [r7, #16]
 8012322:	e003      	b.n	801232c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801232a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 801232c:	693b      	ldr	r3, [r7, #16]
 801232e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012332:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	015a      	lsls	r2, r3, #5
 8012338:	6a3b      	ldr	r3, [r7, #32]
 801233a:	4413      	add	r3, r2
 801233c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012340:	461a      	mov	r2, r3
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8012346:	79fb      	ldrb	r3, [r7, #7]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d003      	beq.n	8012354 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 801234c:	2300      	movs	r3, #0
 801234e:	e055      	b.n	80123fc <USB_HC_StartXfer+0x4ec>
 8012350:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	78db      	ldrb	r3, [r3, #3]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d14e      	bne.n	80123fa <USB_HC_StartXfer+0x4ea>
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	6a1b      	ldr	r3, [r3, #32]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d04a      	beq.n	80123fa <USB_HC_StartXfer+0x4ea>
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	79db      	ldrb	r3, [r3, #7]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d146      	bne.n	80123fa <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	7c9b      	ldrb	r3, [r3, #18]
 8012370:	2b03      	cmp	r3, #3
 8012372:	d831      	bhi.n	80123d8 <USB_HC_StartXfer+0x4c8>
 8012374:	a201      	add	r2, pc, #4	@ (adr r2, 801237c <USB_HC_StartXfer+0x46c>)
 8012376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801237a:	bf00      	nop
 801237c:	0801238d 	.word	0x0801238d
 8012380:	080123b1 	.word	0x080123b1
 8012384:	0801238d 	.word	0x0801238d
 8012388:	080123b1 	.word	0x080123b1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	6a1b      	ldr	r3, [r3, #32]
 8012390:	3303      	adds	r3, #3
 8012392:	089b      	lsrs	r3, r3, #2
 8012394:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8012396:	8afa      	ldrh	r2, [r7, #22]
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801239c:	b29b      	uxth	r3, r3
 801239e:	429a      	cmp	r2, r3
 80123a0:	d91c      	bls.n	80123dc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	699b      	ldr	r3, [r3, #24]
 80123a6:	f043 0220 	orr.w	r2, r3, #32
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80123ae:	e015      	b.n	80123dc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	6a1b      	ldr	r3, [r3, #32]
 80123b4:	3303      	adds	r3, #3
 80123b6:	089b      	lsrs	r3, r3, #2
 80123b8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80123ba:	8afa      	ldrh	r2, [r7, #22]
 80123bc:	6a3b      	ldr	r3, [r7, #32]
 80123be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80123c2:	691b      	ldr	r3, [r3, #16]
 80123c4:	b29b      	uxth	r3, r3
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d90a      	bls.n	80123e0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	699b      	ldr	r3, [r3, #24]
 80123ce:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	619a      	str	r2, [r3, #24]
        }
        break;
 80123d6:	e003      	b.n	80123e0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80123d8:	bf00      	nop
 80123da:	e002      	b.n	80123e2 <USB_HC_StartXfer+0x4d2>
        break;
 80123dc:	bf00      	nop
 80123de:	e000      	b.n	80123e2 <USB_HC_StartXfer+0x4d2>
        break;
 80123e0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	6999      	ldr	r1, [r3, #24]
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	785a      	ldrb	r2, [r3, #1]
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	6a1b      	ldr	r3, [r3, #32]
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	2000      	movs	r0, #0
 80123f2:	9000      	str	r0, [sp, #0]
 80123f4:	68f8      	ldr	r0, [r7, #12]
 80123f6:	f7ff f9d6 	bl	80117a6 <USB_WritePacket>
  }

  return HAL_OK;
 80123fa:	2300      	movs	r3, #0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3728      	adds	r7, #40	@ 0x28
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}

08012404 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8012404:	b480      	push	{r7}
 8012406:	b085      	sub	sp, #20
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012416:	695b      	ldr	r3, [r3, #20]
 8012418:	b29b      	uxth	r3, r3
}
 801241a:	4618      	mov	r0, r3
 801241c:	3714      	adds	r7, #20
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr

08012426 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8012426:	b480      	push	{r7}
 8012428:	b089      	sub	sp, #36	@ 0x24
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
 801242e:	460b      	mov	r3, r1
 8012430:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8012436:	78fb      	ldrb	r3, [r7, #3]
 8012438:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801243a:	2300      	movs	r3, #0
 801243c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	015a      	lsls	r2, r3, #5
 8012442:	69fb      	ldr	r3, [r7, #28]
 8012444:	4413      	add	r3, r2
 8012446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	0c9b      	lsrs	r3, r3, #18
 801244e:	f003 0303 	and.w	r3, r3, #3
 8012452:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8012454:	69bb      	ldr	r3, [r7, #24]
 8012456:	015a      	lsls	r2, r3, #5
 8012458:	69fb      	ldr	r3, [r7, #28]
 801245a:	4413      	add	r3, r2
 801245c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	0fdb      	lsrs	r3, r3, #31
 8012464:	f003 0301 	and.w	r3, r3, #1
 8012468:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	015a      	lsls	r2, r3, #5
 801246e:	69fb      	ldr	r3, [r7, #28]
 8012470:	4413      	add	r3, r2
 8012472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	0fdb      	lsrs	r3, r3, #31
 801247a:	f003 0301 	and.w	r3, r3, #1
 801247e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	689b      	ldr	r3, [r3, #8]
 8012484:	f003 0320 	and.w	r3, r3, #32
 8012488:	2b20      	cmp	r3, #32
 801248a:	d10d      	bne.n	80124a8 <USB_HC_Halt+0x82>
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d10a      	bne.n	80124a8 <USB_HC_Halt+0x82>
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d005      	beq.n	80124a4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	2b01      	cmp	r3, #1
 801249c:	d002      	beq.n	80124a4 <USB_HC_Halt+0x7e>
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	2b03      	cmp	r3, #3
 80124a2:	d101      	bne.n	80124a8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80124a4:	2300      	movs	r3, #0
 80124a6:	e0d8      	b.n	801265a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d002      	beq.n	80124b4 <USB_HC_Halt+0x8e>
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	2b02      	cmp	r3, #2
 80124b2:	d173      	bne.n	801259c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80124b4:	69bb      	ldr	r3, [r7, #24]
 80124b6:	015a      	lsls	r2, r3, #5
 80124b8:	69fb      	ldr	r3, [r7, #28]
 80124ba:	4413      	add	r3, r2
 80124bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	69ba      	ldr	r2, [r7, #24]
 80124c4:	0151      	lsls	r1, r2, #5
 80124c6:	69fa      	ldr	r2, [r7, #28]
 80124c8:	440a      	add	r2, r1
 80124ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80124ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80124d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	689b      	ldr	r3, [r3, #8]
 80124d8:	f003 0320 	and.w	r3, r3, #32
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d14a      	bne.n	8012576 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d133      	bne.n	8012554 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	015a      	lsls	r2, r3, #5
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	4413      	add	r3, r2
 80124f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	69ba      	ldr	r2, [r7, #24]
 80124fc:	0151      	lsls	r1, r2, #5
 80124fe:	69fa      	ldr	r2, [r7, #28]
 8012500:	440a      	add	r2, r1
 8012502:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012506:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801250a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801250c:	69bb      	ldr	r3, [r7, #24]
 801250e:	015a      	lsls	r2, r3, #5
 8012510:	69fb      	ldr	r3, [r7, #28]
 8012512:	4413      	add	r3, r2
 8012514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	69ba      	ldr	r2, [r7, #24]
 801251c:	0151      	lsls	r1, r2, #5
 801251e:	69fa      	ldr	r2, [r7, #28]
 8012520:	440a      	add	r2, r1
 8012522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012526:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801252a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	3301      	adds	r3, #1
 8012530:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012538:	d82e      	bhi.n	8012598 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801253a:	69bb      	ldr	r3, [r7, #24]
 801253c:	015a      	lsls	r2, r3, #5
 801253e:	69fb      	ldr	r3, [r7, #28]
 8012540:	4413      	add	r3, r2
 8012542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801254c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012550:	d0ec      	beq.n	801252c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012552:	e081      	b.n	8012658 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	015a      	lsls	r2, r3, #5
 8012558:	69fb      	ldr	r3, [r7, #28]
 801255a:	4413      	add	r3, r2
 801255c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	69ba      	ldr	r2, [r7, #24]
 8012564:	0151      	lsls	r1, r2, #5
 8012566:	69fa      	ldr	r2, [r7, #28]
 8012568:	440a      	add	r2, r1
 801256a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801256e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012572:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012574:	e070      	b.n	8012658 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	015a      	lsls	r2, r3, #5
 801257a:	69fb      	ldr	r3, [r7, #28]
 801257c:	4413      	add	r3, r2
 801257e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	69ba      	ldr	r2, [r7, #24]
 8012586:	0151      	lsls	r1, r2, #5
 8012588:	69fa      	ldr	r2, [r7, #28]
 801258a:	440a      	add	r2, r1
 801258c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012590:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012594:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8012596:	e05f      	b.n	8012658 <USB_HC_Halt+0x232>
            break;
 8012598:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801259a:	e05d      	b.n	8012658 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	015a      	lsls	r2, r3, #5
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	4413      	add	r3, r2
 80125a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	69ba      	ldr	r2, [r7, #24]
 80125ac:	0151      	lsls	r1, r2, #5
 80125ae:	69fa      	ldr	r2, [r7, #28]
 80125b0:	440a      	add	r2, r1
 80125b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80125b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80125ba:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80125c2:	691b      	ldr	r3, [r3, #16]
 80125c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d133      	bne.n	8012634 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80125cc:	69bb      	ldr	r3, [r7, #24]
 80125ce:	015a      	lsls	r2, r3, #5
 80125d0:	69fb      	ldr	r3, [r7, #28]
 80125d2:	4413      	add	r3, r2
 80125d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	69ba      	ldr	r2, [r7, #24]
 80125dc:	0151      	lsls	r1, r2, #5
 80125de:	69fa      	ldr	r2, [r7, #28]
 80125e0:	440a      	add	r2, r1
 80125e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80125e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80125ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	015a      	lsls	r2, r3, #5
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	4413      	add	r3, r2
 80125f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	69ba      	ldr	r2, [r7, #24]
 80125fc:	0151      	lsls	r1, r2, #5
 80125fe:	69fa      	ldr	r2, [r7, #28]
 8012600:	440a      	add	r2, r1
 8012602:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012606:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801260a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 801260c:	68bb      	ldr	r3, [r7, #8]
 801260e:	3301      	adds	r3, #1
 8012610:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012618:	d81d      	bhi.n	8012656 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 801261a:	69bb      	ldr	r3, [r7, #24]
 801261c:	015a      	lsls	r2, r3, #5
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	4413      	add	r3, r2
 8012622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801262c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012630:	d0ec      	beq.n	801260c <USB_HC_Halt+0x1e6>
 8012632:	e011      	b.n	8012658 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8012634:	69bb      	ldr	r3, [r7, #24]
 8012636:	015a      	lsls	r2, r3, #5
 8012638:	69fb      	ldr	r3, [r7, #28]
 801263a:	4413      	add	r3, r2
 801263c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	69ba      	ldr	r2, [r7, #24]
 8012644:	0151      	lsls	r1, r2, #5
 8012646:	69fa      	ldr	r2, [r7, #28]
 8012648:	440a      	add	r2, r1
 801264a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801264e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012652:	6013      	str	r3, [r2, #0]
 8012654:	e000      	b.n	8012658 <USB_HC_Halt+0x232>
          break;
 8012656:	bf00      	nop
    }
  }

  return HAL_OK;
 8012658:	2300      	movs	r3, #0
}
 801265a:	4618      	mov	r0, r3
 801265c:	3724      	adds	r7, #36	@ 0x24
 801265e:	46bd      	mov	sp, r7
 8012660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012664:	4770      	bx	lr
	...

08012668 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8012668:	b480      	push	{r7}
 801266a:	b087      	sub	sp, #28
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	460b      	mov	r3, r1
 8012672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8012678:	78fb      	ldrb	r3, [r7, #3]
 801267a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 801267c:	2301      	movs	r3, #1
 801267e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	04da      	lsls	r2, r3, #19
 8012684:	4b15      	ldr	r3, [pc, #84]	@ (80126dc <USB_DoPing+0x74>)
 8012686:	4013      	ands	r3, r2
 8012688:	693a      	ldr	r2, [r7, #16]
 801268a:	0151      	lsls	r1, r2, #5
 801268c:	697a      	ldr	r2, [r7, #20]
 801268e:	440a      	add	r2, r1
 8012690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8012694:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8012698:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	015a      	lsls	r2, r3, #5
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	4413      	add	r3, r2
 80126a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80126b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80126b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80126ba:	693b      	ldr	r3, [r7, #16]
 80126bc:	015a      	lsls	r2, r3, #5
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	4413      	add	r3, r2
 80126c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80126c6:	461a      	mov	r2, r3
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80126cc:	2300      	movs	r3, #0
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	371c      	adds	r7, #28
 80126d2:	46bd      	mov	sp, r7
 80126d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d8:	4770      	bx	lr
 80126da:	bf00      	nop
 80126dc:	1ff80000 	.word	0x1ff80000

080126e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b088      	sub	sp, #32
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80126e8:	2300      	movs	r3, #0
 80126ea:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80126f0:	2300      	movs	r3, #0
 80126f2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7fe ff99 	bl	801162c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80126fa:	2110      	movs	r1, #16
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f7fe fff2 	bl	80116e6 <USB_FlushTxFifo>
 8012702:	4603      	mov	r3, r0
 8012704:	2b00      	cmp	r3, #0
 8012706:	d001      	beq.n	801270c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8012708:	2301      	movs	r3, #1
 801270a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7ff f81c 	bl	801174a <USB_FlushRxFifo>
 8012712:	4603      	mov	r3, r0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d001      	beq.n	801271c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8012718:	2301      	movs	r3, #1
 801271a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 801271c:	2300      	movs	r3, #0
 801271e:	61bb      	str	r3, [r7, #24]
 8012720:	e01f      	b.n	8012762 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8012722:	69bb      	ldr	r3, [r7, #24]
 8012724:	015a      	lsls	r2, r3, #5
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	4413      	add	r3, r2
 801272a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8012732:	693b      	ldr	r3, [r7, #16]
 8012734:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012738:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012740:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012748:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	015a      	lsls	r2, r3, #5
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	4413      	add	r3, r2
 8012752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8012756:	461a      	mov	r2, r3
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801275c:	69bb      	ldr	r3, [r7, #24]
 801275e:	3301      	adds	r3, #1
 8012760:	61bb      	str	r3, [r7, #24]
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	2b0f      	cmp	r3, #15
 8012766:	d9dc      	bls.n	8012722 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8012768:	2300      	movs	r3, #0
 801276a:	61bb      	str	r3, [r7, #24]
 801276c:	e034      	b.n	80127d8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801276e:	69bb      	ldr	r3, [r7, #24]
 8012770:	015a      	lsls	r2, r3, #5
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	4413      	add	r3, r2
 8012776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012784:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801278c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8012794:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8012796:	69bb      	ldr	r3, [r7, #24]
 8012798:	015a      	lsls	r2, r3, #5
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	4413      	add	r3, r2
 801279e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80127a2:	461a      	mov	r2, r3
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	3301      	adds	r3, #1
 80127ac:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80127b4:	d80c      	bhi.n	80127d0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80127b6:	69bb      	ldr	r3, [r7, #24]
 80127b8:	015a      	lsls	r2, r3, #5
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	4413      	add	r3, r2
 80127be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80127c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80127cc:	d0ec      	beq.n	80127a8 <USB_StopHost+0xc8>
 80127ce:	e000      	b.n	80127d2 <USB_StopHost+0xf2>
        break;
 80127d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	3301      	adds	r3, #1
 80127d6:	61bb      	str	r3, [r7, #24]
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	2b0f      	cmp	r3, #15
 80127dc:	d9c7      	bls.n	801276e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80127e4:	461a      	mov	r2, r3
 80127e6:	f04f 33ff 	mov.w	r3, #4294967295
 80127ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f04f 32ff 	mov.w	r2, #4294967295
 80127f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7fe ff08 	bl	801160a <USB_EnableGlobalInt>

  return ret;
 80127fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3720      	adds	r7, #32
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}

08012804 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b084      	sub	sp, #16
 8012808:	af00      	add	r7, sp, #0
 801280a:	4603      	mov	r3, r0
 801280c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801280e:	79fb      	ldrb	r3, [r7, #7]
 8012810:	4a08      	ldr	r2, [pc, #32]	@ (8012834 <disk_status+0x30>)
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	4413      	add	r3, r2
 8012816:	685b      	ldr	r3, [r3, #4]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	79fa      	ldrb	r2, [r7, #7]
 801281c:	4905      	ldr	r1, [pc, #20]	@ (8012834 <disk_status+0x30>)
 801281e:	440a      	add	r2, r1
 8012820:	7b12      	ldrb	r2, [r2, #12]
 8012822:	4610      	mov	r0, r2
 8012824:	4798      	blx	r3
 8012826:	4603      	mov	r3, r0
 8012828:	73fb      	strb	r3, [r7, #15]
  return stat;
 801282a:	7bfb      	ldrb	r3, [r7, #15]
}
 801282c:	4618      	mov	r0, r3
 801282e:	3710      	adds	r7, #16
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}
 8012834:	200089dc 	.word	0x200089dc

08012838 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b084      	sub	sp, #16
 801283c:	af00      	add	r7, sp, #0
 801283e:	4603      	mov	r3, r0
 8012840:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012842:	2300      	movs	r3, #0
 8012844:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012846:	79fb      	ldrb	r3, [r7, #7]
 8012848:	4a0e      	ldr	r2, [pc, #56]	@ (8012884 <disk_initialize+0x4c>)
 801284a:	5cd3      	ldrb	r3, [r2, r3]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d114      	bne.n	801287a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012850:	79fb      	ldrb	r3, [r7, #7]
 8012852:	4a0c      	ldr	r2, [pc, #48]	@ (8012884 <disk_initialize+0x4c>)
 8012854:	009b      	lsls	r3, r3, #2
 8012856:	4413      	add	r3, r2
 8012858:	685b      	ldr	r3, [r3, #4]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	79fa      	ldrb	r2, [r7, #7]
 801285e:	4909      	ldr	r1, [pc, #36]	@ (8012884 <disk_initialize+0x4c>)
 8012860:	440a      	add	r2, r1
 8012862:	7b12      	ldrb	r2, [r2, #12]
 8012864:	4610      	mov	r0, r2
 8012866:	4798      	blx	r3
 8012868:	4603      	mov	r3, r0
 801286a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801286c:	7bfb      	ldrb	r3, [r7, #15]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d103      	bne.n	801287a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8012872:	79fb      	ldrb	r3, [r7, #7]
 8012874:	4a03      	ldr	r2, [pc, #12]	@ (8012884 <disk_initialize+0x4c>)
 8012876:	2101      	movs	r1, #1
 8012878:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801287a:	7bfb      	ldrb	r3, [r7, #15]
}
 801287c:	4618      	mov	r0, r3
 801287e:	3710      	adds	r7, #16
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	200089dc 	.word	0x200089dc

08012888 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012888:	b590      	push	{r4, r7, lr}
 801288a:	b087      	sub	sp, #28
 801288c:	af00      	add	r7, sp, #0
 801288e:	60b9      	str	r1, [r7, #8]
 8012890:	607a      	str	r2, [r7, #4]
 8012892:	603b      	str	r3, [r7, #0]
 8012894:	4603      	mov	r3, r0
 8012896:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012898:	7bfb      	ldrb	r3, [r7, #15]
 801289a:	4a0a      	ldr	r2, [pc, #40]	@ (80128c4 <disk_read+0x3c>)
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	4413      	add	r3, r2
 80128a0:	685b      	ldr	r3, [r3, #4]
 80128a2:	689c      	ldr	r4, [r3, #8]
 80128a4:	7bfb      	ldrb	r3, [r7, #15]
 80128a6:	4a07      	ldr	r2, [pc, #28]	@ (80128c4 <disk_read+0x3c>)
 80128a8:	4413      	add	r3, r2
 80128aa:	7b18      	ldrb	r0, [r3, #12]
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	68b9      	ldr	r1, [r7, #8]
 80128b2:	47a0      	blx	r4
 80128b4:	4603      	mov	r3, r0
 80128b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80128b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	371c      	adds	r7, #28
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd90      	pop	{r4, r7, pc}
 80128c2:	bf00      	nop
 80128c4:	200089dc 	.word	0x200089dc

080128c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80128c8:	b590      	push	{r4, r7, lr}
 80128ca:	b087      	sub	sp, #28
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	60b9      	str	r1, [r7, #8]
 80128d0:	607a      	str	r2, [r7, #4]
 80128d2:	603b      	str	r3, [r7, #0]
 80128d4:	4603      	mov	r3, r0
 80128d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80128d8:	7bfb      	ldrb	r3, [r7, #15]
 80128da:	4a0a      	ldr	r2, [pc, #40]	@ (8012904 <disk_write+0x3c>)
 80128dc:	009b      	lsls	r3, r3, #2
 80128de:	4413      	add	r3, r2
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	68dc      	ldr	r4, [r3, #12]
 80128e4:	7bfb      	ldrb	r3, [r7, #15]
 80128e6:	4a07      	ldr	r2, [pc, #28]	@ (8012904 <disk_write+0x3c>)
 80128e8:	4413      	add	r3, r2
 80128ea:	7b18      	ldrb	r0, [r3, #12]
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	68b9      	ldr	r1, [r7, #8]
 80128f2:	47a0      	blx	r4
 80128f4:	4603      	mov	r3, r0
 80128f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80128f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	371c      	adds	r7, #28
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd90      	pop	{r4, r7, pc}
 8012902:	bf00      	nop
 8012904:	200089dc 	.word	0x200089dc

08012908 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b084      	sub	sp, #16
 801290c:	af00      	add	r7, sp, #0
 801290e:	4603      	mov	r3, r0
 8012910:	603a      	str	r2, [r7, #0]
 8012912:	71fb      	strb	r3, [r7, #7]
 8012914:	460b      	mov	r3, r1
 8012916:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012918:	79fb      	ldrb	r3, [r7, #7]
 801291a:	4a09      	ldr	r2, [pc, #36]	@ (8012940 <disk_ioctl+0x38>)
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	4413      	add	r3, r2
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	691b      	ldr	r3, [r3, #16]
 8012924:	79fa      	ldrb	r2, [r7, #7]
 8012926:	4906      	ldr	r1, [pc, #24]	@ (8012940 <disk_ioctl+0x38>)
 8012928:	440a      	add	r2, r1
 801292a:	7b10      	ldrb	r0, [r2, #12]
 801292c:	79b9      	ldrb	r1, [r7, #6]
 801292e:	683a      	ldr	r2, [r7, #0]
 8012930:	4798      	blx	r3
 8012932:	4603      	mov	r3, r0
 8012934:	73fb      	strb	r3, [r7, #15]
  return res;
 8012936:	7bfb      	ldrb	r3, [r7, #15]
}
 8012938:	4618      	mov	r0, r3
 801293a:	3710      	adds	r7, #16
 801293c:	46bd      	mov	sp, r7
 801293e:	bd80      	pop	{r7, pc}
 8012940:	200089dc 	.word	0x200089dc

08012944 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8012944:	b480      	push	{r7}
 8012946:	af00      	add	r7, sp, #0
  return 0;
 8012948:	2300      	movs	r3, #0
}
 801294a:	4618      	mov	r0, r3
 801294c:	46bd      	mov	sp, r7
 801294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012952:	4770      	bx	lr

08012954 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012954:	b480      	push	{r7}
 8012956:	b085      	sub	sp, #20
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3301      	adds	r3, #1
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012964:	89fb      	ldrh	r3, [r7, #14]
 8012966:	021b      	lsls	r3, r3, #8
 8012968:	b21a      	sxth	r2, r3
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	b21b      	sxth	r3, r3
 8012970:	4313      	orrs	r3, r2
 8012972:	b21b      	sxth	r3, r3
 8012974:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012976:	89fb      	ldrh	r3, [r7, #14]
}
 8012978:	4618      	mov	r0, r3
 801297a:	3714      	adds	r7, #20
 801297c:	46bd      	mov	sp, r7
 801297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012982:	4770      	bx	lr

08012984 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012984:	b480      	push	{r7}
 8012986:	b085      	sub	sp, #20
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	3303      	adds	r3, #3
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	021b      	lsls	r3, r3, #8
 8012998:	687a      	ldr	r2, [r7, #4]
 801299a:	3202      	adds	r2, #2
 801299c:	7812      	ldrb	r2, [r2, #0]
 801299e:	4313      	orrs	r3, r2
 80129a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	021b      	lsls	r3, r3, #8
 80129a6:	687a      	ldr	r2, [r7, #4]
 80129a8:	3201      	adds	r2, #1
 80129aa:	7812      	ldrb	r2, [r2, #0]
 80129ac:	4313      	orrs	r3, r2
 80129ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	021b      	lsls	r3, r3, #8
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	7812      	ldrb	r2, [r2, #0]
 80129b8:	4313      	orrs	r3, r2
 80129ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80129bc:	68fb      	ldr	r3, [r7, #12]
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3714      	adds	r7, #20
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr

080129ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80129ca:	b480      	push	{r7}
 80129cc:	b083      	sub	sp, #12
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
 80129d2:	460b      	mov	r3, r1
 80129d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	1c5a      	adds	r2, r3, #1
 80129da:	607a      	str	r2, [r7, #4]
 80129dc:	887a      	ldrh	r2, [r7, #2]
 80129de:	b2d2      	uxtb	r2, r2
 80129e0:	701a      	strb	r2, [r3, #0]
 80129e2:	887b      	ldrh	r3, [r7, #2]
 80129e4:	0a1b      	lsrs	r3, r3, #8
 80129e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	1c5a      	adds	r2, r3, #1
 80129ec:	607a      	str	r2, [r7, #4]
 80129ee:	887a      	ldrh	r2, [r7, #2]
 80129f0:	b2d2      	uxtb	r2, r2
 80129f2:	701a      	strb	r2, [r3, #0]
}
 80129f4:	bf00      	nop
 80129f6:	370c      	adds	r7, #12
 80129f8:	46bd      	mov	sp, r7
 80129fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fe:	4770      	bx	lr

08012a00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012a00:	b480      	push	{r7}
 8012a02:	b083      	sub	sp, #12
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	1c5a      	adds	r2, r3, #1
 8012a0e:	607a      	str	r2, [r7, #4]
 8012a10:	683a      	ldr	r2, [r7, #0]
 8012a12:	b2d2      	uxtb	r2, r2
 8012a14:	701a      	strb	r2, [r3, #0]
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	0a1b      	lsrs	r3, r3, #8
 8012a1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	1c5a      	adds	r2, r3, #1
 8012a20:	607a      	str	r2, [r7, #4]
 8012a22:	683a      	ldr	r2, [r7, #0]
 8012a24:	b2d2      	uxtb	r2, r2
 8012a26:	701a      	strb	r2, [r3, #0]
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	0a1b      	lsrs	r3, r3, #8
 8012a2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	1c5a      	adds	r2, r3, #1
 8012a32:	607a      	str	r2, [r7, #4]
 8012a34:	683a      	ldr	r2, [r7, #0]
 8012a36:	b2d2      	uxtb	r2, r2
 8012a38:	701a      	strb	r2, [r3, #0]
 8012a3a:	683b      	ldr	r3, [r7, #0]
 8012a3c:	0a1b      	lsrs	r3, r3, #8
 8012a3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	1c5a      	adds	r2, r3, #1
 8012a44:	607a      	str	r2, [r7, #4]
 8012a46:	683a      	ldr	r2, [r7, #0]
 8012a48:	b2d2      	uxtb	r2, r2
 8012a4a:	701a      	strb	r2, [r3, #0]
}
 8012a4c:	bf00      	nop
 8012a4e:	370c      	adds	r7, #12
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr

08012a58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012a58:	b480      	push	{r7}
 8012a5a:	b087      	sub	sp, #28
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	60f8      	str	r0, [r7, #12]
 8012a60:	60b9      	str	r1, [r7, #8]
 8012a62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d00d      	beq.n	8012a8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012a72:	693a      	ldr	r2, [r7, #16]
 8012a74:	1c53      	adds	r3, r2, #1
 8012a76:	613b      	str	r3, [r7, #16]
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	1c59      	adds	r1, r3, #1
 8012a7c:	6179      	str	r1, [r7, #20]
 8012a7e:	7812      	ldrb	r2, [r2, #0]
 8012a80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	3b01      	subs	r3, #1
 8012a86:	607b      	str	r3, [r7, #4]
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d1f1      	bne.n	8012a72 <mem_cpy+0x1a>
	}
}
 8012a8e:	bf00      	nop
 8012a90:	371c      	adds	r7, #28
 8012a92:	46bd      	mov	sp, r7
 8012a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a98:	4770      	bx	lr

08012a9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012a9a:	b480      	push	{r7}
 8012a9c:	b087      	sub	sp, #28
 8012a9e:	af00      	add	r7, sp, #0
 8012aa0:	60f8      	str	r0, [r7, #12]
 8012aa2:	60b9      	str	r1, [r7, #8]
 8012aa4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	617a      	str	r2, [r7, #20]
 8012ab0:	68ba      	ldr	r2, [r7, #8]
 8012ab2:	b2d2      	uxtb	r2, r2
 8012ab4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	3b01      	subs	r3, #1
 8012aba:	607b      	str	r3, [r7, #4]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d1f3      	bne.n	8012aaa <mem_set+0x10>
}
 8012ac2:	bf00      	nop
 8012ac4:	bf00      	nop
 8012ac6:	371c      	adds	r7, #28
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ace:	4770      	bx	lr

08012ad0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012ad0:	b480      	push	{r7}
 8012ad2:	b089      	sub	sp, #36	@ 0x24
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	60f8      	str	r0, [r7, #12]
 8012ad8:	60b9      	str	r1, [r7, #8]
 8012ada:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	61fb      	str	r3, [r7, #28]
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	1c5a      	adds	r2, r3, #1
 8012aec:	61fa      	str	r2, [r7, #28]
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	4619      	mov	r1, r3
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	1c5a      	adds	r2, r3, #1
 8012af6:	61ba      	str	r2, [r7, #24]
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	1acb      	subs	r3, r1, r3
 8012afc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	3b01      	subs	r3, #1
 8012b02:	607b      	str	r3, [r7, #4]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d002      	beq.n	8012b10 <mem_cmp+0x40>
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d0eb      	beq.n	8012ae8 <mem_cmp+0x18>

	return r;
 8012b10:	697b      	ldr	r3, [r7, #20]
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3724      	adds	r7, #36	@ 0x24
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr

08012b1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012b1e:	b480      	push	{r7}
 8012b20:	b083      	sub	sp, #12
 8012b22:	af00      	add	r7, sp, #0
 8012b24:	6078      	str	r0, [r7, #4]
 8012b26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012b28:	e002      	b.n	8012b30 <chk_chr+0x12>
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	3301      	adds	r3, #1
 8012b2e:	607b      	str	r3, [r7, #4]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d005      	beq.n	8012b44 <chk_chr+0x26>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	4293      	cmp	r3, r2
 8012b42:	d1f2      	bne.n	8012b2a <chk_chr+0xc>
	return *str;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	781b      	ldrb	r3, [r3, #0]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	370c      	adds	r7, #12
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b52:	4770      	bx	lr

08012b54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012b54:	b480      	push	{r7}
 8012b56:	b085      	sub	sp, #20
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012b5e:	2300      	movs	r3, #0
 8012b60:	60bb      	str	r3, [r7, #8]
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	60fb      	str	r3, [r7, #12]
 8012b66:	e029      	b.n	8012bbc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012b68:	4a27      	ldr	r2, [pc, #156]	@ (8012c08 <chk_lock+0xb4>)
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	011b      	lsls	r3, r3, #4
 8012b6e:	4413      	add	r3, r2
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d01d      	beq.n	8012bb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012b76:	4a24      	ldr	r2, [pc, #144]	@ (8012c08 <chk_lock+0xb4>)
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	011b      	lsls	r3, r3, #4
 8012b7c:	4413      	add	r3, r2
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d116      	bne.n	8012bb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012b88:	4a1f      	ldr	r2, [pc, #124]	@ (8012c08 <chk_lock+0xb4>)
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	011b      	lsls	r3, r3, #4
 8012b8e:	4413      	add	r3, r2
 8012b90:	3304      	adds	r3, #4
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d10c      	bne.n	8012bb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8012c08 <chk_lock+0xb4>)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	011b      	lsls	r3, r3, #4
 8012ba2:	4413      	add	r3, r2
 8012ba4:	3308      	adds	r3, #8
 8012ba6:	681a      	ldr	r2, [r3, #0]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d102      	bne.n	8012bb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012bb0:	e007      	b.n	8012bc2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	3301      	adds	r3, #1
 8012bba:	60fb      	str	r3, [r7, #12]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2b01      	cmp	r3, #1
 8012bc0:	d9d2      	bls.n	8012b68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2b02      	cmp	r3, #2
 8012bc6:	d109      	bne.n	8012bdc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d102      	bne.n	8012bd4 <chk_lock+0x80>
 8012bce:	683b      	ldr	r3, [r7, #0]
 8012bd0:	2b02      	cmp	r3, #2
 8012bd2:	d101      	bne.n	8012bd8 <chk_lock+0x84>
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	e010      	b.n	8012bfa <chk_lock+0xa6>
 8012bd8:	2312      	movs	r3, #18
 8012bda:	e00e      	b.n	8012bfa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d108      	bne.n	8012bf4 <chk_lock+0xa0>
 8012be2:	4a09      	ldr	r2, [pc, #36]	@ (8012c08 <chk_lock+0xb4>)
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	011b      	lsls	r3, r3, #4
 8012be8:	4413      	add	r3, r2
 8012bea:	330c      	adds	r3, #12
 8012bec:	881b      	ldrh	r3, [r3, #0]
 8012bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012bf2:	d101      	bne.n	8012bf8 <chk_lock+0xa4>
 8012bf4:	2310      	movs	r3, #16
 8012bf6:	e000      	b.n	8012bfa <chk_lock+0xa6>
 8012bf8:	2300      	movs	r3, #0
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3714      	adds	r7, #20
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c04:	4770      	bx	lr
 8012c06:	bf00      	nop
 8012c08:	200089bc 	.word	0x200089bc

08012c0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b083      	sub	sp, #12
 8012c10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012c12:	2300      	movs	r3, #0
 8012c14:	607b      	str	r3, [r7, #4]
 8012c16:	e002      	b.n	8012c1e <enq_lock+0x12>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	607b      	str	r3, [r7, #4]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2b01      	cmp	r3, #1
 8012c22:	d806      	bhi.n	8012c32 <enq_lock+0x26>
 8012c24:	4a09      	ldr	r2, [pc, #36]	@ (8012c4c <enq_lock+0x40>)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	011b      	lsls	r3, r3, #4
 8012c2a:	4413      	add	r3, r2
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d1f2      	bne.n	8012c18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	2b02      	cmp	r3, #2
 8012c36:	bf14      	ite	ne
 8012c38:	2301      	movne	r3, #1
 8012c3a:	2300      	moveq	r3, #0
 8012c3c:	b2db      	uxtb	r3, r3
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	370c      	adds	r7, #12
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr
 8012c4a:	bf00      	nop
 8012c4c:	200089bc 	.word	0x200089bc

08012c50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012c50:	b480      	push	{r7}
 8012c52:	b085      	sub	sp, #20
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
 8012c58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	60fb      	str	r3, [r7, #12]
 8012c5e:	e01f      	b.n	8012ca0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012c60:	4a41      	ldr	r2, [pc, #260]	@ (8012d68 <inc_lock+0x118>)
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	011b      	lsls	r3, r3, #4
 8012c66:	4413      	add	r3, r2
 8012c68:	681a      	ldr	r2, [r3, #0]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d113      	bne.n	8012c9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012c72:	4a3d      	ldr	r2, [pc, #244]	@ (8012d68 <inc_lock+0x118>)
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	011b      	lsls	r3, r3, #4
 8012c78:	4413      	add	r3, r2
 8012c7a:	3304      	adds	r3, #4
 8012c7c:	681a      	ldr	r2, [r3, #0]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d109      	bne.n	8012c9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012c86:	4a38      	ldr	r2, [pc, #224]	@ (8012d68 <inc_lock+0x118>)
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	011b      	lsls	r3, r3, #4
 8012c8c:	4413      	add	r3, r2
 8012c8e:	3308      	adds	r3, #8
 8012c90:	681a      	ldr	r2, [r3, #0]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d006      	beq.n	8012ca8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	60fb      	str	r3, [r7, #12]
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2b01      	cmp	r3, #1
 8012ca4:	d9dc      	bls.n	8012c60 <inc_lock+0x10>
 8012ca6:	e000      	b.n	8012caa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012ca8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	2b02      	cmp	r3, #2
 8012cae:	d132      	bne.n	8012d16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	60fb      	str	r3, [r7, #12]
 8012cb4:	e002      	b.n	8012cbc <inc_lock+0x6c>
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	3301      	adds	r3, #1
 8012cba:	60fb      	str	r3, [r7, #12]
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	2b01      	cmp	r3, #1
 8012cc0:	d806      	bhi.n	8012cd0 <inc_lock+0x80>
 8012cc2:	4a29      	ldr	r2, [pc, #164]	@ (8012d68 <inc_lock+0x118>)
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	011b      	lsls	r3, r3, #4
 8012cc8:	4413      	add	r3, r2
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d1f2      	bne.n	8012cb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2b02      	cmp	r3, #2
 8012cd4:	d101      	bne.n	8012cda <inc_lock+0x8a>
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	e040      	b.n	8012d5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	4922      	ldr	r1, [pc, #136]	@ (8012d68 <inc_lock+0x118>)
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	011b      	lsls	r3, r3, #4
 8012ce4:	440b      	add	r3, r1
 8012ce6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	689a      	ldr	r2, [r3, #8]
 8012cec:	491e      	ldr	r1, [pc, #120]	@ (8012d68 <inc_lock+0x118>)
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	011b      	lsls	r3, r3, #4
 8012cf2:	440b      	add	r3, r1
 8012cf4:	3304      	adds	r3, #4
 8012cf6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	695a      	ldr	r2, [r3, #20]
 8012cfc:	491a      	ldr	r1, [pc, #104]	@ (8012d68 <inc_lock+0x118>)
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	011b      	lsls	r3, r3, #4
 8012d02:	440b      	add	r3, r1
 8012d04:	3308      	adds	r3, #8
 8012d06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012d08:	4a17      	ldr	r2, [pc, #92]	@ (8012d68 <inc_lock+0x118>)
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	011b      	lsls	r3, r3, #4
 8012d0e:	4413      	add	r3, r2
 8012d10:	330c      	adds	r3, #12
 8012d12:	2200      	movs	r2, #0
 8012d14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d009      	beq.n	8012d30 <inc_lock+0xe0>
 8012d1c:	4a12      	ldr	r2, [pc, #72]	@ (8012d68 <inc_lock+0x118>)
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	011b      	lsls	r3, r3, #4
 8012d22:	4413      	add	r3, r2
 8012d24:	330c      	adds	r3, #12
 8012d26:	881b      	ldrh	r3, [r3, #0]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d001      	beq.n	8012d30 <inc_lock+0xe0>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	e015      	b.n	8012d5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d108      	bne.n	8012d48 <inc_lock+0xf8>
 8012d36:	4a0c      	ldr	r2, [pc, #48]	@ (8012d68 <inc_lock+0x118>)
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	011b      	lsls	r3, r3, #4
 8012d3c:	4413      	add	r3, r2
 8012d3e:	330c      	adds	r3, #12
 8012d40:	881b      	ldrh	r3, [r3, #0]
 8012d42:	3301      	adds	r3, #1
 8012d44:	b29a      	uxth	r2, r3
 8012d46:	e001      	b.n	8012d4c <inc_lock+0xfc>
 8012d48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012d4c:	4906      	ldr	r1, [pc, #24]	@ (8012d68 <inc_lock+0x118>)
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	011b      	lsls	r3, r3, #4
 8012d52:	440b      	add	r3, r1
 8012d54:	330c      	adds	r3, #12
 8012d56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	3301      	adds	r3, #1
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3714      	adds	r7, #20
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr
 8012d68:	200089bc 	.word	0x200089bc

08012d6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b085      	sub	sp, #20
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	3b01      	subs	r3, #1
 8012d78:	607b      	str	r3, [r7, #4]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d825      	bhi.n	8012dcc <dec_lock+0x60>
		n = Files[i].ctr;
 8012d80:	4a17      	ldr	r2, [pc, #92]	@ (8012de0 <dec_lock+0x74>)
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	011b      	lsls	r3, r3, #4
 8012d86:	4413      	add	r3, r2
 8012d88:	330c      	adds	r3, #12
 8012d8a:	881b      	ldrh	r3, [r3, #0]
 8012d8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012d8e:	89fb      	ldrh	r3, [r7, #14]
 8012d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012d94:	d101      	bne.n	8012d9a <dec_lock+0x2e>
 8012d96:	2300      	movs	r3, #0
 8012d98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8012d9a:	89fb      	ldrh	r3, [r7, #14]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d002      	beq.n	8012da6 <dec_lock+0x3a>
 8012da0:	89fb      	ldrh	r3, [r7, #14]
 8012da2:	3b01      	subs	r3, #1
 8012da4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012da6:	4a0e      	ldr	r2, [pc, #56]	@ (8012de0 <dec_lock+0x74>)
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	011b      	lsls	r3, r3, #4
 8012dac:	4413      	add	r3, r2
 8012dae:	330c      	adds	r3, #12
 8012db0:	89fa      	ldrh	r2, [r7, #14]
 8012db2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012db4:	89fb      	ldrh	r3, [r7, #14]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d105      	bne.n	8012dc6 <dec_lock+0x5a>
 8012dba:	4a09      	ldr	r2, [pc, #36]	@ (8012de0 <dec_lock+0x74>)
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	011b      	lsls	r3, r3, #4
 8012dc0:	4413      	add	r3, r2
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	737b      	strb	r3, [r7, #13]
 8012dca:	e001      	b.n	8012dd0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012dcc:	2302      	movs	r3, #2
 8012dce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012dd0:	7b7b      	ldrb	r3, [r7, #13]
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3714      	adds	r7, #20
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr
 8012dde:	bf00      	nop
 8012de0:	200089bc 	.word	0x200089bc

08012de4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012de4:	b480      	push	{r7}
 8012de6:	b085      	sub	sp, #20
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012dec:	2300      	movs	r3, #0
 8012dee:	60fb      	str	r3, [r7, #12]
 8012df0:	e010      	b.n	8012e14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012df2:	4a0d      	ldr	r2, [pc, #52]	@ (8012e28 <clear_lock+0x44>)
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	011b      	lsls	r3, r3, #4
 8012df8:	4413      	add	r3, r2
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	687a      	ldr	r2, [r7, #4]
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d105      	bne.n	8012e0e <clear_lock+0x2a>
 8012e02:	4a09      	ldr	r2, [pc, #36]	@ (8012e28 <clear_lock+0x44>)
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	011b      	lsls	r3, r3, #4
 8012e08:	4413      	add	r3, r2
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	3301      	adds	r3, #1
 8012e12:	60fb      	str	r3, [r7, #12]
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2b01      	cmp	r3, #1
 8012e18:	d9eb      	bls.n	8012df2 <clear_lock+0xe>
	}
}
 8012e1a:	bf00      	nop
 8012e1c:	bf00      	nop
 8012e1e:	3714      	adds	r7, #20
 8012e20:	46bd      	mov	sp, r7
 8012e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e26:	4770      	bx	lr
 8012e28:	200089bc 	.word	0x200089bc

08012e2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b086      	sub	sp, #24
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012e34:	2300      	movs	r3, #0
 8012e36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	78db      	ldrb	r3, [r3, #3]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d034      	beq.n	8012eaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	7858      	ldrb	r0, [r3, #1]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012e50:	2301      	movs	r3, #1
 8012e52:	697a      	ldr	r2, [r7, #20]
 8012e54:	f7ff fd38 	bl	80128c8 <disk_write>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d002      	beq.n	8012e64 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012e5e:	2301      	movs	r3, #1
 8012e60:	73fb      	strb	r3, [r7, #15]
 8012e62:	e022      	b.n	8012eaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	2200      	movs	r2, #0
 8012e68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6a1b      	ldr	r3, [r3, #32]
 8012e6e:	697a      	ldr	r2, [r7, #20]
 8012e70:	1ad2      	subs	r2, r2, r3
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	699b      	ldr	r3, [r3, #24]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d217      	bcs.n	8012eaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	789b      	ldrb	r3, [r3, #2]
 8012e7e:	613b      	str	r3, [r7, #16]
 8012e80:	e010      	b.n	8012ea4 <sync_window+0x78>
					wsect += fs->fsize;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	699b      	ldr	r3, [r3, #24]
 8012e86:	697a      	ldr	r2, [r7, #20]
 8012e88:	4413      	add	r3, r2
 8012e8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	7858      	ldrb	r0, [r3, #1]
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012e96:	2301      	movs	r3, #1
 8012e98:	697a      	ldr	r2, [r7, #20]
 8012e9a:	f7ff fd15 	bl	80128c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012e9e:	693b      	ldr	r3, [r7, #16]
 8012ea0:	3b01      	subs	r3, #1
 8012ea2:	613b      	str	r3, [r7, #16]
 8012ea4:	693b      	ldr	r3, [r7, #16]
 8012ea6:	2b01      	cmp	r3, #1
 8012ea8:	d8eb      	bhi.n	8012e82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3718      	adds	r7, #24
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ec6:	683a      	ldr	r2, [r7, #0]
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d01b      	beq.n	8012f04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f7ff ffad 	bl	8012e2c <sync_window>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012ed6:	7bfb      	ldrb	r3, [r7, #15]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d113      	bne.n	8012f04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	7858      	ldrb	r0, [r3, #1]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	683a      	ldr	r2, [r7, #0]
 8012eea:	f7ff fccd 	bl	8012888 <disk_read>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d004      	beq.n	8012efe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ef8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012efa:	2301      	movs	r3, #1
 8012efc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	683a      	ldr	r2, [r7, #0]
 8012f02:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8012f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3710      	adds	r7, #16
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
	...

08012f10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012f18:	6878      	ldr	r0, [r7, #4]
 8012f1a:	f7ff ff87 	bl	8012e2c <sync_window>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012f22:	7bfb      	ldrb	r3, [r7, #15]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d158      	bne.n	8012fda <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	2b03      	cmp	r3, #3
 8012f2e:	d148      	bne.n	8012fc2 <sync_fs+0xb2>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	791b      	ldrb	r3, [r3, #4]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d144      	bne.n	8012fc2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	3330      	adds	r3, #48	@ 0x30
 8012f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f40:	2100      	movs	r1, #0
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7ff fda9 	bl	8012a9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	3330      	adds	r3, #48	@ 0x30
 8012f4c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012f50:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7ff fd38 	bl	80129ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	3330      	adds	r3, #48	@ 0x30
 8012f5e:	4921      	ldr	r1, [pc, #132]	@ (8012fe4 <sync_fs+0xd4>)
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7ff fd4d 	bl	8012a00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	3330      	adds	r3, #48	@ 0x30
 8012f6a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012f6e:	491e      	ldr	r1, [pc, #120]	@ (8012fe8 <sync_fs+0xd8>)
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7ff fd45 	bl	8012a00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	3330      	adds	r3, #48	@ 0x30
 8012f7a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	691b      	ldr	r3, [r3, #16]
 8012f82:	4619      	mov	r1, r3
 8012f84:	4610      	mov	r0, r2
 8012f86:	f7ff fd3b 	bl	8012a00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	3330      	adds	r3, #48	@ 0x30
 8012f8e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	68db      	ldr	r3, [r3, #12]
 8012f96:	4619      	mov	r1, r3
 8012f98:	4610      	mov	r0, r2
 8012f9a:	f7ff fd31 	bl	8012a00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	69db      	ldr	r3, [r3, #28]
 8012fa2:	1c5a      	adds	r2, r3, #1
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	7858      	ldrb	r0, [r3, #1]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	f7ff fc86 	bl	80128c8 <disk_write>
			fs->fsi_flag = 0;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	785b      	ldrb	r3, [r3, #1]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	2100      	movs	r1, #0
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7ff fc9c 	bl	8012908 <disk_ioctl>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d001      	beq.n	8012fda <sync_fs+0xca>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3710      	adds	r7, #16
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	41615252 	.word	0x41615252
 8012fe8:	61417272 	.word	0x61417272

08012fec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	3b02      	subs	r3, #2
 8012ffa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	695b      	ldr	r3, [r3, #20]
 8013000:	3b02      	subs	r3, #2
 8013002:	683a      	ldr	r2, [r7, #0]
 8013004:	429a      	cmp	r2, r3
 8013006:	d301      	bcc.n	801300c <clust2sect+0x20>
 8013008:	2300      	movs	r3, #0
 801300a:	e008      	b.n	801301e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	895b      	ldrh	r3, [r3, #10]
 8013010:	461a      	mov	r2, r3
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	fb03 f202 	mul.w	r2, r3, r2
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801301c:	4413      	add	r3, r2
}
 801301e:	4618      	mov	r0, r3
 8013020:	370c      	adds	r7, #12
 8013022:	46bd      	mov	sp, r7
 8013024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013028:	4770      	bx	lr

0801302a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801302a:	b580      	push	{r7, lr}
 801302c:	b086      	sub	sp, #24
 801302e:	af00      	add	r7, sp, #0
 8013030:	6078      	str	r0, [r7, #4]
 8013032:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	2b01      	cmp	r3, #1
 801303e:	d904      	bls.n	801304a <get_fat+0x20>
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	695b      	ldr	r3, [r3, #20]
 8013044:	683a      	ldr	r2, [r7, #0]
 8013046:	429a      	cmp	r2, r3
 8013048:	d302      	bcc.n	8013050 <get_fat+0x26>
		val = 1;	/* Internal error */
 801304a:	2301      	movs	r3, #1
 801304c:	617b      	str	r3, [r7, #20]
 801304e:	e08e      	b.n	801316e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013050:	f04f 33ff 	mov.w	r3, #4294967295
 8013054:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	2b03      	cmp	r3, #3
 801305c:	d061      	beq.n	8013122 <get_fat+0xf8>
 801305e:	2b03      	cmp	r3, #3
 8013060:	dc7b      	bgt.n	801315a <get_fat+0x130>
 8013062:	2b01      	cmp	r3, #1
 8013064:	d002      	beq.n	801306c <get_fat+0x42>
 8013066:	2b02      	cmp	r3, #2
 8013068:	d041      	beq.n	80130ee <get_fat+0xc4>
 801306a:	e076      	b.n	801315a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	60fb      	str	r3, [r7, #12]
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	085b      	lsrs	r3, r3, #1
 8013074:	68fa      	ldr	r2, [r7, #12]
 8013076:	4413      	add	r3, r2
 8013078:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	6a1a      	ldr	r2, [r3, #32]
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	0a5b      	lsrs	r3, r3, #9
 8013082:	4413      	add	r3, r2
 8013084:	4619      	mov	r1, r3
 8013086:	6938      	ldr	r0, [r7, #16]
 8013088:	f7ff ff14 	bl	8012eb4 <move_window>
 801308c:	4603      	mov	r3, r0
 801308e:	2b00      	cmp	r3, #0
 8013090:	d166      	bne.n	8013160 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	1c5a      	adds	r2, r3, #1
 8013096:	60fa      	str	r2, [r7, #12]
 8013098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801309c:	693a      	ldr	r2, [r7, #16]
 801309e:	4413      	add	r3, r2
 80130a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	6a1a      	ldr	r2, [r3, #32]
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	0a5b      	lsrs	r3, r3, #9
 80130ae:	4413      	add	r3, r2
 80130b0:	4619      	mov	r1, r3
 80130b2:	6938      	ldr	r0, [r7, #16]
 80130b4:	f7ff fefe 	bl	8012eb4 <move_window>
 80130b8:	4603      	mov	r3, r0
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d152      	bne.n	8013164 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130c4:	693a      	ldr	r2, [r7, #16]
 80130c6:	4413      	add	r3, r2
 80130c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130cc:	021b      	lsls	r3, r3, #8
 80130ce:	68ba      	ldr	r2, [r7, #8]
 80130d0:	4313      	orrs	r3, r2
 80130d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	f003 0301 	and.w	r3, r3, #1
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d002      	beq.n	80130e4 <get_fat+0xba>
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	091b      	lsrs	r3, r3, #4
 80130e2:	e002      	b.n	80130ea <get_fat+0xc0>
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80130ea:	617b      	str	r3, [r7, #20]
			break;
 80130ec:	e03f      	b.n	801316e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	6a1a      	ldr	r2, [r3, #32]
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	0a1b      	lsrs	r3, r3, #8
 80130f6:	4413      	add	r3, r2
 80130f8:	4619      	mov	r1, r3
 80130fa:	6938      	ldr	r0, [r7, #16]
 80130fc:	f7ff feda 	bl	8012eb4 <move_window>
 8013100:	4603      	mov	r3, r0
 8013102:	2b00      	cmp	r3, #0
 8013104:	d130      	bne.n	8013168 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	005b      	lsls	r3, r3, #1
 8013110:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8013114:	4413      	add	r3, r2
 8013116:	4618      	mov	r0, r3
 8013118:	f7ff fc1c 	bl	8012954 <ld_word>
 801311c:	4603      	mov	r3, r0
 801311e:	617b      	str	r3, [r7, #20]
			break;
 8013120:	e025      	b.n	801316e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013122:	693b      	ldr	r3, [r7, #16]
 8013124:	6a1a      	ldr	r2, [r3, #32]
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	09db      	lsrs	r3, r3, #7
 801312a:	4413      	add	r3, r2
 801312c:	4619      	mov	r1, r3
 801312e:	6938      	ldr	r0, [r7, #16]
 8013130:	f7ff fec0 	bl	8012eb4 <move_window>
 8013134:	4603      	mov	r3, r0
 8013136:	2b00      	cmp	r3, #0
 8013138:	d118      	bne.n	801316c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013148:	4413      	add	r3, r2
 801314a:	4618      	mov	r0, r3
 801314c:	f7ff fc1a 	bl	8012984 <ld_dword>
 8013150:	4603      	mov	r3, r0
 8013152:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8013156:	617b      	str	r3, [r7, #20]
			break;
 8013158:	e009      	b.n	801316e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801315a:	2301      	movs	r3, #1
 801315c:	617b      	str	r3, [r7, #20]
 801315e:	e006      	b.n	801316e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013160:	bf00      	nop
 8013162:	e004      	b.n	801316e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013164:	bf00      	nop
 8013166:	e002      	b.n	801316e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013168:	bf00      	nop
 801316a:	e000      	b.n	801316e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801316c:	bf00      	nop
		}
	}

	return val;
 801316e:	697b      	ldr	r3, [r7, #20]
}
 8013170:	4618      	mov	r0, r3
 8013172:	3718      	adds	r7, #24
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}

08013178 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013178:	b590      	push	{r4, r7, lr}
 801317a:	b089      	sub	sp, #36	@ 0x24
 801317c:	af00      	add	r7, sp, #0
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013184:	2302      	movs	r3, #2
 8013186:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	2b01      	cmp	r3, #1
 801318c:	f240 80d9 	bls.w	8013342 <put_fat+0x1ca>
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	695b      	ldr	r3, [r3, #20]
 8013194:	68ba      	ldr	r2, [r7, #8]
 8013196:	429a      	cmp	r2, r3
 8013198:	f080 80d3 	bcs.w	8013342 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	2b03      	cmp	r3, #3
 80131a2:	f000 8096 	beq.w	80132d2 <put_fat+0x15a>
 80131a6:	2b03      	cmp	r3, #3
 80131a8:	f300 80cb 	bgt.w	8013342 <put_fat+0x1ca>
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d002      	beq.n	80131b6 <put_fat+0x3e>
 80131b0:	2b02      	cmp	r3, #2
 80131b2:	d06e      	beq.n	8013292 <put_fat+0x11a>
 80131b4:	e0c5      	b.n	8013342 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	61bb      	str	r3, [r7, #24]
 80131ba:	69bb      	ldr	r3, [r7, #24]
 80131bc:	085b      	lsrs	r3, r3, #1
 80131be:	69ba      	ldr	r2, [r7, #24]
 80131c0:	4413      	add	r3, r2
 80131c2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	6a1a      	ldr	r2, [r3, #32]
 80131c8:	69bb      	ldr	r3, [r7, #24]
 80131ca:	0a5b      	lsrs	r3, r3, #9
 80131cc:	4413      	add	r3, r2
 80131ce:	4619      	mov	r1, r3
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f7ff fe6f 	bl	8012eb4 <move_window>
 80131d6:	4603      	mov	r3, r0
 80131d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80131da:	7ffb      	ldrb	r3, [r7, #31]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	f040 80a9 	bne.w	8013334 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80131e8:	69bb      	ldr	r3, [r7, #24]
 80131ea:	1c59      	adds	r1, r3, #1
 80131ec:	61b9      	str	r1, [r7, #24]
 80131ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131f2:	4413      	add	r3, r2
 80131f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	f003 0301 	and.w	r3, r3, #1
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d00d      	beq.n	801321c <put_fat+0xa4>
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	b25b      	sxtb	r3, r3
 8013206:	f003 030f 	and.w	r3, r3, #15
 801320a:	b25a      	sxtb	r2, r3
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	b2db      	uxtb	r3, r3
 8013210:	011b      	lsls	r3, r3, #4
 8013212:	b25b      	sxtb	r3, r3
 8013214:	4313      	orrs	r3, r2
 8013216:	b25b      	sxtb	r3, r3
 8013218:	b2db      	uxtb	r3, r3
 801321a:	e001      	b.n	8013220 <put_fat+0xa8>
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	b2db      	uxtb	r3, r3
 8013220:	697a      	ldr	r2, [r7, #20]
 8013222:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	2201      	movs	r2, #1
 8013228:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	6a1a      	ldr	r2, [r3, #32]
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	0a5b      	lsrs	r3, r3, #9
 8013232:	4413      	add	r3, r2
 8013234:	4619      	mov	r1, r3
 8013236:	68f8      	ldr	r0, [r7, #12]
 8013238:	f7ff fe3c 	bl	8012eb4 <move_window>
 801323c:	4603      	mov	r3, r0
 801323e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013240:	7ffb      	ldrb	r3, [r7, #31]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d178      	bne.n	8013338 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801324c:	69bb      	ldr	r3, [r7, #24]
 801324e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013252:	4413      	add	r3, r2
 8013254:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	f003 0301 	and.w	r3, r3, #1
 801325c:	2b00      	cmp	r3, #0
 801325e:	d003      	beq.n	8013268 <put_fat+0xf0>
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	091b      	lsrs	r3, r3, #4
 8013264:	b2db      	uxtb	r3, r3
 8013266:	e00e      	b.n	8013286 <put_fat+0x10e>
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	b25b      	sxtb	r3, r3
 801326e:	f023 030f 	bic.w	r3, r3, #15
 8013272:	b25a      	sxtb	r2, r3
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	0a1b      	lsrs	r3, r3, #8
 8013278:	b25b      	sxtb	r3, r3
 801327a:	f003 030f 	and.w	r3, r3, #15
 801327e:	b25b      	sxtb	r3, r3
 8013280:	4313      	orrs	r3, r2
 8013282:	b25b      	sxtb	r3, r3
 8013284:	b2db      	uxtb	r3, r3
 8013286:	697a      	ldr	r2, [r7, #20]
 8013288:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2201      	movs	r2, #1
 801328e:	70da      	strb	r2, [r3, #3]
			break;
 8013290:	e057      	b.n	8013342 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	6a1a      	ldr	r2, [r3, #32]
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	0a1b      	lsrs	r3, r3, #8
 801329a:	4413      	add	r3, r2
 801329c:	4619      	mov	r1, r3
 801329e:	68f8      	ldr	r0, [r7, #12]
 80132a0:	f7ff fe08 	bl	8012eb4 <move_window>
 80132a4:	4603      	mov	r3, r0
 80132a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80132a8:	7ffb      	ldrb	r3, [r7, #31]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d146      	bne.n	801333c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	005b      	lsls	r3, r3, #1
 80132b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80132bc:	4413      	add	r3, r2
 80132be:	687a      	ldr	r2, [r7, #4]
 80132c0:	b292      	uxth	r2, r2
 80132c2:	4611      	mov	r1, r2
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7ff fb80 	bl	80129ca <st_word>
			fs->wflag = 1;
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	2201      	movs	r2, #1
 80132ce:	70da      	strb	r2, [r3, #3]
			break;
 80132d0:	e037      	b.n	8013342 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	6a1a      	ldr	r2, [r3, #32]
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	09db      	lsrs	r3, r3, #7
 80132da:	4413      	add	r3, r2
 80132dc:	4619      	mov	r1, r3
 80132de:	68f8      	ldr	r0, [r7, #12]
 80132e0:	f7ff fde8 	bl	8012eb4 <move_window>
 80132e4:	4603      	mov	r3, r0
 80132e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80132e8:	7ffb      	ldrb	r3, [r7, #31]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d128      	bne.n	8013340 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013302:	4413      	add	r3, r2
 8013304:	4618      	mov	r0, r3
 8013306:	f7ff fb3d 	bl	8012984 <ld_dword>
 801330a:	4603      	mov	r3, r0
 801330c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8013310:	4323      	orrs	r3, r4
 8013312:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8013322:	4413      	add	r3, r2
 8013324:	6879      	ldr	r1, [r7, #4]
 8013326:	4618      	mov	r0, r3
 8013328:	f7ff fb6a 	bl	8012a00 <st_dword>
			fs->wflag = 1;
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	2201      	movs	r2, #1
 8013330:	70da      	strb	r2, [r3, #3]
			break;
 8013332:	e006      	b.n	8013342 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013334:	bf00      	nop
 8013336:	e004      	b.n	8013342 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013338:	bf00      	nop
 801333a:	e002      	b.n	8013342 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801333c:	bf00      	nop
 801333e:	e000      	b.n	8013342 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8013340:	bf00      	nop
		}
	}
	return res;
 8013342:	7ffb      	ldrb	r3, [r7, #31]
}
 8013344:	4618      	mov	r0, r3
 8013346:	3724      	adds	r7, #36	@ 0x24
 8013348:	46bd      	mov	sp, r7
 801334a:	bd90      	pop	{r4, r7, pc}

0801334c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b088      	sub	sp, #32
 8013350:	af00      	add	r7, sp, #0
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	60b9      	str	r1, [r7, #8]
 8013356:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013358:	2300      	movs	r3, #0
 801335a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013362:	68bb      	ldr	r3, [r7, #8]
 8013364:	2b01      	cmp	r3, #1
 8013366:	d904      	bls.n	8013372 <remove_chain+0x26>
 8013368:	69bb      	ldr	r3, [r7, #24]
 801336a:	695b      	ldr	r3, [r3, #20]
 801336c:	68ba      	ldr	r2, [r7, #8]
 801336e:	429a      	cmp	r2, r3
 8013370:	d301      	bcc.n	8013376 <remove_chain+0x2a>
 8013372:	2302      	movs	r3, #2
 8013374:	e04b      	b.n	801340e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d00c      	beq.n	8013396 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801337c:	f04f 32ff 	mov.w	r2, #4294967295
 8013380:	6879      	ldr	r1, [r7, #4]
 8013382:	69b8      	ldr	r0, [r7, #24]
 8013384:	f7ff fef8 	bl	8013178 <put_fat>
 8013388:	4603      	mov	r3, r0
 801338a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801338c:	7ffb      	ldrb	r3, [r7, #31]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d001      	beq.n	8013396 <remove_chain+0x4a>
 8013392:	7ffb      	ldrb	r3, [r7, #31]
 8013394:	e03b      	b.n	801340e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013396:	68b9      	ldr	r1, [r7, #8]
 8013398:	68f8      	ldr	r0, [r7, #12]
 801339a:	f7ff fe46 	bl	801302a <get_fat>
 801339e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d031      	beq.n	801340a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	2b01      	cmp	r3, #1
 80133aa:	d101      	bne.n	80133b0 <remove_chain+0x64>
 80133ac:	2302      	movs	r3, #2
 80133ae:	e02e      	b.n	801340e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133b6:	d101      	bne.n	80133bc <remove_chain+0x70>
 80133b8:	2301      	movs	r3, #1
 80133ba:	e028      	b.n	801340e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80133bc:	2200      	movs	r2, #0
 80133be:	68b9      	ldr	r1, [r7, #8]
 80133c0:	69b8      	ldr	r0, [r7, #24]
 80133c2:	f7ff fed9 	bl	8013178 <put_fat>
 80133c6:	4603      	mov	r3, r0
 80133c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80133ca:	7ffb      	ldrb	r3, [r7, #31]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d001      	beq.n	80133d4 <remove_chain+0x88>
 80133d0:	7ffb      	ldrb	r3, [r7, #31]
 80133d2:	e01c      	b.n	801340e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	691a      	ldr	r2, [r3, #16]
 80133d8:	69bb      	ldr	r3, [r7, #24]
 80133da:	695b      	ldr	r3, [r3, #20]
 80133dc:	3b02      	subs	r3, #2
 80133de:	429a      	cmp	r2, r3
 80133e0:	d20b      	bcs.n	80133fa <remove_chain+0xae>
			fs->free_clst++;
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	691b      	ldr	r3, [r3, #16]
 80133e6:	1c5a      	adds	r2, r3, #1
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	791b      	ldrb	r3, [r3, #4]
 80133f0:	f043 0301 	orr.w	r3, r3, #1
 80133f4:	b2da      	uxtb	r2, r3
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	695b      	ldr	r3, [r3, #20]
 8013402:	68ba      	ldr	r2, [r7, #8]
 8013404:	429a      	cmp	r2, r3
 8013406:	d3c6      	bcc.n	8013396 <remove_chain+0x4a>
 8013408:	e000      	b.n	801340c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801340a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801340c:	2300      	movs	r3, #0
}
 801340e:	4618      	mov	r0, r3
 8013410:	3720      	adds	r7, #32
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}

08013416 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013416:	b580      	push	{r7, lr}
 8013418:	b088      	sub	sp, #32
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
 801341e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d10d      	bne.n	8013448 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d004      	beq.n	8013442 <create_chain+0x2c>
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	695b      	ldr	r3, [r3, #20]
 801343c:	69ba      	ldr	r2, [r7, #24]
 801343e:	429a      	cmp	r2, r3
 8013440:	d31b      	bcc.n	801347a <create_chain+0x64>
 8013442:	2301      	movs	r3, #1
 8013444:	61bb      	str	r3, [r7, #24]
 8013446:	e018      	b.n	801347a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013448:	6839      	ldr	r1, [r7, #0]
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f7ff fded 	bl	801302a <get_fat>
 8013450:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	2b01      	cmp	r3, #1
 8013456:	d801      	bhi.n	801345c <create_chain+0x46>
 8013458:	2301      	movs	r3, #1
 801345a:	e070      	b.n	801353e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013462:	d101      	bne.n	8013468 <create_chain+0x52>
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	e06a      	b.n	801353e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	695b      	ldr	r3, [r3, #20]
 801346c:	68fa      	ldr	r2, [r7, #12]
 801346e:	429a      	cmp	r2, r3
 8013470:	d201      	bcs.n	8013476 <create_chain+0x60>
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	e063      	b.n	801353e <create_chain+0x128>
		scl = clst;
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801347e:	69fb      	ldr	r3, [r7, #28]
 8013480:	3301      	adds	r3, #1
 8013482:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	695b      	ldr	r3, [r3, #20]
 8013488:	69fa      	ldr	r2, [r7, #28]
 801348a:	429a      	cmp	r2, r3
 801348c:	d307      	bcc.n	801349e <create_chain+0x88>
				ncl = 2;
 801348e:	2302      	movs	r3, #2
 8013490:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013492:	69fa      	ldr	r2, [r7, #28]
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	429a      	cmp	r2, r3
 8013498:	d901      	bls.n	801349e <create_chain+0x88>
 801349a:	2300      	movs	r3, #0
 801349c:	e04f      	b.n	801353e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801349e:	69f9      	ldr	r1, [r7, #28]
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	f7ff fdc2 	bl	801302a <get_fat>
 80134a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d00e      	beq.n	80134cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d003      	beq.n	80134bc <create_chain+0xa6>
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134ba:	d101      	bne.n	80134c0 <create_chain+0xaa>
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	e03e      	b.n	801353e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80134c0:	69fa      	ldr	r2, [r7, #28]
 80134c2:	69bb      	ldr	r3, [r7, #24]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d1da      	bne.n	801347e <create_chain+0x68>
 80134c8:	2300      	movs	r3, #0
 80134ca:	e038      	b.n	801353e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80134cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80134ce:	f04f 32ff 	mov.w	r2, #4294967295
 80134d2:	69f9      	ldr	r1, [r7, #28]
 80134d4:	6938      	ldr	r0, [r7, #16]
 80134d6:	f7ff fe4f 	bl	8013178 <put_fat>
 80134da:	4603      	mov	r3, r0
 80134dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80134de:	7dfb      	ldrb	r3, [r7, #23]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d109      	bne.n	80134f8 <create_chain+0xe2>
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d006      	beq.n	80134f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80134ea:	69fa      	ldr	r2, [r7, #28]
 80134ec:	6839      	ldr	r1, [r7, #0]
 80134ee:	6938      	ldr	r0, [r7, #16]
 80134f0:	f7ff fe42 	bl	8013178 <put_fat>
 80134f4:	4603      	mov	r3, r0
 80134f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80134f8:	7dfb      	ldrb	r3, [r7, #23]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d116      	bne.n	801352c <create_chain+0x116>
		fs->last_clst = ncl;
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	69fa      	ldr	r2, [r7, #28]
 8013502:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	691a      	ldr	r2, [r3, #16]
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	695b      	ldr	r3, [r3, #20]
 801350c:	3b02      	subs	r3, #2
 801350e:	429a      	cmp	r2, r3
 8013510:	d804      	bhi.n	801351c <create_chain+0x106>
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	691b      	ldr	r3, [r3, #16]
 8013516:	1e5a      	subs	r2, r3, #1
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	791b      	ldrb	r3, [r3, #4]
 8013520:	f043 0301 	orr.w	r3, r3, #1
 8013524:	b2da      	uxtb	r2, r3
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	711a      	strb	r2, [r3, #4]
 801352a:	e007      	b.n	801353c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801352c:	7dfb      	ldrb	r3, [r7, #23]
 801352e:	2b01      	cmp	r3, #1
 8013530:	d102      	bne.n	8013538 <create_chain+0x122>
 8013532:	f04f 33ff 	mov.w	r3, #4294967295
 8013536:	e000      	b.n	801353a <create_chain+0x124>
 8013538:	2301      	movs	r3, #1
 801353a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801353c:	69fb      	ldr	r3, [r7, #28]
}
 801353e:	4618      	mov	r0, r3
 8013540:	3720      	adds	r7, #32
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013546:	b480      	push	{r7}
 8013548:	b087      	sub	sp, #28
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
 801354e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801355a:	3304      	adds	r3, #4
 801355c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	0a5b      	lsrs	r3, r3, #9
 8013562:	68fa      	ldr	r2, [r7, #12]
 8013564:	8952      	ldrh	r2, [r2, #10]
 8013566:	fbb3 f3f2 	udiv	r3, r3, r2
 801356a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	1d1a      	adds	r2, r3, #4
 8013570:	613a      	str	r2, [r7, #16]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013576:	68bb      	ldr	r3, [r7, #8]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d101      	bne.n	8013580 <clmt_clust+0x3a>
 801357c:	2300      	movs	r3, #0
 801357e:	e010      	b.n	80135a2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013580:	697a      	ldr	r2, [r7, #20]
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	429a      	cmp	r2, r3
 8013586:	d307      	bcc.n	8013598 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013588:	697a      	ldr	r2, [r7, #20]
 801358a:	68bb      	ldr	r3, [r7, #8]
 801358c:	1ad3      	subs	r3, r2, r3
 801358e:	617b      	str	r3, [r7, #20]
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	3304      	adds	r3, #4
 8013594:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013596:	e7e9      	b.n	801356c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013598:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	681a      	ldr	r2, [r3, #0]
 801359e:	697b      	ldr	r3, [r7, #20]
 80135a0:	4413      	add	r3, r2
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	371c      	adds	r7, #28
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr

080135ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80135ae:	b580      	push	{r7, lr}
 80135b0:	b086      	sub	sp, #24
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
 80135b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80135c4:	d204      	bcs.n	80135d0 <dir_sdi+0x22>
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	f003 031f 	and.w	r3, r3, #31
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d001      	beq.n	80135d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80135d0:	2302      	movs	r3, #2
 80135d2:	e063      	b.n	801369c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	683a      	ldr	r2, [r7, #0]
 80135d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	689b      	ldr	r3, [r3, #8]
 80135de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d106      	bne.n	80135f4 <dir_sdi+0x46>
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	781b      	ldrb	r3, [r3, #0]
 80135ea:	2b02      	cmp	r3, #2
 80135ec:	d902      	bls.n	80135f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80135f4:	697b      	ldr	r3, [r7, #20]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d10c      	bne.n	8013614 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	095b      	lsrs	r3, r3, #5
 80135fe:	693a      	ldr	r2, [r7, #16]
 8013600:	8912      	ldrh	r2, [r2, #8]
 8013602:	4293      	cmp	r3, r2
 8013604:	d301      	bcc.n	801360a <dir_sdi+0x5c>
 8013606:	2302      	movs	r3, #2
 8013608:	e048      	b.n	801369c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801360a:	693b      	ldr	r3, [r7, #16]
 801360c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	61da      	str	r2, [r3, #28]
 8013612:	e029      	b.n	8013668 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	895b      	ldrh	r3, [r3, #10]
 8013618:	025b      	lsls	r3, r3, #9
 801361a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801361c:	e019      	b.n	8013652 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6979      	ldr	r1, [r7, #20]
 8013622:	4618      	mov	r0, r3
 8013624:	f7ff fd01 	bl	801302a <get_fat>
 8013628:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013630:	d101      	bne.n	8013636 <dir_sdi+0x88>
 8013632:	2301      	movs	r3, #1
 8013634:	e032      	b.n	801369c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	2b01      	cmp	r3, #1
 801363a:	d904      	bls.n	8013646 <dir_sdi+0x98>
 801363c:	693b      	ldr	r3, [r7, #16]
 801363e:	695b      	ldr	r3, [r3, #20]
 8013640:	697a      	ldr	r2, [r7, #20]
 8013642:	429a      	cmp	r2, r3
 8013644:	d301      	bcc.n	801364a <dir_sdi+0x9c>
 8013646:	2302      	movs	r3, #2
 8013648:	e028      	b.n	801369c <dir_sdi+0xee>
			ofs -= csz;
 801364a:	683a      	ldr	r2, [r7, #0]
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	1ad3      	subs	r3, r2, r3
 8013650:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013652:	683a      	ldr	r2, [r7, #0]
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	429a      	cmp	r2, r3
 8013658:	d2e1      	bcs.n	801361e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801365a:	6979      	ldr	r1, [r7, #20]
 801365c:	6938      	ldr	r0, [r7, #16]
 801365e:	f7ff fcc5 	bl	8012fec <clust2sect>
 8013662:	4602      	mov	r2, r0
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	697a      	ldr	r2, [r7, #20]
 801366c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	69db      	ldr	r3, [r3, #28]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d101      	bne.n	801367a <dir_sdi+0xcc>
 8013676:	2302      	movs	r3, #2
 8013678:	e010      	b.n	801369c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	69da      	ldr	r2, [r3, #28]
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	0a5b      	lsrs	r3, r3, #9
 8013682:	441a      	add	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013694:	441a      	add	r2, r3
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801369a:	2300      	movs	r3, #0
}
 801369c:	4618      	mov	r0, r3
 801369e:	3718      	adds	r7, #24
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}

080136a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b086      	sub	sp, #24
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
 80136ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	695b      	ldr	r3, [r3, #20]
 80136b8:	3320      	adds	r3, #32
 80136ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	69db      	ldr	r3, [r3, #28]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d003      	beq.n	80136cc <dir_next+0x28>
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80136ca:	d301      	bcc.n	80136d0 <dir_next+0x2c>
 80136cc:	2304      	movs	r3, #4
 80136ce:	e0aa      	b.n	8013826 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80136d0:	68bb      	ldr	r3, [r7, #8]
 80136d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	f040 8098 	bne.w	801380c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	69db      	ldr	r3, [r3, #28]
 80136e0:	1c5a      	adds	r2, r3, #1
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	699b      	ldr	r3, [r3, #24]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d10b      	bne.n	8013706 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	095b      	lsrs	r3, r3, #5
 80136f2:	68fa      	ldr	r2, [r7, #12]
 80136f4:	8912      	ldrh	r2, [r2, #8]
 80136f6:	4293      	cmp	r3, r2
 80136f8:	f0c0 8088 	bcc.w	801380c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2200      	movs	r2, #0
 8013700:	61da      	str	r2, [r3, #28]
 8013702:	2304      	movs	r3, #4
 8013704:	e08f      	b.n	8013826 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	0a5b      	lsrs	r3, r3, #9
 801370a:	68fa      	ldr	r2, [r7, #12]
 801370c:	8952      	ldrh	r2, [r2, #10]
 801370e:	3a01      	subs	r2, #1
 8013710:	4013      	ands	r3, r2
 8013712:	2b00      	cmp	r3, #0
 8013714:	d17a      	bne.n	801380c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013716:	687a      	ldr	r2, [r7, #4]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	699b      	ldr	r3, [r3, #24]
 801371c:	4619      	mov	r1, r3
 801371e:	4610      	mov	r0, r2
 8013720:	f7ff fc83 	bl	801302a <get_fat>
 8013724:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013726:	697b      	ldr	r3, [r7, #20]
 8013728:	2b01      	cmp	r3, #1
 801372a:	d801      	bhi.n	8013730 <dir_next+0x8c>
 801372c:	2302      	movs	r3, #2
 801372e:	e07a      	b.n	8013826 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013736:	d101      	bne.n	801373c <dir_next+0x98>
 8013738:	2301      	movs	r3, #1
 801373a:	e074      	b.n	8013826 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	695b      	ldr	r3, [r3, #20]
 8013740:	697a      	ldr	r2, [r7, #20]
 8013742:	429a      	cmp	r2, r3
 8013744:	d358      	bcc.n	80137f8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d104      	bne.n	8013756 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2200      	movs	r2, #0
 8013750:	61da      	str	r2, [r3, #28]
 8013752:	2304      	movs	r3, #4
 8013754:	e067      	b.n	8013826 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	699b      	ldr	r3, [r3, #24]
 801375c:	4619      	mov	r1, r3
 801375e:	4610      	mov	r0, r2
 8013760:	f7ff fe59 	bl	8013416 <create_chain>
 8013764:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d101      	bne.n	8013770 <dir_next+0xcc>
 801376c:	2307      	movs	r3, #7
 801376e:	e05a      	b.n	8013826 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	2b01      	cmp	r3, #1
 8013774:	d101      	bne.n	801377a <dir_next+0xd6>
 8013776:	2302      	movs	r3, #2
 8013778:	e055      	b.n	8013826 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013780:	d101      	bne.n	8013786 <dir_next+0xe2>
 8013782:	2301      	movs	r3, #1
 8013784:	e04f      	b.n	8013826 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013786:	68f8      	ldr	r0, [r7, #12]
 8013788:	f7ff fb50 	bl	8012e2c <sync_window>
 801378c:	4603      	mov	r3, r0
 801378e:	2b00      	cmp	r3, #0
 8013790:	d001      	beq.n	8013796 <dir_next+0xf2>
 8013792:	2301      	movs	r3, #1
 8013794:	e047      	b.n	8013826 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	3330      	adds	r3, #48	@ 0x30
 801379a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801379e:	2100      	movs	r1, #0
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7ff f97a 	bl	8012a9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80137a6:	2300      	movs	r3, #0
 80137a8:	613b      	str	r3, [r7, #16]
 80137aa:	6979      	ldr	r1, [r7, #20]
 80137ac:	68f8      	ldr	r0, [r7, #12]
 80137ae:	f7ff fc1d 	bl	8012fec <clust2sect>
 80137b2:	4602      	mov	r2, r0
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80137b8:	e012      	b.n	80137e0 <dir_next+0x13c>
						fs->wflag = 1;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2201      	movs	r2, #1
 80137be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80137c0:	68f8      	ldr	r0, [r7, #12]
 80137c2:	f7ff fb33 	bl	8012e2c <sync_window>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d001      	beq.n	80137d0 <dir_next+0x12c>
 80137cc:	2301      	movs	r3, #1
 80137ce:	e02a      	b.n	8013826 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80137d0:	693b      	ldr	r3, [r7, #16]
 80137d2:	3301      	adds	r3, #1
 80137d4:	613b      	str	r3, [r7, #16]
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137da:	1c5a      	adds	r2, r3, #1
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	895b      	ldrh	r3, [r3, #10]
 80137e4:	461a      	mov	r2, r3
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	4293      	cmp	r3, r2
 80137ea:	d3e6      	bcc.n	80137ba <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137f0:	693b      	ldr	r3, [r7, #16]
 80137f2:	1ad2      	subs	r2, r2, r3
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	697a      	ldr	r2, [r7, #20]
 80137fc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80137fe:	6979      	ldr	r1, [r7, #20]
 8013800:	68f8      	ldr	r0, [r7, #12]
 8013802:	f7ff fbf3 	bl	8012fec <clust2sect>
 8013806:	4602      	mov	r2, r0
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	68ba      	ldr	r2, [r7, #8]
 8013810:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801381e:	441a      	add	r2, r3
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013824:	2300      	movs	r3, #0
}
 8013826:	4618      	mov	r0, r3
 8013828:	3718      	adds	r7, #24
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}

0801382e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801382e:	b580      	push	{r7, lr}
 8013830:	b086      	sub	sp, #24
 8013832:	af00      	add	r7, sp, #0
 8013834:	6078      	str	r0, [r7, #4]
 8013836:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801383e:	2100      	movs	r1, #0
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f7ff feb4 	bl	80135ae <dir_sdi>
 8013846:	4603      	mov	r3, r0
 8013848:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801384a:	7dfb      	ldrb	r3, [r7, #23]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d12b      	bne.n	80138a8 <dir_alloc+0x7a>
		n = 0;
 8013850:	2300      	movs	r3, #0
 8013852:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	69db      	ldr	r3, [r3, #28]
 8013858:	4619      	mov	r1, r3
 801385a:	68f8      	ldr	r0, [r7, #12]
 801385c:	f7ff fb2a 	bl	8012eb4 <move_window>
 8013860:	4603      	mov	r3, r0
 8013862:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013864:	7dfb      	ldrb	r3, [r7, #23]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d11d      	bne.n	80138a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6a1b      	ldr	r3, [r3, #32]
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	2be5      	cmp	r3, #229	@ 0xe5
 8013872:	d004      	beq.n	801387e <dir_alloc+0x50>
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	6a1b      	ldr	r3, [r3, #32]
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d107      	bne.n	801388e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	3301      	adds	r3, #1
 8013882:	613b      	str	r3, [r7, #16]
 8013884:	693a      	ldr	r2, [r7, #16]
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	429a      	cmp	r2, r3
 801388a:	d102      	bne.n	8013892 <dir_alloc+0x64>
 801388c:	e00c      	b.n	80138a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801388e:	2300      	movs	r3, #0
 8013890:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013892:	2101      	movs	r1, #1
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7ff ff05 	bl	80136a4 <dir_next>
 801389a:	4603      	mov	r3, r0
 801389c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801389e:	7dfb      	ldrb	r3, [r7, #23]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d0d7      	beq.n	8013854 <dir_alloc+0x26>
 80138a4:	e000      	b.n	80138a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80138a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80138a8:	7dfb      	ldrb	r3, [r7, #23]
 80138aa:	2b04      	cmp	r3, #4
 80138ac:	d101      	bne.n	80138b2 <dir_alloc+0x84>
 80138ae:	2307      	movs	r3, #7
 80138b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80138b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3718      	adds	r7, #24
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}

080138bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80138bc:	b580      	push	{r7, lr}
 80138be:	b084      	sub	sp, #16
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	331a      	adds	r3, #26
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7ff f842 	bl	8012954 <ld_word>
 80138d0:	4603      	mov	r3, r0
 80138d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	781b      	ldrb	r3, [r3, #0]
 80138d8:	2b03      	cmp	r3, #3
 80138da:	d109      	bne.n	80138f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	3314      	adds	r3, #20
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7ff f837 	bl	8012954 <ld_word>
 80138e6:	4603      	mov	r3, r0
 80138e8:	041b      	lsls	r3, r3, #16
 80138ea:	68fa      	ldr	r2, [r7, #12]
 80138ec:	4313      	orrs	r3, r2
 80138ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80138f0:	68fb      	ldr	r3, [r7, #12]
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	3710      	adds	r7, #16
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}

080138fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80138fa:	b580      	push	{r7, lr}
 80138fc:	b084      	sub	sp, #16
 80138fe:	af00      	add	r7, sp, #0
 8013900:	60f8      	str	r0, [r7, #12]
 8013902:	60b9      	str	r1, [r7, #8]
 8013904:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	331a      	adds	r3, #26
 801390a:	687a      	ldr	r2, [r7, #4]
 801390c:	b292      	uxth	r2, r2
 801390e:	4611      	mov	r1, r2
 8013910:	4618      	mov	r0, r3
 8013912:	f7ff f85a 	bl	80129ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	2b03      	cmp	r3, #3
 801391c:	d109      	bne.n	8013932 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	f103 0214 	add.w	r2, r3, #20
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	0c1b      	lsrs	r3, r3, #16
 8013928:	b29b      	uxth	r3, r3
 801392a:	4619      	mov	r1, r3
 801392c:	4610      	mov	r0, r2
 801392e:	f7ff f84c 	bl	80129ca <st_word>
	}
}
 8013932:	bf00      	nop
 8013934:	3710      	adds	r7, #16
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}

0801393a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801393a:	b580      	push	{r7, lr}
 801393c:	b086      	sub	sp, #24
 801393e:	af00      	add	r7, sp, #0
 8013940:	6078      	str	r0, [r7, #4]
 8013942:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013944:	2304      	movs	r3, #4
 8013946:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 801394e:	e03c      	b.n	80139ca <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	69db      	ldr	r3, [r3, #28]
 8013954:	4619      	mov	r1, r3
 8013956:	6938      	ldr	r0, [r7, #16]
 8013958:	f7ff faac 	bl	8012eb4 <move_window>
 801395c:	4603      	mov	r3, r0
 801395e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013960:	7dfb      	ldrb	r3, [r7, #23]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d136      	bne.n	80139d4 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6a1b      	ldr	r3, [r3, #32]
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 801396e:	7bfb      	ldrb	r3, [r7, #15]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d102      	bne.n	801397a <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013974:	2304      	movs	r3, #4
 8013976:	75fb      	strb	r3, [r7, #23]
 8013978:	e031      	b.n	80139de <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6a1b      	ldr	r3, [r3, #32]
 801397e:	330b      	adds	r3, #11
 8013980:	781b      	ldrb	r3, [r3, #0]
 8013982:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013986:	73bb      	strb	r3, [r7, #14]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	7bba      	ldrb	r2, [r7, #14]
 801398c:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801398e:	7bfb      	ldrb	r3, [r7, #15]
 8013990:	2be5      	cmp	r3, #229	@ 0xe5
 8013992:	d011      	beq.n	80139b8 <dir_read+0x7e>
 8013994:	7bfb      	ldrb	r3, [r7, #15]
 8013996:	2b2e      	cmp	r3, #46	@ 0x2e
 8013998:	d00e      	beq.n	80139b8 <dir_read+0x7e>
 801399a:	7bbb      	ldrb	r3, [r7, #14]
 801399c:	2b0f      	cmp	r3, #15
 801399e:	d00b      	beq.n	80139b8 <dir_read+0x7e>
 80139a0:	7bbb      	ldrb	r3, [r7, #14]
 80139a2:	f023 0320 	bic.w	r3, r3, #32
 80139a6:	2b08      	cmp	r3, #8
 80139a8:	bf0c      	ite	eq
 80139aa:	2301      	moveq	r3, #1
 80139ac:	2300      	movne	r3, #0
 80139ae:	b2db      	uxtb	r3, r3
 80139b0:	461a      	mov	r2, r3
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	4293      	cmp	r3, r2
 80139b6:	d00f      	beq.n	80139d8 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80139b8:	2100      	movs	r1, #0
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f7ff fe72 	bl	80136a4 <dir_next>
 80139c0:	4603      	mov	r3, r0
 80139c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80139c4:	7dfb      	ldrb	r3, [r7, #23]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d108      	bne.n	80139dc <dir_read+0xa2>
	while (dp->sect) {
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	69db      	ldr	r3, [r3, #28]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d1be      	bne.n	8013950 <dir_read+0x16>
 80139d2:	e004      	b.n	80139de <dir_read+0xa4>
		if (res != FR_OK) break;
 80139d4:	bf00      	nop
 80139d6:	e002      	b.n	80139de <dir_read+0xa4>
				break;
 80139d8:	bf00      	nop
 80139da:	e000      	b.n	80139de <dir_read+0xa4>
		if (res != FR_OK) break;
 80139dc:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80139de:	7dfb      	ldrb	r3, [r7, #23]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d002      	beq.n	80139ea <dir_read+0xb0>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	61da      	str	r2, [r3, #28]
	return res;
 80139ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80139ec:	4618      	mov	r0, r3
 80139ee:	3718      	adds	r7, #24
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}

080139f4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b086      	sub	sp, #24
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013a02:	2100      	movs	r1, #0
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f7ff fdd2 	bl	80135ae <dir_sdi>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013a0e:	7dfb      	ldrb	r3, [r7, #23]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d001      	beq.n	8013a18 <dir_find+0x24>
 8013a14:	7dfb      	ldrb	r3, [r7, #23]
 8013a16:	e03e      	b.n	8013a96 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	69db      	ldr	r3, [r3, #28]
 8013a1c:	4619      	mov	r1, r3
 8013a1e:	6938      	ldr	r0, [r7, #16]
 8013a20:	f7ff fa48 	bl	8012eb4 <move_window>
 8013a24:	4603      	mov	r3, r0
 8013a26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013a28:	7dfb      	ldrb	r3, [r7, #23]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d12f      	bne.n	8013a8e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6a1b      	ldr	r3, [r3, #32]
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013a36:	7bfb      	ldrb	r3, [r7, #15]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d102      	bne.n	8013a42 <dir_find+0x4e>
 8013a3c:	2304      	movs	r3, #4
 8013a3e:	75fb      	strb	r3, [r7, #23]
 8013a40:	e028      	b.n	8013a94 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	6a1b      	ldr	r3, [r3, #32]
 8013a46:	330b      	adds	r3, #11
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a4e:	b2da      	uxtb	r2, r3
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6a1b      	ldr	r3, [r3, #32]
 8013a58:	330b      	adds	r3, #11
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	f003 0308 	and.w	r3, r3, #8
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d10a      	bne.n	8013a7a <dir_find+0x86>
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6a18      	ldr	r0, [r3, #32]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	3324      	adds	r3, #36	@ 0x24
 8013a6c:	220b      	movs	r2, #11
 8013a6e:	4619      	mov	r1, r3
 8013a70:	f7ff f82e 	bl	8012ad0 <mem_cmp>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d00b      	beq.n	8013a92 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013a7a:	2100      	movs	r1, #0
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f7ff fe11 	bl	80136a4 <dir_next>
 8013a82:	4603      	mov	r3, r0
 8013a84:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013a86:	7dfb      	ldrb	r3, [r7, #23]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d0c5      	beq.n	8013a18 <dir_find+0x24>
 8013a8c:	e002      	b.n	8013a94 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013a8e:	bf00      	nop
 8013a90:	e000      	b.n	8013a94 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013a92:	bf00      	nop

	return res;
 8013a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3718      	adds	r7, #24
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b084      	sub	sp, #16
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013aac:	2101      	movs	r1, #1
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f7ff febd 	bl	801382e <dir_alloc>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013ab8:	7bfb      	ldrb	r3, [r7, #15]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d11c      	bne.n	8013af8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	69db      	ldr	r3, [r3, #28]
 8013ac2:	4619      	mov	r1, r3
 8013ac4:	68b8      	ldr	r0, [r7, #8]
 8013ac6:	f7ff f9f5 	bl	8012eb4 <move_window>
 8013aca:	4603      	mov	r3, r0
 8013acc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013ace:	7bfb      	ldrb	r3, [r7, #15]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d111      	bne.n	8013af8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6a1b      	ldr	r3, [r3, #32]
 8013ad8:	2220      	movs	r2, #32
 8013ada:	2100      	movs	r1, #0
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7fe ffdc 	bl	8012a9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	6a18      	ldr	r0, [r3, #32]
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	3324      	adds	r3, #36	@ 0x24
 8013aea:	220b      	movs	r2, #11
 8013aec:	4619      	mov	r1, r3
 8013aee:	f7fe ffb3 	bl	8012a58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	2201      	movs	r2, #1
 8013af6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3710      	adds	r7, #16
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}

08013b02 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013b02:	b580      	push	{r7, lr}
 8013b04:	b086      	sub	sp, #24
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	6078      	str	r0, [r7, #4]
 8013b0a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	2200      	movs	r2, #0
 8013b10:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	69db      	ldr	r3, [r3, #28]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d04f      	beq.n	8013bba <get_fileinfo+0xb8>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	613b      	str	r3, [r7, #16]
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8013b22:	e022      	b.n	8013b6a <get_fileinfo+0x68>
		c = (TCHAR)dp->dir[i++];
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6a1a      	ldr	r2, [r3, #32]
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	1c59      	adds	r1, r3, #1
 8013b2c:	6179      	str	r1, [r7, #20]
 8013b2e:	4413      	add	r3, r2
 8013b30:	781b      	ldrb	r3, [r3, #0]
 8013b32:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8013b34:	7bfb      	ldrb	r3, [r7, #15]
 8013b36:	2b20      	cmp	r3, #32
 8013b38:	d016      	beq.n	8013b68 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013b3a:	7bfb      	ldrb	r3, [r7, #15]
 8013b3c:	2b05      	cmp	r3, #5
 8013b3e:	d101      	bne.n	8013b44 <get_fileinfo+0x42>
 8013b40:	23e5      	movs	r3, #229	@ 0xe5
 8013b42:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	2b09      	cmp	r3, #9
 8013b48:	d106      	bne.n	8013b58 <get_fileinfo+0x56>
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	1c5a      	adds	r2, r3, #1
 8013b4e:	613a      	str	r2, [r7, #16]
 8013b50:	683a      	ldr	r2, [r7, #0]
 8013b52:	4413      	add	r3, r2
 8013b54:	222e      	movs	r2, #46	@ 0x2e
 8013b56:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	1c5a      	adds	r2, r3, #1
 8013b5c:	613a      	str	r2, [r7, #16]
 8013b5e:	683a      	ldr	r2, [r7, #0]
 8013b60:	4413      	add	r3, r2
 8013b62:	7bfa      	ldrb	r2, [r7, #15]
 8013b64:	725a      	strb	r2, [r3, #9]
 8013b66:	e000      	b.n	8013b6a <get_fileinfo+0x68>
		if (c == ' ') continue;				/* Skip padding spaces */
 8013b68:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	2b0a      	cmp	r3, #10
 8013b6e:	d9d9      	bls.n	8013b24 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8013b70:	683a      	ldr	r2, [r7, #0]
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	4413      	add	r3, r2
 8013b76:	3309      	adds	r3, #9
 8013b78:	2200      	movs	r2, #0
 8013b7a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6a1b      	ldr	r3, [r3, #32]
 8013b80:	7ada      	ldrb	r2, [r3, #11]
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6a1b      	ldr	r3, [r3, #32]
 8013b8a:	331c      	adds	r3, #28
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7fe fef9 	bl	8012984 <ld_dword>
 8013b92:	4602      	mov	r2, r0
 8013b94:	683b      	ldr	r3, [r7, #0]
 8013b96:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	6a1b      	ldr	r3, [r3, #32]
 8013b9c:	3316      	adds	r3, #22
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f7fe fef0 	bl	8012984 <ld_dword>
 8013ba4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	b29a      	uxth	r2, r3
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	80da      	strh	r2, [r3, #6]
 8013bae:	68bb      	ldr	r3, [r7, #8]
 8013bb0:	0c1b      	lsrs	r3, r3, #16
 8013bb2:	b29a      	uxth	r2, r3
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	809a      	strh	r2, [r3, #4]
 8013bb8:	e000      	b.n	8013bbc <get_fileinfo+0xba>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013bba:	bf00      	nop
}
 8013bbc:	3718      	adds	r7, #24
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
	...

08013bc4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b088      	sub	sp, #32
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	60fb      	str	r3, [r7, #12]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	3324      	adds	r3, #36	@ 0x24
 8013bd8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8013bda:	220b      	movs	r2, #11
 8013bdc:	2120      	movs	r1, #32
 8013bde:	68b8      	ldr	r0, [r7, #8]
 8013be0:	f7fe ff5b 	bl	8012a9a <mem_set>
	si = i = 0; ni = 8;
 8013be4:	2300      	movs	r3, #0
 8013be6:	613b      	str	r3, [r7, #16]
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	61fb      	str	r3, [r7, #28]
 8013bec:	2308      	movs	r3, #8
 8013bee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013bf0:	69fb      	ldr	r3, [r7, #28]
 8013bf2:	1c5a      	adds	r2, r3, #1
 8013bf4:	61fa      	str	r2, [r7, #28]
 8013bf6:	68fa      	ldr	r2, [r7, #12]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	781b      	ldrb	r3, [r3, #0]
 8013bfc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013bfe:	7efb      	ldrb	r3, [r7, #27]
 8013c00:	2b20      	cmp	r3, #32
 8013c02:	d94e      	bls.n	8013ca2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013c04:	7efb      	ldrb	r3, [r7, #27]
 8013c06:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c08:	d006      	beq.n	8013c18 <create_name+0x54>
 8013c0a:	7efb      	ldrb	r3, [r7, #27]
 8013c0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8013c0e:	d110      	bne.n	8013c32 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013c10:	e002      	b.n	8013c18 <create_name+0x54>
 8013c12:	69fb      	ldr	r3, [r7, #28]
 8013c14:	3301      	adds	r3, #1
 8013c16:	61fb      	str	r3, [r7, #28]
 8013c18:	68fa      	ldr	r2, [r7, #12]
 8013c1a:	69fb      	ldr	r3, [r7, #28]
 8013c1c:	4413      	add	r3, r2
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c22:	d0f6      	beq.n	8013c12 <create_name+0x4e>
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	69fb      	ldr	r3, [r7, #28]
 8013c28:	4413      	add	r3, r2
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	2b5c      	cmp	r3, #92	@ 0x5c
 8013c2e:	d0f0      	beq.n	8013c12 <create_name+0x4e>
			break;
 8013c30:	e038      	b.n	8013ca4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8013c32:	7efb      	ldrb	r3, [r7, #27]
 8013c34:	2b2e      	cmp	r3, #46	@ 0x2e
 8013c36:	d003      	beq.n	8013c40 <create_name+0x7c>
 8013c38:	693a      	ldr	r2, [r7, #16]
 8013c3a:	697b      	ldr	r3, [r7, #20]
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d30c      	bcc.n	8013c5a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	2b0b      	cmp	r3, #11
 8013c44:	d002      	beq.n	8013c4c <create_name+0x88>
 8013c46:	7efb      	ldrb	r3, [r7, #27]
 8013c48:	2b2e      	cmp	r3, #46	@ 0x2e
 8013c4a:	d001      	beq.n	8013c50 <create_name+0x8c>
 8013c4c:	2306      	movs	r3, #6
 8013c4e:	e044      	b.n	8013cda <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8013c50:	2308      	movs	r3, #8
 8013c52:	613b      	str	r3, [r7, #16]
 8013c54:	230b      	movs	r3, #11
 8013c56:	617b      	str	r3, [r7, #20]
			continue;
 8013c58:	e022      	b.n	8013ca0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8013c5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	da04      	bge.n	8013c6c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8013c62:	7efb      	ldrb	r3, [r7, #27]
 8013c64:	3b80      	subs	r3, #128	@ 0x80
 8013c66:	4a1f      	ldr	r2, [pc, #124]	@ (8013ce4 <create_name+0x120>)
 8013c68:	5cd3      	ldrb	r3, [r2, r3]
 8013c6a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8013c6c:	7efb      	ldrb	r3, [r7, #27]
 8013c6e:	4619      	mov	r1, r3
 8013c70:	481d      	ldr	r0, [pc, #116]	@ (8013ce8 <create_name+0x124>)
 8013c72:	f7fe ff54 	bl	8012b1e <chk_chr>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d001      	beq.n	8013c80 <create_name+0xbc>
 8013c7c:	2306      	movs	r3, #6
 8013c7e:	e02c      	b.n	8013cda <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8013c80:	7efb      	ldrb	r3, [r7, #27]
 8013c82:	2b60      	cmp	r3, #96	@ 0x60
 8013c84:	d905      	bls.n	8013c92 <create_name+0xce>
 8013c86:	7efb      	ldrb	r3, [r7, #27]
 8013c88:	2b7a      	cmp	r3, #122	@ 0x7a
 8013c8a:	d802      	bhi.n	8013c92 <create_name+0xce>
 8013c8c:	7efb      	ldrb	r3, [r7, #27]
 8013c8e:	3b20      	subs	r3, #32
 8013c90:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	1c5a      	adds	r2, r3, #1
 8013c96:	613a      	str	r2, [r7, #16]
 8013c98:	68ba      	ldr	r2, [r7, #8]
 8013c9a:	4413      	add	r3, r2
 8013c9c:	7efa      	ldrb	r2, [r7, #27]
 8013c9e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013ca0:	e7a6      	b.n	8013bf0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013ca2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013ca4:	68fa      	ldr	r2, [r7, #12]
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	441a      	add	r2, r3
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d101      	bne.n	8013cb8 <create_name+0xf4>
 8013cb4:	2306      	movs	r3, #6
 8013cb6:	e010      	b.n	8013cda <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	781b      	ldrb	r3, [r3, #0]
 8013cbc:	2be5      	cmp	r3, #229	@ 0xe5
 8013cbe:	d102      	bne.n	8013cc6 <create_name+0x102>
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	2205      	movs	r2, #5
 8013cc4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013cc6:	7efb      	ldrb	r3, [r7, #27]
 8013cc8:	2b20      	cmp	r3, #32
 8013cca:	d801      	bhi.n	8013cd0 <create_name+0x10c>
 8013ccc:	2204      	movs	r2, #4
 8013cce:	e000      	b.n	8013cd2 <create_name+0x10e>
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	330b      	adds	r3, #11
 8013cd6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013cd8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3720      	adds	r7, #32
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	080213a4 	.word	0x080213a4
 8013ce8:	0801d078 	.word	0x0801d078

08013cec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b086      	sub	sp, #24
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013d00:	e002      	b.n	8013d08 <follow_path+0x1c>
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	3301      	adds	r3, #1
 8013d06:	603b      	str	r3, [r7, #0]
 8013d08:	683b      	ldr	r3, [r7, #0]
 8013d0a:	781b      	ldrb	r3, [r3, #0]
 8013d0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8013d0e:	d0f8      	beq.n	8013d02 <follow_path+0x16>
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	781b      	ldrb	r3, [r3, #0]
 8013d14:	2b5c      	cmp	r3, #92	@ 0x5c
 8013d16:	d0f4      	beq.n	8013d02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013d1e:	683b      	ldr	r3, [r7, #0]
 8013d20:	781b      	ldrb	r3, [r3, #0]
 8013d22:	2b1f      	cmp	r3, #31
 8013d24:	d80a      	bhi.n	8013d3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2280      	movs	r2, #128	@ 0x80
 8013d2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8013d2e:	2100      	movs	r1, #0
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f7ff fc3c 	bl	80135ae <dir_sdi>
 8013d36:	4603      	mov	r3, r0
 8013d38:	75fb      	strb	r3, [r7, #23]
 8013d3a:	e043      	b.n	8013dc4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013d3c:	463b      	mov	r3, r7
 8013d3e:	4619      	mov	r1, r3
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f7ff ff3f 	bl	8013bc4 <create_name>
 8013d46:	4603      	mov	r3, r0
 8013d48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013d4a:	7dfb      	ldrb	r3, [r7, #23]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d134      	bne.n	8013dba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f7ff fe4f 	bl	80139f4 <dir_find>
 8013d56:	4603      	mov	r3, r0
 8013d58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013d60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013d62:	7dfb      	ldrb	r3, [r7, #23]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d00a      	beq.n	8013d7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013d68:	7dfb      	ldrb	r3, [r7, #23]
 8013d6a:	2b04      	cmp	r3, #4
 8013d6c:	d127      	bne.n	8013dbe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013d6e:	7afb      	ldrb	r3, [r7, #11]
 8013d70:	f003 0304 	and.w	r3, r3, #4
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d122      	bne.n	8013dbe <follow_path+0xd2>
 8013d78:	2305      	movs	r3, #5
 8013d7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013d7c:	e01f      	b.n	8013dbe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013d7e:	7afb      	ldrb	r3, [r7, #11]
 8013d80:	f003 0304 	and.w	r3, r3, #4
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d11c      	bne.n	8013dc2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	799b      	ldrb	r3, [r3, #6]
 8013d8c:	f003 0310 	and.w	r3, r3, #16
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d102      	bne.n	8013d9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013d94:	2305      	movs	r3, #5
 8013d96:	75fb      	strb	r3, [r7, #23]
 8013d98:	e014      	b.n	8013dc4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	695b      	ldr	r3, [r3, #20]
 8013da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013da8:	4413      	add	r3, r2
 8013daa:	4619      	mov	r1, r3
 8013dac:	68f8      	ldr	r0, [r7, #12]
 8013dae:	f7ff fd85 	bl	80138bc <ld_clust>
 8013db2:	4602      	mov	r2, r0
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013db8:	e7c0      	b.n	8013d3c <follow_path+0x50>
			if (res != FR_OK) break;
 8013dba:	bf00      	nop
 8013dbc:	e002      	b.n	8013dc4 <follow_path+0xd8>
				break;
 8013dbe:	bf00      	nop
 8013dc0:	e000      	b.n	8013dc4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013dc2:	bf00      	nop
			}
		}
	}

	return res;
 8013dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	3718      	adds	r7, #24
 8013dca:	46bd      	mov	sp, r7
 8013dcc:	bd80      	pop	{r7, pc}

08013dce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013dce:	b480      	push	{r7}
 8013dd0:	b087      	sub	sp, #28
 8013dd2:	af00      	add	r7, sp, #0
 8013dd4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8013dda:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d031      	beq.n	8013e48 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	617b      	str	r3, [r7, #20]
 8013dea:	e002      	b.n	8013df2 <get_ldnumber+0x24>
 8013dec:	697b      	ldr	r3, [r7, #20]
 8013dee:	3301      	adds	r3, #1
 8013df0:	617b      	str	r3, [r7, #20]
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	2b20      	cmp	r3, #32
 8013df8:	d903      	bls.n	8013e02 <get_ldnumber+0x34>
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	2b3a      	cmp	r3, #58	@ 0x3a
 8013e00:	d1f4      	bne.n	8013dec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	781b      	ldrb	r3, [r3, #0]
 8013e06:	2b3a      	cmp	r3, #58	@ 0x3a
 8013e08:	d11c      	bne.n	8013e44 <get_ldnumber+0x76>
			tp = *path;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	1c5a      	adds	r2, r3, #1
 8013e14:	60fa      	str	r2, [r7, #12]
 8013e16:	781b      	ldrb	r3, [r3, #0]
 8013e18:	3b30      	subs	r3, #48	@ 0x30
 8013e1a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	2b09      	cmp	r3, #9
 8013e20:	d80e      	bhi.n	8013e40 <get_ldnumber+0x72>
 8013e22:	68fa      	ldr	r2, [r7, #12]
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d10a      	bne.n	8013e40 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d807      	bhi.n	8013e40 <get_ldnumber+0x72>
					vol = (int)i;
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	3301      	adds	r3, #1
 8013e38:	617b      	str	r3, [r7, #20]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	697a      	ldr	r2, [r7, #20]
 8013e3e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	e002      	b.n	8013e4a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013e44:	2300      	movs	r3, #0
 8013e46:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013e48:	693b      	ldr	r3, [r7, #16]
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	371c      	adds	r7, #28
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e54:	4770      	bx	lr
	...

08013e58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
 8013e60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	2200      	movs	r2, #0
 8013e66:	70da      	strb	r2, [r3, #3]
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013e70:	6839      	ldr	r1, [r7, #0]
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7ff f81e 	bl	8012eb4 <move_window>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d001      	beq.n	8013e82 <check_fs+0x2a>
 8013e7e:	2304      	movs	r3, #4
 8013e80:	e038      	b.n	8013ef4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	3330      	adds	r3, #48	@ 0x30
 8013e86:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fe fd62 	bl	8012954 <ld_word>
 8013e90:	4603      	mov	r3, r0
 8013e92:	461a      	mov	r2, r3
 8013e94:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	d001      	beq.n	8013ea0 <check_fs+0x48>
 8013e9c:	2303      	movs	r3, #3
 8013e9e:	e029      	b.n	8013ef4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013ea6:	2be9      	cmp	r3, #233	@ 0xe9
 8013ea8:	d009      	beq.n	8013ebe <check_fs+0x66>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013eb0:	2beb      	cmp	r3, #235	@ 0xeb
 8013eb2:	d11e      	bne.n	8013ef2 <check_fs+0x9a>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8013eba:	2b90      	cmp	r3, #144	@ 0x90
 8013ebc:	d119      	bne.n	8013ef2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	3330      	adds	r3, #48	@ 0x30
 8013ec2:	3336      	adds	r3, #54	@ 0x36
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7fe fd5d 	bl	8012984 <ld_dword>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8013efc <check_fs+0xa4>)
 8013ed2:	4293      	cmp	r3, r2
 8013ed4:	d101      	bne.n	8013eda <check_fs+0x82>
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	e00c      	b.n	8013ef4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	3330      	adds	r3, #48	@ 0x30
 8013ede:	3352      	adds	r3, #82	@ 0x52
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7fe fd4f 	bl	8012984 <ld_dword>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	4a05      	ldr	r2, [pc, #20]	@ (8013f00 <check_fs+0xa8>)
 8013eea:	4293      	cmp	r3, r2
 8013eec:	d101      	bne.n	8013ef2 <check_fs+0x9a>
 8013eee:	2300      	movs	r3, #0
 8013ef0:	e000      	b.n	8013ef4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013ef2:	2302      	movs	r3, #2
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3708      	adds	r7, #8
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	00544146 	.word	0x00544146
 8013f00:	33544146 	.word	0x33544146

08013f04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b096      	sub	sp, #88	@ 0x58
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	60f8      	str	r0, [r7, #12]
 8013f0c:	60b9      	str	r1, [r7, #8]
 8013f0e:	4613      	mov	r3, r2
 8013f10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	2200      	movs	r2, #0
 8013f16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013f18:	68f8      	ldr	r0, [r7, #12]
 8013f1a:	f7ff ff58 	bl	8013dce <get_ldnumber>
 8013f1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	da01      	bge.n	8013f2a <find_volume+0x26>
 8013f26:	230b      	movs	r3, #11
 8013f28:	e22d      	b.n	8014386 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013f2a:	4aa1      	ldr	r2, [pc, #644]	@ (80141b0 <find_volume+0x2ac>)
 8013f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f32:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d101      	bne.n	8013f3e <find_volume+0x3a>
 8013f3a:	230c      	movs	r3, #12
 8013f3c:	e223      	b.n	8014386 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013f44:	79fb      	ldrb	r3, [r7, #7]
 8013f46:	f023 0301 	bic.w	r3, r3, #1
 8013f4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d01a      	beq.n	8013f8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f56:	785b      	ldrb	r3, [r3, #1]
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fe fc53 	bl	8012804 <disk_status>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013f64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013f68:	f003 0301 	and.w	r3, r3, #1
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d10c      	bne.n	8013f8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013f70:	79fb      	ldrb	r3, [r7, #7]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d007      	beq.n	8013f86 <find_volume+0x82>
 8013f76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013f7a:	f003 0304 	and.w	r3, r3, #4
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d001      	beq.n	8013f86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013f82:	230a      	movs	r3, #10
 8013f84:	e1ff      	b.n	8014386 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8013f86:	2300      	movs	r3, #0
 8013f88:	e1fd      	b.n	8014386 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f92:	b2da      	uxtb	r2, r3
 8013f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f9a:	785b      	ldrb	r3, [r3, #1]
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7fe fc4b 	bl	8012838 <disk_initialize>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013fa8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013fac:	f003 0301 	and.w	r3, r3, #1
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d001      	beq.n	8013fb8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013fb4:	2303      	movs	r3, #3
 8013fb6:	e1e6      	b.n	8014386 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013fb8:	79fb      	ldrb	r3, [r7, #7]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d007      	beq.n	8013fce <find_volume+0xca>
 8013fbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013fc2:	f003 0304 	and.w	r3, r3, #4
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d001      	beq.n	8013fce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013fca:	230a      	movs	r3, #10
 8013fcc:	e1db      	b.n	8014386 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013fd2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013fd4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013fd6:	f7ff ff3f 	bl	8013e58 <check_fs>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013fe4:	2b02      	cmp	r3, #2
 8013fe6:	d149      	bne.n	801407c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013fe8:	2300      	movs	r3, #0
 8013fea:	643b      	str	r3, [r7, #64]	@ 0x40
 8013fec:	e01e      	b.n	801402c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ff0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ff6:	011b      	lsls	r3, r3, #4
 8013ff8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013ffc:	4413      	add	r3, r2
 8013ffe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014002:	3304      	adds	r3, #4
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d006      	beq.n	8014018 <find_volume+0x114>
 801400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801400c:	3308      	adds	r3, #8
 801400e:	4618      	mov	r0, r3
 8014010:	f7fe fcb8 	bl	8012984 <ld_dword>
 8014014:	4602      	mov	r2, r0
 8014016:	e000      	b.n	801401a <find_volume+0x116>
 8014018:	2200      	movs	r2, #0
 801401a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801401c:	009b      	lsls	r3, r3, #2
 801401e:	3358      	adds	r3, #88	@ 0x58
 8014020:	443b      	add	r3, r7
 8014022:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014028:	3301      	adds	r3, #1
 801402a:	643b      	str	r3, [r7, #64]	@ 0x40
 801402c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801402e:	2b03      	cmp	r3, #3
 8014030:	d9dd      	bls.n	8013fee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014032:	2300      	movs	r3, #0
 8014034:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8014036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014038:	2b00      	cmp	r3, #0
 801403a:	d002      	beq.n	8014042 <find_volume+0x13e>
 801403c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801403e:	3b01      	subs	r3, #1
 8014040:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014044:	009b      	lsls	r3, r3, #2
 8014046:	3358      	adds	r3, #88	@ 0x58
 8014048:	443b      	add	r3, r7
 801404a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801404e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014050:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014052:	2b00      	cmp	r3, #0
 8014054:	d005      	beq.n	8014062 <find_volume+0x15e>
 8014056:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014058:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801405a:	f7ff fefd 	bl	8013e58 <check_fs>
 801405e:	4603      	mov	r3, r0
 8014060:	e000      	b.n	8014064 <find_volume+0x160>
 8014062:	2303      	movs	r3, #3
 8014064:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014068:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801406c:	2b01      	cmp	r3, #1
 801406e:	d905      	bls.n	801407c <find_volume+0x178>
 8014070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014072:	3301      	adds	r3, #1
 8014074:	643b      	str	r3, [r7, #64]	@ 0x40
 8014076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014078:	2b03      	cmp	r3, #3
 801407a:	d9e2      	bls.n	8014042 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801407c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014080:	2b04      	cmp	r3, #4
 8014082:	d101      	bne.n	8014088 <find_volume+0x184>
 8014084:	2301      	movs	r3, #1
 8014086:	e17e      	b.n	8014386 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014088:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801408c:	2b01      	cmp	r3, #1
 801408e:	d901      	bls.n	8014094 <find_volume+0x190>
 8014090:	230d      	movs	r3, #13
 8014092:	e178      	b.n	8014386 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014096:	3330      	adds	r3, #48	@ 0x30
 8014098:	330b      	adds	r3, #11
 801409a:	4618      	mov	r0, r3
 801409c:	f7fe fc5a 	bl	8012954 <ld_word>
 80140a0:	4603      	mov	r3, r0
 80140a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80140a6:	d001      	beq.n	80140ac <find_volume+0x1a8>
 80140a8:	230d      	movs	r3, #13
 80140aa:	e16c      	b.n	8014386 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80140ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140ae:	3330      	adds	r3, #48	@ 0x30
 80140b0:	3316      	adds	r3, #22
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7fe fc4e 	bl	8012954 <ld_word>
 80140b8:	4603      	mov	r3, r0
 80140ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80140bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d106      	bne.n	80140d0 <find_volume+0x1cc>
 80140c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140c4:	3330      	adds	r3, #48	@ 0x30
 80140c6:	3324      	adds	r3, #36	@ 0x24
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7fe fc5b 	bl	8012984 <ld_dword>
 80140ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80140d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80140d4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80140d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140d8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80140dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80140e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140e2:	789b      	ldrb	r3, [r3, #2]
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d005      	beq.n	80140f4 <find_volume+0x1f0>
 80140e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140ea:	789b      	ldrb	r3, [r3, #2]
 80140ec:	2b02      	cmp	r3, #2
 80140ee:	d001      	beq.n	80140f4 <find_volume+0x1f0>
 80140f0:	230d      	movs	r3, #13
 80140f2:	e148      	b.n	8014386 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80140f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80140f6:	789b      	ldrb	r3, [r3, #2]
 80140f8:	461a      	mov	r2, r3
 80140fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140fc:	fb02 f303 	mul.w	r3, r2, r3
 8014100:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014104:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8014108:	461a      	mov	r2, r3
 801410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801410c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801410e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014110:	895b      	ldrh	r3, [r3, #10]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d008      	beq.n	8014128 <find_volume+0x224>
 8014116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014118:	895b      	ldrh	r3, [r3, #10]
 801411a:	461a      	mov	r2, r3
 801411c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801411e:	895b      	ldrh	r3, [r3, #10]
 8014120:	3b01      	subs	r3, #1
 8014122:	4013      	ands	r3, r2
 8014124:	2b00      	cmp	r3, #0
 8014126:	d001      	beq.n	801412c <find_volume+0x228>
 8014128:	230d      	movs	r3, #13
 801412a:	e12c      	b.n	8014386 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801412c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801412e:	3330      	adds	r3, #48	@ 0x30
 8014130:	3311      	adds	r3, #17
 8014132:	4618      	mov	r0, r3
 8014134:	f7fe fc0e 	bl	8012954 <ld_word>
 8014138:	4603      	mov	r3, r0
 801413a:	461a      	mov	r2, r3
 801413c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801413e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014142:	891b      	ldrh	r3, [r3, #8]
 8014144:	f003 030f 	and.w	r3, r3, #15
 8014148:	b29b      	uxth	r3, r3
 801414a:	2b00      	cmp	r3, #0
 801414c:	d001      	beq.n	8014152 <find_volume+0x24e>
 801414e:	230d      	movs	r3, #13
 8014150:	e119      	b.n	8014386 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014154:	3330      	adds	r3, #48	@ 0x30
 8014156:	3313      	adds	r3, #19
 8014158:	4618      	mov	r0, r3
 801415a:	f7fe fbfb 	bl	8012954 <ld_word>
 801415e:	4603      	mov	r3, r0
 8014160:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014164:	2b00      	cmp	r3, #0
 8014166:	d106      	bne.n	8014176 <find_volume+0x272>
 8014168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801416a:	3330      	adds	r3, #48	@ 0x30
 801416c:	3320      	adds	r3, #32
 801416e:	4618      	mov	r0, r3
 8014170:	f7fe fc08 	bl	8012984 <ld_dword>
 8014174:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014178:	3330      	adds	r3, #48	@ 0x30
 801417a:	330e      	adds	r3, #14
 801417c:	4618      	mov	r0, r3
 801417e:	f7fe fbe9 	bl	8012954 <ld_word>
 8014182:	4603      	mov	r3, r0
 8014184:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014186:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014188:	2b00      	cmp	r3, #0
 801418a:	d101      	bne.n	8014190 <find_volume+0x28c>
 801418c:	230d      	movs	r3, #13
 801418e:	e0fa      	b.n	8014386 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014190:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014194:	4413      	add	r3, r2
 8014196:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014198:	8912      	ldrh	r2, [r2, #8]
 801419a:	0912      	lsrs	r2, r2, #4
 801419c:	b292      	uxth	r2, r2
 801419e:	4413      	add	r3, r2
 80141a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80141a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80141a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d204      	bcs.n	80141b4 <find_volume+0x2b0>
 80141aa:	230d      	movs	r3, #13
 80141ac:	e0eb      	b.n	8014386 <find_volume+0x482>
 80141ae:	bf00      	nop
 80141b0:	200089b0 	.word	0x200089b0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80141b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80141b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141b8:	1ad3      	subs	r3, r2, r3
 80141ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80141bc:	8952      	ldrh	r2, [r2, #10]
 80141be:	fbb3 f3f2 	udiv	r3, r3, r2
 80141c2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80141c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d101      	bne.n	80141ce <find_volume+0x2ca>
 80141ca:	230d      	movs	r3, #13
 80141cc:	e0db      	b.n	8014386 <find_volume+0x482>
		fmt = FS_FAT32;
 80141ce:	2303      	movs	r3, #3
 80141d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80141d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141d6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80141da:	4293      	cmp	r3, r2
 80141dc:	d802      	bhi.n	80141e4 <find_volume+0x2e0>
 80141de:	2302      	movs	r3, #2
 80141e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80141e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80141ea:	4293      	cmp	r3, r2
 80141ec:	d802      	bhi.n	80141f4 <find_volume+0x2f0>
 80141ee:	2301      	movs	r3, #1
 80141f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80141f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141f6:	1c9a      	adds	r2, r3, #2
 80141f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141fa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80141fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014200:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014202:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014206:	441a      	add	r2, r3
 8014208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801420a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801420c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014210:	441a      	add	r2, r3
 8014212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014214:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8014216:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801421a:	2b03      	cmp	r3, #3
 801421c:	d11e      	bne.n	801425c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801421e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014220:	3330      	adds	r3, #48	@ 0x30
 8014222:	332a      	adds	r3, #42	@ 0x2a
 8014224:	4618      	mov	r0, r3
 8014226:	f7fe fb95 	bl	8012954 <ld_word>
 801422a:	4603      	mov	r3, r0
 801422c:	2b00      	cmp	r3, #0
 801422e:	d001      	beq.n	8014234 <find_volume+0x330>
 8014230:	230d      	movs	r3, #13
 8014232:	e0a8      	b.n	8014386 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014236:	891b      	ldrh	r3, [r3, #8]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d001      	beq.n	8014240 <find_volume+0x33c>
 801423c:	230d      	movs	r3, #13
 801423e:	e0a2      	b.n	8014386 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014242:	3330      	adds	r3, #48	@ 0x30
 8014244:	332c      	adds	r3, #44	@ 0x2c
 8014246:	4618      	mov	r0, r3
 8014248:	f7fe fb9c 	bl	8012984 <ld_dword>
 801424c:	4602      	mov	r2, r0
 801424e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014250:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014254:	695b      	ldr	r3, [r3, #20]
 8014256:	009b      	lsls	r3, r3, #2
 8014258:	647b      	str	r3, [r7, #68]	@ 0x44
 801425a:	e01f      	b.n	801429c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801425c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801425e:	891b      	ldrh	r3, [r3, #8]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d101      	bne.n	8014268 <find_volume+0x364>
 8014264:	230d      	movs	r3, #13
 8014266:	e08e      	b.n	8014386 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801426a:	6a1a      	ldr	r2, [r3, #32]
 801426c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801426e:	441a      	add	r2, r3
 8014270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014272:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014274:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014278:	2b02      	cmp	r3, #2
 801427a:	d103      	bne.n	8014284 <find_volume+0x380>
 801427c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801427e:	695b      	ldr	r3, [r3, #20]
 8014280:	005b      	lsls	r3, r3, #1
 8014282:	e00a      	b.n	801429a <find_volume+0x396>
 8014284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014286:	695a      	ldr	r2, [r3, #20]
 8014288:	4613      	mov	r3, r2
 801428a:	005b      	lsls	r3, r3, #1
 801428c:	4413      	add	r3, r2
 801428e:	085a      	lsrs	r2, r3, #1
 8014290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014292:	695b      	ldr	r3, [r3, #20]
 8014294:	f003 0301 	and.w	r3, r3, #1
 8014298:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801429a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801429c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801429e:	699a      	ldr	r2, [r3, #24]
 80142a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142a2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80142a6:	0a5b      	lsrs	r3, r3, #9
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d201      	bcs.n	80142b0 <find_volume+0x3ac>
 80142ac:	230d      	movs	r3, #13
 80142ae:	e06a      	b.n	8014386 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80142b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142b2:	f04f 32ff 	mov.w	r2, #4294967295
 80142b6:	611a      	str	r2, [r3, #16]
 80142b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142ba:	691a      	ldr	r2, [r3, #16]
 80142bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142be:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80142c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142c2:	2280      	movs	r2, #128	@ 0x80
 80142c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80142c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80142ca:	2b03      	cmp	r3, #3
 80142cc:	d149      	bne.n	8014362 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80142ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142d0:	3330      	adds	r3, #48	@ 0x30
 80142d2:	3330      	adds	r3, #48	@ 0x30
 80142d4:	4618      	mov	r0, r3
 80142d6:	f7fe fb3d 	bl	8012954 <ld_word>
 80142da:	4603      	mov	r3, r0
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d140      	bne.n	8014362 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80142e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142e2:	3301      	adds	r3, #1
 80142e4:	4619      	mov	r1, r3
 80142e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80142e8:	f7fe fde4 	bl	8012eb4 <move_window>
 80142ec:	4603      	mov	r3, r0
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d137      	bne.n	8014362 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80142f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142f4:	2200      	movs	r2, #0
 80142f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80142f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142fa:	3330      	adds	r3, #48	@ 0x30
 80142fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014300:	4618      	mov	r0, r3
 8014302:	f7fe fb27 	bl	8012954 <ld_word>
 8014306:	4603      	mov	r3, r0
 8014308:	461a      	mov	r2, r3
 801430a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801430e:	429a      	cmp	r2, r3
 8014310:	d127      	bne.n	8014362 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014314:	3330      	adds	r3, #48	@ 0x30
 8014316:	4618      	mov	r0, r3
 8014318:	f7fe fb34 	bl	8012984 <ld_dword>
 801431c:	4603      	mov	r3, r0
 801431e:	4a1c      	ldr	r2, [pc, #112]	@ (8014390 <find_volume+0x48c>)
 8014320:	4293      	cmp	r3, r2
 8014322:	d11e      	bne.n	8014362 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014326:	3330      	adds	r3, #48	@ 0x30
 8014328:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801432c:	4618      	mov	r0, r3
 801432e:	f7fe fb29 	bl	8012984 <ld_dword>
 8014332:	4603      	mov	r3, r0
 8014334:	4a17      	ldr	r2, [pc, #92]	@ (8014394 <find_volume+0x490>)
 8014336:	4293      	cmp	r3, r2
 8014338:	d113      	bne.n	8014362 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801433a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801433c:	3330      	adds	r3, #48	@ 0x30
 801433e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8014342:	4618      	mov	r0, r3
 8014344:	f7fe fb1e 	bl	8012984 <ld_dword>
 8014348:	4602      	mov	r2, r0
 801434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801434c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014350:	3330      	adds	r3, #48	@ 0x30
 8014352:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014356:	4618      	mov	r0, r3
 8014358:	f7fe fb14 	bl	8012984 <ld_dword>
 801435c:	4602      	mov	r2, r0
 801435e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014360:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014364:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8014368:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801436a:	4b0b      	ldr	r3, [pc, #44]	@ (8014398 <find_volume+0x494>)
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	3301      	adds	r3, #1
 8014370:	b29a      	uxth	r2, r3
 8014372:	4b09      	ldr	r3, [pc, #36]	@ (8014398 <find_volume+0x494>)
 8014374:	801a      	strh	r2, [r3, #0]
 8014376:	4b08      	ldr	r3, [pc, #32]	@ (8014398 <find_volume+0x494>)
 8014378:	881a      	ldrh	r2, [r3, #0]
 801437a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801437c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801437e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014380:	f7fe fd30 	bl	8012de4 <clear_lock>
#endif
	return FR_OK;
 8014384:	2300      	movs	r3, #0
}
 8014386:	4618      	mov	r0, r3
 8014388:	3758      	adds	r7, #88	@ 0x58
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	41615252 	.word	0x41615252
 8014394:	61417272 	.word	0x61417272
 8014398:	200089b8 	.word	0x200089b8

0801439c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
 80143a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80143a6:	2309      	movs	r3, #9
 80143a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d01c      	beq.n	80143ea <validate+0x4e>
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d018      	beq.n	80143ea <validate+0x4e>
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	781b      	ldrb	r3, [r3, #0]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d013      	beq.n	80143ea <validate+0x4e>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	889a      	ldrh	r2, [r3, #4]
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	88db      	ldrh	r3, [r3, #6]
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d10c      	bne.n	80143ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	785b      	ldrb	r3, [r3, #1]
 80143d6:	4618      	mov	r0, r3
 80143d8:	f7fe fa14 	bl	8012804 <disk_status>
 80143dc:	4603      	mov	r3, r0
 80143de:	f003 0301 	and.w	r3, r3, #1
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d101      	bne.n	80143ea <validate+0x4e>
			res = FR_OK;
 80143e6:	2300      	movs	r3, #0
 80143e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80143ea:	7bfb      	ldrb	r3, [r7, #15]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d102      	bne.n	80143f6 <validate+0x5a>
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	e000      	b.n	80143f8 <validate+0x5c>
 80143f6:	2300      	movs	r3, #0
 80143f8:	683a      	ldr	r2, [r7, #0]
 80143fa:	6013      	str	r3, [r2, #0]
	return res;
 80143fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80143fe:	4618      	mov	r0, r3
 8014400:	3710      	adds	r7, #16
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}
	...

08014408 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	b088      	sub	sp, #32
 801440c:	af00      	add	r7, sp, #0
 801440e:	60f8      	str	r0, [r7, #12]
 8014410:	60b9      	str	r1, [r7, #8]
 8014412:	4613      	mov	r3, r2
 8014414:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801441a:	f107 0310 	add.w	r3, r7, #16
 801441e:	4618      	mov	r0, r3
 8014420:	f7ff fcd5 	bl	8013dce <get_ldnumber>
 8014424:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014426:	69fb      	ldr	r3, [r7, #28]
 8014428:	2b00      	cmp	r3, #0
 801442a:	da01      	bge.n	8014430 <f_mount+0x28>
 801442c:	230b      	movs	r3, #11
 801442e:	e02b      	b.n	8014488 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014430:	4a17      	ldr	r2, [pc, #92]	@ (8014490 <f_mount+0x88>)
 8014432:	69fb      	ldr	r3, [r7, #28]
 8014434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014438:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801443a:	69bb      	ldr	r3, [r7, #24]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d005      	beq.n	801444c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014440:	69b8      	ldr	r0, [r7, #24]
 8014442:	f7fe fccf 	bl	8012de4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	2200      	movs	r2, #0
 801444a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d002      	beq.n	8014458 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	2200      	movs	r2, #0
 8014456:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014458:	68fa      	ldr	r2, [r7, #12]
 801445a:	490d      	ldr	r1, [pc, #52]	@ (8014490 <f_mount+0x88>)
 801445c:	69fb      	ldr	r3, [r7, #28]
 801445e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d002      	beq.n	801446e <f_mount+0x66>
 8014468:	79fb      	ldrb	r3, [r7, #7]
 801446a:	2b01      	cmp	r3, #1
 801446c:	d001      	beq.n	8014472 <f_mount+0x6a>
 801446e:	2300      	movs	r3, #0
 8014470:	e00a      	b.n	8014488 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014472:	f107 010c 	add.w	r1, r7, #12
 8014476:	f107 0308 	add.w	r3, r7, #8
 801447a:	2200      	movs	r2, #0
 801447c:	4618      	mov	r0, r3
 801447e:	f7ff fd41 	bl	8013f04 <find_volume>
 8014482:	4603      	mov	r3, r0
 8014484:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014486:	7dfb      	ldrb	r3, [r7, #23]
}
 8014488:	4618      	mov	r0, r3
 801448a:	3720      	adds	r7, #32
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	200089b0 	.word	0x200089b0

08014494 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b098      	sub	sp, #96	@ 0x60
 8014498:	af00      	add	r7, sp, #0
 801449a:	60f8      	str	r0, [r7, #12]
 801449c:	60b9      	str	r1, [r7, #8]
 801449e:	4613      	mov	r3, r2
 80144a0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d101      	bne.n	80144ac <f_open+0x18>
 80144a8:	2309      	movs	r3, #9
 80144aa:	e1a9      	b.n	8014800 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80144ac:	79fb      	ldrb	r3, [r7, #7]
 80144ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80144b2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80144b4:	79fa      	ldrb	r2, [r7, #7]
 80144b6:	f107 0110 	add.w	r1, r7, #16
 80144ba:	f107 0308 	add.w	r3, r7, #8
 80144be:	4618      	mov	r0, r3
 80144c0:	f7ff fd20 	bl	8013f04 <find_volume>
 80144c4:	4603      	mov	r3, r0
 80144c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80144ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	f040 818d 	bne.w	80147ee <f_open+0x35a>
		dj.obj.fs = fs;
 80144d4:	693b      	ldr	r3, [r7, #16]
 80144d6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80144d8:	68ba      	ldr	r2, [r7, #8]
 80144da:	f107 0314 	add.w	r3, r7, #20
 80144de:	4611      	mov	r1, r2
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7ff fc03 	bl	8013cec <follow_path>
 80144e6:	4603      	mov	r3, r0
 80144e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80144ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d118      	bne.n	8014526 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80144f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80144f8:	b25b      	sxtb	r3, r3
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	da03      	bge.n	8014506 <f_open+0x72>
				res = FR_INVALID_NAME;
 80144fe:	2306      	movs	r3, #6
 8014500:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8014504:	e00f      	b.n	8014526 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014506:	79fb      	ldrb	r3, [r7, #7]
 8014508:	2b01      	cmp	r3, #1
 801450a:	bf8c      	ite	hi
 801450c:	2301      	movhi	r3, #1
 801450e:	2300      	movls	r3, #0
 8014510:	b2db      	uxtb	r3, r3
 8014512:	461a      	mov	r2, r3
 8014514:	f107 0314 	add.w	r3, r7, #20
 8014518:	4611      	mov	r1, r2
 801451a:	4618      	mov	r0, r3
 801451c:	f7fe fb1a 	bl	8012b54 <chk_lock>
 8014520:	4603      	mov	r3, r0
 8014522:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014526:	79fb      	ldrb	r3, [r7, #7]
 8014528:	f003 031c 	and.w	r3, r3, #28
 801452c:	2b00      	cmp	r3, #0
 801452e:	d07f      	beq.n	8014630 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8014530:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014534:	2b00      	cmp	r3, #0
 8014536:	d017      	beq.n	8014568 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014538:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801453c:	2b04      	cmp	r3, #4
 801453e:	d10e      	bne.n	801455e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014540:	f7fe fb64 	bl	8012c0c <enq_lock>
 8014544:	4603      	mov	r3, r0
 8014546:	2b00      	cmp	r3, #0
 8014548:	d006      	beq.n	8014558 <f_open+0xc4>
 801454a:	f107 0314 	add.w	r3, r7, #20
 801454e:	4618      	mov	r0, r3
 8014550:	f7ff faa5 	bl	8013a9e <dir_register>
 8014554:	4603      	mov	r3, r0
 8014556:	e000      	b.n	801455a <f_open+0xc6>
 8014558:	2312      	movs	r3, #18
 801455a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801455e:	79fb      	ldrb	r3, [r7, #7]
 8014560:	f043 0308 	orr.w	r3, r3, #8
 8014564:	71fb      	strb	r3, [r7, #7]
 8014566:	e010      	b.n	801458a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014568:	7ebb      	ldrb	r3, [r7, #26]
 801456a:	f003 0311 	and.w	r3, r3, #17
 801456e:	2b00      	cmp	r3, #0
 8014570:	d003      	beq.n	801457a <f_open+0xe6>
					res = FR_DENIED;
 8014572:	2307      	movs	r3, #7
 8014574:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8014578:	e007      	b.n	801458a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801457a:	79fb      	ldrb	r3, [r7, #7]
 801457c:	f003 0304 	and.w	r3, r3, #4
 8014580:	2b00      	cmp	r3, #0
 8014582:	d002      	beq.n	801458a <f_open+0xf6>
 8014584:	2308      	movs	r3, #8
 8014586:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801458a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801458e:	2b00      	cmp	r3, #0
 8014590:	d168      	bne.n	8014664 <f_open+0x1d0>
 8014592:	79fb      	ldrb	r3, [r7, #7]
 8014594:	f003 0308 	and.w	r3, r3, #8
 8014598:	2b00      	cmp	r3, #0
 801459a:	d063      	beq.n	8014664 <f_open+0x1d0>
				dw = GET_FATTIME();
 801459c:	f7fe f9d2 	bl	8012944 <get_fattime>
 80145a0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80145a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145a4:	330e      	adds	r3, #14
 80145a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7fe fa29 	bl	8012a00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80145ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145b0:	3316      	adds	r3, #22
 80145b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7fe fa23 	bl	8012a00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80145ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145bc:	330b      	adds	r3, #11
 80145be:	2220      	movs	r2, #32
 80145c0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80145c6:	4611      	mov	r1, r2
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7ff f977 	bl	80138bc <ld_clust>
 80145ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80145d4:	2200      	movs	r2, #0
 80145d6:	4618      	mov	r0, r3
 80145d8:	f7ff f98f 	bl	80138fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80145dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145de:	331c      	adds	r3, #28
 80145e0:	2100      	movs	r1, #0
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fe fa0c 	bl	8012a00 <st_dword>
					fs->wflag = 1;
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	2201      	movs	r2, #1
 80145ec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80145ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d037      	beq.n	8014664 <f_open+0x1d0>
						dw = fs->winsect;
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145f8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80145fa:	f107 0314 	add.w	r3, r7, #20
 80145fe:	2200      	movs	r2, #0
 8014600:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8014602:	4618      	mov	r0, r3
 8014604:	f7fe fea2 	bl	801334c <remove_chain>
 8014608:	4603      	mov	r3, r0
 801460a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801460e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014612:	2b00      	cmp	r3, #0
 8014614:	d126      	bne.n	8014664 <f_open+0x1d0>
							res = move_window(fs, dw);
 8014616:	693b      	ldr	r3, [r7, #16]
 8014618:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801461a:	4618      	mov	r0, r3
 801461c:	f7fe fc4a 	bl	8012eb4 <move_window>
 8014620:	4603      	mov	r3, r0
 8014622:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014626:	693b      	ldr	r3, [r7, #16]
 8014628:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801462a:	3a01      	subs	r2, #1
 801462c:	60da      	str	r2, [r3, #12]
 801462e:	e019      	b.n	8014664 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014630:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014634:	2b00      	cmp	r3, #0
 8014636:	d115      	bne.n	8014664 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014638:	7ebb      	ldrb	r3, [r7, #26]
 801463a:	f003 0310 	and.w	r3, r3, #16
 801463e:	2b00      	cmp	r3, #0
 8014640:	d003      	beq.n	801464a <f_open+0x1b6>
					res = FR_NO_FILE;
 8014642:	2304      	movs	r3, #4
 8014644:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8014648:	e00c      	b.n	8014664 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801464a:	79fb      	ldrb	r3, [r7, #7]
 801464c:	f003 0302 	and.w	r3, r3, #2
 8014650:	2b00      	cmp	r3, #0
 8014652:	d007      	beq.n	8014664 <f_open+0x1d0>
 8014654:	7ebb      	ldrb	r3, [r7, #26]
 8014656:	f003 0301 	and.w	r3, r3, #1
 801465a:	2b00      	cmp	r3, #0
 801465c:	d002      	beq.n	8014664 <f_open+0x1d0>
						res = FR_DENIED;
 801465e:	2307      	movs	r3, #7
 8014660:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8014664:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014668:	2b00      	cmp	r3, #0
 801466a:	d126      	bne.n	80146ba <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801466c:	79fb      	ldrb	r3, [r7, #7]
 801466e:	f003 0308 	and.w	r3, r3, #8
 8014672:	2b00      	cmp	r3, #0
 8014674:	d003      	beq.n	801467e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8014676:	79fb      	ldrb	r3, [r7, #7]
 8014678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801467c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801467e:	693b      	ldr	r3, [r7, #16]
 8014680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8014686:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801468c:	79fb      	ldrb	r3, [r7, #7]
 801468e:	2b01      	cmp	r3, #1
 8014690:	bf8c      	ite	hi
 8014692:	2301      	movhi	r3, #1
 8014694:	2300      	movls	r3, #0
 8014696:	b2db      	uxtb	r3, r3
 8014698:	461a      	mov	r2, r3
 801469a:	f107 0314 	add.w	r3, r7, #20
 801469e:	4611      	mov	r1, r2
 80146a0:	4618      	mov	r0, r3
 80146a2:	f7fe fad5 	bl	8012c50 <inc_lock>
 80146a6:	4602      	mov	r2, r0
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	691b      	ldr	r3, [r3, #16]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d102      	bne.n	80146ba <f_open+0x226>
 80146b4:	2302      	movs	r3, #2
 80146b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80146ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80146be:	2b00      	cmp	r3, #0
 80146c0:	f040 8095 	bne.w	80147ee <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80146c8:	4611      	mov	r1, r2
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7ff f8f6 	bl	80138bc <ld_clust>
 80146d0:	4602      	mov	r2, r0
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80146d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80146d8:	331c      	adds	r3, #28
 80146da:	4618      	mov	r0, r3
 80146dc:	f7fe f952 	bl	8012984 <ld_dword>
 80146e0:	4602      	mov	r2, r0
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	2200      	movs	r2, #0
 80146ea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80146ec:	693a      	ldr	r2, [r7, #16]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	88da      	ldrh	r2, [r3, #6]
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	79fa      	ldrb	r2, [r7, #7]
 80146fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	2200      	movs	r2, #0
 8014704:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	2200      	movs	r2, #0
 801470a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	2200      	movs	r2, #0
 8014710:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	3330      	adds	r3, #48	@ 0x30
 8014716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801471a:	2100      	movs	r1, #0
 801471c:	4618      	mov	r0, r3
 801471e:	f7fe f9bc 	bl	8012a9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014722:	79fb      	ldrb	r3, [r7, #7]
 8014724:	f003 0320 	and.w	r3, r3, #32
 8014728:	2b00      	cmp	r3, #0
 801472a:	d060      	beq.n	80147ee <f_open+0x35a>
 801472c:	68fb      	ldr	r3, [r7, #12]
 801472e:	68db      	ldr	r3, [r3, #12]
 8014730:	2b00      	cmp	r3, #0
 8014732:	d05c      	beq.n	80147ee <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	68da      	ldr	r2, [r3, #12]
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	895b      	ldrh	r3, [r3, #10]
 8014740:	025b      	lsls	r3, r3, #9
 8014742:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	689b      	ldr	r3, [r3, #8]
 8014748:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	68db      	ldr	r3, [r3, #12]
 801474e:	657b      	str	r3, [r7, #84]	@ 0x54
 8014750:	e016      	b.n	8014780 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8014756:	4618      	mov	r0, r3
 8014758:	f7fe fc67 	bl	801302a <get_fat>
 801475c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801475e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014760:	2b01      	cmp	r3, #1
 8014762:	d802      	bhi.n	801476a <f_open+0x2d6>
 8014764:	2302      	movs	r3, #2
 8014766:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801476a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014770:	d102      	bne.n	8014778 <f_open+0x2e4>
 8014772:	2301      	movs	r3, #1
 8014774:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801477a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801477c:	1ad3      	subs	r3, r2, r3
 801477e:	657b      	str	r3, [r7, #84]	@ 0x54
 8014780:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8014784:	2b00      	cmp	r3, #0
 8014786:	d103      	bne.n	8014790 <f_open+0x2fc>
 8014788:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801478a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801478c:	429a      	cmp	r2, r3
 801478e:	d8e0      	bhi.n	8014752 <f_open+0x2be>
				}
				fp->clust = clst;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014794:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014796:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801479a:	2b00      	cmp	r3, #0
 801479c:	d127      	bne.n	80147ee <f_open+0x35a>
 801479e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d022      	beq.n	80147ee <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7fe fc1d 	bl	8012fec <clust2sect>
 80147b2:	6478      	str	r0, [r7, #68]	@ 0x44
 80147b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d103      	bne.n	80147c2 <f_open+0x32e>
						res = FR_INT_ERR;
 80147ba:	2302      	movs	r3, #2
 80147bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80147c0:	e015      	b.n	80147ee <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80147c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80147c4:	0a5a      	lsrs	r2, r3, #9
 80147c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80147c8:	441a      	add	r2, r3
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80147ce:	693b      	ldr	r3, [r7, #16]
 80147d0:	7858      	ldrb	r0, [r3, #1]
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	6a1a      	ldr	r2, [r3, #32]
 80147dc:	2301      	movs	r3, #1
 80147de:	f7fe f853 	bl	8012888 <disk_read>
 80147e2:	4603      	mov	r3, r0
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d002      	beq.n	80147ee <f_open+0x35a>
 80147e8:	2301      	movs	r3, #1
 80147ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80147ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d002      	beq.n	80147fc <f_open+0x368>
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2200      	movs	r2, #0
 80147fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80147fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8014800:	4618      	mov	r0, r3
 8014802:	3760      	adds	r7, #96	@ 0x60
 8014804:	46bd      	mov	sp, r7
 8014806:	bd80      	pop	{r7, pc}

08014808 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b08e      	sub	sp, #56	@ 0x38
 801480c:	af00      	add	r7, sp, #0
 801480e:	60f8      	str	r0, [r7, #12]
 8014810:	60b9      	str	r1, [r7, #8]
 8014812:	607a      	str	r2, [r7, #4]
 8014814:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	2200      	movs	r2, #0
 801481e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	f107 0214 	add.w	r2, r7, #20
 8014826:	4611      	mov	r1, r2
 8014828:	4618      	mov	r0, r3
 801482a:	f7ff fdb7 	bl	801439c <validate>
 801482e:	4603      	mov	r3, r0
 8014830:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014834:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014838:	2b00      	cmp	r3, #0
 801483a:	d107      	bne.n	801484c <f_read+0x44>
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	7d5b      	ldrb	r3, [r3, #21]
 8014840:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014844:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014848:	2b00      	cmp	r3, #0
 801484a:	d002      	beq.n	8014852 <f_read+0x4a>
 801484c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014850:	e115      	b.n	8014a7e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	7d1b      	ldrb	r3, [r3, #20]
 8014856:	f003 0301 	and.w	r3, r3, #1
 801485a:	2b00      	cmp	r3, #0
 801485c:	d101      	bne.n	8014862 <f_read+0x5a>
 801485e:	2307      	movs	r3, #7
 8014860:	e10d      	b.n	8014a7e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	68da      	ldr	r2, [r3, #12]
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	699b      	ldr	r3, [r3, #24]
 801486a:	1ad3      	subs	r3, r2, r3
 801486c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801486e:	687a      	ldr	r2, [r7, #4]
 8014870:	6a3b      	ldr	r3, [r7, #32]
 8014872:	429a      	cmp	r2, r3
 8014874:	f240 80fe 	bls.w	8014a74 <f_read+0x26c>
 8014878:	6a3b      	ldr	r3, [r7, #32]
 801487a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801487c:	e0fa      	b.n	8014a74 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	699b      	ldr	r3, [r3, #24]
 8014882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014886:	2b00      	cmp	r3, #0
 8014888:	f040 80c6 	bne.w	8014a18 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	699b      	ldr	r3, [r3, #24]
 8014890:	0a5b      	lsrs	r3, r3, #9
 8014892:	697a      	ldr	r2, [r7, #20]
 8014894:	8952      	ldrh	r2, [r2, #10]
 8014896:	3a01      	subs	r2, #1
 8014898:	4013      	ands	r3, r2
 801489a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801489c:	69fb      	ldr	r3, [r7, #28]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d12f      	bne.n	8014902 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	699b      	ldr	r3, [r3, #24]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d103      	bne.n	80148b2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	689b      	ldr	r3, [r3, #8]
 80148ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80148b0:	e013      	b.n	80148da <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d007      	beq.n	80148ca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	699b      	ldr	r3, [r3, #24]
 80148be:	4619      	mov	r1, r3
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f7fe fe40 	bl	8013546 <clmt_clust>
 80148c6:	6338      	str	r0, [r7, #48]	@ 0x30
 80148c8:	e007      	b.n	80148da <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80148ca:	68fa      	ldr	r2, [r7, #12]
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	69db      	ldr	r3, [r3, #28]
 80148d0:	4619      	mov	r1, r3
 80148d2:	4610      	mov	r0, r2
 80148d4:	f7fe fba9 	bl	801302a <get_fat>
 80148d8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80148da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148dc:	2b01      	cmp	r3, #1
 80148de:	d804      	bhi.n	80148ea <f_read+0xe2>
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2202      	movs	r2, #2
 80148e4:	755a      	strb	r2, [r3, #21]
 80148e6:	2302      	movs	r3, #2
 80148e8:	e0c9      	b.n	8014a7e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80148ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148f0:	d104      	bne.n	80148fc <f_read+0xf4>
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	2201      	movs	r2, #1
 80148f6:	755a      	strb	r2, [r3, #21]
 80148f8:	2301      	movs	r3, #1
 80148fa:	e0c0      	b.n	8014a7e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014900:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014902:	697a      	ldr	r2, [r7, #20]
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	69db      	ldr	r3, [r3, #28]
 8014908:	4619      	mov	r1, r3
 801490a:	4610      	mov	r0, r2
 801490c:	f7fe fb6e 	bl	8012fec <clust2sect>
 8014910:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014912:	69bb      	ldr	r3, [r7, #24]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d104      	bne.n	8014922 <f_read+0x11a>
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	2202      	movs	r2, #2
 801491c:	755a      	strb	r2, [r3, #21]
 801491e:	2302      	movs	r3, #2
 8014920:	e0ad      	b.n	8014a7e <f_read+0x276>
			sect += csect;
 8014922:	69ba      	ldr	r2, [r7, #24]
 8014924:	69fb      	ldr	r3, [r7, #28]
 8014926:	4413      	add	r3, r2
 8014928:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	0a5b      	lsrs	r3, r3, #9
 801492e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014932:	2b00      	cmp	r3, #0
 8014934:	d039      	beq.n	80149aa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014936:	69fa      	ldr	r2, [r7, #28]
 8014938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801493a:	4413      	add	r3, r2
 801493c:	697a      	ldr	r2, [r7, #20]
 801493e:	8952      	ldrh	r2, [r2, #10]
 8014940:	4293      	cmp	r3, r2
 8014942:	d905      	bls.n	8014950 <f_read+0x148>
					cc = fs->csize - csect;
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	895b      	ldrh	r3, [r3, #10]
 8014948:	461a      	mov	r2, r3
 801494a:	69fb      	ldr	r3, [r7, #28]
 801494c:	1ad3      	subs	r3, r2, r3
 801494e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014950:	697b      	ldr	r3, [r7, #20]
 8014952:	7858      	ldrb	r0, [r3, #1]
 8014954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014956:	69ba      	ldr	r2, [r7, #24]
 8014958:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801495a:	f7fd ff95 	bl	8012888 <disk_read>
 801495e:	4603      	mov	r3, r0
 8014960:	2b00      	cmp	r3, #0
 8014962:	d004      	beq.n	801496e <f_read+0x166>
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	2201      	movs	r2, #1
 8014968:	755a      	strb	r2, [r3, #21]
 801496a:	2301      	movs	r3, #1
 801496c:	e087      	b.n	8014a7e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	7d1b      	ldrb	r3, [r3, #20]
 8014972:	b25b      	sxtb	r3, r3
 8014974:	2b00      	cmp	r3, #0
 8014976:	da14      	bge.n	80149a2 <f_read+0x19a>
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	6a1a      	ldr	r2, [r3, #32]
 801497c:	69bb      	ldr	r3, [r7, #24]
 801497e:	1ad3      	subs	r3, r2, r3
 8014980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014982:	429a      	cmp	r2, r3
 8014984:	d90d      	bls.n	80149a2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	6a1a      	ldr	r2, [r3, #32]
 801498a:	69bb      	ldr	r3, [r7, #24]
 801498c:	1ad3      	subs	r3, r2, r3
 801498e:	025b      	lsls	r3, r3, #9
 8014990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014992:	18d0      	adds	r0, r2, r3
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	3330      	adds	r3, #48	@ 0x30
 8014998:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801499c:	4619      	mov	r1, r3
 801499e:	f7fe f85b 	bl	8012a58 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80149a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149a4:	025b      	lsls	r3, r3, #9
 80149a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80149a8:	e050      	b.n	8014a4c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	6a1b      	ldr	r3, [r3, #32]
 80149ae:	69ba      	ldr	r2, [r7, #24]
 80149b0:	429a      	cmp	r2, r3
 80149b2:	d02e      	beq.n	8014a12 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	7d1b      	ldrb	r3, [r3, #20]
 80149b8:	b25b      	sxtb	r3, r3
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	da18      	bge.n	80149f0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	7858      	ldrb	r0, [r3, #1]
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	6a1a      	ldr	r2, [r3, #32]
 80149cc:	2301      	movs	r3, #1
 80149ce:	f7fd ff7b 	bl	80128c8 <disk_write>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d004      	beq.n	80149e2 <f_read+0x1da>
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	2201      	movs	r2, #1
 80149dc:	755a      	strb	r2, [r3, #21]
 80149de:	2301      	movs	r3, #1
 80149e0:	e04d      	b.n	8014a7e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	7d1b      	ldrb	r3, [r3, #20]
 80149e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80149ea:	b2da      	uxtb	r2, r3
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	7858      	ldrb	r0, [r3, #1]
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80149fa:	2301      	movs	r3, #1
 80149fc:	69ba      	ldr	r2, [r7, #24]
 80149fe:	f7fd ff43 	bl	8012888 <disk_read>
 8014a02:	4603      	mov	r3, r0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d004      	beq.n	8014a12 <f_read+0x20a>
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2201      	movs	r2, #1
 8014a0c:	755a      	strb	r2, [r3, #21]
 8014a0e:	2301      	movs	r3, #1
 8014a10:	e035      	b.n	8014a7e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	69ba      	ldr	r2, [r7, #24]
 8014a16:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	699b      	ldr	r3, [r3, #24]
 8014a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a20:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d901      	bls.n	8014a32 <f_read+0x22a>
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	699b      	ldr	r3, [r3, #24]
 8014a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a40:	4413      	add	r3, r2
 8014a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014a44:	4619      	mov	r1, r3
 8014a46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014a48:	f7fe f806 	bl	8012a58 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a50:	4413      	add	r3, r2
 8014a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	699a      	ldr	r2, [r3, #24]
 8014a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a5a:	441a      	add	r2, r3
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	619a      	str	r2, [r3, #24]
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	681a      	ldr	r2, [r3, #0]
 8014a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a66:	441a      	add	r2, r3
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	601a      	str	r2, [r3, #0]
 8014a6c:	687a      	ldr	r2, [r7, #4]
 8014a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a70:	1ad3      	subs	r3, r2, r3
 8014a72:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	f47f af01 	bne.w	801487e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014a7c:	2300      	movs	r3, #0
}
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3738      	adds	r7, #56	@ 0x38
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}

08014a86 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014a86:	b580      	push	{r7, lr}
 8014a88:	b08c      	sub	sp, #48	@ 0x30
 8014a8a:	af00      	add	r7, sp, #0
 8014a8c:	60f8      	str	r0, [r7, #12]
 8014a8e:	60b9      	str	r1, [r7, #8]
 8014a90:	607a      	str	r2, [r7, #4]
 8014a92:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	f107 0210 	add.w	r2, r7, #16
 8014aa4:	4611      	mov	r1, r2
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7ff fc78 	bl	801439c <validate>
 8014aac:	4603      	mov	r3, r0
 8014aae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d107      	bne.n	8014aca <f_write+0x44>
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	7d5b      	ldrb	r3, [r3, #21]
 8014abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d002      	beq.n	8014ad0 <f_write+0x4a>
 8014aca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014ace:	e14b      	b.n	8014d68 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	7d1b      	ldrb	r3, [r3, #20]
 8014ad4:	f003 0302 	and.w	r3, r3, #2
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d101      	bne.n	8014ae0 <f_write+0x5a>
 8014adc:	2307      	movs	r3, #7
 8014ade:	e143      	b.n	8014d68 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	699a      	ldr	r2, [r3, #24]
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	441a      	add	r2, r3
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	699b      	ldr	r3, [r3, #24]
 8014aec:	429a      	cmp	r2, r3
 8014aee:	f080 812d 	bcs.w	8014d4c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	699b      	ldr	r3, [r3, #24]
 8014af6:	43db      	mvns	r3, r3
 8014af8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014afa:	e127      	b.n	8014d4c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	699b      	ldr	r3, [r3, #24]
 8014b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	f040 80e3 	bne.w	8014cd0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	699b      	ldr	r3, [r3, #24]
 8014b0e:	0a5b      	lsrs	r3, r3, #9
 8014b10:	693a      	ldr	r2, [r7, #16]
 8014b12:	8952      	ldrh	r2, [r2, #10]
 8014b14:	3a01      	subs	r2, #1
 8014b16:	4013      	ands	r3, r2
 8014b18:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014b1a:	69bb      	ldr	r3, [r7, #24]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d143      	bne.n	8014ba8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	699b      	ldr	r3, [r3, #24]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d10c      	bne.n	8014b42 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	689b      	ldr	r3, [r3, #8]
 8014b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d11a      	bne.n	8014b6a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2100      	movs	r1, #0
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7fe fc6c 	bl	8013416 <create_chain>
 8014b3e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014b40:	e013      	b.n	8014b6a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d007      	beq.n	8014b5a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	699b      	ldr	r3, [r3, #24]
 8014b4e:	4619      	mov	r1, r3
 8014b50:	68f8      	ldr	r0, [r7, #12]
 8014b52:	f7fe fcf8 	bl	8013546 <clmt_clust>
 8014b56:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014b58:	e007      	b.n	8014b6a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014b5a:	68fa      	ldr	r2, [r7, #12]
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	69db      	ldr	r3, [r3, #28]
 8014b60:	4619      	mov	r1, r3
 8014b62:	4610      	mov	r0, r2
 8014b64:	f7fe fc57 	bl	8013416 <create_chain>
 8014b68:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	f000 80f2 	beq.w	8014d56 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b74:	2b01      	cmp	r3, #1
 8014b76:	d104      	bne.n	8014b82 <f_write+0xfc>
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	2202      	movs	r2, #2
 8014b7c:	755a      	strb	r2, [r3, #21]
 8014b7e:	2302      	movs	r3, #2
 8014b80:	e0f2      	b.n	8014d68 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b88:	d104      	bne.n	8014b94 <f_write+0x10e>
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2201      	movs	r2, #1
 8014b8e:	755a      	strb	r2, [r3, #21]
 8014b90:	2301      	movs	r3, #1
 8014b92:	e0e9      	b.n	8014d68 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014b98:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	689b      	ldr	r3, [r3, #8]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d102      	bne.n	8014ba8 <f_write+0x122>
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ba6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	7d1b      	ldrb	r3, [r3, #20]
 8014bac:	b25b      	sxtb	r3, r3
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	da18      	bge.n	8014be4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014bb2:	693b      	ldr	r3, [r7, #16]
 8014bb4:	7858      	ldrb	r0, [r3, #1]
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	6a1a      	ldr	r2, [r3, #32]
 8014bc0:	2301      	movs	r3, #1
 8014bc2:	f7fd fe81 	bl	80128c8 <disk_write>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d004      	beq.n	8014bd6 <f_write+0x150>
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	2201      	movs	r2, #1
 8014bd0:	755a      	strb	r2, [r3, #21]
 8014bd2:	2301      	movs	r3, #1
 8014bd4:	e0c8      	b.n	8014d68 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	7d1b      	ldrb	r3, [r3, #20]
 8014bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014bde:	b2da      	uxtb	r2, r3
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014be4:	693a      	ldr	r2, [r7, #16]
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	69db      	ldr	r3, [r3, #28]
 8014bea:	4619      	mov	r1, r3
 8014bec:	4610      	mov	r0, r2
 8014bee:	f7fe f9fd 	bl	8012fec <clust2sect>
 8014bf2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d104      	bne.n	8014c04 <f_write+0x17e>
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2202      	movs	r2, #2
 8014bfe:	755a      	strb	r2, [r3, #21]
 8014c00:	2302      	movs	r3, #2
 8014c02:	e0b1      	b.n	8014d68 <f_write+0x2e2>
			sect += csect;
 8014c04:	697a      	ldr	r2, [r7, #20]
 8014c06:	69bb      	ldr	r3, [r7, #24]
 8014c08:	4413      	add	r3, r2
 8014c0a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	0a5b      	lsrs	r3, r3, #9
 8014c10:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014c12:	6a3b      	ldr	r3, [r7, #32]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d03c      	beq.n	8014c92 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014c18:	69ba      	ldr	r2, [r7, #24]
 8014c1a:	6a3b      	ldr	r3, [r7, #32]
 8014c1c:	4413      	add	r3, r2
 8014c1e:	693a      	ldr	r2, [r7, #16]
 8014c20:	8952      	ldrh	r2, [r2, #10]
 8014c22:	4293      	cmp	r3, r2
 8014c24:	d905      	bls.n	8014c32 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014c26:	693b      	ldr	r3, [r7, #16]
 8014c28:	895b      	ldrh	r3, [r3, #10]
 8014c2a:	461a      	mov	r2, r3
 8014c2c:	69bb      	ldr	r3, [r7, #24]
 8014c2e:	1ad3      	subs	r3, r2, r3
 8014c30:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	7858      	ldrb	r0, [r3, #1]
 8014c36:	6a3b      	ldr	r3, [r7, #32]
 8014c38:	697a      	ldr	r2, [r7, #20]
 8014c3a:	69f9      	ldr	r1, [r7, #28]
 8014c3c:	f7fd fe44 	bl	80128c8 <disk_write>
 8014c40:	4603      	mov	r3, r0
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d004      	beq.n	8014c50 <f_write+0x1ca>
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2201      	movs	r2, #1
 8014c4a:	755a      	strb	r2, [r3, #21]
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	e08b      	b.n	8014d68 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	6a1a      	ldr	r2, [r3, #32]
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	1ad3      	subs	r3, r2, r3
 8014c58:	6a3a      	ldr	r2, [r7, #32]
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d915      	bls.n	8014c8a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	6a1a      	ldr	r2, [r3, #32]
 8014c68:	697b      	ldr	r3, [r7, #20]
 8014c6a:	1ad3      	subs	r3, r2, r3
 8014c6c:	025b      	lsls	r3, r3, #9
 8014c6e:	69fa      	ldr	r2, [r7, #28]
 8014c70:	4413      	add	r3, r2
 8014c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014c76:	4619      	mov	r1, r3
 8014c78:	f7fd feee 	bl	8012a58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	7d1b      	ldrb	r3, [r3, #20]
 8014c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014c84:	b2da      	uxtb	r2, r3
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014c8a:	6a3b      	ldr	r3, [r7, #32]
 8014c8c:	025b      	lsls	r3, r3, #9
 8014c8e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014c90:	e03f      	b.n	8014d12 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	6a1b      	ldr	r3, [r3, #32]
 8014c96:	697a      	ldr	r2, [r7, #20]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d016      	beq.n	8014cca <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	699a      	ldr	r2, [r3, #24]
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d210      	bcs.n	8014cca <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	7858      	ldrb	r0, [r3, #1]
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	697a      	ldr	r2, [r7, #20]
 8014cb6:	f7fd fde7 	bl	8012888 <disk_read>
 8014cba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d004      	beq.n	8014cca <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2201      	movs	r2, #1
 8014cc4:	755a      	strb	r2, [r3, #21]
 8014cc6:	2301      	movs	r3, #1
 8014cc8:	e04e      	b.n	8014d68 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	697a      	ldr	r2, [r7, #20]
 8014cce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	699b      	ldr	r3, [r3, #24]
 8014cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cd8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014cdc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d901      	bls.n	8014cea <f_write+0x264>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	699b      	ldr	r3, [r3, #24]
 8014cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014cf8:	4413      	add	r3, r2
 8014cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014cfc:	69f9      	ldr	r1, [r7, #28]
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7fd feaa 	bl	8012a58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	7d1b      	ldrb	r3, [r3, #20]
 8014d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014d0c:	b2da      	uxtb	r2, r3
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014d12:	69fa      	ldr	r2, [r7, #28]
 8014d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d16:	4413      	add	r3, r2
 8014d18:	61fb      	str	r3, [r7, #28]
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	699a      	ldr	r2, [r3, #24]
 8014d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d20:	441a      	add	r2, r3
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	619a      	str	r2, [r3, #24]
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	68da      	ldr	r2, [r3, #12]
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	699b      	ldr	r3, [r3, #24]
 8014d2e:	429a      	cmp	r2, r3
 8014d30:	bf38      	it	cc
 8014d32:	461a      	movcc	r2, r3
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	60da      	str	r2, [r3, #12]
 8014d38:	683b      	ldr	r3, [r7, #0]
 8014d3a:	681a      	ldr	r2, [r3, #0]
 8014d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d3e:	441a      	add	r2, r3
 8014d40:	683b      	ldr	r3, [r7, #0]
 8014d42:	601a      	str	r2, [r3, #0]
 8014d44:	687a      	ldr	r2, [r7, #4]
 8014d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d48:	1ad3      	subs	r3, r2, r3
 8014d4a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	f47f aed4 	bne.w	8014afc <f_write+0x76>
 8014d54:	e000      	b.n	8014d58 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014d56:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	7d1b      	ldrb	r3, [r3, #20]
 8014d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d60:	b2da      	uxtb	r2, r3
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014d66:	2300      	movs	r3, #0
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3730      	adds	r7, #48	@ 0x30
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b086      	sub	sp, #24
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f107 0208 	add.w	r2, r7, #8
 8014d7e:	4611      	mov	r1, r2
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7ff fb0b 	bl	801439c <validate>
 8014d86:	4603      	mov	r3, r0
 8014d88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014d8a:	7dfb      	ldrb	r3, [r7, #23]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d168      	bne.n	8014e62 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	7d1b      	ldrb	r3, [r3, #20]
 8014d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d062      	beq.n	8014e62 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	7d1b      	ldrb	r3, [r3, #20]
 8014da0:	b25b      	sxtb	r3, r3
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	da15      	bge.n	8014dd2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	7858      	ldrb	r0, [r3, #1]
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6a1a      	ldr	r2, [r3, #32]
 8014db4:	2301      	movs	r3, #1
 8014db6:	f7fd fd87 	bl	80128c8 <disk_write>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d001      	beq.n	8014dc4 <f_sync+0x54>
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e04f      	b.n	8014e64 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	7d1b      	ldrb	r3, [r3, #20]
 8014dc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014dcc:	b2da      	uxtb	r2, r3
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014dd2:	f7fd fdb7 	bl	8012944 <get_fattime>
 8014dd6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014dd8:	68ba      	ldr	r2, [r7, #8]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dde:	4619      	mov	r1, r3
 8014de0:	4610      	mov	r0, r2
 8014de2:	f7fe f867 	bl	8012eb4 <move_window>
 8014de6:	4603      	mov	r3, r0
 8014de8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014dea:	7dfb      	ldrb	r3, [r7, #23]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d138      	bne.n	8014e62 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014df4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	330b      	adds	r3, #11
 8014dfa:	781a      	ldrb	r2, [r3, #0]
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	330b      	adds	r3, #11
 8014e00:	f042 0220 	orr.w	r2, r2, #32
 8014e04:	b2d2      	uxtb	r2, r2
 8014e06:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	6818      	ldr	r0, [r3, #0]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	689b      	ldr	r3, [r3, #8]
 8014e10:	461a      	mov	r2, r3
 8014e12:	68f9      	ldr	r1, [r7, #12]
 8014e14:	f7fe fd71 	bl	80138fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f103 021c 	add.w	r2, r3, #28
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	68db      	ldr	r3, [r3, #12]
 8014e22:	4619      	mov	r1, r3
 8014e24:	4610      	mov	r0, r2
 8014e26:	f7fd fdeb 	bl	8012a00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	3316      	adds	r3, #22
 8014e2e:	6939      	ldr	r1, [r7, #16]
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7fd fde5 	bl	8012a00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	3312      	adds	r3, #18
 8014e3a:	2100      	movs	r1, #0
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7fd fdc4 	bl	80129ca <st_word>
					fs->wflag = 1;
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	2201      	movs	r2, #1
 8014e46:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7fe f860 	bl	8012f10 <sync_fs>
 8014e50:	4603      	mov	r3, r0
 8014e52:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	7d1b      	ldrb	r3, [r3, #20]
 8014e58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014e5c:	b2da      	uxtb	r2, r3
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	3718      	adds	r7, #24
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bd80      	pop	{r7, pc}

08014e6c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b084      	sub	sp, #16
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f7ff ff7b 	bl	8014d70 <f_sync>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014e7e:	7bfb      	ldrb	r3, [r7, #15]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d118      	bne.n	8014eb6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f107 0208 	add.w	r2, r7, #8
 8014e8a:	4611      	mov	r1, r2
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f7ff fa85 	bl	801439c <validate>
 8014e92:	4603      	mov	r3, r0
 8014e94:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014e96:	7bfb      	ldrb	r3, [r7, #15]
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d10c      	bne.n	8014eb6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	691b      	ldr	r3, [r3, #16]
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7fd ff63 	bl	8012d6c <dec_lock>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014eaa:	7bfb      	ldrb	r3, [r7, #15]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d102      	bne.n	8014eb6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3710      	adds	r7, #16
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}

08014ec0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b090      	sub	sp, #64	@ 0x40
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
 8014ec8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f107 0208 	add.w	r2, r7, #8
 8014ed0:	4611      	mov	r1, r2
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f7ff fa62 	bl	801439c <validate>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014ede:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d103      	bne.n	8014eee <f_lseek+0x2e>
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	7d5b      	ldrb	r3, [r3, #21]
 8014eea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014eee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d002      	beq.n	8014efc <f_lseek+0x3c>
 8014ef6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014efa:	e1e6      	b.n	80152ca <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	f000 80d1 	beq.w	80150a8 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f0c:	d15a      	bne.n	8014fc4 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f12:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f16:	1d1a      	adds	r2, r3, #4
 8014f18:	627a      	str	r2, [r7, #36]	@ 0x24
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	617b      	str	r3, [r7, #20]
 8014f1e:	2302      	movs	r3, #2
 8014f20:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	689b      	ldr	r3, [r3, #8]
 8014f26:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8014f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d03a      	beq.n	8014fa4 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f30:	613b      	str	r3, [r7, #16]
 8014f32:	2300      	movs	r3, #0
 8014f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f38:	3302      	adds	r3, #2
 8014f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8014f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f3e:	60fb      	str	r3, [r7, #12]
 8014f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f42:	3301      	adds	r3, #1
 8014f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f7fe f86d 	bl	801302a <get_fat>
 8014f50:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f54:	2b01      	cmp	r3, #1
 8014f56:	d804      	bhi.n	8014f62 <f_lseek+0xa2>
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2202      	movs	r2, #2
 8014f5c:	755a      	strb	r2, [r3, #21]
 8014f5e:	2302      	movs	r3, #2
 8014f60:	e1b3      	b.n	80152ca <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f68:	d104      	bne.n	8014f74 <f_lseek+0xb4>
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2201      	movs	r2, #1
 8014f6e:	755a      	strb	r2, [r3, #21]
 8014f70:	2301      	movs	r3, #1
 8014f72:	e1aa      	b.n	80152ca <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	3301      	adds	r3, #1
 8014f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	d0de      	beq.n	8014f3c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014f7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	429a      	cmp	r2, r3
 8014f84:	d809      	bhi.n	8014f9a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f88:	1d1a      	adds	r2, r3, #4
 8014f8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8014f8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014f8e:	601a      	str	r2, [r3, #0]
 8014f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f92:	1d1a      	adds	r2, r3, #4
 8014f94:	627a      	str	r2, [r7, #36]	@ 0x24
 8014f96:	693a      	ldr	r2, [r7, #16]
 8014f98:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	695b      	ldr	r3, [r3, #20]
 8014f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d3c4      	bcc.n	8014f2e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014faa:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014fac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d803      	bhi.n	8014fbc <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	601a      	str	r2, [r3, #0]
 8014fba:	e184      	b.n	80152c6 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014fbc:	2311      	movs	r3, #17
 8014fbe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014fc2:	e180      	b.n	80152c6 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	68db      	ldr	r3, [r3, #12]
 8014fc8:	683a      	ldr	r2, [r7, #0]
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d902      	bls.n	8014fd4 <f_lseek+0x114>
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	68db      	ldr	r3, [r3, #12]
 8014fd2:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	683a      	ldr	r2, [r7, #0]
 8014fd8:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014fda:	683b      	ldr	r3, [r7, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	f000 8172 	beq.w	80152c6 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	3b01      	subs	r3, #1
 8014fe6:	4619      	mov	r1, r3
 8014fe8:	6878      	ldr	r0, [r7, #4]
 8014fea:	f7fe faac 	bl	8013546 <clmt_clust>
 8014fee:	4602      	mov	r2, r0
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014ff4:	68ba      	ldr	r2, [r7, #8]
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	69db      	ldr	r3, [r3, #28]
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	4610      	mov	r0, r2
 8014ffe:	f7fd fff5 	bl	8012fec <clust2sect>
 8015002:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015004:	69bb      	ldr	r3, [r7, #24]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d104      	bne.n	8015014 <f_lseek+0x154>
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	2202      	movs	r2, #2
 801500e:	755a      	strb	r2, [r3, #21]
 8015010:	2302      	movs	r3, #2
 8015012:	e15a      	b.n	80152ca <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	3b01      	subs	r3, #1
 8015018:	0a5b      	lsrs	r3, r3, #9
 801501a:	68ba      	ldr	r2, [r7, #8]
 801501c:	8952      	ldrh	r2, [r2, #10]
 801501e:	3a01      	subs	r2, #1
 8015020:	4013      	ands	r3, r2
 8015022:	69ba      	ldr	r2, [r7, #24]
 8015024:	4413      	add	r3, r2
 8015026:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	699b      	ldr	r3, [r3, #24]
 801502c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015030:	2b00      	cmp	r3, #0
 8015032:	f000 8148 	beq.w	80152c6 <f_lseek+0x406>
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6a1b      	ldr	r3, [r3, #32]
 801503a:	69ba      	ldr	r2, [r7, #24]
 801503c:	429a      	cmp	r2, r3
 801503e:	f000 8142 	beq.w	80152c6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	7d1b      	ldrb	r3, [r3, #20]
 8015046:	b25b      	sxtb	r3, r3
 8015048:	2b00      	cmp	r3, #0
 801504a:	da18      	bge.n	801507e <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801504c:	68bb      	ldr	r3, [r7, #8]
 801504e:	7858      	ldrb	r0, [r3, #1]
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6a1a      	ldr	r2, [r3, #32]
 801505a:	2301      	movs	r3, #1
 801505c:	f7fd fc34 	bl	80128c8 <disk_write>
 8015060:	4603      	mov	r3, r0
 8015062:	2b00      	cmp	r3, #0
 8015064:	d004      	beq.n	8015070 <f_lseek+0x1b0>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	2201      	movs	r2, #1
 801506a:	755a      	strb	r2, [r3, #21]
 801506c:	2301      	movs	r3, #1
 801506e:	e12c      	b.n	80152ca <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	7d1b      	ldrb	r3, [r3, #20]
 8015074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015078:	b2da      	uxtb	r2, r3
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	7858      	ldrb	r0, [r3, #1]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015088:	2301      	movs	r3, #1
 801508a:	69ba      	ldr	r2, [r7, #24]
 801508c:	f7fd fbfc 	bl	8012888 <disk_read>
 8015090:	4603      	mov	r3, r0
 8015092:	2b00      	cmp	r3, #0
 8015094:	d004      	beq.n	80150a0 <f_lseek+0x1e0>
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	2201      	movs	r2, #1
 801509a:	755a      	strb	r2, [r3, #21]
 801509c:	2301      	movs	r3, #1
 801509e:	e114      	b.n	80152ca <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	69ba      	ldr	r2, [r7, #24]
 80150a4:	621a      	str	r2, [r3, #32]
 80150a6:	e10e      	b.n	80152c6 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	683a      	ldr	r2, [r7, #0]
 80150ae:	429a      	cmp	r2, r3
 80150b0:	d908      	bls.n	80150c4 <f_lseek+0x204>
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	7d1b      	ldrb	r3, [r3, #20]
 80150b6:	f003 0302 	and.w	r3, r3, #2
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d102      	bne.n	80150c4 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	68db      	ldr	r3, [r3, #12]
 80150c2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	699b      	ldr	r3, [r3, #24]
 80150c8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80150ca:	2300      	movs	r3, #0
 80150cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80150d2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80150d4:	683b      	ldr	r3, [r7, #0]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	f000 80a7 	beq.w	801522a <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	895b      	ldrh	r3, [r3, #10]
 80150e0:	025b      	lsls	r3, r3, #9
 80150e2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80150e4:	6a3b      	ldr	r3, [r7, #32]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d01b      	beq.n	8015122 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	1e5a      	subs	r2, r3, #1
 80150ee:	69fb      	ldr	r3, [r7, #28]
 80150f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80150f4:	6a3b      	ldr	r3, [r7, #32]
 80150f6:	1e59      	subs	r1, r3, #1
 80150f8:	69fb      	ldr	r3, [r7, #28]
 80150fa:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80150fe:	429a      	cmp	r2, r3
 8015100:	d30f      	bcc.n	8015122 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015102:	6a3b      	ldr	r3, [r7, #32]
 8015104:	1e5a      	subs	r2, r3, #1
 8015106:	69fb      	ldr	r3, [r7, #28]
 8015108:	425b      	negs	r3, r3
 801510a:	401a      	ands	r2, r3
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	699b      	ldr	r3, [r3, #24]
 8015114:	683a      	ldr	r2, [r7, #0]
 8015116:	1ad3      	subs	r3, r2, r3
 8015118:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	69db      	ldr	r3, [r3, #28]
 801511e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015120:	e022      	b.n	8015168 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	689b      	ldr	r3, [r3, #8]
 8015126:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801512a:	2b00      	cmp	r3, #0
 801512c:	d119      	bne.n	8015162 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	2100      	movs	r1, #0
 8015132:	4618      	mov	r0, r3
 8015134:	f7fe f96f 	bl	8013416 <create_chain>
 8015138:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801513c:	2b01      	cmp	r3, #1
 801513e:	d104      	bne.n	801514a <f_lseek+0x28a>
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2202      	movs	r2, #2
 8015144:	755a      	strb	r2, [r3, #21]
 8015146:	2302      	movs	r3, #2
 8015148:	e0bf      	b.n	80152ca <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801514a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015150:	d104      	bne.n	801515c <f_lseek+0x29c>
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2201      	movs	r2, #1
 8015156:	755a      	strb	r2, [r3, #21]
 8015158:	2301      	movs	r3, #1
 801515a:	e0b6      	b.n	80152ca <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015160:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015166:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8015168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801516a:	2b00      	cmp	r3, #0
 801516c:	d05d      	beq.n	801522a <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801516e:	e03a      	b.n	80151e6 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8015170:	683a      	ldr	r2, [r7, #0]
 8015172:	69fb      	ldr	r3, [r7, #28]
 8015174:	1ad3      	subs	r3, r2, r3
 8015176:	603b      	str	r3, [r7, #0]
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	699a      	ldr	r2, [r3, #24]
 801517c:	69fb      	ldr	r3, [r7, #28]
 801517e:	441a      	add	r2, r3
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	7d1b      	ldrb	r3, [r3, #20]
 8015188:	f003 0302 	and.w	r3, r3, #2
 801518c:	2b00      	cmp	r3, #0
 801518e:	d00b      	beq.n	80151a8 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015194:	4618      	mov	r0, r3
 8015196:	f7fe f93e 	bl	8013416 <create_chain>
 801519a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801519c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d108      	bne.n	80151b4 <f_lseek+0x2f4>
							ofs = 0; break;
 80151a2:	2300      	movs	r3, #0
 80151a4:	603b      	str	r3, [r7, #0]
 80151a6:	e022      	b.n	80151ee <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80151ac:	4618      	mov	r0, r3
 80151ae:	f7fd ff3c 	bl	801302a <get_fat>
 80151b2:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80151b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ba:	d104      	bne.n	80151c6 <f_lseek+0x306>
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2201      	movs	r2, #1
 80151c0:	755a      	strb	r2, [r3, #21]
 80151c2:	2301      	movs	r3, #1
 80151c4:	e081      	b.n	80152ca <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80151c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151c8:	2b01      	cmp	r3, #1
 80151ca:	d904      	bls.n	80151d6 <f_lseek+0x316>
 80151cc:	68bb      	ldr	r3, [r7, #8]
 80151ce:	695b      	ldr	r3, [r3, #20]
 80151d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d304      	bcc.n	80151e0 <f_lseek+0x320>
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2202      	movs	r2, #2
 80151da:	755a      	strb	r2, [r3, #21]
 80151dc:	2302      	movs	r3, #2
 80151de:	e074      	b.n	80152ca <f_lseek+0x40a>
					fp->clust = clst;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80151e4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80151e6:	683a      	ldr	r2, [r7, #0]
 80151e8:	69fb      	ldr	r3, [r7, #28]
 80151ea:	429a      	cmp	r2, r3
 80151ec:	d8c0      	bhi.n	8015170 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	699a      	ldr	r2, [r3, #24]
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	441a      	add	r2, r3
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015200:	2b00      	cmp	r3, #0
 8015202:	d012      	beq.n	801522a <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015208:	4618      	mov	r0, r3
 801520a:	f7fd feef 	bl	8012fec <clust2sect>
 801520e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015212:	2b00      	cmp	r3, #0
 8015214:	d104      	bne.n	8015220 <f_lseek+0x360>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	2202      	movs	r2, #2
 801521a:	755a      	strb	r2, [r3, #21]
 801521c:	2302      	movs	r3, #2
 801521e:	e054      	b.n	80152ca <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8015220:	683b      	ldr	r3, [r7, #0]
 8015222:	0a5b      	lsrs	r3, r3, #9
 8015224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015226:	4413      	add	r3, r2
 8015228:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	699a      	ldr	r2, [r3, #24]
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	68db      	ldr	r3, [r3, #12]
 8015232:	429a      	cmp	r2, r3
 8015234:	d90a      	bls.n	801524c <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	699a      	ldr	r2, [r3, #24]
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	7d1b      	ldrb	r3, [r3, #20]
 8015242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015246:	b2da      	uxtb	r2, r3
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	699b      	ldr	r3, [r3, #24]
 8015250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015254:	2b00      	cmp	r3, #0
 8015256:	d036      	beq.n	80152c6 <f_lseek+0x406>
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6a1b      	ldr	r3, [r3, #32]
 801525c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801525e:	429a      	cmp	r2, r3
 8015260:	d031      	beq.n	80152c6 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	7d1b      	ldrb	r3, [r3, #20]
 8015266:	b25b      	sxtb	r3, r3
 8015268:	2b00      	cmp	r3, #0
 801526a:	da18      	bge.n	801529e <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801526c:	68bb      	ldr	r3, [r7, #8]
 801526e:	7858      	ldrb	r0, [r3, #1]
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6a1a      	ldr	r2, [r3, #32]
 801527a:	2301      	movs	r3, #1
 801527c:	f7fd fb24 	bl	80128c8 <disk_write>
 8015280:	4603      	mov	r3, r0
 8015282:	2b00      	cmp	r3, #0
 8015284:	d004      	beq.n	8015290 <f_lseek+0x3d0>
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	2201      	movs	r2, #1
 801528a:	755a      	strb	r2, [r3, #21]
 801528c:	2301      	movs	r3, #1
 801528e:	e01c      	b.n	80152ca <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	7d1b      	ldrb	r3, [r3, #20]
 8015294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015298:	b2da      	uxtb	r2, r3
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	7858      	ldrb	r0, [r3, #1]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80152a8:	2301      	movs	r3, #1
 80152aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80152ac:	f7fd faec 	bl	8012888 <disk_read>
 80152b0:	4603      	mov	r3, r0
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d004      	beq.n	80152c0 <f_lseek+0x400>
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2201      	movs	r2, #1
 80152ba:	755a      	strb	r2, [r3, #21]
 80152bc:	2301      	movs	r3, #1
 80152be:	e004      	b.n	80152ca <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80152c4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80152c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3740      	adds	r7, #64	@ 0x40
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}

080152d2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	b086      	sub	sp, #24
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	6078      	str	r0, [r7, #4]
 80152da:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d101      	bne.n	80152e6 <f_opendir+0x14>
 80152e2:	2309      	movs	r3, #9
 80152e4:	e064      	b.n	80153b0 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80152ea:	f107 010c 	add.w	r1, r7, #12
 80152ee:	463b      	mov	r3, r7
 80152f0:	2200      	movs	r2, #0
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7fe fe06 	bl	8013f04 <find_volume>
 80152f8:	4603      	mov	r3, r0
 80152fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80152fc:	7dfb      	ldrb	r3, [r7, #23]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d14f      	bne.n	80153a2 <f_opendir+0xd0>
		obj->fs = fs;
 8015302:	68fa      	ldr	r2, [r7, #12]
 8015304:	693b      	ldr	r3, [r7, #16]
 8015306:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015308:	683b      	ldr	r3, [r7, #0]
 801530a:	4619      	mov	r1, r3
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f7fe fced 	bl	8013cec <follow_path>
 8015312:	4603      	mov	r3, r0
 8015314:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015316:	7dfb      	ldrb	r3, [r7, #23]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d13d      	bne.n	8015398 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8015322:	b25b      	sxtb	r3, r3
 8015324:	2b00      	cmp	r3, #0
 8015326:	db12      	blt.n	801534e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015328:	693b      	ldr	r3, [r7, #16]
 801532a:	799b      	ldrb	r3, [r3, #6]
 801532c:	f003 0310 	and.w	r3, r3, #16
 8015330:	2b00      	cmp	r3, #0
 8015332:	d00a      	beq.n	801534a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015334:	68fa      	ldr	r2, [r7, #12]
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	6a1b      	ldr	r3, [r3, #32]
 801533a:	4619      	mov	r1, r3
 801533c:	4610      	mov	r0, r2
 801533e:	f7fe fabd 	bl	80138bc <ld_clust>
 8015342:	4602      	mov	r2, r0
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	609a      	str	r2, [r3, #8]
 8015348:	e001      	b.n	801534e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801534a:	2305      	movs	r3, #5
 801534c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801534e:	7dfb      	ldrb	r3, [r7, #23]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d121      	bne.n	8015398 <f_opendir+0xc6>
				obj->id = fs->id;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	88da      	ldrh	r2, [r3, #6]
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801535c:	2100      	movs	r1, #0
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f7fe f925 	bl	80135ae <dir_sdi>
 8015364:	4603      	mov	r3, r0
 8015366:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015368:	7dfb      	ldrb	r3, [r7, #23]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d114      	bne.n	8015398 <f_opendir+0xc6>
					if (obj->sclust) {
 801536e:	693b      	ldr	r3, [r7, #16]
 8015370:	689b      	ldr	r3, [r3, #8]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d00d      	beq.n	8015392 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015376:	2100      	movs	r1, #0
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f7fd fc69 	bl	8012c50 <inc_lock>
 801537e:	4602      	mov	r2, r0
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	691b      	ldr	r3, [r3, #16]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d105      	bne.n	8015398 <f_opendir+0xc6>
 801538c:	2312      	movs	r3, #18
 801538e:	75fb      	strb	r3, [r7, #23]
 8015390:	e002      	b.n	8015398 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	2200      	movs	r2, #0
 8015396:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015398:	7dfb      	ldrb	r3, [r7, #23]
 801539a:	2b04      	cmp	r3, #4
 801539c:	d101      	bne.n	80153a2 <f_opendir+0xd0>
 801539e:	2305      	movs	r3, #5
 80153a0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80153a2:	7dfb      	ldrb	r3, [r7, #23]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d002      	beq.n	80153ae <f_opendir+0xdc>
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	2200      	movs	r2, #0
 80153ac:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80153ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80153b0:	4618      	mov	r0, r3
 80153b2:	3718      	adds	r7, #24
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}

080153b8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	f107 0208 	add.w	r2, r7, #8
 80153c6:	4611      	mov	r1, r2
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7fe ffe7 	bl	801439c <validate>
 80153ce:	4603      	mov	r3, r0
 80153d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80153d2:	7bfb      	ldrb	r3, [r7, #15]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d110      	bne.n	80153fa <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	691b      	ldr	r3, [r3, #16]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d006      	beq.n	80153ee <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	691b      	ldr	r3, [r3, #16]
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7fd fcc1 	bl	8012d6c <dec_lock>
 80153ea:	4603      	mov	r3, r0
 80153ec:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80153ee:	7bfb      	ldrb	r3, [r7, #15]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d102      	bne.n	80153fa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2200      	movs	r2, #0
 80153f8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80153fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80153fc:	4618      	mov	r0, r3
 80153fe:	3710      	adds	r7, #16
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}

08015404 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015404:	b580      	push	{r7, lr}
 8015406:	b084      	sub	sp, #16
 8015408:	af00      	add	r7, sp, #0
 801540a:	6078      	str	r0, [r7, #4]
 801540c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f107 0208 	add.w	r2, r7, #8
 8015414:	4611      	mov	r1, r2
 8015416:	4618      	mov	r0, r3
 8015418:	f7fe ffc0 	bl	801439c <validate>
 801541c:	4603      	mov	r3, r0
 801541e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015420:	7bfb      	ldrb	r3, [r7, #15]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d126      	bne.n	8015474 <f_readdir+0x70>
		if (!fno) {
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d106      	bne.n	801543a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801542c:	2100      	movs	r1, #0
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f7fe f8bd 	bl	80135ae <dir_sdi>
 8015434:	4603      	mov	r3, r0
 8015436:	73fb      	strb	r3, [r7, #15]
 8015438:	e01c      	b.n	8015474 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801543a:	2100      	movs	r1, #0
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f7fe fa7c 	bl	801393a <dir_read>
 8015442:	4603      	mov	r3, r0
 8015444:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015446:	7bfb      	ldrb	r3, [r7, #15]
 8015448:	2b04      	cmp	r3, #4
 801544a:	d101      	bne.n	8015450 <f_readdir+0x4c>
 801544c:	2300      	movs	r3, #0
 801544e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015450:	7bfb      	ldrb	r3, [r7, #15]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d10e      	bne.n	8015474 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015456:	6839      	ldr	r1, [r7, #0]
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f7fe fb52 	bl	8013b02 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801545e:	2100      	movs	r1, #0
 8015460:	6878      	ldr	r0, [r7, #4]
 8015462:	f7fe f91f 	bl	80136a4 <dir_next>
 8015466:	4603      	mov	r3, r0
 8015468:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801546a:	7bfb      	ldrb	r3, [r7, #15]
 801546c:	2b04      	cmp	r3, #4
 801546e:	d101      	bne.n	8015474 <f_readdir+0x70>
 8015470:	2300      	movs	r3, #0
 8015472:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015474:	7bfb      	ldrb	r3, [r7, #15]
}
 8015476:	4618      	mov	r0, r3
 8015478:	3710      	adds	r7, #16
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
	...

08015480 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015480:	b480      	push	{r7}
 8015482:	b087      	sub	sp, #28
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	4613      	mov	r3, r2
 801548c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801548e:	2301      	movs	r3, #1
 8015490:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015492:	2300      	movs	r3, #0
 8015494:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015496:	4b1f      	ldr	r3, [pc, #124]	@ (8015514 <FATFS_LinkDriverEx+0x94>)
 8015498:	7b9b      	ldrb	r3, [r3, #14]
 801549a:	b2db      	uxtb	r3, r3
 801549c:	2b01      	cmp	r3, #1
 801549e:	d831      	bhi.n	8015504 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80154a0:	4b1c      	ldr	r3, [pc, #112]	@ (8015514 <FATFS_LinkDriverEx+0x94>)
 80154a2:	7b9b      	ldrb	r3, [r3, #14]
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	461a      	mov	r2, r3
 80154a8:	4b1a      	ldr	r3, [pc, #104]	@ (8015514 <FATFS_LinkDriverEx+0x94>)
 80154aa:	2100      	movs	r1, #0
 80154ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80154ae:	4b19      	ldr	r3, [pc, #100]	@ (8015514 <FATFS_LinkDriverEx+0x94>)
 80154b0:	7b9b      	ldrb	r3, [r3, #14]
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	4a17      	ldr	r2, [pc, #92]	@ (8015514 <FATFS_LinkDriverEx+0x94>)
 80154b6:	009b      	lsls	r3, r3, #2
 80154b8:	4413      	add	r3, r2
 80154ba:	68fa      	ldr	r2, [r7, #12]
 80154bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80154be:	4b15      	ldr	r3, [pc, #84]	@ (8015514 <FATFS_LinkDriverEx+0x94>)
 80154c0:	7b9b      	ldrb	r3, [r3, #14]
 80154c2:	b2db      	uxtb	r3, r3
 80154c4:	461a      	mov	r2, r3
 80154c6:	4b13      	ldr	r3, [pc, #76]	@ (8015514 <FATFS_LinkDriverEx+0x94>)
 80154c8:	4413      	add	r3, r2
 80154ca:	79fa      	ldrb	r2, [r7, #7]
 80154cc:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 80154ce:	4b11      	ldr	r3, [pc, #68]	@ (8015514 <FATFS_LinkDriverEx+0x94>)
 80154d0:	7b9b      	ldrb	r3, [r3, #14]
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	1c5a      	adds	r2, r3, #1
 80154d6:	b2d1      	uxtb	r1, r2
 80154d8:	4a0e      	ldr	r2, [pc, #56]	@ (8015514 <FATFS_LinkDriverEx+0x94>)
 80154da:	7391      	strb	r1, [r2, #14]
 80154dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80154de:	7dbb      	ldrb	r3, [r7, #22]
 80154e0:	3330      	adds	r3, #48	@ 0x30
 80154e2:	b2da      	uxtb	r2, r3
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	3301      	adds	r3, #1
 80154ec:	223a      	movs	r2, #58	@ 0x3a
 80154ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	3302      	adds	r3, #2
 80154f4:	222f      	movs	r2, #47	@ 0x2f
 80154f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80154f8:	68bb      	ldr	r3, [r7, #8]
 80154fa:	3303      	adds	r3, #3
 80154fc:	2200      	movs	r2, #0
 80154fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015500:	2300      	movs	r3, #0
 8015502:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015504:	7dfb      	ldrb	r3, [r7, #23]
}
 8015506:	4618      	mov	r0, r3
 8015508:	371c      	adds	r7, #28
 801550a:	46bd      	mov	sp, r7
 801550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015510:	4770      	bx	lr
 8015512:	bf00      	nop
 8015514:	200089dc 	.word	0x200089dc

08015518 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
 8015520:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015522:	2200      	movs	r2, #0
 8015524:	6839      	ldr	r1, [r7, #0]
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f7ff ffaa 	bl	8015480 <FATFS_LinkDriverEx>
 801552c:	4603      	mov	r3, r0
}
 801552e:	4618      	mov	r0, r3
 8015530:	3708      	adds	r7, #8
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}

08015536 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8015536:	b590      	push	{r4, r7, lr}
 8015538:	b089      	sub	sp, #36	@ 0x24
 801553a:	af04      	add	r7, sp, #16
 801553c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8015544:	7919      	ldrb	r1, [r3, #4]
 8015546:	2350      	movs	r3, #80	@ 0x50
 8015548:	2206      	movs	r2, #6
 801554a:	6878      	ldr	r0, [r7, #4]
 801554c:	f001 feae 	bl	80172ac <USBH_FindInterface>
 8015550:	4603      	mov	r3, r0
 8015552:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8015554:	7bfb      	ldrb	r3, [r7, #15]
 8015556:	2bff      	cmp	r3, #255	@ 0xff
 8015558:	d002      	beq.n	8015560 <USBH_MSC_InterfaceInit+0x2a>
 801555a:	7bfb      	ldrb	r3, [r7, #15]
 801555c:	2b01      	cmp	r3, #1
 801555e:	d901      	bls.n	8015564 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8015560:	2302      	movs	r3, #2
 8015562:	e106      	b.n	8015772 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8015564:	7bfb      	ldrb	r3, [r7, #15]
 8015566:	4619      	mov	r1, r3
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f001 fe37 	bl	80171dc <USBH_SelectInterface>
 801556e:	4603      	mov	r3, r0
 8015570:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8015572:	7bbb      	ldrb	r3, [r7, #14]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d001      	beq.n	801557c <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8015578:	2302      	movs	r3, #2
 801557a:	e0fa      	b.n	8015772 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	f8d3 447c 	ldr.w	r4, [r3, #1148]	@ 0x47c
 8015582:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8015586:	f005 fcff 	bl	801af88 <malloc>
 801558a:	4603      	mov	r3, r0
 801558c:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8015594:	69db      	ldr	r3, [r3, #28]
 8015596:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d101      	bne.n	80155a2 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 801559e:	2302      	movs	r3, #2
 80155a0:	e0e7      	b.n	8015772 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80155a2:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80155a6:	2100      	movs	r1, #0
 80155a8:	68b8      	ldr	r0, [r7, #8]
 80155aa:	f005 ffdd 	bl	801b568 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80155ae:	7bfb      	ldrb	r3, [r7, #15]
 80155b0:	687a      	ldr	r2, [r7, #4]
 80155b2:	211a      	movs	r1, #26
 80155b4:	fb01 f303 	mul.w	r3, r1, r3
 80155b8:	4413      	add	r3, r2
 80155ba:	f203 434e 	addw	r3, r3, #1102	@ 0x44e
 80155be:	781b      	ldrb	r3, [r3, #0]
 80155c0:	b25b      	sxtb	r3, r3
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	da16      	bge.n	80155f4 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80155c6:	7bfb      	ldrb	r3, [r7, #15]
 80155c8:	687a      	ldr	r2, [r7, #4]
 80155ca:	211a      	movs	r1, #26
 80155cc:	fb01 f303 	mul.w	r3, r1, r3
 80155d0:	4413      	add	r3, r2
 80155d2:	f203 434e 	addw	r3, r3, #1102	@ 0x44e
 80155d6:	781a      	ldrb	r2, [r3, #0]
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80155dc:	7bfb      	ldrb	r3, [r7, #15]
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	211a      	movs	r1, #26
 80155e2:	fb01 f303 	mul.w	r3, r1, r3
 80155e6:	4413      	add	r3, r2
 80155e8:	f503 638a 	add.w	r3, r3, #1104	@ 0x450
 80155ec:	881a      	ldrh	r2, [r3, #0]
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	815a      	strh	r2, [r3, #10]
 80155f2:	e015      	b.n	8015620 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80155f4:	7bfb      	ldrb	r3, [r7, #15]
 80155f6:	687a      	ldr	r2, [r7, #4]
 80155f8:	211a      	movs	r1, #26
 80155fa:	fb01 f303 	mul.w	r3, r1, r3
 80155fe:	4413      	add	r3, r2
 8015600:	f203 434e 	addw	r3, r3, #1102	@ 0x44e
 8015604:	781a      	ldrb	r2, [r3, #0]
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 801560a:	7bfb      	ldrb	r3, [r7, #15]
 801560c:	687a      	ldr	r2, [r7, #4]
 801560e:	211a      	movs	r1, #26
 8015610:	fb01 f303 	mul.w	r3, r1, r3
 8015614:	4413      	add	r3, r2
 8015616:	f503 638a 	add.w	r3, r3, #1104	@ 0x450
 801561a:	881a      	ldrh	r2, [r3, #0]
 801561c:	68bb      	ldr	r3, [r7, #8]
 801561e:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8015620:	7bfb      	ldrb	r3, [r7, #15]
 8015622:	687a      	ldr	r2, [r7, #4]
 8015624:	211a      	movs	r1, #26
 8015626:	fb01 f303 	mul.w	r3, r1, r3
 801562a:	4413      	add	r3, r2
 801562c:	f203 4356 	addw	r3, r3, #1110	@ 0x456
 8015630:	781b      	ldrb	r3, [r3, #0]
 8015632:	b25b      	sxtb	r3, r3
 8015634:	2b00      	cmp	r3, #0
 8015636:	da16      	bge.n	8015666 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8015638:	7bfb      	ldrb	r3, [r7, #15]
 801563a:	687a      	ldr	r2, [r7, #4]
 801563c:	211a      	movs	r1, #26
 801563e:	fb01 f303 	mul.w	r3, r1, r3
 8015642:	4413      	add	r3, r2
 8015644:	f203 4356 	addw	r3, r3, #1110	@ 0x456
 8015648:	781a      	ldrb	r2, [r3, #0]
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801564e:	7bfb      	ldrb	r3, [r7, #15]
 8015650:	687a      	ldr	r2, [r7, #4]
 8015652:	211a      	movs	r1, #26
 8015654:	fb01 f303 	mul.w	r3, r1, r3
 8015658:	4413      	add	r3, r2
 801565a:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 801565e:	881a      	ldrh	r2, [r3, #0]
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	815a      	strh	r2, [r3, #10]
 8015664:	e015      	b.n	8015692 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8015666:	7bfb      	ldrb	r3, [r7, #15]
 8015668:	687a      	ldr	r2, [r7, #4]
 801566a:	211a      	movs	r1, #26
 801566c:	fb01 f303 	mul.w	r3, r1, r3
 8015670:	4413      	add	r3, r2
 8015672:	f203 4356 	addw	r3, r3, #1110	@ 0x456
 8015676:	781a      	ldrb	r2, [r3, #0]
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 801567c:	7bfb      	ldrb	r3, [r7, #15]
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	211a      	movs	r1, #26
 8015682:	fb01 f303 	mul.w	r3, r1, r3
 8015686:	4413      	add	r3, r2
 8015688:	f503 638b 	add.w	r3, r3, #1112	@ 0x458
 801568c:	881a      	ldrh	r2, [r3, #0]
 801568e:	68bb      	ldr	r3, [r7, #8]
 8015690:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	2200      	movs	r2, #0
 8015696:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	2200      	movs	r2, #0
 801569c:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	2200      	movs	r2, #0
 80156a2:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	799b      	ldrb	r3, [r3, #6]
 80156a8:	4619      	mov	r1, r3
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f003 fb17 	bl	8018cde <USBH_AllocPipe>
 80156b0:	4603      	mov	r3, r0
 80156b2:	461a      	mov	r2, r3
 80156b4:	68bb      	ldr	r3, [r7, #8]
 80156b6:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80156b8:	68bb      	ldr	r3, [r7, #8]
 80156ba:	79db      	ldrb	r3, [r3, #7]
 80156bc:	4619      	mov	r1, r3
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f003 fb0d 	bl	8018cde <USBH_AllocPipe>
 80156c4:	4603      	mov	r3, r0
 80156c6:	461a      	mov	r2, r3
 80156c8:	68bb      	ldr	r3, [r7, #8]
 80156ca:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	f000 ff5d 	bl	801658c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	799b      	ldrb	r3, [r3, #6]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d01e      	beq.n	8015718 <USBH_MSC_InterfaceInit+0x1e2>
 80156da:	68bb      	ldr	r3, [r7, #8]
 80156dc:	891b      	ldrh	r3, [r3, #8]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d01a      	beq.n	8015718 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80156e2:	68bb      	ldr	r3, [r7, #8]
 80156e4:	7959      	ldrb	r1, [r3, #5]
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	7998      	ldrb	r0, [r3, #6]
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	f893 441c 	ldrb.w	r4, [r3, #1052]	@ 0x41c
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 80156f6:	68ba      	ldr	r2, [r7, #8]
 80156f8:	8912      	ldrh	r2, [r2, #8]
 80156fa:	9202      	str	r2, [sp, #8]
 80156fc:	2202      	movs	r2, #2
 80156fe:	9201      	str	r2, [sp, #4]
 8015700:	9300      	str	r3, [sp, #0]
 8015702:	4623      	mov	r3, r4
 8015704:	4602      	mov	r2, r0
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f003 faba 	bl	8018c80 <USBH_OpenPipe>
 801570c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	79db      	ldrb	r3, [r3, #7]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d02c      	beq.n	8015770 <USBH_MSC_InterfaceInit+0x23a>
 8015716:	e001      	b.n	801571c <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8015718:	2303      	movs	r3, #3
 801571a:	e02a      	b.n	8015772 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	895b      	ldrh	r3, [r3, #10]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d025      	beq.n	8015770 <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	7919      	ldrb	r1, [r3, #4]
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	79d8      	ldrb	r0, [r3, #7]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f893 441c 	ldrb.w	r4, [r3, #1052]	@ 0x41c
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8015738:	68ba      	ldr	r2, [r7, #8]
 801573a:	8952      	ldrh	r2, [r2, #10]
 801573c:	9202      	str	r2, [sp, #8]
 801573e:	2202      	movs	r2, #2
 8015740:	9201      	str	r2, [sp, #4]
 8015742:	9300      	str	r3, [sp, #0]
 8015744:	4623      	mov	r3, r4
 8015746:	4602      	mov	r2, r0
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f003 fa99 	bl	8018c80 <USBH_OpenPipe>
 801574e:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8015750:	68bb      	ldr	r3, [r7, #8]
 8015752:	791b      	ldrb	r3, [r3, #4]
 8015754:	2200      	movs	r2, #0
 8015756:	4619      	mov	r1, r3
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f7ec f8d7 	bl	800190c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	795b      	ldrb	r3, [r3, #5]
 8015762:	2200      	movs	r2, #0
 8015764:	4619      	mov	r1, r3
 8015766:	6878      	ldr	r0, [r7, #4]
 8015768:	f7ec f8d0 	bl	800190c <USBH_LL_SetToggle>

  return USBH_OK;
 801576c:	2300      	movs	r3, #0
 801576e:	e000      	b.n	8015772 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8015770:	2303      	movs	r3, #3
}
 8015772:	4618      	mov	r0, r3
 8015774:	3714      	adds	r7, #20
 8015776:	46bd      	mov	sp, r7
 8015778:	bd90      	pop	{r4, r7, pc}

0801577a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 801577a:	b580      	push	{r7, lr}
 801577c:	b084      	sub	sp, #16
 801577e:	af00      	add	r7, sp, #0
 8015780:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8015788:	69db      	ldr	r3, [r3, #28]
 801578a:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	795b      	ldrb	r3, [r3, #5]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d00e      	beq.n	80157b2 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	795b      	ldrb	r3, [r3, #5]
 8015798:	4619      	mov	r1, r3
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f003 fa8f 	bl	8018cbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	795b      	ldrb	r3, [r3, #5]
 80157a4:	4619      	mov	r1, r3
 80157a6:	6878      	ldr	r0, [r7, #4]
 80157a8:	f003 fabb 	bl	8018d22 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	2200      	movs	r2, #0
 80157b0:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	791b      	ldrb	r3, [r3, #4]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d00e      	beq.n	80157d8 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	791b      	ldrb	r3, [r3, #4]
 80157be:	4619      	mov	r1, r3
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f003 fa7c 	bl	8018cbe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	791b      	ldrb	r3, [r3, #4]
 80157ca:	4619      	mov	r1, r3
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	f003 faa8 	bl	8018d22 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	2200      	movs	r2, #0
 80157d6:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80157de:	69db      	ldr	r3, [r3, #28]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d00b      	beq.n	80157fc <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80157ea:	69db      	ldr	r3, [r3, #28]
 80157ec:	4618      	mov	r0, r3
 80157ee:	f005 fbd3 	bl	801af98 <free>
    phost->pActiveClass->pData = 0U;
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80157f8:	2200      	movs	r2, #0
 80157fa:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80157fc:	2300      	movs	r3, #0
}
 80157fe:	4618      	mov	r0, r3
 8015800:	3710      	adds	r7, #16
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}
	...

08015808 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b084      	sub	sp, #16
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8015816:	69db      	ldr	r3, [r3, #28]
 8015818:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 801581a:	2301      	movs	r3, #1
 801581c:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	7b9b      	ldrb	r3, [r3, #14]
 8015822:	2b03      	cmp	r3, #3
 8015824:	d04a      	beq.n	80158bc <USBH_MSC_ClassRequest+0xb4>
 8015826:	2b03      	cmp	r3, #3
 8015828:	dc54      	bgt.n	80158d4 <USBH_MSC_ClassRequest+0xcc>
 801582a:	2b00      	cmp	r3, #0
 801582c:	d001      	beq.n	8015832 <USBH_MSC_ClassRequest+0x2a>
 801582e:	2b02      	cmp	r3, #2
 8015830:	d150      	bne.n	80158d4 <USBH_MSC_ClassRequest+0xcc>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8015832:	68bb      	ldr	r3, [r7, #8]
 8015834:	4619      	mov	r1, r3
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	f000 fe89 	bl	801654e <USBH_MSC_BOT_REQ_GetMaxLUN>
 801583c:	4603      	mov	r3, r0
 801583e:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8015840:	7bfb      	ldrb	r3, [r7, #15]
 8015842:	2b03      	cmp	r3, #3
 8015844:	d104      	bne.n	8015850 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8015846:	68bb      	ldr	r3, [r7, #8]
 8015848:	2200      	movs	r2, #0
 801584a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 801584c:	2300      	movs	r3, #0
 801584e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8015850:	7bfb      	ldrb	r3, [r7, #15]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d140      	bne.n	80158d8 <USBH_MSC_ClassRequest+0xd0>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	781b      	ldrb	r3, [r3, #0]
 801585a:	2b02      	cmp	r3, #2
 801585c:	d804      	bhi.n	8015868 <USBH_MSC_ClassRequest+0x60>
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	781b      	ldrb	r3, [r3, #0]
 8015862:	3301      	adds	r3, #1
 8015864:	b2da      	uxtb	r2, r3
 8015866:	e000      	b.n	801586a <USBH_MSC_ClassRequest+0x62>
 8015868:	2202      	movs	r2, #2
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	4619      	mov	r1, r3
 8015874:	481c      	ldr	r0, [pc, #112]	@ (80158e8 <USBH_MSC_ClassRequest+0xe0>)
 8015876:	f005 fd07 	bl	801b288 <iprintf>
 801587a:	200a      	movs	r0, #10
 801587c:	f005 fd16 	bl	801b2ac <putchar>

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8015880:	2300      	movs	r3, #0
 8015882:	73bb      	strb	r3, [r7, #14]
 8015884:	e014      	b.n	80158b0 <USBH_MSC_ClassRequest+0xa8>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8015886:	7bbb      	ldrb	r3, [r7, #14]
 8015888:	68ba      	ldr	r2, [r7, #8]
 801588a:	2134      	movs	r1, #52	@ 0x34
 801588c:	fb01 f303 	mul.w	r3, r1, r3
 8015890:	4413      	add	r3, r2
 8015892:	3392      	adds	r3, #146	@ 0x92
 8015894:	2202      	movs	r2, #2
 8015896:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8015898:	7bbb      	ldrb	r3, [r7, #14]
 801589a:	68ba      	ldr	r2, [r7, #8]
 801589c:	2134      	movs	r1, #52	@ 0x34
 801589e:	fb01 f303 	mul.w	r3, r1, r3
 80158a2:	4413      	add	r3, r2
 80158a4:	33c1      	adds	r3, #193	@ 0xc1
 80158a6:	2200      	movs	r2, #0
 80158a8:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 80158aa:	7bbb      	ldrb	r3, [r7, #14]
 80158ac:	3301      	adds	r3, #1
 80158ae:	73bb      	strb	r3, [r7, #14]
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	781b      	ldrb	r3, [r3, #0]
 80158b4:	7bba      	ldrb	r2, [r7, #14]
 80158b6:	429a      	cmp	r2, r3
 80158b8:	d3e5      	bcc.n	8015886 <USBH_MSC_ClassRequest+0x7e>
        }
      }
      break;
 80158ba:	e00d      	b.n	80158d8 <USBH_MSC_ClassRequest+0xd0>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80158bc:	2100      	movs	r1, #0
 80158be:	6878      	ldr	r0, [r7, #4]
 80158c0:	f002 fc4a 	bl	8018158 <USBH_ClrFeature>
 80158c4:	4603      	mov	r3, r0
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d108      	bne.n	80158dc <USBH_MSC_ClassRequest+0xd4>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	7bda      	ldrb	r2, [r3, #15]
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	739a      	strb	r2, [r3, #14]
      }
      break;
 80158d2:	e003      	b.n	80158dc <USBH_MSC_ClassRequest+0xd4>

    default:
      break;
 80158d4:	bf00      	nop
 80158d6:	e002      	b.n	80158de <USBH_MSC_ClassRequest+0xd6>
      break;
 80158d8:	bf00      	nop
 80158da:	e000      	b.n	80158de <USBH_MSC_ClassRequest+0xd6>
      break;
 80158dc:	bf00      	nop
  }

  return status;
 80158de:	7bfb      	ldrb	r3, [r7, #15]
}
 80158e0:	4618      	mov	r0, r3
 80158e2:	3710      	adds	r7, #16
 80158e4:	46bd      	mov	sp, r7
 80158e6:	bd80      	pop	{r7, pc}
 80158e8:	0801d0c0 	.word	0x0801d0c0

080158ec <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b086      	sub	sp, #24
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80158fa:	69db      	ldr	r3, [r3, #28]
 80158fc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80158fe:	2301      	movs	r3, #1
 8015900:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8015902:	2301      	movs	r3, #1
 8015904:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8015906:	2301      	movs	r3, #1
 8015908:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 801590a:	693b      	ldr	r3, [r7, #16]
 801590c:	7b1b      	ldrb	r3, [r3, #12]
 801590e:	2b0a      	cmp	r3, #10
 8015910:	f000 8372 	beq.w	8015ff8 <USBH_MSC_Process+0x70c>
 8015914:	2b0a      	cmp	r3, #10
 8015916:	f300 83aa 	bgt.w	801606e <USBH_MSC_Process+0x782>
 801591a:	2b00      	cmp	r3, #0
 801591c:	d003      	beq.n	8015926 <USBH_MSC_Process+0x3a>
 801591e:	2b01      	cmp	r3, #1
 8015920:	f000 83a2 	beq.w	8016068 <USBH_MSC_Process+0x77c>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8015924:	e3a3      	b.n	801606e <USBH_MSC_Process+0x782>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8015926:	693b      	ldr	r3, [r7, #16]
 8015928:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801592c:	693a      	ldr	r2, [r7, #16]
 801592e:	7812      	ldrb	r2, [r2, #0]
 8015930:	4293      	cmp	r3, r2
 8015932:	f080 8341 	bcs.w	8015fb8 <USBH_MSC_Process+0x6cc>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801593c:	4619      	mov	r1, r3
 801593e:	693a      	ldr	r2, [r7, #16]
 8015940:	2334      	movs	r3, #52	@ 0x34
 8015942:	fb01 f303 	mul.w	r3, r1, r3
 8015946:	4413      	add	r3, r2
 8015948:	3391      	adds	r3, #145	@ 0x91
 801594a:	2201      	movs	r2, #1
 801594c:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 801594e:	693b      	ldr	r3, [r7, #16]
 8015950:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015954:	4619      	mov	r1, r3
 8015956:	693a      	ldr	r2, [r7, #16]
 8015958:	2334      	movs	r3, #52	@ 0x34
 801595a:	fb01 f303 	mul.w	r3, r1, r3
 801595e:	4413      	add	r3, r2
 8015960:	3390      	adds	r3, #144	@ 0x90
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	2b08      	cmp	r3, #8
 8015966:	f200 832f 	bhi.w	8015fc8 <USBH_MSC_Process+0x6dc>
 801596a:	a201      	add	r2, pc, #4	@ (adr r2, 8015970 <USBH_MSC_Process+0x84>)
 801596c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015970:	08015995 	.word	0x08015995
 8015974:	08015fc9 	.word	0x08015fc9
 8015978:	08015adf 	.word	0x08015adf
 801597c:	08015c95 	.word	0x08015c95
 8015980:	080159cf 	.word	0x080159cf
 8015984:	08015e01 	.word	0x08015e01
 8015988:	08015fc9 	.word	0x08015fc9
 801598c:	08015fc9 	.word	0x08015fc9
 8015990:	08015fa7 	.word	0x08015fa7
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801599a:	4619      	mov	r1, r3
 801599c:	48b7      	ldr	r0, [pc, #732]	@ (8015c7c <USBH_MSC_Process+0x390>)
 801599e:	f005 fc73 	bl	801b288 <iprintf>
 80159a2:	200a      	movs	r0, #10
 80159a4:	f005 fc82 	bl	801b2ac <putchar>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80159a8:	693b      	ldr	r3, [r7, #16]
 80159aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80159ae:	4619      	mov	r1, r3
 80159b0:	693a      	ldr	r2, [r7, #16]
 80159b2:	2334      	movs	r3, #52	@ 0x34
 80159b4:	fb01 f303 	mul.w	r3, r1, r3
 80159b8:	4413      	add	r3, r2
 80159ba:	3390      	adds	r3, #144	@ 0x90
 80159bc:	2204      	movs	r2, #4
 80159be:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 80159cc:	e305      	b.n	8015fda <USBH_MSC_Process+0x6ee>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80159ce:	693b      	ldr	r3, [r7, #16]
 80159d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80159d4:	b2d9      	uxtb	r1, r3
 80159d6:	693b      	ldr	r3, [r7, #16]
 80159d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80159dc:	461a      	mov	r2, r3
 80159de:	2334      	movs	r3, #52	@ 0x34
 80159e0:	fb02 f303 	mul.w	r3, r2, r3
 80159e4:	3398      	adds	r3, #152	@ 0x98
 80159e6:	693a      	ldr	r2, [r7, #16]
 80159e8:	4413      	add	r3, r2
 80159ea:	3307      	adds	r3, #7
 80159ec:	461a      	mov	r2, r3
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	f001 f8e9 	bl	8016bc6 <USBH_MSC_SCSI_Inquiry>
 80159f4:	4603      	mov	r3, r0
 80159f6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80159f8:	7bfb      	ldrb	r3, [r7, #15]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d142      	bne.n	8015a84 <USBH_MSC_Process+0x198>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 80159fe:	693b      	ldr	r3, [r7, #16]
 8015a00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015a04:	461a      	mov	r2, r3
 8015a06:	2334      	movs	r3, #52	@ 0x34
 8015a08:	fb02 f303 	mul.w	r3, r2, r3
 8015a0c:	3398      	adds	r3, #152	@ 0x98
 8015a0e:	693a      	ldr	r2, [r7, #16]
 8015a10:	4413      	add	r3, r2
 8015a12:	330a      	adds	r3, #10
 8015a14:	4619      	mov	r1, r3
 8015a16:	489a      	ldr	r0, [pc, #616]	@ (8015c80 <USBH_MSC_Process+0x394>)
 8015a18:	f005 fc36 	bl	801b288 <iprintf>
 8015a1c:	200a      	movs	r0, #10
 8015a1e:	f005 fc45 	bl	801b2ac <putchar>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015a28:	461a      	mov	r2, r3
 8015a2a:	2334      	movs	r3, #52	@ 0x34
 8015a2c:	fb02 f303 	mul.w	r3, r2, r3
 8015a30:	33a0      	adds	r3, #160	@ 0xa0
 8015a32:	693a      	ldr	r2, [r7, #16]
 8015a34:	4413      	add	r3, r2
 8015a36:	330b      	adds	r3, #11
 8015a38:	4619      	mov	r1, r3
 8015a3a:	4892      	ldr	r0, [pc, #584]	@ (8015c84 <USBH_MSC_Process+0x398>)
 8015a3c:	f005 fc24 	bl	801b288 <iprintf>
 8015a40:	200a      	movs	r0, #10
 8015a42:	f005 fc33 	bl	801b2ac <putchar>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	2334      	movs	r3, #52	@ 0x34
 8015a50:	fb02 f303 	mul.w	r3, r2, r3
 8015a54:	33b0      	adds	r3, #176	@ 0xb0
 8015a56:	693a      	ldr	r2, [r7, #16]
 8015a58:	4413      	add	r3, r2
 8015a5a:	330c      	adds	r3, #12
 8015a5c:	4619      	mov	r1, r3
 8015a5e:	488a      	ldr	r0, [pc, #552]	@ (8015c88 <USBH_MSC_Process+0x39c>)
 8015a60:	f005 fc12 	bl	801b288 <iprintf>
 8015a64:	200a      	movs	r0, #10
 8015a66:	f005 fc21 	bl	801b2ac <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015a70:	4619      	mov	r1, r3
 8015a72:	693a      	ldr	r2, [r7, #16]
 8015a74:	2334      	movs	r3, #52	@ 0x34
 8015a76:	fb01 f303 	mul.w	r3, r1, r3
 8015a7a:	4413      	add	r3, r2
 8015a7c:	3390      	adds	r3, #144	@ 0x90
 8015a7e:	2202      	movs	r2, #2
 8015a80:	701a      	strb	r2, [r3, #0]
            break;
 8015a82:	e2a3      	b.n	8015fcc <USBH_MSC_Process+0x6e0>
            else if (scsi_status == USBH_FAIL)
 8015a84:	7bfb      	ldrb	r3, [r7, #15]
 8015a86:	2b02      	cmp	r3, #2
 8015a88:	d10c      	bne.n	8015aa4 <USBH_MSC_Process+0x1b8>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015a90:	4619      	mov	r1, r3
 8015a92:	693a      	ldr	r2, [r7, #16]
 8015a94:	2334      	movs	r3, #52	@ 0x34
 8015a96:	fb01 f303 	mul.w	r3, r1, r3
 8015a9a:	4413      	add	r3, r2
 8015a9c:	3390      	adds	r3, #144	@ 0x90
 8015a9e:	2205      	movs	r2, #5
 8015aa0:	701a      	strb	r2, [r3, #0]
            break;
 8015aa2:	e293      	b.n	8015fcc <USBH_MSC_Process+0x6e0>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8015aa4:	7bfb      	ldrb	r3, [r7, #15]
 8015aa6:	2b04      	cmp	r3, #4
 8015aa8:	f040 8290 	bne.w	8015fcc <USBH_MSC_Process+0x6e0>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8015aac:	693b      	ldr	r3, [r7, #16]
 8015aae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	693a      	ldr	r2, [r7, #16]
 8015ab6:	2334      	movs	r3, #52	@ 0x34
 8015ab8:	fb01 f303 	mul.w	r3, r1, r3
 8015abc:	4413      	add	r3, r2
 8015abe:	3390      	adds	r3, #144	@ 0x90
 8015ac0:	2208      	movs	r2, #8
 8015ac2:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8015ac4:	693b      	ldr	r3, [r7, #16]
 8015ac6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015aca:	4619      	mov	r1, r3
 8015acc:	693a      	ldr	r2, [r7, #16]
 8015ace:	2334      	movs	r3, #52	@ 0x34
 8015ad0:	fb01 f303 	mul.w	r3, r1, r3
 8015ad4:	4413      	add	r3, r2
 8015ad6:	3391      	adds	r3, #145	@ 0x91
 8015ad8:	2202      	movs	r2, #2
 8015ada:	701a      	strb	r2, [r3, #0]
            break;
 8015adc:	e276      	b.n	8015fcc <USBH_MSC_Process+0x6e0>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8015ade:	693b      	ldr	r3, [r7, #16]
 8015ae0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015ae4:	b2db      	uxtb	r3, r3
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	6878      	ldr	r0, [r7, #4]
 8015aea:	f000 ffaf 	bl	8016a4c <USBH_MSC_SCSI_TestUnitReady>
 8015aee:	4603      	mov	r3, r0
 8015af0:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8015af2:	7bbb      	ldrb	r3, [r7, #14]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d150      	bne.n	8015b9a <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8015af8:	693b      	ldr	r3, [r7, #16]
 8015afa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015afe:	4619      	mov	r1, r3
 8015b00:	693a      	ldr	r2, [r7, #16]
 8015b02:	2334      	movs	r3, #52	@ 0x34
 8015b04:	fb01 f303 	mul.w	r3, r1, r3
 8015b08:	4413      	add	r3, r2
 8015b0a:	3392      	adds	r3, #146	@ 0x92
 8015b0c:	781b      	ldrb	r3, [r3, #0]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d012      	beq.n	8015b38 <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8015b12:	693b      	ldr	r3, [r7, #16]
 8015b14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015b18:	4619      	mov	r1, r3
 8015b1a:	693a      	ldr	r2, [r7, #16]
 8015b1c:	2334      	movs	r3, #52	@ 0x34
 8015b1e:	fb01 f303 	mul.w	r3, r1, r3
 8015b22:	4413      	add	r3, r2
 8015b24:	33c1      	adds	r3, #193	@ 0xc1
 8015b26:	2201      	movs	r2, #1
 8015b28:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device ready");
 8015b2a:	4858      	ldr	r0, [pc, #352]	@ (8015c8c <USBH_MSC_Process+0x3a0>)
 8015b2c:	f005 fbac 	bl	801b288 <iprintf>
 8015b30:	200a      	movs	r0, #10
 8015b32:	f005 fbbb 	bl	801b2ac <putchar>
 8015b36:	e00b      	b.n	8015b50 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8015b38:	693b      	ldr	r3, [r7, #16]
 8015b3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015b3e:	4619      	mov	r1, r3
 8015b40:	693a      	ldr	r2, [r7, #16]
 8015b42:	2334      	movs	r3, #52	@ 0x34
 8015b44:	fb01 f303 	mul.w	r3, r1, r3
 8015b48:	4413      	add	r3, r2
 8015b4a:	33c1      	adds	r3, #193	@ 0xc1
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015b56:	4619      	mov	r1, r3
 8015b58:	693a      	ldr	r2, [r7, #16]
 8015b5a:	2334      	movs	r3, #52	@ 0x34
 8015b5c:	fb01 f303 	mul.w	r3, r1, r3
 8015b60:	4413      	add	r3, r2
 8015b62:	3390      	adds	r3, #144	@ 0x90
 8015b64:	2203      	movs	r2, #3
 8015b66:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8015b68:	693b      	ldr	r3, [r7, #16]
 8015b6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015b6e:	4619      	mov	r1, r3
 8015b70:	693a      	ldr	r2, [r7, #16]
 8015b72:	2334      	movs	r3, #52	@ 0x34
 8015b74:	fb01 f303 	mul.w	r3, r1, r3
 8015b78:	4413      	add	r3, r2
 8015b7a:	3391      	adds	r3, #145	@ 0x91
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015b86:	4619      	mov	r1, r3
 8015b88:	693a      	ldr	r2, [r7, #16]
 8015b8a:	2334      	movs	r3, #52	@ 0x34
 8015b8c:	fb01 f303 	mul.w	r3, r1, r3
 8015b90:	4413      	add	r3, r2
 8015b92:	3392      	adds	r3, #146	@ 0x92
 8015b94:	2200      	movs	r2, #0
 8015b96:	701a      	strb	r2, [r3, #0]
            break;
 8015b98:	e21a      	b.n	8015fd0 <USBH_MSC_Process+0x6e4>
            else if (ready_status == USBH_FAIL)
 8015b9a:	7bbb      	ldrb	r3, [r7, #14]
 8015b9c:	2b02      	cmp	r3, #2
 8015b9e:	d150      	bne.n	8015c42 <USBH_MSC_Process+0x356>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	693a      	ldr	r2, [r7, #16]
 8015baa:	2334      	movs	r3, #52	@ 0x34
 8015bac:	fb01 f303 	mul.w	r3, r1, r3
 8015bb0:	4413      	add	r3, r2
 8015bb2:	3392      	adds	r3, #146	@ 0x92
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	2b02      	cmp	r3, #2
 8015bb8:	d012      	beq.n	8015be0 <USBH_MSC_Process+0x2f4>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8015bba:	693b      	ldr	r3, [r7, #16]
 8015bbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015bc0:	4619      	mov	r1, r3
 8015bc2:	693a      	ldr	r2, [r7, #16]
 8015bc4:	2334      	movs	r3, #52	@ 0x34
 8015bc6:	fb01 f303 	mul.w	r3, r1, r3
 8015bca:	4413      	add	r3, r2
 8015bcc:	33c1      	adds	r3, #193	@ 0xc1
 8015bce:	2201      	movs	r2, #1
 8015bd0:	701a      	strb	r2, [r3, #0]
                USBH_UsrLog("MSC Device NOT ready");
 8015bd2:	482f      	ldr	r0, [pc, #188]	@ (8015c90 <USBH_MSC_Process+0x3a4>)
 8015bd4:	f005 fb58 	bl	801b288 <iprintf>
 8015bd8:	200a      	movs	r0, #10
 8015bda:	f005 fb67 	bl	801b2ac <putchar>
 8015bde:	e00b      	b.n	8015bf8 <USBH_MSC_Process+0x30c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8015be0:	693b      	ldr	r3, [r7, #16]
 8015be2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015be6:	4619      	mov	r1, r3
 8015be8:	693a      	ldr	r2, [r7, #16]
 8015bea:	2334      	movs	r3, #52	@ 0x34
 8015bec:	fb01 f303 	mul.w	r3, r1, r3
 8015bf0:	4413      	add	r3, r2
 8015bf2:	33c1      	adds	r3, #193	@ 0xc1
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8015bf8:	693b      	ldr	r3, [r7, #16]
 8015bfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015bfe:	4619      	mov	r1, r3
 8015c00:	693a      	ldr	r2, [r7, #16]
 8015c02:	2334      	movs	r3, #52	@ 0x34
 8015c04:	fb01 f303 	mul.w	r3, r1, r3
 8015c08:	4413      	add	r3, r2
 8015c0a:	3390      	adds	r3, #144	@ 0x90
 8015c0c:	2205      	movs	r2, #5
 8015c0e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8015c10:	693b      	ldr	r3, [r7, #16]
 8015c12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015c16:	4619      	mov	r1, r3
 8015c18:	693a      	ldr	r2, [r7, #16]
 8015c1a:	2334      	movs	r3, #52	@ 0x34
 8015c1c:	fb01 f303 	mul.w	r3, r1, r3
 8015c20:	4413      	add	r3, r2
 8015c22:	3391      	adds	r3, #145	@ 0x91
 8015c24:	2201      	movs	r2, #1
 8015c26:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015c2e:	4619      	mov	r1, r3
 8015c30:	693a      	ldr	r2, [r7, #16]
 8015c32:	2334      	movs	r3, #52	@ 0x34
 8015c34:	fb01 f303 	mul.w	r3, r1, r3
 8015c38:	4413      	add	r3, r2
 8015c3a:	3392      	adds	r3, #146	@ 0x92
 8015c3c:	2202      	movs	r2, #2
 8015c3e:	701a      	strb	r2, [r3, #0]
            break;
 8015c40:	e1c6      	b.n	8015fd0 <USBH_MSC_Process+0x6e4>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8015c42:	7bbb      	ldrb	r3, [r7, #14]
 8015c44:	2b04      	cmp	r3, #4
 8015c46:	f040 81c3 	bne.w	8015fd0 <USBH_MSC_Process+0x6e4>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015c50:	4619      	mov	r1, r3
 8015c52:	693a      	ldr	r2, [r7, #16]
 8015c54:	2334      	movs	r3, #52	@ 0x34
 8015c56:	fb01 f303 	mul.w	r3, r1, r3
 8015c5a:	4413      	add	r3, r2
 8015c5c:	3390      	adds	r3, #144	@ 0x90
 8015c5e:	2208      	movs	r2, #8
 8015c60:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8015c62:	693b      	ldr	r3, [r7, #16]
 8015c64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015c68:	4619      	mov	r1, r3
 8015c6a:	693a      	ldr	r2, [r7, #16]
 8015c6c:	2334      	movs	r3, #52	@ 0x34
 8015c6e:	fb01 f303 	mul.w	r3, r1, r3
 8015c72:	4413      	add	r3, r2
 8015c74:	3391      	adds	r3, #145	@ 0x91
 8015c76:	2202      	movs	r2, #2
 8015c78:	701a      	strb	r2, [r3, #0]
            break;
 8015c7a:	e1a9      	b.n	8015fd0 <USBH_MSC_Process+0x6e4>
 8015c7c:	0801d0dc 	.word	0x0801d0dc
 8015c80:	0801d0e8 	.word	0x0801d0e8
 8015c84:	0801d100 	.word	0x0801d100
 8015c88:	0801d118 	.word	0x0801d118
 8015c8c:	0801d130 	.word	0x0801d130
 8015c90:	0801d144 	.word	0x0801d144
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015c9a:	b2d9      	uxtb	r1, r3
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015ca2:	461a      	mov	r2, r3
 8015ca4:	2334      	movs	r3, #52	@ 0x34
 8015ca6:	fb02 f303 	mul.w	r3, r2, r3
 8015caa:	3390      	adds	r3, #144	@ 0x90
 8015cac:	693a      	ldr	r2, [r7, #16]
 8015cae:	4413      	add	r3, r2
 8015cb0:	3304      	adds	r3, #4
 8015cb2:	461a      	mov	r2, r3
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f000 ff0c 	bl	8016ad2 <USBH_MSC_SCSI_ReadCapacity>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8015cbe:	7bfb      	ldrb	r3, [r7, #15]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d170      	bne.n	8015da6 <USBH_MSC_Process+0x4ba>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015cca:	4619      	mov	r1, r3
 8015ccc:	693a      	ldr	r2, [r7, #16]
 8015cce:	2334      	movs	r3, #52	@ 0x34
 8015cd0:	fb01 f303 	mul.w	r3, r1, r3
 8015cd4:	4413      	add	r3, r2
 8015cd6:	33c1      	adds	r3, #193	@ 0xc1
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	2b01      	cmp	r3, #1
 8015cdc:	d142      	bne.n	8015d64 <USBH_MSC_Process+0x478>
                USBH_UsrLog("MSC Device capacity : %u Bytes", \
 8015cde:	693b      	ldr	r3, [r7, #16]
 8015ce0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	693a      	ldr	r2, [r7, #16]
 8015ce8:	2334      	movs	r3, #52	@ 0x34
 8015cea:	fb01 f303 	mul.w	r3, r1, r3
 8015cee:	4413      	add	r3, r2
 8015cf0:	3394      	adds	r3, #148	@ 0x94
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	693a      	ldr	r2, [r7, #16]
 8015cf6:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	@ 0xf8
 8015cfa:	4610      	mov	r0, r2
 8015cfc:	6939      	ldr	r1, [r7, #16]
 8015cfe:	2234      	movs	r2, #52	@ 0x34
 8015d00:	fb00 f202 	mul.w	r2, r0, r2
 8015d04:	440a      	add	r2, r1
 8015d06:	3298      	adds	r2, #152	@ 0x98
 8015d08:	8812      	ldrh	r2, [r2, #0]
 8015d0a:	fb02 f303 	mul.w	r3, r2, r3
 8015d0e:	4619      	mov	r1, r3
 8015d10:	48b2      	ldr	r0, [pc, #712]	@ (8015fdc <USBH_MSC_Process+0x6f0>)
 8015d12:	f005 fab9 	bl	801b288 <iprintf>
 8015d16:	200a      	movs	r0, #10
 8015d18:	f005 fac8 	bl	801b2ac <putchar>
                USBH_UsrLog("Block number : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015d22:	4619      	mov	r1, r3
 8015d24:	693a      	ldr	r2, [r7, #16]
 8015d26:	2334      	movs	r3, #52	@ 0x34
 8015d28:	fb01 f303 	mul.w	r3, r1, r3
 8015d2c:	4413      	add	r3, r2
 8015d2e:	3394      	adds	r3, #148	@ 0x94
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	4619      	mov	r1, r3
 8015d34:	48aa      	ldr	r0, [pc, #680]	@ (8015fe0 <USBH_MSC_Process+0x6f4>)
 8015d36:	f005 faa7 	bl	801b288 <iprintf>
 8015d3a:	200a      	movs	r0, #10
 8015d3c:	f005 fab6 	bl	801b2ac <putchar>
                USBH_UsrLog("Block Size   : %u", (unsigned int)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015d46:	4619      	mov	r1, r3
 8015d48:	693a      	ldr	r2, [r7, #16]
 8015d4a:	2334      	movs	r3, #52	@ 0x34
 8015d4c:	fb01 f303 	mul.w	r3, r1, r3
 8015d50:	4413      	add	r3, r2
 8015d52:	3398      	adds	r3, #152	@ 0x98
 8015d54:	881b      	ldrh	r3, [r3, #0]
 8015d56:	4619      	mov	r1, r3
 8015d58:	48a2      	ldr	r0, [pc, #648]	@ (8015fe4 <USBH_MSC_Process+0x6f8>)
 8015d5a:	f005 fa95 	bl	801b288 <iprintf>
 8015d5e:	200a      	movs	r0, #10
 8015d60:	f005 faa4 	bl	801b2ac <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015d64:	693b      	ldr	r3, [r7, #16]
 8015d66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015d6a:	4619      	mov	r1, r3
 8015d6c:	693a      	ldr	r2, [r7, #16]
 8015d6e:	2334      	movs	r3, #52	@ 0x34
 8015d70:	fb01 f303 	mul.w	r3, r1, r3
 8015d74:	4413      	add	r3, r2
 8015d76:	3390      	adds	r3, #144	@ 0x90
 8015d78:	2201      	movs	r2, #1
 8015d7a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8015d7c:	693b      	ldr	r3, [r7, #16]
 8015d7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015d82:	4619      	mov	r1, r3
 8015d84:	693a      	ldr	r2, [r7, #16]
 8015d86:	2334      	movs	r3, #52	@ 0x34
 8015d88:	fb01 f303 	mul.w	r3, r1, r3
 8015d8c:	4413      	add	r3, r2
 8015d8e:	3391      	adds	r3, #145	@ 0x91
 8015d90:	2200      	movs	r2, #0
 8015d92:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015d9a:	3301      	adds	r3, #1
 8015d9c:	b29a      	uxth	r2, r3
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8015da4:	e116      	b.n	8015fd4 <USBH_MSC_Process+0x6e8>
            else if (scsi_status == USBH_FAIL)
 8015da6:	7bfb      	ldrb	r3, [r7, #15]
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d10c      	bne.n	8015dc6 <USBH_MSC_Process+0x4da>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015db2:	4619      	mov	r1, r3
 8015db4:	693a      	ldr	r2, [r7, #16]
 8015db6:	2334      	movs	r3, #52	@ 0x34
 8015db8:	fb01 f303 	mul.w	r3, r1, r3
 8015dbc:	4413      	add	r3, r2
 8015dbe:	3390      	adds	r3, #144	@ 0x90
 8015dc0:	2205      	movs	r2, #5
 8015dc2:	701a      	strb	r2, [r3, #0]
            break;
 8015dc4:	e106      	b.n	8015fd4 <USBH_MSC_Process+0x6e8>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8015dc6:	7bfb      	ldrb	r3, [r7, #15]
 8015dc8:	2b04      	cmp	r3, #4
 8015dca:	f040 8103 	bne.w	8015fd4 <USBH_MSC_Process+0x6e8>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015dd4:	4619      	mov	r1, r3
 8015dd6:	693a      	ldr	r2, [r7, #16]
 8015dd8:	2334      	movs	r3, #52	@ 0x34
 8015dda:	fb01 f303 	mul.w	r3, r1, r3
 8015dde:	4413      	add	r3, r2
 8015de0:	3390      	adds	r3, #144	@ 0x90
 8015de2:	2208      	movs	r2, #8
 8015de4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015dec:	4619      	mov	r1, r3
 8015dee:	693a      	ldr	r2, [r7, #16]
 8015df0:	2334      	movs	r3, #52	@ 0x34
 8015df2:	fb01 f303 	mul.w	r3, r1, r3
 8015df6:	4413      	add	r3, r2
 8015df8:	3391      	adds	r3, #145	@ 0x91
 8015dfa:	2202      	movs	r2, #2
 8015dfc:	701a      	strb	r2, [r3, #0]
            break;
 8015dfe:	e0e9      	b.n	8015fd4 <USBH_MSC_Process+0x6e8>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015e06:	b2d9      	uxtb	r1, r3
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015e0e:	461a      	mov	r2, r3
 8015e10:	2334      	movs	r3, #52	@ 0x34
 8015e12:	fb02 f303 	mul.w	r3, r2, r3
 8015e16:	3398      	adds	r3, #152	@ 0x98
 8015e18:	693a      	ldr	r2, [r7, #16]
 8015e1a:	4413      	add	r3, r2
 8015e1c:	3304      	adds	r3, #4
 8015e1e:	461a      	mov	r2, r3
 8015e20:	6878      	ldr	r0, [r7, #4]
 8015e22:	f000 ff75 	bl	8016d10 <USBH_MSC_SCSI_RequestSense>
 8015e26:	4603      	mov	r3, r0
 8015e28:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8015e2a:	7bfb      	ldrb	r3, [r7, #15]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d17c      	bne.n	8015f2a <USBH_MSC_Process+0x63e>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8015e30:	693b      	ldr	r3, [r7, #16]
 8015e32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015e36:	4619      	mov	r1, r3
 8015e38:	693a      	ldr	r2, [r7, #16]
 8015e3a:	2334      	movs	r3, #52	@ 0x34
 8015e3c:	fb01 f303 	mul.w	r3, r1, r3
 8015e40:	4413      	add	r3, r2
 8015e42:	339c      	adds	r3, #156	@ 0x9c
 8015e44:	781b      	ldrb	r3, [r3, #0]
 8015e46:	2b06      	cmp	r3, #6
 8015e48:	d00c      	beq.n	8015e64 <USBH_MSC_Process+0x578>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015e50:	4619      	mov	r1, r3
 8015e52:	693a      	ldr	r2, [r7, #16]
 8015e54:	2334      	movs	r3, #52	@ 0x34
 8015e56:	fb01 f303 	mul.w	r3, r1, r3
 8015e5a:	4413      	add	r3, r2
 8015e5c:	339c      	adds	r3, #156	@ 0x9c
 8015e5e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8015e60:	2b02      	cmp	r3, #2
 8015e62:	d117      	bne.n	8015e94 <USBH_MSC_Process+0x5a8>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
 8015e6a:	693b      	ldr	r3, [r7, #16]
 8015e6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8015e70:	1ad3      	subs	r3, r2, r3
 8015e72:	f242 720f 	movw	r2, #9999	@ 0x270f
 8015e76:	4293      	cmp	r3, r2
 8015e78:	d80c      	bhi.n	8015e94 <USBH_MSC_Process+0x5a8>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8015e7a:	693b      	ldr	r3, [r7, #16]
 8015e7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015e80:	4619      	mov	r1, r3
 8015e82:	693a      	ldr	r2, [r7, #16]
 8015e84:	2334      	movs	r3, #52	@ 0x34
 8015e86:	fb01 f303 	mul.w	r3, r1, r3
 8015e8a:	4413      	add	r3, r2
 8015e8c:	3390      	adds	r3, #144	@ 0x90
 8015e8e:	2202      	movs	r2, #2
 8015e90:	701a      	strb	r2, [r3, #0]
                  break;
 8015e92:	e0a2      	b.n	8015fda <USBH_MSC_Process+0x6ee>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 8015e94:	693b      	ldr	r3, [r7, #16]
 8015e96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	693a      	ldr	r2, [r7, #16]
 8015e9e:	2334      	movs	r3, #52	@ 0x34
 8015ea0:	fb01 f303 	mul.w	r3, r1, r3
 8015ea4:	4413      	add	r3, r2
 8015ea6:	339c      	adds	r3, #156	@ 0x9c
 8015ea8:	781b      	ldrb	r3, [r3, #0]
 8015eaa:	4619      	mov	r1, r3
 8015eac:	484e      	ldr	r0, [pc, #312]	@ (8015fe8 <USBH_MSC_Process+0x6fc>)
 8015eae:	f005 f9eb 	bl	801b288 <iprintf>
 8015eb2:	200a      	movs	r0, #10
 8015eb4:	f005 f9fa 	bl	801b2ac <putchar>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015ebe:	4619      	mov	r1, r3
 8015ec0:	693a      	ldr	r2, [r7, #16]
 8015ec2:	2334      	movs	r3, #52	@ 0x34
 8015ec4:	fb01 f303 	mul.w	r3, r1, r3
 8015ec8:	4413      	add	r3, r2
 8015eca:	339d      	adds	r3, #157	@ 0x9d
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	4619      	mov	r1, r3
 8015ed0:	4846      	ldr	r0, [pc, #280]	@ (8015fec <USBH_MSC_Process+0x700>)
 8015ed2:	f005 f9d9 	bl	801b288 <iprintf>
 8015ed6:	200a      	movs	r0, #10
 8015ed8:	f005 f9e8 	bl	801b2ac <putchar>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	693a      	ldr	r2, [r7, #16]
 8015ee6:	2334      	movs	r3, #52	@ 0x34
 8015ee8:	fb01 f303 	mul.w	r3, r1, r3
 8015eec:	4413      	add	r3, r2
 8015eee:	339e      	adds	r3, #158	@ 0x9e
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	483e      	ldr	r0, [pc, #248]	@ (8015ff0 <USBH_MSC_Process+0x704>)
 8015ef6:	f005 f9c7 	bl	801b288 <iprintf>
 8015efa:	200a      	movs	r0, #10
 8015efc:	f005 f9d6 	bl	801b2ac <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015f06:	4619      	mov	r1, r3
 8015f08:	693a      	ldr	r2, [r7, #16]
 8015f0a:	2334      	movs	r3, #52	@ 0x34
 8015f0c:	fb01 f303 	mul.w	r3, r1, r3
 8015f10:	4413      	add	r3, r2
 8015f12:	3390      	adds	r3, #144	@ 0x90
 8015f14:	2201      	movs	r2, #1
 8015f16:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015f1e:	3301      	adds	r3, #1
 8015f20:	b29a      	uxth	r2, r3
 8015f22:	693b      	ldr	r3, [r7, #16]
 8015f24:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8015f28:	e056      	b.n	8015fd8 <USBH_MSC_Process+0x6ec>
            else if (scsi_status == USBH_FAIL)
 8015f2a:	7bfb      	ldrb	r3, [r7, #15]
 8015f2c:	2b02      	cmp	r3, #2
 8015f2e:	d11e      	bne.n	8015f6e <USBH_MSC_Process+0x682>
              USBH_UsrLog("MSC Device NOT ready");
 8015f30:	4830      	ldr	r0, [pc, #192]	@ (8015ff4 <USBH_MSC_Process+0x708>)
 8015f32:	f005 f9a9 	bl	801b288 <iprintf>
 8015f36:	200a      	movs	r0, #10
 8015f38:	f005 f9b8 	bl	801b2ac <putchar>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8015f3c:	693b      	ldr	r3, [r7, #16]
 8015f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015f42:	4619      	mov	r1, r3
 8015f44:	693a      	ldr	r2, [r7, #16]
 8015f46:	2334      	movs	r3, #52	@ 0x34
 8015f48:	fb01 f303 	mul.w	r3, r1, r3
 8015f4c:	4413      	add	r3, r2
 8015f4e:	3390      	adds	r3, #144	@ 0x90
 8015f50:	2208      	movs	r2, #8
 8015f52:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8015f54:	693b      	ldr	r3, [r7, #16]
 8015f56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	693a      	ldr	r2, [r7, #16]
 8015f5e:	2334      	movs	r3, #52	@ 0x34
 8015f60:	fb01 f303 	mul.w	r3, r1, r3
 8015f64:	4413      	add	r3, r2
 8015f66:	3391      	adds	r3, #145	@ 0x91
 8015f68:	2202      	movs	r2, #2
 8015f6a:	701a      	strb	r2, [r3, #0]
            break;
 8015f6c:	e034      	b.n	8015fd8 <USBH_MSC_Process+0x6ec>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8015f6e:	7bfb      	ldrb	r3, [r7, #15]
 8015f70:	2b04      	cmp	r3, #4
 8015f72:	d131      	bne.n	8015fd8 <USBH_MSC_Process+0x6ec>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015f7a:	4619      	mov	r1, r3
 8015f7c:	693a      	ldr	r2, [r7, #16]
 8015f7e:	2334      	movs	r3, #52	@ 0x34
 8015f80:	fb01 f303 	mul.w	r3, r1, r3
 8015f84:	4413      	add	r3, r2
 8015f86:	3390      	adds	r3, #144	@ 0x90
 8015f88:	2208      	movs	r2, #8
 8015f8a:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8015f8c:	693b      	ldr	r3, [r7, #16]
 8015f8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015f92:	4619      	mov	r1, r3
 8015f94:	693a      	ldr	r2, [r7, #16]
 8015f96:	2334      	movs	r3, #52	@ 0x34
 8015f98:	fb01 f303 	mul.w	r3, r1, r3
 8015f9c:	4413      	add	r3, r2
 8015f9e:	3391      	adds	r3, #145	@ 0x91
 8015fa0:	2202      	movs	r2, #2
 8015fa2:	701a      	strb	r2, [r3, #0]
            break;
 8015fa4:	e018      	b.n	8015fd8 <USBH_MSC_Process+0x6ec>
            MSC_Handle->current_lun++;
 8015fa6:	693b      	ldr	r3, [r7, #16]
 8015fa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8015fac:	3301      	adds	r3, #1
 8015fae:	b29a      	uxth	r2, r3
 8015fb0:	693b      	ldr	r3, [r7, #16]
 8015fb2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8015fb6:	e010      	b.n	8015fda <USBH_MSC_Process+0x6ee>
        MSC_Handle->current_lun = 0U;
 8015fb8:	693b      	ldr	r3, [r7, #16]
 8015fba:	2200      	movs	r2, #0
 8015fbc:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 8015fc0:	693b      	ldr	r3, [r7, #16]
 8015fc2:	220a      	movs	r2, #10
 8015fc4:	731a      	strb	r2, [r3, #12]
      break;
 8015fc6:	e053      	b.n	8016070 <USBH_MSC_Process+0x784>
            break;
 8015fc8:	bf00      	nop
 8015fca:	e051      	b.n	8016070 <USBH_MSC_Process+0x784>
            break;
 8015fcc:	bf00      	nop
 8015fce:	e04f      	b.n	8016070 <USBH_MSC_Process+0x784>
            break;
 8015fd0:	bf00      	nop
 8015fd2:	e04d      	b.n	8016070 <USBH_MSC_Process+0x784>
            break;
 8015fd4:	bf00      	nop
 8015fd6:	e04b      	b.n	8016070 <USBH_MSC_Process+0x784>
            break;
 8015fd8:	bf00      	nop
      break;
 8015fda:	e049      	b.n	8016070 <USBH_MSC_Process+0x784>
 8015fdc:	0801d15c 	.word	0x0801d15c
 8015fe0:	0801d17c 	.word	0x0801d17c
 8015fe4:	0801d190 	.word	0x0801d190
 8015fe8:	0801d1a4 	.word	0x0801d1a4
 8015fec:	0801d1b4 	.word	0x0801d1b4
 8015ff0:	0801d1d0 	.word	0x0801d1d0
 8015ff4:	0801d144 	.word	0x0801d144
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 8015ff8:	693b      	ldr	r3, [r7, #16]
 8015ffa:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8015ffe:	693a      	ldr	r2, [r7, #16]
 8016000:	7812      	ldrb	r2, [r2, #0]
 8016002:	4293      	cmp	r3, r2
 8016004:	d228      	bcs.n	8016058 <USBH_MSC_Process+0x76c>
        MSC_Handle->current_lun = MSC_Handle->lun;
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 801600c:	693b      	ldr	r3, [r7, #16]
 801600e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8016018:	4619      	mov	r1, r3
 801601a:	693a      	ldr	r2, [r7, #16]
 801601c:	2334      	movs	r3, #52	@ 0x34
 801601e:	fb01 f303 	mul.w	r3, r1, r3
 8016022:	4413      	add	r3, r2
 8016024:	3391      	adds	r3, #145	@ 0x91
 8016026:	781b      	ldrb	r3, [r3, #0]
 8016028:	2b00      	cmp	r3, #0
 801602a:	d106      	bne.n	801603a <USBH_MSC_Process+0x74e>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8016032:	2102      	movs	r1, #2
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	4798      	blx	r3
 8016038:	e005      	b.n	8016046 <USBH_MSC_Process+0x75a>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8016040:	2106      	movs	r1, #6
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	4798      	blx	r3
        MSC_Handle->lun++;
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 801604c:	3301      	adds	r3, #1
 801604e:	b29a      	uxth	r2, r3
 8016050:	693b      	ldr	r3, [r7, #16]
 8016052:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8016056:	e00b      	b.n	8016070 <USBH_MSC_Process+0x784>
        MSC_Handle->lun = 0U;
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	2200      	movs	r2, #0
 801605c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	2201      	movs	r2, #1
 8016064:	731a      	strb	r2, [r3, #12]
      break;
 8016066:	e003      	b.n	8016070 <USBH_MSC_Process+0x784>
      error = USBH_OK;
 8016068:	2300      	movs	r3, #0
 801606a:	75fb      	strb	r3, [r7, #23]
      break;
 801606c:	e000      	b.n	8016070 <USBH_MSC_Process+0x784>
      break;
 801606e:	bf00      	nop
  }
  return error;
 8016070:	7dfb      	ldrb	r3, [r7, #23]
}
 8016072:	4618      	mov	r0, r3
 8016074:	3718      	adds	r7, #24
 8016076:	46bd      	mov	sp, r7
 8016078:	bd80      	pop	{r7, pc}
 801607a:	bf00      	nop

0801607c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 801607c:	b480      	push	{r7}
 801607e:	b083      	sub	sp, #12
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8016084:	2300      	movs	r3, #0
}
 8016086:	4618      	mov	r0, r3
 8016088:	370c      	adds	r7, #12
 801608a:	46bd      	mov	sp, r7
 801608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016090:	4770      	bx	lr
	...

08016094 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b088      	sub	sp, #32
 8016098:	af02      	add	r7, sp, #8
 801609a:	6078      	str	r0, [r7, #4]
 801609c:	460b      	mov	r3, r1
 801609e:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80160a6:	69db      	ldr	r3, [r3, #28]
 80160a8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80160aa:	2301      	movs	r3, #1
 80160ac:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80160ae:	2301      	movs	r3, #1
 80160b0:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80160b2:	78fb      	ldrb	r3, [r7, #3]
 80160b4:	693a      	ldr	r2, [r7, #16]
 80160b6:	2134      	movs	r1, #52	@ 0x34
 80160b8:	fb01 f303 	mul.w	r3, r1, r3
 80160bc:	4413      	add	r3, r2
 80160be:	3390      	adds	r3, #144	@ 0x90
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b07      	cmp	r3, #7
 80160c4:	d03d      	beq.n	8016142 <USBH_MSC_RdWrProcess+0xae>
 80160c6:	2b07      	cmp	r3, #7
 80160c8:	f300 80dd 	bgt.w	8016286 <USBH_MSC_RdWrProcess+0x1f2>
 80160cc:	2b05      	cmp	r3, #5
 80160ce:	d06d      	beq.n	80161ac <USBH_MSC_RdWrProcess+0x118>
 80160d0:	2b06      	cmp	r3, #6
 80160d2:	f040 80d8 	bne.w	8016286 <USBH_MSC_RdWrProcess+0x1f2>
  {
    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80160d6:	78f9      	ldrb	r1, [r7, #3]
 80160d8:	2300      	movs	r3, #0
 80160da:	9300      	str	r3, [sp, #0]
 80160dc:	2300      	movs	r3, #0
 80160de:	2200      	movs	r2, #0
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f000 ff0d 	bl	8016f00 <USBH_MSC_SCSI_Read>
 80160e6:	4603      	mov	r3, r0
 80160e8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80160ea:	7bfb      	ldrb	r3, [r7, #15]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d10b      	bne.n	8016108 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80160f0:	78fb      	ldrb	r3, [r7, #3]
 80160f2:	693a      	ldr	r2, [r7, #16]
 80160f4:	2134      	movs	r1, #52	@ 0x34
 80160f6:	fb01 f303 	mul.w	r3, r1, r3
 80160fa:	4413      	add	r3, r2
 80160fc:	3390      	adds	r3, #144	@ 0x90
 80160fe:	2201      	movs	r2, #1
 8016100:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8016102:	2300      	movs	r3, #0
 8016104:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016106:	e0c0      	b.n	801628a <USBH_MSC_RdWrProcess+0x1f6>
      else if (scsi_status == USBH_FAIL)
 8016108:	7bfb      	ldrb	r3, [r7, #15]
 801610a:	2b02      	cmp	r3, #2
 801610c:	d109      	bne.n	8016122 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 801610e:	78fb      	ldrb	r3, [r7, #3]
 8016110:	693a      	ldr	r2, [r7, #16]
 8016112:	2134      	movs	r1, #52	@ 0x34
 8016114:	fb01 f303 	mul.w	r3, r1, r3
 8016118:	4413      	add	r3, r2
 801611a:	3390      	adds	r3, #144	@ 0x90
 801611c:	2205      	movs	r2, #5
 801611e:	701a      	strb	r2, [r3, #0]
      break;
 8016120:	e0b3      	b.n	801628a <USBH_MSC_RdWrProcess+0x1f6>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8016122:	7bfb      	ldrb	r3, [r7, #15]
 8016124:	2b04      	cmp	r3, #4
 8016126:	f040 80b0 	bne.w	801628a <USBH_MSC_RdWrProcess+0x1f6>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 801612a:	78fb      	ldrb	r3, [r7, #3]
 801612c:	693a      	ldr	r2, [r7, #16]
 801612e:	2134      	movs	r1, #52	@ 0x34
 8016130:	fb01 f303 	mul.w	r3, r1, r3
 8016134:	4413      	add	r3, r2
 8016136:	3390      	adds	r3, #144	@ 0x90
 8016138:	2208      	movs	r2, #8
 801613a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 801613c:	2302      	movs	r3, #2
 801613e:	75fb      	strb	r3, [r7, #23]
      break;
 8016140:	e0a3      	b.n	801628a <USBH_MSC_RdWrProcess+0x1f6>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8016142:	78f9      	ldrb	r1, [r7, #3]
 8016144:	2300      	movs	r3, #0
 8016146:	9300      	str	r3, [sp, #0]
 8016148:	2300      	movs	r3, #0
 801614a:	2200      	movs	r2, #0
 801614c:	6878      	ldr	r0, [r7, #4]
 801614e:	f000 fe67 	bl	8016e20 <USBH_MSC_SCSI_Write>
 8016152:	4603      	mov	r3, r0
 8016154:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8016156:	7bfb      	ldrb	r3, [r7, #15]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d10b      	bne.n	8016174 <USBH_MSC_RdWrProcess+0xe0>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 801615c:	78fb      	ldrb	r3, [r7, #3]
 801615e:	693a      	ldr	r2, [r7, #16]
 8016160:	2134      	movs	r1, #52	@ 0x34
 8016162:	fb01 f303 	mul.w	r3, r1, r3
 8016166:	4413      	add	r3, r2
 8016168:	3390      	adds	r3, #144	@ 0x90
 801616a:	2201      	movs	r2, #1
 801616c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 801616e:	2300      	movs	r3, #0
 8016170:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016172:	e08c      	b.n	801628e <USBH_MSC_RdWrProcess+0x1fa>
      else if (scsi_status == USBH_FAIL)
 8016174:	7bfb      	ldrb	r3, [r7, #15]
 8016176:	2b02      	cmp	r3, #2
 8016178:	d109      	bne.n	801618e <USBH_MSC_RdWrProcess+0xfa>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 801617a:	78fb      	ldrb	r3, [r7, #3]
 801617c:	693a      	ldr	r2, [r7, #16]
 801617e:	2134      	movs	r1, #52	@ 0x34
 8016180:	fb01 f303 	mul.w	r3, r1, r3
 8016184:	4413      	add	r3, r2
 8016186:	3390      	adds	r3, #144	@ 0x90
 8016188:	2205      	movs	r2, #5
 801618a:	701a      	strb	r2, [r3, #0]
      break;
 801618c:	e07f      	b.n	801628e <USBH_MSC_RdWrProcess+0x1fa>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 801618e:	7bfb      	ldrb	r3, [r7, #15]
 8016190:	2b04      	cmp	r3, #4
 8016192:	d17c      	bne.n	801628e <USBH_MSC_RdWrProcess+0x1fa>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8016194:	78fb      	ldrb	r3, [r7, #3]
 8016196:	693a      	ldr	r2, [r7, #16]
 8016198:	2134      	movs	r1, #52	@ 0x34
 801619a:	fb01 f303 	mul.w	r3, r1, r3
 801619e:	4413      	add	r3, r2
 80161a0:	3390      	adds	r3, #144	@ 0x90
 80161a2:	2208      	movs	r2, #8
 80161a4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80161a6:	2302      	movs	r3, #2
 80161a8:	75fb      	strb	r3, [r7, #23]
      break;
 80161aa:	e070      	b.n	801628e <USBH_MSC_RdWrProcess+0x1fa>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80161ac:	78fb      	ldrb	r3, [r7, #3]
 80161ae:	2234      	movs	r2, #52	@ 0x34
 80161b0:	fb02 f303 	mul.w	r3, r2, r3
 80161b4:	3398      	adds	r3, #152	@ 0x98
 80161b6:	693a      	ldr	r2, [r7, #16]
 80161b8:	4413      	add	r3, r2
 80161ba:	1d1a      	adds	r2, r3, #4
 80161bc:	78fb      	ldrb	r3, [r7, #3]
 80161be:	4619      	mov	r1, r3
 80161c0:	6878      	ldr	r0, [r7, #4]
 80161c2:	f000 fda5 	bl	8016d10 <USBH_MSC_SCSI_RequestSense>
 80161c6:	4603      	mov	r3, r0
 80161c8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80161ca:	7bfb      	ldrb	r3, [r7, #15]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d141      	bne.n	8016254 <USBH_MSC_RdWrProcess+0x1c0>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 80161d0:	78fb      	ldrb	r3, [r7, #3]
 80161d2:	693a      	ldr	r2, [r7, #16]
 80161d4:	2134      	movs	r1, #52	@ 0x34
 80161d6:	fb01 f303 	mul.w	r3, r1, r3
 80161da:	4413      	add	r3, r2
 80161dc:	339c      	adds	r3, #156	@ 0x9c
 80161de:	781b      	ldrb	r3, [r3, #0]
 80161e0:	4619      	mov	r1, r3
 80161e2:	482f      	ldr	r0, [pc, #188]	@ (80162a0 <USBH_MSC_RdWrProcess+0x20c>)
 80161e4:	f005 f850 	bl	801b288 <iprintf>
 80161e8:	200a      	movs	r0, #10
 80161ea:	f005 f85f 	bl	801b2ac <putchar>
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 80161ee:	78fb      	ldrb	r3, [r7, #3]
 80161f0:	693a      	ldr	r2, [r7, #16]
 80161f2:	2134      	movs	r1, #52	@ 0x34
 80161f4:	fb01 f303 	mul.w	r3, r1, r3
 80161f8:	4413      	add	r3, r2
 80161fa:	339d      	adds	r3, #157	@ 0x9d
 80161fc:	781b      	ldrb	r3, [r3, #0]
 80161fe:	4619      	mov	r1, r3
 8016200:	4828      	ldr	r0, [pc, #160]	@ (80162a4 <USBH_MSC_RdWrProcess+0x210>)
 8016202:	f005 f841 	bl	801b288 <iprintf>
 8016206:	200a      	movs	r0, #10
 8016208:	f005 f850 	bl	801b2ac <putchar>
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 801620c:	78fb      	ldrb	r3, [r7, #3]
 801620e:	693a      	ldr	r2, [r7, #16]
 8016210:	2134      	movs	r1, #52	@ 0x34
 8016212:	fb01 f303 	mul.w	r3, r1, r3
 8016216:	4413      	add	r3, r2
 8016218:	339e      	adds	r3, #158	@ 0x9e
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	4619      	mov	r1, r3
 801621e:	4822      	ldr	r0, [pc, #136]	@ (80162a8 <USBH_MSC_RdWrProcess+0x214>)
 8016220:	f005 f832 	bl	801b288 <iprintf>
 8016224:	200a      	movs	r0, #10
 8016226:	f005 f841 	bl	801b2ac <putchar>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 801622a:	78fb      	ldrb	r3, [r7, #3]
 801622c:	693a      	ldr	r2, [r7, #16]
 801622e:	2134      	movs	r1, #52	@ 0x34
 8016230:	fb01 f303 	mul.w	r3, r1, r3
 8016234:	4413      	add	r3, r2
 8016236:	3390      	adds	r3, #144	@ 0x90
 8016238:	2201      	movs	r2, #1
 801623a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 801623c:	78fb      	ldrb	r3, [r7, #3]
 801623e:	693a      	ldr	r2, [r7, #16]
 8016240:	2134      	movs	r1, #52	@ 0x34
 8016242:	fb01 f303 	mul.w	r3, r1, r3
 8016246:	4413      	add	r3, r2
 8016248:	3391      	adds	r3, #145	@ 0x91
 801624a:	2202      	movs	r2, #2
 801624c:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 801624e:	2302      	movs	r3, #2
 8016250:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8016252:	e01e      	b.n	8016292 <USBH_MSC_RdWrProcess+0x1fe>
      else if (scsi_status == USBH_FAIL)
 8016254:	7bfb      	ldrb	r3, [r7, #15]
 8016256:	2b02      	cmp	r3, #2
 8016258:	d106      	bne.n	8016268 <USBH_MSC_RdWrProcess+0x1d4>
        USBH_UsrLog("MSC Device NOT ready");
 801625a:	4814      	ldr	r0, [pc, #80]	@ (80162ac <USBH_MSC_RdWrProcess+0x218>)
 801625c:	f005 f814 	bl	801b288 <iprintf>
 8016260:	200a      	movs	r0, #10
 8016262:	f005 f823 	bl	801b2ac <putchar>
      break;
 8016266:	e014      	b.n	8016292 <USBH_MSC_RdWrProcess+0x1fe>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8016268:	7bfb      	ldrb	r3, [r7, #15]
 801626a:	2b04      	cmp	r3, #4
 801626c:	d111      	bne.n	8016292 <USBH_MSC_RdWrProcess+0x1fe>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 801626e:	78fb      	ldrb	r3, [r7, #3]
 8016270:	693a      	ldr	r2, [r7, #16]
 8016272:	2134      	movs	r1, #52	@ 0x34
 8016274:	fb01 f303 	mul.w	r3, r1, r3
 8016278:	4413      	add	r3, r2
 801627a:	3390      	adds	r3, #144	@ 0x90
 801627c:	2208      	movs	r2, #8
 801627e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8016280:	2302      	movs	r3, #2
 8016282:	75fb      	strb	r3, [r7, #23]
      break;
 8016284:	e005      	b.n	8016292 <USBH_MSC_RdWrProcess+0x1fe>

    default:
      break;
 8016286:	bf00      	nop
 8016288:	e004      	b.n	8016294 <USBH_MSC_RdWrProcess+0x200>
      break;
 801628a:	bf00      	nop
 801628c:	e002      	b.n	8016294 <USBH_MSC_RdWrProcess+0x200>
      break;
 801628e:	bf00      	nop
 8016290:	e000      	b.n	8016294 <USBH_MSC_RdWrProcess+0x200>
      break;
 8016292:	bf00      	nop

  }
  return error;
 8016294:	7dfb      	ldrb	r3, [r7, #23]
}
 8016296:	4618      	mov	r0, r3
 8016298:	3718      	adds	r7, #24
 801629a:	46bd      	mov	sp, r7
 801629c:	bd80      	pop	{r7, pc}
 801629e:	bf00      	nop
 80162a0:	0801d1a4 	.word	0x0801d1a4
 80162a4:	0801d1b4 	.word	0x0801d1b4
 80162a8:	0801d1d0 	.word	0x0801d1d0
 80162ac:	0801d144 	.word	0x0801d144

080162b0 <USBH_MSC_IsReady>:
  *         The function check if the MSC function is ready
  * @param  phost: Host handle
  * @retval USBH Status
  */
uint8_t USBH_MSC_IsReady(USBH_HandleTypeDef *phost)
{
 80162b0:	b480      	push	{r7}
 80162b2:	b085      	sub	sp, #20
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80162be:	69db      	ldr	r3, [r3, #28]
 80162c0:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->state == MSC_IDLE))
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	b2db      	uxtb	r3, r3
 80162c8:	2b0b      	cmp	r3, #11
 80162ca:	d106      	bne.n	80162da <USBH_MSC_IsReady+0x2a>
 80162cc:	68bb      	ldr	r3, [r7, #8]
 80162ce:	7b1b      	ldrb	r3, [r3, #12]
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d102      	bne.n	80162da <USBH_MSC_IsReady+0x2a>
  {
    res = 1U;
 80162d4:	2301      	movs	r3, #1
 80162d6:	73fb      	strb	r3, [r7, #15]
 80162d8:	e001      	b.n	80162de <USBH_MSC_IsReady+0x2e>
  }
  else
  {
    res = 0U;
 80162da:	2300      	movs	r3, #0
 80162dc:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80162de:	7bfb      	ldrb	r3, [r7, #15]
}
 80162e0:	4618      	mov	r0, r3
 80162e2:	3714      	adds	r7, #20
 80162e4:	46bd      	mov	sp, r7
 80162e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ea:	4770      	bx	lr

080162ec <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80162ec:	b480      	push	{r7}
 80162ee:	b085      	sub	sp, #20
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	460b      	mov	r3, r1
 80162f6:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80162fe:	69db      	ldr	r3, [r3, #28]
 8016300:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 8016302:	78fb      	ldrb	r3, [r7, #3]
 8016304:	b29a      	uxth	r2, r3
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	b2db      	uxtb	r3, r3
 8016312:	2b0b      	cmp	r3, #11
 8016314:	d10c      	bne.n	8016330 <USBH_MSC_UnitIsReady+0x44>
 8016316:	78fb      	ldrb	r3, [r7, #3]
 8016318:	68ba      	ldr	r2, [r7, #8]
 801631a:	2134      	movs	r1, #52	@ 0x34
 801631c:	fb01 f303 	mul.w	r3, r1, r3
 8016320:	4413      	add	r3, r2
 8016322:	3391      	adds	r3, #145	@ 0x91
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d102      	bne.n	8016330 <USBH_MSC_UnitIsReady+0x44>
  {
    res = 1U;
 801632a:	2301      	movs	r3, #1
 801632c:	73fb      	strb	r3, [r7, #15]
 801632e:	e001      	b.n	8016334 <USBH_MSC_UnitIsReady+0x48>
  }
  else
  {
    res = 0U;
 8016330:	2300      	movs	r3, #0
 8016332:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8016334:	7bfb      	ldrb	r3, [r7, #15]
}
 8016336:	4618      	mov	r0, r3
 8016338:	3714      	adds	r7, #20
 801633a:	46bd      	mov	sp, r7
 801633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016340:	4770      	bx	lr

08016342 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8016342:	b580      	push	{r7, lr}
 8016344:	b086      	sub	sp, #24
 8016346:	af00      	add	r7, sp, #0
 8016348:	60f8      	str	r0, [r7, #12]
 801634a:	460b      	mov	r3, r1
 801634c:	607a      	str	r2, [r7, #4]
 801634e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8016356:	69db      	ldr	r3, [r3, #28]
 8016358:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 801635a:	7afb      	ldrb	r3, [r7, #11]
 801635c:	b29a      	uxth	r2, r3
 801635e:	697b      	ldr	r3, [r7, #20]
 8016360:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if (phost->gState == HOST_CLASS)
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	781b      	ldrb	r3, [r3, #0]
 8016368:	b2db      	uxtb	r3, r3
 801636a:	2b0b      	cmp	r3, #11
 801636c:	d10d      	bne.n	801638a <USBH_MSC_GetLUNInfo+0x48>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 801636e:	7afb      	ldrb	r3, [r7, #11]
 8016370:	2234      	movs	r2, #52	@ 0x34
 8016372:	fb02 f303 	mul.w	r3, r2, r3
 8016376:	3390      	adds	r3, #144	@ 0x90
 8016378:	697a      	ldr	r2, [r7, #20]
 801637a:	4413      	add	r3, r2
 801637c:	2234      	movs	r2, #52	@ 0x34
 801637e:	4619      	mov	r1, r3
 8016380:	6878      	ldr	r0, [r7, #4]
 8016382:	f005 f9a6 	bl	801b6d2 <memcpy>
    return USBH_OK;
 8016386:	2300      	movs	r3, #0
 8016388:	e000      	b.n	801638c <USBH_MSC_GetLUNInfo+0x4a>
  }
  else
  {
    return USBH_FAIL;
 801638a:	2302      	movs	r3, #2
  }
}
 801638c:	4618      	mov	r0, r3
 801638e:	3718      	adds	r7, #24
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}

08016394 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b088      	sub	sp, #32
 8016398:	af02      	add	r7, sp, #8
 801639a:	60f8      	str	r0, [r7, #12]
 801639c:	607a      	str	r2, [r7, #4]
 801639e:	603b      	str	r3, [r7, #0]
 80163a0:	460b      	mov	r3, r1
 80163a2:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80163aa:	69db      	ldr	r3, [r3, #28]
 80163ac:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 80163ae:	7afb      	ldrb	r3, [r7, #11]
 80163b0:	b29a      	uxth	r2, r3
 80163b2:	697b      	ldr	r3, [r7, #20]
 80163b4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d00e      	beq.n	80163e2 <USBH_MSC_Read+0x4e>
      (phost->gState != HOST_CLASS) ||
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	781b      	ldrb	r3, [r3, #0]
 80163c8:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80163ca:	2b0b      	cmp	r3, #11
 80163cc:	d109      	bne.n	80163e2 <USBH_MSC_Read+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80163ce:	7afb      	ldrb	r3, [r7, #11]
 80163d0:	697a      	ldr	r2, [r7, #20]
 80163d2:	2134      	movs	r1, #52	@ 0x34
 80163d4:	fb01 f303 	mul.w	r3, r1, r3
 80163d8:	4413      	add	r3, r2
 80163da:	3390      	adds	r3, #144	@ 0x90
 80163dc:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80163de:	2b01      	cmp	r3, #1
 80163e0:	d001      	beq.n	80163e6 <USBH_MSC_Read+0x52>
  {
    return  USBH_FAIL;
 80163e2:	2302      	movs	r3, #2
 80163e4:	e032      	b.n	801644c <USBH_MSC_Read+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_READ;
 80163e6:	7afb      	ldrb	r3, [r7, #11]
 80163e8:	697a      	ldr	r2, [r7, #20]
 80163ea:	2134      	movs	r1, #52	@ 0x34
 80163ec:	fb01 f303 	mul.w	r3, r1, r3
 80163f0:	4413      	add	r3, r2
 80163f2:	3390      	adds	r3, #144	@ 0x90
 80163f4:	2206      	movs	r2, #6
 80163f6:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80163f8:	7af9      	ldrb	r1, [r7, #11]
 80163fa:	6a3b      	ldr	r3, [r7, #32]
 80163fc:	9300      	str	r3, [sp, #0]
 80163fe:	683b      	ldr	r3, [r7, #0]
 8016400:	687a      	ldr	r2, [r7, #4]
 8016402:	68f8      	ldr	r0, [r7, #12]
 8016404:	f000 fd7c 	bl	8016f00 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 801640e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8016410:	e013      	b.n	801643a <USBH_MSC_Read+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
 8016418:	693b      	ldr	r3, [r7, #16]
 801641a:	1ad2      	subs	r2, r2, r3
 801641c:	6a3b      	ldr	r3, [r7, #32]
 801641e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8016422:	fb01 f303 	mul.w	r3, r1, r3
 8016426:	429a      	cmp	r2, r3
 8016428:	d805      	bhi.n	8016436 <USBH_MSC_Read+0xa2>
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 8016430:	b2db      	uxtb	r3, r3
 8016432:	2b00      	cmp	r3, #0
 8016434:	d101      	bne.n	801643a <USBH_MSC_Read+0xa6>
    {
      return USBH_FAIL;
 8016436:	2302      	movs	r3, #2
 8016438:	e008      	b.n	801644c <USBH_MSC_Read+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 801643a:	7afb      	ldrb	r3, [r7, #11]
 801643c:	4619      	mov	r1, r3
 801643e:	68f8      	ldr	r0, [r7, #12]
 8016440:	f7ff fe28 	bl	8016094 <USBH_MSC_RdWrProcess>
 8016444:	4603      	mov	r3, r0
 8016446:	2b01      	cmp	r3, #1
 8016448:	d0e3      	beq.n	8016412 <USBH_MSC_Read+0x7e>
    }
  }

  return USBH_OK;
 801644a:	2300      	movs	r3, #0
}
 801644c:	4618      	mov	r0, r3
 801644e:	3718      	adds	r7, #24
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b088      	sub	sp, #32
 8016458:	af02      	add	r7, sp, #8
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	607a      	str	r2, [r7, #4]
 801645e:	603b      	str	r3, [r7, #0]
 8016460:	460b      	mov	r3, r1
 8016462:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 801646a:	69db      	ldr	r3, [r3, #28]
 801646c:	617b      	str	r3, [r7, #20]

  /* Store the current lun */
  MSC_Handle->current_lun = lun;
 801646e:	7afb      	ldrb	r3, [r7, #11]
 8016470:	b29a      	uxth	r2, r3
 8016472:	697b      	ldr	r3, [r7, #20]
 8016474:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  if ((phost->device.is_connected == 0U) ||
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 801647e:	b2db      	uxtb	r3, r3
 8016480:	2b00      	cmp	r3, #0
 8016482:	d00e      	beq.n	80164a2 <USBH_MSC_Write+0x4e>
      (phost->gState != HOST_CLASS) ||
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 801648a:	2b0b      	cmp	r3, #11
 801648c:	d109      	bne.n	80164a2 <USBH_MSC_Write+0x4e>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 801648e:	7afb      	ldrb	r3, [r7, #11]
 8016490:	697a      	ldr	r2, [r7, #20]
 8016492:	2134      	movs	r1, #52	@ 0x34
 8016494:	fb01 f303 	mul.w	r3, r1, r3
 8016498:	4413      	add	r3, r2
 801649a:	3390      	adds	r3, #144	@ 0x90
 801649c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 801649e:	2b01      	cmp	r3, #1
 80164a0:	d001      	beq.n	80164a6 <USBH_MSC_Write+0x52>
  {
    return  USBH_FAIL;
 80164a2:	2302      	movs	r3, #2
 80164a4:	e032      	b.n	801650c <USBH_MSC_Write+0xb8>
  }

  MSC_Handle->unit[lun].state = MSC_WRITE;
 80164a6:	7afb      	ldrb	r3, [r7, #11]
 80164a8:	697a      	ldr	r2, [r7, #20]
 80164aa:	2134      	movs	r1, #52	@ 0x34
 80164ac:	fb01 f303 	mul.w	r3, r1, r3
 80164b0:	4413      	add	r3, r2
 80164b2:	3390      	adds	r3, #144	@ 0x90
 80164b4:	2207      	movs	r2, #7
 80164b6:	701a      	strb	r2, [r3, #0]

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80164b8:	7af9      	ldrb	r1, [r7, #11]
 80164ba:	6a3b      	ldr	r3, [r7, #32]
 80164bc:	9300      	str	r3, [sp, #0]
 80164be:	683b      	ldr	r3, [r7, #0]
 80164c0:	687a      	ldr	r2, [r7, #4]
 80164c2:	68f8      	ldr	r0, [r7, #12]
 80164c4:	f000 fcac 	bl	8016e20 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 80164ce:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80164d0:	e013      	b.n	80164fa <USBH_MSC_Write+0xa6>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	f8d3 24c4 	ldr.w	r2, [r3, #1220]	@ 0x4c4
 80164d8:	693b      	ldr	r3, [r7, #16]
 80164da:	1ad2      	subs	r2, r2, r3
 80164dc:	6a3b      	ldr	r3, [r7, #32]
 80164de:	f242 7110 	movw	r1, #10000	@ 0x2710
 80164e2:	fb01 f303 	mul.w	r3, r1, r3
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d805      	bhi.n	80164f6 <USBH_MSC_Write+0xa2>
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 80164f0:	b2db      	uxtb	r3, r3
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d101      	bne.n	80164fa <USBH_MSC_Write+0xa6>
    {
      return USBH_FAIL;
 80164f6:	2302      	movs	r3, #2
 80164f8:	e008      	b.n	801650c <USBH_MSC_Write+0xb8>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80164fa:	7afb      	ldrb	r3, [r7, #11]
 80164fc:	4619      	mov	r1, r3
 80164fe:	68f8      	ldr	r0, [r7, #12]
 8016500:	f7ff fdc8 	bl	8016094 <USBH_MSC_RdWrProcess>
 8016504:	4603      	mov	r3, r0
 8016506:	2b01      	cmp	r3, #1
 8016508:	d0e3      	beq.n	80164d2 <USBH_MSC_Write+0x7e>
    }
  }

  return USBH_OK;
 801650a:	2300      	movs	r3, #0
}
 801650c:	4618      	mov	r0, r3
 801650e:	3718      	adds	r7, #24
 8016510:	46bd      	mov	sp, r7
 8016512:	bd80      	pop	{r7, pc}

08016514 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b082      	sub	sp, #8
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2221      	movs	r2, #33	@ 0x21
 8016520:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	22ff      	movs	r2, #255	@ 0xff
 8016526:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	2200      	movs	r2, #0
 801652c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	2200      	movs	r2, #0
 8016532:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	2200      	movs	r2, #0
 8016538:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 801653a:	2200      	movs	r2, #0
 801653c:	2100      	movs	r1, #0
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f002 f93f 	bl	80187c2 <USBH_CtlReq>
 8016544:	4603      	mov	r3, r0
}
 8016546:	4618      	mov	r0, r3
 8016548:	3708      	adds	r7, #8
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}

0801654e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 801654e:	b580      	push	{r7, lr}
 8016550:	b082      	sub	sp, #8
 8016552:	af00      	add	r7, sp, #0
 8016554:	6078      	str	r0, [r7, #4]
 8016556:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	22a1      	movs	r2, #161	@ 0xa1
 801655c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	22fe      	movs	r2, #254	@ 0xfe
 8016562:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	2200      	movs	r2, #0
 8016568:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	2200      	movs	r2, #0
 801656e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	2201      	movs	r2, #1
 8016574:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8016576:	2201      	movs	r2, #1
 8016578:	6839      	ldr	r1, [r7, #0]
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f002 f921 	bl	80187c2 <USBH_CtlReq>
 8016580:	4603      	mov	r3, r0
}
 8016582:	4618      	mov	r0, r3
 8016584:	3708      	adds	r7, #8
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
	...

0801658c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 801658c:	b480      	push	{r7}
 801658e:	b085      	sub	sp, #20
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 801659a:	69db      	ldr	r3, [r3, #28]
 801659c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	4a09      	ldr	r2, [pc, #36]	@ (80165c8 <USBH_MSC_BOT_Init+0x3c>)
 80165a2:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	4a09      	ldr	r2, [pc, #36]	@ (80165cc <USBH_MSC_BOT_Init+0x40>)
 80165a8:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	2201      	movs	r2, #1
 80165ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80165b2:	68fb      	ldr	r3, [r7, #12]
 80165b4:	2201      	movs	r2, #1
 80165b6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 80165ba:	2300      	movs	r3, #0
}
 80165bc:	4618      	mov	r0, r3
 80165be:	3714      	adds	r7, #20
 80165c0:	46bd      	mov	sp, r7
 80165c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c6:	4770      	bx	lr
 80165c8:	43425355 	.word	0x43425355
 80165cc:	20304050 	.word	0x20304050

080165d0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b088      	sub	sp, #32
 80165d4:	af02      	add	r7, sp, #8
 80165d6:	6078      	str	r0, [r7, #4]
 80165d8:	460b      	mov	r3, r1
 80165da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80165dc:	2301      	movs	r3, #1
 80165de:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80165e0:	2301      	movs	r3, #1
 80165e2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80165e4:	2301      	movs	r3, #1
 80165e6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80165e8:	2300      	movs	r3, #0
 80165ea:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80165f2:	69db      	ldr	r3, [r3, #28]
 80165f4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80165f6:	2300      	movs	r3, #0
 80165f8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80165fa:	693b      	ldr	r3, [r7, #16]
 80165fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016600:	3b01      	subs	r3, #1
 8016602:	2b0a      	cmp	r3, #10
 8016604:	f200 819e 	bhi.w	8016944 <USBH_MSC_BOT_Process+0x374>
 8016608:	a201      	add	r2, pc, #4	@ (adr r2, 8016610 <USBH_MSC_BOT_Process+0x40>)
 801660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801660e:	bf00      	nop
 8016610:	0801663d 	.word	0x0801663d
 8016614:	08016665 	.word	0x08016665
 8016618:	080166cf 	.word	0x080166cf
 801661c:	080166ed 	.word	0x080166ed
 8016620:	08016771 	.word	0x08016771
 8016624:	08016793 	.word	0x08016793
 8016628:	0801682b 	.word	0x0801682b
 801662c:	08016847 	.word	0x08016847
 8016630:	08016899 	.word	0x08016899
 8016634:	080168c9 	.word	0x080168c9
 8016638:	0801692b 	.word	0x0801692b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	78fa      	ldrb	r2, [r7, #3]
 8016640:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	2202      	movs	r2, #2
 8016648:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 801664c:	693b      	ldr	r3, [r7, #16]
 801664e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	795b      	ldrb	r3, [r3, #5]
 8016656:	2201      	movs	r2, #1
 8016658:	9200      	str	r2, [sp, #0]
 801665a:	221f      	movs	r2, #31
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f002 facc 	bl	8018bfa <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8016662:	e17e      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	795b      	ldrb	r3, [r3, #5]
 8016668:	4619      	mov	r1, r3
 801666a:	6878      	ldr	r0, [r7, #4]
 801666c:	f7eb f91d 	bl	80018aa <USBH_LL_GetURBState>
 8016670:	4603      	mov	r3, r0
 8016672:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8016674:	7d3b      	ldrb	r3, [r7, #20]
 8016676:	2b01      	cmp	r3, #1
 8016678:	d118      	bne.n	80166ac <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 801667a:	693b      	ldr	r3, [r7, #16]
 801667c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801667e:	2b00      	cmp	r3, #0
 8016680:	d00f      	beq.n	80166a2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8016682:	693b      	ldr	r3, [r7, #16]
 8016684:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8016688:	b25b      	sxtb	r3, r3
 801668a:	2b00      	cmp	r3, #0
 801668c:	da04      	bge.n	8016698 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 801668e:	693b      	ldr	r3, [r7, #16]
 8016690:	2203      	movs	r2, #3
 8016692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8016696:	e157      	b.n	8016948 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	2205      	movs	r2, #5
 801669c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80166a0:	e152      	b.n	8016948 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80166a2:	693b      	ldr	r3, [r7, #16]
 80166a4:	2207      	movs	r2, #7
 80166a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80166aa:	e14d      	b.n	8016948 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80166ac:	7d3b      	ldrb	r3, [r7, #20]
 80166ae:	2b02      	cmp	r3, #2
 80166b0:	d104      	bne.n	80166bc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80166b2:	693b      	ldr	r3, [r7, #16]
 80166b4:	2201      	movs	r2, #1
 80166b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80166ba:	e145      	b.n	8016948 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80166bc:	7d3b      	ldrb	r3, [r7, #20]
 80166be:	2b05      	cmp	r3, #5
 80166c0:	f040 8142 	bne.w	8016948 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 80166c4:	693b      	ldr	r3, [r7, #16]
 80166c6:	220a      	movs	r2, #10
 80166c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80166cc:	e13c      	b.n	8016948 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80166ce:	693b      	ldr	r3, [r7, #16]
 80166d0:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80166d4:	693b      	ldr	r3, [r7, #16]
 80166d6:	895a      	ldrh	r2, [r3, #10]
 80166d8:	693b      	ldr	r3, [r7, #16]
 80166da:	791b      	ldrb	r3, [r3, #4]
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f002 fab1 	bl	8018c44 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	2204      	movs	r2, #4
 80166e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 80166ea:	e13a      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80166ec:	693b      	ldr	r3, [r7, #16]
 80166ee:	791b      	ldrb	r3, [r3, #4]
 80166f0:	4619      	mov	r1, r3
 80166f2:	6878      	ldr	r0, [r7, #4]
 80166f4:	f7eb f8d9 	bl	80018aa <USBH_LL_GetURBState>
 80166f8:	4603      	mov	r3, r0
 80166fa:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80166fc:	7d3b      	ldrb	r3, [r7, #20]
 80166fe:	2b01      	cmp	r3, #1
 8016700:	d12d      	bne.n	801675e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8016702:	693b      	ldr	r3, [r7, #16]
 8016704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016706:	693a      	ldr	r2, [r7, #16]
 8016708:	8952      	ldrh	r2, [r2, #10]
 801670a:	4293      	cmp	r3, r2
 801670c:	d910      	bls.n	8016730 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 801670e:	693b      	ldr	r3, [r7, #16]
 8016710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016714:	693a      	ldr	r2, [r7, #16]
 8016716:	8952      	ldrh	r2, [r2, #10]
 8016718:	441a      	add	r2, r3
 801671a:	693b      	ldr	r3, [r7, #16]
 801671c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8016720:	693b      	ldr	r3, [r7, #16]
 8016722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016724:	693a      	ldr	r2, [r7, #16]
 8016726:	8952      	ldrh	r2, [r2, #10]
 8016728:	1a9a      	subs	r2, r3, r2
 801672a:	693b      	ldr	r3, [r7, #16]
 801672c:	65da      	str	r2, [r3, #92]	@ 0x5c
 801672e:	e002      	b.n	8016736 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	2200      	movs	r2, #0
 8016734:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8016736:	693b      	ldr	r3, [r7, #16]
 8016738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801673a:	2b00      	cmp	r3, #0
 801673c:	d00a      	beq.n	8016754 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 801673e:	693b      	ldr	r3, [r7, #16]
 8016740:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	895a      	ldrh	r2, [r3, #10]
 8016748:	693b      	ldr	r3, [r7, #16]
 801674a:	791b      	ldrb	r3, [r3, #4]
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f002 fa79 	bl	8018c44 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8016752:	e0fb      	b.n	801694c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	2207      	movs	r2, #7
 8016758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801675c:	e0f6      	b.n	801694c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 801675e:	7d3b      	ldrb	r3, [r7, #20]
 8016760:	2b05      	cmp	r3, #5
 8016762:	f040 80f3 	bne.w	801694c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	2209      	movs	r2, #9
 801676a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 801676e:	e0ed      	b.n	801694c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8016776:	693b      	ldr	r3, [r7, #16]
 8016778:	891a      	ldrh	r2, [r3, #8]
 801677a:	693b      	ldr	r3, [r7, #16]
 801677c:	795b      	ldrb	r3, [r3, #5]
 801677e:	2001      	movs	r0, #1
 8016780:	9000      	str	r0, [sp, #0]
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f002 fa39 	bl	8018bfa <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8016788:	693b      	ldr	r3, [r7, #16]
 801678a:	2206      	movs	r2, #6
 801678c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8016790:	e0e7      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8016792:	693b      	ldr	r3, [r7, #16]
 8016794:	795b      	ldrb	r3, [r3, #5]
 8016796:	4619      	mov	r1, r3
 8016798:	6878      	ldr	r0, [r7, #4]
 801679a:	f7eb f886 	bl	80018aa <USBH_LL_GetURBState>
 801679e:	4603      	mov	r3, r0
 80167a0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80167a2:	7d3b      	ldrb	r3, [r7, #20]
 80167a4:	2b01      	cmp	r3, #1
 80167a6:	d12f      	bne.n	8016808 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80167a8:	693b      	ldr	r3, [r7, #16]
 80167aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80167ac:	693a      	ldr	r2, [r7, #16]
 80167ae:	8912      	ldrh	r2, [r2, #8]
 80167b0:	4293      	cmp	r3, r2
 80167b2:	d910      	bls.n	80167d6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80167b4:	693b      	ldr	r3, [r7, #16]
 80167b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80167ba:	693a      	ldr	r2, [r7, #16]
 80167bc:	8912      	ldrh	r2, [r2, #8]
 80167be:	441a      	add	r2, r3
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80167ca:	693a      	ldr	r2, [r7, #16]
 80167cc:	8912      	ldrh	r2, [r2, #8]
 80167ce:	1a9a      	subs	r2, r3, r2
 80167d0:	693b      	ldr	r3, [r7, #16]
 80167d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80167d4:	e002      	b.n	80167dc <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80167d6:	693b      	ldr	r3, [r7, #16]
 80167d8:	2200      	movs	r2, #0
 80167da:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80167dc:	693b      	ldr	r3, [r7, #16]
 80167de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d00c      	beq.n	80167fe <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80167ea:	693b      	ldr	r3, [r7, #16]
 80167ec:	891a      	ldrh	r2, [r3, #8]
 80167ee:	693b      	ldr	r3, [r7, #16]
 80167f0:	795b      	ldrb	r3, [r3, #5]
 80167f2:	2001      	movs	r0, #1
 80167f4:	9000      	str	r0, [sp, #0]
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f002 f9ff 	bl	8018bfa <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 80167fc:	e0a8      	b.n	8016950 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	2207      	movs	r2, #7
 8016802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8016806:	e0a3      	b.n	8016950 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8016808:	7d3b      	ldrb	r3, [r7, #20]
 801680a:	2b02      	cmp	r3, #2
 801680c:	d104      	bne.n	8016818 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 801680e:	693b      	ldr	r3, [r7, #16]
 8016810:	2205      	movs	r2, #5
 8016812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8016816:	e09b      	b.n	8016950 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8016818:	7d3b      	ldrb	r3, [r7, #20]
 801681a:	2b05      	cmp	r3, #5
 801681c:	f040 8098 	bne.w	8016950 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8016820:	693b      	ldr	r3, [r7, #16]
 8016822:	220a      	movs	r2, #10
 8016824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8016828:	e092      	b.n	8016950 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 801682a:	693b      	ldr	r3, [r7, #16]
 801682c:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	791b      	ldrb	r3, [r3, #4]
 8016834:	220d      	movs	r2, #13
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f002 fa04 	bl	8018c44 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	2208      	movs	r2, #8
 8016840:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8016844:	e08d      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8016846:	693b      	ldr	r3, [r7, #16]
 8016848:	791b      	ldrb	r3, [r3, #4]
 801684a:	4619      	mov	r1, r3
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f7eb f82c 	bl	80018aa <USBH_LL_GetURBState>
 8016852:	4603      	mov	r3, r0
 8016854:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8016856:	7d3b      	ldrb	r3, [r7, #20]
 8016858:	2b01      	cmp	r3, #1
 801685a:	d115      	bne.n	8016888 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 801685c:	693b      	ldr	r3, [r7, #16]
 801685e:	2201      	movs	r2, #1
 8016860:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8016864:	693b      	ldr	r3, [r7, #16]
 8016866:	2201      	movs	r2, #1
 8016868:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 f8a9 	bl	80169c4 <USBH_MSC_DecodeCSW>
 8016872:	4603      	mov	r3, r0
 8016874:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8016876:	7d7b      	ldrb	r3, [r7, #21]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d102      	bne.n	8016882 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 801687c:	2300      	movs	r3, #0
 801687e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8016880:	e068      	b.n	8016954 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8016882:	2302      	movs	r3, #2
 8016884:	75fb      	strb	r3, [r7, #23]
      break;
 8016886:	e065      	b.n	8016954 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8016888:	7d3b      	ldrb	r3, [r7, #20]
 801688a:	2b05      	cmp	r3, #5
 801688c:	d162      	bne.n	8016954 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 801688e:	693b      	ldr	r3, [r7, #16]
 8016890:	2209      	movs	r2, #9
 8016892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8016896:	e05d      	b.n	8016954 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8016898:	78fb      	ldrb	r3, [r7, #3]
 801689a:	2200      	movs	r2, #0
 801689c:	4619      	mov	r1, r3
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f000 f864 	bl	801696c <USBH_MSC_BOT_Abort>
 80168a4:	4603      	mov	r3, r0
 80168a6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80168a8:	7dbb      	ldrb	r3, [r7, #22]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d104      	bne.n	80168b8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80168ae:	693b      	ldr	r3, [r7, #16]
 80168b0:	2207      	movs	r2, #7
 80168b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80168b6:	e04f      	b.n	8016958 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80168b8:	7dbb      	ldrb	r3, [r7, #22]
 80168ba:	2b04      	cmp	r3, #4
 80168bc:	d14c      	bne.n	8016958 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	220b      	movs	r2, #11
 80168c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80168c6:	e047      	b.n	8016958 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80168c8:	78fb      	ldrb	r3, [r7, #3]
 80168ca:	2201      	movs	r2, #1
 80168cc:	4619      	mov	r1, r3
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f000 f84c 	bl	801696c <USBH_MSC_BOT_Abort>
 80168d4:	4603      	mov	r3, r0
 80168d6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80168d8:	7dbb      	ldrb	r3, [r7, #22]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d11d      	bne.n	801691a <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80168de:	693b      	ldr	r3, [r7, #16]
 80168e0:	795b      	ldrb	r3, [r3, #5]
 80168e2:	4619      	mov	r1, r3
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f7eb f843 	bl	8001970 <USBH_LL_GetToggle>
 80168ea:	4603      	mov	r3, r0
 80168ec:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	7959      	ldrb	r1, [r3, #5]
 80168f2:	7bfb      	ldrb	r3, [r7, #15]
 80168f4:	f1c3 0301 	rsb	r3, r3, #1
 80168f8:	b2db      	uxtb	r3, r3
 80168fa:	461a      	mov	r2, r3
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f7eb f805 	bl	800190c <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8016902:	693b      	ldr	r3, [r7, #16]
 8016904:	791b      	ldrb	r3, [r3, #4]
 8016906:	2200      	movs	r2, #0
 8016908:	4619      	mov	r1, r3
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f7ea fffe 	bl	800190c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8016910:	693b      	ldr	r3, [r7, #16]
 8016912:	2209      	movs	r2, #9
 8016914:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8016918:	e020      	b.n	801695c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 801691a:	7dbb      	ldrb	r3, [r7, #22]
 801691c:	2b04      	cmp	r3, #4
 801691e:	d11d      	bne.n	801695c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8016920:	693b      	ldr	r3, [r7, #16]
 8016922:	220b      	movs	r2, #11
 8016924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8016928:	e018      	b.n	801695c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 801692a:	6878      	ldr	r0, [r7, #4]
 801692c:	f7ff fdf2 	bl	8016514 <USBH_MSC_BOT_REQ_Reset>
 8016930:	4603      	mov	r3, r0
 8016932:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8016934:	7dfb      	ldrb	r3, [r7, #23]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d112      	bne.n	8016960 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 801693a:	693b      	ldr	r3, [r7, #16]
 801693c:	2201      	movs	r2, #1
 801693e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8016942:	e00d      	b.n	8016960 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8016944:	bf00      	nop
 8016946:	e00c      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>
      break;
 8016948:	bf00      	nop
 801694a:	e00a      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>
      break;
 801694c:	bf00      	nop
 801694e:	e008      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>
      break;
 8016950:	bf00      	nop
 8016952:	e006      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>
      break;
 8016954:	bf00      	nop
 8016956:	e004      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>
      break;
 8016958:	bf00      	nop
 801695a:	e002      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>
      break;
 801695c:	bf00      	nop
 801695e:	e000      	b.n	8016962 <USBH_MSC_BOT_Process+0x392>
      break;
 8016960:	bf00      	nop
  }
  return status;
 8016962:	7dfb      	ldrb	r3, [r7, #23]
}
 8016964:	4618      	mov	r0, r3
 8016966:	3718      	adds	r7, #24
 8016968:	46bd      	mov	sp, r7
 801696a:	bd80      	pop	{r7, pc}

0801696c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b084      	sub	sp, #16
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	460b      	mov	r3, r1
 8016976:	70fb      	strb	r3, [r7, #3]
 8016978:	4613      	mov	r3, r2
 801697a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 801697c:	2302      	movs	r3, #2
 801697e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8016986:	69db      	ldr	r3, [r3, #28]
 8016988:	60bb      	str	r3, [r7, #8]

  switch (dir)
 801698a:	78bb      	ldrb	r3, [r7, #2]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d002      	beq.n	8016996 <USBH_MSC_BOT_Abort+0x2a>
 8016990:	2b01      	cmp	r3, #1
 8016992:	d009      	beq.n	80169a8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8016994:	e011      	b.n	80169ba <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8016996:	68bb      	ldr	r3, [r7, #8]
 8016998:	79db      	ldrb	r3, [r3, #7]
 801699a:	4619      	mov	r1, r3
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f001 fbdb 	bl	8018158 <USBH_ClrFeature>
 80169a2:	4603      	mov	r3, r0
 80169a4:	73fb      	strb	r3, [r7, #15]
      break;
 80169a6:	e008      	b.n	80169ba <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	799b      	ldrb	r3, [r3, #6]
 80169ac:	4619      	mov	r1, r3
 80169ae:	6878      	ldr	r0, [r7, #4]
 80169b0:	f001 fbd2 	bl	8018158 <USBH_ClrFeature>
 80169b4:	4603      	mov	r3, r0
 80169b6:	73fb      	strb	r3, [r7, #15]
      break;
 80169b8:	bf00      	nop
  }
  return status;
 80169ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80169bc:	4618      	mov	r0, r3
 80169be:	3710      	adds	r7, #16
 80169c0:	46bd      	mov	sp, r7
 80169c2:	bd80      	pop	{r7, pc}

080169c4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b084      	sub	sp, #16
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80169d2:	69db      	ldr	r3, [r3, #28]
 80169d4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80169d6:	2301      	movs	r3, #1
 80169d8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80169da:	68bb      	ldr	r3, [r7, #8]
 80169dc:	791b      	ldrb	r3, [r3, #4]
 80169de:	4619      	mov	r1, r3
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f7ea fef7 	bl	80017d4 <USBH_LL_GetLastXferSize>
 80169e6:	4603      	mov	r3, r0
 80169e8:	2b0d      	cmp	r3, #13
 80169ea:	d002      	beq.n	80169f2 <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 80169ec:	2302      	movs	r3, #2
 80169ee:	73fb      	strb	r3, [r7, #15]
 80169f0:	e024      	b.n	8016a3c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80169f6:	4a14      	ldr	r2, [pc, #80]	@ (8016a48 <USBH_MSC_DecodeCSW+0x84>)
 80169f8:	4293      	cmp	r3, r2
 80169fa:	d11d      	bne.n	8016a38 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80169fc:	68bb      	ldr	r3, [r7, #8]
 80169fe:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8016a00:	68bb      	ldr	r3, [r7, #8]
 8016a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016a04:	429a      	cmp	r2, r3
 8016a06:	d119      	bne.n	8016a3c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8016a08:	68bb      	ldr	r3, [r7, #8]
 8016a0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d102      	bne.n	8016a18 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 8016a12:	2300      	movs	r3, #0
 8016a14:	73fb      	strb	r3, [r7, #15]
 8016a16:	e011      	b.n	8016a3c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016a1e:	2b01      	cmp	r3, #1
 8016a20:	d102      	bne.n	8016a28 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8016a22:	2301      	movs	r3, #1
 8016a24:	73fb      	strb	r3, [r7, #15]
 8016a26:	e009      	b.n	8016a3c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8016a2e:	2b02      	cmp	r3, #2
 8016a30:	d104      	bne.n	8016a3c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8016a32:	2302      	movs	r3, #2
 8016a34:	73fb      	strb	r3, [r7, #15]
 8016a36:	e001      	b.n	8016a3c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8016a38:	2302      	movs	r3, #2
 8016a3a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8016a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a3e:	4618      	mov	r0, r3
 8016a40:	3710      	adds	r7, #16
 8016a42:	46bd      	mov	sp, r7
 8016a44:	bd80      	pop	{r7, pc}
 8016a46:	bf00      	nop
 8016a48:	53425355 	.word	0x53425355

08016a4c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b084      	sub	sp, #16
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
 8016a54:	460b      	mov	r3, r1
 8016a56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 8016a58:	2302      	movs	r3, #2
 8016a5a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8016a62:	69db      	ldr	r3, [r3, #28]
 8016a64:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8016a6c:	2b01      	cmp	r3, #1
 8016a6e:	d002      	beq.n	8016a76 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8016a70:	2b02      	cmp	r3, #2
 8016a72:	d021      	beq.n	8016ab8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8016a74:	e028      	b.n	8016ac8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8016a76:	68bb      	ldr	r3, [r7, #8]
 8016a78:	2200      	movs	r2, #0
 8016a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8016a7c:	68bb      	ldr	r3, [r7, #8]
 8016a7e:	2200      	movs	r2, #0
 8016a80:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	220a      	movs	r2, #10
 8016a88:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	3363      	adds	r3, #99	@ 0x63
 8016a90:	2210      	movs	r2, #16
 8016a92:	2100      	movs	r1, #0
 8016a94:	4618      	mov	r0, r3
 8016a96:	f004 fd67 	bl	801b568 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 8016a9a:	68bb      	ldr	r3, [r7, #8]
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016aa2:	68bb      	ldr	r3, [r7, #8]
 8016aa4:	2201      	movs	r2, #1
 8016aa6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016aaa:	68bb      	ldr	r3, [r7, #8]
 8016aac:	2202      	movs	r2, #2
 8016aae:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8016ab6:	e007      	b.n	8016ac8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8016ab8:	78fb      	ldrb	r3, [r7, #3]
 8016aba:	4619      	mov	r1, r3
 8016abc:	6878      	ldr	r0, [r7, #4]
 8016abe:	f7ff fd87 	bl	80165d0 <USBH_MSC_BOT_Process>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8016ac6:	bf00      	nop
  }

  return error;
 8016ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3710      	adds	r7, #16
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}

08016ad2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8016ad2:	b580      	push	{r7, lr}
 8016ad4:	b086      	sub	sp, #24
 8016ad6:	af00      	add	r7, sp, #0
 8016ad8:	60f8      	str	r0, [r7, #12]
 8016ada:	460b      	mov	r3, r1
 8016adc:	607a      	str	r2, [r7, #4]
 8016ade:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 8016ae0:	2301      	movs	r3, #1
 8016ae2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8016aea:	69db      	ldr	r3, [r3, #28]
 8016aec:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8016af4:	2b01      	cmp	r3, #1
 8016af6:	d002      	beq.n	8016afe <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8016af8:	2b02      	cmp	r3, #2
 8016afa:	d027      	beq.n	8016b4c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8016afc:	e05e      	b.n	8016bbc <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	2208      	movs	r2, #8
 8016b02:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016b04:	693b      	ldr	r3, [r7, #16]
 8016b06:	2280      	movs	r2, #128	@ 0x80
 8016b08:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	220a      	movs	r2, #10
 8016b10:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	3363      	adds	r3, #99	@ 0x63
 8016b18:	2210      	movs	r2, #16
 8016b1a:	2100      	movs	r1, #0
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f004 fd23 	bl	801b568 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	2225      	movs	r2, #37	@ 0x25
 8016b26:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016b2a:	693b      	ldr	r3, [r7, #16]
 8016b2c:	2201      	movs	r2, #1
 8016b2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	2202      	movs	r2, #2
 8016b36:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016b3a:	693b      	ldr	r3, [r7, #16]
 8016b3c:	f103 0210 	add.w	r2, r3, #16
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8016b46:	2301      	movs	r3, #1
 8016b48:	75fb      	strb	r3, [r7, #23]
      break;
 8016b4a:	e037      	b.n	8016bbc <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 8016b4c:	7afb      	ldrb	r3, [r7, #11]
 8016b4e:	4619      	mov	r1, r3
 8016b50:	68f8      	ldr	r0, [r7, #12]
 8016b52:	f7ff fd3d 	bl	80165d0 <USBH_MSC_BOT_Process>
 8016b56:	4603      	mov	r3, r0
 8016b58:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8016b5a:	7dfb      	ldrb	r3, [r7, #23]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d12c      	bne.n	8016bba <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8016b60:	693b      	ldr	r3, [r7, #16]
 8016b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016b66:	3303      	adds	r3, #3
 8016b68:	781b      	ldrb	r3, [r3, #0]
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	693b      	ldr	r3, [r7, #16]
 8016b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016b72:	3302      	adds	r3, #2
 8016b74:	781b      	ldrb	r3, [r3, #0]
 8016b76:	021b      	lsls	r3, r3, #8
 8016b78:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016b80:	3301      	adds	r3, #1
 8016b82:	781b      	ldrb	r3, [r3, #0]
 8016b84:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8016b86:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016b8e:	781b      	ldrb	r3, [r3, #0]
 8016b90:	061b      	lsls	r3, r3, #24
 8016b92:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8016b98:	693b      	ldr	r3, [r7, #16]
 8016b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016b9e:	3307      	adds	r3, #7
 8016ba0:	781b      	ldrb	r3, [r3, #0]
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	693b      	ldr	r3, [r7, #16]
 8016ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016baa:	3306      	adds	r3, #6
 8016bac:	781b      	ldrb	r3, [r3, #0]
 8016bae:	021b      	lsls	r3, r3, #8
 8016bb0:	b29b      	uxth	r3, r3
 8016bb2:	4313      	orrs	r3, r2
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	809a      	strh	r2, [r3, #4]
      break;
 8016bba:	bf00      	nop
  }

  return error;
 8016bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3718      	adds	r7, #24
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}

08016bc6 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8016bc6:	b580      	push	{r7, lr}
 8016bc8:	b086      	sub	sp, #24
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	60f8      	str	r0, [r7, #12]
 8016bce:	460b      	mov	r3, r1
 8016bd0:	607a      	str	r2, [r7, #4]
 8016bd2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8016bd4:	2302      	movs	r3, #2
 8016bd6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8016bde:	69db      	ldr	r3, [r3, #28]
 8016be0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8016be8:	2b01      	cmp	r3, #1
 8016bea:	d002      	beq.n	8016bf2 <USBH_MSC_SCSI_Inquiry+0x2c>
 8016bec:	2b02      	cmp	r3, #2
 8016bee:	d03d      	beq.n	8016c6c <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8016bf0:	e089      	b.n	8016d06 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	2224      	movs	r2, #36	@ 0x24
 8016bf6:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	2280      	movs	r2, #128	@ 0x80
 8016bfc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016c00:	693b      	ldr	r3, [r7, #16]
 8016c02:	220a      	movs	r2, #10
 8016c04:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8016c08:	693b      	ldr	r3, [r7, #16]
 8016c0a:	3363      	adds	r3, #99	@ 0x63
 8016c0c:	220a      	movs	r2, #10
 8016c0e:	2100      	movs	r1, #0
 8016c10:	4618      	mov	r0, r3
 8016c12:	f004 fca9 	bl	801b568 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 8016c16:	693b      	ldr	r3, [r7, #16]
 8016c18:	2212      	movs	r2, #18
 8016c1a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8016c1e:	7afb      	ldrb	r3, [r7, #11]
 8016c20:	015b      	lsls	r3, r3, #5
 8016c22:	b2da      	uxtb	r2, r3
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8016c2a:	693b      	ldr	r3, [r7, #16]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8016c32:	693b      	ldr	r3, [r7, #16]
 8016c34:	2200      	movs	r2, #0
 8016c36:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 8016c3a:	693b      	ldr	r3, [r7, #16]
 8016c3c:	2224      	movs	r2, #36	@ 0x24
 8016c3e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8016c42:	693b      	ldr	r3, [r7, #16]
 8016c44:	2200      	movs	r2, #0
 8016c46:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016c4a:	693b      	ldr	r3, [r7, #16]
 8016c4c:	2201      	movs	r2, #1
 8016c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016c52:	693b      	ldr	r3, [r7, #16]
 8016c54:	2202      	movs	r2, #2
 8016c56:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016c5a:	693b      	ldr	r3, [r7, #16]
 8016c5c:	f103 0210 	add.w	r2, r3, #16
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8016c66:	2301      	movs	r3, #1
 8016c68:	75fb      	strb	r3, [r7, #23]
      break;
 8016c6a:	e04c      	b.n	8016d06 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8016c6c:	7afb      	ldrb	r3, [r7, #11]
 8016c6e:	4619      	mov	r1, r3
 8016c70:	68f8      	ldr	r0, [r7, #12]
 8016c72:	f7ff fcad 	bl	80165d0 <USBH_MSC_BOT_Process>
 8016c76:	4603      	mov	r3, r0
 8016c78:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8016c7a:	7dfb      	ldrb	r3, [r7, #23]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d141      	bne.n	8016d04 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8016c80:	2222      	movs	r2, #34	@ 0x22
 8016c82:	2100      	movs	r1, #0
 8016c84:	6878      	ldr	r0, [r7, #4]
 8016c86:	f004 fc6f 	bl	801b568 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8016c8a:	693b      	ldr	r3, [r7, #16]
 8016c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016c90:	781b      	ldrb	r3, [r3, #0]
 8016c92:	f003 031f 	and.w	r3, r3, #31
 8016c96:	b2da      	uxtb	r2, r3
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8016c9c:	693b      	ldr	r3, [r7, #16]
 8016c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	095b      	lsrs	r3, r3, #5
 8016ca6:	b2da      	uxtb	r2, r3
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8016cac:	693b      	ldr	r3, [r7, #16]
 8016cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016cb2:	3301      	adds	r3, #1
 8016cb4:	781b      	ldrb	r3, [r3, #0]
 8016cb6:	b25b      	sxtb	r3, r3
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	da03      	bge.n	8016cc4 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	2201      	movs	r2, #1
 8016cc0:	709a      	strb	r2, [r3, #2]
 8016cc2:	e002      	b.n	8016cca <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	1cd8      	adds	r0, r3, #3
 8016cce:	693b      	ldr	r3, [r7, #16]
 8016cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016cd4:	3308      	adds	r3, #8
 8016cd6:	2208      	movs	r2, #8
 8016cd8:	4619      	mov	r1, r3
 8016cda:	f004 fcfa 	bl	801b6d2 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	f103 000c 	add.w	r0, r3, #12
 8016ce4:	693b      	ldr	r3, [r7, #16]
 8016ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016cea:	3310      	adds	r3, #16
 8016cec:	2210      	movs	r2, #16
 8016cee:	4619      	mov	r1, r3
 8016cf0:	f004 fcef 	bl	801b6d2 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	331d      	adds	r3, #29
 8016cf8:	693a      	ldr	r2, [r7, #16]
 8016cfa:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8016cfe:	3220      	adds	r2, #32
 8016d00:	6812      	ldr	r2, [r2, #0]
 8016d02:	601a      	str	r2, [r3, #0]
      break;
 8016d04:	bf00      	nop
  }

  return error;
 8016d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3718      	adds	r7, #24
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	bd80      	pop	{r7, pc}

08016d10 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b086      	sub	sp, #24
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	60f8      	str	r0, [r7, #12]
 8016d18:	460b      	mov	r3, r1
 8016d1a:	607a      	str	r2, [r7, #4]
 8016d1c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8016d1e:	2302      	movs	r3, #2
 8016d20:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8016d28:	69db      	ldr	r3, [r3, #28]
 8016d2a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8016d2c:	693b      	ldr	r3, [r7, #16]
 8016d2e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8016d32:	2b01      	cmp	r3, #1
 8016d34:	d002      	beq.n	8016d3c <USBH_MSC_SCSI_RequestSense+0x2c>
 8016d36:	2b02      	cmp	r3, #2
 8016d38:	d03d      	beq.n	8016db6 <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 8016d3a:	e069      	b.n	8016e10 <USBH_MSC_SCSI_RequestSense+0x100>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8016d3c:	693b      	ldr	r3, [r7, #16]
 8016d3e:	220e      	movs	r2, #14
 8016d40:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016d42:	693b      	ldr	r3, [r7, #16]
 8016d44:	2280      	movs	r2, #128	@ 0x80
 8016d46:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016d4a:	693b      	ldr	r3, [r7, #16]
 8016d4c:	220a      	movs	r2, #10
 8016d4e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016d52:	693b      	ldr	r3, [r7, #16]
 8016d54:	3363      	adds	r3, #99	@ 0x63
 8016d56:	2210      	movs	r2, #16
 8016d58:	2100      	movs	r1, #0
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f004 fc04 	bl	801b568 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	2203      	movs	r2, #3
 8016d64:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8016d68:	7afb      	ldrb	r3, [r7, #11]
 8016d6a:	015b      	lsls	r3, r3, #5
 8016d6c:	b2da      	uxtb	r2, r3
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8016d74:	693b      	ldr	r3, [r7, #16]
 8016d76:	2200      	movs	r2, #0
 8016d78:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8016d7c:	693b      	ldr	r3, [r7, #16]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 8016d84:	693b      	ldr	r3, [r7, #16]
 8016d86:	220e      	movs	r2, #14
 8016d88:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8016d8c:	693b      	ldr	r3, [r7, #16]
 8016d8e:	2200      	movs	r2, #0
 8016d90:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	2201      	movs	r2, #1
 8016d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016d9c:	693b      	ldr	r3, [r7, #16]
 8016d9e:	2202      	movs	r2, #2
 8016da0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8016da4:	693b      	ldr	r3, [r7, #16]
 8016da6:	f103 0210 	add.w	r2, r3, #16
 8016daa:	693b      	ldr	r3, [r7, #16]
 8016dac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8016db0:	2301      	movs	r3, #1
 8016db2:	75fb      	strb	r3, [r7, #23]
      break;
 8016db4:	e02c      	b.n	8016e10 <USBH_MSC_SCSI_RequestSense+0x100>
      error = USBH_MSC_BOT_Process(phost, lun);
 8016db6:	7afb      	ldrb	r3, [r7, #11]
 8016db8:	4619      	mov	r1, r3
 8016dba:	68f8      	ldr	r0, [r7, #12]
 8016dbc:	f7ff fc08 	bl	80165d0 <USBH_MSC_BOT_Process>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8016dc4:	7dfb      	ldrb	r3, [r7, #23]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d121      	bne.n	8016e0e <USBH_MSC_SCSI_RequestSense+0xfe>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016dd0:	3302      	adds	r3, #2
 8016dd2:	781b      	ldrb	r3, [r3, #0]
 8016dd4:	f003 030f 	and.w	r3, r3, #15
 8016dd8:	b2da      	uxtb	r2, r3
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8016dde:	693b      	ldr	r3, [r7, #16]
 8016de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016de4:	7b1a      	ldrb	r2, [r3, #12]
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8016dea:	693b      	ldr	r3, [r7, #16]
 8016dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016df0:	7b5a      	ldrb	r2, [r3, #13]
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	785b      	ldrb	r3, [r3, #1]
 8016dfa:	2b3a      	cmp	r3, #58	@ 0x3a
 8016dfc:	d107      	bne.n	8016e0e <USBH_MSC_SCSI_RequestSense+0xfe>
          USBH_UsrLog("MSC Device MEDIUM not present");
 8016dfe:	4807      	ldr	r0, [pc, #28]	@ (8016e1c <USBH_MSC_SCSI_RequestSense+0x10c>)
 8016e00:	f004 fa42 	bl	801b288 <iprintf>
 8016e04:	200a      	movs	r0, #10
 8016e06:	f004 fa51 	bl	801b2ac <putchar>
          error = USBH_UNRECOVERED_ERROR;
 8016e0a:	2304      	movs	r3, #4
 8016e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8016e0e:	bf00      	nop
  }

  return error;
 8016e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e12:	4618      	mov	r0, r3
 8016e14:	3718      	adds	r7, #24
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}
 8016e1a:	bf00      	nop
 8016e1c:	0801d1f4 	.word	0x0801d1f4

08016e20 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b086      	sub	sp, #24
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	60f8      	str	r0, [r7, #12]
 8016e28:	607a      	str	r2, [r7, #4]
 8016e2a:	603b      	str	r3, [r7, #0]
 8016e2c:	460b      	mov	r3, r1
 8016e2e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8016e30:	2302      	movs	r3, #2
 8016e32:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8016e3a:	69db      	ldr	r3, [r3, #28]
 8016e3c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8016e3e:	693b      	ldr	r3, [r7, #16]
 8016e40:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8016e44:	2b01      	cmp	r3, #1
 8016e46:	d002      	beq.n	8016e4e <USBH_MSC_SCSI_Write+0x2e>
 8016e48:	2b02      	cmp	r3, #2
 8016e4a:	d04c      	beq.n	8016ee6 <USBH_MSC_SCSI_Write+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8016e4c:	e053      	b.n	8016ef6 <USBH_MSC_SCSI_Write+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8016e4e:	7afb      	ldrb	r3, [r7, #11]
 8016e50:	693a      	ldr	r2, [r7, #16]
 8016e52:	2134      	movs	r1, #52	@ 0x34
 8016e54:	fb01 f303 	mul.w	r3, r1, r3
 8016e58:	4413      	add	r3, r2
 8016e5a:	3398      	adds	r3, #152	@ 0x98
 8016e5c:	881b      	ldrh	r3, [r3, #0]
 8016e5e:	461a      	mov	r2, r3
 8016e60:	6a3b      	ldr	r3, [r7, #32]
 8016e62:	fb03 f202 	mul.w	r2, r3, r2
 8016e66:	693b      	ldr	r3, [r7, #16]
 8016e68:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8016e6a:	693b      	ldr	r3, [r7, #16]
 8016e6c:	2200      	movs	r2, #0
 8016e6e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016e72:	693b      	ldr	r3, [r7, #16]
 8016e74:	220a      	movs	r2, #10
 8016e76:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016e7a:	693b      	ldr	r3, [r7, #16]
 8016e7c:	3363      	adds	r3, #99	@ 0x63
 8016e7e:	2210      	movs	r2, #16
 8016e80:	2100      	movs	r1, #0
 8016e82:	4618      	mov	r0, r3
 8016e84:	f004 fb70 	bl	801b568 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_WRITE10;
 8016e88:	693b      	ldr	r3, [r7, #16]
 8016e8a:	222a      	movs	r2, #42	@ 0x2a
 8016e8c:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8016e90:	79fa      	ldrb	r2, [r7, #7]
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8016e98:	79ba      	ldrb	r2, [r7, #6]
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8016ea0:	797a      	ldrb	r2, [r7, #5]
 8016ea2:	693b      	ldr	r3, [r7, #16]
 8016ea4:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8016ea8:	1d3b      	adds	r3, r7, #4
 8016eaa:	781a      	ldrb	r2, [r3, #0]
 8016eac:	693b      	ldr	r3, [r7, #16]
 8016eae:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8016eb2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8016eb6:	693b      	ldr	r3, [r7, #16]
 8016eb8:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8016ebc:	f107 0320 	add.w	r3, r7, #32
 8016ec0:	781a      	ldrb	r2, [r3, #0]
 8016ec2:	693b      	ldr	r3, [r7, #16]
 8016ec4:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016ec8:	693b      	ldr	r3, [r7, #16]
 8016eca:	2201      	movs	r2, #1
 8016ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	2202      	movs	r2, #2
 8016ed4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8016ed8:	693b      	ldr	r3, [r7, #16]
 8016eda:	683a      	ldr	r2, [r7, #0]
 8016edc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8016ee4:	e007      	b.n	8016ef6 <USBH_MSC_SCSI_Write+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 8016ee6:	7afb      	ldrb	r3, [r7, #11]
 8016ee8:	4619      	mov	r1, r3
 8016eea:	68f8      	ldr	r0, [r7, #12]
 8016eec:	f7ff fb70 	bl	80165d0 <USBH_MSC_BOT_Process>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8016ef4:	bf00      	nop
  }

  return error;
 8016ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ef8:	4618      	mov	r0, r3
 8016efa:	3718      	adds	r7, #24
 8016efc:	46bd      	mov	sp, r7
 8016efe:	bd80      	pop	{r7, pc}

08016f00 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b086      	sub	sp, #24
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	607a      	str	r2, [r7, #4]
 8016f0a:	603b      	str	r3, [r7, #0]
 8016f0c:	460b      	mov	r3, r1
 8016f0e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8016f10:	2302      	movs	r3, #2
 8016f12:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8016f1a:	69db      	ldr	r3, [r3, #28]
 8016f1c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8016f24:	2b01      	cmp	r3, #1
 8016f26:	d002      	beq.n	8016f2e <USBH_MSC_SCSI_Read+0x2e>
 8016f28:	2b02      	cmp	r3, #2
 8016f2a:	d04c      	beq.n	8016fc6 <USBH_MSC_SCSI_Read+0xc6>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8016f2c:	e053      	b.n	8016fd6 <USBH_MSC_SCSI_Read+0xd6>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[lun].capacity.block_size;
 8016f2e:	7afb      	ldrb	r3, [r7, #11]
 8016f30:	693a      	ldr	r2, [r7, #16]
 8016f32:	2134      	movs	r1, #52	@ 0x34
 8016f34:	fb01 f303 	mul.w	r3, r1, r3
 8016f38:	4413      	add	r3, r2
 8016f3a:	3398      	adds	r3, #152	@ 0x98
 8016f3c:	881b      	ldrh	r3, [r3, #0]
 8016f3e:	461a      	mov	r2, r3
 8016f40:	6a3b      	ldr	r3, [r7, #32]
 8016f42:	fb03 f202 	mul.w	r2, r3, r2
 8016f46:	693b      	ldr	r3, [r7, #16]
 8016f48:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	2280      	movs	r2, #128	@ 0x80
 8016f4e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8016f52:	693b      	ldr	r3, [r7, #16]
 8016f54:	220a      	movs	r2, #10
 8016f56:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8016f5a:	693b      	ldr	r3, [r7, #16]
 8016f5c:	3363      	adds	r3, #99	@ 0x63
 8016f5e:	2210      	movs	r2, #16
 8016f60:	2100      	movs	r1, #0
 8016f62:	4618      	mov	r0, r3
 8016f64:	f004 fb00 	bl	801b568 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_READ10;
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	2228      	movs	r2, #40	@ 0x28
 8016f6c:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2] = (((uint8_t *)(void *)&address)[3]);
 8016f70:	79fa      	ldrb	r2, [r7, #7]
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = (((uint8_t *)(void *)&address)[2]);
 8016f78:	79ba      	ldrb	r2, [r7, #6]
 8016f7a:	693b      	ldr	r3, [r7, #16]
 8016f7c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = (((uint8_t *)(void *)&address)[1]);
 8016f80:	797a      	ldrb	r2, [r7, #5]
 8016f82:	693b      	ldr	r3, [r7, #16]
 8016f84:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = (((uint8_t *)(void *)&address)[0]);
 8016f88:	1d3b      	adds	r3, r7, #4
 8016f8a:	781a      	ldrb	r2, [r3, #0]
 8016f8c:	693b      	ldr	r3, [r7, #16]
 8016f8e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7] = (((uint8_t *)(void *)&length)[1]);
 8016f92:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8016f96:	693b      	ldr	r3, [r7, #16]
 8016f98:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8] = (((uint8_t *)(void *)&length)[0]);
 8016f9c:	f107 0320 	add.w	r3, r7, #32
 8016fa0:	781a      	ldrb	r2, [r3, #0]
 8016fa2:	693b      	ldr	r3, [r7, #16]
 8016fa4:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8016fa8:	693b      	ldr	r3, [r7, #16]
 8016faa:	2201      	movs	r2, #1
 8016fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8016fb0:	693b      	ldr	r3, [r7, #16]
 8016fb2:	2202      	movs	r2, #2
 8016fb4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8016fb8:	693b      	ldr	r3, [r7, #16]
 8016fba:	683a      	ldr	r2, [r7, #0]
 8016fbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8016fc4:	e007      	b.n	8016fd6 <USBH_MSC_SCSI_Read+0xd6>
      error = USBH_MSC_BOT_Process(phost, lun);
 8016fc6:	7afb      	ldrb	r3, [r7, #11]
 8016fc8:	4619      	mov	r1, r3
 8016fca:	68f8      	ldr	r0, [r7, #12]
 8016fcc:	f7ff fb00 	bl	80165d0 <USBH_MSC_BOT_Process>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8016fd4:	bf00      	nop
  }

  return error;
 8016fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	3718      	adds	r7, #24
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}

08016fe0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b084      	sub	sp, #16
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	60f8      	str	r0, [r7, #12]
 8016fe8:	60b9      	str	r1, [r7, #8]
 8016fea:	4613      	mov	r3, r2
 8016fec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d10a      	bne.n	801700a <USBH_Init+0x2a>
  {
    USBH_ErrLog("Invalid Host handle");
 8016ff4:	481c      	ldr	r0, [pc, #112]	@ (8017068 <USBH_Init+0x88>)
 8016ff6:	f004 f947 	bl	801b288 <iprintf>
 8016ffa:	481c      	ldr	r0, [pc, #112]	@ (801706c <USBH_Init+0x8c>)
 8016ffc:	f004 f944 	bl	801b288 <iprintf>
 8017000:	200a      	movs	r0, #10
 8017002:	f004 f953 	bl	801b2ac <putchar>
    return USBH_FAIL;
 8017006:	2302      	movs	r3, #2
 8017008:	e029      	b.n	801705e <USBH_Init+0x7e>
  }

  /* Set DRiver ID */
  phost->id = id;
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	79fa      	ldrb	r2, [r7, #7]
 801700e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	2200      	movs	r2, #0
 8017016:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
  phost->ClassNumber = 0U;
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	2200      	movs	r2, #0
 801701e:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8017022:	68f8      	ldr	r0, [r7, #12]
 8017024:	f000 f824 	bl	8017070 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	2200      	movs	r2, #0
 801702c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
  phost->device.is_connected = 0U;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	2200      	movs	r2, #0
 8017034:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	2200      	movs	r2, #0
 801703c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	2200      	movs	r2, #0
 8017044:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

  /* Assign User process */
  if (pUsrFunc != NULL)
 8017048:	68bb      	ldr	r3, [r7, #8]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d003      	beq.n	8017056 <USBH_Init+0x76>
  {
    phost->pUser = pUsrFunc;
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	68ba      	ldr	r2, [r7, #8]
 8017052:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8017056:	68f8      	ldr	r0, [r7, #12]
 8017058:	f7ea fb2e 	bl	80016b8 <USBH_LL_Init>

  return USBH_OK;
 801705c:	2300      	movs	r3, #0
}
 801705e:	4618      	mov	r0, r3
 8017060:	3710      	adds	r7, #16
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}
 8017066:	bf00      	nop
 8017068:	0801d214 	.word	0x0801d214
 801706c:	0801d21c 	.word	0x0801d21c

08017070 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b084      	sub	sp, #16
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8017078:	2300      	movs	r3, #0
 801707a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 801707c:	2300      	movs	r3, #0
 801707e:	60fb      	str	r3, [r7, #12]
 8017080:	e00a      	b.n	8017098 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8017082:	687a      	ldr	r2, [r7, #4]
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801708a:	009b      	lsls	r3, r3, #2
 801708c:	4413      	add	r3, r2
 801708e:	2200      	movs	r2, #0
 8017090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	3301      	adds	r3, #1
 8017096:	60fb      	str	r3, [r7, #12]
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	2b0f      	cmp	r3, #15
 801709c:	d9f1      	bls.n	8017082 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 801709e:	2300      	movs	r3, #0
 80170a0:	60fb      	str	r3, [r7, #12]
 80170a2:	e009      	b.n	80170b8 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 80170a4:	687a      	ldr	r2, [r7, #4]
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	4413      	add	r3, r2
 80170aa:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80170ae:	2200      	movs	r2, #0
 80170b0:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	3301      	adds	r3, #1
 80170b6:	60fb      	str	r3, [r7, #12]
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80170be:	d3f1      	bcc.n	80170a4 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	2200      	movs	r2, #0
 80170c4:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	2200      	movs	r2, #0
 80170ca:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	2201      	movs	r2, #1
 80170d0:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2200      	movs	r2, #0
 80170d6:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4

  phost->Control.state = CTRL_SETUP;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2201      	movs	r2, #1
 80170de:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2240      	movs	r2, #64	@ 0x40
 80170e4:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	2200      	movs	r2, #0
 80170ea:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	2200      	movs	r2, #0
 80170f0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	2201      	movs	r2, #1
 80170f8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
  phost->device.RstCnt = 0U;
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	2200      	movs	r2, #0
 8017100:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
  phost->device.EnumCnt = 0U;
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	2200      	movs	r2, #0
 8017108:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	331c      	adds	r3, #28
 8017110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017114:	2100      	movs	r1, #0
 8017116:	4618      	mov	r0, r3
 8017118:	f004 fa26 	bl	801b568 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8017122:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017126:	2100      	movs	r1, #0
 8017128:	4618      	mov	r0, r3
 801712a:	f004 fa1d 	bl	801b568 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	f203 4326 	addw	r3, r3, #1062	@ 0x426
 8017134:	2212      	movs	r2, #18
 8017136:	2100      	movs	r1, #0
 8017138:	4618      	mov	r0, r3
 801713a:	f004 fa15 	bl	801b568 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 8017144:	223e      	movs	r2, #62	@ 0x3e
 8017146:	2100      	movs	r1, #0
 8017148:	4618      	mov	r0, r3
 801714a:	f004 fa0d 	bl	801b568 <memset>

  return USBH_OK;
 801714e:	2300      	movs	r3, #0
}
 8017150:	4618      	mov	r0, r3
 8017152:	3710      	adds	r7, #16
 8017154:	46bd      	mov	sp, r7
 8017156:	bd80      	pop	{r7, pc}

08017158 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b084      	sub	sp, #16
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
 8017160:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8017162:	2300      	movs	r3, #0
 8017164:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d020      	beq.n	80171ae <USBH_RegisterClass+0x56>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8017172:	2b00      	cmp	r3, #0
 8017174:	d10f      	bne.n	8017196 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 801717c:	1c59      	adds	r1, r3, #1
 801717e:	687a      	ldr	r2, [r7, #4]
 8017180:	f8c2 1480 	str.w	r1, [r2, #1152]	@ 0x480
 8017184:	687a      	ldr	r2, [r7, #4]
 8017186:	f503 738f 	add.w	r3, r3, #286	@ 0x11e
 801718a:	6839      	ldr	r1, [r7, #0]
 801718c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8017190:	2300      	movs	r3, #0
 8017192:	73fb      	strb	r3, [r7, #15]
 8017194:	e016      	b.n	80171c4 <USBH_RegisterClass+0x6c>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8017196:	480e      	ldr	r0, [pc, #56]	@ (80171d0 <USBH_RegisterClass+0x78>)
 8017198:	f004 f876 	bl	801b288 <iprintf>
 801719c:	480d      	ldr	r0, [pc, #52]	@ (80171d4 <USBH_RegisterClass+0x7c>)
 801719e:	f004 f873 	bl	801b288 <iprintf>
 80171a2:	200a      	movs	r0, #10
 80171a4:	f004 f882 	bl	801b2ac <putchar>
      status = USBH_FAIL;
 80171a8:	2302      	movs	r3, #2
 80171aa:	73fb      	strb	r3, [r7, #15]
 80171ac:	e00a      	b.n	80171c4 <USBH_RegisterClass+0x6c>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 80171ae:	4808      	ldr	r0, [pc, #32]	@ (80171d0 <USBH_RegisterClass+0x78>)
 80171b0:	f004 f86a 	bl	801b288 <iprintf>
 80171b4:	4808      	ldr	r0, [pc, #32]	@ (80171d8 <USBH_RegisterClass+0x80>)
 80171b6:	f004 f867 	bl	801b288 <iprintf>
 80171ba:	200a      	movs	r0, #10
 80171bc:	f004 f876 	bl	801b2ac <putchar>
    status = USBH_FAIL;
 80171c0:	2302      	movs	r3, #2
 80171c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80171c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80171c6:	4618      	mov	r0, r3
 80171c8:	3710      	adds	r7, #16
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}
 80171ce:	bf00      	nop
 80171d0:	0801d214 	.word	0x0801d214
 80171d4:	0801d230 	.word	0x0801d230
 80171d8:	0801d24c 	.word	0x0801d24c

080171dc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80171dc:	b580      	push	{r7, lr}
 80171de:	b084      	sub	sp, #16
 80171e0:	af00      	add	r7, sp, #0
 80171e2:	6078      	str	r0, [r7, #4]
 80171e4:	460b      	mov	r3, r1
 80171e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80171e8:	2300      	movs	r3, #0
 80171ea:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f893 343c 	ldrb.w	r3, [r3, #1084]	@ 0x43c
 80171f2:	78fa      	ldrb	r2, [r7, #3]
 80171f4:	429a      	cmp	r2, r3
 80171f6:	d23c      	bcs.n	8017272 <USBH_SelectInterface+0x96>
  {
    phost->device.current_interface = interface;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	78fa      	ldrb	r2, [r7, #3]
 80171fc:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 8017200:	78fb      	ldrb	r3, [r7, #3]
 8017202:	4619      	mov	r1, r3
 8017204:	4823      	ldr	r0, [pc, #140]	@ (8017294 <USBH_SelectInterface+0xb8>)
 8017206:	f004 f83f 	bl	801b288 <iprintf>
 801720a:	200a      	movs	r0, #10
 801720c:	f004 f84e 	bl	801b2ac <putchar>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 8017210:	78fb      	ldrb	r3, [r7, #3]
 8017212:	687a      	ldr	r2, [r7, #4]
 8017214:	211a      	movs	r1, #26
 8017216:	fb01 f303 	mul.w	r3, r1, r3
 801721a:	4413      	add	r3, r2
 801721c:	f203 4347 	addw	r3, r3, #1095	@ 0x447
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	4619      	mov	r1, r3
 8017224:	481c      	ldr	r0, [pc, #112]	@ (8017298 <USBH_SelectInterface+0xbc>)
 8017226:	f004 f82f 	bl	801b288 <iprintf>
 801722a:	200a      	movs	r0, #10
 801722c:	f004 f83e 	bl	801b2ac <putchar>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 8017230:	78fb      	ldrb	r3, [r7, #3]
 8017232:	687a      	ldr	r2, [r7, #4]
 8017234:	211a      	movs	r1, #26
 8017236:	fb01 f303 	mul.w	r3, r1, r3
 801723a:	4413      	add	r3, r2
 801723c:	f503 6389 	add.w	r3, r3, #1096	@ 0x448
 8017240:	781b      	ldrb	r3, [r3, #0]
 8017242:	4619      	mov	r1, r3
 8017244:	4815      	ldr	r0, [pc, #84]	@ (801729c <USBH_SelectInterface+0xc0>)
 8017246:	f004 f81f 	bl	801b288 <iprintf>
 801724a:	200a      	movs	r0, #10
 801724c:	f004 f82e 	bl	801b2ac <putchar>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 8017250:	78fb      	ldrb	r3, [r7, #3]
 8017252:	687a      	ldr	r2, [r7, #4]
 8017254:	211a      	movs	r1, #26
 8017256:	fb01 f303 	mul.w	r3, r1, r3
 801725a:	4413      	add	r3, r2
 801725c:	f203 4349 	addw	r3, r3, #1097	@ 0x449
 8017260:	781b      	ldrb	r3, [r3, #0]
 8017262:	4619      	mov	r1, r3
 8017264:	480e      	ldr	r0, [pc, #56]	@ (80172a0 <USBH_SelectInterface+0xc4>)
 8017266:	f004 f80f 	bl	801b288 <iprintf>
 801726a:	200a      	movs	r0, #10
 801726c:	f004 f81e 	bl	801b2ac <putchar>
 8017270:	e00a      	b.n	8017288 <USBH_SelectInterface+0xac>
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
 8017272:	480c      	ldr	r0, [pc, #48]	@ (80172a4 <USBH_SelectInterface+0xc8>)
 8017274:	f004 f808 	bl	801b288 <iprintf>
 8017278:	480b      	ldr	r0, [pc, #44]	@ (80172a8 <USBH_SelectInterface+0xcc>)
 801727a:	f004 f805 	bl	801b288 <iprintf>
 801727e:	200a      	movs	r0, #10
 8017280:	f004 f814 	bl	801b2ac <putchar>
    status = USBH_FAIL;
 8017284:	2302      	movs	r3, #2
 8017286:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8017288:	7bfb      	ldrb	r3, [r7, #15]
}
 801728a:	4618      	mov	r0, r3
 801728c:	3710      	adds	r7, #16
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}
 8017292:	bf00      	nop
 8017294:	0801d264 	.word	0x0801d264
 8017298:	0801d284 	.word	0x0801d284
 801729c:	0801d294 	.word	0x0801d294
 80172a0:	0801d2a4 	.word	0x0801d2a4
 80172a4:	0801d214 	.word	0x0801d214
 80172a8:	0801d2b4 	.word	0x0801d2b4

080172ac <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80172ac:	b480      	push	{r7}
 80172ae:	b087      	sub	sp, #28
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	4608      	mov	r0, r1
 80172b6:	4611      	mov	r1, r2
 80172b8:	461a      	mov	r2, r3
 80172ba:	4603      	mov	r3, r0
 80172bc:	70fb      	strb	r3, [r7, #3]
 80172be:	460b      	mov	r3, r1
 80172c0:	70bb      	strb	r3, [r7, #2]
 80172c2:	4613      	mov	r3, r2
 80172c4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80172c6:	2300      	movs	r3, #0
 80172c8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80172ca:	2300      	movs	r3, #0
 80172cc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 80172d4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80172d6:	e025      	b.n	8017324 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80172d8:	7dfb      	ldrb	r3, [r7, #23]
 80172da:	221a      	movs	r2, #26
 80172dc:	fb02 f303 	mul.w	r3, r2, r3
 80172e0:	3308      	adds	r3, #8
 80172e2:	68fa      	ldr	r2, [r7, #12]
 80172e4:	4413      	add	r3, r2
 80172e6:	3302      	adds	r3, #2
 80172e8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80172ea:	693b      	ldr	r3, [r7, #16]
 80172ec:	795b      	ldrb	r3, [r3, #5]
 80172ee:	78fa      	ldrb	r2, [r7, #3]
 80172f0:	429a      	cmp	r2, r3
 80172f2:	d002      	beq.n	80172fa <USBH_FindInterface+0x4e>
 80172f4:	78fb      	ldrb	r3, [r7, #3]
 80172f6:	2bff      	cmp	r3, #255	@ 0xff
 80172f8:	d111      	bne.n	801731e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80172fa:	693b      	ldr	r3, [r7, #16]
 80172fc:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80172fe:	78ba      	ldrb	r2, [r7, #2]
 8017300:	429a      	cmp	r2, r3
 8017302:	d002      	beq.n	801730a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8017304:	78bb      	ldrb	r3, [r7, #2]
 8017306:	2bff      	cmp	r3, #255	@ 0xff
 8017308:	d109      	bne.n	801731e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801730a:	693b      	ldr	r3, [r7, #16]
 801730c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801730e:	787a      	ldrb	r2, [r7, #1]
 8017310:	429a      	cmp	r2, r3
 8017312:	d002      	beq.n	801731a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8017314:	787b      	ldrb	r3, [r7, #1]
 8017316:	2bff      	cmp	r3, #255	@ 0xff
 8017318:	d101      	bne.n	801731e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 801731a:	7dfb      	ldrb	r3, [r7, #23]
 801731c:	e006      	b.n	801732c <USBH_FindInterface+0x80>
    }
    if_ix++;
 801731e:	7dfb      	ldrb	r3, [r7, #23]
 8017320:	3301      	adds	r3, #1
 8017322:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8017324:	7dfb      	ldrb	r3, [r7, #23]
 8017326:	2b01      	cmp	r3, #1
 8017328:	d9d6      	bls.n	80172d8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 801732a:	23ff      	movs	r3, #255	@ 0xff
}
 801732c:	4618      	mov	r0, r3
 801732e:	371c      	adds	r7, #28
 8017330:	46bd      	mov	sp, r7
 8017332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017336:	4770      	bx	lr

08017338 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b082      	sub	sp, #8
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f7ea f9f3 	bl	800172c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8017346:	2101      	movs	r1, #1
 8017348:	6878      	ldr	r0, [r7, #4]
 801734a:	f7ea fac1 	bl	80018d0 <USBH_LL_DriverVBUS>

  return USBH_OK;
 801734e:	2300      	movs	r3, #0
}
 8017350:	4618      	mov	r0, r3
 8017352:	3708      	adds	r7, #8
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}

08017358 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b088      	sub	sp, #32
 801735c:	af04      	add	r7, sp, #16
 801735e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8017360:	2302      	movs	r3, #2
 8017362:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8017364:	2300      	movs	r3, #0
 8017366:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	f893 3421 	ldrb.w	r3, [r3, #1057]	@ 0x421
 801736e:	b2db      	uxtb	r3, r3
 8017370:	2b01      	cmp	r3, #1
 8017372:	d102      	bne.n	801737a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2203      	movs	r2, #3
 8017378:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	b2db      	uxtb	r3, r3
 8017380:	2b0b      	cmp	r3, #11
 8017382:	f200 8239 	bhi.w	80177f8 <USBH_Process+0x4a0>
 8017386:	a201      	add	r2, pc, #4	@ (adr r2, 801738c <USBH_Process+0x34>)
 8017388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801738c:	080173bd 	.word	0x080173bd
 8017390:	080173fb 	.word	0x080173fb
 8017394:	0801747b 	.word	0x0801747b
 8017398:	08017787 	.word	0x08017787
 801739c:	080177f9 	.word	0x080177f9
 80173a0:	0801751b 	.word	0x0801751b
 80173a4:	08017709 	.word	0x08017709
 80173a8:	08017569 	.word	0x08017569
 80173ac:	08017589 	.word	0x08017589
 80173b0:	080175b3 	.word	0x080175b3
 80173b4:	0801760f 	.word	0x0801760f
 80173b8:	0801776f 	.word	0x0801776f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	f893 3420 	ldrb.w	r3, [r3, #1056]	@ 0x420
 80173c2:	b2db      	uxtb	r3, r3
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	f000 8219 	beq.w	80177fc <USBH_Process+0x4a4>
      {
        USBH_UsrLog("USB Device Connected");
 80173ca:	48a5      	ldr	r0, [pc, #660]	@ (8017660 <USBH_Process+0x308>)
 80173cc:	f003 ff5c 	bl	801b288 <iprintf>
 80173d0:	200a      	movs	r0, #10
 80173d2:	f003 ff6b 	bl	801b2ac <putchar>

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	2201      	movs	r2, #1
 80173da:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80173dc:	20c8      	movs	r0, #200	@ 0xc8
 80173de:	f7ea faf9 	bl	80019d4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80173e2:	6878      	ldr	r0, [r7, #4]
 80173e4:	f7ea f9e7 	bl	80017b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	2200      	movs	r2, #0
 80173ec:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        phost->Timeout = 0U;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2200      	movs	r2, #0
 80173f4:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80173f8:	e200      	b.n	80177fc <USBH_Process+0x4a4>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	f893 3423 	ldrb.w	r3, [r3, #1059]	@ 0x423
 8017400:	2b01      	cmp	r3, #1
 8017402:	d10d      	bne.n	8017420 <USBH_Process+0xc8>
      {
        USBH_UsrLog("USB Device Reset Completed");
 8017404:	4897      	ldr	r0, [pc, #604]	@ (8017664 <USBH_Process+0x30c>)
 8017406:	f003 ff3f 	bl	801b288 <iprintf>
 801740a:	200a      	movs	r0, #10
 801740c:	f003 ff4e 	bl	801b2ac <putchar>
        phost->device.RstCnt = 0U;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	2200      	movs	r2, #0
 8017414:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
        phost->gState = HOST_DEV_ATTACHED;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2202      	movs	r2, #2
 801741c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801741e:	e1fa      	b.n	8017816 <USBH_Process+0x4be>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8017426:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801742a:	d91a      	bls.n	8017462 <USBH_Process+0x10a>
          phost->device.RstCnt++;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8017432:	3301      	adds	r3, #1
 8017434:	b2da      	uxtb	r2, r3
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f
          if (phost->device.RstCnt > 3U)
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8017442:	2b03      	cmp	r3, #3
 8017444:	d909      	bls.n	801745a <USBH_Process+0x102>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 8017446:	4888      	ldr	r0, [pc, #544]	@ (8017668 <USBH_Process+0x310>)
 8017448:	f003 ff1e 	bl	801b288 <iprintf>
 801744c:	200a      	movs	r0, #10
 801744e:	f003 ff2d 	bl	801b2ac <putchar>
            phost->gState = HOST_ABORT_STATE;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	220d      	movs	r2, #13
 8017456:	701a      	strb	r2, [r3, #0]
      break;
 8017458:	e1dd      	b.n	8017816 <USBH_Process+0x4be>
            phost->gState = HOST_IDLE;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	2200      	movs	r2, #0
 801745e:	701a      	strb	r2, [r3, #0]
      break;
 8017460:	e1d9      	b.n	8017816 <USBH_Process+0x4be>
          phost->Timeout += 10U;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8017468:	f103 020a 	add.w	r2, r3, #10
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8
          USBH_Delay(10U);
 8017472:	200a      	movs	r0, #10
 8017474:	f7ea faae 	bl	80019d4 <USBH_Delay>
      break;
 8017478:	e1cd      	b.n	8017816 <USBH_Process+0x4be>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8017480:	2b00      	cmp	r3, #0
 8017482:	d005      	beq.n	8017490 <USBH_Process+0x138>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 801748a:	2104      	movs	r1, #4
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8017490:	2064      	movs	r0, #100	@ 0x64
 8017492:	f7ea fa9f 	bl	80019d4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8017496:	6878      	ldr	r0, [r7, #4]
 8017498:	f7ea f966 	bl	8001768 <USBH_LL_GetSpeed>
 801749c:	4603      	mov	r3, r0
 801749e:	461a      	mov	r2, r3
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d

      phost->gState = HOST_ENUMERATION;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2205      	movs	r2, #5
 80174aa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80174ac:	2100      	movs	r1, #0
 80174ae:	6878      	ldr	r0, [r7, #4]
 80174b0:	f001 fc15 	bl	8018cde <USBH_AllocPipe>
 80174b4:	4603      	mov	r3, r0
 80174b6:	461a      	mov	r2, r3
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80174bc:	2180      	movs	r1, #128	@ 0x80
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	f001 fc0d 	bl	8018cde <USBH_AllocPipe>
 80174c4:	4603      	mov	r3, r0
 80174c6:	461a      	mov	r2, r3
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	7919      	ldrb	r1, [r3, #4]
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80174dc:	687a      	ldr	r2, [r7, #4]
 80174de:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80174e0:	9202      	str	r2, [sp, #8]
 80174e2:	2200      	movs	r2, #0
 80174e4:	9201      	str	r2, [sp, #4]
 80174e6:	9300      	str	r3, [sp, #0]
 80174e8:	4603      	mov	r3, r0
 80174ea:	2280      	movs	r2, #128	@ 0x80
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f001 fbc7 	bl	8018c80 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	7959      	ldrb	r1, [r3, #5]
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8017502:	687a      	ldr	r2, [r7, #4]
 8017504:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8017506:	9202      	str	r2, [sp, #8]
 8017508:	2200      	movs	r2, #0
 801750a:	9201      	str	r2, [sp, #4]
 801750c:	9300      	str	r3, [sp, #0]
 801750e:	4603      	mov	r3, r0
 8017510:	2200      	movs	r2, #0
 8017512:	6878      	ldr	r0, [r7, #4]
 8017514:	f001 fbb4 	bl	8018c80 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8017518:	e17d      	b.n	8017816 <USBH_Process+0x4be>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 801751a:	6878      	ldr	r0, [r7, #4]
 801751c:	f000 f98e 	bl	801783c <USBH_HandleEnum>
 8017520:	4603      	mov	r3, r0
 8017522:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8017524:	7bbb      	ldrb	r3, [r7, #14]
 8017526:	b2db      	uxtb	r3, r3
 8017528:	2b00      	cmp	r3, #0
 801752a:	f040 8169 	bne.w	8017800 <USBH_Process+0x4a8>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");
 801752e:	484f      	ldr	r0, [pc, #316]	@ (801766c <USBH_Process+0x314>)
 8017530:	f003 feaa 	bl	801b288 <iprintf>
 8017534:	200a      	movs	r0, #10
 8017536:	f003 feb9 	bl	801b2ac <putchar>

        phost->device.current_interface = 0U;
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	2200      	movs	r2, #0
 801753e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f893 3437 	ldrb.w	r3, [r3, #1079]	@ 0x437
 8017548:	2b01      	cmp	r3, #1
 801754a:	d109      	bne.n	8017560 <USBH_Process+0x208>
        {
          USBH_UsrLog("This device has only 1 configuration.");
 801754c:	4848      	ldr	r0, [pc, #288]	@ (8017670 <USBH_Process+0x318>)
 801754e:	f003 fe9b 	bl	801b288 <iprintf>
 8017552:	200a      	movs	r0, #10
 8017554:	f003 feaa 	bl	801b2ac <putchar>
          phost->gState = HOST_SET_CONFIGURATION;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	2208      	movs	r2, #8
 801755c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 801755e:	e14f      	b.n	8017800 <USBH_Process+0x4a8>
          phost->gState = HOST_INPUT;
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	2207      	movs	r2, #7
 8017564:	701a      	strb	r2, [r3, #0]
      break;
 8017566:	e14b      	b.n	8017800 <USBH_Process+0x4a8>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 801756e:	2b00      	cmp	r3, #0
 8017570:	f000 8148 	beq.w	8017804 <USBH_Process+0x4ac>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 801757a:	2101      	movs	r1, #1
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2208      	movs	r2, #8
 8017584:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8017586:	e13d      	b.n	8017804 <USBH_Process+0x4ac>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f893 343d 	ldrb.w	r3, [r3, #1085]	@ 0x43d
 801758e:	4619      	mov	r1, r3
 8017590:	6878      	ldr	r0, [r7, #4]
 8017592:	f000 fd9a 	bl	80180ca <USBH_SetCfg>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	f040 8135 	bne.w	8017808 <USBH_Process+0x4b0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	2209      	movs	r2, #9
 80175a2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
 80175a4:	4833      	ldr	r0, [pc, #204]	@ (8017674 <USBH_Process+0x31c>)
 80175a6:	f003 fe6f 	bl	801b288 <iprintf>
 80175aa:	200a      	movs	r0, #10
 80175ac:	f003 fe7e 	bl	801b2ac <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80175b0:	e12a      	b.n	8017808 <USBH_Process+0x4b0>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	f893 343f 	ldrb.w	r3, [r3, #1087]	@ 0x43f
 80175b8:	f003 0320 	and.w	r3, r3, #32
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d022      	beq.n	8017606 <USBH_Process+0x2ae>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80175c0:	2101      	movs	r1, #1
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f000 fda4 	bl	8018110 <USBH_SetFeature>
 80175c8:	4603      	mov	r3, r0
 80175ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80175cc:	7bbb      	ldrb	r3, [r7, #14]
 80175ce:	b2db      	uxtb	r3, r3
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d109      	bne.n	80175e8 <USBH_Process+0x290>
        {
          USBH_UsrLog("Device remote wakeup enabled");
 80175d4:	4828      	ldr	r0, [pc, #160]	@ (8017678 <USBH_Process+0x320>)
 80175d6:	f003 fe57 	bl	801b288 <iprintf>
 80175da:	200a      	movs	r0, #10
 80175dc:	f003 fe66 	bl	801b2ac <putchar>
          phost->gState = HOST_CHECK_CLASS;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	220a      	movs	r2, #10
 80175e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80175e6:	e111      	b.n	801780c <USBH_Process+0x4b4>
        else if (status == USBH_NOT_SUPPORTED)
 80175e8:	7bbb      	ldrb	r3, [r7, #14]
 80175ea:	b2db      	uxtb	r3, r3
 80175ec:	2b03      	cmp	r3, #3
 80175ee:	f040 810d 	bne.w	801780c <USBH_Process+0x4b4>
          USBH_UsrLog("Remote wakeup not supported by the device");
 80175f2:	4822      	ldr	r0, [pc, #136]	@ (801767c <USBH_Process+0x324>)
 80175f4:	f003 fe48 	bl	801b288 <iprintf>
 80175f8:	200a      	movs	r0, #10
 80175fa:	f003 fe57 	bl	801b2ac <putchar>
          phost->gState = HOST_CHECK_CLASS;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	220a      	movs	r2, #10
 8017602:	701a      	strb	r2, [r3, #0]
      break;
 8017604:	e102      	b.n	801780c <USBH_Process+0x4b4>
        phost->gState = HOST_CHECK_CLASS;
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	220a      	movs	r2, #10
 801760a:	701a      	strb	r2, [r3, #0]
      break;
 801760c:	e0fe      	b.n	801780c <USBH_Process+0x4b4>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8017614:	2b00      	cmp	r3, #0
 8017616:	d106      	bne.n	8017626 <USBH_Process+0x2ce>
      {
        USBH_UsrLog("No Class has been registered.");
 8017618:	4819      	ldr	r0, [pc, #100]	@ (8017680 <USBH_Process+0x328>)
 801761a:	f003 fe35 	bl	801b288 <iprintf>
 801761e:	200a      	movs	r0, #10
 8017620:	f003 fe44 	bl	801b2ac <putchar>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8017624:	e0f7      	b.n	8017816 <USBH_Process+0x4be>
        phost->pActiveClass = NULL;
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	2200      	movs	r2, #0
 801762a:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 801762e:	2300      	movs	r3, #0
 8017630:	73fb      	strb	r3, [r7, #15]
 8017632:	e02a      	b.n	801768a <USBH_Process+0x332>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8017634:	7bfa      	ldrb	r2, [r7, #15]
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f502 728f 	add.w	r2, r2, #286	@ 0x11e
 801763c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017640:	791a      	ldrb	r2, [r3, #4]
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	f893 3447 	ldrb.w	r3, [r3, #1095]	@ 0x447
 8017648:	429a      	cmp	r2, r3
 801764a:	d11b      	bne.n	8017684 <USBH_Process+0x32c>
            phost->pActiveClass = phost->pClass[idx];
 801764c:	7bfa      	ldrb	r2, [r7, #15]
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	f502 728f 	add.w	r2, r2, #286	@ 0x11e
 8017654:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
            break;
 801765e:	e017      	b.n	8017690 <USBH_Process+0x338>
 8017660:	0801d2d4 	.word	0x0801d2d4
 8017664:	0801d2ec 	.word	0x0801d2ec
 8017668:	0801d308 	.word	0x0801d308
 801766c:	0801d334 	.word	0x0801d334
 8017670:	0801d348 	.word	0x0801d348
 8017674:	0801d370 	.word	0x0801d370
 8017678:	0801d38c 	.word	0x0801d38c
 801767c:	0801d3ac 	.word	0x0801d3ac
 8017680:	0801d3d8 	.word	0x0801d3d8
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8017684:	7bfb      	ldrb	r3, [r7, #15]
 8017686:	3301      	adds	r3, #1
 8017688:	73fb      	strb	r3, [r7, #15]
 801768a:	7bfb      	ldrb	r3, [r7, #15]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d0d1      	beq.n	8017634 <USBH_Process+0x2dc>
        if (phost->pActiveClass != NULL)
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8017696:	2b00      	cmp	r3, #0
 8017698:	d02c      	beq.n	80176f4 <USBH_Process+0x39c>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80176a0:	689b      	ldr	r3, [r3, #8]
 80176a2:	6878      	ldr	r0, [r7, #4]
 80176a4:	4798      	blx	r3
 80176a6:	4603      	mov	r3, r0
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d114      	bne.n	80176d6 <USBH_Process+0x37e>
            phost->gState = HOST_CLASS_REQUEST;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	2206      	movs	r2, #6
 80176b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	4619      	mov	r1, r3
 80176bc:	4858      	ldr	r0, [pc, #352]	@ (8017820 <USBH_Process+0x4c8>)
 80176be:	f003 fde3 	bl	801b288 <iprintf>
 80176c2:	200a      	movs	r0, #10
 80176c4:	f003 fdf2 	bl	801b2ac <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80176ce:	2103      	movs	r1, #3
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	4798      	blx	r3
      break;
 80176d4:	e09f      	b.n	8017816 <USBH_Process+0x4be>
            phost->gState = HOST_ABORT_STATE;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	220d      	movs	r2, #13
 80176da:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	4619      	mov	r1, r3
 80176e6:	484f      	ldr	r0, [pc, #316]	@ (8017824 <USBH_Process+0x4cc>)
 80176e8:	f003 fdce 	bl	801b288 <iprintf>
 80176ec:	200a      	movs	r0, #10
 80176ee:	f003 fddd 	bl	801b2ac <putchar>
      break;
 80176f2:	e090      	b.n	8017816 <USBH_Process+0x4be>
          phost->gState = HOST_ABORT_STATE;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	220d      	movs	r2, #13
 80176f8:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
 80176fa:	484b      	ldr	r0, [pc, #300]	@ (8017828 <USBH_Process+0x4d0>)
 80176fc:	f003 fdc4 	bl	801b288 <iprintf>
 8017700:	200a      	movs	r0, #10
 8017702:	f003 fdd3 	bl	801b2ac <putchar>
      break;
 8017706:	e086      	b.n	8017816 <USBH_Process+0x4be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 801770e:	2b00      	cmp	r3, #0
 8017710:	d020      	beq.n	8017754 <USBH_Process+0x3fc>
      {
        status = phost->pActiveClass->Requests(phost);
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8017718:	691b      	ldr	r3, [r3, #16]
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	4798      	blx	r3
 801771e:	4603      	mov	r3, r0
 8017720:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8017722:	7bbb      	ldrb	r3, [r7, #14]
 8017724:	b2db      	uxtb	r3, r3
 8017726:	2b00      	cmp	r3, #0
 8017728:	d103      	bne.n	8017732 <USBH_Process+0x3da>
        {
          phost->gState = HOST_CLASS;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	220b      	movs	r2, #11
 801772e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8017730:	e06e      	b.n	8017810 <USBH_Process+0x4b8>
        else if (status == USBH_FAIL)
 8017732:	7bbb      	ldrb	r3, [r7, #14]
 8017734:	b2db      	uxtb	r3, r3
 8017736:	2b02      	cmp	r3, #2
 8017738:	d16a      	bne.n	8017810 <USBH_Process+0x4b8>
          phost->gState = HOST_ABORT_STATE;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	220d      	movs	r2, #13
 801773e:	701a      	strb	r2, [r3, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8017740:	483a      	ldr	r0, [pc, #232]	@ (801782c <USBH_Process+0x4d4>)
 8017742:	f003 fda1 	bl	801b288 <iprintf>
 8017746:	483a      	ldr	r0, [pc, #232]	@ (8017830 <USBH_Process+0x4d8>)
 8017748:	f003 fd9e 	bl	801b288 <iprintf>
 801774c:	200a      	movs	r0, #10
 801774e:	f003 fdad 	bl	801b2ac <putchar>
      break;
 8017752:	e05d      	b.n	8017810 <USBH_Process+0x4b8>
        phost->gState = HOST_ABORT_STATE;
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	220d      	movs	r2, #13
 8017758:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
 801775a:	4834      	ldr	r0, [pc, #208]	@ (801782c <USBH_Process+0x4d4>)
 801775c:	f003 fd94 	bl	801b288 <iprintf>
 8017760:	4834      	ldr	r0, [pc, #208]	@ (8017834 <USBH_Process+0x4dc>)
 8017762:	f003 fd91 	bl	801b288 <iprintf>
 8017766:	200a      	movs	r0, #10
 8017768:	f003 fda0 	bl	801b2ac <putchar>
      break;
 801776c:	e050      	b.n	8017810 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8017774:	2b00      	cmp	r3, #0
 8017776:	d04d      	beq.n	8017814 <USBH_Process+0x4bc>
      {
        phost->pActiveClass->BgndProcess(phost);
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 801777e:	695b      	ldr	r3, [r3, #20]
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	4798      	blx	r3
      }
      break;
 8017784:	e046      	b.n	8017814 <USBH_Process+0x4bc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	2200      	movs	r2, #0
 801778a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421

      (void)DeInitStateMachine(phost);
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f7ff fc6e 	bl	8017070 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 801779a:	2b00      	cmp	r3, #0
 801779c:	d009      	beq.n	80177b2 <USBH_Process+0x45a>
      {
        phost->pActiveClass->DeInit(phost);
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 80177a4:	68db      	ldr	r3, [r3, #12]
 80177a6:	6878      	ldr	r0, [r7, #4]
 80177a8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	2200      	movs	r2, #0
 80177ae:	f8c3 247c 	str.w	r2, [r3, #1148]	@ 0x47c
      }

      if (phost->pUser != NULL)
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d005      	beq.n	80177c8 <USBH_Process+0x470>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80177c2:	2105      	movs	r1, #5
 80177c4:	6878      	ldr	r0, [r7, #4]
 80177c6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");
 80177c8:	481b      	ldr	r0, [pc, #108]	@ (8017838 <USBH_Process+0x4e0>)
 80177ca:	f003 fd5d 	bl	801b288 <iprintf>
 80177ce:	200a      	movs	r0, #10
 80177d0:	f003 fd6c 	bl	801b2ac <putchar>

      if (phost->device.is_ReEnumerated == 1U)
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f893 3422 	ldrb.w	r3, [r3, #1058]	@ 0x422
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	2b01      	cmp	r3, #1
 80177de:	d107      	bne.n	80177f0 <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	2200      	movs	r2, #0
 80177e4:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80177e8:	6878      	ldr	r0, [r7, #4]
 80177ea:	f7ff fda5 	bl	8017338 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80177ee:	e012      	b.n	8017816 <USBH_Process+0x4be>
        (void)USBH_LL_Start(phost);
 80177f0:	6878      	ldr	r0, [r7, #4]
 80177f2:	f7e9 ff9b 	bl	800172c <USBH_LL_Start>
      break;
 80177f6:	e00e      	b.n	8017816 <USBH_Process+0x4be>

    case HOST_ABORT_STATE:
    default :
      break;
 80177f8:	bf00      	nop
 80177fa:	e00c      	b.n	8017816 <USBH_Process+0x4be>
      break;
 80177fc:	bf00      	nop
 80177fe:	e00a      	b.n	8017816 <USBH_Process+0x4be>
      break;
 8017800:	bf00      	nop
 8017802:	e008      	b.n	8017816 <USBH_Process+0x4be>
    break;
 8017804:	bf00      	nop
 8017806:	e006      	b.n	8017816 <USBH_Process+0x4be>
      break;
 8017808:	bf00      	nop
 801780a:	e004      	b.n	8017816 <USBH_Process+0x4be>
      break;
 801780c:	bf00      	nop
 801780e:	e002      	b.n	8017816 <USBH_Process+0x4be>
      break;
 8017810:	bf00      	nop
 8017812:	e000      	b.n	8017816 <USBH_Process+0x4be>
      break;
 8017814:	bf00      	nop
  }
  return USBH_OK;
 8017816:	2300      	movs	r3, #0
}
 8017818:	4618      	mov	r0, r3
 801781a:	3710      	adds	r7, #16
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}
 8017820:	0801d3f8 	.word	0x0801d3f8
 8017824:	0801d40c 	.word	0x0801d40c
 8017828:	0801d42c 	.word	0x0801d42c
 801782c:	0801d214 	.word	0x0801d214
 8017830:	0801d454 	.word	0x0801d454
 8017834:	0801d47c 	.word	0x0801d47c
 8017838:	0801d494 	.word	0x0801d494

0801783c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 801783c:	b580      	push	{r7, lr}
 801783e:	b088      	sub	sp, #32
 8017840:	af04      	add	r7, sp, #16
 8017842:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8017844:	2301      	movs	r3, #1
 8017846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8017848:	2301      	movs	r3, #1
 801784a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	785b      	ldrb	r3, [r3, #1]
 8017850:	2b07      	cmp	r3, #7
 8017852:	f200 827b 	bhi.w	8017d4c <USBH_HandleEnum+0x510>
 8017856:	a201      	add	r2, pc, #4	@ (adr r2, 801785c <USBH_HandleEnum+0x20>)
 8017858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801785c:	0801787d 	.word	0x0801787d
 8017860:	08017955 	.word	0x08017955
 8017864:	08017a05 	.word	0x08017a05
 8017868:	08017ac1 	.word	0x08017ac1
 801786c:	08017b49 	.word	0x08017b49
 8017870:	08017bfb 	.word	0x08017bfb
 8017874:	08017c6f 	.word	0x08017c6f
 8017878:	08017ce1 	.word	0x08017ce1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 801787c:	2108      	movs	r1, #8
 801787e:	6878      	ldr	r0, [r7, #4]
 8017880:	f000 fb16 	bl	8017eb0 <USBH_Get_DevDesc>
 8017884:	4603      	mov	r3, r0
 8017886:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8017888:	7bbb      	ldrb	r3, [r7, #14]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d12e      	bne.n	80178ec <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	f893 242d 	ldrb.w	r2, [r3, #1069]	@ 0x42d
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	2201      	movs	r2, #1
 801789c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	7919      	ldrb	r1, [r3, #4]
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80178ae:	687a      	ldr	r2, [r7, #4]
 80178b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80178b2:	9202      	str	r2, [sp, #8]
 80178b4:	2200      	movs	r2, #0
 80178b6:	9201      	str	r2, [sp, #4]
 80178b8:	9300      	str	r3, [sp, #0]
 80178ba:	4603      	mov	r3, r0
 80178bc:	2280      	movs	r2, #128	@ 0x80
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f001 f9de 	bl	8018c80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	7959      	ldrb	r1, [r3, #5]
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80178d4:	687a      	ldr	r2, [r7, #4]
 80178d6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80178d8:	9202      	str	r2, [sp, #8]
 80178da:	2200      	movs	r2, #0
 80178dc:	9201      	str	r2, [sp, #4]
 80178de:	9300      	str	r3, [sp, #0]
 80178e0:	4603      	mov	r3, r0
 80178e2:	2200      	movs	r2, #0
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f001 f9cb 	bl	8018c80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80178ea:	e231      	b.n	8017d50 <USBH_HandleEnum+0x514>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80178ec:	7bbb      	ldrb	r3, [r7, #14]
 80178ee:	2b03      	cmp	r3, #3
 80178f0:	f040 822e 	bne.w	8017d50 <USBH_HandleEnum+0x514>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 80178f4:	48ae      	ldr	r0, [pc, #696]	@ (8017bb0 <USBH_HandleEnum+0x374>)
 80178f6:	f003 fcc7 	bl	801b288 <iprintf>
 80178fa:	48ae      	ldr	r0, [pc, #696]	@ (8017bb4 <USBH_HandleEnum+0x378>)
 80178fc:	f003 fcc4 	bl	801b288 <iprintf>
 8017900:	200a      	movs	r0, #10
 8017902:	f003 fcd3 	bl	801b2ac <putchar>
        phost->device.EnumCnt++;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 801790c:	3301      	adds	r3, #1
 801790e:	b2da      	uxtb	r2, r3
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 801791c:	2b03      	cmp	r3, #3
 801791e:	d909      	bls.n	8017934 <USBH_HandleEnum+0xf8>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8017920:	48a5      	ldr	r0, [pc, #660]	@ (8017bb8 <USBH_HandleEnum+0x37c>)
 8017922:	f003 fcb1 	bl	801b288 <iprintf>
 8017926:	200a      	movs	r0, #10
 8017928:	f003 fcc0 	bl	801b2ac <putchar>
          phost->gState = HOST_ABORT_STATE;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	220d      	movs	r2, #13
 8017930:	701a      	strb	r2, [r3, #0]
      break;
 8017932:	e20d      	b.n	8017d50 <USBH_HandleEnum+0x514>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	795b      	ldrb	r3, [r3, #5]
 8017938:	4619      	mov	r1, r3
 801793a:	6878      	ldr	r0, [r7, #4]
 801793c:	f001 f9f1 	bl	8018d22 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	791b      	ldrb	r3, [r3, #4]
 8017944:	4619      	mov	r1, r3
 8017946:	6878      	ldr	r0, [r7, #4]
 8017948:	f001 f9eb 	bl	8018d22 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	2200      	movs	r2, #0
 8017950:	701a      	strb	r2, [r3, #0]
      break;
 8017952:	e1fd      	b.n	8017d50 <USBH_HandleEnum+0x514>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8017954:	2112      	movs	r1, #18
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f000 faaa 	bl	8017eb0 <USBH_Get_DevDesc>
 801795c:	4603      	mov	r3, r0
 801795e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8017960:	7bbb      	ldrb	r3, [r7, #14]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d117      	bne.n	8017996 <USBH_HandleEnum+0x15a>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	f8b3 3430 	ldrh.w	r3, [r3, #1072]	@ 0x430
 801796c:	4619      	mov	r1, r3
 801796e:	4893      	ldr	r0, [pc, #588]	@ (8017bbc <USBH_HandleEnum+0x380>)
 8017970:	f003 fc8a 	bl	801b288 <iprintf>
 8017974:	200a      	movs	r0, #10
 8017976:	f003 fc99 	bl	801b2ac <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	@ 0x42e
 8017980:	4619      	mov	r1, r3
 8017982:	488f      	ldr	r0, [pc, #572]	@ (8017bc0 <USBH_HandleEnum+0x384>)
 8017984:	f003 fc80 	bl	801b288 <iprintf>
 8017988:	200a      	movs	r0, #10
 801798a:	f003 fc8f 	bl	801b2ac <putchar>

        phost->EnumState = ENUM_SET_ADDR;
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	2202      	movs	r2, #2
 8017992:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8017994:	e1de      	b.n	8017d54 <USBH_HandleEnum+0x518>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017996:	7bbb      	ldrb	r3, [r7, #14]
 8017998:	2b03      	cmp	r3, #3
 801799a:	f040 81db 	bne.w	8017d54 <USBH_HandleEnum+0x518>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 801799e:	4884      	ldr	r0, [pc, #528]	@ (8017bb0 <USBH_HandleEnum+0x374>)
 80179a0:	f003 fc72 	bl	801b288 <iprintf>
 80179a4:	4887      	ldr	r0, [pc, #540]	@ (8017bc4 <USBH_HandleEnum+0x388>)
 80179a6:	f003 fc6f 	bl	801b288 <iprintf>
 80179aa:	200a      	movs	r0, #10
 80179ac:	f003 fc7e 	bl	801b2ac <putchar>
        phost->device.EnumCnt++;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 80179b6:	3301      	adds	r3, #1
 80179b8:	b2da      	uxtb	r2, r3
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 80179c6:	2b03      	cmp	r3, #3
 80179c8:	d909      	bls.n	80179de <USBH_HandleEnum+0x1a2>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 80179ca:	487b      	ldr	r0, [pc, #492]	@ (8017bb8 <USBH_HandleEnum+0x37c>)
 80179cc:	f003 fc5c 	bl	801b288 <iprintf>
 80179d0:	200a      	movs	r0, #10
 80179d2:	f003 fc6b 	bl	801b2ac <putchar>
          phost->gState = HOST_ABORT_STATE;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	220d      	movs	r2, #13
 80179da:	701a      	strb	r2, [r3, #0]
      break;
 80179dc:	e1ba      	b.n	8017d54 <USBH_HandleEnum+0x518>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	795b      	ldrb	r3, [r3, #5]
 80179e2:	4619      	mov	r1, r3
 80179e4:	6878      	ldr	r0, [r7, #4]
 80179e6:	f001 f99c 	bl	8018d22 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	791b      	ldrb	r3, [r3, #4]
 80179ee:	4619      	mov	r1, r3
 80179f0:	6878      	ldr	r0, [r7, #4]
 80179f2:	f001 f996 	bl	8018d22 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	2200      	movs	r2, #0
 80179fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	2200      	movs	r2, #0
 8017a00:	701a      	strb	r2, [r3, #0]
      break;
 8017a02:	e1a7      	b.n	8017d54 <USBH_HandleEnum+0x518>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8017a04:	2101      	movs	r1, #1
 8017a06:	6878      	ldr	r0, [r7, #4]
 8017a08:	f000 fb3b 	bl	8018082 <USBH_SetAddress>
 8017a0c:	4603      	mov	r3, r0
 8017a0e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8017a10:	7bbb      	ldrb	r3, [r7, #14]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d13a      	bne.n	8017a8c <USBH_HandleEnum+0x250>
      {
        USBH_Delay(2U);
 8017a16:	2002      	movs	r0, #2
 8017a18:	f7e9 ffdc 	bl	80019d4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	2201      	movs	r2, #1
 8017a20:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8017a2a:	4619      	mov	r1, r3
 8017a2c:	4866      	ldr	r0, [pc, #408]	@ (8017bc8 <USBH_HandleEnum+0x38c>)
 8017a2e:	f003 fc2b 	bl	801b288 <iprintf>
 8017a32:	200a      	movs	r0, #10
 8017a34:	f003 fc3a 	bl	801b2ac <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	2203      	movs	r2, #3
 8017a3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	7919      	ldrb	r1, [r3, #4]
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8017a52:	9202      	str	r2, [sp, #8]
 8017a54:	2200      	movs	r2, #0
 8017a56:	9201      	str	r2, [sp, #4]
 8017a58:	9300      	str	r3, [sp, #0]
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	2280      	movs	r2, #128	@ 0x80
 8017a5e:	6878      	ldr	r0, [r7, #4]
 8017a60:	f001 f90e 	bl	8018c80 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	7959      	ldrb	r1, [r3, #5]
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f893 041c 	ldrb.w	r0, [r3, #1052]	@ 0x41c
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8017a74:	687a      	ldr	r2, [r7, #4]
 8017a76:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8017a78:	9202      	str	r2, [sp, #8]
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	9201      	str	r2, [sp, #4]
 8017a7e:	9300      	str	r3, [sp, #0]
 8017a80:	4603      	mov	r3, r0
 8017a82:	2200      	movs	r2, #0
 8017a84:	6878      	ldr	r0, [r7, #4]
 8017a86:	f001 f8fb 	bl	8018c80 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8017a8a:	e165      	b.n	8017d58 <USBH_HandleEnum+0x51c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017a8c:	7bbb      	ldrb	r3, [r7, #14]
 8017a8e:	2b03      	cmp	r3, #3
 8017a90:	f040 8162 	bne.w	8017d58 <USBH_HandleEnum+0x51c>
        USBH_ErrLog("Control error: Device Set Address request failed");
 8017a94:	4846      	ldr	r0, [pc, #280]	@ (8017bb0 <USBH_HandleEnum+0x374>)
 8017a96:	f003 fbf7 	bl	801b288 <iprintf>
 8017a9a:	484c      	ldr	r0, [pc, #304]	@ (8017bcc <USBH_HandleEnum+0x390>)
 8017a9c:	f003 fbf4 	bl	801b288 <iprintf>
 8017aa0:	200a      	movs	r0, #10
 8017aa2:	f003 fc03 	bl	801b2ac <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8017aa6:	4844      	ldr	r0, [pc, #272]	@ (8017bb8 <USBH_HandleEnum+0x37c>)
 8017aa8:	f003 fbee 	bl	801b288 <iprintf>
 8017aac:	200a      	movs	r0, #10
 8017aae:	f003 fbfd 	bl	801b2ac <putchar>
        phost->gState = HOST_ABORT_STATE;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	220d      	movs	r2, #13
 8017ab6:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2200      	movs	r2, #0
 8017abc:	705a      	strb	r2, [r3, #1]
      break;
 8017abe:	e14b      	b.n	8017d58 <USBH_HandleEnum+0x51c>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8017ac0:	2109      	movs	r1, #9
 8017ac2:	6878      	ldr	r0, [r7, #4]
 8017ac4:	f000 fa2e 	bl	8017f24 <USBH_Get_CfgDesc>
 8017ac8:	4603      	mov	r3, r0
 8017aca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8017acc:	7bbb      	ldrb	r3, [r7, #14]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d103      	bne.n	8017ada <USBH_HandleEnum+0x29e>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	2204      	movs	r2, #4
 8017ad6:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8017ad8:	e140      	b.n	8017d5c <USBH_HandleEnum+0x520>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017ada:	7bbb      	ldrb	r3, [r7, #14]
 8017adc:	2b03      	cmp	r3, #3
 8017ade:	f040 813d 	bne.w	8017d5c <USBH_HandleEnum+0x520>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8017ae2:	4833      	ldr	r0, [pc, #204]	@ (8017bb0 <USBH_HandleEnum+0x374>)
 8017ae4:	f003 fbd0 	bl	801b288 <iprintf>
 8017ae8:	4839      	ldr	r0, [pc, #228]	@ (8017bd0 <USBH_HandleEnum+0x394>)
 8017aea:	f003 fbcd 	bl	801b288 <iprintf>
 8017aee:	200a      	movs	r0, #10
 8017af0:	f003 fbdc 	bl	801b2ac <putchar>
        phost->device.EnumCnt++;
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 8017afa:	3301      	adds	r3, #1
 8017afc:	b2da      	uxtb	r2, r3
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 8017b0a:	2b03      	cmp	r3, #3
 8017b0c:	d909      	bls.n	8017b22 <USBH_HandleEnum+0x2e6>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8017b0e:	482a      	ldr	r0, [pc, #168]	@ (8017bb8 <USBH_HandleEnum+0x37c>)
 8017b10:	f003 fbba 	bl	801b288 <iprintf>
 8017b14:	200a      	movs	r0, #10
 8017b16:	f003 fbc9 	bl	801b2ac <putchar>
          phost->gState = HOST_ABORT_STATE;
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	220d      	movs	r2, #13
 8017b1e:	701a      	strb	r2, [r3, #0]
      break;
 8017b20:	e11c      	b.n	8017d5c <USBH_HandleEnum+0x520>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	795b      	ldrb	r3, [r3, #5]
 8017b26:	4619      	mov	r1, r3
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f001 f8fa 	bl	8018d22 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	791b      	ldrb	r3, [r3, #4]
 8017b32:	4619      	mov	r1, r3
 8017b34:	6878      	ldr	r0, [r7, #4]
 8017b36:	f001 f8f4 	bl	8018d22 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	2200      	movs	r2, #0
 8017b44:	701a      	strb	r2, [r3, #0]
      break;
 8017b46:	e109      	b.n	8017d5c <USBH_HandleEnum+0x520>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	f8b3 343a 	ldrh.w	r3, [r3, #1082]	@ 0x43a
 8017b4e:	4619      	mov	r1, r3
 8017b50:	6878      	ldr	r0, [r7, #4]
 8017b52:	f000 f9e7 	bl	8017f24 <USBH_Get_CfgDesc>
 8017b56:	4603      	mov	r3, r0
 8017b58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8017b5a:	7bbb      	ldrb	r3, [r7, #14]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d103      	bne.n	8017b68 <USBH_HandleEnum+0x32c>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	2205      	movs	r2, #5
 8017b64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8017b66:	e0fb      	b.n	8017d60 <USBH_HandleEnum+0x524>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017b68:	7bbb      	ldrb	r3, [r7, #14]
 8017b6a:	2b03      	cmp	r3, #3
 8017b6c:	f040 80f8 	bne.w	8017d60 <USBH_HandleEnum+0x524>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8017b70:	480f      	ldr	r0, [pc, #60]	@ (8017bb0 <USBH_HandleEnum+0x374>)
 8017b72:	f003 fb89 	bl	801b288 <iprintf>
 8017b76:	4816      	ldr	r0, [pc, #88]	@ (8017bd0 <USBH_HandleEnum+0x394>)
 8017b78:	f003 fb86 	bl	801b288 <iprintf>
 8017b7c:	200a      	movs	r0, #10
 8017b7e:	f003 fb95 	bl	801b2ac <putchar>
        phost->device.EnumCnt++;
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 8017b88:	3301      	adds	r3, #1
 8017b8a:	b2da      	uxtb	r2, r3
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        if (phost->device.EnumCnt > 3U)
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 8017b98:	2b03      	cmp	r3, #3
 8017b9a:	d91b      	bls.n	8017bd4 <USBH_HandleEnum+0x398>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8017b9c:	4806      	ldr	r0, [pc, #24]	@ (8017bb8 <USBH_HandleEnum+0x37c>)
 8017b9e:	f003 fb73 	bl	801b288 <iprintf>
 8017ba2:	200a      	movs	r0, #10
 8017ba4:	f003 fb82 	bl	801b2ac <putchar>
          phost->gState = HOST_ABORT_STATE;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	220d      	movs	r2, #13
 8017bac:	701a      	strb	r2, [r3, #0]
      break;
 8017bae:	e0d7      	b.n	8017d60 <USBH_HandleEnum+0x524>
 8017bb0:	0801d214 	.word	0x0801d214
 8017bb4:	0801d4ac 	.word	0x0801d4ac
 8017bb8:	0801d4e0 	.word	0x0801d4e0
 8017bbc:	0801d520 	.word	0x0801d520
 8017bc0:	0801d52c 	.word	0x0801d52c
 8017bc4:	0801d538 	.word	0x0801d538
 8017bc8:	0801d574 	.word	0x0801d574
 8017bcc:	0801d58c 	.word	0x0801d58c
 8017bd0:	0801d5c0 	.word	0x0801d5c0
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	795b      	ldrb	r3, [r3, #5]
 8017bd8:	4619      	mov	r1, r3
 8017bda:	6878      	ldr	r0, [r7, #4]
 8017bdc:	f001 f8a1 	bl	8018d22 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	791b      	ldrb	r3, [r3, #4]
 8017be4:	4619      	mov	r1, r3
 8017be6:	6878      	ldr	r0, [r7, #4]
 8017be8:	f001 f89b 	bl	8018d22 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	2200      	movs	r2, #0
 8017bf0:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	701a      	strb	r2, [r3, #0]
      break;
 8017bf8:	e0b2      	b.n	8017d60 <USBH_HandleEnum+0x524>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d02a      	beq.n	8017c5a <USBH_HandleEnum+0x41e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	f893 1434 	ldrb.w	r1, [r3, #1076]	@ 0x434
                                        phost->device.Data, 0xFFU);
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8017c10:	23ff      	movs	r3, #255	@ 0xff
 8017c12:	6878      	ldr	r0, [r7, #4]
 8017c14:	f000 f9be 	bl	8017f94 <USBH_Get_StringDesc>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8017c1c:	7bbb      	ldrb	r3, [r7, #14]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d10d      	bne.n	8017c3e <USBH_HandleEnum+0x402>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8017c28:	4619      	mov	r1, r3
 8017c2a:	4853      	ldr	r0, [pc, #332]	@ (8017d78 <USBH_HandleEnum+0x53c>)
 8017c2c:	f003 fb2c 	bl	801b288 <iprintf>
 8017c30:	200a      	movs	r0, #10
 8017c32:	f003 fb3b 	bl	801b2ac <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	2206      	movs	r2, #6
 8017c3a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8017c3c:	e092      	b.n	8017d64 <USBH_HandleEnum+0x528>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017c3e:	7bbb      	ldrb	r3, [r7, #14]
 8017c40:	2b03      	cmp	r3, #3
 8017c42:	f040 808f 	bne.w	8017d64 <USBH_HandleEnum+0x528>
          USBH_UsrLog("Manufacturer : N/A");
 8017c46:	484d      	ldr	r0, [pc, #308]	@ (8017d7c <USBH_HandleEnum+0x540>)
 8017c48:	f003 fb1e 	bl	801b288 <iprintf>
 8017c4c:	200a      	movs	r0, #10
 8017c4e:	f003 fb2d 	bl	801b2ac <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	2206      	movs	r2, #6
 8017c56:	705a      	strb	r2, [r3, #1]
      break;
 8017c58:	e084      	b.n	8017d64 <USBH_HandleEnum+0x528>
        USBH_UsrLog("Manufacturer : N/A");
 8017c5a:	4848      	ldr	r0, [pc, #288]	@ (8017d7c <USBH_HandleEnum+0x540>)
 8017c5c:	f003 fb14 	bl	801b288 <iprintf>
 8017c60:	200a      	movs	r0, #10
 8017c62:	f003 fb23 	bl	801b2ac <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	2206      	movs	r2, #6
 8017c6a:	705a      	strb	r2, [r3, #1]
      break;
 8017c6c:	e07a      	b.n	8017d64 <USBH_HandleEnum+0x528>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	f893 3435 	ldrb.w	r3, [r3, #1077]	@ 0x435
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d029      	beq.n	8017ccc <USBH_HandleEnum+0x490>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f893 1435 	ldrb.w	r1, [r3, #1077]	@ 0x435
                                        phost->device.Data, 0xFFU);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8017c84:	23ff      	movs	r3, #255	@ 0xff
 8017c86:	6878      	ldr	r0, [r7, #4]
 8017c88:	f000 f984 	bl	8017f94 <USBH_Get_StringDesc>
 8017c8c:	4603      	mov	r3, r0
 8017c8e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8017c90:	7bbb      	ldrb	r3, [r7, #14]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d10d      	bne.n	8017cb2 <USBH_HandleEnum+0x476>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8017c9c:	4619      	mov	r1, r3
 8017c9e:	4838      	ldr	r0, [pc, #224]	@ (8017d80 <USBH_HandleEnum+0x544>)
 8017ca0:	f003 faf2 	bl	801b288 <iprintf>
 8017ca4:	200a      	movs	r0, #10
 8017ca6:	f003 fb01 	bl	801b2ac <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	2207      	movs	r2, #7
 8017cae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8017cb0:	e05a      	b.n	8017d68 <USBH_HandleEnum+0x52c>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017cb2:	7bbb      	ldrb	r3, [r7, #14]
 8017cb4:	2b03      	cmp	r3, #3
 8017cb6:	d157      	bne.n	8017d68 <USBH_HandleEnum+0x52c>
          USBH_UsrLog("Product : N/A");
 8017cb8:	4832      	ldr	r0, [pc, #200]	@ (8017d84 <USBH_HandleEnum+0x548>)
 8017cba:	f003 fae5 	bl	801b288 <iprintf>
 8017cbe:	200a      	movs	r0, #10
 8017cc0:	f003 faf4 	bl	801b2ac <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2207      	movs	r2, #7
 8017cc8:	705a      	strb	r2, [r3, #1]
      break;
 8017cca:	e04d      	b.n	8017d68 <USBH_HandleEnum+0x52c>
        USBH_UsrLog("Product : N/A");
 8017ccc:	482d      	ldr	r0, [pc, #180]	@ (8017d84 <USBH_HandleEnum+0x548>)
 8017cce:	f003 fadb 	bl	801b288 <iprintf>
 8017cd2:	200a      	movs	r0, #10
 8017cd4:	f003 faea 	bl	801b2ac <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	2207      	movs	r2, #7
 8017cdc:	705a      	strb	r2, [r3, #1]
      break;
 8017cde:	e043      	b.n	8017d68 <USBH_HandleEnum+0x52c>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	f893 3436 	ldrb.w	r3, [r3, #1078]	@ 0x436
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d027      	beq.n	8017d3a <USBH_HandleEnum+0x4fe>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	f893 1436 	ldrb.w	r1, [r3, #1078]	@ 0x436
                                        phost->device.Data, 0xFFU);
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8017cf6:	23ff      	movs	r3, #255	@ 0xff
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	f000 f94b 	bl	8017f94 <USBH_Get_StringDesc>
 8017cfe:	4603      	mov	r3, r0
 8017d00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8017d02:	7bbb      	ldrb	r3, [r7, #14]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d10c      	bne.n	8017d22 <USBH_HandleEnum+0x4e6>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8017d0e:	4619      	mov	r1, r3
 8017d10:	481d      	ldr	r0, [pc, #116]	@ (8017d88 <USBH_HandleEnum+0x54c>)
 8017d12:	f003 fab9 	bl	801b288 <iprintf>
 8017d16:	200a      	movs	r0, #10
 8017d18:	f003 fac8 	bl	801b2ac <putchar>
          Status = USBH_OK;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8017d20:	e024      	b.n	8017d6c <USBH_HandleEnum+0x530>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8017d22:	7bbb      	ldrb	r3, [r7, #14]
 8017d24:	2b03      	cmp	r3, #3
 8017d26:	d121      	bne.n	8017d6c <USBH_HandleEnum+0x530>
          USBH_UsrLog("Serial Number : N/A");
 8017d28:	4818      	ldr	r0, [pc, #96]	@ (8017d8c <USBH_HandleEnum+0x550>)
 8017d2a:	f003 faad 	bl	801b288 <iprintf>
 8017d2e:	200a      	movs	r0, #10
 8017d30:	f003 fabc 	bl	801b2ac <putchar>
          Status = USBH_OK;
 8017d34:	2300      	movs	r3, #0
 8017d36:	73fb      	strb	r3, [r7, #15]
      break;
 8017d38:	e018      	b.n	8017d6c <USBH_HandleEnum+0x530>
        USBH_UsrLog("Serial Number : N/A");
 8017d3a:	4814      	ldr	r0, [pc, #80]	@ (8017d8c <USBH_HandleEnum+0x550>)
 8017d3c:	f003 faa4 	bl	801b288 <iprintf>
 8017d40:	200a      	movs	r0, #10
 8017d42:	f003 fab3 	bl	801b2ac <putchar>
        Status = USBH_OK;
 8017d46:	2300      	movs	r3, #0
 8017d48:	73fb      	strb	r3, [r7, #15]
      break;
 8017d4a:	e00f      	b.n	8017d6c <USBH_HandleEnum+0x530>

    default:
      break;
 8017d4c:	bf00      	nop
 8017d4e:	e00e      	b.n	8017d6e <USBH_HandleEnum+0x532>
      break;
 8017d50:	bf00      	nop
 8017d52:	e00c      	b.n	8017d6e <USBH_HandleEnum+0x532>
      break;
 8017d54:	bf00      	nop
 8017d56:	e00a      	b.n	8017d6e <USBH_HandleEnum+0x532>
      break;
 8017d58:	bf00      	nop
 8017d5a:	e008      	b.n	8017d6e <USBH_HandleEnum+0x532>
      break;
 8017d5c:	bf00      	nop
 8017d5e:	e006      	b.n	8017d6e <USBH_HandleEnum+0x532>
      break;
 8017d60:	bf00      	nop
 8017d62:	e004      	b.n	8017d6e <USBH_HandleEnum+0x532>
      break;
 8017d64:	bf00      	nop
 8017d66:	e002      	b.n	8017d6e <USBH_HandleEnum+0x532>
      break;
 8017d68:	bf00      	nop
 8017d6a:	e000      	b.n	8017d6e <USBH_HandleEnum+0x532>
      break;
 8017d6c:	bf00      	nop
  }
  return Status;
 8017d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d70:	4618      	mov	r0, r3
 8017d72:	3710      	adds	r7, #16
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}
 8017d78:	0801d604 	.word	0x0801d604
 8017d7c:	0801d618 	.word	0x0801d618
 8017d80:	0801d62c 	.word	0x0801d62c
 8017d84:	0801d63c 	.word	0x0801d63c
 8017d88:	0801d64c 	.word	0x0801d64c
 8017d8c:	0801d660 	.word	0x0801d660

08017d90 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8017d90:	b480      	push	{r7}
 8017d92:	b083      	sub	sp, #12
 8017d94:	af00      	add	r7, sp, #0
 8017d96:	6078      	str	r0, [r7, #4]
 8017d98:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	683a      	ldr	r2, [r7, #0]
 8017d9e:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
}
 8017da2:	bf00      	nop
 8017da4:	370c      	adds	r7, #12
 8017da6:	46bd      	mov	sp, r7
 8017da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dac:	4770      	bx	lr

08017dae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8017dae:	b580      	push	{r7, lr}
 8017db0:	b082      	sub	sp, #8
 8017db2:	af00      	add	r7, sp, #0
 8017db4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 8017dbc:	1c5a      	adds	r2, r3, #1
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
  USBH_HandleSof(phost);
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f000 f804 	bl	8017dd2 <USBH_HandleSof>
}
 8017dca:	bf00      	nop
 8017dcc:	3708      	adds	r7, #8
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd80      	pop	{r7, pc}

08017dd2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8017dd2:	b580      	push	{r7, lr}
 8017dd4:	b082      	sub	sp, #8
 8017dd6:	af00      	add	r7, sp, #0
 8017dd8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	b2db      	uxtb	r3, r3
 8017de0:	2b0b      	cmp	r3, #11
 8017de2:	d10a      	bne.n	8017dfa <USBH_HandleSof+0x28>
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d005      	beq.n	8017dfa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	f8d3 347c 	ldr.w	r3, [r3, #1148]	@ 0x47c
 8017df4:	699b      	ldr	r3, [r3, #24]
 8017df6:	6878      	ldr	r0, [r7, #4]
 8017df8:	4798      	blx	r3
  }
}
 8017dfa:	bf00      	nop
 8017dfc:	3708      	adds	r7, #8
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}

08017e02 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8017e02:	b480      	push	{r7}
 8017e04:	b083      	sub	sp, #12
 8017e06:	af00      	add	r7, sp, #0
 8017e08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	2201      	movs	r2, #1
 8017e0e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8017e12:	bf00      	nop
}
 8017e14:	370c      	adds	r7, #12
 8017e16:	46bd      	mov	sp, r7
 8017e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e1c:	4770      	bx	lr

08017e1e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8017e1e:	b480      	push	{r7}
 8017e20:	b083      	sub	sp, #12
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	2200      	movs	r2, #0
 8017e2a:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  return;
 8017e2e:	bf00      	nop
}
 8017e30:	370c      	adds	r7, #12
 8017e32:	46bd      	mov	sp, r7
 8017e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e38:	4770      	bx	lr

08017e3a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8017e3a:	b480      	push	{r7}
 8017e3c:	b083      	sub	sp, #12
 8017e3e:	af00      	add	r7, sp, #0
 8017e40:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	2201      	movs	r2, #1
 8017e46:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.is_disconnected = 0U;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_ReEnumerated = 0U;
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	2200      	movs	r2, #0
 8017e56:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8017e5a:	2300      	movs	r3, #0
}
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	370c      	adds	r7, #12
 8017e60:	46bd      	mov	sp, r7
 8017e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e66:	4770      	bx	lr

08017e68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	2201      	movs	r2, #1
 8017e74:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
  phost->device.is_connected = 0U;
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
  phost->device.PortEnabled = 0U;
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	2200      	movs	r2, #0
 8017e84:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8017e88:	6878      	ldr	r0, [r7, #4]
 8017e8a:	f7e9 fc5e 	bl	800174a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	791b      	ldrb	r3, [r3, #4]
 8017e92:	4619      	mov	r1, r3
 8017e94:	6878      	ldr	r0, [r7, #4]
 8017e96:	f000 ff44 	bl	8018d22 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	795b      	ldrb	r3, [r3, #5]
 8017e9e:	4619      	mov	r1, r3
 8017ea0:	6878      	ldr	r0, [r7, #4]
 8017ea2:	f000 ff3e 	bl	8018d22 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8017ea6:	2300      	movs	r3, #0
}
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	3708      	adds	r7, #8
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bd80      	pop	{r7, pc}

08017eb0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b086      	sub	sp, #24
 8017eb4:	af02      	add	r7, sp, #8
 8017eb6:	6078      	str	r0, [r7, #4]
 8017eb8:	460b      	mov	r3, r1
 8017eba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8017ebc:	887b      	ldrh	r3, [r7, #2]
 8017ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017ec2:	d90a      	bls.n	8017eda <USBH_Get_DevDesc+0x2a>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
 8017ec4:	4815      	ldr	r0, [pc, #84]	@ (8017f1c <USBH_Get_DevDesc+0x6c>)
 8017ec6:	f003 f9df 	bl	801b288 <iprintf>
 8017eca:	4815      	ldr	r0, [pc, #84]	@ (8017f20 <USBH_Get_DevDesc+0x70>)
 8017ecc:	f003 f9dc 	bl	801b288 <iprintf>
 8017ed0:	200a      	movs	r0, #10
 8017ed2:	f003 f9eb 	bl	801b2ac <putchar>
    return USBH_NOT_SUPPORTED;
 8017ed6:	2303      	movs	r3, #3
 8017ed8:	e01b      	b.n	8017f12 <USBH_Get_DevDesc+0x62>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	f503 7207 	add.w	r2, r3, #540	@ 0x21c
  status = USBH_GetDescriptor(phost,
 8017ee0:	887b      	ldrh	r3, [r7, #2]
 8017ee2:	9300      	str	r3, [sp, #0]
 8017ee4:	4613      	mov	r3, r2
 8017ee6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017eea:	2100      	movs	r1, #0
 8017eec:	6878      	ldr	r0, [r7, #4]
 8017eee:	f000 f893 	bl	8018018 <USBH_GetDescriptor>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8017ef6:	7bfb      	ldrb	r3, [r7, #15]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d109      	bne.n	8017f10 <USBH_Get_DevDesc+0x60>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8017f02:	887a      	ldrh	r2, [r7, #2]
 8017f04:	4619      	mov	r1, r3
 8017f06:	6878      	ldr	r0, [r7, #4]
 8017f08:	f000 f94a 	bl	80181a0 <USBH_ParseDevDesc>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8017f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	3710      	adds	r7, #16
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}
 8017f1a:	bf00      	nop
 8017f1c:	0801d674 	.word	0x0801d674
 8017f20:	0801d67c 	.word	0x0801d67c

08017f24 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b086      	sub	sp, #24
 8017f28:	af02      	add	r7, sp, #8
 8017f2a:	6078      	str	r0, [r7, #4]
 8017f2c:	460b      	mov	r3, r1
 8017f2e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	331c      	adds	r3, #28
 8017f34:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8017f36:	887b      	ldrh	r3, [r7, #2]
 8017f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017f3c:	d90a      	bls.n	8017f54 <USBH_Get_CfgDesc+0x30>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
 8017f3e:	4813      	ldr	r0, [pc, #76]	@ (8017f8c <USBH_Get_CfgDesc+0x68>)
 8017f40:	f003 f9a2 	bl	801b288 <iprintf>
 8017f44:	4812      	ldr	r0, [pc, #72]	@ (8017f90 <USBH_Get_CfgDesc+0x6c>)
 8017f46:	f003 f99f 	bl	801b288 <iprintf>
 8017f4a:	200a      	movs	r0, #10
 8017f4c:	f003 f9ae 	bl	801b2ac <putchar>
    return USBH_NOT_SUPPORTED;
 8017f50:	2303      	movs	r3, #3
 8017f52:	e016      	b.n	8017f82 <USBH_Get_CfgDesc+0x5e>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8017f54:	887b      	ldrh	r3, [r7, #2]
 8017f56:	9300      	str	r3, [sp, #0]
 8017f58:	68bb      	ldr	r3, [r7, #8]
 8017f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017f5e:	2100      	movs	r1, #0
 8017f60:	6878      	ldr	r0, [r7, #4]
 8017f62:	f000 f859 	bl	8018018 <USBH_GetDescriptor>
 8017f66:	4603      	mov	r3, r0
 8017f68:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8017f6a:	7bfb      	ldrb	r3, [r7, #15]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d107      	bne.n	8017f80 <USBH_Get_CfgDesc+0x5c>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8017f70:	887b      	ldrh	r3, [r7, #2]
 8017f72:	461a      	mov	r2, r3
 8017f74:	68b9      	ldr	r1, [r7, #8]
 8017f76:	6878      	ldr	r0, [r7, #4]
 8017f78:	f000 f9c2 	bl	8018300 <USBH_ParseCfgDesc>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8017f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f82:	4618      	mov	r0, r3
 8017f84:	3710      	adds	r7, #16
 8017f86:	46bd      	mov	sp, r7
 8017f88:	bd80      	pop	{r7, pc}
 8017f8a:	bf00      	nop
 8017f8c:	0801d674 	.word	0x0801d674
 8017f90:	0801d6c0 	.word	0x0801d6c0

08017f94 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b088      	sub	sp, #32
 8017f98:	af02      	add	r7, sp, #8
 8017f9a:	60f8      	str	r0, [r7, #12]
 8017f9c:	607a      	str	r2, [r7, #4]
 8017f9e:	461a      	mov	r2, r3
 8017fa0:	460b      	mov	r3, r1
 8017fa2:	72fb      	strb	r3, [r7, #11]
 8017fa4:	4613      	mov	r3, r2
 8017fa6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8017fa8:	893b      	ldrh	r3, [r7, #8]
 8017faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017fae:	d802      	bhi.n	8017fb6 <USBH_Get_StringDesc+0x22>
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d10a      	bne.n	8017fcc <USBH_Get_StringDesc+0x38>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
 8017fb6:	4816      	ldr	r0, [pc, #88]	@ (8018010 <USBH_Get_StringDesc+0x7c>)
 8017fb8:	f003 f966 	bl	801b288 <iprintf>
 8017fbc:	4815      	ldr	r0, [pc, #84]	@ (8018014 <USBH_Get_StringDesc+0x80>)
 8017fbe:	f003 f963 	bl	801b288 <iprintf>
 8017fc2:	200a      	movs	r0, #10
 8017fc4:	f003 f972 	bl	801b2ac <putchar>
    return USBH_NOT_SUPPORTED;
 8017fc8:	2303      	movs	r3, #3
 8017fca:	e01c      	b.n	8018006 <USBH_Get_StringDesc+0x72>
  }

  status = USBH_GetDescriptor(phost,
 8017fcc:	7afb      	ldrb	r3, [r7, #11]
 8017fce:	b29b      	uxth	r3, r3
 8017fd0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8017fd4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	f503 7107 	add.w	r1, r3, #540	@ 0x21c
  status = USBH_GetDescriptor(phost,
 8017fdc:	893b      	ldrh	r3, [r7, #8]
 8017fde:	9300      	str	r3, [sp, #0]
 8017fe0:	460b      	mov	r3, r1
 8017fe2:	2100      	movs	r1, #0
 8017fe4:	68f8      	ldr	r0, [r7, #12]
 8017fe6:	f000 f817 	bl	8018018 <USBH_GetDescriptor>
 8017fea:	4603      	mov	r3, r0
 8017fec:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8017fee:	7dfb      	ldrb	r3, [r7, #23]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d107      	bne.n	8018004 <USBH_Get_StringDesc+0x70>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8017ffa:	893a      	ldrh	r2, [r7, #8]
 8017ffc:	6879      	ldr	r1, [r7, #4]
 8017ffe:	4618      	mov	r0, r3
 8018000:	f000 fb92 	bl	8018728 <USBH_ParseStringDesc>
  }

  return status;
 8018004:	7dfb      	ldrb	r3, [r7, #23]
}
 8018006:	4618      	mov	r0, r3
 8018008:	3718      	adds	r7, #24
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	0801d674 	.word	0x0801d674
 8018014:	0801d70c 	.word	0x0801d70c

08018018 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b084      	sub	sp, #16
 801801c:	af00      	add	r7, sp, #0
 801801e:	60f8      	str	r0, [r7, #12]
 8018020:	607b      	str	r3, [r7, #4]
 8018022:	460b      	mov	r3, r1
 8018024:	72fb      	strb	r3, [r7, #11]
 8018026:	4613      	mov	r3, r2
 8018028:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	789b      	ldrb	r3, [r3, #2]
 801802e:	2b01      	cmp	r3, #1
 8018030:	d11c      	bne.n	801806c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8018032:	7afb      	ldrb	r3, [r7, #11]
 8018034:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018038:	b2da      	uxtb	r2, r3
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	2206      	movs	r2, #6
 8018042:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	893a      	ldrh	r2, [r7, #8]
 8018048:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 801804a:	893b      	ldrh	r3, [r7, #8]
 801804c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8018050:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018054:	d104      	bne.n	8018060 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	f240 4209 	movw	r2, #1033	@ 0x409
 801805c:	829a      	strh	r2, [r3, #20]
 801805e:	e002      	b.n	8018066 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	2200      	movs	r2, #0
 8018064:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	8b3a      	ldrh	r2, [r7, #24]
 801806a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 801806c:	8b3b      	ldrh	r3, [r7, #24]
 801806e:	461a      	mov	r2, r3
 8018070:	6879      	ldr	r1, [r7, #4]
 8018072:	68f8      	ldr	r0, [r7, #12]
 8018074:	f000 fba5 	bl	80187c2 <USBH_CtlReq>
 8018078:	4603      	mov	r3, r0
}
 801807a:	4618      	mov	r0, r3
 801807c:	3710      	adds	r7, #16
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}

08018082 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8018082:	b580      	push	{r7, lr}
 8018084:	b082      	sub	sp, #8
 8018086:	af00      	add	r7, sp, #0
 8018088:	6078      	str	r0, [r7, #4]
 801808a:	460b      	mov	r3, r1
 801808c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	789b      	ldrb	r3, [r3, #2]
 8018092:	2b01      	cmp	r3, #1
 8018094:	d10f      	bne.n	80180b6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	2200      	movs	r2, #0
 801809a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2205      	movs	r2, #5
 80180a0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80180a2:	78fb      	ldrb	r3, [r7, #3]
 80180a4:	b29a      	uxth	r2, r3
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	2200      	movs	r2, #0
 80180ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	2200      	movs	r2, #0
 80180b4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80180b6:	2200      	movs	r2, #0
 80180b8:	2100      	movs	r1, #0
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f000 fb81 	bl	80187c2 <USBH_CtlReq>
 80180c0:	4603      	mov	r3, r0
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	3708      	adds	r7, #8
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd80      	pop	{r7, pc}

080180ca <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80180ca:	b580      	push	{r7, lr}
 80180cc:	b082      	sub	sp, #8
 80180ce:	af00      	add	r7, sp, #0
 80180d0:	6078      	str	r0, [r7, #4]
 80180d2:	460b      	mov	r3, r1
 80180d4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	789b      	ldrb	r3, [r3, #2]
 80180da:	2b01      	cmp	r3, #1
 80180dc:	d10e      	bne.n	80180fc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	2200      	movs	r2, #0
 80180e2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	2209      	movs	r2, #9
 80180e8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	887a      	ldrh	r2, [r7, #2]
 80180ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2200      	movs	r2, #0
 80180f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	2200      	movs	r2, #0
 80180fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80180fc:	2200      	movs	r2, #0
 80180fe:	2100      	movs	r1, #0
 8018100:	6878      	ldr	r0, [r7, #4]
 8018102:	f000 fb5e 	bl	80187c2 <USBH_CtlReq>
 8018106:	4603      	mov	r3, r0
}
 8018108:	4618      	mov	r0, r3
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bd80      	pop	{r7, pc}

08018110 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b082      	sub	sp, #8
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
 8018118:	460b      	mov	r3, r1
 801811a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	789b      	ldrb	r3, [r3, #2]
 8018120:	2b01      	cmp	r3, #1
 8018122:	d10f      	bne.n	8018144 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	2200      	movs	r2, #0
 8018128:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	2203      	movs	r2, #3
 801812e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8018130:	78fb      	ldrb	r3, [r7, #3]
 8018132:	b29a      	uxth	r2, r3
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	2200      	movs	r2, #0
 801813c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	2200      	movs	r2, #0
 8018142:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8018144:	2200      	movs	r2, #0
 8018146:	2100      	movs	r1, #0
 8018148:	6878      	ldr	r0, [r7, #4]
 801814a:	f000 fb3a 	bl	80187c2 <USBH_CtlReq>
 801814e:	4603      	mov	r3, r0
}
 8018150:	4618      	mov	r0, r3
 8018152:	3708      	adds	r7, #8
 8018154:	46bd      	mov	sp, r7
 8018156:	bd80      	pop	{r7, pc}

08018158 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b082      	sub	sp, #8
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
 8018160:	460b      	mov	r3, r1
 8018162:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	789b      	ldrb	r3, [r3, #2]
 8018168:	2b01      	cmp	r3, #1
 801816a:	d10f      	bne.n	801818c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	2202      	movs	r2, #2
 8018170:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2201      	movs	r2, #1
 8018176:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2200      	movs	r2, #0
 801817c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 801817e:	78fb      	ldrb	r3, [r7, #3]
 8018180:	b29a      	uxth	r2, r3
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	2200      	movs	r2, #0
 801818a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801818c:	2200      	movs	r2, #0
 801818e:	2100      	movs	r1, #0
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	f000 fb16 	bl	80187c2 <USBH_CtlReq>
 8018196:	4603      	mov	r3, r0
}
 8018198:	4618      	mov	r0, r3
 801819a:	3708      	adds	r7, #8
 801819c:	46bd      	mov	sp, r7
 801819e:	bd80      	pop	{r7, pc}

080181a0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80181a0:	b480      	push	{r7}
 80181a2:	b087      	sub	sp, #28
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	60f8      	str	r0, [r7, #12]
 80181a8:	60b9      	str	r1, [r7, #8]
 80181aa:	4613      	mov	r3, r2
 80181ac:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	f203 4326 	addw	r3, r3, #1062	@ 0x426
 80181b4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80181b6:	2300      	movs	r3, #0
 80181b8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80181ba:	68bb      	ldr	r3, [r7, #8]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d101      	bne.n	80181c4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80181c0:	2302      	movs	r3, #2
 80181c2:	e094      	b.n	80182ee <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	781a      	ldrb	r2, [r3, #0]
 80181c8:	693b      	ldr	r3, [r7, #16]
 80181ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80181cc:	68bb      	ldr	r3, [r7, #8]
 80181ce:	785a      	ldrb	r2, [r3, #1]
 80181d0:	693b      	ldr	r3, [r7, #16]
 80181d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80181d4:	68bb      	ldr	r3, [r7, #8]
 80181d6:	3302      	adds	r3, #2
 80181d8:	781b      	ldrb	r3, [r3, #0]
 80181da:	461a      	mov	r2, r3
 80181dc:	68bb      	ldr	r3, [r7, #8]
 80181de:	3303      	adds	r3, #3
 80181e0:	781b      	ldrb	r3, [r3, #0]
 80181e2:	021b      	lsls	r3, r3, #8
 80181e4:	b29b      	uxth	r3, r3
 80181e6:	4313      	orrs	r3, r2
 80181e8:	b29a      	uxth	r2, r3
 80181ea:	693b      	ldr	r3, [r7, #16]
 80181ec:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80181ee:	68bb      	ldr	r3, [r7, #8]
 80181f0:	791a      	ldrb	r2, [r3, #4]
 80181f2:	693b      	ldr	r3, [r7, #16]
 80181f4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80181f6:	68bb      	ldr	r3, [r7, #8]
 80181f8:	795a      	ldrb	r2, [r3, #5]
 80181fa:	693b      	ldr	r3, [r7, #16]
 80181fc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80181fe:	68bb      	ldr	r3, [r7, #8]
 8018200:	799a      	ldrb	r2, [r3, #6]
 8018202:	693b      	ldr	r3, [r7, #16]
 8018204:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	79da      	ldrb	r2, [r3, #7]
 801820a:	693b      	ldr	r3, [r7, #16]
 801820c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8018214:	2b00      	cmp	r3, #0
 8018216:	d004      	beq.n	8018222 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801821e:	2b01      	cmp	r3, #1
 8018220:	d11b      	bne.n	801825a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	79db      	ldrb	r3, [r3, #7]
 8018226:	2b20      	cmp	r3, #32
 8018228:	dc0f      	bgt.n	801824a <USBH_ParseDevDesc+0xaa>
 801822a:	2b08      	cmp	r3, #8
 801822c:	db0f      	blt.n	801824e <USBH_ParseDevDesc+0xae>
 801822e:	3b08      	subs	r3, #8
 8018230:	4a32      	ldr	r2, [pc, #200]	@ (80182fc <USBH_ParseDevDesc+0x15c>)
 8018232:	fa22 f303 	lsr.w	r3, r2, r3
 8018236:	f003 0301 	and.w	r3, r3, #1
 801823a:	2b00      	cmp	r3, #0
 801823c:	bf14      	ite	ne
 801823e:	2301      	movne	r3, #1
 8018240:	2300      	moveq	r3, #0
 8018242:	b2db      	uxtb	r3, r3
 8018244:	2b00      	cmp	r3, #0
 8018246:	d106      	bne.n	8018256 <USBH_ParseDevDesc+0xb6>
 8018248:	e001      	b.n	801824e <USBH_ParseDevDesc+0xae>
 801824a:	2b40      	cmp	r3, #64	@ 0x40
 801824c:	d003      	beq.n	8018256 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	2208      	movs	r2, #8
 8018252:	71da      	strb	r2, [r3, #7]
        break;
 8018254:	e000      	b.n	8018258 <USBH_ParseDevDesc+0xb8>
        break;
 8018256:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8018258:	e00e      	b.n	8018278 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8018260:	2b02      	cmp	r3, #2
 8018262:	d107      	bne.n	8018274 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8018264:	693b      	ldr	r3, [r7, #16]
 8018266:	79db      	ldrb	r3, [r3, #7]
 8018268:	2b08      	cmp	r3, #8
 801826a:	d005      	beq.n	8018278 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 801826c:	693b      	ldr	r3, [r7, #16]
 801826e:	2208      	movs	r2, #8
 8018270:	71da      	strb	r2, [r3, #7]
 8018272:	e001      	b.n	8018278 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8018274:	2303      	movs	r3, #3
 8018276:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8018278:	88fb      	ldrh	r3, [r7, #6]
 801827a:	2b08      	cmp	r3, #8
 801827c:	d936      	bls.n	80182ec <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	3308      	adds	r3, #8
 8018282:	781b      	ldrb	r3, [r3, #0]
 8018284:	461a      	mov	r2, r3
 8018286:	68bb      	ldr	r3, [r7, #8]
 8018288:	3309      	adds	r3, #9
 801828a:	781b      	ldrb	r3, [r3, #0]
 801828c:	021b      	lsls	r3, r3, #8
 801828e:	b29b      	uxth	r3, r3
 8018290:	4313      	orrs	r3, r2
 8018292:	b29a      	uxth	r2, r3
 8018294:	693b      	ldr	r3, [r7, #16]
 8018296:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	330a      	adds	r3, #10
 801829c:	781b      	ldrb	r3, [r3, #0]
 801829e:	461a      	mov	r2, r3
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	330b      	adds	r3, #11
 80182a4:	781b      	ldrb	r3, [r3, #0]
 80182a6:	021b      	lsls	r3, r3, #8
 80182a8:	b29b      	uxth	r3, r3
 80182aa:	4313      	orrs	r3, r2
 80182ac:	b29a      	uxth	r2, r3
 80182ae:	693b      	ldr	r3, [r7, #16]
 80182b0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80182b2:	68bb      	ldr	r3, [r7, #8]
 80182b4:	330c      	adds	r3, #12
 80182b6:	781b      	ldrb	r3, [r3, #0]
 80182b8:	461a      	mov	r2, r3
 80182ba:	68bb      	ldr	r3, [r7, #8]
 80182bc:	330d      	adds	r3, #13
 80182be:	781b      	ldrb	r3, [r3, #0]
 80182c0:	021b      	lsls	r3, r3, #8
 80182c2:	b29b      	uxth	r3, r3
 80182c4:	4313      	orrs	r3, r2
 80182c6:	b29a      	uxth	r2, r3
 80182c8:	693b      	ldr	r3, [r7, #16]
 80182ca:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	7b9a      	ldrb	r2, [r3, #14]
 80182d0:	693b      	ldr	r3, [r7, #16]
 80182d2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80182d4:	68bb      	ldr	r3, [r7, #8]
 80182d6:	7bda      	ldrb	r2, [r3, #15]
 80182d8:	693b      	ldr	r3, [r7, #16]
 80182da:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80182dc:	68bb      	ldr	r3, [r7, #8]
 80182de:	7c1a      	ldrb	r2, [r3, #16]
 80182e0:	693b      	ldr	r3, [r7, #16]
 80182e2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80182e4:	68bb      	ldr	r3, [r7, #8]
 80182e6:	7c5a      	ldrb	r2, [r3, #17]
 80182e8:	693b      	ldr	r3, [r7, #16]
 80182ea:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80182ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80182ee:	4618      	mov	r0, r3
 80182f0:	371c      	adds	r7, #28
 80182f2:	46bd      	mov	sp, r7
 80182f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f8:	4770      	bx	lr
 80182fa:	bf00      	nop
 80182fc:	01000101 	.word	0x01000101

08018300 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b08c      	sub	sp, #48	@ 0x30
 8018304:	af00      	add	r7, sp, #0
 8018306:	60f8      	str	r0, [r7, #12]
 8018308:	60b9      	str	r1, [r7, #8]
 801830a:	4613      	mov	r3, r2
 801830c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	f503 6387 	add.w	r3, r3, #1080	@ 0x438
 8018314:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8018316:	2300      	movs	r3, #0
 8018318:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801831c:	2300      	movs	r3, #0
 801831e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8018322:	2300      	movs	r3, #0
 8018324:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d101      	bne.n	8018332 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 801832e:	2302      	movs	r3, #2
 8018330:	e0da      	b.n	80184e8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8018332:	68bb      	ldr	r3, [r7, #8]
 8018334:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8018336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018338:	781b      	ldrb	r3, [r3, #0]
 801833a:	2b09      	cmp	r3, #9
 801833c:	d002      	beq.n	8018344 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 801833e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018340:	2209      	movs	r2, #9
 8018342:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8018344:	68bb      	ldr	r3, [r7, #8]
 8018346:	781a      	ldrb	r2, [r3, #0]
 8018348:	6a3b      	ldr	r3, [r7, #32]
 801834a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 801834c:	68bb      	ldr	r3, [r7, #8]
 801834e:	785a      	ldrb	r2, [r3, #1]
 8018350:	6a3b      	ldr	r3, [r7, #32]
 8018352:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8018354:	68bb      	ldr	r3, [r7, #8]
 8018356:	3302      	adds	r3, #2
 8018358:	781b      	ldrb	r3, [r3, #0]
 801835a:	461a      	mov	r2, r3
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	3303      	adds	r3, #3
 8018360:	781b      	ldrb	r3, [r3, #0]
 8018362:	021b      	lsls	r3, r3, #8
 8018364:	b29b      	uxth	r3, r3
 8018366:	4313      	orrs	r3, r2
 8018368:	b29b      	uxth	r3, r3
 801836a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801836e:	bf28      	it	cs
 8018370:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8018374:	b29a      	uxth	r2, r3
 8018376:	6a3b      	ldr	r3, [r7, #32]
 8018378:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 801837a:	68bb      	ldr	r3, [r7, #8]
 801837c:	791a      	ldrb	r2, [r3, #4]
 801837e:	6a3b      	ldr	r3, [r7, #32]
 8018380:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	795a      	ldrb	r2, [r3, #5]
 8018386:	6a3b      	ldr	r3, [r7, #32]
 8018388:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 801838a:	68bb      	ldr	r3, [r7, #8]
 801838c:	799a      	ldrb	r2, [r3, #6]
 801838e:	6a3b      	ldr	r3, [r7, #32]
 8018390:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	79da      	ldrb	r2, [r3, #7]
 8018396:	6a3b      	ldr	r3, [r7, #32]
 8018398:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 801839a:	68bb      	ldr	r3, [r7, #8]
 801839c:	7a1a      	ldrb	r2, [r3, #8]
 801839e:	6a3b      	ldr	r3, [r7, #32]
 80183a0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80183a2:	88fb      	ldrh	r3, [r7, #6]
 80183a4:	2b09      	cmp	r3, #9
 80183a6:	f240 809d 	bls.w	80184e4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80183aa:	2309      	movs	r3, #9
 80183ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80183ae:	2300      	movs	r3, #0
 80183b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80183b2:	e081      	b.n	80184b8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80183b4:	f107 0316 	add.w	r3, r7, #22
 80183b8:	4619      	mov	r1, r3
 80183ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80183bc:	f000 f9e7 	bl	801878e <USBH_GetNextDesc>
 80183c0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80183c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183c4:	785b      	ldrb	r3, [r3, #1]
 80183c6:	2b04      	cmp	r3, #4
 80183c8:	d176      	bne.n	80184b8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80183ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183cc:	781b      	ldrb	r3, [r3, #0]
 80183ce:	2b09      	cmp	r3, #9
 80183d0:	d002      	beq.n	80183d8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80183d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183d4:	2209      	movs	r2, #9
 80183d6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80183d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80183dc:	221a      	movs	r2, #26
 80183de:	fb02 f303 	mul.w	r3, r2, r3
 80183e2:	3308      	adds	r3, #8
 80183e4:	6a3a      	ldr	r2, [r7, #32]
 80183e6:	4413      	add	r3, r2
 80183e8:	3302      	adds	r3, #2
 80183ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80183ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80183ee:	69f8      	ldr	r0, [r7, #28]
 80183f0:	f000 f87e 	bl	80184f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80183f4:	2300      	movs	r3, #0
 80183f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80183fa:	2300      	movs	r3, #0
 80183fc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80183fe:	e043      	b.n	8018488 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8018400:	f107 0316 	add.w	r3, r7, #22
 8018404:	4619      	mov	r1, r3
 8018406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018408:	f000 f9c1 	bl	801878e <USBH_GetNextDesc>
 801840c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801840e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018410:	785b      	ldrb	r3, [r3, #1]
 8018412:	2b05      	cmp	r3, #5
 8018414:	d138      	bne.n	8018488 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8018416:	69fb      	ldr	r3, [r7, #28]
 8018418:	795b      	ldrb	r3, [r3, #5]
 801841a:	2b01      	cmp	r3, #1
 801841c:	d113      	bne.n	8018446 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 801841e:	69fb      	ldr	r3, [r7, #28]
 8018420:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8018422:	2b02      	cmp	r3, #2
 8018424:	d003      	beq.n	801842e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8018426:	69fb      	ldr	r3, [r7, #28]
 8018428:	799b      	ldrb	r3, [r3, #6]
 801842a:	2b03      	cmp	r3, #3
 801842c:	d10b      	bne.n	8018446 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801842e:	69fb      	ldr	r3, [r7, #28]
 8018430:	79db      	ldrb	r3, [r3, #7]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d10b      	bne.n	801844e <USBH_ParseCfgDesc+0x14e>
 8018436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018438:	781b      	ldrb	r3, [r3, #0]
 801843a:	2b09      	cmp	r3, #9
 801843c:	d007      	beq.n	801844e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 801843e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018440:	2209      	movs	r2, #9
 8018442:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8018444:	e003      	b.n	801844e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8018446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018448:	2207      	movs	r2, #7
 801844a:	701a      	strb	r2, [r3, #0]
 801844c:	e000      	b.n	8018450 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801844e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8018450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018454:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8018458:	3201      	adds	r2, #1
 801845a:	00d2      	lsls	r2, r2, #3
 801845c:	211a      	movs	r1, #26
 801845e:	fb01 f303 	mul.w	r3, r1, r3
 8018462:	4413      	add	r3, r2
 8018464:	3308      	adds	r3, #8
 8018466:	6a3a      	ldr	r2, [r7, #32]
 8018468:	4413      	add	r3, r2
 801846a:	3304      	adds	r3, #4
 801846c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801846e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018470:	69b9      	ldr	r1, [r7, #24]
 8018472:	68f8      	ldr	r0, [r7, #12]
 8018474:	f000 f870 	bl	8018558 <USBH_ParseEPDesc>
 8018478:	4603      	mov	r3, r0
 801847a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 801847e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018482:	3301      	adds	r3, #1
 8018484:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8018488:	69fb      	ldr	r3, [r7, #28]
 801848a:	791b      	ldrb	r3, [r3, #4]
 801848c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8018490:	429a      	cmp	r2, r3
 8018492:	d204      	bcs.n	801849e <USBH_ParseCfgDesc+0x19e>
 8018494:	6a3b      	ldr	r3, [r7, #32]
 8018496:	885a      	ldrh	r2, [r3, #2]
 8018498:	8afb      	ldrh	r3, [r7, #22]
 801849a:	429a      	cmp	r2, r3
 801849c:	d8b0      	bhi.n	8018400 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801849e:	69fb      	ldr	r3, [r7, #28]
 80184a0:	791b      	ldrb	r3, [r3, #4]
 80184a2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80184a6:	429a      	cmp	r2, r3
 80184a8:	d201      	bcs.n	80184ae <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80184aa:	2303      	movs	r3, #3
 80184ac:	e01c      	b.n	80184e8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80184ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80184b2:	3301      	adds	r3, #1
 80184b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80184b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80184bc:	2b01      	cmp	r3, #1
 80184be:	d805      	bhi.n	80184cc <USBH_ParseCfgDesc+0x1cc>
 80184c0:	6a3b      	ldr	r3, [r7, #32]
 80184c2:	885a      	ldrh	r2, [r3, #2]
 80184c4:	8afb      	ldrh	r3, [r7, #22]
 80184c6:	429a      	cmp	r2, r3
 80184c8:	f63f af74 	bhi.w	80183b4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80184cc:	6a3b      	ldr	r3, [r7, #32]
 80184ce:	791b      	ldrb	r3, [r3, #4]
 80184d0:	2b02      	cmp	r3, #2
 80184d2:	bf28      	it	cs
 80184d4:	2302      	movcs	r3, #2
 80184d6:	b2db      	uxtb	r3, r3
 80184d8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80184dc:	429a      	cmp	r2, r3
 80184de:	d201      	bcs.n	80184e4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80184e0:	2303      	movs	r3, #3
 80184e2:	e001      	b.n	80184e8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80184e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	3730      	adds	r7, #48	@ 0x30
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}

080184f0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80184f0:	b480      	push	{r7}
 80184f2:	b083      	sub	sp, #12
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
 80184f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80184fa:	683b      	ldr	r3, [r7, #0]
 80184fc:	781a      	ldrb	r2, [r3, #0]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	785a      	ldrb	r2, [r3, #1]
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 801850a:	683b      	ldr	r3, [r7, #0]
 801850c:	789a      	ldrb	r2, [r3, #2]
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	78da      	ldrb	r2, [r3, #3]
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	3304      	adds	r3, #4
 801851e:	781b      	ldrb	r3, [r3, #0]
 8018520:	2b02      	cmp	r3, #2
 8018522:	bf28      	it	cs
 8018524:	2302      	movcs	r3, #2
 8018526:	b2da      	uxtb	r2, r3
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	795a      	ldrb	r2, [r3, #5]
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	799a      	ldrb	r2, [r3, #6]
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 801853c:	683b      	ldr	r3, [r7, #0]
 801853e:	79da      	ldrb	r2, [r3, #7]
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8018544:	683b      	ldr	r3, [r7, #0]
 8018546:	7a1a      	ldrb	r2, [r3, #8]
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	721a      	strb	r2, [r3, #8]
}
 801854c:	bf00      	nop
 801854e:	370c      	adds	r7, #12
 8018550:	46bd      	mov	sp, r7
 8018552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018556:	4770      	bx	lr

08018558 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8018558:	b480      	push	{r7}
 801855a:	b087      	sub	sp, #28
 801855c:	af00      	add	r7, sp, #0
 801855e:	60f8      	str	r0, [r7, #12]
 8018560:	60b9      	str	r1, [r7, #8]
 8018562:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8018564:	2300      	movs	r3, #0
 8018566:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	781a      	ldrb	r2, [r3, #0]
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	785a      	ldrb	r2, [r3, #1]
 8018574:	68bb      	ldr	r3, [r7, #8]
 8018576:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	789a      	ldrb	r2, [r3, #2]
 801857c:	68bb      	ldr	r3, [r7, #8]
 801857e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	78da      	ldrb	r2, [r3, #3]
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	3304      	adds	r3, #4
 801858c:	781b      	ldrb	r3, [r3, #0]
 801858e:	461a      	mov	r2, r3
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	3305      	adds	r3, #5
 8018594:	781b      	ldrb	r3, [r3, #0]
 8018596:	021b      	lsls	r3, r3, #8
 8018598:	b29b      	uxth	r3, r3
 801859a:	4313      	orrs	r3, r2
 801859c:	b29a      	uxth	r2, r3
 801859e:	68bb      	ldr	r3, [r7, #8]
 80185a0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	799a      	ldrb	r2, [r3, #6]
 80185a6:	68bb      	ldr	r3, [r7, #8]
 80185a8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	889b      	ldrh	r3, [r3, #4]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d009      	beq.n	80185c6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80185b2:	68bb      	ldr	r3, [r7, #8]
 80185b4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80185b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80185ba:	d804      	bhi.n	80185c6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80185c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80185c4:	d901      	bls.n	80185ca <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80185c6:	2303      	movs	r3, #3
 80185c8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d136      	bne.n	8018642 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80185d4:	68bb      	ldr	r3, [r7, #8]
 80185d6:	78db      	ldrb	r3, [r3, #3]
 80185d8:	f003 0303 	and.w	r3, r3, #3
 80185dc:	2b02      	cmp	r3, #2
 80185de:	d108      	bne.n	80185f2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80185e0:	68bb      	ldr	r3, [r7, #8]
 80185e2:	889b      	ldrh	r3, [r3, #4]
 80185e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80185e8:	f240 8097 	bls.w	801871a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80185ec:	2303      	movs	r3, #3
 80185ee:	75fb      	strb	r3, [r7, #23]
 80185f0:	e093      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80185f2:	68bb      	ldr	r3, [r7, #8]
 80185f4:	78db      	ldrb	r3, [r3, #3]
 80185f6:	f003 0303 	and.w	r3, r3, #3
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d107      	bne.n	801860e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	889b      	ldrh	r3, [r3, #4]
 8018602:	2b40      	cmp	r3, #64	@ 0x40
 8018604:	f240 8089 	bls.w	801871a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8018608:	2303      	movs	r3, #3
 801860a:	75fb      	strb	r3, [r7, #23]
 801860c:	e085      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801860e:	68bb      	ldr	r3, [r7, #8]
 8018610:	78db      	ldrb	r3, [r3, #3]
 8018612:	f003 0303 	and.w	r3, r3, #3
 8018616:	2b01      	cmp	r3, #1
 8018618:	d005      	beq.n	8018626 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801861a:	68bb      	ldr	r3, [r7, #8]
 801861c:	78db      	ldrb	r3, [r3, #3]
 801861e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8018622:	2b03      	cmp	r3, #3
 8018624:	d10a      	bne.n	801863c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8018626:	68bb      	ldr	r3, [r7, #8]
 8018628:	799b      	ldrb	r3, [r3, #6]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d003      	beq.n	8018636 <USBH_ParseEPDesc+0xde>
 801862e:	68bb      	ldr	r3, [r7, #8]
 8018630:	799b      	ldrb	r3, [r3, #6]
 8018632:	2b10      	cmp	r3, #16
 8018634:	d970      	bls.n	8018718 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8018636:	2303      	movs	r3, #3
 8018638:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801863a:	e06d      	b.n	8018718 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801863c:	2303      	movs	r3, #3
 801863e:	75fb      	strb	r3, [r7, #23]
 8018640:	e06b      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8018648:	2b01      	cmp	r3, #1
 801864a:	d13c      	bne.n	80186c6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	78db      	ldrb	r3, [r3, #3]
 8018650:	f003 0303 	and.w	r3, r3, #3
 8018654:	2b02      	cmp	r3, #2
 8018656:	d005      	beq.n	8018664 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	78db      	ldrb	r3, [r3, #3]
 801865c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8018660:	2b00      	cmp	r3, #0
 8018662:	d106      	bne.n	8018672 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	889b      	ldrh	r3, [r3, #4]
 8018668:	2b40      	cmp	r3, #64	@ 0x40
 801866a:	d956      	bls.n	801871a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801866c:	2303      	movs	r3, #3
 801866e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8018670:	e053      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8018672:	68bb      	ldr	r3, [r7, #8]
 8018674:	78db      	ldrb	r3, [r3, #3]
 8018676:	f003 0303 	and.w	r3, r3, #3
 801867a:	2b01      	cmp	r3, #1
 801867c:	d10e      	bne.n	801869c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 801867e:	68bb      	ldr	r3, [r7, #8]
 8018680:	799b      	ldrb	r3, [r3, #6]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d007      	beq.n	8018696 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801868a:	2b10      	cmp	r3, #16
 801868c:	d803      	bhi.n	8018696 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8018692:	2b40      	cmp	r3, #64	@ 0x40
 8018694:	d941      	bls.n	801871a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8018696:	2303      	movs	r3, #3
 8018698:	75fb      	strb	r3, [r7, #23]
 801869a:	e03e      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801869c:	68bb      	ldr	r3, [r7, #8]
 801869e:	78db      	ldrb	r3, [r3, #3]
 80186a0:	f003 0303 	and.w	r3, r3, #3
 80186a4:	2b03      	cmp	r3, #3
 80186a6:	d10b      	bne.n	80186c0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80186a8:	68bb      	ldr	r3, [r7, #8]
 80186aa:	799b      	ldrb	r3, [r3, #6]
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d004      	beq.n	80186ba <USBH_ParseEPDesc+0x162>
 80186b0:	68bb      	ldr	r3, [r7, #8]
 80186b2:	889b      	ldrh	r3, [r3, #4]
 80186b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80186b8:	d32f      	bcc.n	801871a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80186ba:	2303      	movs	r3, #3
 80186bc:	75fb      	strb	r3, [r7, #23]
 80186be:	e02c      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80186c0:	2303      	movs	r3, #3
 80186c2:	75fb      	strb	r3, [r7, #23]
 80186c4:	e029      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 80186cc:	2b02      	cmp	r3, #2
 80186ce:	d120      	bne.n	8018712 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	78db      	ldrb	r3, [r3, #3]
 80186d4:	f003 0303 	and.w	r3, r3, #3
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d106      	bne.n	80186ea <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	889b      	ldrh	r3, [r3, #4]
 80186e0:	2b08      	cmp	r3, #8
 80186e2:	d01a      	beq.n	801871a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80186e4:	2303      	movs	r3, #3
 80186e6:	75fb      	strb	r3, [r7, #23]
 80186e8:	e017      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80186ea:	68bb      	ldr	r3, [r7, #8]
 80186ec:	78db      	ldrb	r3, [r3, #3]
 80186ee:	f003 0303 	and.w	r3, r3, #3
 80186f2:	2b03      	cmp	r3, #3
 80186f4:	d10a      	bne.n	801870c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80186f6:	68bb      	ldr	r3, [r7, #8]
 80186f8:	799b      	ldrb	r3, [r3, #6]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d003      	beq.n	8018706 <USBH_ParseEPDesc+0x1ae>
 80186fe:	68bb      	ldr	r3, [r7, #8]
 8018700:	889b      	ldrh	r3, [r3, #4]
 8018702:	2b08      	cmp	r3, #8
 8018704:	d909      	bls.n	801871a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8018706:	2303      	movs	r3, #3
 8018708:	75fb      	strb	r3, [r7, #23]
 801870a:	e006      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 801870c:	2303      	movs	r3, #3
 801870e:	75fb      	strb	r3, [r7, #23]
 8018710:	e003      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8018712:	2303      	movs	r3, #3
 8018714:	75fb      	strb	r3, [r7, #23]
 8018716:	e000      	b.n	801871a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8018718:	bf00      	nop
  }

  return status;
 801871a:	7dfb      	ldrb	r3, [r7, #23]
}
 801871c:	4618      	mov	r0, r3
 801871e:	371c      	adds	r7, #28
 8018720:	46bd      	mov	sp, r7
 8018722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018726:	4770      	bx	lr

08018728 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8018728:	b480      	push	{r7}
 801872a:	b087      	sub	sp, #28
 801872c:	af00      	add	r7, sp, #0
 801872e:	60f8      	str	r0, [r7, #12]
 8018730:	60b9      	str	r1, [r7, #8]
 8018732:	4613      	mov	r3, r2
 8018734:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	3301      	adds	r3, #1
 801873a:	781b      	ldrb	r3, [r3, #0]
 801873c:	2b03      	cmp	r3, #3
 801873e:	d120      	bne.n	8018782 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	781b      	ldrb	r3, [r3, #0]
 8018744:	1e9a      	subs	r2, r3, #2
 8018746:	88fb      	ldrh	r3, [r7, #6]
 8018748:	4293      	cmp	r3, r2
 801874a:	bf28      	it	cs
 801874c:	4613      	movcs	r3, r2
 801874e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	3302      	adds	r3, #2
 8018754:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8018756:	2300      	movs	r3, #0
 8018758:	82fb      	strh	r3, [r7, #22]
 801875a:	e00b      	b.n	8018774 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 801875c:	8afb      	ldrh	r3, [r7, #22]
 801875e:	68fa      	ldr	r2, [r7, #12]
 8018760:	4413      	add	r3, r2
 8018762:	781a      	ldrb	r2, [r3, #0]
 8018764:	68bb      	ldr	r3, [r7, #8]
 8018766:	701a      	strb	r2, [r3, #0]
      pdest++;
 8018768:	68bb      	ldr	r3, [r7, #8]
 801876a:	3301      	adds	r3, #1
 801876c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801876e:	8afb      	ldrh	r3, [r7, #22]
 8018770:	3302      	adds	r3, #2
 8018772:	82fb      	strh	r3, [r7, #22]
 8018774:	8afa      	ldrh	r2, [r7, #22]
 8018776:	8abb      	ldrh	r3, [r7, #20]
 8018778:	429a      	cmp	r2, r3
 801877a:	d3ef      	bcc.n	801875c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 801877c:	68bb      	ldr	r3, [r7, #8]
 801877e:	2200      	movs	r2, #0
 8018780:	701a      	strb	r2, [r3, #0]
  }
}
 8018782:	bf00      	nop
 8018784:	371c      	adds	r7, #28
 8018786:	46bd      	mov	sp, r7
 8018788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878c:	4770      	bx	lr

0801878e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801878e:	b480      	push	{r7}
 8018790:	b085      	sub	sp, #20
 8018792:	af00      	add	r7, sp, #0
 8018794:	6078      	str	r0, [r7, #4]
 8018796:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8018798:	683b      	ldr	r3, [r7, #0]
 801879a:	881b      	ldrh	r3, [r3, #0]
 801879c:	687a      	ldr	r2, [r7, #4]
 801879e:	7812      	ldrb	r2, [r2, #0]
 80187a0:	4413      	add	r3, r2
 80187a2:	b29a      	uxth	r2, r3
 80187a4:	683b      	ldr	r3, [r7, #0]
 80187a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	781b      	ldrb	r3, [r3, #0]
 80187ac:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	4413      	add	r3, r2
 80187b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80187b4:	68fb      	ldr	r3, [r7, #12]
}
 80187b6:	4618      	mov	r0, r3
 80187b8:	3714      	adds	r7, #20
 80187ba:	46bd      	mov	sp, r7
 80187bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c0:	4770      	bx	lr

080187c2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80187c2:	b580      	push	{r7, lr}
 80187c4:	b086      	sub	sp, #24
 80187c6:	af00      	add	r7, sp, #0
 80187c8:	60f8      	str	r0, [r7, #12]
 80187ca:	60b9      	str	r1, [r7, #8]
 80187cc:	4613      	mov	r3, r2
 80187ce:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80187d0:	2301      	movs	r3, #1
 80187d2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	789b      	ldrb	r3, [r3, #2]
 80187d8:	2b01      	cmp	r3, #1
 80187da:	d002      	beq.n	80187e2 <USBH_CtlReq+0x20>
 80187dc:	2b02      	cmp	r3, #2
 80187de:	d00f      	beq.n	8018800 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80187e0:	e027      	b.n	8018832 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	68ba      	ldr	r2, [r7, #8]
 80187e6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	88fa      	ldrh	r2, [r7, #6]
 80187ec:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	2201      	movs	r2, #1
 80187f2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	2202      	movs	r2, #2
 80187f8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80187fa:	2301      	movs	r3, #1
 80187fc:	75fb      	strb	r3, [r7, #23]
      break;
 80187fe:	e018      	b.n	8018832 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8018800:	68f8      	ldr	r0, [r7, #12]
 8018802:	f000 f81b 	bl	801883c <USBH_HandleControl>
 8018806:	4603      	mov	r3, r0
 8018808:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 801880a:	7dfb      	ldrb	r3, [r7, #23]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d002      	beq.n	8018816 <USBH_CtlReq+0x54>
 8018810:	7dfb      	ldrb	r3, [r7, #23]
 8018812:	2b03      	cmp	r3, #3
 8018814:	d106      	bne.n	8018824 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	2201      	movs	r2, #1
 801881a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	2200      	movs	r2, #0
 8018820:	761a      	strb	r2, [r3, #24]
      break;
 8018822:	e005      	b.n	8018830 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8018824:	7dfb      	ldrb	r3, [r7, #23]
 8018826:	2b02      	cmp	r3, #2
 8018828:	d102      	bne.n	8018830 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	2201      	movs	r2, #1
 801882e:	709a      	strb	r2, [r3, #2]
      break;
 8018830:	bf00      	nop
  }
  return status;
 8018832:	7dfb      	ldrb	r3, [r7, #23]
}
 8018834:	4618      	mov	r0, r3
 8018836:	3718      	adds	r7, #24
 8018838:	46bd      	mov	sp, r7
 801883a:	bd80      	pop	{r7, pc}

0801883c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b086      	sub	sp, #24
 8018840:	af02      	add	r7, sp, #8
 8018842:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8018844:	2301      	movs	r3, #1
 8018846:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8018848:	2300      	movs	r3, #0
 801884a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	7e1b      	ldrb	r3, [r3, #24]
 8018850:	3b01      	subs	r3, #1
 8018852:	2b0a      	cmp	r3, #10
 8018854:	f200 815f 	bhi.w	8018b16 <USBH_HandleControl+0x2da>
 8018858:	a201      	add	r2, pc, #4	@ (adr r2, 8018860 <USBH_HandleControl+0x24>)
 801885a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801885e:	bf00      	nop
 8018860:	0801888d 	.word	0x0801888d
 8018864:	080188a7 	.word	0x080188a7
 8018868:	08018911 	.word	0x08018911
 801886c:	08018937 	.word	0x08018937
 8018870:	0801896f 	.word	0x0801896f
 8018874:	08018999 	.word	0x08018999
 8018878:	080189eb 	.word	0x080189eb
 801887c:	08018a0d 	.word	0x08018a0d
 8018880:	08018a49 	.word	0x08018a49
 8018884:	08018a6f 	.word	0x08018a6f
 8018888:	08018aad 	.word	0x08018aad
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	f103 0110 	add.w	r1, r3, #16
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	795b      	ldrb	r3, [r3, #5]
 8018896:	461a      	mov	r2, r3
 8018898:	6878      	ldr	r0, [r7, #4]
 801889a:	f000 f951 	bl	8018b40 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	2202      	movs	r2, #2
 80188a2:	761a      	strb	r2, [r3, #24]
      break;
 80188a4:	e142      	b.n	8018b2c <USBH_HandleControl+0x2f0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	795b      	ldrb	r3, [r3, #5]
 80188aa:	4619      	mov	r1, r3
 80188ac:	6878      	ldr	r0, [r7, #4]
 80188ae:	f7e8 fffc 	bl	80018aa <USBH_LL_GetURBState>
 80188b2:	4603      	mov	r3, r0
 80188b4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80188b6:	7bbb      	ldrb	r3, [r7, #14]
 80188b8:	2b01      	cmp	r3, #1
 80188ba:	d11e      	bne.n	80188fa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	7c1b      	ldrb	r3, [r3, #16]
 80188c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80188c4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	8adb      	ldrh	r3, [r3, #22]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d00a      	beq.n	80188e4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80188ce:	7b7b      	ldrb	r3, [r7, #13]
 80188d0:	2b80      	cmp	r3, #128	@ 0x80
 80188d2:	d103      	bne.n	80188dc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	2203      	movs	r2, #3
 80188d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80188da:	e11e      	b.n	8018b1a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_DATA_OUT;
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2205      	movs	r2, #5
 80188e0:	761a      	strb	r2, [r3, #24]
      break;
 80188e2:	e11a      	b.n	8018b1a <USBH_HandleControl+0x2de>
          if (direction == USB_D2H)
 80188e4:	7b7b      	ldrb	r3, [r7, #13]
 80188e6:	2b80      	cmp	r3, #128	@ 0x80
 80188e8:	d103      	bne.n	80188f2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	2209      	movs	r2, #9
 80188ee:	761a      	strb	r2, [r3, #24]
      break;
 80188f0:	e113      	b.n	8018b1a <USBH_HandleControl+0x2de>
            phost->Control.state = CTRL_STATUS_IN;
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	2207      	movs	r2, #7
 80188f6:	761a      	strb	r2, [r3, #24]
      break;
 80188f8:	e10f      	b.n	8018b1a <USBH_HandleControl+0x2de>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80188fa:	7bbb      	ldrb	r3, [r7, #14]
 80188fc:	2b04      	cmp	r3, #4
 80188fe:	d003      	beq.n	8018908 <USBH_HandleControl+0xcc>
 8018900:	7bbb      	ldrb	r3, [r7, #14]
 8018902:	2b02      	cmp	r3, #2
 8018904:	f040 8109 	bne.w	8018b1a <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	220b      	movs	r2, #11
 801890c:	761a      	strb	r2, [r3, #24]
      break;
 801890e:	e104      	b.n	8018b1a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 8018916:	b29a      	uxth	r2, r3
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	6899      	ldr	r1, [r3, #8]
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	899a      	ldrh	r2, [r3, #12]
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	791b      	ldrb	r3, [r3, #4]
 8018928:	6878      	ldr	r0, [r7, #4]
 801892a:	f000 f948 	bl	8018bbe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	2204      	movs	r2, #4
 8018932:	761a      	strb	r2, [r3, #24]
      break;
 8018934:	e0fa      	b.n	8018b2c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	791b      	ldrb	r3, [r3, #4]
 801893a:	4619      	mov	r1, r3
 801893c:	6878      	ldr	r0, [r7, #4]
 801893e:	f7e8 ffb4 	bl	80018aa <USBH_LL_GetURBState>
 8018942:	4603      	mov	r3, r0
 8018944:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8018946:	7bbb      	ldrb	r3, [r7, #14]
 8018948:	2b01      	cmp	r3, #1
 801894a:	d102      	bne.n	8018952 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	2209      	movs	r2, #9
 8018950:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8018952:	7bbb      	ldrb	r3, [r7, #14]
 8018954:	2b05      	cmp	r3, #5
 8018956:	d102      	bne.n	801895e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8018958:	2303      	movs	r3, #3
 801895a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801895c:	e0df      	b.n	8018b1e <USBH_HandleControl+0x2e2>
        if (URB_Status == USBH_URB_ERROR)
 801895e:	7bbb      	ldrb	r3, [r7, #14]
 8018960:	2b04      	cmp	r3, #4
 8018962:	f040 80dc 	bne.w	8018b1e <USBH_HandleControl+0x2e2>
          phost->Control.state = CTRL_ERROR;
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	220b      	movs	r2, #11
 801896a:	761a      	strb	r2, [r3, #24]
      break;
 801896c:	e0d7      	b.n	8018b1e <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	6899      	ldr	r1, [r3, #8]
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	899a      	ldrh	r2, [r3, #12]
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	795b      	ldrb	r3, [r3, #5]
 801897a:	2001      	movs	r0, #1
 801897c:	9000      	str	r0, [sp, #0]
 801897e:	6878      	ldr	r0, [r7, #4]
 8018980:	f000 f8f8 	bl	8018b74 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 801898a:	b29a      	uxth	r2, r3
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	2206      	movs	r2, #6
 8018994:	761a      	strb	r2, [r3, #24]
      break;
 8018996:	e0c9      	b.n	8018b2c <USBH_HandleControl+0x2f0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	795b      	ldrb	r3, [r3, #5]
 801899c:	4619      	mov	r1, r3
 801899e:	6878      	ldr	r0, [r7, #4]
 80189a0:	f7e8 ff83 	bl	80018aa <USBH_LL_GetURBState>
 80189a4:	4603      	mov	r3, r0
 80189a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80189a8:	7bbb      	ldrb	r3, [r7, #14]
 80189aa:	2b01      	cmp	r3, #1
 80189ac:	d103      	bne.n	80189b6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	2207      	movs	r2, #7
 80189b2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80189b4:	e0b5      	b.n	8018b22 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_STALL)
 80189b6:	7bbb      	ldrb	r3, [r7, #14]
 80189b8:	2b05      	cmp	r3, #5
 80189ba:	d105      	bne.n	80189c8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	220c      	movs	r2, #12
 80189c0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80189c2:	2303      	movs	r3, #3
 80189c4:	73fb      	strb	r3, [r7, #15]
      break;
 80189c6:	e0ac      	b.n	8018b22 <USBH_HandleControl+0x2e6>
      else if (URB_Status == USBH_URB_NOTREADY)
 80189c8:	7bbb      	ldrb	r3, [r7, #14]
 80189ca:	2b02      	cmp	r3, #2
 80189cc:	d103      	bne.n	80189d6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80189ce:	687b      	ldr	r3, [r7, #4]
 80189d0:	2205      	movs	r2, #5
 80189d2:	761a      	strb	r2, [r3, #24]
      break;
 80189d4:	e0a5      	b.n	8018b22 <USBH_HandleControl+0x2e6>
        if (URB_Status == USBH_URB_ERROR)
 80189d6:	7bbb      	ldrb	r3, [r7, #14]
 80189d8:	2b04      	cmp	r3, #4
 80189da:	f040 80a2 	bne.w	8018b22 <USBH_HandleControl+0x2e6>
          phost->Control.state = CTRL_ERROR;
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	220b      	movs	r2, #11
 80189e2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80189e4:	2302      	movs	r3, #2
 80189e6:	73fb      	strb	r3, [r7, #15]
      break;
 80189e8:	e09b      	b.n	8018b22 <USBH_HandleControl+0x2e6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	791b      	ldrb	r3, [r3, #4]
 80189ee:	2200      	movs	r2, #0
 80189f0:	2100      	movs	r1, #0
 80189f2:	6878      	ldr	r0, [r7, #4]
 80189f4:	f000 f8e3 	bl	8018bbe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 80189fe:	b29a      	uxth	r2, r3
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	2208      	movs	r2, #8
 8018a08:	761a      	strb	r2, [r3, #24]

      break;
 8018a0a:	e08f      	b.n	8018b2c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	791b      	ldrb	r3, [r3, #4]
 8018a10:	4619      	mov	r1, r3
 8018a12:	6878      	ldr	r0, [r7, #4]
 8018a14:	f7e8 ff49 	bl	80018aa <USBH_LL_GetURBState>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8018a1c:	7bbb      	ldrb	r3, [r7, #14]
 8018a1e:	2b01      	cmp	r3, #1
 8018a20:	d105      	bne.n	8018a2e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	220d      	movs	r2, #13
 8018a26:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8018a2c:	e07b      	b.n	8018b26 <USBH_HandleControl+0x2ea>
      else if (URB_Status == USBH_URB_ERROR)
 8018a2e:	7bbb      	ldrb	r3, [r7, #14]
 8018a30:	2b04      	cmp	r3, #4
 8018a32:	d103      	bne.n	8018a3c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	220b      	movs	r2, #11
 8018a38:	761a      	strb	r2, [r3, #24]
      break;
 8018a3a:	e074      	b.n	8018b26 <USBH_HandleControl+0x2ea>
        if (URB_Status == USBH_URB_STALL)
 8018a3c:	7bbb      	ldrb	r3, [r7, #14]
 8018a3e:	2b05      	cmp	r3, #5
 8018a40:	d171      	bne.n	8018b26 <USBH_HandleControl+0x2ea>
          status = USBH_NOT_SUPPORTED;
 8018a42:	2303      	movs	r3, #3
 8018a44:	73fb      	strb	r3, [r7, #15]
      break;
 8018a46:	e06e      	b.n	8018b26 <USBH_HandleControl+0x2ea>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	795b      	ldrb	r3, [r3, #5]
 8018a4c:	2201      	movs	r2, #1
 8018a4e:	9200      	str	r2, [sp, #0]
 8018a50:	2200      	movs	r2, #0
 8018a52:	2100      	movs	r1, #0
 8018a54:	6878      	ldr	r0, [r7, #4]
 8018a56:	f000 f88d 	bl	8018b74 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	f8d3 34c4 	ldr.w	r3, [r3, #1220]	@ 0x4c4
 8018a60:	b29a      	uxth	r2, r3
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	220a      	movs	r2, #10
 8018a6a:	761a      	strb	r2, [r3, #24]
      break;
 8018a6c:	e05e      	b.n	8018b2c <USBH_HandleControl+0x2f0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	795b      	ldrb	r3, [r3, #5]
 8018a72:	4619      	mov	r1, r3
 8018a74:	6878      	ldr	r0, [r7, #4]
 8018a76:	f7e8 ff18 	bl	80018aa <USBH_LL_GetURBState>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8018a7e:	7bbb      	ldrb	r3, [r7, #14]
 8018a80:	2b01      	cmp	r3, #1
 8018a82:	d105      	bne.n	8018a90 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8018a84:	2300      	movs	r3, #0
 8018a86:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	220d      	movs	r2, #13
 8018a8c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8018a8e:	e04c      	b.n	8018b2a <USBH_HandleControl+0x2ee>
      else if (URB_Status == USBH_URB_NOTREADY)
 8018a90:	7bbb      	ldrb	r3, [r7, #14]
 8018a92:	2b02      	cmp	r3, #2
 8018a94:	d103      	bne.n	8018a9e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	2209      	movs	r2, #9
 8018a9a:	761a      	strb	r2, [r3, #24]
      break;
 8018a9c:	e045      	b.n	8018b2a <USBH_HandleControl+0x2ee>
        if (URB_Status == USBH_URB_ERROR)
 8018a9e:	7bbb      	ldrb	r3, [r7, #14]
 8018aa0:	2b04      	cmp	r3, #4
 8018aa2:	d142      	bne.n	8018b2a <USBH_HandleControl+0x2ee>
          phost->Control.state = CTRL_ERROR;
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	220b      	movs	r2, #11
 8018aa8:	761a      	strb	r2, [r3, #24]
      break;
 8018aaa:	e03e      	b.n	8018b2a <USBH_HandleControl+0x2ee>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	7e5b      	ldrb	r3, [r3, #25]
 8018ab0:	3301      	adds	r3, #1
 8018ab2:	b2da      	uxtb	r2, r3
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	765a      	strb	r2, [r3, #25]
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	7e5b      	ldrb	r3, [r3, #25]
 8018abc:	2b02      	cmp	r3, #2
 8018abe:	d806      	bhi.n	8018ace <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	2201      	movs	r2, #1
 8018ac4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	2201      	movs	r2, #1
 8018aca:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8018acc:	e02e      	b.n	8018b2c <USBH_HandleControl+0x2f0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8018ad4:	2106      	movs	r1, #6
 8018ad6:	6878      	ldr	r0, [r7, #4]
 8018ad8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	2200      	movs	r2, #0
 8018ade:	765a      	strb	r2, [r3, #25]
        USBH_ErrLog("Control error: Device not responding");
 8018ae0:	4815      	ldr	r0, [pc, #84]	@ (8018b38 <USBH_HandleControl+0x2fc>)
 8018ae2:	f002 fbd1 	bl	801b288 <iprintf>
 8018ae6:	4815      	ldr	r0, [pc, #84]	@ (8018b3c <USBH_HandleControl+0x300>)
 8018ae8:	f002 fbce 	bl	801b288 <iprintf>
 8018aec:	200a      	movs	r0, #10
 8018aee:	f002 fbdd 	bl	801b2ac <putchar>
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	795b      	ldrb	r3, [r3, #5]
 8018af6:	4619      	mov	r1, r3
 8018af8:	6878      	ldr	r0, [r7, #4]
 8018afa:	f000 f912 	bl	8018d22 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	791b      	ldrb	r3, [r3, #4]
 8018b02:	4619      	mov	r1, r3
 8018b04:	6878      	ldr	r0, [r7, #4]
 8018b06:	f000 f90c 	bl	8018d22 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8018b10:	2302      	movs	r3, #2
 8018b12:	73fb      	strb	r3, [r7, #15]
      break;
 8018b14:	e00a      	b.n	8018b2c <USBH_HandleControl+0x2f0>

    default:
      break;
 8018b16:	bf00      	nop
 8018b18:	e008      	b.n	8018b2c <USBH_HandleControl+0x2f0>
      break;
 8018b1a:	bf00      	nop
 8018b1c:	e006      	b.n	8018b2c <USBH_HandleControl+0x2f0>
      break;
 8018b1e:	bf00      	nop
 8018b20:	e004      	b.n	8018b2c <USBH_HandleControl+0x2f0>
      break;
 8018b22:	bf00      	nop
 8018b24:	e002      	b.n	8018b2c <USBH_HandleControl+0x2f0>
      break;
 8018b26:	bf00      	nop
 8018b28:	e000      	b.n	8018b2c <USBH_HandleControl+0x2f0>
      break;
 8018b2a:	bf00      	nop
  }

  return status;
 8018b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	3710      	adds	r7, #16
 8018b32:	46bd      	mov	sp, r7
 8018b34:	bd80      	pop	{r7, pc}
 8018b36:	bf00      	nop
 8018b38:	0801d674 	.word	0x0801d674
 8018b3c:	0801d750 	.word	0x0801d750

08018b40 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8018b40:	b580      	push	{r7, lr}
 8018b42:	b088      	sub	sp, #32
 8018b44:	af04      	add	r7, sp, #16
 8018b46:	60f8      	str	r0, [r7, #12]
 8018b48:	60b9      	str	r1, [r7, #8]
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8018b4e:	79f9      	ldrb	r1, [r7, #7]
 8018b50:	2300      	movs	r3, #0
 8018b52:	9303      	str	r3, [sp, #12]
 8018b54:	2308      	movs	r3, #8
 8018b56:	9302      	str	r3, [sp, #8]
 8018b58:	68bb      	ldr	r3, [r7, #8]
 8018b5a:	9301      	str	r3, [sp, #4]
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	9300      	str	r3, [sp, #0]
 8018b60:	2300      	movs	r3, #0
 8018b62:	2200      	movs	r2, #0
 8018b64:	68f8      	ldr	r0, [r7, #12]
 8018b66:	f7e8 fe7c 	bl	8001862 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8018b6a:	2300      	movs	r3, #0
}
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	3710      	adds	r7, #16
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}

08018b74 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b088      	sub	sp, #32
 8018b78:	af04      	add	r7, sp, #16
 8018b7a:	60f8      	str	r0, [r7, #12]
 8018b7c:	60b9      	str	r1, [r7, #8]
 8018b7e:	4611      	mov	r1, r2
 8018b80:	461a      	mov	r2, r3
 8018b82:	460b      	mov	r3, r1
 8018b84:	80fb      	strh	r3, [r7, #6]
 8018b86:	4613      	mov	r3, r2
 8018b88:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d001      	beq.n	8018b98 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8018b94:	2300      	movs	r3, #0
 8018b96:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8018b98:	7979      	ldrb	r1, [r7, #5]
 8018b9a:	7e3b      	ldrb	r3, [r7, #24]
 8018b9c:	9303      	str	r3, [sp, #12]
 8018b9e:	88fb      	ldrh	r3, [r7, #6]
 8018ba0:	9302      	str	r3, [sp, #8]
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	9301      	str	r3, [sp, #4]
 8018ba6:	2301      	movs	r3, #1
 8018ba8:	9300      	str	r3, [sp, #0]
 8018baa:	2300      	movs	r3, #0
 8018bac:	2200      	movs	r2, #0
 8018bae:	68f8      	ldr	r0, [r7, #12]
 8018bb0:	f7e8 fe57 	bl	8001862 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8018bb4:	2300      	movs	r3, #0
}
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	3710      	adds	r7, #16
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}

08018bbe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8018bbe:	b580      	push	{r7, lr}
 8018bc0:	b088      	sub	sp, #32
 8018bc2:	af04      	add	r7, sp, #16
 8018bc4:	60f8      	str	r0, [r7, #12]
 8018bc6:	60b9      	str	r1, [r7, #8]
 8018bc8:	4611      	mov	r1, r2
 8018bca:	461a      	mov	r2, r3
 8018bcc:	460b      	mov	r3, r1
 8018bce:	80fb      	strh	r3, [r7, #6]
 8018bd0:	4613      	mov	r3, r2
 8018bd2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8018bd4:	7979      	ldrb	r1, [r7, #5]
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	9303      	str	r3, [sp, #12]
 8018bda:	88fb      	ldrh	r3, [r7, #6]
 8018bdc:	9302      	str	r3, [sp, #8]
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	9301      	str	r3, [sp, #4]
 8018be2:	2301      	movs	r3, #1
 8018be4:	9300      	str	r3, [sp, #0]
 8018be6:	2300      	movs	r3, #0
 8018be8:	2201      	movs	r2, #1
 8018bea:	68f8      	ldr	r0, [r7, #12]
 8018bec:	f7e8 fe39 	bl	8001862 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8018bf0:	2300      	movs	r3, #0

}
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	3710      	adds	r7, #16
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	bd80      	pop	{r7, pc}

08018bfa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8018bfa:	b580      	push	{r7, lr}
 8018bfc:	b088      	sub	sp, #32
 8018bfe:	af04      	add	r7, sp, #16
 8018c00:	60f8      	str	r0, [r7, #12]
 8018c02:	60b9      	str	r1, [r7, #8]
 8018c04:	4611      	mov	r1, r2
 8018c06:	461a      	mov	r2, r3
 8018c08:	460b      	mov	r3, r1
 8018c0a:	80fb      	strh	r3, [r7, #6]
 8018c0c:	4613      	mov	r3, r2
 8018c0e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d001      	beq.n	8018c1e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8018c1e:	7979      	ldrb	r1, [r7, #5]
 8018c20:	7e3b      	ldrb	r3, [r7, #24]
 8018c22:	9303      	str	r3, [sp, #12]
 8018c24:	88fb      	ldrh	r3, [r7, #6]
 8018c26:	9302      	str	r3, [sp, #8]
 8018c28:	68bb      	ldr	r3, [r7, #8]
 8018c2a:	9301      	str	r3, [sp, #4]
 8018c2c:	2301      	movs	r3, #1
 8018c2e:	9300      	str	r3, [sp, #0]
 8018c30:	2302      	movs	r3, #2
 8018c32:	2200      	movs	r2, #0
 8018c34:	68f8      	ldr	r0, [r7, #12]
 8018c36:	f7e8 fe14 	bl	8001862 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8018c3a:	2300      	movs	r3, #0
}
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	3710      	adds	r7, #16
 8018c40:	46bd      	mov	sp, r7
 8018c42:	bd80      	pop	{r7, pc}

08018c44 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b088      	sub	sp, #32
 8018c48:	af04      	add	r7, sp, #16
 8018c4a:	60f8      	str	r0, [r7, #12]
 8018c4c:	60b9      	str	r1, [r7, #8]
 8018c4e:	4611      	mov	r1, r2
 8018c50:	461a      	mov	r2, r3
 8018c52:	460b      	mov	r3, r1
 8018c54:	80fb      	strh	r3, [r7, #6]
 8018c56:	4613      	mov	r3, r2
 8018c58:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8018c5a:	7979      	ldrb	r1, [r7, #5]
 8018c5c:	2300      	movs	r3, #0
 8018c5e:	9303      	str	r3, [sp, #12]
 8018c60:	88fb      	ldrh	r3, [r7, #6]
 8018c62:	9302      	str	r3, [sp, #8]
 8018c64:	68bb      	ldr	r3, [r7, #8]
 8018c66:	9301      	str	r3, [sp, #4]
 8018c68:	2301      	movs	r3, #1
 8018c6a:	9300      	str	r3, [sp, #0]
 8018c6c:	2302      	movs	r3, #2
 8018c6e:	2201      	movs	r2, #1
 8018c70:	68f8      	ldr	r0, [r7, #12]
 8018c72:	f7e8 fdf6 	bl	8001862 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8018c76:	2300      	movs	r3, #0
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3710      	adds	r7, #16
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}

08018c80 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b086      	sub	sp, #24
 8018c84:	af04      	add	r7, sp, #16
 8018c86:	6078      	str	r0, [r7, #4]
 8018c88:	4608      	mov	r0, r1
 8018c8a:	4611      	mov	r1, r2
 8018c8c:	461a      	mov	r2, r3
 8018c8e:	4603      	mov	r3, r0
 8018c90:	70fb      	strb	r3, [r7, #3]
 8018c92:	460b      	mov	r3, r1
 8018c94:	70bb      	strb	r3, [r7, #2]
 8018c96:	4613      	mov	r3, r2
 8018c98:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8018c9a:	7878      	ldrb	r0, [r7, #1]
 8018c9c:	78ba      	ldrb	r2, [r7, #2]
 8018c9e:	78f9      	ldrb	r1, [r7, #3]
 8018ca0:	8b3b      	ldrh	r3, [r7, #24]
 8018ca2:	9302      	str	r3, [sp, #8]
 8018ca4:	7d3b      	ldrb	r3, [r7, #20]
 8018ca6:	9301      	str	r3, [sp, #4]
 8018ca8:	7c3b      	ldrb	r3, [r7, #16]
 8018caa:	9300      	str	r3, [sp, #0]
 8018cac:	4603      	mov	r3, r0
 8018cae:	6878      	ldr	r0, [r7, #4]
 8018cb0:	f7e8 fda3 	bl	80017fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8018cb4:	2300      	movs	r3, #0
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	3708      	adds	r7, #8
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd80      	pop	{r7, pc}

08018cbe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8018cbe:	b580      	push	{r7, lr}
 8018cc0:	b082      	sub	sp, #8
 8018cc2:	af00      	add	r7, sp, #0
 8018cc4:	6078      	str	r0, [r7, #4]
 8018cc6:	460b      	mov	r3, r1
 8018cc8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8018cca:	78fb      	ldrb	r3, [r7, #3]
 8018ccc:	4619      	mov	r1, r3
 8018cce:	6878      	ldr	r0, [r7, #4]
 8018cd0:	f7e8 fdb4 	bl	800183c <USBH_LL_ClosePipe>

  return USBH_OK;
 8018cd4:	2300      	movs	r3, #0
}
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	3708      	adds	r7, #8
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	bd80      	pop	{r7, pc}

08018cde <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8018cde:	b580      	push	{r7, lr}
 8018ce0:	b084      	sub	sp, #16
 8018ce2:	af00      	add	r7, sp, #0
 8018ce4:	6078      	str	r0, [r7, #4]
 8018ce6:	460b      	mov	r3, r1
 8018ce8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	f000 f839 	bl	8018d62 <USBH_GetFreePipe>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8018cf4:	89fb      	ldrh	r3, [r7, #14]
 8018cf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018cfa:	4293      	cmp	r3, r2
 8018cfc:	d00b      	beq.n	8018d16 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8018cfe:	78fa      	ldrb	r2, [r7, #3]
 8018d00:	89fb      	ldrh	r3, [r7, #14]
 8018d02:	f003 030f 	and.w	r3, r3, #15
 8018d06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8018d0a:	6879      	ldr	r1, [r7, #4]
 8018d0c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8018d10:	009b      	lsls	r3, r3, #2
 8018d12:	440b      	add	r3, r1
 8018d14:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8018d16:	89fb      	ldrh	r3, [r7, #14]
 8018d18:	b2db      	uxtb	r3, r3
}
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	3710      	adds	r7, #16
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bd80      	pop	{r7, pc}

08018d22 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8018d22:	b480      	push	{r7}
 8018d24:	b083      	sub	sp, #12
 8018d26:	af00      	add	r7, sp, #0
 8018d28:	6078      	str	r0, [r7, #4]
 8018d2a:	460b      	mov	r3, r1
 8018d2c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8018d2e:	78fb      	ldrb	r3, [r7, #3]
 8018d30:	2b0f      	cmp	r3, #15
 8018d32:	d80f      	bhi.n	8018d54 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8018d34:	78fb      	ldrb	r3, [r7, #3]
 8018d36:	687a      	ldr	r2, [r7, #4]
 8018d38:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8018d3c:	009b      	lsls	r3, r3, #2
 8018d3e:	4413      	add	r3, r2
 8018d40:	685a      	ldr	r2, [r3, #4]
 8018d42:	78fb      	ldrb	r3, [r7, #3]
 8018d44:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8018d48:	6879      	ldr	r1, [r7, #4]
 8018d4a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8018d4e:	009b      	lsls	r3, r3, #2
 8018d50:	440b      	add	r3, r1
 8018d52:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8018d54:	2300      	movs	r3, #0
}
 8018d56:	4618      	mov	r0, r3
 8018d58:	370c      	adds	r7, #12
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d60:	4770      	bx	lr

08018d62 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8018d62:	b480      	push	{r7}
 8018d64:	b085      	sub	sp, #20
 8018d66:	af00      	add	r7, sp, #0
 8018d68:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8018d6e:	2300      	movs	r3, #0
 8018d70:	73fb      	strb	r3, [r7, #15]
 8018d72:	e010      	b.n	8018d96 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8018d74:	7bfb      	ldrb	r3, [r7, #15]
 8018d76:	687a      	ldr	r2, [r7, #4]
 8018d78:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8018d7c:	009b      	lsls	r3, r3, #2
 8018d7e:	4413      	add	r3, r2
 8018d80:	685b      	ldr	r3, [r3, #4]
 8018d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d102      	bne.n	8018d90 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8018d8a:	7bfb      	ldrb	r3, [r7, #15]
 8018d8c:	b29b      	uxth	r3, r3
 8018d8e:	e007      	b.n	8018da0 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8018d90:	7bfb      	ldrb	r3, [r7, #15]
 8018d92:	3301      	adds	r3, #1
 8018d94:	73fb      	strb	r3, [r7, #15]
 8018d96:	7bfb      	ldrb	r3, [r7, #15]
 8018d98:	2b0f      	cmp	r3, #15
 8018d9a:	d9eb      	bls.n	8018d74 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8018d9c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8018da0:	4618      	mov	r0, r3
 8018da2:	3714      	adds	r7, #20
 8018da4:	46bd      	mov	sp, r7
 8018da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018daa:	4770      	bx	lr

08018dac <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 8018db0:	f000 f806 	bl	8018dc0 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8018db4:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8018db8:	f7ed f9d4 	bl	8006164 <BSP_LCD_Clear>
}
 8018dbc:	bf00      	nop
 8018dbe:	bd80      	pop	{r7, pc}

08018dc0 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 8018dc0:	b480      	push	{r7}
 8018dc2:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8018dc4:	4b13      	ldr	r3, [pc, #76]	@ (8018e14 <LCD_LOG_DeInit+0x54>)
 8018dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8018dca:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8018dcc:	4b12      	ldr	r3, [pc, #72]	@ (8018e18 <LCD_LOG_DeInit+0x58>)
 8018dce:	2200      	movs	r2, #0
 8018dd0:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8018dd2:	4b12      	ldr	r3, [pc, #72]	@ (8018e1c <LCD_LOG_DeInit+0x5c>)
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8018dd8:	4b11      	ldr	r3, [pc, #68]	@ (8018e20 <LCD_LOG_DeInit+0x60>)
 8018dda:	2200      	movs	r2, #0
 8018ddc:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8018dde:	4b11      	ldr	r3, [pc, #68]	@ (8018e24 <LCD_LOG_DeInit+0x64>)
 8018de0:	2200      	movs	r2, #0
 8018de2:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8018de4:	4b10      	ldr	r3, [pc, #64]	@ (8018e28 <LCD_LOG_DeInit+0x68>)
 8018de6:	2200      	movs	r2, #0
 8018de8:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8018dea:	4b10      	ldr	r3, [pc, #64]	@ (8018e2c <LCD_LOG_DeInit+0x6c>)
 8018dec:	2201      	movs	r2, #1
 8018dee:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8018df0:	4b0f      	ldr	r3, [pc, #60]	@ (8018e30 <LCD_LOG_DeInit+0x70>)
 8018df2:	2200      	movs	r2, #0
 8018df4:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8018df6:	4b0f      	ldr	r3, [pc, #60]	@ (8018e34 <LCD_LOG_DeInit+0x74>)
 8018df8:	2200      	movs	r2, #0
 8018dfa:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 8018dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8018e38 <LCD_LOG_DeInit+0x78>)
 8018dfe:	2200      	movs	r2, #0
 8018e00:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8018e02:	4b0e      	ldr	r3, [pc, #56]	@ (8018e3c <LCD_LOG_DeInit+0x7c>)
 8018e04:	2200      	movs	r2, #0
 8018e06:	801a      	strh	r2, [r3, #0]
}
 8018e08:	bf00      	nop
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e10:	4770      	bx	lr
 8018e12:	bf00      	nop
 8018e14:	2000c430 	.word	0x2000c430
 8018e18:	2000c434 	.word	0x2000c434
 8018e1c:	2000c436 	.word	0x2000c436
 8018e20:	2000c438 	.word	0x2000c438
 8018e24:	2000c43a 	.word	0x2000c43a
 8018e28:	2000c43c 	.word	0x2000c43c
 8018e2c:	2000c43e 	.word	0x2000c43e
 8018e30:	2000c43f 	.word	0x2000c43f
 8018e34:	2000c440 	.word	0x2000c440
 8018e38:	2000c441 	.word	0x2000c441
 8018e3c:	2000c442 	.word	0x2000c442

08018e40 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b082      	sub	sp, #8
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8018e48:	4818      	ldr	r0, [pc, #96]	@ (8018eac <LCD_LOG_SetHeader+0x6c>)
 8018e4a:	f7ed f95b 	bl	8006104 <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8018e4e:	4818      	ldr	r0, [pc, #96]	@ (8018eb0 <LCD_LOG_SetHeader+0x70>)
 8018e50:	f7ed f926 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8018e54:	f7ed f89c 	bl	8005f90 <BSP_LCD_GetXSize>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	b29a      	uxth	r2, r3
 8018e5c:	4b13      	ldr	r3, [pc, #76]	@ (8018eac <LCD_LOG_SetHeader+0x6c>)
 8018e5e:	88db      	ldrh	r3, [r3, #6]
 8018e60:	4619      	mov	r1, r3
 8018e62:	0049      	lsls	r1, r1, #1
 8018e64:	440b      	add	r3, r1
 8018e66:	b29b      	uxth	r3, r3
 8018e68:	2100      	movs	r1, #0
 8018e6a:	2000      	movs	r0, #0
 8018e6c:	f7ed fd90 	bl	8006990 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8018e70:	f04f 30ff 	mov.w	r0, #4294967295
 8018e74:	f7ed f914 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8018e78:	480d      	ldr	r0, [pc, #52]	@ (8018eb0 <LCD_LOG_SetHeader+0x70>)
 8018e7a:	f7ed f929 	bl	80060d0 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 8018e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8018eac <LCD_LOG_SetHeader+0x6c>)
 8018e80:	88d9      	ldrh	r1, [r3, #6]
 8018e82:	2301      	movs	r3, #1
 8018e84:	687a      	ldr	r2, [r7, #4]
 8018e86:	2000      	movs	r0, #0
 8018e88:	f7ed fa3c 	bl	8006304 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8018e8c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8018e90:	f7ed f91e 	bl	80060d0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8018e94:	f04f 30ff 	mov.w	r0, #4294967295
 8018e98:	f7ed f902 	bl	80060a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8018e9c:	4805      	ldr	r0, [pc, #20]	@ (8018eb4 <LCD_LOG_SetHeader+0x74>)
 8018e9e:	f7ed f931 	bl	8006104 <BSP_LCD_SetFont>
}
 8018ea2:	bf00      	nop
 8018ea4:	3708      	adds	r7, #8
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	bd80      	pop	{r7, pc}
 8018eaa:	bf00      	nop
 8018eac:	20000144 	.word	0x20000144
 8018eb0:	ff0000ff 	.word	0xff0000ff
 8018eb4:	2000014c 	.word	0x2000014c

08018eb8 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 8018eb8:	b590      	push	{r4, r7, lr}
 8018eba:	b085      	sub	sp, #20
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 8018ec0:	f7ed f93a 	bl	8006138 <BSP_LCD_GetFont>
 8018ec4:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 8018ec6:	4b60      	ldr	r3, [pc, #384]	@ (8019048 <__io_putchar+0x190>)
 8018ec8:	781b      	ldrb	r3, [r3, #0]
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	f040 80b6 	bne.w	801903c <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 8018ed0:	4b5e      	ldr	r3, [pc, #376]	@ (801904c <__io_putchar+0x194>)
 8018ed2:	781b      	ldrb	r3, [r3, #0]
 8018ed4:	2b01      	cmp	r3, #1
 8018ed6:	d110      	bne.n	8018efa <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8018ed8:	4b5d      	ldr	r3, [pc, #372]	@ (8019050 <__io_putchar+0x198>)
 8018eda:	881a      	ldrh	r2, [r3, #0]
 8018edc:	4b5d      	ldr	r3, [pc, #372]	@ (8019054 <__io_putchar+0x19c>)
 8018ede:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8018ee0:	4b5d      	ldr	r3, [pc, #372]	@ (8019058 <__io_putchar+0x1a0>)
 8018ee2:	881a      	ldrh	r2, [r3, #0]
 8018ee4:	4b5d      	ldr	r3, [pc, #372]	@ (801905c <__io_putchar+0x1a4>)
 8018ee6:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8018ee8:	4b58      	ldr	r3, [pc, #352]	@ (801904c <__io_putchar+0x194>)
 8018eea:	2200      	movs	r2, #0
 8018eec:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 8018eee:	4b5c      	ldr	r3, [pc, #368]	@ (8019060 <__io_putchar+0x1a8>)
 8018ef0:	2200      	movs	r2, #0
 8018ef2:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8018ef4:	4b5b      	ldr	r3, [pc, #364]	@ (8019064 <__io_putchar+0x1ac>)
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8018efa:	4b5b      	ldr	r3, [pc, #364]	@ (8019068 <__io_putchar+0x1b0>)
 8018efc:	881b      	ldrh	r3, [r3, #0]
 8018efe:	461c      	mov	r4, r3
 8018f00:	f7ed f846 	bl	8005f90 <BSP_LCD_GetXSize>
 8018f04:	4602      	mov	r2, r0
 8018f06:	68bb      	ldr	r3, [r7, #8]
 8018f08:	889b      	ldrh	r3, [r3, #4]
 8018f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f0e:	429c      	cmp	r4, r3
 8018f10:	d218      	bcs.n	8018f44 <__io_putchar+0x8c>
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	2b0a      	cmp	r3, #10
 8018f16:	d015      	beq.n	8018f44 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8018f18:	4b4e      	ldr	r3, [pc, #312]	@ (8019054 <__io_putchar+0x19c>)
 8018f1a:	881b      	ldrh	r3, [r3, #0]
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	4b52      	ldr	r3, [pc, #328]	@ (8019068 <__io_putchar+0x1b0>)
 8018f20:	881b      	ldrh	r3, [r3, #0]
 8018f22:	1c5a      	adds	r2, r3, #1
 8018f24:	b290      	uxth	r0, r2
 8018f26:	4a50      	ldr	r2, [pc, #320]	@ (8019068 <__io_putchar+0x1b0>)
 8018f28:	8010      	strh	r0, [r2, #0]
 8018f2a:	461c      	mov	r4, r3
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	b2d8      	uxtb	r0, r3
 8018f30:	4a4e      	ldr	r2, [pc, #312]	@ (801906c <__io_putchar+0x1b4>)
 8018f32:	460b      	mov	r3, r1
 8018f34:	015b      	lsls	r3, r3, #5
 8018f36:	440b      	add	r3, r1
 8018f38:	009b      	lsls	r3, r3, #2
 8018f3a:	4413      	add	r3, r2
 8018f3c:	4423      	add	r3, r4
 8018f3e:	4602      	mov	r2, r0
 8018f40:	701a      	strb	r2, [r3, #0]
 8018f42:	e07b      	b.n	801903c <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8018f44:	4b45      	ldr	r3, [pc, #276]	@ (801905c <__io_putchar+0x1a4>)
 8018f46:	881a      	ldrh	r2, [r3, #0]
 8018f48:	4b42      	ldr	r3, [pc, #264]	@ (8019054 <__io_putchar+0x19c>)
 8018f4a:	881b      	ldrh	r3, [r3, #0]
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d314      	bcc.n	8018f7a <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8018f50:	4b47      	ldr	r3, [pc, #284]	@ (8019070 <__io_putchar+0x1b8>)
 8018f52:	781b      	ldrb	r3, [r3, #0]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d10d      	bne.n	8018f74 <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 8018f58:	4b40      	ldr	r3, [pc, #256]	@ (801905c <__io_putchar+0x1a4>)
 8018f5a:	881b      	ldrh	r3, [r3, #0]
 8018f5c:	3301      	adds	r3, #1
 8018f5e:	b29a      	uxth	r2, r3
 8018f60:	4b3e      	ldr	r3, [pc, #248]	@ (801905c <__io_putchar+0x1a4>)
 8018f62:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8018f64:	4b3d      	ldr	r3, [pc, #244]	@ (801905c <__io_putchar+0x1a4>)
 8018f66:	881b      	ldrh	r3, [r3, #0]
 8018f68:	2b71      	cmp	r3, #113	@ 0x71
 8018f6a:	d106      	bne.n	8018f7a <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8018f6c:	4b3b      	ldr	r3, [pc, #236]	@ (801905c <__io_putchar+0x1a4>)
 8018f6e:	2200      	movs	r2, #0
 8018f70:	801a      	strh	r2, [r3, #0]
 8018f72:	e002      	b.n	8018f7a <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8018f74:	4b3e      	ldr	r3, [pc, #248]	@ (8019070 <__io_putchar+0x1b8>)
 8018f76:	2200      	movs	r2, #0
 8018f78:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8018f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8019068 <__io_putchar+0x1b0>)
 8018f7c:	881b      	ldrh	r3, [r3, #0]
 8018f7e:	60fb      	str	r3, [r7, #12]
 8018f80:	e015      	b.n	8018fae <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8018f82:	4b34      	ldr	r3, [pc, #208]	@ (8019054 <__io_putchar+0x19c>)
 8018f84:	881b      	ldrh	r3, [r3, #0]
 8018f86:	4619      	mov	r1, r3
 8018f88:	4b37      	ldr	r3, [pc, #220]	@ (8019068 <__io_putchar+0x1b0>)
 8018f8a:	881b      	ldrh	r3, [r3, #0]
 8018f8c:	1c5a      	adds	r2, r3, #1
 8018f8e:	b290      	uxth	r0, r2
 8018f90:	4a35      	ldr	r2, [pc, #212]	@ (8019068 <__io_putchar+0x1b0>)
 8018f92:	8010      	strh	r0, [r2, #0]
 8018f94:	4618      	mov	r0, r3
 8018f96:	4a35      	ldr	r2, [pc, #212]	@ (801906c <__io_putchar+0x1b4>)
 8018f98:	460b      	mov	r3, r1
 8018f9a:	015b      	lsls	r3, r3, #5
 8018f9c:	440b      	add	r3, r1
 8018f9e:	009b      	lsls	r3, r3, #2
 8018fa0:	4413      	add	r3, r2
 8018fa2:	4403      	add	r3, r0
 8018fa4:	2220      	movs	r2, #32
 8018fa6:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	3301      	adds	r3, #1
 8018fac:	60fb      	str	r3, [r7, #12]
 8018fae:	f7ec ffef 	bl	8005f90 <BSP_LCD_GetXSize>
 8018fb2:	4602      	mov	r2, r0
 8018fb4:	68bb      	ldr	r3, [r7, #8]
 8018fb6:	889b      	ldrh	r3, [r3, #4]
 8018fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8018fbc:	68fa      	ldr	r2, [r7, #12]
 8018fbe:	429a      	cmp	r2, r3
 8018fc0:	d3df      	bcc.n	8018f82 <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8018fc2:	4b24      	ldr	r3, [pc, #144]	@ (8019054 <__io_putchar+0x19c>)
 8018fc4:	881b      	ldrh	r3, [r3, #0]
 8018fc6:	4618      	mov	r0, r3
 8018fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8019074 <__io_putchar+0x1bc>)
 8018fca:	681a      	ldr	r2, [r3, #0]
 8018fcc:	4927      	ldr	r1, [pc, #156]	@ (801906c <__io_putchar+0x1b4>)
 8018fce:	4603      	mov	r3, r0
 8018fd0:	015b      	lsls	r3, r3, #5
 8018fd2:	4403      	add	r3, r0
 8018fd4:	009b      	lsls	r3, r3, #2
 8018fd6:	440b      	add	r3, r1
 8018fd8:	3380      	adds	r3, #128	@ 0x80
 8018fda:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 8018fdc:	4b22      	ldr	r3, [pc, #136]	@ (8019068 <__io_putchar+0x1b0>)
 8018fde:	2200      	movs	r2, #0
 8018fe0:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8018fe2:	f000 f849 	bl	8019078 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8018fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8019054 <__io_putchar+0x19c>)
 8018fe8:	881b      	ldrh	r3, [r3, #0]
 8018fea:	3301      	adds	r3, #1
 8018fec:	b29a      	uxth	r2, r3
 8018fee:	4b19      	ldr	r3, [pc, #100]	@ (8019054 <__io_putchar+0x19c>)
 8018ff0:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8018ff2:	4b18      	ldr	r3, [pc, #96]	@ (8019054 <__io_putchar+0x19c>)
 8018ff4:	881b      	ldrh	r3, [r3, #0]
 8018ff6:	2b71      	cmp	r3, #113	@ 0x71
 8018ff8:	d108      	bne.n	801900c <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 8018ffa:	4b16      	ldr	r3, [pc, #88]	@ (8019054 <__io_putchar+0x19c>)
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 8019000:	4b16      	ldr	r3, [pc, #88]	@ (801905c <__io_putchar+0x1a4>)
 8019002:	2201      	movs	r2, #1
 8019004:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 8019006:	4b1a      	ldr	r3, [pc, #104]	@ (8019070 <__io_putchar+0x1b8>)
 8019008:	2201      	movs	r2, #1
 801900a:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	2b0a      	cmp	r3, #10
 8019010:	d014      	beq.n	801903c <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8019012:	4b10      	ldr	r3, [pc, #64]	@ (8019054 <__io_putchar+0x19c>)
 8019014:	881b      	ldrh	r3, [r3, #0]
 8019016:	4619      	mov	r1, r3
 8019018:	4b13      	ldr	r3, [pc, #76]	@ (8019068 <__io_putchar+0x1b0>)
 801901a:	881b      	ldrh	r3, [r3, #0]
 801901c:	1c5a      	adds	r2, r3, #1
 801901e:	b290      	uxth	r0, r2
 8019020:	4a11      	ldr	r2, [pc, #68]	@ (8019068 <__io_putchar+0x1b0>)
 8019022:	8010      	strh	r0, [r2, #0]
 8019024:	461c      	mov	r4, r3
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	b2d8      	uxtb	r0, r3
 801902a:	4a10      	ldr	r2, [pc, #64]	@ (801906c <__io_putchar+0x1b4>)
 801902c:	460b      	mov	r3, r1
 801902e:	015b      	lsls	r3, r3, #5
 8019030:	440b      	add	r3, r1
 8019032:	009b      	lsls	r3, r3, #2
 8019034:	4413      	add	r3, r2
 8019036:	4423      	add	r3, r4
 8019038:	4602      	mov	r2, r0
 801903a:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 801903c:	687b      	ldr	r3, [r7, #4]
}
 801903e:	4618      	mov	r0, r3
 8019040:	3714      	adds	r7, #20
 8019042:	46bd      	mov	sp, r7
 8019044:	bd90      	pop	{r4, r7, pc}
 8019046:	bf00      	nop
 8019048:	2000c440 	.word	0x2000c440
 801904c:	2000c43f 	.word	0x2000c43f
 8019050:	2000c43c 	.word	0x2000c43c
 8019054:	2000c438 	.word	0x2000c438
 8019058:	2000c43a 	.word	0x2000c43a
 801905c:	2000c436 	.word	0x2000c436
 8019060:	2000c441 	.word	0x2000c441
 8019064:	2000c442 	.word	0x2000c442
 8019068:	2000c434 	.word	0x2000c434
 801906c:	200089ec 	.word	0x200089ec
 8019070:	2000c43e 	.word	0x2000c43e
 8019074:	2000c430 	.word	0x2000c430

08019078 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b082      	sub	sp, #8
 801907c:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 801907e:	2300      	movs	r3, #0
 8019080:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 8019082:	2300      	movs	r3, #0
 8019084:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 8019086:	2300      	movs	r3, #0
 8019088:	807b      	strh	r3, [r7, #2]
 801908a:	2300      	movs	r3, #0
 801908c:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 801908e:	4b3a      	ldr	r3, [pc, #232]	@ (8019178 <LCD_LOG_UpdateDisplay+0x100>)
 8019090:	881b      	ldrh	r3, [r3, #0]
 8019092:	2b0b      	cmp	r3, #11
 8019094:	d826      	bhi.n	80190e4 <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 8019096:	4b38      	ldr	r3, [pc, #224]	@ (8019178 <LCD_LOG_UpdateDisplay+0x100>)
 8019098:	881a      	ldrh	r2, [r3, #0]
 801909a:	4b38      	ldr	r3, [pc, #224]	@ (801917c <LCD_LOG_UpdateDisplay+0x104>)
 801909c:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 801909e:	429a      	cmp	r2, r3
 80190a0:	d320      	bcc.n	80190e4 <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 80190a2:	79fb      	ldrb	r3, [r7, #7]
 80190a4:	4a34      	ldr	r2, [pc, #208]	@ (8019178 <LCD_LOG_UpdateDisplay+0x100>)
 80190a6:	8812      	ldrh	r2, [r2, #0]
 80190a8:	441a      	add	r2, r3
 80190aa:	4935      	ldr	r1, [pc, #212]	@ (8019180 <LCD_LOG_UpdateDisplay+0x108>)
 80190ac:	4613      	mov	r3, r2
 80190ae:	015b      	lsls	r3, r3, #5
 80190b0:	4413      	add	r3, r2
 80190b2:	009b      	lsls	r3, r3, #2
 80190b4:	440b      	add	r3, r1
 80190b6:	3380      	adds	r3, #128	@ 0x80
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	4618      	mov	r0, r3
 80190bc:	f7ec fff0 	bl	80060a0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80190c0:	4b2d      	ldr	r3, [pc, #180]	@ (8019178 <LCD_LOG_UpdateDisplay+0x100>)
 80190c2:	881b      	ldrh	r3, [r3, #0]
 80190c4:	3304      	adds	r3, #4
 80190c6:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 80190c8:	79fb      	ldrb	r3, [r7, #7]
 80190ca:	4a2b      	ldr	r2, [pc, #172]	@ (8019178 <LCD_LOG_UpdateDisplay+0x100>)
 80190cc:	8812      	ldrh	r2, [r2, #0]
 80190ce:	441a      	add	r2, r3
 80190d0:	4613      	mov	r3, r2
 80190d2:	015b      	lsls	r3, r3, #5
 80190d4:	4413      	add	r3, r2
 80190d6:	009b      	lsls	r3, r3, #2
 80190d8:	4a29      	ldr	r2, [pc, #164]	@ (8019180 <LCD_LOG_UpdateDisplay+0x108>)
 80190da:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80190dc:	4619      	mov	r1, r3
 80190de:	f7ed f9d9 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
 80190e2:	e045      	b.n	8019170 <LCD_LOG_UpdateDisplay+0xf8>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80190e4:	4b24      	ldr	r3, [pc, #144]	@ (8019178 <LCD_LOG_UpdateDisplay+0x100>)
 80190e6:	881a      	ldrh	r2, [r3, #0]
 80190e8:	4b24      	ldr	r3, [pc, #144]	@ (801917c <LCD_LOG_UpdateDisplay+0x104>)
 80190ea:	881b      	ldrh	r3, [r3, #0]
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d204      	bcs.n	80190fa <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80190f0:	4b21      	ldr	r3, [pc, #132]	@ (8019178 <LCD_LOG_UpdateDisplay+0x100>)
 80190f2:	881b      	ldrh	r3, [r3, #0]
 80190f4:	3371      	adds	r3, #113	@ 0x71
 80190f6:	80bb      	strh	r3, [r7, #4]
 80190f8:	e002      	b.n	8019100 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 80190fa:	4b1f      	ldr	r3, [pc, #124]	@ (8019178 <LCD_LOG_UpdateDisplay+0x100>)
 80190fc:	881b      	ldrh	r3, [r3, #0]
 80190fe:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 8019100:	88bb      	ldrh	r3, [r7, #4]
 8019102:	3b0c      	subs	r3, #12
 8019104:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8019106:	2300      	movs	r3, #0
 8019108:	71fb      	strb	r3, [r7, #7]
 801910a:	e02d      	b.n	8019168 <LCD_LOG_UpdateDisplay+0xf0>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 801910c:	79fa      	ldrb	r2, [r7, #7]
 801910e:	887b      	ldrh	r3, [r7, #2]
 8019110:	18d1      	adds	r1, r2, r3
 8019112:	4b1c      	ldr	r3, [pc, #112]	@ (8019184 <LCD_LOG_UpdateDisplay+0x10c>)
 8019114:	fb83 2301 	smull	r2, r3, r3, r1
 8019118:	115a      	asrs	r2, r3, #5
 801911a:	17cb      	asrs	r3, r1, #31
 801911c:	1ad2      	subs	r2, r2, r3
 801911e:	4613      	mov	r3, r2
 8019120:	00db      	lsls	r3, r3, #3
 8019122:	1a9b      	subs	r3, r3, r2
 8019124:	011b      	lsls	r3, r3, #4
 8019126:	4413      	add	r3, r2
 8019128:	1aca      	subs	r2, r1, r3
 801912a:	4613      	mov	r3, r2
 801912c:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 801912e:	883a      	ldrh	r2, [r7, #0]
 8019130:	4913      	ldr	r1, [pc, #76]	@ (8019180 <LCD_LOG_UpdateDisplay+0x108>)
 8019132:	4613      	mov	r3, r2
 8019134:	015b      	lsls	r3, r3, #5
 8019136:	4413      	add	r3, r2
 8019138:	009b      	lsls	r3, r3, #2
 801913a:	440b      	add	r3, r1
 801913c:	3380      	adds	r3, #128	@ 0x80
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	4618      	mov	r0, r3
 8019142:	f7ec ffad 	bl	80060a0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8019146:	79fb      	ldrb	r3, [r7, #7]
 8019148:	b29b      	uxth	r3, r3
 801914a:	3304      	adds	r3, #4
 801914c:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 801914e:	883a      	ldrh	r2, [r7, #0]
 8019150:	4613      	mov	r3, r2
 8019152:	015b      	lsls	r3, r3, #5
 8019154:	4413      	add	r3, r2
 8019156:	009b      	lsls	r3, r3, #2
 8019158:	4a09      	ldr	r2, [pc, #36]	@ (8019180 <LCD_LOG_UpdateDisplay+0x108>)
 801915a:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 801915c:	4619      	mov	r1, r3
 801915e:	f7ed f999 	bl	8006494 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8019162:	79fb      	ldrb	r3, [r7, #7]
 8019164:	3301      	adds	r3, #1
 8019166:	71fb      	strb	r3, [r7, #7]
 8019168:	79fb      	ldrb	r3, [r7, #7]
 801916a:	2b0c      	cmp	r3, #12
 801916c:	d9ce      	bls.n	801910c <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 801916e:	bf00      	nop
 8019170:	bf00      	nop
 8019172:	3708      	adds	r7, #8
 8019174:	46bd      	mov	sp, r7
 8019176:	bd80      	pop	{r7, pc}
 8019178:	2000c438 	.word	0x2000c438
 801917c:	2000c436 	.word	0x2000c436
 8019180:	200089ec 	.word	0x200089ec
 8019184:	487ede05 	.word	0x487ede05

08019188 <D16_GENERIC>:
 8019188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801918c:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8019190:	b089      	sub	sp, #36	@ 0x24
 8019192:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8019194:	6993      	ldr	r3, [r2, #24]
 8019196:	9406      	str	r4, [sp, #24]
 8019198:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 801919a:	9307      	str	r3, [sp, #28]
 801919c:	9402      	str	r4, [sp, #8]
 801919e:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 80191a2:	69d3      	ldr	r3, [r2, #28]
 80191a4:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80191a6:	9103      	str	r1, [sp, #12]
 80191a8:	2d00      	cmp	r5, #0
 80191aa:	d066      	beq.n	801927a <D16_GENERIC+0xf2>
 80191ac:	f004 0520 	and.w	r5, r4, #32
 80191b0:	f004 0410 	and.w	r4, r4, #16
 80191b4:	9505      	str	r5, [sp, #20]
 80191b6:	4937      	ldr	r1, [pc, #220]	@ (8019294 <D16_GENERIC+0x10c>)
 80191b8:	9404      	str	r4, [sp, #16]
 80191ba:	f04f 0c00 	mov.w	ip, #0
 80191be:	4635      	mov	r5, r6
 80191c0:	e04f      	b.n	8019262 <D16_GENERIC+0xda>
 80191c2:	5d87      	ldrb	r7, [r0, r6]
 80191c4:	7804      	ldrb	r4, [r0, #0]
 80191c6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80191ca:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80191ce:	b2e6      	uxtb	r6, r4
 80191d0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80191d4:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80191d8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80191dc:	4433      	add	r3, r6
 80191de:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80191e2:	f3c4 0609 	ubfx	r6, r4, #0, #10
 80191e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80191ea:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80191ee:	0aa3      	lsrs	r3, r4, #10
 80191f0:	4c29      	ldr	r4, [pc, #164]	@ (8019298 <D16_GENERIC+0x110>)
 80191f2:	fb26 5404 	smlad	r4, r6, r4, r5
 80191f6:	4d29      	ldr	r5, [pc, #164]	@ (801929c <D16_GENERIC+0x114>)
 80191f8:	fb26 f505 	smuad	r5, r6, r5
 80191fc:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8019200:	eb04 080a 	add.w	r8, r4, sl
 8019204:	eba8 080b 	sub.w	r8, r8, fp
 8019208:	4646      	mov	r6, r8
 801920a:	17f7      	asrs	r7, r6, #31
 801920c:	e9cd 6700 	strd	r6, r7, [sp]
 8019210:	9e04      	ldr	r6, [sp, #16]
 8019212:	f10c 0e01 	add.w	lr, ip, #1
 8019216:	b16e      	cbz	r6, 8019234 <D16_GENERIC+0xac>
 8019218:	6a16      	ldr	r6, [r2, #32]
 801921a:	9f01      	ldr	r7, [sp, #4]
 801921c:	fba8 ab06 	umull	sl, fp, r8, r6
 8019220:	fb06 bb07 	mla	fp, r6, r7, fp
 8019224:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 8019228:	f14b 0900 	adc.w	r9, fp, #0
 801922c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8019230:	46a3      	mov	fp, r4
 8019232:	4654      	mov	r4, sl
 8019234:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8019236:	9f02      	ldr	r7, [sp, #8]
 8019238:	0424      	lsls	r4, r4, #16
 801923a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801923e:	f04f 0900 	mov.w	r9, #0
 8019242:	fb0c fc06 	mul.w	ip, ip, r6
 8019246:	fbc7 8904 	smlal	r8, r9, r7, r4
 801924a:	9e03      	ldr	r6, [sp, #12]
 801924c:	464f      	mov	r7, r9
 801924e:	10bc      	asrs	r4, r7, #2
 8019250:	f304 040f 	ssat	r4, #16, r4
 8019254:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 8019258:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 801925a:	fa1f fc8e 	uxth.w	ip, lr
 801925e:	4564      	cmp	r4, ip
 8019260:	d90a      	bls.n	8019278 <D16_GENERIC+0xf0>
 8019262:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8019264:	2c01      	cmp	r4, #1
 8019266:	b2e6      	uxtb	r6, r4
 8019268:	d1ab      	bne.n	80191c2 <D16_GENERIC+0x3a>
 801926a:	9e05      	ldr	r6, [sp, #20]
 801926c:	f850 4b02 	ldr.w	r4, [r0], #2
 8019270:	2e00      	cmp	r6, #0
 8019272:	d0ac      	beq.n	80191ce <D16_GENERIC+0x46>
 8019274:	ba64      	rev16	r4, r4
 8019276:	e7aa      	b.n	80191ce <D16_GENERIC+0x46>
 8019278:	462e      	mov	r6, r5
 801927a:	9906      	ldr	r1, [sp, #24]
 801927c:	61d3      	str	r3, [r2, #28]
 801927e:	9b07      	ldr	r3, [sp, #28]
 8019280:	6096      	str	r6, [r2, #8]
 8019282:	2000      	movs	r0, #0
 8019284:	60d1      	str	r1, [r2, #12]
 8019286:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 801928a:	6193      	str	r3, [r2, #24]
 801928c:	b009      	add	sp, #36	@ 0x24
 801928e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019292:	bf00      	nop
 8019294:	2000018c 	.word	0x2000018c
 8019298:	00030001 	.word	0x00030001
 801929c:	00010003 	.word	0x00010003

080192a0 <D24_GENERIC>:
 80192a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192a4:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80192a6:	6993      	ldr	r3, [r2, #24]
 80192a8:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80192aa:	b089      	sub	sp, #36	@ 0x24
 80192ac:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 80192b0:	9307      	str	r3, [sp, #28]
 80192b2:	9503      	str	r5, [sp, #12]
 80192b4:	69d3      	ldr	r3, [r2, #28]
 80192b6:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80192b8:	9104      	str	r1, [sp, #16]
 80192ba:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 80192be:	2e00      	cmp	r6, #0
 80192c0:	f000 808f 	beq.w	80193e2 <D24_GENERIC+0x142>
 80192c4:	f005 0620 	and.w	r6, r5, #32
 80192c8:	f005 0510 	and.w	r5, r5, #16
 80192cc:	4953      	ldr	r1, [pc, #332]	@ (801941c <D24_GENERIC+0x17c>)
 80192ce:	9606      	str	r6, [sp, #24]
 80192d0:	9505      	str	r5, [sp, #20]
 80192d2:	f04f 0c00 	mov.w	ip, #0
 80192d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80192da:	e068      	b.n	80193ae <D24_GENERIC+0x10e>
 80192dc:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80192e0:	f810 8007 	ldrb.w	r8, [r0, r7]
 80192e4:	042d      	lsls	r5, r5, #16
 80192e6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80192ea:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80192ee:	44ae      	add	lr, r5
 80192f0:	4438      	add	r0, r7
 80192f2:	fa5f f68e 	uxtb.w	r6, lr
 80192f6:	f3ce 2507 	ubfx	r5, lr, #8, #8
 80192fa:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80192fe:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8019302:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8019306:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 801930a:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 801930e:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8019312:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8019316:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801931a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801931e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8019322:	4d3f      	ldr	r5, [pc, #252]	@ (8019420 <D24_GENERIC+0x180>)
 8019324:	fb26 b705 	smlad	r7, r6, r5, fp
 8019328:	4d3e      	ldr	r5, [pc, #248]	@ (8019424 <D24_GENERIC+0x184>)
 801932a:	fb26 4b05 	smlad	fp, r6, r5, r4
 801932e:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8019332:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8019336:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 801933a:	2401      	movs	r4, #1
 801933c:	fb26 f604 	smuad	r6, r6, r4
 8019340:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8019344:	9f02      	ldr	r7, [sp, #8]
 8019346:	eb0c 0e04 	add.w	lr, ip, r4
 801934a:	eb08 0406 	add.w	r4, r8, r6
 801934e:	eb05 060a 	add.w	r6, r5, sl
 8019352:	1bf6      	subs	r6, r6, r7
 8019354:	4637      	mov	r7, r6
 8019356:	ea4f 78e6 	mov.w	r8, r6, asr #31
 801935a:	e9cd 7800 	strd	r7, r8, [sp]
 801935e:	9f05      	ldr	r7, [sp, #20]
 8019360:	b177      	cbz	r7, 8019380 <D24_GENERIC+0xe0>
 8019362:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8019366:	9502      	str	r5, [sp, #8]
 8019368:	fba6 9a08 	umull	r9, sl, r6, r8
 801936c:	9e01      	ldr	r6, [sp, #4]
 801936e:	fb08 aa06 	mla	sl, r8, r6, sl
 8019372:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8019376:	f14a 0700 	adc.w	r7, sl, #0
 801937a:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 801937e:	4655      	mov	r5, sl
 8019380:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8019382:	9f03      	ldr	r7, [sp, #12]
 8019384:	03ad      	lsls	r5, r5, #14
 8019386:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801938a:	f04f 0900 	mov.w	r9, #0
 801938e:	fb0c fc06 	mul.w	ip, ip, r6
 8019392:	fbc7 8905 	smlal	r8, r9, r7, r5
 8019396:	9e04      	ldr	r6, [sp, #16]
 8019398:	464f      	mov	r7, r9
 801939a:	10bd      	asrs	r5, r7, #2
 801939c:	f305 050f 	ssat	r5, #16, r5
 80193a0:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 80193a4:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80193a6:	fa1f fc8e 	uxth.w	ip, lr
 80193aa:	4565      	cmp	r5, ip
 80193ac:	d917      	bls.n	80193de <D24_GENERIC+0x13e>
 80193ae:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80193b0:	f890 e000 	ldrb.w	lr, [r0]
 80193b4:	b2ef      	uxtb	r7, r5
 80193b6:	2d01      	cmp	r5, #1
 80193b8:	b23e      	sxth	r6, r7
 80193ba:	d18f      	bne.n	80192dc <D24_GENERIC+0x3c>
 80193bc:	9d06      	ldr	r5, [sp, #24]
 80193be:	b1dd      	cbz	r5, 80193f8 <D24_GENERIC+0x158>
 80193c0:	78c5      	ldrb	r5, [r0, #3]
 80193c2:	ea4f 280e 	mov.w	r8, lr, lsl #8
 80193c6:	f01c 0f01 	tst.w	ip, #1
 80193ca:	ea4f 2605 	mov.w	r6, r5, lsl #8
 80193ce:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 80193d2:	d11b      	bne.n	801940c <D24_GENERIC+0x16c>
 80193d4:	f890 e001 	ldrb.w	lr, [r0, #1]
 80193d8:	3002      	adds	r0, #2
 80193da:	44c6      	add	lr, r8
 80193dc:	e789      	b.n	80192f2 <D24_GENERIC+0x52>
 80193de:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80193e2:	61d3      	str	r3, [r2, #28]
 80193e4:	9b07      	ldr	r3, [sp, #28]
 80193e6:	6193      	str	r3, [r2, #24]
 80193e8:	2000      	movs	r0, #0
 80193ea:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 80193ee:	e9c2 a904 	strd	sl, r9, [r2, #16]
 80193f2:	b009      	add	sp, #36	@ 0x24
 80193f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193f8:	f890 8001 	ldrb.w	r8, [r0, #1]
 80193fc:	7885      	ldrb	r5, [r0, #2]
 80193fe:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8019402:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8019406:	44c6      	add	lr, r8
 8019408:	3003      	adds	r0, #3
 801940a:	e772      	b.n	80192f2 <D24_GENERIC+0x52>
 801940c:	f890 8002 	ldrb.w	r8, [r0, #2]
 8019410:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8019414:	44c6      	add	lr, r8
 8019416:	3004      	adds	r0, #4
 8019418:	e76b      	b.n	80192f2 <D24_GENERIC+0x52>
 801941a:	bf00      	nop
 801941c:	2000018c 	.word	0x2000018c
 8019420:	00030001 	.word	0x00030001
 8019424:	00060007 	.word	0x00060007

08019428 <D32_GENERIC>:
 8019428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801942c:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 801942e:	6993      	ldr	r3, [r2, #24]
 8019430:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8019432:	69d6      	ldr	r6, [r2, #28]
 8019434:	b089      	sub	sp, #36	@ 0x24
 8019436:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 801943a:	9307      	str	r3, [sp, #28]
 801943c:	9403      	str	r4, [sp, #12]
 801943e:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 8019442:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8019444:	9104      	str	r1, [sp, #16]
 8019446:	2d00      	cmp	r5, #0
 8019448:	f000 809a 	beq.w	8019580 <D32_GENERIC+0x158>
 801944c:	f004 0520 	and.w	r5, r4, #32
 8019450:	f004 0410 	and.w	r4, r4, #16
 8019454:	9506      	str	r5, [sp, #24]
 8019456:	4951      	ldr	r1, [pc, #324]	@ (801959c <D32_GENERIC+0x174>)
 8019458:	9405      	str	r4, [sp, #20]
 801945a:	f04f 0e00 	mov.w	lr, #0
 801945e:	f8cd 9008 	str.w	r9, [sp, #8]
 8019462:	461d      	mov	r5, r3
 8019464:	4617      	mov	r7, r2
 8019466:	e077      	b.n	8019558 <D32_GENERIC+0x130>
 8019468:	7823      	ldrb	r3, [r4, #0]
 801946a:	f810 800c 	ldrb.w	r8, [r0, ip]
 801946e:	f810 c002 	ldrb.w	ip, [r0, r2]
 8019472:	7800      	ldrb	r0, [r0, #0]
 8019474:	041b      	lsls	r3, r3, #16
 8019476:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 801947a:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 801947e:	4403      	add	r3, r0
 8019480:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019484:	b2dc      	uxtb	r4, r3
 8019486:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801948a:	f3c3 4807 	ubfx	r8, r3, #16, #8
 801948e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8019492:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8019496:	0e1b      	lsrs	r3, r3, #24
 8019498:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 801949c:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80194a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80194a4:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80194a8:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 80194ac:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 80194b0:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80194b4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80194b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80194bc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80194c0:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 80194c4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80194c8:	4b35      	ldr	r3, [pc, #212]	@ (80195a0 <D32_GENERIC+0x178>)
 80194ca:	fb22 b403 	smlad	r4, r2, r3, fp
 80194ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80194d2:	fb2c 4803 	smlad	r8, ip, r3, r4
 80194d6:	4b33      	ldr	r3, [pc, #204]	@ (80195a4 <D32_GENERIC+0x17c>)
 80194d8:	fb22 5503 	smlad	r5, r2, r3, r5
 80194dc:	4b32      	ldr	r3, [pc, #200]	@ (80195a8 <D32_GENERIC+0x180>)
 80194de:	fb2c 5b03 	smlad	fp, ip, r3, r5
 80194e2:	2301      	movs	r3, #1
 80194e4:	fb22 f203 	smuad	r2, r2, r3
 80194e8:	4b30      	ldr	r3, [pc, #192]	@ (80195ac <D32_GENERIC+0x184>)
 80194ea:	fb2c 2503 	smlad	r5, ip, r3, r2
 80194ee:	9b02      	ldr	r3, [sp, #8]
 80194f0:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 80194f4:	eb04 080a 	add.w	r8, r4, sl
 80194f8:	eba8 0803 	sub.w	r8, r8, r3
 80194fc:	4642      	mov	r2, r8
 80194fe:	17d3      	asrs	r3, r2, #31
 8019500:	e9cd 2300 	strd	r2, r3, [sp]
 8019504:	9b05      	ldr	r3, [sp, #20]
 8019506:	f10e 0c01 	add.w	ip, lr, #1
 801950a:	b173      	cbz	r3, 801952a <D32_GENERIC+0x102>
 801950c:	6a3a      	ldr	r2, [r7, #32]
 801950e:	9b01      	ldr	r3, [sp, #4]
 8019510:	9402      	str	r4, [sp, #8]
 8019512:	fba8 8902 	umull	r8, r9, r8, r2
 8019516:	469a      	mov	sl, r3
 8019518:	fb02 930a 	mla	r3, r2, sl, r9
 801951c:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8019520:	f143 0900 	adc.w	r9, r3, #0
 8019524:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8019528:	4654      	mov	r4, sl
 801952a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801952c:	9a04      	ldr	r2, [sp, #16]
 801952e:	fb0e fe03 	mul.w	lr, lr, r3
 8019532:	9b03      	ldr	r3, [sp, #12]
 8019534:	0364      	lsls	r4, r4, #13
 8019536:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801953a:	f04f 0900 	mov.w	r9, #0
 801953e:	fbc3 8904 	smlal	r8, r9, r3, r4
 8019542:	464b      	mov	r3, r9
 8019544:	109b      	asrs	r3, r3, #2
 8019546:	f303 030f 	ssat	r3, #16, r3
 801954a:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 801954e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8019550:	fa1f fe8c 	uxth.w	lr, ip
 8019554:	4573      	cmp	r3, lr
 8019556:	d90f      	bls.n	8019578 <D32_GENERIC+0x150>
 8019558:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801955a:	b2da      	uxtb	r2, r3
 801955c:	2b01      	cmp	r3, #1
 801955e:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8019562:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8019566:	f47f af7f 	bne.w	8019468 <D32_GENERIC+0x40>
 801956a:	1d02      	adds	r2, r0, #4
 801956c:	6803      	ldr	r3, [r0, #0]
 801956e:	9806      	ldr	r0, [sp, #24]
 8019570:	b188      	cbz	r0, 8019596 <D32_GENERIC+0x16e>
 8019572:	ba5b      	rev16	r3, r3
 8019574:	4610      	mov	r0, r2
 8019576:	e785      	b.n	8019484 <D32_GENERIC+0x5c>
 8019578:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801957c:	462b      	mov	r3, r5
 801957e:	463a      	mov	r2, r7
 8019580:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8019584:	9b07      	ldr	r3, [sp, #28]
 8019586:	61d6      	str	r6, [r2, #28]
 8019588:	2000      	movs	r0, #0
 801958a:	e9c2 a904 	strd	sl, r9, [r2, #16]
 801958e:	6193      	str	r3, [r2, #24]
 8019590:	b009      	add	sp, #36	@ 0x24
 8019592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019596:	4610      	mov	r0, r2
 8019598:	e774      	b.n	8019484 <D32_GENERIC+0x5c>
 801959a:	bf00      	nop
 801959c:	2000018c 	.word	0x2000018c
 80195a0:	00060003 	.word	0x00060003
 80195a4:	000a000c 	.word	0x000a000c
 80195a8:	000c000a 	.word	0x000c000a
 80195ac:	00030006 	.word	0x00030006

080195b0 <D48_GENERIC>:
 80195b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b4:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 80195b8:	b08b      	sub	sp, #44	@ 0x2c
 80195ba:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80195bc:	9304      	str	r3, [sp, #16]
 80195be:	6993      	ldr	r3, [r2, #24]
 80195c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80195c2:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 80195c6:	9401      	str	r4, [sp, #4]
 80195c8:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80195ca:	9405      	str	r4, [sp, #20]
 80195cc:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80195d0:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80195d2:	9106      	str	r1, [sp, #24]
 80195d4:	2d00      	cmp	r5, #0
 80195d6:	f000 80c2 	beq.w	801975e <D48_GENERIC+0x1ae>
 80195da:	f004 0520 	and.w	r5, r4, #32
 80195de:	f04f 0900 	mov.w	r9, #0
 80195e2:	f004 0410 	and.w	r4, r4, #16
 80195e6:	9508      	str	r5, [sp, #32]
 80195e8:	4964      	ldr	r1, [pc, #400]	@ (801977c <D48_GENERIC+0x1cc>)
 80195ea:	9407      	str	r4, [sp, #28]
 80195ec:	464d      	mov	r5, r9
 80195ee:	e09e      	b.n	801972e <D48_GENERIC+0x17e>
 80195f0:	f81b 4007 	ldrb.w	r4, [fp, r7]
 80195f4:	f810 b008 	ldrb.w	fp, [r0, r8]
 80195f8:	f819 8008 	ldrb.w	r8, [r9, r8]
 80195fc:	f810 9006 	ldrb.w	r9, [r0, r6]
 8019600:	7800      	ldrb	r0, [r0, #0]
 8019602:	0424      	lsls	r4, r4, #16
 8019604:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8019608:	f81e 4007 	ldrb.w	r4, [lr, r7]
 801960c:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8019610:	44be      	add	lr, r7
 8019612:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8019616:	eb0b 0700 	add.w	r7, fp, r0
 801961a:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 801961e:	fa5f fe87 	uxtb.w	lr, r7
 8019622:	f3c7 2607 	ubfx	r6, r7, #8, #8
 8019626:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 801962a:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801962e:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8019632:	0e3f      	lsrs	r7, r7, #24
 8019634:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8019638:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 801963c:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8019640:	b2e7      	uxtb	r7, r4
 8019642:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8019646:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801964a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 801964e:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8019652:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8019656:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 801965a:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801965e:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8019662:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8019666:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801966a:	f3cc 0809 	ubfx	r8, ip, #0, #10
 801966e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8019672:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8019676:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801967a:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 801967e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8019682:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8019686:	4c3e      	ldr	r4, [pc, #248]	@ (8019780 <D48_GENERIC+0x1d0>)
 8019688:	9e01      	ldr	r6, [sp, #4]
 801968a:	fb29 6404 	smlad	r4, r9, r4, r6
 801968e:	4e3d      	ldr	r6, [pc, #244]	@ (8019784 <D48_GENERIC+0x1d4>)
 8019690:	fb2e 4406 	smlad	r4, lr, r6, r4
 8019694:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8019698:	fb27 4b06 	smlad	fp, r7, r6, r4
 801969c:	4c3a      	ldr	r4, [pc, #232]	@ (8019788 <D48_GENERIC+0x1d8>)
 801969e:	fb29 3304 	smlad	r3, r9, r4, r3
 80196a2:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 80196a6:	fb2e 3304 	smlad	r3, lr, r4, r3
 80196aa:	4c38      	ldr	r4, [pc, #224]	@ (801978c <D48_GENERIC+0x1dc>)
 80196ac:	fb27 3304 	smlad	r3, r7, r4, r3
 80196b0:	2601      	movs	r6, #1
 80196b2:	9301      	str	r3, [sp, #4]
 80196b4:	fb29 f906 	smuad	r9, r9, r6
 80196b8:	4b35      	ldr	r3, [pc, #212]	@ (8019790 <D48_GENERIC+0x1e0>)
 80196ba:	fb2e 9e03 	smlad	lr, lr, r3, r9
 80196be:	4b35      	ldr	r3, [pc, #212]	@ (8019794 <D48_GENERIC+0x1e4>)
 80196c0:	fb27 e303 	smlad	r3, r7, r3, lr
 80196c4:	9f04      	ldr	r7, [sp, #16]
 80196c6:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 80196ca:	eb05 0e06 	add.w	lr, r5, r6
 80196ce:	eb04 060a 	add.w	r6, r4, sl
 80196d2:	1bf6      	subs	r6, r6, r7
 80196d4:	4637      	mov	r7, r6
 80196d6:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80196da:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80196de:	9f07      	ldr	r7, [sp, #28]
 80196e0:	b177      	cbz	r7, 8019700 <D48_GENERIC+0x150>
 80196e2:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80196e6:	9404      	str	r4, [sp, #16]
 80196e8:	fba6 9a08 	umull	r9, sl, r6, r8
 80196ec:	9e03      	ldr	r6, [sp, #12]
 80196ee:	fb08 aa06 	mla	sl, r8, r6, sl
 80196f2:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 80196f6:	f14a 0700 	adc.w	r7, sl, #0
 80196fa:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80196fe:	4654      	mov	r4, sl
 8019700:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8019702:	fb05 f606 	mul.w	r6, r5, r6
 8019706:	9d05      	ldr	r5, [sp, #20]
 8019708:	02e4      	lsls	r4, r4, #11
 801970a:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 801970e:	f04f 0800 	mov.w	r8, #0
 8019712:	fbc5 7804 	smlal	r7, r8, r5, r4
 8019716:	4645      	mov	r5, r8
 8019718:	10ac      	asrs	r4, r5, #2
 801971a:	9d06      	ldr	r5, [sp, #24]
 801971c:	f304 040f 	ssat	r4, #16, r4
 8019720:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8019724:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8019726:	fa1f f58e 	uxth.w	r5, lr
 801972a:	42ac      	cmp	r4, r5
 801972c:	d917      	bls.n	801975e <D48_GENERIC+0x1ae>
 801972e:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8019730:	b2e6      	uxtb	r6, r4
 8019732:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8019736:	4277      	negs	r7, r6
 8019738:	eb00 0b08 	add.w	fp, r0, r8
 801973c:	eb0b 0907 	add.w	r9, fp, r7
 8019740:	2c01      	cmp	r4, #1
 8019742:	eb09 0e08 	add.w	lr, r9, r8
 8019746:	f47f af53 	bne.w	80195f0 <D48_GENERIC+0x40>
 801974a:	9e08      	ldr	r6, [sp, #32]
 801974c:	e9d0 7400 	ldrd	r7, r4, [r0]
 8019750:	3006      	adds	r0, #6
 8019752:	2e00      	cmp	r6, #0
 8019754:	f43f af63 	beq.w	801961e <D48_GENERIC+0x6e>
 8019758:	ba7f      	rev16	r7, r7
 801975a:	ba64      	rev16	r4, r4
 801975c:	e75f      	b.n	801961e <D48_GENERIC+0x6e>
 801975e:	6093      	str	r3, [r2, #8]
 8019760:	9b01      	ldr	r3, [sp, #4]
 8019762:	60d3      	str	r3, [r2, #12]
 8019764:	9b04      	ldr	r3, [sp, #16]
 8019766:	6153      	str	r3, [r2, #20]
 8019768:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801976a:	f8c2 c01c 	str.w	ip, [r2, #28]
 801976e:	2000      	movs	r0, #0
 8019770:	f8c2 a010 	str.w	sl, [r2, #16]
 8019774:	6193      	str	r3, [r2, #24]
 8019776:	b00b      	add	sp, #44	@ 0x2c
 8019778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801977c:	2000018c 	.word	0x2000018c
 8019780:	000f000a 	.word	0x000f000a
 8019784:	00060003 	.word	0x00060003
 8019788:	00150019 	.word	0x00150019
 801978c:	00190015 	.word	0x00190015
 8019790:	00030006 	.word	0x00030006
 8019794:	000a000f 	.word	0x000a000f

08019798 <D64_GENERIC>:
 8019798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801979c:	b089      	sub	sp, #36	@ 0x24
 801979e:	6895      	ldr	r5, [r2, #8]
 80197a0:	6913      	ldr	r3, [r2, #16]
 80197a2:	9501      	str	r5, [sp, #4]
 80197a4:	68d5      	ldr	r5, [r2, #12]
 80197a6:	9302      	str	r3, [sp, #8]
 80197a8:	9500      	str	r5, [sp, #0]
 80197aa:	6953      	ldr	r3, [r2, #20]
 80197ac:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80197ae:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80197b0:	9303      	str	r3, [sp, #12]
 80197b2:	6993      	ldr	r3, [r2, #24]
 80197b4:	9307      	str	r3, [sp, #28]
 80197b6:	e9cd 5104 	strd	r5, r1, [sp, #16]
 80197ba:	69d3      	ldr	r3, [r2, #28]
 80197bc:	2c00      	cmp	r4, #0
 80197be:	f000 80d7 	beq.w	8019970 <D64_GENERIC+0x1d8>
 80197c2:	6a11      	ldr	r1, [r2, #32]
 80197c4:	9106      	str	r1, [sp, #24]
 80197c6:	f04f 0e00 	mov.w	lr, #0
 80197ca:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 80199b0 <D64_GENERIC+0x218>
 80197ce:	4681      	mov	r9, r0
 80197d0:	e0bf      	b.n	8019952 <D64_GENERIC+0x1ba>
 80197d2:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80197d6:	426c      	negs	r4, r5
 80197d8:	eb09 0708 	add.w	r7, r9, r8
 80197dc:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 80197e0:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 80197e4:	5d38      	ldrb	r0, [r7, r4]
 80197e6:	5d31      	ldrb	r1, [r6, r4]
 80197e8:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80197ec:	f819 a008 	ldrb.w	sl, [r9, r8]
 80197f0:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 80197f4:	f899 7000 	ldrb.w	r7, [r9]
 80197f8:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 80197fc:	4426      	add	r6, r4
 80197fe:	0409      	lsls	r1, r1, #16
 8019800:	0400      	lsls	r0, r0, #16
 8019802:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8019806:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 801980a:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 801980e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8019812:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 8019816:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 801981a:	4459      	add	r1, fp
 801981c:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8019820:	4438      	add	r0, r7
 8019822:	b2c5      	uxtb	r5, r0
 8019824:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8019828:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 801982c:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8019830:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8019834:	0e00      	lsrs	r0, r0, #24
 8019836:	eb03 0806 	add.w	r8, r3, r6
 801983a:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 801983e:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8019842:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8019846:	b2c8      	uxtb	r0, r1
 8019848:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 801984c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8019850:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8019854:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8019858:	f3c1 4307 	ubfx	r3, r1, #16, #8
 801985c:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8019860:	0e09      	lsrs	r1, r1, #24
 8019862:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8019866:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801986a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 801986e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8019872:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8019876:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 801987a:	f3ca 0309 	ubfx	r3, sl, #0, #10
 801987e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019882:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8019886:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801988a:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 801988e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8019892:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8019896:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801989a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 801989e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 80198a2:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 80198a6:	0a8b      	lsrs	r3, r1, #10
 80198a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80198ac:	4938      	ldr	r1, [pc, #224]	@ (8019990 <D64_GENERIC+0x1f8>)
 80198ae:	9c00      	ldr	r4, [sp, #0]
 80198b0:	fb28 4101 	smlad	r1, r8, r1, r4
 80198b4:	4c37      	ldr	r4, [pc, #220]	@ (8019994 <D64_GENERIC+0x1fc>)
 80198b6:	fb27 1104 	smlad	r1, r7, r4, r1
 80198ba:	4c37      	ldr	r4, [pc, #220]	@ (8019998 <D64_GENERIC+0x200>)
 80198bc:	fb20 1104 	smlad	r1, r0, r4, r1
 80198c0:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 80198c4:	fb2a 1106 	smlad	r1, sl, r6, r1
 80198c8:	4d34      	ldr	r5, [pc, #208]	@ (801999c <D64_GENERIC+0x204>)
 80198ca:	9c01      	ldr	r4, [sp, #4]
 80198cc:	fb28 4405 	smlad	r4, r8, r5, r4
 80198d0:	fb2a 4415 	smladx	r4, sl, r5, r4
 80198d4:	4d32      	ldr	r5, [pc, #200]	@ (80199a0 <D64_GENERIC+0x208>)
 80198d6:	fb27 4405 	smlad	r4, r7, r5, r4
 80198da:	fb20 4415 	smladx	r4, r0, r5, r4
 80198de:	2501      	movs	r5, #1
 80198e0:	9400      	str	r4, [sp, #0]
 80198e2:	fb28 f805 	smuad	r8, r8, r5
 80198e6:	4c2f      	ldr	r4, [pc, #188]	@ (80199a4 <D64_GENERIC+0x20c>)
 80198e8:	fb27 8704 	smlad	r7, r7, r4, r8
 80198ec:	4c2e      	ldr	r4, [pc, #184]	@ (80199a8 <D64_GENERIC+0x210>)
 80198ee:	fb20 7004 	smlad	r0, r0, r4, r7
 80198f2:	4c2e      	ldr	r4, [pc, #184]	@ (80199ac <D64_GENERIC+0x214>)
 80198f4:	fb2a 0004 	smlad	r0, sl, r4, r0
 80198f8:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 80198fc:	9906      	ldr	r1, [sp, #24]
 80198fe:	9001      	str	r0, [sp, #4]
 8019900:	b181      	cbz	r1, 8019924 <D64_GENERIC+0x18c>
 8019902:	9802      	ldr	r0, [sp, #8]
 8019904:	9c03      	ldr	r4, [sp, #12]
 8019906:	4430      	add	r0, r6
 8019908:	1b00      	subs	r0, r0, r4
 801990a:	fba0 7801 	umull	r7, r8, r0, r1
 801990e:	17c5      	asrs	r5, r0, #31
 8019910:	fb01 8805 	mla	r8, r1, r5, r8
 8019914:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 8019918:	f148 0100 	adc.w	r1, r8, #0
 801991c:	0049      	lsls	r1, r1, #1
 801991e:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8019922:	460e      	mov	r6, r1
 8019924:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 8019926:	9904      	ldr	r1, [sp, #16]
 8019928:	9805      	ldr	r0, [sp, #20]
 801992a:	02b6      	lsls	r6, r6, #10
 801992c:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8019930:	f04f 0800 	mov.w	r8, #0
 8019934:	fb0e f404 	mul.w	r4, lr, r4
 8019938:	fbc1 7806 	smlal	r7, r8, r1, r6
 801993c:	4641      	mov	r1, r8
 801993e:	1089      	asrs	r1, r1, #2
 8019940:	f301 010f 	ssat	r1, #16, r1
 8019944:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8019948:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 801994a:	f10e 0e01 	add.w	lr, lr, #1
 801994e:	4571      	cmp	r1, lr
 8019950:	dd0e      	ble.n	8019970 <D64_GENERIC+0x1d8>
 8019952:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8019954:	2d01      	cmp	r5, #1
 8019956:	f47f af3c 	bne.w	80197d2 <D64_GENERIC+0x3a>
 801995a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 801995c:	06ac      	lsls	r4, r5, #26
 801995e:	e9d9 0100 	ldrd	r0, r1, [r9]
 8019962:	f109 0908 	add.w	r9, r9, #8
 8019966:	f57f af5c 	bpl.w	8019822 <D64_GENERIC+0x8a>
 801996a:	ba40      	rev16	r0, r0
 801996c:	ba49      	rev16	r1, r1
 801996e:	e758      	b.n	8019822 <D64_GENERIC+0x8a>
 8019970:	61d3      	str	r3, [r2, #28]
 8019972:	9b02      	ldr	r3, [sp, #8]
 8019974:	9901      	ldr	r1, [sp, #4]
 8019976:	6113      	str	r3, [r2, #16]
 8019978:	9b03      	ldr	r3, [sp, #12]
 801997a:	6091      	str	r1, [r2, #8]
 801997c:	6153      	str	r3, [r2, #20]
 801997e:	9900      	ldr	r1, [sp, #0]
 8019980:	9b07      	ldr	r3, [sp, #28]
 8019982:	60d1      	str	r1, [r2, #12]
 8019984:	2000      	movs	r0, #0
 8019986:	6193      	str	r3, [r2, #24]
 8019988:	b009      	add	sp, #36	@ 0x24
 801998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801998e:	bf00      	nop
 8019990:	001c0015 	.word	0x001c0015
 8019994:	000f000a 	.word	0x000f000a
 8019998:	00060003 	.word	0x00060003
 801999c:	0024002a 	.word	0x0024002a
 80199a0:	002e0030 	.word	0x002e0030
 80199a4:	00030006 	.word	0x00030006
 80199a8:	000a000f 	.word	0x000a000f
 80199ac:	0015001c 	.word	0x0015001c
 80199b0:	2000018c 	.word	0x2000018c

080199b4 <D80_GENERIC>:
 80199b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b8:	b08b      	sub	sp, #44	@ 0x2c
 80199ba:	6914      	ldr	r4, [r2, #16]
 80199bc:	9405      	str	r4, [sp, #20]
 80199be:	6954      	ldr	r4, [r2, #20]
 80199c0:	9406      	str	r4, [sp, #24]
 80199c2:	6994      	ldr	r4, [r2, #24]
 80199c4:	9409      	str	r4, [sp, #36]	@ 0x24
 80199c6:	6894      	ldr	r4, [r2, #8]
 80199c8:	9402      	str	r4, [sp, #8]
 80199ca:	68d4      	ldr	r4, [r2, #12]
 80199cc:	9401      	str	r4, [sp, #4]
 80199ce:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80199d0:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80199d2:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80199d6:	e9cd 4107 	strd	r4, r1, [sp, #28]
 80199da:	2b00      	cmp	r3, #0
 80199dc:	f000 810a 	beq.w	8019bf4 <D80_GENERIC+0x240>
 80199e0:	2300      	movs	r3, #0
 80199e2:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8019c44 <D80_GENERIC+0x290>
 80199e6:	e9cd b303 	strd	fp, r3, [sp, #12]
 80199ea:	e0ee      	b.n	8019bca <D80_GENERIC+0x216>
 80199ec:	fa5f fe8e 	uxtb.w	lr, lr
 80199f0:	fa0f f48e 	sxth.w	r4, lr
 80199f4:	0066      	lsls	r6, r4, #1
 80199f6:	eb06 0804 	add.w	r8, r6, r4
 80199fa:	f1ce 0500 	rsb	r5, lr, #0
 80199fe:	eb00 0108 	add.w	r1, r0, r8
 8019a02:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8019a06:	194b      	adds	r3, r1, r5
 8019a08:	5d49      	ldrb	r1, [r1, r5]
 8019a0a:	f810 a008 	ldrb.w	sl, [r0, r8]
 8019a0e:	f813 b004 	ldrb.w	fp, [r3, r4]
 8019a12:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8019a16:	f890 8000 	ldrb.w	r8, [r0]
 8019a1a:	eb03 0c04 	add.w	ip, r3, r4
 8019a1e:	eb0c 0705 	add.w	r7, ip, r5
 8019a22:	0409      	lsls	r1, r1, #16
 8019a24:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8019a28:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8019a2c:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8019a30:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8019a34:	eb0a 0004 	add.w	r0, sl, r4
 8019a38:	041b      	lsls	r3, r3, #16
 8019a3a:	f81a a004 	ldrb.w	sl, [sl, r4]
 8019a3e:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8019a42:	5d44      	ldrb	r4, [r0, r5]
 8019a44:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8019a48:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8019a4c:	4428      	add	r0, r5
 8019a4e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8019a52:	4441      	add	r1, r8
 8019a54:	4430      	add	r0, r6
 8019a56:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8019a5a:	441f      	add	r7, r3
 8019a5c:	b2cd      	uxtb	r5, r1
 8019a5e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8019a62:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8019a66:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8019a6a:	9b03      	ldr	r3, [sp, #12]
 8019a6c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8019a70:	0e09      	lsrs	r1, r1, #24
 8019a72:	4433      	add	r3, r6
 8019a74:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8019a78:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8019a7c:	b2fd      	uxtb	r5, r7
 8019a7e:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 8019a82:	469b      	mov	fp, r3
 8019a84:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8019a88:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8019a8c:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8019a90:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8019a94:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8019a98:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8019a9c:	0e3b      	lsrs	r3, r7, #24
 8019a9e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8019aa2:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 8019aa6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019aaa:	fa5f fc84 	uxtb.w	ip, r4
 8019aae:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 8019ab2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019ab6:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8019aba:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8019abe:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8019ac2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8019ac6:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 8019aca:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8019ace:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8019ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019ad6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8019ada:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8019ade:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8019ae2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019ae6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8019aea:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8019aee:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8019af2:	0aa3      	lsrs	r3, r4, #10
 8019af4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8019af8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8019afc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8019b00:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 8019b04:	9303      	str	r3, [sp, #12]
 8019b06:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8019b0a:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 8019b0e:	4b41      	ldr	r3, [pc, #260]	@ (8019c14 <D80_GENERIC+0x260>)
 8019b10:	9901      	ldr	r1, [sp, #4]
 8019b12:	fb2b 1303 	smlad	r3, fp, r3, r1
 8019b16:	4940      	ldr	r1, [pc, #256]	@ (8019c18 <D80_GENERIC+0x264>)
 8019b18:	fb28 3301 	smlad	r3, r8, r1, r3
 8019b1c:	493f      	ldr	r1, [pc, #252]	@ (8019c1c <D80_GENERIC+0x268>)
 8019b1e:	fb2e 3301 	smlad	r3, lr, r1, r3
 8019b22:	493f      	ldr	r1, [pc, #252]	@ (8019c20 <D80_GENERIC+0x26c>)
 8019b24:	fb27 3301 	smlad	r3, r7, r1, r3
 8019b28:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8019b2c:	fb2c 3404 	smlad	r4, ip, r4, r3
 8019b30:	4b3c      	ldr	r3, [pc, #240]	@ (8019c24 <D80_GENERIC+0x270>)
 8019b32:	9902      	ldr	r1, [sp, #8]
 8019b34:	fb2b 1303 	smlad	r3, fp, r3, r1
 8019b38:	493b      	ldr	r1, [pc, #236]	@ (8019c28 <D80_GENERIC+0x274>)
 8019b3a:	fb28 3301 	smlad	r3, r8, r1, r3
 8019b3e:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 8019b42:	fb2e 3101 	smlad	r1, lr, r1, r3
 8019b46:	4b39      	ldr	r3, [pc, #228]	@ (8019c2c <D80_GENERIC+0x278>)
 8019b48:	fb27 1103 	smlad	r1, r7, r3, r1
 8019b4c:	4b38      	ldr	r3, [pc, #224]	@ (8019c30 <D80_GENERIC+0x27c>)
 8019b4e:	fb2c 1303 	smlad	r3, ip, r3, r1
 8019b52:	2101      	movs	r1, #1
 8019b54:	9301      	str	r3, [sp, #4]
 8019b56:	fb2b fb01 	smuad	fp, fp, r1
 8019b5a:	4b36      	ldr	r3, [pc, #216]	@ (8019c34 <D80_GENERIC+0x280>)
 8019b5c:	fb28 b803 	smlad	r8, r8, r3, fp
 8019b60:	4d35      	ldr	r5, [pc, #212]	@ (8019c38 <D80_GENERIC+0x284>)
 8019b62:	fb2e 8e05 	smlad	lr, lr, r5, r8
 8019b66:	4d35      	ldr	r5, [pc, #212]	@ (8019c3c <D80_GENERIC+0x288>)
 8019b68:	fb27 e705 	smlad	r7, r7, r5, lr
 8019b6c:	4b34      	ldr	r3, [pc, #208]	@ (8019c40 <D80_GENERIC+0x28c>)
 8019b6e:	fb2c 7303 	smlad	r3, ip, r3, r7
 8019b72:	6a11      	ldr	r1, [r2, #32]
 8019b74:	9302      	str	r3, [sp, #8]
 8019b76:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 8019b7a:	b181      	cbz	r1, 8019b9e <D80_GENERIC+0x1ea>
 8019b7c:	9c05      	ldr	r4, [sp, #20]
 8019b7e:	9d06      	ldr	r5, [sp, #24]
 8019b80:	441c      	add	r4, r3
 8019b82:	1b64      	subs	r4, r4, r5
 8019b84:	fba4 ab01 	umull	sl, fp, r4, r1
 8019b88:	17e7      	asrs	r7, r4, #31
 8019b8a:	fb01 bb07 	mla	fp, r1, r7, fp
 8019b8e:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 8019b92:	f14b 0500 	adc.w	r5, fp, #0
 8019b96:	0069      	lsls	r1, r5, #1
 8019b98:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8019b9c:	460b      	mov	r3, r1
 8019b9e:	9e04      	ldr	r6, [sp, #16]
 8019ba0:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8019ba2:	9f07      	ldr	r7, [sp, #28]
 8019ba4:	025b      	lsls	r3, r3, #9
 8019ba6:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8019baa:	2500      	movs	r5, #0
 8019bac:	fb06 f101 	mul.w	r1, r6, r1
 8019bb0:	fbc7 4503 	smlal	r4, r5, r7, r3
 8019bb4:	9c08      	ldr	r4, [sp, #32]
 8019bb6:	10ab      	asrs	r3, r5, #2
 8019bb8:	f303 030f 	ssat	r3, #16, r3
 8019bbc:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8019bc0:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8019bc2:	1c71      	adds	r1, r6, #1
 8019bc4:	428b      	cmp	r3, r1
 8019bc6:	9104      	str	r1, [sp, #16]
 8019bc8:	dd12      	ble.n	8019bf0 <D80_GENERIC+0x23c>
 8019bca:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8019bce:	f1be 0f01 	cmp.w	lr, #1
 8019bd2:	f47f af0b 	bne.w	80199ec <D80_GENERIC+0x38>
 8019bd6:	6801      	ldr	r1, [r0, #0]
 8019bd8:	6847      	ldr	r7, [r0, #4]
 8019bda:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8019bdc:	6884      	ldr	r4, [r0, #8]
 8019bde:	069b      	lsls	r3, r3, #26
 8019be0:	f100 000a 	add.w	r0, r0, #10
 8019be4:	f57f af3a 	bpl.w	8019a5c <D80_GENERIC+0xa8>
 8019be8:	ba49      	rev16	r1, r1
 8019bea:	ba7f      	rev16	r7, r7
 8019bec:	ba64      	rev16	r4, r4
 8019bee:	e735      	b.n	8019a5c <D80_GENERIC+0xa8>
 8019bf0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8019bf4:	9b02      	ldr	r3, [sp, #8]
 8019bf6:	6093      	str	r3, [r2, #8]
 8019bf8:	9b01      	ldr	r3, [sp, #4]
 8019bfa:	60d3      	str	r3, [r2, #12]
 8019bfc:	9b05      	ldr	r3, [sp, #20]
 8019bfe:	6113      	str	r3, [r2, #16]
 8019c00:	9b06      	ldr	r3, [sp, #24]
 8019c02:	6153      	str	r3, [r2, #20]
 8019c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c06:	f8c2 b01c 	str.w	fp, [r2, #28]
 8019c0a:	2000      	movs	r0, #0
 8019c0c:	6193      	str	r3, [r2, #24]
 8019c0e:	b00b      	add	sp, #44	@ 0x2c
 8019c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c14:	002d0024 	.word	0x002d0024
 8019c18:	001c0015 	.word	0x001c0015
 8019c1c:	000f000a 	.word	0x000f000a
 8019c20:	00060003 	.word	0x00060003
 8019c24:	0037003f 	.word	0x0037003f
 8019c28:	00450049 	.word	0x00450049
 8019c2c:	00490045 	.word	0x00490045
 8019c30:	003f0037 	.word	0x003f0037
 8019c34:	00030006 	.word	0x00030006
 8019c38:	000a000f 	.word	0x000a000f
 8019c3c:	0015001c 	.word	0x0015001c
 8019c40:	0024002d 	.word	0x0024002d
 8019c44:	2000018c 	.word	0x2000018c

08019c48 <D128_GENERIC>:
 8019c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c4c:	b091      	sub	sp, #68	@ 0x44
 8019c4e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8019c50:	9004      	str	r0, [sp, #16]
 8019c52:	6910      	ldr	r0, [r2, #16]
 8019c54:	900a      	str	r0, [sp, #40]	@ 0x28
 8019c56:	6950      	ldr	r0, [r2, #20]
 8019c58:	900b      	str	r0, [sp, #44]	@ 0x2c
 8019c5a:	6990      	ldr	r0, [r2, #24]
 8019c5c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8019c5e:	69d0      	ldr	r0, [r2, #28]
 8019c60:	9002      	str	r0, [sp, #8]
 8019c62:	6890      	ldr	r0, [r2, #8]
 8019c64:	9003      	str	r0, [sp, #12]
 8019c66:	68d0      	ldr	r0, [r2, #12]
 8019c68:	9001      	str	r0, [sp, #4]
 8019c6a:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8019c6c:	9200      	str	r2, [sp, #0]
 8019c6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	f000 8196 	beq.w	8019fa4 <D128_GENERIC+0x35c>
 8019c78:	2300      	movs	r3, #0
 8019c7a:	6a12      	ldr	r2, [r2, #32]
 8019c7c:	920e      	str	r2, [sp, #56]	@ 0x38
 8019c7e:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 801a020 <D128_GENERIC+0x3d8>
 8019c82:	9305      	str	r3, [sp, #20]
 8019c84:	e177      	b.n	8019f76 <D128_GENERIC+0x32e>
 8019c86:	b2d2      	uxtb	r2, r2
 8019c88:	9d04      	ldr	r5, [sp, #16]
 8019c8a:	b214      	sxth	r4, r2
 8019c8c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8019c90:	4250      	negs	r0, r2
 8019c92:	eb05 010a 	add.w	r1, r5, sl
 8019c96:	00a6      	lsls	r6, r4, #2
 8019c98:	eb01 0800 	add.w	r8, r1, r0
 8019c9c:	eb06 0e04 	add.w	lr, r6, r4
 8019ca0:	eb08 070e 	add.w	r7, r8, lr
 8019ca4:	183b      	adds	r3, r7, r0
 8019ca6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8019caa:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8019cae:	9608      	str	r6, [sp, #32]
 8019cb0:	eb0c 0604 	add.w	r6, ip, r4
 8019cb4:	9304      	str	r3, [sp, #16]
 8019cb6:	1833      	adds	r3, r6, r0
 8019cb8:	f815 b00a 	ldrb.w	fp, [r5, sl]
 8019cbc:	9306      	str	r3, [sp, #24]
 8019cbe:	f818 a00e 	ldrb.w	sl, [r8, lr]
 8019cc2:	9b04      	ldr	r3, [sp, #16]
 8019cc4:	f815 e002 	ldrb.w	lr, [r5, r2]
 8019cc8:	782d      	ldrb	r5, [r5, #0]
 8019cca:	5c3a      	ldrb	r2, [r7, r0]
 8019ccc:	9507      	str	r5, [sp, #28]
 8019cce:	9d06      	ldr	r5, [sp, #24]
 8019cd0:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8019cd4:	f81c 8004 	ldrb.w	r8, [ip, r4]
 8019cd8:	9304      	str	r3, [sp, #16]
 8019cda:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8019cde:	5c33      	ldrb	r3, [r6, r0]
 8019ce0:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8019ce4:	5c09      	ldrb	r1, [r1, r0]
 8019ce6:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8019cea:	0412      	lsls	r2, r2, #16
 8019cec:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8019cf0:	eb06 0a04 	add.w	sl, r6, r4
 8019cf4:	5d36      	ldrb	r6, [r6, r4]
 8019cf6:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 8019cfa:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8019cfe:	042d      	lsls	r5, r5, #16
 8019d00:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8019d04:	0409      	lsls	r1, r1, #16
 8019d06:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8019d0a:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8019d0e:	041b      	lsls	r3, r3, #16
 8019d10:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8019d14:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8019d18:	eb0a 0e00 	add.w	lr, sl, r0
 8019d1c:	9d07      	ldr	r5, [sp, #28]
 8019d1e:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 8019d22:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8019d26:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8019d2a:	9f08      	ldr	r7, [sp, #32]
 8019d2c:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8019d30:	4429      	add	r1, r5
 8019d32:	9d04      	ldr	r5, [sp, #16]
 8019d34:	4438      	add	r0, r7
 8019d36:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8019d3a:	9004      	str	r0, [sp, #16]
 8019d3c:	442a      	add	r2, r5
 8019d3e:	eb06 0a0b 	add.w	sl, r6, fp
 8019d42:	1918      	adds	r0, r3, r4
 8019d44:	b2cb      	uxtb	r3, r1
 8019d46:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8019d4a:	9e02      	ldr	r6, [sp, #8]
 8019d4c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019d50:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8019d54:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8019d58:	441e      	add	r6, r3
 8019d5a:	0e09      	lsrs	r1, r1, #24
 8019d5c:	4633      	mov	r3, r6
 8019d5e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8019d62:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8019d66:	b2d4      	uxtb	r4, r2
 8019d68:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8019d6c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8019d70:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8019d74:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8019d78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019d7c:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8019d80:	0e12      	lsrs	r2, r2, #24
 8019d82:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8019d86:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8019d8a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8019d8e:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8019d92:	9702      	str	r7, [sp, #8]
 8019d94:	b2c2      	uxtb	r2, r0
 8019d96:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8019d9a:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 8019d9e:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8019da2:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8019da6:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8019daa:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 8019dae:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8019db2:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8019db6:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8019dba:	0e00      	lsrs	r0, r0, #24
 8019dbc:	fa5f f68a 	uxtb.w	r6, sl
 8019dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019dc4:	9308      	str	r3, [sp, #32]
 8019dc6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8019dca:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8019dce:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8019dd2:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8019dd6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019dda:	9509      	str	r5, [sp, #36]	@ 0x24
 8019ddc:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8019de0:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8019de4:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8019de8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019dec:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8019df0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8019df4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8019df8:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8019dfc:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8019e00:	9306      	str	r3, [sp, #24]
 8019e02:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8019e06:	9b02      	ldr	r3, [sp, #8]
 8019e08:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8019e0c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8019e10:	f8cd a01c 	str.w	sl, [sp, #28]
 8019e14:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8019e18:	9b06      	ldr	r3, [sp, #24]
 8019e1a:	9506      	str	r5, [sp, #24]
 8019e1c:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8019e1e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8019e22:	f8cd e008 	str.w	lr, [sp, #8]
 8019e26:	46ae      	mov	lr, r5
 8019e28:	9d08      	ldr	r5, [sp, #32]
 8019e2a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8019e2e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8019e32:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8019e36:	9d02      	ldr	r5, [sp, #8]
 8019e38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8019e3c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8019e40:	9f07      	ldr	r7, [sp, #28]
 8019e42:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8019e46:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8019e4a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8019e4e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8019e52:	9d06      	ldr	r5, [sp, #24]
 8019e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019e58:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8019e5c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8019e60:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8019e64:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019e68:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 8019e6c:	0abe      	lsrs	r6, r7, #10
 8019e6e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8019e72:	9602      	str	r6, [sp, #8]
 8019e74:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8019e78:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8019e7c:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 8019e80:	4e52      	ldr	r6, [pc, #328]	@ (8019fcc <D128_GENERIC+0x384>)
 8019e82:	9f01      	ldr	r7, [sp, #4]
 8019e84:	fb2e 7606 	smlad	r6, lr, r6, r7
 8019e88:	4f51      	ldr	r7, [pc, #324]	@ (8019fd0 <D128_GENERIC+0x388>)
 8019e8a:	fb2a 6607 	smlad	r6, sl, r7, r6
 8019e8e:	4f51      	ldr	r7, [pc, #324]	@ (8019fd4 <D128_GENERIC+0x38c>)
 8019e90:	fb21 6607 	smlad	r6, r1, r7, r6
 8019e94:	4f50      	ldr	r7, [pc, #320]	@ (8019fd8 <D128_GENERIC+0x390>)
 8019e96:	fb24 6607 	smlad	r6, r4, r7, r6
 8019e9a:	4f50      	ldr	r7, [pc, #320]	@ (8019fdc <D128_GENERIC+0x394>)
 8019e9c:	fb22 6607 	smlad	r6, r2, r7, r6
 8019ea0:	4f4f      	ldr	r7, [pc, #316]	@ (8019fe0 <D128_GENERIC+0x398>)
 8019ea2:	fb20 6607 	smlad	r6, r0, r7, r6
 8019ea6:	4f4f      	ldr	r7, [pc, #316]	@ (8019fe4 <D128_GENERIC+0x39c>)
 8019ea8:	fb23 6607 	smlad	r6, r3, r7, r6
 8019eac:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8019eb0:	fb25 6807 	smlad	r8, r5, r7, r6
 8019eb4:	4f4c      	ldr	r7, [pc, #304]	@ (8019fe8 <D128_GENERIC+0x3a0>)
 8019eb6:	9e03      	ldr	r6, [sp, #12]
 8019eb8:	fb2e 6c07 	smlad	ip, lr, r7, r6
 8019ebc:	4e4b      	ldr	r6, [pc, #300]	@ (8019fec <D128_GENERIC+0x3a4>)
 8019ebe:	fb2a cc06 	smlad	ip, sl, r6, ip
 8019ec2:	4f4b      	ldr	r7, [pc, #300]	@ (8019ff0 <D128_GENERIC+0x3a8>)
 8019ec4:	fb21 cc07 	smlad	ip, r1, r7, ip
 8019ec8:	4f4a      	ldr	r7, [pc, #296]	@ (8019ff4 <D128_GENERIC+0x3ac>)
 8019eca:	fb24 cc07 	smlad	ip, r4, r7, ip
 8019ece:	4f4a      	ldr	r7, [pc, #296]	@ (8019ff8 <D128_GENERIC+0x3b0>)
 8019ed0:	fb22 cc07 	smlad	ip, r2, r7, ip
 8019ed4:	4f49      	ldr	r7, [pc, #292]	@ (8019ffc <D128_GENERIC+0x3b4>)
 8019ed6:	fb20 cc07 	smlad	ip, r0, r7, ip
 8019eda:	4f49      	ldr	r7, [pc, #292]	@ (801a000 <D128_GENERIC+0x3b8>)
 8019edc:	fb23 c707 	smlad	r7, r3, r7, ip
 8019ee0:	f8df c140 	ldr.w	ip, [pc, #320]	@ 801a024 <D128_GENERIC+0x3dc>
 8019ee4:	fb25 760c 	smlad	r6, r5, ip, r7
 8019ee8:	f04f 0b01 	mov.w	fp, #1
 8019eec:	9601      	str	r6, [sp, #4]
 8019eee:	fb2e fb0b 	smuad	fp, lr, fp
 8019ef2:	4f44      	ldr	r7, [pc, #272]	@ (801a004 <D128_GENERIC+0x3bc>)
 8019ef4:	fb2a ba07 	smlad	sl, sl, r7, fp
 8019ef8:	4f43      	ldr	r7, [pc, #268]	@ (801a008 <D128_GENERIC+0x3c0>)
 8019efa:	fb21 aa07 	smlad	sl, r1, r7, sl
 8019efe:	4f43      	ldr	r7, [pc, #268]	@ (801a00c <D128_GENERIC+0x3c4>)
 8019f00:	fb24 aa07 	smlad	sl, r4, r7, sl
 8019f04:	4f42      	ldr	r7, [pc, #264]	@ (801a010 <D128_GENERIC+0x3c8>)
 8019f06:	fb22 a707 	smlad	r7, r2, r7, sl
 8019f0a:	4a42      	ldr	r2, [pc, #264]	@ (801a014 <D128_GENERIC+0x3cc>)
 8019f0c:	fb20 7702 	smlad	r7, r0, r2, r7
 8019f10:	4a41      	ldr	r2, [pc, #260]	@ (801a018 <D128_GENERIC+0x3d0>)
 8019f12:	fb23 7702 	smlad	r7, r3, r2, r7
 8019f16:	4b41      	ldr	r3, [pc, #260]	@ (801a01c <D128_GENERIC+0x3d4>)
 8019f18:	fb25 7303 	smlad	r3, r5, r3, r7
 8019f1c:	9303      	str	r3, [sp, #12]
 8019f1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f20:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 8019f24:	b183      	cbz	r3, 8019f48 <D128_GENERIC+0x300>
 8019f26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019f28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019f2a:	4432      	add	r2, r6
 8019f2c:	1a52      	subs	r2, r2, r1
 8019f2e:	fba2 4503 	umull	r4, r5, r2, r3
 8019f32:	17d1      	asrs	r1, r2, #31
 8019f34:	fb03 5501 	mla	r5, r3, r1, r5
 8019f38:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 8019f3c:	f145 0300 	adc.w	r3, r5, #0
 8019f40:	005b      	lsls	r3, r3, #1
 8019f42:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 8019f46:	461e      	mov	r6, r3
 8019f48:	9800      	ldr	r0, [sp, #0]
 8019f4a:	9c05      	ldr	r4, [sp, #20]
 8019f4c:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8019f4e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019f50:	01f6      	lsls	r6, r6, #7
 8019f52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8019f56:	2300      	movs	r3, #0
 8019f58:	fbc5 2306 	smlal	r2, r3, r5, r6
 8019f5c:	fb04 f101 	mul.w	r1, r4, r1
 8019f60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019f62:	109b      	asrs	r3, r3, #2
 8019f64:	f303 030f 	ssat	r3, #16, r3
 8019f68:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8019f6c:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8019f6e:	1c62      	adds	r2, r4, #1
 8019f70:	4293      	cmp	r3, r2
 8019f72:	9205      	str	r2, [sp, #20]
 8019f74:	dd16      	ble.n	8019fa4 <D128_GENERIC+0x35c>
 8019f76:	9b00      	ldr	r3, [sp, #0]
 8019f78:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8019f7a:	2a01      	cmp	r2, #1
 8019f7c:	f47f ae83 	bne.w	8019c86 <D128_GENERIC+0x3e>
 8019f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f82:	9c04      	ldr	r4, [sp, #16]
 8019f84:	069b      	lsls	r3, r3, #26
 8019f86:	e9d4 1200 	ldrd	r1, r2, [r4]
 8019f8a:	68a0      	ldr	r0, [r4, #8]
 8019f8c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8019f90:	f104 0410 	add.w	r4, r4, #16
 8019f94:	d517      	bpl.n	8019fc6 <D128_GENERIC+0x37e>
 8019f96:	ba49      	rev16	r1, r1
 8019f98:	ba52      	rev16	r2, r2
 8019f9a:	ba40      	rev16	r0, r0
 8019f9c:	fa9a fa9a 	rev16.w	sl, sl
 8019fa0:	9404      	str	r4, [sp, #16]
 8019fa2:	e6cf      	b.n	8019d44 <D128_GENERIC+0xfc>
 8019fa4:	9b00      	ldr	r3, [sp, #0]
 8019fa6:	9903      	ldr	r1, [sp, #12]
 8019fa8:	6099      	str	r1, [r3, #8]
 8019faa:	9901      	ldr	r1, [sp, #4]
 8019fac:	60d9      	str	r1, [r3, #12]
 8019fae:	9902      	ldr	r1, [sp, #8]
 8019fb0:	61d9      	str	r1, [r3, #28]
 8019fb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019fb4:	6119      	str	r1, [r3, #16]
 8019fb6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019fb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019fba:	6159      	str	r1, [r3, #20]
 8019fbc:	2000      	movs	r0, #0
 8019fbe:	619a      	str	r2, [r3, #24]
 8019fc0:	b011      	add	sp, #68	@ 0x44
 8019fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fc6:	9404      	str	r4, [sp, #16]
 8019fc8:	e6bc      	b.n	8019d44 <D128_GENERIC+0xfc>
 8019fca:	bf00      	nop
 8019fcc:	00780069 	.word	0x00780069
 8019fd0:	005b004e 	.word	0x005b004e
 8019fd4:	00420037 	.word	0x00420037
 8019fd8:	002d0024 	.word	0x002d0024
 8019fdc:	001c0015 	.word	0x001c0015
 8019fe0:	000f000a 	.word	0x000f000a
 8019fe4:	00060003 	.word	0x00060003
 8019fe8:	00880096 	.word	0x00880096
 8019fec:	00a200ac 	.word	0x00a200ac
 8019ff0:	00b400ba 	.word	0x00b400ba
 8019ff4:	00be00c0 	.word	0x00be00c0
 8019ff8:	00c000be 	.word	0x00c000be
 8019ffc:	00ba00b4 	.word	0x00ba00b4
 801a000:	00ac00a2 	.word	0x00ac00a2
 801a004:	00030006 	.word	0x00030006
 801a008:	000a000f 	.word	0x000a000f
 801a00c:	0015001c 	.word	0x0015001c
 801a010:	0024002d 	.word	0x0024002d
 801a014:	00370042 	.word	0x00370042
 801a018:	004e005b 	.word	0x004e005b
 801a01c:	00690078 	.word	0x00690078
 801a020:	2000018c 	.word	0x2000018c
 801a024:	00960088 	.word	0x00960088

0801a028 <D16_1CH_HTONS_VOL_HP>:
 801a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a02c:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 801a030:	b085      	sub	sp, #20
 801a032:	4681      	mov	r9, r0
 801a034:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 801a036:	6993      	ldr	r3, [r2, #24]
 801a038:	9303      	str	r3, [sp, #12]
 801a03a:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 801a03e:	69d3      	ldr	r3, [r2, #28]
 801a040:	9402      	str	r4, [sp, #8]
 801a042:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 801a046:	f8d2 c020 	ldr.w	ip, [r2, #32]
 801a04a:	2800      	cmp	r0, #0
 801a04c:	d057      	beq.n	801a0fe <D16_1CH_HTONS_VOL_HP+0xd6>
 801a04e:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 801a052:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 801a10c <D16_1CH_HTONS_VOL_HP+0xe4>
 801a056:	f1a1 0802 	sub.w	r8, r1, #2
 801a05a:	4639      	mov	r1, r7
 801a05c:	465f      	mov	r7, fp
 801a05e:	46d3      	mov	fp, sl
 801a060:	46ca      	mov	sl, r9
 801a062:	4699      	mov	r9, r3
 801a064:	4633      	mov	r3, r6
 801a066:	4616      	mov	r6, r2
 801a068:	f85a 2b02 	ldr.w	r2, [sl], #2
 801a06c:	ba52      	rev16	r2, r2
 801a06e:	b2d4      	uxtb	r4, r2
 801a070:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801a074:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 801a078:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 801a07c:	4491      	add	r9, r2
 801a07e:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 801a082:	f3c0 0209 	ubfx	r2, r0, #0, #10
 801a086:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801a08a:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 801a08e:	ea4f 2990 	mov.w	r9, r0, lsr #10
 801a092:	481c      	ldr	r0, [pc, #112]	@ (801a104 <D16_1CH_HTONS_VOL_HP+0xdc>)
 801a094:	fb22 5400 	smlad	r4, r2, r0, r5
 801a098:	481b      	ldr	r0, [pc, #108]	@ (801a108 <D16_1CH_HTONS_VOL_HP+0xe0>)
 801a09a:	fb22 f500 	smuad	r5, r2, r0
 801a09e:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 801a0a2:	18e2      	adds	r2, r4, r3
 801a0a4:	1a52      	subs	r2, r2, r1
 801a0a6:	17d1      	asrs	r1, r2, #31
 801a0a8:	fba2 230c 	umull	r2, r3, r2, ip
 801a0ac:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 801a0b0:	fb0c 3301 	mla	r3, ip, r1, r3
 801a0b4:	f143 0100 	adc.w	r1, r3, #0
 801a0b8:	e9cd 0100 	strd	r0, r1, [sp]
 801a0bc:	044a      	lsls	r2, r1, #17
 801a0be:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801a0c2:	2100      	movs	r1, #0
 801a0c4:	9b01      	ldr	r3, [sp, #4]
 801a0c6:	fbcb 0102 	smlal	r0, r1, fp, r2
 801a0ca:	45ba      	cmp	sl, r7
 801a0cc:	ea4f 02a1 	mov.w	r2, r1, asr #2
 801a0d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a0d4:	f302 020f 	ssat	r2, #16, r2
 801a0d8:	4621      	mov	r1, r4
 801a0da:	f828 2f02 	strh.w	r2, [r8, #2]!
 801a0de:	d1c3      	bne.n	801a068 <D16_1CH_HTONS_VOL_HP+0x40>
 801a0e0:	4632      	mov	r2, r6
 801a0e2:	461e      	mov	r6, r3
 801a0e4:	464b      	mov	r3, r9
 801a0e6:	9902      	ldr	r1, [sp, #8]
 801a0e8:	61d3      	str	r3, [r2, #28]
 801a0ea:	9b03      	ldr	r3, [sp, #12]
 801a0ec:	6095      	str	r5, [r2, #8]
 801a0ee:	2000      	movs	r0, #0
 801a0f0:	60d1      	str	r1, [r2, #12]
 801a0f2:	e9c2 6404 	strd	r6, r4, [r2, #16]
 801a0f6:	6193      	str	r3, [r2, #24]
 801a0f8:	b005      	add	sp, #20
 801a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0fe:	463c      	mov	r4, r7
 801a100:	e7f1      	b.n	801a0e6 <D16_1CH_HTONS_VOL_HP+0xbe>
 801a102:	bf00      	nop
 801a104:	00030001 	.word	0x00030001
 801a108:	00010003 	.word	0x00010003
 801a10c:	2000018c 	.word	0x2000018c

0801a110 <D24_1CH_HTONS_VOL_HP>:
 801a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a114:	4696      	mov	lr, r2
 801a116:	b089      	sub	sp, #36	@ 0x24
 801a118:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 801a11c:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 801a11e:	f8de 3018 	ldr.w	r3, [lr, #24]
 801a122:	9703      	str	r7, [sp, #12]
 801a124:	f8de 7020 	ldr.w	r7, [lr, #32]
 801a128:	9306      	str	r3, [sp, #24]
 801a12a:	9205      	str	r2, [sp, #20]
 801a12c:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 801a130:	f8de 601c 	ldr.w	r6, [lr, #28]
 801a134:	9704      	str	r7, [sp, #16]
 801a136:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 801a13a:	2a00      	cmp	r2, #0
 801a13c:	f000 8081 	beq.w	801a242 <D24_1CH_HTONS_VOL_HP+0x132>
 801a140:	f1a1 0b02 	sub.w	fp, r1, #2
 801a144:	2700      	movs	r7, #0
 801a146:	46d9      	mov	r9, fp
 801a148:	f8cd e01c 	str.w	lr, [sp, #28]
 801a14c:	46d3      	mov	fp, sl
 801a14e:	f8df c100 	ldr.w	ip, [pc, #256]	@ 801a250 <D24_1CH_HTONS_VOL_HP+0x140>
 801a152:	46a8      	mov	r8, r5
 801a154:	46ba      	mov	sl, r7
 801a156:	469e      	mov	lr, r3
 801a158:	e052      	b.n	801a200 <D24_1CH_HTONS_VOL_HP+0xf0>
 801a15a:	7842      	ldrb	r2, [r0, #1]
 801a15c:	3002      	adds	r0, #2
 801a15e:	4413      	add	r3, r2
 801a160:	b2d9      	uxtb	r1, r3
 801a162:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801a166:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 801a16a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 801a16e:	0c1b      	lsrs	r3, r3, #16
 801a170:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 801a174:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 801a178:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 801a17c:	f3c7 0309 	ubfx	r3, r7, #0, #10
 801a180:	f3c2 0709 	ubfx	r7, r2, #0, #10
 801a184:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 801a188:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 801a18c:	4a2e      	ldr	r2, [pc, #184]	@ (801a248 <D24_1CH_HTONS_VOL_HP+0x138>)
 801a18e:	fb23 b102 	smlad	r1, r3, r2, fp
 801a192:	4a2e      	ldr	r2, [pc, #184]	@ (801a24c <D24_1CH_HTONS_VOL_HP+0x13c>)
 801a194:	fb23 eb02 	smlad	fp, r3, r2, lr
 801a198:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 801a19c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801a1a0:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 801a1a4:	2201      	movs	r2, #1
 801a1a6:	fb23 f702 	smuad	r7, r3, r2
 801a1aa:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 801a1ae:	eb01 0208 	add.w	r2, r1, r8
 801a1b2:	1b12      	subs	r2, r2, r4
 801a1b4:	17d4      	asrs	r4, r2, #31
 801a1b6:	4613      	mov	r3, r2
 801a1b8:	e9cd 3400 	strd	r3, r4, [sp]
 801a1bc:	9c04      	ldr	r4, [sp, #16]
 801a1be:	9d01      	ldr	r5, [sp, #4]
 801a1c0:	fba2 2304 	umull	r2, r3, r2, r4
 801a1c4:	fb04 3305 	mla	r3, r4, r5, r3
 801a1c8:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 801a1cc:	f143 0500 	adc.w	r5, r3, #0
 801a1d0:	9b03      	ldr	r3, [sp, #12]
 801a1d2:	e9cd 4500 	strd	r4, r5, [sp]
 801a1d6:	03ea      	lsls	r2, r5, #15
 801a1d8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 801a1dc:	2500      	movs	r5, #0
 801a1de:	fbc3 4502 	smlal	r4, r5, r3, r2
 801a1e2:	9b01      	ldr	r3, [sp, #4]
 801a1e4:	ea4f 0843 	mov.w	r8, r3, lsl #1
 801a1e8:	10ab      	asrs	r3, r5, #2
 801a1ea:	f303 030f 	ssat	r3, #16, r3
 801a1ee:	f829 3f02 	strh.w	r3, [r9, #2]!
 801a1f2:	9b05      	ldr	r3, [sp, #20]
 801a1f4:	f10a 0a01 	add.w	sl, sl, #1
 801a1f8:	459a      	cmp	sl, r3
 801a1fa:	44be      	add	lr, r7
 801a1fc:	460c      	mov	r4, r1
 801a1fe:	d00e      	beq.n	801a21e <D24_1CH_HTONS_VOL_HP+0x10e>
 801a200:	7801      	ldrb	r1, [r0, #0]
 801a202:	78c2      	ldrb	r2, [r0, #3]
 801a204:	020b      	lsls	r3, r1, #8
 801a206:	f01a 0f01 	tst.w	sl, #1
 801a20a:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 801a20e:	d0a4      	beq.n	801a15a <D24_1CH_HTONS_VOL_HP+0x4a>
 801a210:	7885      	ldrb	r5, [r0, #2]
 801a212:	0212      	lsls	r2, r2, #8
 801a214:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 801a218:	440b      	add	r3, r1
 801a21a:	3004      	adds	r0, #4
 801a21c:	e7a0      	b.n	801a160 <D24_1CH_HTONS_VOL_HP+0x50>
 801a21e:	4673      	mov	r3, lr
 801a220:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801a224:	46da      	mov	sl, fp
 801a226:	4645      	mov	r5, r8
 801a228:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 801a22c:	9b06      	ldr	r3, [sp, #24]
 801a22e:	f8ce 601c 	str.w	r6, [lr, #28]
 801a232:	2000      	movs	r0, #0
 801a234:	e9ce 5104 	strd	r5, r1, [lr, #16]
 801a238:	f8ce 3018 	str.w	r3, [lr, #24]
 801a23c:	b009      	add	sp, #36	@ 0x24
 801a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a242:	4621      	mov	r1, r4
 801a244:	e7f0      	b.n	801a228 <D24_1CH_HTONS_VOL_HP+0x118>
 801a246:	bf00      	nop
 801a248:	00030001 	.word	0x00030001
 801a24c:	00060007 	.word	0x00060007
 801a250:	2000018c 	.word	0x2000018c

0801a254 <D32_1CH_HTONS_VOL_HP>:
 801a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a258:	4682      	mov	sl, r0
 801a25a:	b087      	sub	sp, #28
 801a25c:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 801a25e:	6993      	ldr	r3, [r2, #24]
 801a260:	9304      	str	r3, [sp, #16]
 801a262:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 801a266:	69d5      	ldr	r5, [r2, #28]
 801a268:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 801a26a:	f8d2 9020 	ldr.w	r9, [r2, #32]
 801a26e:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 801a272:	2800      	cmp	r0, #0
 801a274:	d070      	beq.n	801a358 <D32_1CH_HTONS_VOL_HP+0x104>
 801a276:	468e      	mov	lr, r1
 801a278:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 801a36c <D32_1CH_HTONS_VOL_HP+0x118>
 801a27c:	9205      	str	r2, [sp, #20]
 801a27e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801a282:	46d3      	mov	fp, sl
 801a284:	4638      	mov	r0, r7
 801a286:	46ca      	mov	sl, r9
 801a288:	9103      	str	r1, [sp, #12]
 801a28a:	4627      	mov	r7, r4
 801a28c:	4699      	mov	r9, r3
 801a28e:	f85b 1b04 	ldr.w	r1, [fp], #4
 801a292:	ba49      	rev16	r1, r1
 801a294:	b2ca      	uxtb	r2, r1
 801a296:	f3c1 2307 	ubfx	r3, r1, #8, #8
 801a29a:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 801a29e:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801a2a2:	f3c1 4407 	ubfx	r4, r1, #16, #8
 801a2a6:	0e09      	lsrs	r1, r1, #24
 801a2a8:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 801a2ac:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 801a2b0:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 801a2b4:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 801a2b8:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 801a2bc:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 801a2c0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a2c4:	f3c5 0109 	ubfx	r1, r5, #0, #10
 801a2c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a2cc:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801a2d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a2d4:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 801a2d8:	4a20      	ldr	r2, [pc, #128]	@ (801a35c <D32_1CH_HTONS_VOL_HP+0x108>)
 801a2da:	fb23 8802 	smlad	r8, r3, r2, r8
 801a2de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801a2e2:	fb24 8102 	smlad	r1, r4, r2, r8
 801a2e6:	4a1e      	ldr	r2, [pc, #120]	@ (801a360 <D32_1CH_HTONS_VOL_HP+0x10c>)
 801a2e8:	fb23 9802 	smlad	r8, r3, r2, r9
 801a2ec:	4a1d      	ldr	r2, [pc, #116]	@ (801a364 <D32_1CH_HTONS_VOL_HP+0x110>)
 801a2ee:	fb24 8802 	smlad	r8, r4, r2, r8
 801a2f2:	2201      	movs	r2, #1
 801a2f4:	fb23 f302 	smuad	r3, r3, r2
 801a2f8:	4a1b      	ldr	r2, [pc, #108]	@ (801a368 <D32_1CH_HTONS_VOL_HP+0x114>)
 801a2fa:	fb24 3902 	smlad	r9, r4, r2, r3
 801a2fe:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 801a302:	19a2      	adds	r2, r4, r6
 801a304:	1a12      	subs	r2, r2, r0
 801a306:	17d1      	asrs	r1, r2, #31
 801a308:	fba2 230a 	umull	r2, r3, r2, sl
 801a30c:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 801a310:	fb0a 3301 	mla	r3, sl, r1, r3
 801a314:	f143 0100 	adc.w	r1, r3, #0
 801a318:	e9cd 0100 	strd	r0, r1, [sp]
 801a31c:	038a      	lsls	r2, r1, #14
 801a31e:	9b01      	ldr	r3, [sp, #4]
 801a320:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801a324:	2100      	movs	r1, #0
 801a326:	fbc7 0102 	smlal	r0, r1, r7, r2
 801a32a:	108a      	asrs	r2, r1, #2
 801a32c:	005e      	lsls	r6, r3, #1
 801a32e:	f302 020f 	ssat	r2, #16, r2
 801a332:	9b03      	ldr	r3, [sp, #12]
 801a334:	f82e 2b02 	strh.w	r2, [lr], #2
 801a338:	459e      	cmp	lr, r3
 801a33a:	4620      	mov	r0, r4
 801a33c:	d1a7      	bne.n	801a28e <D32_1CH_HTONS_VOL_HP+0x3a>
 801a33e:	9a05      	ldr	r2, [sp, #20]
 801a340:	464b      	mov	r3, r9
 801a342:	e9c2 3802 	strd	r3, r8, [r2, #8]
 801a346:	9b04      	ldr	r3, [sp, #16]
 801a348:	61d5      	str	r5, [r2, #28]
 801a34a:	2000      	movs	r0, #0
 801a34c:	e9c2 6404 	strd	r6, r4, [r2, #16]
 801a350:	6193      	str	r3, [r2, #24]
 801a352:	b007      	add	sp, #28
 801a354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a358:	463c      	mov	r4, r7
 801a35a:	e7f2      	b.n	801a342 <D32_1CH_HTONS_VOL_HP+0xee>
 801a35c:	00060003 	.word	0x00060003
 801a360:	000a000c 	.word	0x000a000c
 801a364:	000c000a 	.word	0x000c000a
 801a368:	00030006 	.word	0x00030006
 801a36c:	2000018c 	.word	0x2000018c

0801a370 <D48_1CH_HTONS_VOL_HP>:
 801a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a374:	b087      	sub	sp, #28
 801a376:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 801a378:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 801a37a:	6993      	ldr	r3, [r2, #24]
 801a37c:	9702      	str	r7, [sp, #8]
 801a37e:	6a17      	ldr	r7, [r2, #32]
 801a380:	9304      	str	r3, [sp, #16]
 801a382:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 801a386:	69d6      	ldr	r6, [r2, #28]
 801a388:	9705      	str	r7, [sp, #20]
 801a38a:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 801a38e:	2d00      	cmp	r5, #0
 801a390:	f000 8093 	beq.w	801a4ba <D48_1CH_HTONS_VOL_HP+0x14a>
 801a394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a398:	46ba      	mov	sl, r7
 801a39a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a39e:	3902      	subs	r1, #2
 801a3a0:	4f47      	ldr	r7, [pc, #284]	@ (801a4c0 <D48_1CH_HTONS_VOL_HP+0x150>)
 801a3a2:	9503      	str	r5, [sp, #12]
 801a3a4:	9101      	str	r1, [sp, #4]
 801a3a6:	469e      	mov	lr, r3
 801a3a8:	9205      	str	r2, [sp, #20]
 801a3aa:	e9d0 3500 	ldrd	r3, r5, [r0]
 801a3ae:	3006      	adds	r0, #6
 801a3b0:	ba5b      	rev16	r3, r3
 801a3b2:	ba6d      	rev16	r5, r5
 801a3b4:	b2da      	uxtb	r2, r3
 801a3b6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801a3ba:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801a3be:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 801a3c2:	f3c3 4807 	ubfx	r8, r3, #16, #8
 801a3c6:	0e1b      	lsrs	r3, r3, #24
 801a3c8:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 801a3cc:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 801a3d0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801a3d4:	fa5f fb85 	uxtb.w	fp, r5
 801a3d8:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 801a3dc:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801a3e0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 801a3e4:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 801a3e8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801a3ec:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 801a3f0:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 801a3f4:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 801a3f8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a3fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a400:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 801a404:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a408:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801a40c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801a410:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 801a414:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 801a418:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 801a41c:	4b29      	ldr	r3, [pc, #164]	@ (801a4c4 <D48_1CH_HTONS_VOL_HP+0x154>)
 801a41e:	fb22 c103 	smlad	r1, r2, r3, ip
 801a422:	4b29      	ldr	r3, [pc, #164]	@ (801a4c8 <D48_1CH_HTONS_VOL_HP+0x158>)
 801a424:	fb28 1103 	smlad	r1, r8, r3, r1
 801a428:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801a42c:	fb25 1103 	smlad	r1, r5, r3, r1
 801a430:	4b26      	ldr	r3, [pc, #152]	@ (801a4cc <D48_1CH_HTONS_VOL_HP+0x15c>)
 801a432:	fb22 ec03 	smlad	ip, r2, r3, lr
 801a436:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 801a43a:	fb28 cc03 	smlad	ip, r8, r3, ip
 801a43e:	4b24      	ldr	r3, [pc, #144]	@ (801a4d0 <D48_1CH_HTONS_VOL_HP+0x160>)
 801a440:	fb25 cc03 	smlad	ip, r5, r3, ip
 801a444:	f04f 0e01 	mov.w	lr, #1
 801a448:	fb22 f20e 	smuad	r2, r2, lr
 801a44c:	4b21      	ldr	r3, [pc, #132]	@ (801a4d4 <D48_1CH_HTONS_VOL_HP+0x164>)
 801a44e:	fb28 2803 	smlad	r8, r8, r3, r2
 801a452:	4b21      	ldr	r3, [pc, #132]	@ (801a4d8 <D48_1CH_HTONS_VOL_HP+0x168>)
 801a454:	fb25 8e03 	smlad	lr, r5, r3, r8
 801a458:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 801a45c:	190a      	adds	r2, r1, r4
 801a45e:	eba2 0209 	sub.w	r2, r2, r9
 801a462:	17d5      	asrs	r5, r2, #31
 801a464:	fba2 230a 	umull	r2, r3, r2, sl
 801a468:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 801a46c:	fb0a 3305 	mla	r3, sl, r5, r3
 801a470:	f143 0500 	adc.w	r5, r3, #0
 801a474:	9b02      	ldr	r3, [sp, #8]
 801a476:	032a      	lsls	r2, r5, #12
 801a478:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801a47c:	f04f 0900 	mov.w	r9, #0
 801a480:	fbc3 8902 	smlal	r8, r9, r3, r2
 801a484:	9a01      	ldr	r2, [sp, #4]
 801a486:	ea4f 03a9 	mov.w	r3, r9, asr #2
 801a48a:	f303 030f 	ssat	r3, #16, r3
 801a48e:	f822 3f02 	strh.w	r3, [r2, #2]!
 801a492:	9b03      	ldr	r3, [sp, #12]
 801a494:	9201      	str	r2, [sp, #4]
 801a496:	4283      	cmp	r3, r0
 801a498:	ea4f 0445 	mov.w	r4, r5, lsl #1
 801a49c:	4689      	mov	r9, r1
 801a49e:	d184      	bne.n	801a3aa <D48_1CH_HTONS_VOL_HP+0x3a>
 801a4a0:	9a05      	ldr	r2, [sp, #20]
 801a4a2:	4673      	mov	r3, lr
 801a4a4:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 801a4a8:	9b04      	ldr	r3, [sp, #16]
 801a4aa:	61d6      	str	r6, [r2, #28]
 801a4ac:	2000      	movs	r0, #0
 801a4ae:	e9c2 4104 	strd	r4, r1, [r2, #16]
 801a4b2:	6193      	str	r3, [r2, #24]
 801a4b4:	b007      	add	sp, #28
 801a4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ba:	4649      	mov	r1, r9
 801a4bc:	e7f2      	b.n	801a4a4 <D48_1CH_HTONS_VOL_HP+0x134>
 801a4be:	bf00      	nop
 801a4c0:	2000018c 	.word	0x2000018c
 801a4c4:	000f000a 	.word	0x000f000a
 801a4c8:	00060003 	.word	0x00060003
 801a4cc:	00150019 	.word	0x00150019
 801a4d0:	00190015 	.word	0x00190015
 801a4d4:	00030006 	.word	0x00030006
 801a4d8:	000a000f 	.word	0x000a000f

0801a4dc <D64_1CH_HTONS_VOL_HP>:
 801a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4e0:	b087      	sub	sp, #28
 801a4e2:	6913      	ldr	r3, [r2, #16]
 801a4e4:	9300      	str	r3, [sp, #0]
 801a4e6:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 801a4ea:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 801a4ec:	9601      	str	r6, [sp, #4]
 801a4ee:	4681      	mov	r9, r0
 801a4f0:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 801a4f2:	6a16      	ldr	r6, [r2, #32]
 801a4f4:	9304      	str	r3, [sp, #16]
 801a4f6:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 801a4fa:	69d3      	ldr	r3, [r2, #28]
 801a4fc:	9602      	str	r6, [sp, #8]
 801a4fe:	2800      	cmp	r0, #0
 801a500:	f000 809d 	beq.w	801a63e <D64_1CH_HTONS_VOL_HP+0x162>
 801a504:	468e      	mov	lr, r1
 801a506:	f8df c170 	ldr.w	ip, [pc, #368]	@ 801a678 <D64_1CH_HTONS_VOL_HP+0x19c>
 801a50a:	9205      	str	r2, [sp, #20]
 801a50c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 801a510:	9103      	str	r1, [sp, #12]
 801a512:	4622      	mov	r2, r4
 801a514:	4619      	mov	r1, r3
 801a516:	f859 3b08 	ldr.w	r3, [r9], #8
 801a51a:	f859 6c04 	ldr.w	r6, [r9, #-4]
 801a51e:	ba5b      	rev16	r3, r3
 801a520:	ba76      	rev16	r6, r6
 801a522:	b2dc      	uxtb	r4, r3
 801a524:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801a528:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 801a52c:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 801a530:	f3c3 4007 	ubfx	r0, r3, #16, #8
 801a534:	0e1b      	lsrs	r3, r3, #24
 801a536:	eb01 0b07 	add.w	fp, r1, r7
 801a53a:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 801a53e:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 801a542:	b2f1      	uxtb	r1, r6
 801a544:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 801a548:	f3c6 2307 	ubfx	r3, r6, #8, #8
 801a54c:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 801a550:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 801a554:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 801a558:	f3c6 4107 	ubfx	r1, r6, #16, #8
 801a55c:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 801a560:	0e36      	lsrs	r6, r6, #24
 801a562:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 801a566:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 801a56a:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 801a56e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 801a572:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 801a576:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 801a57a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801a57e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801a582:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801a586:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a58a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a58e:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 801a592:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801a596:	f3c6 0409 	ubfx	r4, r6, #0, #10
 801a59a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801a59e:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 801a5a2:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 801a5a6:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 801a5aa:	4b2b      	ldr	r3, [pc, #172]	@ (801a658 <D64_1CH_HTONS_VOL_HP+0x17c>)
 801a5ac:	0ab1      	lsrs	r1, r6, #10
 801a5ae:	fb2b 8803 	smlad	r8, fp, r3, r8
 801a5b2:	4b2a      	ldr	r3, [pc, #168]	@ (801a65c <D64_1CH_HTONS_VOL_HP+0x180>)
 801a5b4:	fb2a 8803 	smlad	r8, sl, r3, r8
 801a5b8:	4b29      	ldr	r3, [pc, #164]	@ (801a660 <D64_1CH_HTONS_VOL_HP+0x184>)
 801a5ba:	fb27 8803 	smlad	r8, r7, r3, r8
 801a5be:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801a5c2:	fb20 8604 	smlad	r6, r0, r4, r8
 801a5c6:	4b27      	ldr	r3, [pc, #156]	@ (801a664 <D64_1CH_HTONS_VOL_HP+0x188>)
 801a5c8:	fb2b 5803 	smlad	r8, fp, r3, r5
 801a5cc:	fb20 8813 	smladx	r8, r0, r3, r8
 801a5d0:	4b25      	ldr	r3, [pc, #148]	@ (801a668 <D64_1CH_HTONS_VOL_HP+0x18c>)
 801a5d2:	fb2a 8803 	smlad	r8, sl, r3, r8
 801a5d6:	fb27 8813 	smladx	r8, r7, r3, r8
 801a5da:	2401      	movs	r4, #1
 801a5dc:	fb2b fb04 	smuad	fp, fp, r4
 801a5e0:	4b22      	ldr	r3, [pc, #136]	@ (801a66c <D64_1CH_HTONS_VOL_HP+0x190>)
 801a5e2:	fb2a ba03 	smlad	sl, sl, r3, fp
 801a5e6:	4b22      	ldr	r3, [pc, #136]	@ (801a670 <D64_1CH_HTONS_VOL_HP+0x194>)
 801a5e8:	fb27 a703 	smlad	r7, r7, r3, sl
 801a5ec:	4b21      	ldr	r3, [pc, #132]	@ (801a674 <D64_1CH_HTONS_VOL_HP+0x198>)
 801a5ee:	fb20 7503 	smlad	r5, r0, r3, r7
 801a5f2:	9b00      	ldr	r3, [sp, #0]
 801a5f4:	9802      	ldr	r0, [sp, #8]
 801a5f6:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 801a5fa:	4423      	add	r3, r4
 801a5fc:	1a9a      	subs	r2, r3, r2
 801a5fe:	17d7      	asrs	r7, r2, #31
 801a600:	fba2 2300 	umull	r2, r3, r2, r0
 801a604:	fb00 3307 	mla	r3, r0, r7, r3
 801a608:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 801a60c:	f143 0b00 	adc.w	fp, r3, #0
 801a610:	9b01      	ldr	r3, [sp, #4]
 801a612:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 801a616:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801a61a:	2700      	movs	r7, #0
 801a61c:	fbc3 6702 	smlal	r6, r7, r3, r2
 801a620:	ea4f 034b 	mov.w	r3, fp, lsl #1
 801a624:	10ba      	asrs	r2, r7, #2
 801a626:	9300      	str	r3, [sp, #0]
 801a628:	f302 020f 	ssat	r2, #16, r2
 801a62c:	9b03      	ldr	r3, [sp, #12]
 801a62e:	f82e 2b02 	strh.w	r2, [lr], #2
 801a632:	459e      	cmp	lr, r3
 801a634:	4622      	mov	r2, r4
 801a636:	f47f af6e 	bne.w	801a516 <D64_1CH_HTONS_VOL_HP+0x3a>
 801a63a:	9a05      	ldr	r2, [sp, #20]
 801a63c:	460b      	mov	r3, r1
 801a63e:	61d3      	str	r3, [r2, #28]
 801a640:	9b00      	ldr	r3, [sp, #0]
 801a642:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801a646:	9b04      	ldr	r3, [sp, #16]
 801a648:	6193      	str	r3, [r2, #24]
 801a64a:	2000      	movs	r0, #0
 801a64c:	e9c2 5802 	strd	r5, r8, [r2, #8]
 801a650:	b007      	add	sp, #28
 801a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a656:	bf00      	nop
 801a658:	001c0015 	.word	0x001c0015
 801a65c:	000f000a 	.word	0x000f000a
 801a660:	00060003 	.word	0x00060003
 801a664:	0024002a 	.word	0x0024002a
 801a668:	002e0030 	.word	0x002e0030
 801a66c:	00030006 	.word	0x00030006
 801a670:	000a000f 	.word	0x000a000f
 801a674:	0015001c 	.word	0x0015001c
 801a678:	2000018c 	.word	0x2000018c

0801a67c <D80_1CH_HTONS_VOL_HP>:
 801a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a680:	4615      	mov	r5, r2
 801a682:	b089      	sub	sp, #36	@ 0x24
 801a684:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 801a688:	692b      	ldr	r3, [r5, #16]
 801a68a:	9301      	str	r3, [sp, #4]
 801a68c:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 801a690:	9400      	str	r4, [sp, #0]
 801a692:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 801a694:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a696:	9403      	str	r4, [sp, #12]
 801a698:	6a2c      	ldr	r4, [r5, #32]
 801a69a:	9306      	str	r3, [sp, #24]
 801a69c:	9404      	str	r4, [sp, #16]
 801a69e:	69eb      	ldr	r3, [r5, #28]
 801a6a0:	2a00      	cmp	r2, #0
 801a6a2:	f000 80d3 	beq.w	801a84c <D80_1CH_HTONS_VOL_HP+0x1d0>
 801a6a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801a6aa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801a6ae:	9205      	str	r2, [sp, #20]
 801a6b0:	4c67      	ldr	r4, [pc, #412]	@ (801a850 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 801a6b2:	9507      	str	r5, [sp, #28]
 801a6b4:	1e8a      	subs	r2, r1, #2
 801a6b6:	9202      	str	r2, [sp, #8]
 801a6b8:	469b      	mov	fp, r3
 801a6ba:	6807      	ldr	r7, [r0, #0]
 801a6bc:	6842      	ldr	r2, [r0, #4]
 801a6be:	6883      	ldr	r3, [r0, #8]
 801a6c0:	300a      	adds	r0, #10
 801a6c2:	ba7f      	rev16	r7, r7
 801a6c4:	ba52      	rev16	r2, r2
 801a6c6:	ba5b      	rev16	r3, r3
 801a6c8:	b2fd      	uxtb	r5, r7
 801a6ca:	f3c7 2107 	ubfx	r1, r7, #8, #8
 801a6ce:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 801a6d2:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 801a6d6:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801a6da:	44f3      	add	fp, lr
 801a6dc:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 801a6e0:	0e3f      	lsrs	r7, r7, #24
 801a6e2:	fa5f fe82 	uxtb.w	lr, r2
 801a6e6:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 801a6ea:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 801a6ee:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 801a6f2:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 801a6f6:	f3c2 2507 	ubfx	r5, r2, #8, #8
 801a6fa:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801a6fe:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 801a702:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 801a706:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 801a70a:	0e12      	lsrs	r2, r2, #24
 801a70c:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 801a710:	fa5f fe83 	uxtb.w	lr, r3
 801a714:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 801a718:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a71c:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 801a720:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a724:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 801a728:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801a72c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a730:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 801a734:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 801a738:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801a73c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a740:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801a744:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801a748:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a74c:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 801a750:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801a754:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 801a758:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801a75c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801a760:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801a764:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 801a768:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 801a76c:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 801a770:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 801a774:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 801a778:	4b36      	ldr	r3, [pc, #216]	@ (801a854 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 801a77a:	9a00      	ldr	r2, [sp, #0]
 801a77c:	fb21 2303 	smlad	r3, r1, r3, r2
 801a780:	4a35      	ldr	r2, [pc, #212]	@ (801a858 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 801a782:	fb27 3302 	smlad	r3, r7, r2, r3
 801a786:	4a35      	ldr	r2, [pc, #212]	@ (801a85c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 801a788:	fb25 3302 	smlad	r3, r5, r2, r3
 801a78c:	4a34      	ldr	r2, [pc, #208]	@ (801a860 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 801a78e:	fb28 3302 	smlad	r3, r8, r2, r3
 801a792:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801a796:	fb2e 3302 	smlad	r3, lr, r2, r3
 801a79a:	4a32      	ldr	r2, [pc, #200]	@ (801a864 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 801a79c:	fb21 cc02 	smlad	ip, r1, r2, ip
 801a7a0:	4a31      	ldr	r2, [pc, #196]	@ (801a868 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 801a7a2:	fb27 cc02 	smlad	ip, r7, r2, ip
 801a7a6:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 801a7aa:	fb25 c909 	smlad	r9, r5, r9, ip
 801a7ae:	4a2f      	ldr	r2, [pc, #188]	@ (801a86c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 801a7b0:	fb28 9902 	smlad	r9, r8, r2, r9
 801a7b4:	4a2e      	ldr	r2, [pc, #184]	@ (801a870 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 801a7b6:	fb2e 9202 	smlad	r2, lr, r2, r9
 801a7ba:	f04f 0a01 	mov.w	sl, #1
 801a7be:	9200      	str	r2, [sp, #0]
 801a7c0:	fb21 fa0a 	smuad	sl, r1, sl
 801a7c4:	4a2b      	ldr	r2, [pc, #172]	@ (801a874 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 801a7c6:	fb27 a702 	smlad	r7, r7, r2, sl
 801a7ca:	4a2b      	ldr	r2, [pc, #172]	@ (801a878 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 801a7cc:	fb25 7702 	smlad	r7, r5, r2, r7
 801a7d0:	4a2a      	ldr	r2, [pc, #168]	@ (801a87c <D80_1CH_HTONS_VOL_HP+0x200>)
 801a7d2:	fb28 7202 	smlad	r2, r8, r2, r7
 801a7d6:	4d2a      	ldr	r5, [pc, #168]	@ (801a880 <D80_1CH_HTONS_VOL_HP+0x204>)
 801a7d8:	fb2e 2c05 	smlad	ip, lr, r5, r2
 801a7dc:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 801a7e0:	9b01      	ldr	r3, [sp, #4]
 801a7e2:	9903      	ldr	r1, [sp, #12]
 801a7e4:	4413      	add	r3, r2
 801a7e6:	1b9e      	subs	r6, r3, r6
 801a7e8:	9b04      	ldr	r3, [sp, #16]
 801a7ea:	ea4f 79e6 	mov.w	r9, r6, asr #31
 801a7ee:	fba6 5603 	umull	r5, r6, r6, r3
 801a7f2:	fb03 6309 	mla	r3, r3, r9, r6
 801a7f6:	462e      	mov	r6, r5
 801a7f8:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 801a7fc:	f143 0700 	adc.w	r7, r3, #0
 801a800:	02bb      	lsls	r3, r7, #10
 801a802:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801a806:	f04f 0900 	mov.w	r9, #0
 801a80a:	fbc1 8903 	smlal	r8, r9, r1, r3
 801a80e:	9902      	ldr	r1, [sp, #8]
 801a810:	007b      	lsls	r3, r7, #1
 801a812:	9301      	str	r3, [sp, #4]
 801a814:	ea4f 03a9 	mov.w	r3, r9, asr #2
 801a818:	f303 030f 	ssat	r3, #16, r3
 801a81c:	f821 3f02 	strh.w	r3, [r1, #2]!
 801a820:	9b05      	ldr	r3, [sp, #20]
 801a822:	9102      	str	r1, [sp, #8]
 801a824:	4283      	cmp	r3, r0
 801a826:	4616      	mov	r6, r2
 801a828:	f47f af47 	bne.w	801a6ba <D80_1CH_HTONS_VOL_HP+0x3e>
 801a82c:	9d07      	ldr	r5, [sp, #28]
 801a82e:	465b      	mov	r3, fp
 801a830:	61eb      	str	r3, [r5, #28]
 801a832:	9b01      	ldr	r3, [sp, #4]
 801a834:	9900      	ldr	r1, [sp, #0]
 801a836:	f8c5 c008 	str.w	ip, [r5, #8]
 801a83a:	e9c5 3204 	strd	r3, r2, [r5, #16]
 801a83e:	9b06      	ldr	r3, [sp, #24]
 801a840:	60e9      	str	r1, [r5, #12]
 801a842:	2000      	movs	r0, #0
 801a844:	61ab      	str	r3, [r5, #24]
 801a846:	b009      	add	sp, #36	@ 0x24
 801a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a84c:	4632      	mov	r2, r6
 801a84e:	e7ef      	b.n	801a830 <D80_1CH_HTONS_VOL_HP+0x1b4>
 801a850:	2000018c 	.word	0x2000018c
 801a854:	002d0024 	.word	0x002d0024
 801a858:	001c0015 	.word	0x001c0015
 801a85c:	000f000a 	.word	0x000f000a
 801a860:	00060003 	.word	0x00060003
 801a864:	0037003f 	.word	0x0037003f
 801a868:	00450049 	.word	0x00450049
 801a86c:	00490045 	.word	0x00490045
 801a870:	003f0037 	.word	0x003f0037
 801a874:	00030006 	.word	0x00030006
 801a878:	000a000f 	.word	0x000a000f
 801a87c:	0015001c 	.word	0x0015001c
 801a880:	0024002d 	.word	0x0024002d

0801a884 <D128_1CH_HTONS_VOL_HP>:
 801a884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a888:	b093      	sub	sp, #76	@ 0x4c
 801a88a:	6914      	ldr	r4, [r2, #16]
 801a88c:	9404      	str	r4, [sp, #16]
 801a88e:	6954      	ldr	r4, [r2, #20]
 801a890:	9406      	str	r4, [sp, #24]
 801a892:	6994      	ldr	r4, [r2, #24]
 801a894:	9410      	str	r4, [sp, #64]	@ 0x40
 801a896:	6894      	ldr	r4, [r2, #8]
 801a898:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 801a89a:	9403      	str	r4, [sp, #12]
 801a89c:	68d4      	ldr	r4, [r2, #12]
 801a89e:	9211      	str	r2, [sp, #68]	@ 0x44
 801a8a0:	69d6      	ldr	r6, [r2, #28]
 801a8a2:	9402      	str	r4, [sp, #8]
 801a8a4:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 801a8a6:	6a12      	ldr	r2, [r2, #32]
 801a8a8:	940d      	str	r4, [sp, #52]	@ 0x34
 801a8aa:	920e      	str	r2, [sp, #56]	@ 0x38
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	f000 814a 	beq.w	801ab46 <D128_1CH_HTONS_VOL_HP+0x2c2>
 801a8b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801a8b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a8b8:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 801ab84 <D128_1CH_HTONS_VOL_HP+0x300>
 801a8bc:	9107      	str	r1, [sp, #28]
 801a8be:	f100 0310 	add.w	r3, r0, #16
 801a8c2:	469b      	mov	fp, r3
 801a8c4:	9605      	str	r6, [sp, #20]
 801a8c6:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 801a8ca:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 801a8ce:	ba49      	rev16	r1, r1
 801a8d0:	ba52      	rev16	r2, r2
 801a8d2:	ba5b      	rev16	r3, r3
 801a8d4:	fa90 fa90 	rev16.w	sl, r0
 801a8d8:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801a8dc:	b2cc      	uxtb	r4, r1
 801a8de:	9e05      	ldr	r6, [sp, #20]
 801a8e0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 801a8e4:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 801a8e8:	f3c1 4007 	ubfx	r0, r1, #16, #8
 801a8ec:	0e09      	lsrs	r1, r1, #24
 801a8ee:	4426      	add	r6, r4
 801a8f0:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 801a8f4:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 801a8f8:	b2d0      	uxtb	r0, r2
 801a8fa:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 801a8fe:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801a902:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 801a906:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 801a90a:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 801a90e:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801a912:	0e12      	lsrs	r2, r2, #24
 801a914:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801a918:	9401      	str	r4, [sp, #4]
 801a91a:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 801a91e:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 801a922:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 801a926:	9705      	str	r7, [sp, #20]
 801a928:	b2da      	uxtb	r2, r3
 801a92a:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 801a92e:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 801a932:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 801a936:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 801a93a:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 801a93e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801a942:	f3c3 4007 	ubfx	r0, r3, #16, #8
 801a946:	0e1b      	lsrs	r3, r3, #24
 801a948:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 801a94c:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 801a950:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 801a954:	fa5f f38a 	uxtb.w	r3, sl
 801a958:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801a95c:	960a      	str	r6, [sp, #40]	@ 0x28
 801a95e:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 801a962:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 801a966:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801a96a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 801a96e:	950b      	str	r5, [sp, #44]	@ 0x2c
 801a970:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 801a974:	f3ca 4507 	ubfx	r5, sl, #16, #8
 801a978:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 801a97c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801a980:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 801a984:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 801a988:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 801a98c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 801a990:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 801a994:	9308      	str	r3, [sp, #32]
 801a996:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801a99a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 801a99e:	920c      	str	r2, [sp, #48]	@ 0x30
 801a9a0:	9b01      	ldr	r3, [sp, #4]
 801a9a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a9a4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 801a9a8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801a9ac:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 801a9b0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 801a9b4:	9b05      	ldr	r3, [sp, #20]
 801a9b6:	f8cd 9014 	str.w	r9, [sp, #20]
 801a9ba:	4691      	mov	r9, r2
 801a9bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a9be:	f8cd a004 	str.w	sl, [sp, #4]
 801a9c2:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 801a9c6:	9a01      	ldr	r2, [sp, #4]
 801a9c8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 801a9cc:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 801a9d0:	9b08      	ldr	r3, [sp, #32]
 801a9d2:	9a05      	ldr	r2, [sp, #20]
 801a9d4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801a9d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801a9dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801a9de:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801a9e2:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 801a9e6:	9201      	str	r2, [sp, #4]
 801a9e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a9ea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801a9ee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801a9f2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801a9f6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801a9fa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801a9fe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 801aa02:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801aa06:	f3c2 0709 	ubfx	r7, r2, #0, #10
 801aa0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801aa0e:	0a92      	lsrs	r2, r2, #10
 801aa10:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 801aa14:	9205      	str	r2, [sp, #20]
 801aa16:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 801aa1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 801aa1e:	4d4b      	ldr	r5, [pc, #300]	@ (801ab4c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 801aa20:	9a02      	ldr	r2, [sp, #8]
 801aa22:	fb29 2505 	smlad	r5, r9, r5, r2
 801aa26:	4a4a      	ldr	r2, [pc, #296]	@ (801ab50 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 801aa28:	fb2a 5502 	smlad	r5, sl, r2, r5
 801aa2c:	4a49      	ldr	r2, [pc, #292]	@ (801ab54 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 801aa2e:	fb21 5502 	smlad	r5, r1, r2, r5
 801aa32:	4a49      	ldr	r2, [pc, #292]	@ (801ab58 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 801aa34:	fb24 5502 	smlad	r5, r4, r2, r5
 801aa38:	4a48      	ldr	r2, [pc, #288]	@ (801ab5c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 801aa3a:	9e01      	ldr	r6, [sp, #4]
 801aa3c:	fb26 5502 	smlad	r5, r6, r2, r5
 801aa40:	4a47      	ldr	r2, [pc, #284]	@ (801ab60 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 801aa42:	fb20 5502 	smlad	r5, r0, r2, r5
 801aa46:	4a47      	ldr	r2, [pc, #284]	@ (801ab64 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 801aa48:	fb23 5502 	smlad	r5, r3, r2, r5
 801aa4c:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 801aa50:	fb27 520c 	smlad	r2, r7, ip, r5
 801aa54:	4616      	mov	r6, r2
 801aa56:	9d03      	ldr	r5, [sp, #12]
 801aa58:	4a43      	ldr	r2, [pc, #268]	@ (801ab68 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 801aa5a:	fb29 5c02 	smlad	ip, r9, r2, r5
 801aa5e:	4a43      	ldr	r2, [pc, #268]	@ (801ab6c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 801aa60:	fb2a ce02 	smlad	lr, sl, r2, ip
 801aa64:	f8df c120 	ldr.w	ip, [pc, #288]	@ 801ab88 <D128_1CH_HTONS_VOL_HP+0x304>
 801aa68:	fb21 ec0c 	smlad	ip, r1, ip, lr
 801aa6c:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 801ab8c <D128_1CH_HTONS_VOL_HP+0x308>
 801aa70:	fb24 cc0e 	smlad	ip, r4, lr, ip
 801aa74:	f8df e118 	ldr.w	lr, [pc, #280]	@ 801ab90 <D128_1CH_HTONS_VOL_HP+0x30c>
 801aa78:	9d01      	ldr	r5, [sp, #4]
 801aa7a:	fb25 ce0e 	smlad	lr, r5, lr, ip
 801aa7e:	f8df c114 	ldr.w	ip, [pc, #276]	@ 801ab94 <D128_1CH_HTONS_VOL_HP+0x310>
 801aa82:	fb20 ee0c 	smlad	lr, r0, ip, lr
 801aa86:	f8df c110 	ldr.w	ip, [pc, #272]	@ 801ab98 <D128_1CH_HTONS_VOL_HP+0x314>
 801aa8a:	fb23 ec0c 	smlad	ip, r3, ip, lr
 801aa8e:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 801ab9c <D128_1CH_HTONS_VOL_HP+0x318>
 801aa92:	fb27 c20e 	smlad	r2, r7, lr, ip
 801aa96:	f04f 0c01 	mov.w	ip, #1
 801aa9a:	9202      	str	r2, [sp, #8]
 801aa9c:	fb29 fc0c 	smuad	ip, r9, ip
 801aaa0:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 801aba0 <D128_1CH_HTONS_VOL_HP+0x31c>
 801aaa4:	fb2a ca09 	smlad	sl, sl, r9, ip
 801aaa8:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 801aba4 <D128_1CH_HTONS_VOL_HP+0x320>
 801aaac:	fb21 a909 	smlad	r9, r1, r9, sl
 801aab0:	492f      	ldr	r1, [pc, #188]	@ (801ab70 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 801aab2:	fb24 9901 	smlad	r9, r4, r1, r9
 801aab6:	492f      	ldr	r1, [pc, #188]	@ (801ab74 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 801aab8:	fb25 9901 	smlad	r9, r5, r1, r9
 801aabc:	492e      	ldr	r1, [pc, #184]	@ (801ab78 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 801aabe:	fb20 9901 	smlad	r9, r0, r1, r9
 801aac2:	492e      	ldr	r1, [pc, #184]	@ (801ab7c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 801aac4:	fb23 9301 	smlad	r3, r3, r1, r9
 801aac8:	482d      	ldr	r0, [pc, #180]	@ (801ab80 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 801aaca:	fb27 3300 	smlad	r3, r7, r0, r3
 801aace:	9303      	str	r3, [sp, #12]
 801aad0:	9b04      	ldr	r3, [sp, #16]
 801aad2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801aad4:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 801aad8:	442b      	add	r3, r5
 801aada:	461a      	mov	r2, r3
 801aadc:	9b06      	ldr	r3, [sp, #24]
 801aade:	9506      	str	r5, [sp, #24]
 801aae0:	1ad2      	subs	r2, r2, r3
 801aae2:	17d1      	asrs	r1, r2, #31
 801aae4:	fba2 2304 	umull	r2, r3, r2, r4
 801aae8:	fb04 3301 	mla	r3, r4, r1, r3
 801aaec:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 801aaf0:	f143 0a00 	adc.w	sl, r3, #0
 801aaf4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aaf6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 801aafa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801aafe:	2100      	movs	r1, #0
 801ab00:	fbc3 0102 	smlal	r0, r1, r3, r2
 801ab04:	9b07      	ldr	r3, [sp, #28]
 801ab06:	108a      	asrs	r2, r1, #2
 801ab08:	f302 020f 	ssat	r2, #16, r2
 801ab0c:	f823 2b02 	strh.w	r2, [r3], #2
 801ab10:	ea4f 024a 	mov.w	r2, sl, lsl #1
 801ab14:	9204      	str	r2, [sp, #16]
 801ab16:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ab18:	9307      	str	r3, [sp, #28]
 801ab1a:	4293      	cmp	r3, r2
 801ab1c:	f10b 0b10 	add.w	fp, fp, #16
 801ab20:	f47f aed1 	bne.w	801a8c6 <D128_1CH_HTONS_VOL_HP+0x42>
 801ab24:	9e05      	ldr	r6, [sp, #20]
 801ab26:	4629      	mov	r1, r5
 801ab28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ab2a:	9803      	ldr	r0, [sp, #12]
 801ab2c:	6098      	str	r0, [r3, #8]
 801ab2e:	9802      	ldr	r0, [sp, #8]
 801ab30:	60d8      	str	r0, [r3, #12]
 801ab32:	9804      	ldr	r0, [sp, #16]
 801ab34:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ab36:	61de      	str	r6, [r3, #28]
 801ab38:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801ab3c:	2000      	movs	r0, #0
 801ab3e:	619a      	str	r2, [r3, #24]
 801ab40:	b013      	add	sp, #76	@ 0x4c
 801ab42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab46:	9906      	ldr	r1, [sp, #24]
 801ab48:	e7ee      	b.n	801ab28 <D128_1CH_HTONS_VOL_HP+0x2a4>
 801ab4a:	bf00      	nop
 801ab4c:	00780069 	.word	0x00780069
 801ab50:	005b004e 	.word	0x005b004e
 801ab54:	00420037 	.word	0x00420037
 801ab58:	002d0024 	.word	0x002d0024
 801ab5c:	001c0015 	.word	0x001c0015
 801ab60:	000f000a 	.word	0x000f000a
 801ab64:	00060003 	.word	0x00060003
 801ab68:	00880096 	.word	0x00880096
 801ab6c:	00a200ac 	.word	0x00a200ac
 801ab70:	0015001c 	.word	0x0015001c
 801ab74:	0024002d 	.word	0x0024002d
 801ab78:	00370042 	.word	0x00370042
 801ab7c:	004e005b 	.word	0x004e005b
 801ab80:	00690078 	.word	0x00690078
 801ab84:	2000018c 	.word	0x2000018c
 801ab88:	00b400ba 	.word	0x00b400ba
 801ab8c:	00be00c0 	.word	0x00be00c0
 801ab90:	00c000be 	.word	0x00c000be
 801ab94:	00ba00b4 	.word	0x00ba00b4
 801ab98:	00ac00a2 	.word	0x00ac00a2
 801ab9c:	00960088 	.word	0x00960088
 801aba0:	00030006 	.word	0x00030006
 801aba4:	000a000f 	.word	0x000a000f

0801aba8 <PDM_Filter_Init>:
 801aba8:	4a59      	ldr	r2, [pc, #356]	@ (801ad10 <PDM_Filter_Init+0x168>)
 801abaa:	495a      	ldr	r1, [pc, #360]	@ (801ad14 <PDM_Filter_Init+0x16c>)
 801abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abae:	6813      	ldr	r3, [r2, #0]
 801abb0:	f023 0301 	bic.w	r3, r3, #1
 801abb4:	6013      	str	r3, [r2, #0]
 801abb6:	680b      	ldr	r3, [r1, #0]
 801abb8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801abbc:	4013      	ands	r3, r2
 801abbe:	f24c 2540 	movw	r5, #49728	@ 0xc240
 801abc2:	42ab      	cmp	r3, r5
 801abc4:	4604      	mov	r4, r0
 801abc6:	d044      	beq.n	801ac52 <PDM_Filter_Init+0xaa>
 801abc8:	680b      	ldr	r3, [r1, #0]
 801abca:	f24c 2170 	movw	r1, #49776	@ 0xc270
 801abce:	401a      	ands	r2, r3
 801abd0:	428a      	cmp	r2, r1
 801abd2:	d03e      	beq.n	801ac52 <PDM_Filter_Init+0xaa>
 801abd4:	4b50      	ldr	r3, [pc, #320]	@ (801ad18 <PDM_Filter_Init+0x170>)
 801abd6:	2201      	movs	r2, #1
 801abd8:	601a      	str	r2, [r3, #0]
 801abda:	6819      	ldr	r1, [r3, #0]
 801abdc:	2900      	cmp	r1, #0
 801abde:	d1fc      	bne.n	801abda <PDM_Filter_Init+0x32>
 801abe0:	4b4e      	ldr	r3, [pc, #312]	@ (801ad1c <PDM_Filter_Init+0x174>)
 801abe2:	4a4f      	ldr	r2, [pc, #316]	@ (801ad20 <PDM_Filter_Init+0x178>)
 801abe4:	601a      	str	r2, [r3, #0]
 801abe6:	681a      	ldr	r2, [r3, #0]
 801abe8:	4b4e      	ldr	r3, [pc, #312]	@ (801ad24 <PDM_Filter_Init+0x17c>)
 801abea:	429a      	cmp	r2, r3
 801abec:	f104 000c 	add.w	r0, r4, #12
 801abf0:	f04f 0240 	mov.w	r2, #64	@ 0x40
 801abf4:	d047      	beq.n	801ac86 <PDM_Filter_Init+0xde>
 801abf6:	f000 fcb7 	bl	801b568 <memset>
 801abfa:	2300      	movs	r3, #0
 801abfc:	6463      	str	r3, [r4, #68]	@ 0x44
 801abfe:	8820      	ldrh	r0, [r4, #0]
 801ac00:	8963      	ldrh	r3, [r4, #10]
 801ac02:	8922      	ldrh	r2, [r4, #8]
 801ac04:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801ac06:	2801      	cmp	r0, #1
 801ac08:	f04f 0300 	mov.w	r3, #0
 801ac0c:	61a3      	str	r3, [r4, #24]
 801ac0e:	e9c4 3304 	strd	r3, r3, [r4, #16]
 801ac12:	60e3      	str	r3, [r4, #12]
 801ac14:	6263      	str	r3, [r4, #36]	@ 0x24
 801ac16:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801ac1a:	6423      	str	r3, [r4, #64]	@ 0x40
 801ac1c:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801ac1e:	d93a      	bls.n	801ac96 <PDM_Filter_Init+0xee>
 801ac20:	2003      	movs	r0, #3
 801ac22:	2302      	movs	r3, #2
 801ac24:	8862      	ldrh	r2, [r4, #2]
 801ac26:	2a01      	cmp	r2, #1
 801ac28:	d932      	bls.n	801ac90 <PDM_Filter_Init+0xe8>
 801ac2a:	2140      	movs	r1, #64	@ 0x40
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801ac30:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 801ac34:	6862      	ldr	r2, [r4, #4]
 801ac36:	bf04      	itt	eq
 801ac38:	6421      	streq	r1, [r4, #64]	@ 0x40
 801ac3a:	460b      	moveq	r3, r1
 801ac3c:	b11a      	cbz	r2, 801ac46 <PDM_Filter_Init+0x9e>
 801ac3e:	f043 0310 	orr.w	r3, r3, #16
 801ac42:	6423      	str	r3, [r4, #64]	@ 0x40
 801ac44:	62e2      	str	r2, [r4, #44]	@ 0x2c
 801ac46:	2200      	movs	r2, #0
 801ac48:	8722      	strh	r2, [r4, #56]	@ 0x38
 801ac4a:	b908      	cbnz	r0, 801ac50 <PDM_Filter_Init+0xa8>
 801ac4c:	3380      	adds	r3, #128	@ 0x80
 801ac4e:	6423      	str	r3, [r4, #64]	@ 0x40
 801ac50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac52:	4b35      	ldr	r3, [pc, #212]	@ (801ad28 <PDM_Filter_Init+0x180>)
 801ac54:	681b      	ldr	r3, [r3, #0]
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d1bc      	bne.n	801abd4 <PDM_Filter_Init+0x2c>
 801ac5a:	4a34      	ldr	r2, [pc, #208]	@ (801ad2c <PDM_Filter_Init+0x184>)
 801ac5c:	6813      	ldr	r3, [r2, #0]
 801ac5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ac62:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801ac66:	d006      	beq.n	801ac76 <PDM_Filter_Init+0xce>
 801ac68:	6813      	ldr	r3, [r2, #0]
 801ac6a:	f240 4283 	movw	r2, #1155	@ 0x483
 801ac6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ac72:	4293      	cmp	r3, r2
 801ac74:	d1ae      	bne.n	801abd4 <PDM_Filter_Init+0x2c>
 801ac76:	4b2e      	ldr	r3, [pc, #184]	@ (801ad30 <PDM_Filter_Init+0x188>)
 801ac78:	2201      	movs	r2, #1
 801ac7a:	601a      	str	r2, [r3, #0]
 801ac7c:	6819      	ldr	r1, [r3, #0]
 801ac7e:	2900      	cmp	r1, #0
 801ac80:	d1fc      	bne.n	801ac7c <PDM_Filter_Init+0xd4>
 801ac82:	4b2c      	ldr	r3, [pc, #176]	@ (801ad34 <PDM_Filter_Init+0x18c>)
 801ac84:	e7ad      	b.n	801abe2 <PDM_Filter_Init+0x3a>
 801ac86:	f000 fc6f 	bl	801b568 <memset>
 801ac8a:	4b26      	ldr	r3, [pc, #152]	@ (801ad24 <PDM_Filter_Init+0x17c>)
 801ac8c:	6463      	str	r3, [r4, #68]	@ 0x44
 801ac8e:	e7b6      	b.n	801abfe <PDM_Filter_Init+0x56>
 801ac90:	d038      	beq.n	801ad04 <PDM_Filter_Init+0x15c>
 801ac92:	4618      	mov	r0, r3
 801ac94:	e7c9      	b.n	801ac2a <PDM_Filter_Init+0x82>
 801ac96:	4d28      	ldr	r5, [pc, #160]	@ (801ad38 <PDM_Filter_Init+0x190>)
 801ac98:	782a      	ldrb	r2, [r5, #0]
 801ac9a:	d01a      	beq.n	801acd2 <PDM_Filter_Init+0x12a>
 801ac9c:	2a01      	cmp	r2, #1
 801ac9e:	d001      	beq.n	801aca4 <PDM_Filter_Init+0xfc>
 801aca0:	2001      	movs	r0, #1
 801aca2:	e7bf      	b.n	801ac24 <PDM_Filter_Init+0x7c>
 801aca4:	4925      	ldr	r1, [pc, #148]	@ (801ad3c <PDM_Filter_Init+0x194>)
 801aca6:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 801ad44 <PDM_Filter_Init+0x19c>
 801acaa:	4f25      	ldr	r7, [pc, #148]	@ (801ad40 <PDM_Filter_Init+0x198>)
 801acac:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 801acb0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801acb4:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 801acb8:	ea02 0007 	and.w	r0, r2, r7
 801acbc:	4303      	orrs	r3, r0
 801acbe:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801acc2:	4413      	add	r3, r2
 801acc4:	428e      	cmp	r6, r1
 801acc6:	600b      	str	r3, [r1, #0]
 801acc8:	d1f2      	bne.n	801acb0 <PDM_Filter_Init+0x108>
 801acca:	2300      	movs	r3, #0
 801accc:	702b      	strb	r3, [r5, #0]
 801acce:	2001      	movs	r0, #1
 801acd0:	e7a8      	b.n	801ac24 <PDM_Filter_Init+0x7c>
 801acd2:	2a00      	cmp	r2, #0
 801acd4:	d1a6      	bne.n	801ac24 <PDM_Filter_Init+0x7c>
 801acd6:	4919      	ldr	r1, [pc, #100]	@ (801ad3c <PDM_Filter_Init+0x194>)
 801acd8:	f8df c068 	ldr.w	ip, [pc, #104]	@ 801ad44 <PDM_Filter_Init+0x19c>
 801acdc:	4f18      	ldr	r7, [pc, #96]	@ (801ad40 <PDM_Filter_Init+0x198>)
 801acde:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 801ace2:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801ace6:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 801acea:	ea02 0007 	and.w	r0, r2, r7
 801acee:	4303      	orrs	r3, r0
 801acf0:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801acf4:	4413      	add	r3, r2
 801acf6:	428e      	cmp	r6, r1
 801acf8:	600b      	str	r3, [r1, #0]
 801acfa:	d1f2      	bne.n	801ace2 <PDM_Filter_Init+0x13a>
 801acfc:	2001      	movs	r0, #1
 801acfe:	7028      	strb	r0, [r5, #0]
 801ad00:	2300      	movs	r3, #0
 801ad02:	e78f      	b.n	801ac24 <PDM_Filter_Init+0x7c>
 801ad04:	2220      	movs	r2, #32
 801ad06:	4618      	mov	r0, r3
 801ad08:	6422      	str	r2, [r4, #64]	@ 0x40
 801ad0a:	4613      	mov	r3, r2
 801ad0c:	2160      	movs	r1, #96	@ 0x60
 801ad0e:	e78e      	b.n	801ac2e <PDM_Filter_Init+0x86>
 801ad10:	e0002000 	.word	0xe0002000
 801ad14:	e000ed00 	.word	0xe000ed00
 801ad18:	40023008 	.word	0x40023008
 801ad1c:	40023000 	.word	0x40023000
 801ad20:	f407a5c2 	.word	0xf407a5c2
 801ad24:	b5e8b5cd 	.word	0xb5e8b5cd
 801ad28:	e0042000 	.word	0xe0042000
 801ad2c:	5c001000 	.word	0x5c001000
 801ad30:	58024c08 	.word	0x58024c08
 801ad34:	58024c00 	.word	0x58024c00
 801ad38:	2000c444 	.word	0x2000c444
 801ad3c:	20000188 	.word	0x20000188
 801ad40:	000ffc00 	.word	0x000ffc00
 801ad44:	3ff00000 	.word	0x3ff00000

0801ad48 <PDM_Filter_setConfig>:
 801ad48:	4b6d      	ldr	r3, [pc, #436]	@ (801af00 <PDM_Filter_setConfig+0x1b8>)
 801ad4a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 801ad4c:	429a      	cmp	r2, r3
 801ad4e:	d12f      	bne.n	801adb0 <PDM_Filter_setConfig+0x68>
 801ad50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad52:	880e      	ldrh	r6, [r1, #0]
 801ad54:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801ad56:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801ad5a:	ed2d 8b02 	vpush	{d8}
 801ad5e:	4604      	mov	r4, r0
 801ad60:	1e72      	subs	r2, r6, #1
 801ad62:	460d      	mov	r5, r1
 801ad64:	2a06      	cmp	r2, #6
 801ad66:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801ad6a:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 801ad6e:	6421      	str	r1, [r4, #64]	@ 0x40
 801ad70:	b083      	sub	sp, #12
 801ad72:	d904      	bls.n	801ad7e <PDM_Filter_setConfig+0x36>
 801ad74:	42b8      	cmp	r0, r7
 801ad76:	f000 80bb 	beq.w	801aef0 <PDM_Filter_setConfig+0x1a8>
 801ad7a:	2008      	movs	r0, #8
 801ad7c:	e01d      	b.n	801adba <PDM_Filter_setConfig+0x72>
 801ad7e:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 801ad80:	42b2      	cmp	r2, r6
 801ad82:	d070      	beq.n	801ae66 <PDM_Filter_setConfig+0x11e>
 801ad84:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 801ad88:	f023 0301 	bic.w	r3, r3, #1
 801ad8c:	4333      	orrs	r3, r6
 801ad8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 801ad92:	6423      	str	r3, [r4, #64]	@ 0x40
 801ad94:	2a70      	cmp	r2, #112	@ 0x70
 801ad96:	f003 030f 	and.w	r3, r3, #15
 801ad9a:	f103 33ff 	add.w	r3, r3, #4294967295
 801ad9e:	d067      	beq.n	801ae70 <PDM_Filter_setConfig+0x128>
 801ada0:	2b06      	cmp	r3, #6
 801ada2:	d809      	bhi.n	801adb8 <PDM_Filter_setConfig+0x70>
 801ada4:	e8df f003 	tbb	[pc, r3]
 801ada8:	89868380 	.word	0x89868380
 801adac:	8f8c      	.short	0x8f8c
 801adae:	7d          	.byte	0x7d
 801adaf:	00          	.byte	0x00
 801adb0:	2004      	movs	r0, #4
 801adb2:	4770      	bx	lr
 801adb4:	4b53      	ldr	r3, [pc, #332]	@ (801af04 <PDM_Filter_setConfig+0x1bc>)
 801adb6:	64a3      	str	r3, [r4, #72]	@ 0x48
 801adb8:	2000      	movs	r0, #0
 801adba:	f117 0f0c 	cmn.w	r7, #12
 801adbe:	da0a      	bge.n	801add6 <PDM_Filter_setConfig+0x8e>
 801adc0:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 801adc4:	3040      	adds	r0, #64	@ 0x40
 801adc6:	80ab      	strh	r3, [r5, #4]
 801adc8:	886b      	ldrh	r3, [r5, #2]
 801adca:	8663      	strh	r3, [r4, #50]	@ 0x32
 801adcc:	8626      	strh	r6, [r4, #48]	@ 0x30
 801adce:	b003      	add	sp, #12
 801add0:	ecbd 8b02 	vpop	{d8}
 801add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801add6:	2f33      	cmp	r7, #51	@ 0x33
 801add8:	dc41      	bgt.n	801ae5e <PDM_Filter_setConfig+0x116>
 801adda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801addc:	f003 030f 	and.w	r3, r3, #15
 801ade0:	3b01      	subs	r3, #1
 801ade2:	2b06      	cmp	r3, #6
 801ade4:	d858      	bhi.n	801ae98 <PDM_Filter_setConfig+0x150>
 801ade6:	4948      	ldr	r1, [pc, #288]	@ (801af08 <PDM_Filter_setConfig+0x1c0>)
 801ade8:	4a48      	ldr	r2, [pc, #288]	@ (801af0c <PDM_Filter_setConfig+0x1c4>)
 801adea:	eddf 0a49 	vldr	s1, [pc, #292]	@ 801af10 <PDM_Filter_setConfig+0x1c8>
 801adee:	9001      	str	r0, [sp, #4]
 801adf0:	009b      	lsls	r3, r3, #2
 801adf2:	4419      	add	r1, r3
 801adf4:	edd1 7a00 	vldr	s15, [r1]
 801adf8:	4413      	add	r3, r2
 801adfa:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801adfe:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801ae02:	ed93 8a00 	vldr	s16, [r3]
 801ae06:	f001 fa99 	bl	801c33c <powf>
 801ae0a:	9801      	ldr	r0, [sp, #4]
 801ae0c:	eef0 8a40 	vmov.f32	s17, s0
 801ae10:	ee07 7a10 	vmov	s14, r7
 801ae14:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 801af14 <PDM_Filter_setConfig+0x1cc>
 801ae18:	9001      	str	r0, [sp, #4]
 801ae1a:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 801ae1e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 801ae22:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801ae26:	f001 fa89 	bl	801c33c <powf>
 801ae2a:	ee28 8a28 	vmul.f32	s16, s16, s17
 801ae2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801ae32:	f001 fae5 	bl	801c400 <roundf>
 801ae36:	9801      	ldr	r0, [sp, #4]
 801ae38:	886b      	ldrh	r3, [r5, #2]
 801ae3a:	8663      	strh	r3, [r4, #50]	@ 0x32
 801ae3c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801ae40:	8727      	strh	r7, [r4, #56]	@ 0x38
 801ae42:	8626      	strh	r6, [r4, #48]	@ 0x30
 801ae44:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 801ae48:	2800      	cmp	r0, #0
 801ae4a:	d1c0      	bne.n	801adce <PDM_Filter_setConfig+0x86>
 801ae4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ae4e:	2000      	movs	r0, #0
 801ae50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801ae54:	6423      	str	r3, [r4, #64]	@ 0x40
 801ae56:	b003      	add	sp, #12
 801ae58:	ecbd 8b02 	vpop	{d8}
 801ae5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae5e:	2333      	movs	r3, #51	@ 0x33
 801ae60:	3040      	adds	r0, #64	@ 0x40
 801ae62:	80ab      	strh	r3, [r5, #4]
 801ae64:	e7b0      	b.n	801adc8 <PDM_Filter_setConfig+0x80>
 801ae66:	42b8      	cmp	r0, r7
 801ae68:	d1a6      	bne.n	801adb8 <PDM_Filter_setConfig+0x70>
 801ae6a:	886b      	ldrh	r3, [r5, #2]
 801ae6c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801ae6e:	e7ed      	b.n	801ae4c <PDM_Filter_setConfig+0x104>
 801ae70:	2b06      	cmp	r3, #6
 801ae72:	d8a1      	bhi.n	801adb8 <PDM_Filter_setConfig+0x70>
 801ae74:	a201      	add	r2, pc, #4	@ (adr r2, 801ae7c <PDM_Filter_setConfig+0x134>)
 801ae76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae7a:	bf00      	nop
 801ae7c:	0801aeeb 	.word	0x0801aeeb
 801ae80:	0801aee5 	.word	0x0801aee5
 801ae84:	0801aed9 	.word	0x0801aed9
 801ae88:	0801aed3 	.word	0x0801aed3
 801ae8c:	0801adb5 	.word	0x0801adb5
 801ae90:	0801aecd 	.word	0x0801aecd
 801ae94:	0801aedf 	.word	0x0801aedf
 801ae98:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 801af18 <PDM_Filter_setConfig+0x1d0>
 801ae9c:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 801af1c <PDM_Filter_setConfig+0x1d4>
 801aea0:	e7b6      	b.n	801ae10 <PDM_Filter_setConfig+0xc8>
 801aea2:	4b1f      	ldr	r3, [pc, #124]	@ (801af20 <PDM_Filter_setConfig+0x1d8>)
 801aea4:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aea6:	e787      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aea8:	4b1e      	ldr	r3, [pc, #120]	@ (801af24 <PDM_Filter_setConfig+0x1dc>)
 801aeaa:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aeac:	e784      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aeae:	4b1e      	ldr	r3, [pc, #120]	@ (801af28 <PDM_Filter_setConfig+0x1e0>)
 801aeb0:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aeb2:	e781      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aeb4:	4b1d      	ldr	r3, [pc, #116]	@ (801af2c <PDM_Filter_setConfig+0x1e4>)
 801aeb6:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aeb8:	e77e      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aeba:	4b1d      	ldr	r3, [pc, #116]	@ (801af30 <PDM_Filter_setConfig+0x1e8>)
 801aebc:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aebe:	e77b      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aec0:	4b1c      	ldr	r3, [pc, #112]	@ (801af34 <PDM_Filter_setConfig+0x1ec>)
 801aec2:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aec4:	e778      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aec6:	4b1c      	ldr	r3, [pc, #112]	@ (801af38 <PDM_Filter_setConfig+0x1f0>)
 801aec8:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aeca:	e775      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aecc:	4b1b      	ldr	r3, [pc, #108]	@ (801af3c <PDM_Filter_setConfig+0x1f4>)
 801aece:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aed0:	e772      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aed2:	4b1b      	ldr	r3, [pc, #108]	@ (801af40 <PDM_Filter_setConfig+0x1f8>)
 801aed4:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aed6:	e76f      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aed8:	4b1a      	ldr	r3, [pc, #104]	@ (801af44 <PDM_Filter_setConfig+0x1fc>)
 801aeda:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aedc:	e76c      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aede:	4b1a      	ldr	r3, [pc, #104]	@ (801af48 <PDM_Filter_setConfig+0x200>)
 801aee0:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aee2:	e769      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aee4:	4b19      	ldr	r3, [pc, #100]	@ (801af4c <PDM_Filter_setConfig+0x204>)
 801aee6:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aee8:	e766      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aeea:	4b19      	ldr	r3, [pc, #100]	@ (801af50 <PDM_Filter_setConfig+0x208>)
 801aeec:	64a3      	str	r3, [r4, #72]	@ 0x48
 801aeee:	e763      	b.n	801adb8 <PDM_Filter_setConfig+0x70>
 801aef0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801aef2:	42b3      	cmp	r3, r6
 801aef4:	f47f af41 	bne.w	801ad7a <PDM_Filter_setConfig+0x32>
 801aef8:	886b      	ldrh	r3, [r5, #2]
 801aefa:	8663      	strh	r3, [r4, #50]	@ 0x32
 801aefc:	2008      	movs	r0, #8
 801aefe:	e766      	b.n	801adce <PDM_Filter_setConfig+0x86>
 801af00:	b5e8b5cd 	.word	0xb5e8b5cd
 801af04:	0801a029 	.word	0x0801a029
 801af08:	08021424 	.word	0x08021424
 801af0c:	08021440 	.word	0x08021440
 801af10:	42000000 	.word	0x42000000
 801af14:	3d4ccccd 	.word	0x3d4ccccd
 801af18:	4f800000 	.word	0x4f800000
 801af1c:	00000000 	.word	0x00000000
 801af20:	08019429 	.word	0x08019429
 801af24:	080195b1 	.word	0x080195b1
 801af28:	08019799 	.word	0x08019799
 801af2c:	080199b5 	.word	0x080199b5
 801af30:	08019c49 	.word	0x08019c49
 801af34:	08019189 	.word	0x08019189
 801af38:	080192a1 	.word	0x080192a1
 801af3c:	0801a111 	.word	0x0801a111
 801af40:	0801a885 	.word	0x0801a885
 801af44:	0801a67d 	.word	0x0801a67d
 801af48:	0801a255 	.word	0x0801a255
 801af4c:	0801a4dd 	.word	0x0801a4dd
 801af50:	0801a371 	.word	0x0801a371

0801af54 <PDM_Filter>:
 801af54:	b410      	push	{r4}
 801af56:	4b0b      	ldr	r3, [pc, #44]	@ (801af84 <PDM_Filter+0x30>)
 801af58:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 801af5a:	429c      	cmp	r4, r3
 801af5c:	d107      	bne.n	801af6e <PDM_Filter+0x1a>
 801af5e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801af60:	05dc      	lsls	r4, r3, #23
 801af62:	d508      	bpl.n	801af76 <PDM_Filter+0x22>
 801af64:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801af66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af6a:	320c      	adds	r2, #12
 801af6c:	4718      	bx	r3
 801af6e:	2004      	movs	r0, #4
 801af70:	f85d 4b04 	ldr.w	r4, [sp], #4
 801af74:	4770      	bx	lr
 801af76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801af7a:	bf14      	ite	ne
 801af7c:	2020      	movne	r0, #32
 801af7e:	2030      	moveq	r0, #48	@ 0x30
 801af80:	e7f6      	b.n	801af70 <PDM_Filter+0x1c>
 801af82:	bf00      	nop
 801af84:	b5e8b5cd 	.word	0xb5e8b5cd

0801af88 <malloc>:
 801af88:	4b02      	ldr	r3, [pc, #8]	@ (801af94 <malloc+0xc>)
 801af8a:	4601      	mov	r1, r0
 801af8c:	6818      	ldr	r0, [r3, #0]
 801af8e:	f000 b82d 	b.w	801afec <_malloc_r>
 801af92:	bf00      	nop
 801af94:	20000598 	.word	0x20000598

0801af98 <free>:
 801af98:	4b02      	ldr	r3, [pc, #8]	@ (801afa4 <free+0xc>)
 801af9a:	4601      	mov	r1, r0
 801af9c:	6818      	ldr	r0, [r3, #0]
 801af9e:	f000 bba7 	b.w	801b6f0 <_free_r>
 801afa2:	bf00      	nop
 801afa4:	20000598 	.word	0x20000598

0801afa8 <sbrk_aligned>:
 801afa8:	b570      	push	{r4, r5, r6, lr}
 801afaa:	4e0f      	ldr	r6, [pc, #60]	@ (801afe8 <sbrk_aligned+0x40>)
 801afac:	460c      	mov	r4, r1
 801afae:	6831      	ldr	r1, [r6, #0]
 801afb0:	4605      	mov	r5, r0
 801afb2:	b911      	cbnz	r1, 801afba <sbrk_aligned+0x12>
 801afb4:	f000 fb3e 	bl	801b634 <_sbrk_r>
 801afb8:	6030      	str	r0, [r6, #0]
 801afba:	4621      	mov	r1, r4
 801afbc:	4628      	mov	r0, r5
 801afbe:	f000 fb39 	bl	801b634 <_sbrk_r>
 801afc2:	1c43      	adds	r3, r0, #1
 801afc4:	d103      	bne.n	801afce <sbrk_aligned+0x26>
 801afc6:	f04f 34ff 	mov.w	r4, #4294967295
 801afca:	4620      	mov	r0, r4
 801afcc:	bd70      	pop	{r4, r5, r6, pc}
 801afce:	1cc4      	adds	r4, r0, #3
 801afd0:	f024 0403 	bic.w	r4, r4, #3
 801afd4:	42a0      	cmp	r0, r4
 801afd6:	d0f8      	beq.n	801afca <sbrk_aligned+0x22>
 801afd8:	1a21      	subs	r1, r4, r0
 801afda:	4628      	mov	r0, r5
 801afdc:	f000 fb2a 	bl	801b634 <_sbrk_r>
 801afe0:	3001      	adds	r0, #1
 801afe2:	d1f2      	bne.n	801afca <sbrk_aligned+0x22>
 801afe4:	e7ef      	b.n	801afc6 <sbrk_aligned+0x1e>
 801afe6:	bf00      	nop
 801afe8:	2000c448 	.word	0x2000c448

0801afec <_malloc_r>:
 801afec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aff0:	1ccd      	adds	r5, r1, #3
 801aff2:	f025 0503 	bic.w	r5, r5, #3
 801aff6:	3508      	adds	r5, #8
 801aff8:	2d0c      	cmp	r5, #12
 801affa:	bf38      	it	cc
 801affc:	250c      	movcc	r5, #12
 801affe:	2d00      	cmp	r5, #0
 801b000:	4606      	mov	r6, r0
 801b002:	db01      	blt.n	801b008 <_malloc_r+0x1c>
 801b004:	42a9      	cmp	r1, r5
 801b006:	d904      	bls.n	801b012 <_malloc_r+0x26>
 801b008:	230c      	movs	r3, #12
 801b00a:	6033      	str	r3, [r6, #0]
 801b00c:	2000      	movs	r0, #0
 801b00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b012:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b0e8 <_malloc_r+0xfc>
 801b016:	f000 f869 	bl	801b0ec <__malloc_lock>
 801b01a:	f8d8 3000 	ldr.w	r3, [r8]
 801b01e:	461c      	mov	r4, r3
 801b020:	bb44      	cbnz	r4, 801b074 <_malloc_r+0x88>
 801b022:	4629      	mov	r1, r5
 801b024:	4630      	mov	r0, r6
 801b026:	f7ff ffbf 	bl	801afa8 <sbrk_aligned>
 801b02a:	1c43      	adds	r3, r0, #1
 801b02c:	4604      	mov	r4, r0
 801b02e:	d158      	bne.n	801b0e2 <_malloc_r+0xf6>
 801b030:	f8d8 4000 	ldr.w	r4, [r8]
 801b034:	4627      	mov	r7, r4
 801b036:	2f00      	cmp	r7, #0
 801b038:	d143      	bne.n	801b0c2 <_malloc_r+0xd6>
 801b03a:	2c00      	cmp	r4, #0
 801b03c:	d04b      	beq.n	801b0d6 <_malloc_r+0xea>
 801b03e:	6823      	ldr	r3, [r4, #0]
 801b040:	4639      	mov	r1, r7
 801b042:	4630      	mov	r0, r6
 801b044:	eb04 0903 	add.w	r9, r4, r3
 801b048:	f000 faf4 	bl	801b634 <_sbrk_r>
 801b04c:	4581      	cmp	r9, r0
 801b04e:	d142      	bne.n	801b0d6 <_malloc_r+0xea>
 801b050:	6821      	ldr	r1, [r4, #0]
 801b052:	1a6d      	subs	r5, r5, r1
 801b054:	4629      	mov	r1, r5
 801b056:	4630      	mov	r0, r6
 801b058:	f7ff ffa6 	bl	801afa8 <sbrk_aligned>
 801b05c:	3001      	adds	r0, #1
 801b05e:	d03a      	beq.n	801b0d6 <_malloc_r+0xea>
 801b060:	6823      	ldr	r3, [r4, #0]
 801b062:	442b      	add	r3, r5
 801b064:	6023      	str	r3, [r4, #0]
 801b066:	f8d8 3000 	ldr.w	r3, [r8]
 801b06a:	685a      	ldr	r2, [r3, #4]
 801b06c:	bb62      	cbnz	r2, 801b0c8 <_malloc_r+0xdc>
 801b06e:	f8c8 7000 	str.w	r7, [r8]
 801b072:	e00f      	b.n	801b094 <_malloc_r+0xa8>
 801b074:	6822      	ldr	r2, [r4, #0]
 801b076:	1b52      	subs	r2, r2, r5
 801b078:	d420      	bmi.n	801b0bc <_malloc_r+0xd0>
 801b07a:	2a0b      	cmp	r2, #11
 801b07c:	d917      	bls.n	801b0ae <_malloc_r+0xc2>
 801b07e:	1961      	adds	r1, r4, r5
 801b080:	42a3      	cmp	r3, r4
 801b082:	6025      	str	r5, [r4, #0]
 801b084:	bf18      	it	ne
 801b086:	6059      	strne	r1, [r3, #4]
 801b088:	6863      	ldr	r3, [r4, #4]
 801b08a:	bf08      	it	eq
 801b08c:	f8c8 1000 	streq.w	r1, [r8]
 801b090:	5162      	str	r2, [r4, r5]
 801b092:	604b      	str	r3, [r1, #4]
 801b094:	4630      	mov	r0, r6
 801b096:	f000 f82f 	bl	801b0f8 <__malloc_unlock>
 801b09a:	f104 000b 	add.w	r0, r4, #11
 801b09e:	1d23      	adds	r3, r4, #4
 801b0a0:	f020 0007 	bic.w	r0, r0, #7
 801b0a4:	1ac2      	subs	r2, r0, r3
 801b0a6:	bf1c      	itt	ne
 801b0a8:	1a1b      	subne	r3, r3, r0
 801b0aa:	50a3      	strne	r3, [r4, r2]
 801b0ac:	e7af      	b.n	801b00e <_malloc_r+0x22>
 801b0ae:	6862      	ldr	r2, [r4, #4]
 801b0b0:	42a3      	cmp	r3, r4
 801b0b2:	bf0c      	ite	eq
 801b0b4:	f8c8 2000 	streq.w	r2, [r8]
 801b0b8:	605a      	strne	r2, [r3, #4]
 801b0ba:	e7eb      	b.n	801b094 <_malloc_r+0xa8>
 801b0bc:	4623      	mov	r3, r4
 801b0be:	6864      	ldr	r4, [r4, #4]
 801b0c0:	e7ae      	b.n	801b020 <_malloc_r+0x34>
 801b0c2:	463c      	mov	r4, r7
 801b0c4:	687f      	ldr	r7, [r7, #4]
 801b0c6:	e7b6      	b.n	801b036 <_malloc_r+0x4a>
 801b0c8:	461a      	mov	r2, r3
 801b0ca:	685b      	ldr	r3, [r3, #4]
 801b0cc:	42a3      	cmp	r3, r4
 801b0ce:	d1fb      	bne.n	801b0c8 <_malloc_r+0xdc>
 801b0d0:	2300      	movs	r3, #0
 801b0d2:	6053      	str	r3, [r2, #4]
 801b0d4:	e7de      	b.n	801b094 <_malloc_r+0xa8>
 801b0d6:	230c      	movs	r3, #12
 801b0d8:	6033      	str	r3, [r6, #0]
 801b0da:	4630      	mov	r0, r6
 801b0dc:	f000 f80c 	bl	801b0f8 <__malloc_unlock>
 801b0e0:	e794      	b.n	801b00c <_malloc_r+0x20>
 801b0e2:	6005      	str	r5, [r0, #0]
 801b0e4:	e7d6      	b.n	801b094 <_malloc_r+0xa8>
 801b0e6:	bf00      	nop
 801b0e8:	2000c44c 	.word	0x2000c44c

0801b0ec <__malloc_lock>:
 801b0ec:	4801      	ldr	r0, [pc, #4]	@ (801b0f4 <__malloc_lock+0x8>)
 801b0ee:	f000 baee 	b.w	801b6ce <__retarget_lock_acquire_recursive>
 801b0f2:	bf00      	nop
 801b0f4:	2000c590 	.word	0x2000c590

0801b0f8 <__malloc_unlock>:
 801b0f8:	4801      	ldr	r0, [pc, #4]	@ (801b100 <__malloc_unlock+0x8>)
 801b0fa:	f000 bae9 	b.w	801b6d0 <__retarget_lock_release_recursive>
 801b0fe:	bf00      	nop
 801b100:	2000c590 	.word	0x2000c590

0801b104 <std>:
 801b104:	2300      	movs	r3, #0
 801b106:	b510      	push	{r4, lr}
 801b108:	4604      	mov	r4, r0
 801b10a:	e9c0 3300 	strd	r3, r3, [r0]
 801b10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b112:	6083      	str	r3, [r0, #8]
 801b114:	8181      	strh	r1, [r0, #12]
 801b116:	6643      	str	r3, [r0, #100]	@ 0x64
 801b118:	81c2      	strh	r2, [r0, #14]
 801b11a:	6183      	str	r3, [r0, #24]
 801b11c:	4619      	mov	r1, r3
 801b11e:	2208      	movs	r2, #8
 801b120:	305c      	adds	r0, #92	@ 0x5c
 801b122:	f000 fa21 	bl	801b568 <memset>
 801b126:	4b0d      	ldr	r3, [pc, #52]	@ (801b15c <std+0x58>)
 801b128:	6263      	str	r3, [r4, #36]	@ 0x24
 801b12a:	4b0d      	ldr	r3, [pc, #52]	@ (801b160 <std+0x5c>)
 801b12c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b12e:	4b0d      	ldr	r3, [pc, #52]	@ (801b164 <std+0x60>)
 801b130:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b132:	4b0d      	ldr	r3, [pc, #52]	@ (801b168 <std+0x64>)
 801b134:	6323      	str	r3, [r4, #48]	@ 0x30
 801b136:	4b0d      	ldr	r3, [pc, #52]	@ (801b16c <std+0x68>)
 801b138:	6224      	str	r4, [r4, #32]
 801b13a:	429c      	cmp	r4, r3
 801b13c:	d006      	beq.n	801b14c <std+0x48>
 801b13e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b142:	4294      	cmp	r4, r2
 801b144:	d002      	beq.n	801b14c <std+0x48>
 801b146:	33d0      	adds	r3, #208	@ 0xd0
 801b148:	429c      	cmp	r4, r3
 801b14a:	d105      	bne.n	801b158 <std+0x54>
 801b14c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b154:	f000 baba 	b.w	801b6cc <__retarget_lock_init_recursive>
 801b158:	bd10      	pop	{r4, pc}
 801b15a:	bf00      	nop
 801b15c:	0801b3b9 	.word	0x0801b3b9
 801b160:	0801b3db 	.word	0x0801b3db
 801b164:	0801b413 	.word	0x0801b413
 801b168:	0801b437 	.word	0x0801b437
 801b16c:	2000c450 	.word	0x2000c450

0801b170 <stdio_exit_handler>:
 801b170:	4a02      	ldr	r2, [pc, #8]	@ (801b17c <stdio_exit_handler+0xc>)
 801b172:	4903      	ldr	r1, [pc, #12]	@ (801b180 <stdio_exit_handler+0x10>)
 801b174:	4803      	ldr	r0, [pc, #12]	@ (801b184 <stdio_exit_handler+0x14>)
 801b176:	f000 b869 	b.w	801b24c <_fwalk_sglue>
 801b17a:	bf00      	nop
 801b17c:	2000058c 	.word	0x2000058c
 801b180:	0801c0dd 	.word	0x0801c0dd
 801b184:	2000059c 	.word	0x2000059c

0801b188 <cleanup_stdio>:
 801b188:	6841      	ldr	r1, [r0, #4]
 801b18a:	4b0c      	ldr	r3, [pc, #48]	@ (801b1bc <cleanup_stdio+0x34>)
 801b18c:	4299      	cmp	r1, r3
 801b18e:	b510      	push	{r4, lr}
 801b190:	4604      	mov	r4, r0
 801b192:	d001      	beq.n	801b198 <cleanup_stdio+0x10>
 801b194:	f000 ffa2 	bl	801c0dc <_fflush_r>
 801b198:	68a1      	ldr	r1, [r4, #8]
 801b19a:	4b09      	ldr	r3, [pc, #36]	@ (801b1c0 <cleanup_stdio+0x38>)
 801b19c:	4299      	cmp	r1, r3
 801b19e:	d002      	beq.n	801b1a6 <cleanup_stdio+0x1e>
 801b1a0:	4620      	mov	r0, r4
 801b1a2:	f000 ff9b 	bl	801c0dc <_fflush_r>
 801b1a6:	68e1      	ldr	r1, [r4, #12]
 801b1a8:	4b06      	ldr	r3, [pc, #24]	@ (801b1c4 <cleanup_stdio+0x3c>)
 801b1aa:	4299      	cmp	r1, r3
 801b1ac:	d004      	beq.n	801b1b8 <cleanup_stdio+0x30>
 801b1ae:	4620      	mov	r0, r4
 801b1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1b4:	f000 bf92 	b.w	801c0dc <_fflush_r>
 801b1b8:	bd10      	pop	{r4, pc}
 801b1ba:	bf00      	nop
 801b1bc:	2000c450 	.word	0x2000c450
 801b1c0:	2000c4b8 	.word	0x2000c4b8
 801b1c4:	2000c520 	.word	0x2000c520

0801b1c8 <global_stdio_init.part.0>:
 801b1c8:	b510      	push	{r4, lr}
 801b1ca:	4b0b      	ldr	r3, [pc, #44]	@ (801b1f8 <global_stdio_init.part.0+0x30>)
 801b1cc:	4c0b      	ldr	r4, [pc, #44]	@ (801b1fc <global_stdio_init.part.0+0x34>)
 801b1ce:	4a0c      	ldr	r2, [pc, #48]	@ (801b200 <global_stdio_init.part.0+0x38>)
 801b1d0:	601a      	str	r2, [r3, #0]
 801b1d2:	4620      	mov	r0, r4
 801b1d4:	2200      	movs	r2, #0
 801b1d6:	2104      	movs	r1, #4
 801b1d8:	f7ff ff94 	bl	801b104 <std>
 801b1dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b1e0:	2201      	movs	r2, #1
 801b1e2:	2109      	movs	r1, #9
 801b1e4:	f7ff ff8e 	bl	801b104 <std>
 801b1e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b1ec:	2202      	movs	r2, #2
 801b1ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1f2:	2112      	movs	r1, #18
 801b1f4:	f7ff bf86 	b.w	801b104 <std>
 801b1f8:	2000c588 	.word	0x2000c588
 801b1fc:	2000c450 	.word	0x2000c450
 801b200:	0801b171 	.word	0x0801b171

0801b204 <__sfp_lock_acquire>:
 801b204:	4801      	ldr	r0, [pc, #4]	@ (801b20c <__sfp_lock_acquire+0x8>)
 801b206:	f000 ba62 	b.w	801b6ce <__retarget_lock_acquire_recursive>
 801b20a:	bf00      	nop
 801b20c:	2000c591 	.word	0x2000c591

0801b210 <__sfp_lock_release>:
 801b210:	4801      	ldr	r0, [pc, #4]	@ (801b218 <__sfp_lock_release+0x8>)
 801b212:	f000 ba5d 	b.w	801b6d0 <__retarget_lock_release_recursive>
 801b216:	bf00      	nop
 801b218:	2000c591 	.word	0x2000c591

0801b21c <__sinit>:
 801b21c:	b510      	push	{r4, lr}
 801b21e:	4604      	mov	r4, r0
 801b220:	f7ff fff0 	bl	801b204 <__sfp_lock_acquire>
 801b224:	6a23      	ldr	r3, [r4, #32]
 801b226:	b11b      	cbz	r3, 801b230 <__sinit+0x14>
 801b228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b22c:	f7ff bff0 	b.w	801b210 <__sfp_lock_release>
 801b230:	4b04      	ldr	r3, [pc, #16]	@ (801b244 <__sinit+0x28>)
 801b232:	6223      	str	r3, [r4, #32]
 801b234:	4b04      	ldr	r3, [pc, #16]	@ (801b248 <__sinit+0x2c>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d1f5      	bne.n	801b228 <__sinit+0xc>
 801b23c:	f7ff ffc4 	bl	801b1c8 <global_stdio_init.part.0>
 801b240:	e7f2      	b.n	801b228 <__sinit+0xc>
 801b242:	bf00      	nop
 801b244:	0801b189 	.word	0x0801b189
 801b248:	2000c588 	.word	0x2000c588

0801b24c <_fwalk_sglue>:
 801b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b250:	4607      	mov	r7, r0
 801b252:	4688      	mov	r8, r1
 801b254:	4614      	mov	r4, r2
 801b256:	2600      	movs	r6, #0
 801b258:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b25c:	f1b9 0901 	subs.w	r9, r9, #1
 801b260:	d505      	bpl.n	801b26e <_fwalk_sglue+0x22>
 801b262:	6824      	ldr	r4, [r4, #0]
 801b264:	2c00      	cmp	r4, #0
 801b266:	d1f7      	bne.n	801b258 <_fwalk_sglue+0xc>
 801b268:	4630      	mov	r0, r6
 801b26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b26e:	89ab      	ldrh	r3, [r5, #12]
 801b270:	2b01      	cmp	r3, #1
 801b272:	d907      	bls.n	801b284 <_fwalk_sglue+0x38>
 801b274:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b278:	3301      	adds	r3, #1
 801b27a:	d003      	beq.n	801b284 <_fwalk_sglue+0x38>
 801b27c:	4629      	mov	r1, r5
 801b27e:	4638      	mov	r0, r7
 801b280:	47c0      	blx	r8
 801b282:	4306      	orrs	r6, r0
 801b284:	3568      	adds	r5, #104	@ 0x68
 801b286:	e7e9      	b.n	801b25c <_fwalk_sglue+0x10>

0801b288 <iprintf>:
 801b288:	b40f      	push	{r0, r1, r2, r3}
 801b28a:	b507      	push	{r0, r1, r2, lr}
 801b28c:	4906      	ldr	r1, [pc, #24]	@ (801b2a8 <iprintf+0x20>)
 801b28e:	ab04      	add	r3, sp, #16
 801b290:	6808      	ldr	r0, [r1, #0]
 801b292:	f853 2b04 	ldr.w	r2, [r3], #4
 801b296:	6881      	ldr	r1, [r0, #8]
 801b298:	9301      	str	r3, [sp, #4]
 801b29a:	f000 fbf5 	bl	801ba88 <_vfiprintf_r>
 801b29e:	b003      	add	sp, #12
 801b2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2a4:	b004      	add	sp, #16
 801b2a6:	4770      	bx	lr
 801b2a8:	20000598 	.word	0x20000598

0801b2ac <putchar>:
 801b2ac:	4b02      	ldr	r3, [pc, #8]	@ (801b2b8 <putchar+0xc>)
 801b2ae:	4601      	mov	r1, r0
 801b2b0:	6818      	ldr	r0, [r3, #0]
 801b2b2:	6882      	ldr	r2, [r0, #8]
 801b2b4:	f000 bf9c 	b.w	801c1f0 <_putc_r>
 801b2b8:	20000598 	.word	0x20000598

0801b2bc <_puts_r>:
 801b2bc:	6a03      	ldr	r3, [r0, #32]
 801b2be:	b570      	push	{r4, r5, r6, lr}
 801b2c0:	6884      	ldr	r4, [r0, #8]
 801b2c2:	4605      	mov	r5, r0
 801b2c4:	460e      	mov	r6, r1
 801b2c6:	b90b      	cbnz	r3, 801b2cc <_puts_r+0x10>
 801b2c8:	f7ff ffa8 	bl	801b21c <__sinit>
 801b2cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b2ce:	07db      	lsls	r3, r3, #31
 801b2d0:	d405      	bmi.n	801b2de <_puts_r+0x22>
 801b2d2:	89a3      	ldrh	r3, [r4, #12]
 801b2d4:	0598      	lsls	r0, r3, #22
 801b2d6:	d402      	bmi.n	801b2de <_puts_r+0x22>
 801b2d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b2da:	f000 f9f8 	bl	801b6ce <__retarget_lock_acquire_recursive>
 801b2de:	89a3      	ldrh	r3, [r4, #12]
 801b2e0:	0719      	lsls	r1, r3, #28
 801b2e2:	d502      	bpl.n	801b2ea <_puts_r+0x2e>
 801b2e4:	6923      	ldr	r3, [r4, #16]
 801b2e6:	2b00      	cmp	r3, #0
 801b2e8:	d135      	bne.n	801b356 <_puts_r+0x9a>
 801b2ea:	4621      	mov	r1, r4
 801b2ec:	4628      	mov	r0, r5
 801b2ee:	f000 f8e5 	bl	801b4bc <__swsetup_r>
 801b2f2:	b380      	cbz	r0, 801b356 <_puts_r+0x9a>
 801b2f4:	f04f 35ff 	mov.w	r5, #4294967295
 801b2f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b2fa:	07da      	lsls	r2, r3, #31
 801b2fc:	d405      	bmi.n	801b30a <_puts_r+0x4e>
 801b2fe:	89a3      	ldrh	r3, [r4, #12]
 801b300:	059b      	lsls	r3, r3, #22
 801b302:	d402      	bmi.n	801b30a <_puts_r+0x4e>
 801b304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b306:	f000 f9e3 	bl	801b6d0 <__retarget_lock_release_recursive>
 801b30a:	4628      	mov	r0, r5
 801b30c:	bd70      	pop	{r4, r5, r6, pc}
 801b30e:	2b00      	cmp	r3, #0
 801b310:	da04      	bge.n	801b31c <_puts_r+0x60>
 801b312:	69a2      	ldr	r2, [r4, #24]
 801b314:	429a      	cmp	r2, r3
 801b316:	dc17      	bgt.n	801b348 <_puts_r+0x8c>
 801b318:	290a      	cmp	r1, #10
 801b31a:	d015      	beq.n	801b348 <_puts_r+0x8c>
 801b31c:	6823      	ldr	r3, [r4, #0]
 801b31e:	1c5a      	adds	r2, r3, #1
 801b320:	6022      	str	r2, [r4, #0]
 801b322:	7019      	strb	r1, [r3, #0]
 801b324:	68a3      	ldr	r3, [r4, #8]
 801b326:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b32a:	3b01      	subs	r3, #1
 801b32c:	60a3      	str	r3, [r4, #8]
 801b32e:	2900      	cmp	r1, #0
 801b330:	d1ed      	bne.n	801b30e <_puts_r+0x52>
 801b332:	2b00      	cmp	r3, #0
 801b334:	da11      	bge.n	801b35a <_puts_r+0x9e>
 801b336:	4622      	mov	r2, r4
 801b338:	210a      	movs	r1, #10
 801b33a:	4628      	mov	r0, r5
 801b33c:	f000 f87f 	bl	801b43e <__swbuf_r>
 801b340:	3001      	adds	r0, #1
 801b342:	d0d7      	beq.n	801b2f4 <_puts_r+0x38>
 801b344:	250a      	movs	r5, #10
 801b346:	e7d7      	b.n	801b2f8 <_puts_r+0x3c>
 801b348:	4622      	mov	r2, r4
 801b34a:	4628      	mov	r0, r5
 801b34c:	f000 f877 	bl	801b43e <__swbuf_r>
 801b350:	3001      	adds	r0, #1
 801b352:	d1e7      	bne.n	801b324 <_puts_r+0x68>
 801b354:	e7ce      	b.n	801b2f4 <_puts_r+0x38>
 801b356:	3e01      	subs	r6, #1
 801b358:	e7e4      	b.n	801b324 <_puts_r+0x68>
 801b35a:	6823      	ldr	r3, [r4, #0]
 801b35c:	1c5a      	adds	r2, r3, #1
 801b35e:	6022      	str	r2, [r4, #0]
 801b360:	220a      	movs	r2, #10
 801b362:	701a      	strb	r2, [r3, #0]
 801b364:	e7ee      	b.n	801b344 <_puts_r+0x88>
	...

0801b368 <puts>:
 801b368:	4b02      	ldr	r3, [pc, #8]	@ (801b374 <puts+0xc>)
 801b36a:	4601      	mov	r1, r0
 801b36c:	6818      	ldr	r0, [r3, #0]
 801b36e:	f7ff bfa5 	b.w	801b2bc <_puts_r>
 801b372:	bf00      	nop
 801b374:	20000598 	.word	0x20000598

0801b378 <siprintf>:
 801b378:	b40e      	push	{r1, r2, r3}
 801b37a:	b500      	push	{lr}
 801b37c:	b09c      	sub	sp, #112	@ 0x70
 801b37e:	ab1d      	add	r3, sp, #116	@ 0x74
 801b380:	9002      	str	r0, [sp, #8]
 801b382:	9006      	str	r0, [sp, #24]
 801b384:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b388:	4809      	ldr	r0, [pc, #36]	@ (801b3b0 <siprintf+0x38>)
 801b38a:	9107      	str	r1, [sp, #28]
 801b38c:	9104      	str	r1, [sp, #16]
 801b38e:	4909      	ldr	r1, [pc, #36]	@ (801b3b4 <siprintf+0x3c>)
 801b390:	f853 2b04 	ldr.w	r2, [r3], #4
 801b394:	9105      	str	r1, [sp, #20]
 801b396:	6800      	ldr	r0, [r0, #0]
 801b398:	9301      	str	r3, [sp, #4]
 801b39a:	a902      	add	r1, sp, #8
 801b39c:	f000 fa4e 	bl	801b83c <_svfiprintf_r>
 801b3a0:	9b02      	ldr	r3, [sp, #8]
 801b3a2:	2200      	movs	r2, #0
 801b3a4:	701a      	strb	r2, [r3, #0]
 801b3a6:	b01c      	add	sp, #112	@ 0x70
 801b3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3ac:	b003      	add	sp, #12
 801b3ae:	4770      	bx	lr
 801b3b0:	20000598 	.word	0x20000598
 801b3b4:	ffff0208 	.word	0xffff0208

0801b3b8 <__sread>:
 801b3b8:	b510      	push	{r4, lr}
 801b3ba:	460c      	mov	r4, r1
 801b3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3c0:	f000 f926 	bl	801b610 <_read_r>
 801b3c4:	2800      	cmp	r0, #0
 801b3c6:	bfab      	itete	ge
 801b3c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b3ca:	89a3      	ldrhlt	r3, [r4, #12]
 801b3cc:	181b      	addge	r3, r3, r0
 801b3ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b3d2:	bfac      	ite	ge
 801b3d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b3d6:	81a3      	strhlt	r3, [r4, #12]
 801b3d8:	bd10      	pop	{r4, pc}

0801b3da <__swrite>:
 801b3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3de:	461f      	mov	r7, r3
 801b3e0:	898b      	ldrh	r3, [r1, #12]
 801b3e2:	05db      	lsls	r3, r3, #23
 801b3e4:	4605      	mov	r5, r0
 801b3e6:	460c      	mov	r4, r1
 801b3e8:	4616      	mov	r6, r2
 801b3ea:	d505      	bpl.n	801b3f8 <__swrite+0x1e>
 801b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3f0:	2302      	movs	r3, #2
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	f000 f8fa 	bl	801b5ec <_lseek_r>
 801b3f8:	89a3      	ldrh	r3, [r4, #12]
 801b3fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b3fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b402:	81a3      	strh	r3, [r4, #12]
 801b404:	4632      	mov	r2, r6
 801b406:	463b      	mov	r3, r7
 801b408:	4628      	mov	r0, r5
 801b40a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b40e:	f000 b921 	b.w	801b654 <_write_r>

0801b412 <__sseek>:
 801b412:	b510      	push	{r4, lr}
 801b414:	460c      	mov	r4, r1
 801b416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b41a:	f000 f8e7 	bl	801b5ec <_lseek_r>
 801b41e:	1c43      	adds	r3, r0, #1
 801b420:	89a3      	ldrh	r3, [r4, #12]
 801b422:	bf15      	itete	ne
 801b424:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b426:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b42a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b42e:	81a3      	strheq	r3, [r4, #12]
 801b430:	bf18      	it	ne
 801b432:	81a3      	strhne	r3, [r4, #12]
 801b434:	bd10      	pop	{r4, pc}

0801b436 <__sclose>:
 801b436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b43a:	f000 b8c7 	b.w	801b5cc <_close_r>

0801b43e <__swbuf_r>:
 801b43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b440:	460e      	mov	r6, r1
 801b442:	4614      	mov	r4, r2
 801b444:	4605      	mov	r5, r0
 801b446:	b118      	cbz	r0, 801b450 <__swbuf_r+0x12>
 801b448:	6a03      	ldr	r3, [r0, #32]
 801b44a:	b90b      	cbnz	r3, 801b450 <__swbuf_r+0x12>
 801b44c:	f7ff fee6 	bl	801b21c <__sinit>
 801b450:	69a3      	ldr	r3, [r4, #24]
 801b452:	60a3      	str	r3, [r4, #8]
 801b454:	89a3      	ldrh	r3, [r4, #12]
 801b456:	071a      	lsls	r2, r3, #28
 801b458:	d501      	bpl.n	801b45e <__swbuf_r+0x20>
 801b45a:	6923      	ldr	r3, [r4, #16]
 801b45c:	b943      	cbnz	r3, 801b470 <__swbuf_r+0x32>
 801b45e:	4621      	mov	r1, r4
 801b460:	4628      	mov	r0, r5
 801b462:	f000 f82b 	bl	801b4bc <__swsetup_r>
 801b466:	b118      	cbz	r0, 801b470 <__swbuf_r+0x32>
 801b468:	f04f 37ff 	mov.w	r7, #4294967295
 801b46c:	4638      	mov	r0, r7
 801b46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b470:	6823      	ldr	r3, [r4, #0]
 801b472:	6922      	ldr	r2, [r4, #16]
 801b474:	1a98      	subs	r0, r3, r2
 801b476:	6963      	ldr	r3, [r4, #20]
 801b478:	b2f6      	uxtb	r6, r6
 801b47a:	4283      	cmp	r3, r0
 801b47c:	4637      	mov	r7, r6
 801b47e:	dc05      	bgt.n	801b48c <__swbuf_r+0x4e>
 801b480:	4621      	mov	r1, r4
 801b482:	4628      	mov	r0, r5
 801b484:	f000 fe2a 	bl	801c0dc <_fflush_r>
 801b488:	2800      	cmp	r0, #0
 801b48a:	d1ed      	bne.n	801b468 <__swbuf_r+0x2a>
 801b48c:	68a3      	ldr	r3, [r4, #8]
 801b48e:	3b01      	subs	r3, #1
 801b490:	60a3      	str	r3, [r4, #8]
 801b492:	6823      	ldr	r3, [r4, #0]
 801b494:	1c5a      	adds	r2, r3, #1
 801b496:	6022      	str	r2, [r4, #0]
 801b498:	701e      	strb	r6, [r3, #0]
 801b49a:	6962      	ldr	r2, [r4, #20]
 801b49c:	1c43      	adds	r3, r0, #1
 801b49e:	429a      	cmp	r2, r3
 801b4a0:	d004      	beq.n	801b4ac <__swbuf_r+0x6e>
 801b4a2:	89a3      	ldrh	r3, [r4, #12]
 801b4a4:	07db      	lsls	r3, r3, #31
 801b4a6:	d5e1      	bpl.n	801b46c <__swbuf_r+0x2e>
 801b4a8:	2e0a      	cmp	r6, #10
 801b4aa:	d1df      	bne.n	801b46c <__swbuf_r+0x2e>
 801b4ac:	4621      	mov	r1, r4
 801b4ae:	4628      	mov	r0, r5
 801b4b0:	f000 fe14 	bl	801c0dc <_fflush_r>
 801b4b4:	2800      	cmp	r0, #0
 801b4b6:	d0d9      	beq.n	801b46c <__swbuf_r+0x2e>
 801b4b8:	e7d6      	b.n	801b468 <__swbuf_r+0x2a>
	...

0801b4bc <__swsetup_r>:
 801b4bc:	b538      	push	{r3, r4, r5, lr}
 801b4be:	4b29      	ldr	r3, [pc, #164]	@ (801b564 <__swsetup_r+0xa8>)
 801b4c0:	4605      	mov	r5, r0
 801b4c2:	6818      	ldr	r0, [r3, #0]
 801b4c4:	460c      	mov	r4, r1
 801b4c6:	b118      	cbz	r0, 801b4d0 <__swsetup_r+0x14>
 801b4c8:	6a03      	ldr	r3, [r0, #32]
 801b4ca:	b90b      	cbnz	r3, 801b4d0 <__swsetup_r+0x14>
 801b4cc:	f7ff fea6 	bl	801b21c <__sinit>
 801b4d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4d4:	0719      	lsls	r1, r3, #28
 801b4d6:	d422      	bmi.n	801b51e <__swsetup_r+0x62>
 801b4d8:	06da      	lsls	r2, r3, #27
 801b4da:	d407      	bmi.n	801b4ec <__swsetup_r+0x30>
 801b4dc:	2209      	movs	r2, #9
 801b4de:	602a      	str	r2, [r5, #0]
 801b4e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b4e4:	81a3      	strh	r3, [r4, #12]
 801b4e6:	f04f 30ff 	mov.w	r0, #4294967295
 801b4ea:	e033      	b.n	801b554 <__swsetup_r+0x98>
 801b4ec:	0758      	lsls	r0, r3, #29
 801b4ee:	d512      	bpl.n	801b516 <__swsetup_r+0x5a>
 801b4f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b4f2:	b141      	cbz	r1, 801b506 <__swsetup_r+0x4a>
 801b4f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b4f8:	4299      	cmp	r1, r3
 801b4fa:	d002      	beq.n	801b502 <__swsetup_r+0x46>
 801b4fc:	4628      	mov	r0, r5
 801b4fe:	f000 f8f7 	bl	801b6f0 <_free_r>
 801b502:	2300      	movs	r3, #0
 801b504:	6363      	str	r3, [r4, #52]	@ 0x34
 801b506:	89a3      	ldrh	r3, [r4, #12]
 801b508:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b50c:	81a3      	strh	r3, [r4, #12]
 801b50e:	2300      	movs	r3, #0
 801b510:	6063      	str	r3, [r4, #4]
 801b512:	6923      	ldr	r3, [r4, #16]
 801b514:	6023      	str	r3, [r4, #0]
 801b516:	89a3      	ldrh	r3, [r4, #12]
 801b518:	f043 0308 	orr.w	r3, r3, #8
 801b51c:	81a3      	strh	r3, [r4, #12]
 801b51e:	6923      	ldr	r3, [r4, #16]
 801b520:	b94b      	cbnz	r3, 801b536 <__swsetup_r+0x7a>
 801b522:	89a3      	ldrh	r3, [r4, #12]
 801b524:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b52c:	d003      	beq.n	801b536 <__swsetup_r+0x7a>
 801b52e:	4621      	mov	r1, r4
 801b530:	4628      	mov	r0, r5
 801b532:	f000 fe21 	bl	801c178 <__smakebuf_r>
 801b536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b53a:	f013 0201 	ands.w	r2, r3, #1
 801b53e:	d00a      	beq.n	801b556 <__swsetup_r+0x9a>
 801b540:	2200      	movs	r2, #0
 801b542:	60a2      	str	r2, [r4, #8]
 801b544:	6962      	ldr	r2, [r4, #20]
 801b546:	4252      	negs	r2, r2
 801b548:	61a2      	str	r2, [r4, #24]
 801b54a:	6922      	ldr	r2, [r4, #16]
 801b54c:	b942      	cbnz	r2, 801b560 <__swsetup_r+0xa4>
 801b54e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b552:	d1c5      	bne.n	801b4e0 <__swsetup_r+0x24>
 801b554:	bd38      	pop	{r3, r4, r5, pc}
 801b556:	0799      	lsls	r1, r3, #30
 801b558:	bf58      	it	pl
 801b55a:	6962      	ldrpl	r2, [r4, #20]
 801b55c:	60a2      	str	r2, [r4, #8]
 801b55e:	e7f4      	b.n	801b54a <__swsetup_r+0x8e>
 801b560:	2000      	movs	r0, #0
 801b562:	e7f7      	b.n	801b554 <__swsetup_r+0x98>
 801b564:	20000598 	.word	0x20000598

0801b568 <memset>:
 801b568:	4402      	add	r2, r0
 801b56a:	4603      	mov	r3, r0
 801b56c:	4293      	cmp	r3, r2
 801b56e:	d100      	bne.n	801b572 <memset+0xa>
 801b570:	4770      	bx	lr
 801b572:	f803 1b01 	strb.w	r1, [r3], #1
 801b576:	e7f9      	b.n	801b56c <memset+0x4>

0801b578 <strncpy>:
 801b578:	b510      	push	{r4, lr}
 801b57a:	3901      	subs	r1, #1
 801b57c:	4603      	mov	r3, r0
 801b57e:	b132      	cbz	r2, 801b58e <strncpy+0x16>
 801b580:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b584:	f803 4b01 	strb.w	r4, [r3], #1
 801b588:	3a01      	subs	r2, #1
 801b58a:	2c00      	cmp	r4, #0
 801b58c:	d1f7      	bne.n	801b57e <strncpy+0x6>
 801b58e:	441a      	add	r2, r3
 801b590:	2100      	movs	r1, #0
 801b592:	4293      	cmp	r3, r2
 801b594:	d100      	bne.n	801b598 <strncpy+0x20>
 801b596:	bd10      	pop	{r4, pc}
 801b598:	f803 1b01 	strb.w	r1, [r3], #1
 801b59c:	e7f9      	b.n	801b592 <strncpy+0x1a>

0801b59e <strstr>:
 801b59e:	780a      	ldrb	r2, [r1, #0]
 801b5a0:	b570      	push	{r4, r5, r6, lr}
 801b5a2:	b96a      	cbnz	r2, 801b5c0 <strstr+0x22>
 801b5a4:	bd70      	pop	{r4, r5, r6, pc}
 801b5a6:	429a      	cmp	r2, r3
 801b5a8:	d109      	bne.n	801b5be <strstr+0x20>
 801b5aa:	460c      	mov	r4, r1
 801b5ac:	4605      	mov	r5, r0
 801b5ae:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d0f6      	beq.n	801b5a4 <strstr+0x6>
 801b5b6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b5ba:	429e      	cmp	r6, r3
 801b5bc:	d0f7      	beq.n	801b5ae <strstr+0x10>
 801b5be:	3001      	adds	r0, #1
 801b5c0:	7803      	ldrb	r3, [r0, #0]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d1ef      	bne.n	801b5a6 <strstr+0x8>
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	e7ec      	b.n	801b5a4 <strstr+0x6>
	...

0801b5cc <_close_r>:
 801b5cc:	b538      	push	{r3, r4, r5, lr}
 801b5ce:	4d06      	ldr	r5, [pc, #24]	@ (801b5e8 <_close_r+0x1c>)
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	4604      	mov	r4, r0
 801b5d4:	4608      	mov	r0, r1
 801b5d6:	602b      	str	r3, [r5, #0]
 801b5d8:	f7e5 fcfd 	bl	8000fd6 <_close>
 801b5dc:	1c43      	adds	r3, r0, #1
 801b5de:	d102      	bne.n	801b5e6 <_close_r+0x1a>
 801b5e0:	682b      	ldr	r3, [r5, #0]
 801b5e2:	b103      	cbz	r3, 801b5e6 <_close_r+0x1a>
 801b5e4:	6023      	str	r3, [r4, #0]
 801b5e6:	bd38      	pop	{r3, r4, r5, pc}
 801b5e8:	2000c58c 	.word	0x2000c58c

0801b5ec <_lseek_r>:
 801b5ec:	b538      	push	{r3, r4, r5, lr}
 801b5ee:	4d07      	ldr	r5, [pc, #28]	@ (801b60c <_lseek_r+0x20>)
 801b5f0:	4604      	mov	r4, r0
 801b5f2:	4608      	mov	r0, r1
 801b5f4:	4611      	mov	r1, r2
 801b5f6:	2200      	movs	r2, #0
 801b5f8:	602a      	str	r2, [r5, #0]
 801b5fa:	461a      	mov	r2, r3
 801b5fc:	f7e5 fd12 	bl	8001024 <_lseek>
 801b600:	1c43      	adds	r3, r0, #1
 801b602:	d102      	bne.n	801b60a <_lseek_r+0x1e>
 801b604:	682b      	ldr	r3, [r5, #0]
 801b606:	b103      	cbz	r3, 801b60a <_lseek_r+0x1e>
 801b608:	6023      	str	r3, [r4, #0]
 801b60a:	bd38      	pop	{r3, r4, r5, pc}
 801b60c:	2000c58c 	.word	0x2000c58c

0801b610 <_read_r>:
 801b610:	b538      	push	{r3, r4, r5, lr}
 801b612:	4d07      	ldr	r5, [pc, #28]	@ (801b630 <_read_r+0x20>)
 801b614:	4604      	mov	r4, r0
 801b616:	4608      	mov	r0, r1
 801b618:	4611      	mov	r1, r2
 801b61a:	2200      	movs	r2, #0
 801b61c:	602a      	str	r2, [r5, #0]
 801b61e:	461a      	mov	r2, r3
 801b620:	f7e5 fca0 	bl	8000f64 <_read>
 801b624:	1c43      	adds	r3, r0, #1
 801b626:	d102      	bne.n	801b62e <_read_r+0x1e>
 801b628:	682b      	ldr	r3, [r5, #0]
 801b62a:	b103      	cbz	r3, 801b62e <_read_r+0x1e>
 801b62c:	6023      	str	r3, [r4, #0]
 801b62e:	bd38      	pop	{r3, r4, r5, pc}
 801b630:	2000c58c 	.word	0x2000c58c

0801b634 <_sbrk_r>:
 801b634:	b538      	push	{r3, r4, r5, lr}
 801b636:	4d06      	ldr	r5, [pc, #24]	@ (801b650 <_sbrk_r+0x1c>)
 801b638:	2300      	movs	r3, #0
 801b63a:	4604      	mov	r4, r0
 801b63c:	4608      	mov	r0, r1
 801b63e:	602b      	str	r3, [r5, #0]
 801b640:	f7e5 fcfe 	bl	8001040 <_sbrk>
 801b644:	1c43      	adds	r3, r0, #1
 801b646:	d102      	bne.n	801b64e <_sbrk_r+0x1a>
 801b648:	682b      	ldr	r3, [r5, #0]
 801b64a:	b103      	cbz	r3, 801b64e <_sbrk_r+0x1a>
 801b64c:	6023      	str	r3, [r4, #0]
 801b64e:	bd38      	pop	{r3, r4, r5, pc}
 801b650:	2000c58c 	.word	0x2000c58c

0801b654 <_write_r>:
 801b654:	b538      	push	{r3, r4, r5, lr}
 801b656:	4d07      	ldr	r5, [pc, #28]	@ (801b674 <_write_r+0x20>)
 801b658:	4604      	mov	r4, r0
 801b65a:	4608      	mov	r0, r1
 801b65c:	4611      	mov	r1, r2
 801b65e:	2200      	movs	r2, #0
 801b660:	602a      	str	r2, [r5, #0]
 801b662:	461a      	mov	r2, r3
 801b664:	f7e5 fc9b 	bl	8000f9e <_write>
 801b668:	1c43      	adds	r3, r0, #1
 801b66a:	d102      	bne.n	801b672 <_write_r+0x1e>
 801b66c:	682b      	ldr	r3, [r5, #0]
 801b66e:	b103      	cbz	r3, 801b672 <_write_r+0x1e>
 801b670:	6023      	str	r3, [r4, #0]
 801b672:	bd38      	pop	{r3, r4, r5, pc}
 801b674:	2000c58c 	.word	0x2000c58c

0801b678 <__errno>:
 801b678:	4b01      	ldr	r3, [pc, #4]	@ (801b680 <__errno+0x8>)
 801b67a:	6818      	ldr	r0, [r3, #0]
 801b67c:	4770      	bx	lr
 801b67e:	bf00      	nop
 801b680:	20000598 	.word	0x20000598

0801b684 <__libc_init_array>:
 801b684:	b570      	push	{r4, r5, r6, lr}
 801b686:	4d0d      	ldr	r5, [pc, #52]	@ (801b6bc <__libc_init_array+0x38>)
 801b688:	4c0d      	ldr	r4, [pc, #52]	@ (801b6c0 <__libc_init_array+0x3c>)
 801b68a:	1b64      	subs	r4, r4, r5
 801b68c:	10a4      	asrs	r4, r4, #2
 801b68e:	2600      	movs	r6, #0
 801b690:	42a6      	cmp	r6, r4
 801b692:	d109      	bne.n	801b6a8 <__libc_init_array+0x24>
 801b694:	4d0b      	ldr	r5, [pc, #44]	@ (801b6c4 <__libc_init_array+0x40>)
 801b696:	4c0c      	ldr	r4, [pc, #48]	@ (801b6c8 <__libc_init_array+0x44>)
 801b698:	f001 fa3e 	bl	801cb18 <_init>
 801b69c:	1b64      	subs	r4, r4, r5
 801b69e:	10a4      	asrs	r4, r4, #2
 801b6a0:	2600      	movs	r6, #0
 801b6a2:	42a6      	cmp	r6, r4
 801b6a4:	d105      	bne.n	801b6b2 <__libc_init_array+0x2e>
 801b6a6:	bd70      	pop	{r4, r5, r6, pc}
 801b6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6ac:	4798      	blx	r3
 801b6ae:	3601      	adds	r6, #1
 801b6b0:	e7ee      	b.n	801b690 <__libc_init_array+0xc>
 801b6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6b6:	4798      	blx	r3
 801b6b8:	3601      	adds	r6, #1
 801b6ba:	e7f2      	b.n	801b6a2 <__libc_init_array+0x1e>
 801b6bc:	080214b0 	.word	0x080214b0
 801b6c0:	080214b0 	.word	0x080214b0
 801b6c4:	080214b0 	.word	0x080214b0
 801b6c8:	080214b4 	.word	0x080214b4

0801b6cc <__retarget_lock_init_recursive>:
 801b6cc:	4770      	bx	lr

0801b6ce <__retarget_lock_acquire_recursive>:
 801b6ce:	4770      	bx	lr

0801b6d0 <__retarget_lock_release_recursive>:
 801b6d0:	4770      	bx	lr

0801b6d2 <memcpy>:
 801b6d2:	440a      	add	r2, r1
 801b6d4:	4291      	cmp	r1, r2
 801b6d6:	f100 33ff 	add.w	r3, r0, #4294967295
 801b6da:	d100      	bne.n	801b6de <memcpy+0xc>
 801b6dc:	4770      	bx	lr
 801b6de:	b510      	push	{r4, lr}
 801b6e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b6e8:	4291      	cmp	r1, r2
 801b6ea:	d1f9      	bne.n	801b6e0 <memcpy+0xe>
 801b6ec:	bd10      	pop	{r4, pc}
	...

0801b6f0 <_free_r>:
 801b6f0:	b538      	push	{r3, r4, r5, lr}
 801b6f2:	4605      	mov	r5, r0
 801b6f4:	2900      	cmp	r1, #0
 801b6f6:	d041      	beq.n	801b77c <_free_r+0x8c>
 801b6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b6fc:	1f0c      	subs	r4, r1, #4
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	bfb8      	it	lt
 801b702:	18e4      	addlt	r4, r4, r3
 801b704:	f7ff fcf2 	bl	801b0ec <__malloc_lock>
 801b708:	4a1d      	ldr	r2, [pc, #116]	@ (801b780 <_free_r+0x90>)
 801b70a:	6813      	ldr	r3, [r2, #0]
 801b70c:	b933      	cbnz	r3, 801b71c <_free_r+0x2c>
 801b70e:	6063      	str	r3, [r4, #4]
 801b710:	6014      	str	r4, [r2, #0]
 801b712:	4628      	mov	r0, r5
 801b714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b718:	f7ff bcee 	b.w	801b0f8 <__malloc_unlock>
 801b71c:	42a3      	cmp	r3, r4
 801b71e:	d908      	bls.n	801b732 <_free_r+0x42>
 801b720:	6820      	ldr	r0, [r4, #0]
 801b722:	1821      	adds	r1, r4, r0
 801b724:	428b      	cmp	r3, r1
 801b726:	bf01      	itttt	eq
 801b728:	6819      	ldreq	r1, [r3, #0]
 801b72a:	685b      	ldreq	r3, [r3, #4]
 801b72c:	1809      	addeq	r1, r1, r0
 801b72e:	6021      	streq	r1, [r4, #0]
 801b730:	e7ed      	b.n	801b70e <_free_r+0x1e>
 801b732:	461a      	mov	r2, r3
 801b734:	685b      	ldr	r3, [r3, #4]
 801b736:	b10b      	cbz	r3, 801b73c <_free_r+0x4c>
 801b738:	42a3      	cmp	r3, r4
 801b73a:	d9fa      	bls.n	801b732 <_free_r+0x42>
 801b73c:	6811      	ldr	r1, [r2, #0]
 801b73e:	1850      	adds	r0, r2, r1
 801b740:	42a0      	cmp	r0, r4
 801b742:	d10b      	bne.n	801b75c <_free_r+0x6c>
 801b744:	6820      	ldr	r0, [r4, #0]
 801b746:	4401      	add	r1, r0
 801b748:	1850      	adds	r0, r2, r1
 801b74a:	4283      	cmp	r3, r0
 801b74c:	6011      	str	r1, [r2, #0]
 801b74e:	d1e0      	bne.n	801b712 <_free_r+0x22>
 801b750:	6818      	ldr	r0, [r3, #0]
 801b752:	685b      	ldr	r3, [r3, #4]
 801b754:	6053      	str	r3, [r2, #4]
 801b756:	4408      	add	r0, r1
 801b758:	6010      	str	r0, [r2, #0]
 801b75a:	e7da      	b.n	801b712 <_free_r+0x22>
 801b75c:	d902      	bls.n	801b764 <_free_r+0x74>
 801b75e:	230c      	movs	r3, #12
 801b760:	602b      	str	r3, [r5, #0]
 801b762:	e7d6      	b.n	801b712 <_free_r+0x22>
 801b764:	6820      	ldr	r0, [r4, #0]
 801b766:	1821      	adds	r1, r4, r0
 801b768:	428b      	cmp	r3, r1
 801b76a:	bf04      	itt	eq
 801b76c:	6819      	ldreq	r1, [r3, #0]
 801b76e:	685b      	ldreq	r3, [r3, #4]
 801b770:	6063      	str	r3, [r4, #4]
 801b772:	bf04      	itt	eq
 801b774:	1809      	addeq	r1, r1, r0
 801b776:	6021      	streq	r1, [r4, #0]
 801b778:	6054      	str	r4, [r2, #4]
 801b77a:	e7ca      	b.n	801b712 <_free_r+0x22>
 801b77c:	bd38      	pop	{r3, r4, r5, pc}
 801b77e:	bf00      	nop
 801b780:	2000c44c 	.word	0x2000c44c

0801b784 <__ssputs_r>:
 801b784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b788:	688e      	ldr	r6, [r1, #8]
 801b78a:	461f      	mov	r7, r3
 801b78c:	42be      	cmp	r6, r7
 801b78e:	680b      	ldr	r3, [r1, #0]
 801b790:	4682      	mov	sl, r0
 801b792:	460c      	mov	r4, r1
 801b794:	4690      	mov	r8, r2
 801b796:	d82d      	bhi.n	801b7f4 <__ssputs_r+0x70>
 801b798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b79c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801b7a0:	d026      	beq.n	801b7f0 <__ssputs_r+0x6c>
 801b7a2:	6965      	ldr	r5, [r4, #20]
 801b7a4:	6909      	ldr	r1, [r1, #16]
 801b7a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b7aa:	eba3 0901 	sub.w	r9, r3, r1
 801b7ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b7b2:	1c7b      	adds	r3, r7, #1
 801b7b4:	444b      	add	r3, r9
 801b7b6:	106d      	asrs	r5, r5, #1
 801b7b8:	429d      	cmp	r5, r3
 801b7ba:	bf38      	it	cc
 801b7bc:	461d      	movcc	r5, r3
 801b7be:	0553      	lsls	r3, r2, #21
 801b7c0:	d527      	bpl.n	801b812 <__ssputs_r+0x8e>
 801b7c2:	4629      	mov	r1, r5
 801b7c4:	f7ff fc12 	bl	801afec <_malloc_r>
 801b7c8:	4606      	mov	r6, r0
 801b7ca:	b360      	cbz	r0, 801b826 <__ssputs_r+0xa2>
 801b7cc:	6921      	ldr	r1, [r4, #16]
 801b7ce:	464a      	mov	r2, r9
 801b7d0:	f7ff ff7f 	bl	801b6d2 <memcpy>
 801b7d4:	89a3      	ldrh	r3, [r4, #12]
 801b7d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801b7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b7de:	81a3      	strh	r3, [r4, #12]
 801b7e0:	6126      	str	r6, [r4, #16]
 801b7e2:	6165      	str	r5, [r4, #20]
 801b7e4:	444e      	add	r6, r9
 801b7e6:	eba5 0509 	sub.w	r5, r5, r9
 801b7ea:	6026      	str	r6, [r4, #0]
 801b7ec:	60a5      	str	r5, [r4, #8]
 801b7ee:	463e      	mov	r6, r7
 801b7f0:	42be      	cmp	r6, r7
 801b7f2:	d900      	bls.n	801b7f6 <__ssputs_r+0x72>
 801b7f4:	463e      	mov	r6, r7
 801b7f6:	6820      	ldr	r0, [r4, #0]
 801b7f8:	4632      	mov	r2, r6
 801b7fa:	4641      	mov	r1, r8
 801b7fc:	f000 fd2c 	bl	801c258 <memmove>
 801b800:	68a3      	ldr	r3, [r4, #8]
 801b802:	1b9b      	subs	r3, r3, r6
 801b804:	60a3      	str	r3, [r4, #8]
 801b806:	6823      	ldr	r3, [r4, #0]
 801b808:	4433      	add	r3, r6
 801b80a:	6023      	str	r3, [r4, #0]
 801b80c:	2000      	movs	r0, #0
 801b80e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b812:	462a      	mov	r2, r5
 801b814:	f000 fd5c 	bl	801c2d0 <_realloc_r>
 801b818:	4606      	mov	r6, r0
 801b81a:	2800      	cmp	r0, #0
 801b81c:	d1e0      	bne.n	801b7e0 <__ssputs_r+0x5c>
 801b81e:	6921      	ldr	r1, [r4, #16]
 801b820:	4650      	mov	r0, sl
 801b822:	f7ff ff65 	bl	801b6f0 <_free_r>
 801b826:	230c      	movs	r3, #12
 801b828:	f8ca 3000 	str.w	r3, [sl]
 801b82c:	89a3      	ldrh	r3, [r4, #12]
 801b82e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b832:	81a3      	strh	r3, [r4, #12]
 801b834:	f04f 30ff 	mov.w	r0, #4294967295
 801b838:	e7e9      	b.n	801b80e <__ssputs_r+0x8a>
	...

0801b83c <_svfiprintf_r>:
 801b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b840:	4698      	mov	r8, r3
 801b842:	898b      	ldrh	r3, [r1, #12]
 801b844:	061b      	lsls	r3, r3, #24
 801b846:	b09d      	sub	sp, #116	@ 0x74
 801b848:	4607      	mov	r7, r0
 801b84a:	460d      	mov	r5, r1
 801b84c:	4614      	mov	r4, r2
 801b84e:	d510      	bpl.n	801b872 <_svfiprintf_r+0x36>
 801b850:	690b      	ldr	r3, [r1, #16]
 801b852:	b973      	cbnz	r3, 801b872 <_svfiprintf_r+0x36>
 801b854:	2140      	movs	r1, #64	@ 0x40
 801b856:	f7ff fbc9 	bl	801afec <_malloc_r>
 801b85a:	6028      	str	r0, [r5, #0]
 801b85c:	6128      	str	r0, [r5, #16]
 801b85e:	b930      	cbnz	r0, 801b86e <_svfiprintf_r+0x32>
 801b860:	230c      	movs	r3, #12
 801b862:	603b      	str	r3, [r7, #0]
 801b864:	f04f 30ff 	mov.w	r0, #4294967295
 801b868:	b01d      	add	sp, #116	@ 0x74
 801b86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b86e:	2340      	movs	r3, #64	@ 0x40
 801b870:	616b      	str	r3, [r5, #20]
 801b872:	2300      	movs	r3, #0
 801b874:	9309      	str	r3, [sp, #36]	@ 0x24
 801b876:	2320      	movs	r3, #32
 801b878:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801b87c:	f8cd 800c 	str.w	r8, [sp, #12]
 801b880:	2330      	movs	r3, #48	@ 0x30
 801b882:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801ba20 <_svfiprintf_r+0x1e4>
 801b886:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801b88a:	f04f 0901 	mov.w	r9, #1
 801b88e:	4623      	mov	r3, r4
 801b890:	469a      	mov	sl, r3
 801b892:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b896:	b10a      	cbz	r2, 801b89c <_svfiprintf_r+0x60>
 801b898:	2a25      	cmp	r2, #37	@ 0x25
 801b89a:	d1f9      	bne.n	801b890 <_svfiprintf_r+0x54>
 801b89c:	ebba 0b04 	subs.w	fp, sl, r4
 801b8a0:	d00b      	beq.n	801b8ba <_svfiprintf_r+0x7e>
 801b8a2:	465b      	mov	r3, fp
 801b8a4:	4622      	mov	r2, r4
 801b8a6:	4629      	mov	r1, r5
 801b8a8:	4638      	mov	r0, r7
 801b8aa:	f7ff ff6b 	bl	801b784 <__ssputs_r>
 801b8ae:	3001      	adds	r0, #1
 801b8b0:	f000 80a7 	beq.w	801ba02 <_svfiprintf_r+0x1c6>
 801b8b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8b6:	445a      	add	r2, fp
 801b8b8:	9209      	str	r2, [sp, #36]	@ 0x24
 801b8ba:	f89a 3000 	ldrb.w	r3, [sl]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	f000 809f 	beq.w	801ba02 <_svfiprintf_r+0x1c6>
 801b8c4:	2300      	movs	r3, #0
 801b8c6:	f04f 32ff 	mov.w	r2, #4294967295
 801b8ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b8ce:	f10a 0a01 	add.w	sl, sl, #1
 801b8d2:	9304      	str	r3, [sp, #16]
 801b8d4:	9307      	str	r3, [sp, #28]
 801b8d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801b8da:	931a      	str	r3, [sp, #104]	@ 0x68
 801b8dc:	4654      	mov	r4, sl
 801b8de:	2205      	movs	r2, #5
 801b8e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8e4:	484e      	ldr	r0, [pc, #312]	@ (801ba20 <_svfiprintf_r+0x1e4>)
 801b8e6:	f7e4 fc8b 	bl	8000200 <memchr>
 801b8ea:	9a04      	ldr	r2, [sp, #16]
 801b8ec:	b9d8      	cbnz	r0, 801b926 <_svfiprintf_r+0xea>
 801b8ee:	06d0      	lsls	r0, r2, #27
 801b8f0:	bf44      	itt	mi
 801b8f2:	2320      	movmi	r3, #32
 801b8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b8f8:	0711      	lsls	r1, r2, #28
 801b8fa:	bf44      	itt	mi
 801b8fc:	232b      	movmi	r3, #43	@ 0x2b
 801b8fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801b902:	f89a 3000 	ldrb.w	r3, [sl]
 801b906:	2b2a      	cmp	r3, #42	@ 0x2a
 801b908:	d015      	beq.n	801b936 <_svfiprintf_r+0xfa>
 801b90a:	9a07      	ldr	r2, [sp, #28]
 801b90c:	4654      	mov	r4, sl
 801b90e:	2000      	movs	r0, #0
 801b910:	f04f 0c0a 	mov.w	ip, #10
 801b914:	4621      	mov	r1, r4
 801b916:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b91a:	3b30      	subs	r3, #48	@ 0x30
 801b91c:	2b09      	cmp	r3, #9
 801b91e:	d94b      	bls.n	801b9b8 <_svfiprintf_r+0x17c>
 801b920:	b1b0      	cbz	r0, 801b950 <_svfiprintf_r+0x114>
 801b922:	9207      	str	r2, [sp, #28]
 801b924:	e014      	b.n	801b950 <_svfiprintf_r+0x114>
 801b926:	eba0 0308 	sub.w	r3, r0, r8
 801b92a:	fa09 f303 	lsl.w	r3, r9, r3
 801b92e:	4313      	orrs	r3, r2
 801b930:	9304      	str	r3, [sp, #16]
 801b932:	46a2      	mov	sl, r4
 801b934:	e7d2      	b.n	801b8dc <_svfiprintf_r+0xa0>
 801b936:	9b03      	ldr	r3, [sp, #12]
 801b938:	1d19      	adds	r1, r3, #4
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	9103      	str	r1, [sp, #12]
 801b93e:	2b00      	cmp	r3, #0
 801b940:	bfbb      	ittet	lt
 801b942:	425b      	neglt	r3, r3
 801b944:	f042 0202 	orrlt.w	r2, r2, #2
 801b948:	9307      	strge	r3, [sp, #28]
 801b94a:	9307      	strlt	r3, [sp, #28]
 801b94c:	bfb8      	it	lt
 801b94e:	9204      	strlt	r2, [sp, #16]
 801b950:	7823      	ldrb	r3, [r4, #0]
 801b952:	2b2e      	cmp	r3, #46	@ 0x2e
 801b954:	d10a      	bne.n	801b96c <_svfiprintf_r+0x130>
 801b956:	7863      	ldrb	r3, [r4, #1]
 801b958:	2b2a      	cmp	r3, #42	@ 0x2a
 801b95a:	d132      	bne.n	801b9c2 <_svfiprintf_r+0x186>
 801b95c:	9b03      	ldr	r3, [sp, #12]
 801b95e:	1d1a      	adds	r2, r3, #4
 801b960:	681b      	ldr	r3, [r3, #0]
 801b962:	9203      	str	r2, [sp, #12]
 801b964:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801b968:	3402      	adds	r4, #2
 801b96a:	9305      	str	r3, [sp, #20]
 801b96c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ba30 <_svfiprintf_r+0x1f4>
 801b970:	7821      	ldrb	r1, [r4, #0]
 801b972:	2203      	movs	r2, #3
 801b974:	4650      	mov	r0, sl
 801b976:	f7e4 fc43 	bl	8000200 <memchr>
 801b97a:	b138      	cbz	r0, 801b98c <_svfiprintf_r+0x150>
 801b97c:	9b04      	ldr	r3, [sp, #16]
 801b97e:	eba0 000a 	sub.w	r0, r0, sl
 801b982:	2240      	movs	r2, #64	@ 0x40
 801b984:	4082      	lsls	r2, r0
 801b986:	4313      	orrs	r3, r2
 801b988:	3401      	adds	r4, #1
 801b98a:	9304      	str	r3, [sp, #16]
 801b98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b990:	4824      	ldr	r0, [pc, #144]	@ (801ba24 <_svfiprintf_r+0x1e8>)
 801b992:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801b996:	2206      	movs	r2, #6
 801b998:	f7e4 fc32 	bl	8000200 <memchr>
 801b99c:	2800      	cmp	r0, #0
 801b99e:	d036      	beq.n	801ba0e <_svfiprintf_r+0x1d2>
 801b9a0:	4b21      	ldr	r3, [pc, #132]	@ (801ba28 <_svfiprintf_r+0x1ec>)
 801b9a2:	bb1b      	cbnz	r3, 801b9ec <_svfiprintf_r+0x1b0>
 801b9a4:	9b03      	ldr	r3, [sp, #12]
 801b9a6:	3307      	adds	r3, #7
 801b9a8:	f023 0307 	bic.w	r3, r3, #7
 801b9ac:	3308      	adds	r3, #8
 801b9ae:	9303      	str	r3, [sp, #12]
 801b9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b9b2:	4433      	add	r3, r6
 801b9b4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b9b6:	e76a      	b.n	801b88e <_svfiprintf_r+0x52>
 801b9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 801b9bc:	460c      	mov	r4, r1
 801b9be:	2001      	movs	r0, #1
 801b9c0:	e7a8      	b.n	801b914 <_svfiprintf_r+0xd8>
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	3401      	adds	r4, #1
 801b9c6:	9305      	str	r3, [sp, #20]
 801b9c8:	4619      	mov	r1, r3
 801b9ca:	f04f 0c0a 	mov.w	ip, #10
 801b9ce:	4620      	mov	r0, r4
 801b9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b9d4:	3a30      	subs	r2, #48	@ 0x30
 801b9d6:	2a09      	cmp	r2, #9
 801b9d8:	d903      	bls.n	801b9e2 <_svfiprintf_r+0x1a6>
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d0c6      	beq.n	801b96c <_svfiprintf_r+0x130>
 801b9de:	9105      	str	r1, [sp, #20]
 801b9e0:	e7c4      	b.n	801b96c <_svfiprintf_r+0x130>
 801b9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 801b9e6:	4604      	mov	r4, r0
 801b9e8:	2301      	movs	r3, #1
 801b9ea:	e7f0      	b.n	801b9ce <_svfiprintf_r+0x192>
 801b9ec:	ab03      	add	r3, sp, #12
 801b9ee:	9300      	str	r3, [sp, #0]
 801b9f0:	462a      	mov	r2, r5
 801b9f2:	4b0e      	ldr	r3, [pc, #56]	@ (801ba2c <_svfiprintf_r+0x1f0>)
 801b9f4:	a904      	add	r1, sp, #16
 801b9f6:	4638      	mov	r0, r7
 801b9f8:	f3af 8000 	nop.w
 801b9fc:	1c42      	adds	r2, r0, #1
 801b9fe:	4606      	mov	r6, r0
 801ba00:	d1d6      	bne.n	801b9b0 <_svfiprintf_r+0x174>
 801ba02:	89ab      	ldrh	r3, [r5, #12]
 801ba04:	065b      	lsls	r3, r3, #25
 801ba06:	f53f af2d 	bmi.w	801b864 <_svfiprintf_r+0x28>
 801ba0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ba0c:	e72c      	b.n	801b868 <_svfiprintf_r+0x2c>
 801ba0e:	ab03      	add	r3, sp, #12
 801ba10:	9300      	str	r3, [sp, #0]
 801ba12:	462a      	mov	r2, r5
 801ba14:	4b05      	ldr	r3, [pc, #20]	@ (801ba2c <_svfiprintf_r+0x1f0>)
 801ba16:	a904      	add	r1, sp, #16
 801ba18:	4638      	mov	r0, r7
 801ba1a:	f000 f9bb 	bl	801bd94 <_printf_i>
 801ba1e:	e7ed      	b.n	801b9fc <_svfiprintf_r+0x1c0>
 801ba20:	0802145c 	.word	0x0802145c
 801ba24:	08021466 	.word	0x08021466
 801ba28:	00000000 	.word	0x00000000
 801ba2c:	0801b785 	.word	0x0801b785
 801ba30:	08021462 	.word	0x08021462

0801ba34 <__sfputc_r>:
 801ba34:	6893      	ldr	r3, [r2, #8]
 801ba36:	3b01      	subs	r3, #1
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	b410      	push	{r4}
 801ba3c:	6093      	str	r3, [r2, #8]
 801ba3e:	da08      	bge.n	801ba52 <__sfputc_r+0x1e>
 801ba40:	6994      	ldr	r4, [r2, #24]
 801ba42:	42a3      	cmp	r3, r4
 801ba44:	db01      	blt.n	801ba4a <__sfputc_r+0x16>
 801ba46:	290a      	cmp	r1, #10
 801ba48:	d103      	bne.n	801ba52 <__sfputc_r+0x1e>
 801ba4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba4e:	f7ff bcf6 	b.w	801b43e <__swbuf_r>
 801ba52:	6813      	ldr	r3, [r2, #0]
 801ba54:	1c58      	adds	r0, r3, #1
 801ba56:	6010      	str	r0, [r2, #0]
 801ba58:	7019      	strb	r1, [r3, #0]
 801ba5a:	4608      	mov	r0, r1
 801ba5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ba60:	4770      	bx	lr

0801ba62 <__sfputs_r>:
 801ba62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ba64:	4606      	mov	r6, r0
 801ba66:	460f      	mov	r7, r1
 801ba68:	4614      	mov	r4, r2
 801ba6a:	18d5      	adds	r5, r2, r3
 801ba6c:	42ac      	cmp	r4, r5
 801ba6e:	d101      	bne.n	801ba74 <__sfputs_r+0x12>
 801ba70:	2000      	movs	r0, #0
 801ba72:	e007      	b.n	801ba84 <__sfputs_r+0x22>
 801ba74:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ba78:	463a      	mov	r2, r7
 801ba7a:	4630      	mov	r0, r6
 801ba7c:	f7ff ffda 	bl	801ba34 <__sfputc_r>
 801ba80:	1c43      	adds	r3, r0, #1
 801ba82:	d1f3      	bne.n	801ba6c <__sfputs_r+0xa>
 801ba84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ba88 <_vfiprintf_r>:
 801ba88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba8c:	460d      	mov	r5, r1
 801ba8e:	b09d      	sub	sp, #116	@ 0x74
 801ba90:	4614      	mov	r4, r2
 801ba92:	4698      	mov	r8, r3
 801ba94:	4606      	mov	r6, r0
 801ba96:	b118      	cbz	r0, 801baa0 <_vfiprintf_r+0x18>
 801ba98:	6a03      	ldr	r3, [r0, #32]
 801ba9a:	b90b      	cbnz	r3, 801baa0 <_vfiprintf_r+0x18>
 801ba9c:	f7ff fbbe 	bl	801b21c <__sinit>
 801baa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801baa2:	07d9      	lsls	r1, r3, #31
 801baa4:	d405      	bmi.n	801bab2 <_vfiprintf_r+0x2a>
 801baa6:	89ab      	ldrh	r3, [r5, #12]
 801baa8:	059a      	lsls	r2, r3, #22
 801baaa:	d402      	bmi.n	801bab2 <_vfiprintf_r+0x2a>
 801baac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801baae:	f7ff fe0e 	bl	801b6ce <__retarget_lock_acquire_recursive>
 801bab2:	89ab      	ldrh	r3, [r5, #12]
 801bab4:	071b      	lsls	r3, r3, #28
 801bab6:	d501      	bpl.n	801babc <_vfiprintf_r+0x34>
 801bab8:	692b      	ldr	r3, [r5, #16]
 801baba:	b99b      	cbnz	r3, 801bae4 <_vfiprintf_r+0x5c>
 801babc:	4629      	mov	r1, r5
 801babe:	4630      	mov	r0, r6
 801bac0:	f7ff fcfc 	bl	801b4bc <__swsetup_r>
 801bac4:	b170      	cbz	r0, 801bae4 <_vfiprintf_r+0x5c>
 801bac6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bac8:	07dc      	lsls	r4, r3, #31
 801baca:	d504      	bpl.n	801bad6 <_vfiprintf_r+0x4e>
 801bacc:	f04f 30ff 	mov.w	r0, #4294967295
 801bad0:	b01d      	add	sp, #116	@ 0x74
 801bad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bad6:	89ab      	ldrh	r3, [r5, #12]
 801bad8:	0598      	lsls	r0, r3, #22
 801bada:	d4f7      	bmi.n	801bacc <_vfiprintf_r+0x44>
 801badc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bade:	f7ff fdf7 	bl	801b6d0 <__retarget_lock_release_recursive>
 801bae2:	e7f3      	b.n	801bacc <_vfiprintf_r+0x44>
 801bae4:	2300      	movs	r3, #0
 801bae6:	9309      	str	r3, [sp, #36]	@ 0x24
 801bae8:	2320      	movs	r3, #32
 801baea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801baee:	f8cd 800c 	str.w	r8, [sp, #12]
 801baf2:	2330      	movs	r3, #48	@ 0x30
 801baf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bca4 <_vfiprintf_r+0x21c>
 801baf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801bafc:	f04f 0901 	mov.w	r9, #1
 801bb00:	4623      	mov	r3, r4
 801bb02:	469a      	mov	sl, r3
 801bb04:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bb08:	b10a      	cbz	r2, 801bb0e <_vfiprintf_r+0x86>
 801bb0a:	2a25      	cmp	r2, #37	@ 0x25
 801bb0c:	d1f9      	bne.n	801bb02 <_vfiprintf_r+0x7a>
 801bb0e:	ebba 0b04 	subs.w	fp, sl, r4
 801bb12:	d00b      	beq.n	801bb2c <_vfiprintf_r+0xa4>
 801bb14:	465b      	mov	r3, fp
 801bb16:	4622      	mov	r2, r4
 801bb18:	4629      	mov	r1, r5
 801bb1a:	4630      	mov	r0, r6
 801bb1c:	f7ff ffa1 	bl	801ba62 <__sfputs_r>
 801bb20:	3001      	adds	r0, #1
 801bb22:	f000 80a7 	beq.w	801bc74 <_vfiprintf_r+0x1ec>
 801bb26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bb28:	445a      	add	r2, fp
 801bb2a:	9209      	str	r2, [sp, #36]	@ 0x24
 801bb2c:	f89a 3000 	ldrb.w	r3, [sl]
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	f000 809f 	beq.w	801bc74 <_vfiprintf_r+0x1ec>
 801bb36:	2300      	movs	r3, #0
 801bb38:	f04f 32ff 	mov.w	r2, #4294967295
 801bb3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bb40:	f10a 0a01 	add.w	sl, sl, #1
 801bb44:	9304      	str	r3, [sp, #16]
 801bb46:	9307      	str	r3, [sp, #28]
 801bb48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801bb4c:	931a      	str	r3, [sp, #104]	@ 0x68
 801bb4e:	4654      	mov	r4, sl
 801bb50:	2205      	movs	r2, #5
 801bb52:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bb56:	4853      	ldr	r0, [pc, #332]	@ (801bca4 <_vfiprintf_r+0x21c>)
 801bb58:	f7e4 fb52 	bl	8000200 <memchr>
 801bb5c:	9a04      	ldr	r2, [sp, #16]
 801bb5e:	b9d8      	cbnz	r0, 801bb98 <_vfiprintf_r+0x110>
 801bb60:	06d1      	lsls	r1, r2, #27
 801bb62:	bf44      	itt	mi
 801bb64:	2320      	movmi	r3, #32
 801bb66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bb6a:	0713      	lsls	r3, r2, #28
 801bb6c:	bf44      	itt	mi
 801bb6e:	232b      	movmi	r3, #43	@ 0x2b
 801bb70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801bb74:	f89a 3000 	ldrb.w	r3, [sl]
 801bb78:	2b2a      	cmp	r3, #42	@ 0x2a
 801bb7a:	d015      	beq.n	801bba8 <_vfiprintf_r+0x120>
 801bb7c:	9a07      	ldr	r2, [sp, #28]
 801bb7e:	4654      	mov	r4, sl
 801bb80:	2000      	movs	r0, #0
 801bb82:	f04f 0c0a 	mov.w	ip, #10
 801bb86:	4621      	mov	r1, r4
 801bb88:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bb8c:	3b30      	subs	r3, #48	@ 0x30
 801bb8e:	2b09      	cmp	r3, #9
 801bb90:	d94b      	bls.n	801bc2a <_vfiprintf_r+0x1a2>
 801bb92:	b1b0      	cbz	r0, 801bbc2 <_vfiprintf_r+0x13a>
 801bb94:	9207      	str	r2, [sp, #28]
 801bb96:	e014      	b.n	801bbc2 <_vfiprintf_r+0x13a>
 801bb98:	eba0 0308 	sub.w	r3, r0, r8
 801bb9c:	fa09 f303 	lsl.w	r3, r9, r3
 801bba0:	4313      	orrs	r3, r2
 801bba2:	9304      	str	r3, [sp, #16]
 801bba4:	46a2      	mov	sl, r4
 801bba6:	e7d2      	b.n	801bb4e <_vfiprintf_r+0xc6>
 801bba8:	9b03      	ldr	r3, [sp, #12]
 801bbaa:	1d19      	adds	r1, r3, #4
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	9103      	str	r1, [sp, #12]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	bfbb      	ittet	lt
 801bbb4:	425b      	neglt	r3, r3
 801bbb6:	f042 0202 	orrlt.w	r2, r2, #2
 801bbba:	9307      	strge	r3, [sp, #28]
 801bbbc:	9307      	strlt	r3, [sp, #28]
 801bbbe:	bfb8      	it	lt
 801bbc0:	9204      	strlt	r2, [sp, #16]
 801bbc2:	7823      	ldrb	r3, [r4, #0]
 801bbc4:	2b2e      	cmp	r3, #46	@ 0x2e
 801bbc6:	d10a      	bne.n	801bbde <_vfiprintf_r+0x156>
 801bbc8:	7863      	ldrb	r3, [r4, #1]
 801bbca:	2b2a      	cmp	r3, #42	@ 0x2a
 801bbcc:	d132      	bne.n	801bc34 <_vfiprintf_r+0x1ac>
 801bbce:	9b03      	ldr	r3, [sp, #12]
 801bbd0:	1d1a      	adds	r2, r3, #4
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	9203      	str	r2, [sp, #12]
 801bbd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bbda:	3402      	adds	r4, #2
 801bbdc:	9305      	str	r3, [sp, #20]
 801bbde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bcb4 <_vfiprintf_r+0x22c>
 801bbe2:	7821      	ldrb	r1, [r4, #0]
 801bbe4:	2203      	movs	r2, #3
 801bbe6:	4650      	mov	r0, sl
 801bbe8:	f7e4 fb0a 	bl	8000200 <memchr>
 801bbec:	b138      	cbz	r0, 801bbfe <_vfiprintf_r+0x176>
 801bbee:	9b04      	ldr	r3, [sp, #16]
 801bbf0:	eba0 000a 	sub.w	r0, r0, sl
 801bbf4:	2240      	movs	r2, #64	@ 0x40
 801bbf6:	4082      	lsls	r2, r0
 801bbf8:	4313      	orrs	r3, r2
 801bbfa:	3401      	adds	r4, #1
 801bbfc:	9304      	str	r3, [sp, #16]
 801bbfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc02:	4829      	ldr	r0, [pc, #164]	@ (801bca8 <_vfiprintf_r+0x220>)
 801bc04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bc08:	2206      	movs	r2, #6
 801bc0a:	f7e4 faf9 	bl	8000200 <memchr>
 801bc0e:	2800      	cmp	r0, #0
 801bc10:	d03f      	beq.n	801bc92 <_vfiprintf_r+0x20a>
 801bc12:	4b26      	ldr	r3, [pc, #152]	@ (801bcac <_vfiprintf_r+0x224>)
 801bc14:	bb1b      	cbnz	r3, 801bc5e <_vfiprintf_r+0x1d6>
 801bc16:	9b03      	ldr	r3, [sp, #12]
 801bc18:	3307      	adds	r3, #7
 801bc1a:	f023 0307 	bic.w	r3, r3, #7
 801bc1e:	3308      	adds	r3, #8
 801bc20:	9303      	str	r3, [sp, #12]
 801bc22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bc24:	443b      	add	r3, r7
 801bc26:	9309      	str	r3, [sp, #36]	@ 0x24
 801bc28:	e76a      	b.n	801bb00 <_vfiprintf_r+0x78>
 801bc2a:	fb0c 3202 	mla	r2, ip, r2, r3
 801bc2e:	460c      	mov	r4, r1
 801bc30:	2001      	movs	r0, #1
 801bc32:	e7a8      	b.n	801bb86 <_vfiprintf_r+0xfe>
 801bc34:	2300      	movs	r3, #0
 801bc36:	3401      	adds	r4, #1
 801bc38:	9305      	str	r3, [sp, #20]
 801bc3a:	4619      	mov	r1, r3
 801bc3c:	f04f 0c0a 	mov.w	ip, #10
 801bc40:	4620      	mov	r0, r4
 801bc42:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bc46:	3a30      	subs	r2, #48	@ 0x30
 801bc48:	2a09      	cmp	r2, #9
 801bc4a:	d903      	bls.n	801bc54 <_vfiprintf_r+0x1cc>
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d0c6      	beq.n	801bbde <_vfiprintf_r+0x156>
 801bc50:	9105      	str	r1, [sp, #20]
 801bc52:	e7c4      	b.n	801bbde <_vfiprintf_r+0x156>
 801bc54:	fb0c 2101 	mla	r1, ip, r1, r2
 801bc58:	4604      	mov	r4, r0
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	e7f0      	b.n	801bc40 <_vfiprintf_r+0x1b8>
 801bc5e:	ab03      	add	r3, sp, #12
 801bc60:	9300      	str	r3, [sp, #0]
 801bc62:	462a      	mov	r2, r5
 801bc64:	4b12      	ldr	r3, [pc, #72]	@ (801bcb0 <_vfiprintf_r+0x228>)
 801bc66:	a904      	add	r1, sp, #16
 801bc68:	4630      	mov	r0, r6
 801bc6a:	f3af 8000 	nop.w
 801bc6e:	4607      	mov	r7, r0
 801bc70:	1c78      	adds	r0, r7, #1
 801bc72:	d1d6      	bne.n	801bc22 <_vfiprintf_r+0x19a>
 801bc74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bc76:	07d9      	lsls	r1, r3, #31
 801bc78:	d405      	bmi.n	801bc86 <_vfiprintf_r+0x1fe>
 801bc7a:	89ab      	ldrh	r3, [r5, #12]
 801bc7c:	059a      	lsls	r2, r3, #22
 801bc7e:	d402      	bmi.n	801bc86 <_vfiprintf_r+0x1fe>
 801bc80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bc82:	f7ff fd25 	bl	801b6d0 <__retarget_lock_release_recursive>
 801bc86:	89ab      	ldrh	r3, [r5, #12]
 801bc88:	065b      	lsls	r3, r3, #25
 801bc8a:	f53f af1f 	bmi.w	801bacc <_vfiprintf_r+0x44>
 801bc8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc90:	e71e      	b.n	801bad0 <_vfiprintf_r+0x48>
 801bc92:	ab03      	add	r3, sp, #12
 801bc94:	9300      	str	r3, [sp, #0]
 801bc96:	462a      	mov	r2, r5
 801bc98:	4b05      	ldr	r3, [pc, #20]	@ (801bcb0 <_vfiprintf_r+0x228>)
 801bc9a:	a904      	add	r1, sp, #16
 801bc9c:	4630      	mov	r0, r6
 801bc9e:	f000 f879 	bl	801bd94 <_printf_i>
 801bca2:	e7e4      	b.n	801bc6e <_vfiprintf_r+0x1e6>
 801bca4:	0802145c 	.word	0x0802145c
 801bca8:	08021466 	.word	0x08021466
 801bcac:	00000000 	.word	0x00000000
 801bcb0:	0801ba63 	.word	0x0801ba63
 801bcb4:	08021462 	.word	0x08021462

0801bcb8 <_printf_common>:
 801bcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bcbc:	4616      	mov	r6, r2
 801bcbe:	4698      	mov	r8, r3
 801bcc0:	688a      	ldr	r2, [r1, #8]
 801bcc2:	690b      	ldr	r3, [r1, #16]
 801bcc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bcc8:	4293      	cmp	r3, r2
 801bcca:	bfb8      	it	lt
 801bccc:	4613      	movlt	r3, r2
 801bcce:	6033      	str	r3, [r6, #0]
 801bcd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bcd4:	4607      	mov	r7, r0
 801bcd6:	460c      	mov	r4, r1
 801bcd8:	b10a      	cbz	r2, 801bcde <_printf_common+0x26>
 801bcda:	3301      	adds	r3, #1
 801bcdc:	6033      	str	r3, [r6, #0]
 801bcde:	6823      	ldr	r3, [r4, #0]
 801bce0:	0699      	lsls	r1, r3, #26
 801bce2:	bf42      	ittt	mi
 801bce4:	6833      	ldrmi	r3, [r6, #0]
 801bce6:	3302      	addmi	r3, #2
 801bce8:	6033      	strmi	r3, [r6, #0]
 801bcea:	6825      	ldr	r5, [r4, #0]
 801bcec:	f015 0506 	ands.w	r5, r5, #6
 801bcf0:	d106      	bne.n	801bd00 <_printf_common+0x48>
 801bcf2:	f104 0a19 	add.w	sl, r4, #25
 801bcf6:	68e3      	ldr	r3, [r4, #12]
 801bcf8:	6832      	ldr	r2, [r6, #0]
 801bcfa:	1a9b      	subs	r3, r3, r2
 801bcfc:	42ab      	cmp	r3, r5
 801bcfe:	dc26      	bgt.n	801bd4e <_printf_common+0x96>
 801bd00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801bd04:	6822      	ldr	r2, [r4, #0]
 801bd06:	3b00      	subs	r3, #0
 801bd08:	bf18      	it	ne
 801bd0a:	2301      	movne	r3, #1
 801bd0c:	0692      	lsls	r2, r2, #26
 801bd0e:	d42b      	bmi.n	801bd68 <_printf_common+0xb0>
 801bd10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801bd14:	4641      	mov	r1, r8
 801bd16:	4638      	mov	r0, r7
 801bd18:	47c8      	blx	r9
 801bd1a:	3001      	adds	r0, #1
 801bd1c:	d01e      	beq.n	801bd5c <_printf_common+0xa4>
 801bd1e:	6823      	ldr	r3, [r4, #0]
 801bd20:	6922      	ldr	r2, [r4, #16]
 801bd22:	f003 0306 	and.w	r3, r3, #6
 801bd26:	2b04      	cmp	r3, #4
 801bd28:	bf02      	ittt	eq
 801bd2a:	68e5      	ldreq	r5, [r4, #12]
 801bd2c:	6833      	ldreq	r3, [r6, #0]
 801bd2e:	1aed      	subeq	r5, r5, r3
 801bd30:	68a3      	ldr	r3, [r4, #8]
 801bd32:	bf0c      	ite	eq
 801bd34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bd38:	2500      	movne	r5, #0
 801bd3a:	4293      	cmp	r3, r2
 801bd3c:	bfc4      	itt	gt
 801bd3e:	1a9b      	subgt	r3, r3, r2
 801bd40:	18ed      	addgt	r5, r5, r3
 801bd42:	2600      	movs	r6, #0
 801bd44:	341a      	adds	r4, #26
 801bd46:	42b5      	cmp	r5, r6
 801bd48:	d11a      	bne.n	801bd80 <_printf_common+0xc8>
 801bd4a:	2000      	movs	r0, #0
 801bd4c:	e008      	b.n	801bd60 <_printf_common+0xa8>
 801bd4e:	2301      	movs	r3, #1
 801bd50:	4652      	mov	r2, sl
 801bd52:	4641      	mov	r1, r8
 801bd54:	4638      	mov	r0, r7
 801bd56:	47c8      	blx	r9
 801bd58:	3001      	adds	r0, #1
 801bd5a:	d103      	bne.n	801bd64 <_printf_common+0xac>
 801bd5c:	f04f 30ff 	mov.w	r0, #4294967295
 801bd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd64:	3501      	adds	r5, #1
 801bd66:	e7c6      	b.n	801bcf6 <_printf_common+0x3e>
 801bd68:	18e1      	adds	r1, r4, r3
 801bd6a:	1c5a      	adds	r2, r3, #1
 801bd6c:	2030      	movs	r0, #48	@ 0x30
 801bd6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801bd72:	4422      	add	r2, r4
 801bd74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801bd78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801bd7c:	3302      	adds	r3, #2
 801bd7e:	e7c7      	b.n	801bd10 <_printf_common+0x58>
 801bd80:	2301      	movs	r3, #1
 801bd82:	4622      	mov	r2, r4
 801bd84:	4641      	mov	r1, r8
 801bd86:	4638      	mov	r0, r7
 801bd88:	47c8      	blx	r9
 801bd8a:	3001      	adds	r0, #1
 801bd8c:	d0e6      	beq.n	801bd5c <_printf_common+0xa4>
 801bd8e:	3601      	adds	r6, #1
 801bd90:	e7d9      	b.n	801bd46 <_printf_common+0x8e>
	...

0801bd94 <_printf_i>:
 801bd94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bd98:	7e0f      	ldrb	r7, [r1, #24]
 801bd9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801bd9c:	2f78      	cmp	r7, #120	@ 0x78
 801bd9e:	4691      	mov	r9, r2
 801bda0:	4680      	mov	r8, r0
 801bda2:	460c      	mov	r4, r1
 801bda4:	469a      	mov	sl, r3
 801bda6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801bdaa:	d807      	bhi.n	801bdbc <_printf_i+0x28>
 801bdac:	2f62      	cmp	r7, #98	@ 0x62
 801bdae:	d80a      	bhi.n	801bdc6 <_printf_i+0x32>
 801bdb0:	2f00      	cmp	r7, #0
 801bdb2:	f000 80d2 	beq.w	801bf5a <_printf_i+0x1c6>
 801bdb6:	2f58      	cmp	r7, #88	@ 0x58
 801bdb8:	f000 80b9 	beq.w	801bf2e <_printf_i+0x19a>
 801bdbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801bdc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801bdc4:	e03a      	b.n	801be3c <_printf_i+0xa8>
 801bdc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801bdca:	2b15      	cmp	r3, #21
 801bdcc:	d8f6      	bhi.n	801bdbc <_printf_i+0x28>
 801bdce:	a101      	add	r1, pc, #4	@ (adr r1, 801bdd4 <_printf_i+0x40>)
 801bdd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801bdd4:	0801be2d 	.word	0x0801be2d
 801bdd8:	0801be41 	.word	0x0801be41
 801bddc:	0801bdbd 	.word	0x0801bdbd
 801bde0:	0801bdbd 	.word	0x0801bdbd
 801bde4:	0801bdbd 	.word	0x0801bdbd
 801bde8:	0801bdbd 	.word	0x0801bdbd
 801bdec:	0801be41 	.word	0x0801be41
 801bdf0:	0801bdbd 	.word	0x0801bdbd
 801bdf4:	0801bdbd 	.word	0x0801bdbd
 801bdf8:	0801bdbd 	.word	0x0801bdbd
 801bdfc:	0801bdbd 	.word	0x0801bdbd
 801be00:	0801bf41 	.word	0x0801bf41
 801be04:	0801be6b 	.word	0x0801be6b
 801be08:	0801befb 	.word	0x0801befb
 801be0c:	0801bdbd 	.word	0x0801bdbd
 801be10:	0801bdbd 	.word	0x0801bdbd
 801be14:	0801bf63 	.word	0x0801bf63
 801be18:	0801bdbd 	.word	0x0801bdbd
 801be1c:	0801be6b 	.word	0x0801be6b
 801be20:	0801bdbd 	.word	0x0801bdbd
 801be24:	0801bdbd 	.word	0x0801bdbd
 801be28:	0801bf03 	.word	0x0801bf03
 801be2c:	6833      	ldr	r3, [r6, #0]
 801be2e:	1d1a      	adds	r2, r3, #4
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	6032      	str	r2, [r6, #0]
 801be34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801be38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801be3c:	2301      	movs	r3, #1
 801be3e:	e09d      	b.n	801bf7c <_printf_i+0x1e8>
 801be40:	6833      	ldr	r3, [r6, #0]
 801be42:	6820      	ldr	r0, [r4, #0]
 801be44:	1d19      	adds	r1, r3, #4
 801be46:	6031      	str	r1, [r6, #0]
 801be48:	0606      	lsls	r6, r0, #24
 801be4a:	d501      	bpl.n	801be50 <_printf_i+0xbc>
 801be4c:	681d      	ldr	r5, [r3, #0]
 801be4e:	e003      	b.n	801be58 <_printf_i+0xc4>
 801be50:	0645      	lsls	r5, r0, #25
 801be52:	d5fb      	bpl.n	801be4c <_printf_i+0xb8>
 801be54:	f9b3 5000 	ldrsh.w	r5, [r3]
 801be58:	2d00      	cmp	r5, #0
 801be5a:	da03      	bge.n	801be64 <_printf_i+0xd0>
 801be5c:	232d      	movs	r3, #45	@ 0x2d
 801be5e:	426d      	negs	r5, r5
 801be60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801be64:	4859      	ldr	r0, [pc, #356]	@ (801bfcc <_printf_i+0x238>)
 801be66:	230a      	movs	r3, #10
 801be68:	e011      	b.n	801be8e <_printf_i+0xfa>
 801be6a:	6821      	ldr	r1, [r4, #0]
 801be6c:	6833      	ldr	r3, [r6, #0]
 801be6e:	0608      	lsls	r0, r1, #24
 801be70:	f853 5b04 	ldr.w	r5, [r3], #4
 801be74:	d402      	bmi.n	801be7c <_printf_i+0xe8>
 801be76:	0649      	lsls	r1, r1, #25
 801be78:	bf48      	it	mi
 801be7a:	b2ad      	uxthmi	r5, r5
 801be7c:	2f6f      	cmp	r7, #111	@ 0x6f
 801be7e:	4853      	ldr	r0, [pc, #332]	@ (801bfcc <_printf_i+0x238>)
 801be80:	6033      	str	r3, [r6, #0]
 801be82:	bf14      	ite	ne
 801be84:	230a      	movne	r3, #10
 801be86:	2308      	moveq	r3, #8
 801be88:	2100      	movs	r1, #0
 801be8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801be8e:	6866      	ldr	r6, [r4, #4]
 801be90:	60a6      	str	r6, [r4, #8]
 801be92:	2e00      	cmp	r6, #0
 801be94:	bfa2      	ittt	ge
 801be96:	6821      	ldrge	r1, [r4, #0]
 801be98:	f021 0104 	bicge.w	r1, r1, #4
 801be9c:	6021      	strge	r1, [r4, #0]
 801be9e:	b90d      	cbnz	r5, 801bea4 <_printf_i+0x110>
 801bea0:	2e00      	cmp	r6, #0
 801bea2:	d04b      	beq.n	801bf3c <_printf_i+0x1a8>
 801bea4:	4616      	mov	r6, r2
 801bea6:	fbb5 f1f3 	udiv	r1, r5, r3
 801beaa:	fb03 5711 	mls	r7, r3, r1, r5
 801beae:	5dc7      	ldrb	r7, [r0, r7]
 801beb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801beb4:	462f      	mov	r7, r5
 801beb6:	42bb      	cmp	r3, r7
 801beb8:	460d      	mov	r5, r1
 801beba:	d9f4      	bls.n	801bea6 <_printf_i+0x112>
 801bebc:	2b08      	cmp	r3, #8
 801bebe:	d10b      	bne.n	801bed8 <_printf_i+0x144>
 801bec0:	6823      	ldr	r3, [r4, #0]
 801bec2:	07df      	lsls	r7, r3, #31
 801bec4:	d508      	bpl.n	801bed8 <_printf_i+0x144>
 801bec6:	6923      	ldr	r3, [r4, #16]
 801bec8:	6861      	ldr	r1, [r4, #4]
 801beca:	4299      	cmp	r1, r3
 801becc:	bfde      	ittt	le
 801bece:	2330      	movle	r3, #48	@ 0x30
 801bed0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bed4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bed8:	1b92      	subs	r2, r2, r6
 801beda:	6122      	str	r2, [r4, #16]
 801bedc:	f8cd a000 	str.w	sl, [sp]
 801bee0:	464b      	mov	r3, r9
 801bee2:	aa03      	add	r2, sp, #12
 801bee4:	4621      	mov	r1, r4
 801bee6:	4640      	mov	r0, r8
 801bee8:	f7ff fee6 	bl	801bcb8 <_printf_common>
 801beec:	3001      	adds	r0, #1
 801beee:	d14a      	bne.n	801bf86 <_printf_i+0x1f2>
 801bef0:	f04f 30ff 	mov.w	r0, #4294967295
 801bef4:	b004      	add	sp, #16
 801bef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801befa:	6823      	ldr	r3, [r4, #0]
 801befc:	f043 0320 	orr.w	r3, r3, #32
 801bf00:	6023      	str	r3, [r4, #0]
 801bf02:	4833      	ldr	r0, [pc, #204]	@ (801bfd0 <_printf_i+0x23c>)
 801bf04:	2778      	movs	r7, #120	@ 0x78
 801bf06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801bf0a:	6823      	ldr	r3, [r4, #0]
 801bf0c:	6831      	ldr	r1, [r6, #0]
 801bf0e:	061f      	lsls	r7, r3, #24
 801bf10:	f851 5b04 	ldr.w	r5, [r1], #4
 801bf14:	d402      	bmi.n	801bf1c <_printf_i+0x188>
 801bf16:	065f      	lsls	r7, r3, #25
 801bf18:	bf48      	it	mi
 801bf1a:	b2ad      	uxthmi	r5, r5
 801bf1c:	6031      	str	r1, [r6, #0]
 801bf1e:	07d9      	lsls	r1, r3, #31
 801bf20:	bf44      	itt	mi
 801bf22:	f043 0320 	orrmi.w	r3, r3, #32
 801bf26:	6023      	strmi	r3, [r4, #0]
 801bf28:	b11d      	cbz	r5, 801bf32 <_printf_i+0x19e>
 801bf2a:	2310      	movs	r3, #16
 801bf2c:	e7ac      	b.n	801be88 <_printf_i+0xf4>
 801bf2e:	4827      	ldr	r0, [pc, #156]	@ (801bfcc <_printf_i+0x238>)
 801bf30:	e7e9      	b.n	801bf06 <_printf_i+0x172>
 801bf32:	6823      	ldr	r3, [r4, #0]
 801bf34:	f023 0320 	bic.w	r3, r3, #32
 801bf38:	6023      	str	r3, [r4, #0]
 801bf3a:	e7f6      	b.n	801bf2a <_printf_i+0x196>
 801bf3c:	4616      	mov	r6, r2
 801bf3e:	e7bd      	b.n	801bebc <_printf_i+0x128>
 801bf40:	6833      	ldr	r3, [r6, #0]
 801bf42:	6825      	ldr	r5, [r4, #0]
 801bf44:	6961      	ldr	r1, [r4, #20]
 801bf46:	1d18      	adds	r0, r3, #4
 801bf48:	6030      	str	r0, [r6, #0]
 801bf4a:	062e      	lsls	r6, r5, #24
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	d501      	bpl.n	801bf54 <_printf_i+0x1c0>
 801bf50:	6019      	str	r1, [r3, #0]
 801bf52:	e002      	b.n	801bf5a <_printf_i+0x1c6>
 801bf54:	0668      	lsls	r0, r5, #25
 801bf56:	d5fb      	bpl.n	801bf50 <_printf_i+0x1bc>
 801bf58:	8019      	strh	r1, [r3, #0]
 801bf5a:	2300      	movs	r3, #0
 801bf5c:	6123      	str	r3, [r4, #16]
 801bf5e:	4616      	mov	r6, r2
 801bf60:	e7bc      	b.n	801bedc <_printf_i+0x148>
 801bf62:	6833      	ldr	r3, [r6, #0]
 801bf64:	1d1a      	adds	r2, r3, #4
 801bf66:	6032      	str	r2, [r6, #0]
 801bf68:	681e      	ldr	r6, [r3, #0]
 801bf6a:	6862      	ldr	r2, [r4, #4]
 801bf6c:	2100      	movs	r1, #0
 801bf6e:	4630      	mov	r0, r6
 801bf70:	f7e4 f946 	bl	8000200 <memchr>
 801bf74:	b108      	cbz	r0, 801bf7a <_printf_i+0x1e6>
 801bf76:	1b80      	subs	r0, r0, r6
 801bf78:	6060      	str	r0, [r4, #4]
 801bf7a:	6863      	ldr	r3, [r4, #4]
 801bf7c:	6123      	str	r3, [r4, #16]
 801bf7e:	2300      	movs	r3, #0
 801bf80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801bf84:	e7aa      	b.n	801bedc <_printf_i+0x148>
 801bf86:	6923      	ldr	r3, [r4, #16]
 801bf88:	4632      	mov	r2, r6
 801bf8a:	4649      	mov	r1, r9
 801bf8c:	4640      	mov	r0, r8
 801bf8e:	47d0      	blx	sl
 801bf90:	3001      	adds	r0, #1
 801bf92:	d0ad      	beq.n	801bef0 <_printf_i+0x15c>
 801bf94:	6823      	ldr	r3, [r4, #0]
 801bf96:	079b      	lsls	r3, r3, #30
 801bf98:	d413      	bmi.n	801bfc2 <_printf_i+0x22e>
 801bf9a:	68e0      	ldr	r0, [r4, #12]
 801bf9c:	9b03      	ldr	r3, [sp, #12]
 801bf9e:	4298      	cmp	r0, r3
 801bfa0:	bfb8      	it	lt
 801bfa2:	4618      	movlt	r0, r3
 801bfa4:	e7a6      	b.n	801bef4 <_printf_i+0x160>
 801bfa6:	2301      	movs	r3, #1
 801bfa8:	4632      	mov	r2, r6
 801bfaa:	4649      	mov	r1, r9
 801bfac:	4640      	mov	r0, r8
 801bfae:	47d0      	blx	sl
 801bfb0:	3001      	adds	r0, #1
 801bfb2:	d09d      	beq.n	801bef0 <_printf_i+0x15c>
 801bfb4:	3501      	adds	r5, #1
 801bfb6:	68e3      	ldr	r3, [r4, #12]
 801bfb8:	9903      	ldr	r1, [sp, #12]
 801bfba:	1a5b      	subs	r3, r3, r1
 801bfbc:	42ab      	cmp	r3, r5
 801bfbe:	dcf2      	bgt.n	801bfa6 <_printf_i+0x212>
 801bfc0:	e7eb      	b.n	801bf9a <_printf_i+0x206>
 801bfc2:	2500      	movs	r5, #0
 801bfc4:	f104 0619 	add.w	r6, r4, #25
 801bfc8:	e7f5      	b.n	801bfb6 <_printf_i+0x222>
 801bfca:	bf00      	nop
 801bfcc:	0802146d 	.word	0x0802146d
 801bfd0:	0802147e 	.word	0x0802147e

0801bfd4 <__sflush_r>:
 801bfd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801bfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfdc:	0716      	lsls	r6, r2, #28
 801bfde:	4605      	mov	r5, r0
 801bfe0:	460c      	mov	r4, r1
 801bfe2:	d454      	bmi.n	801c08e <__sflush_r+0xba>
 801bfe4:	684b      	ldr	r3, [r1, #4]
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	dc02      	bgt.n	801bff0 <__sflush_r+0x1c>
 801bfea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	dd48      	ble.n	801c082 <__sflush_r+0xae>
 801bff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801bff2:	2e00      	cmp	r6, #0
 801bff4:	d045      	beq.n	801c082 <__sflush_r+0xae>
 801bff6:	2300      	movs	r3, #0
 801bff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801bffc:	682f      	ldr	r7, [r5, #0]
 801bffe:	6a21      	ldr	r1, [r4, #32]
 801c000:	602b      	str	r3, [r5, #0]
 801c002:	d030      	beq.n	801c066 <__sflush_r+0x92>
 801c004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c006:	89a3      	ldrh	r3, [r4, #12]
 801c008:	0759      	lsls	r1, r3, #29
 801c00a:	d505      	bpl.n	801c018 <__sflush_r+0x44>
 801c00c:	6863      	ldr	r3, [r4, #4]
 801c00e:	1ad2      	subs	r2, r2, r3
 801c010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c012:	b10b      	cbz	r3, 801c018 <__sflush_r+0x44>
 801c014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c016:	1ad2      	subs	r2, r2, r3
 801c018:	2300      	movs	r3, #0
 801c01a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c01c:	6a21      	ldr	r1, [r4, #32]
 801c01e:	4628      	mov	r0, r5
 801c020:	47b0      	blx	r6
 801c022:	1c43      	adds	r3, r0, #1
 801c024:	89a3      	ldrh	r3, [r4, #12]
 801c026:	d106      	bne.n	801c036 <__sflush_r+0x62>
 801c028:	6829      	ldr	r1, [r5, #0]
 801c02a:	291d      	cmp	r1, #29
 801c02c:	d82b      	bhi.n	801c086 <__sflush_r+0xb2>
 801c02e:	4a2a      	ldr	r2, [pc, #168]	@ (801c0d8 <__sflush_r+0x104>)
 801c030:	410a      	asrs	r2, r1
 801c032:	07d6      	lsls	r6, r2, #31
 801c034:	d427      	bmi.n	801c086 <__sflush_r+0xb2>
 801c036:	2200      	movs	r2, #0
 801c038:	6062      	str	r2, [r4, #4]
 801c03a:	04d9      	lsls	r1, r3, #19
 801c03c:	6922      	ldr	r2, [r4, #16]
 801c03e:	6022      	str	r2, [r4, #0]
 801c040:	d504      	bpl.n	801c04c <__sflush_r+0x78>
 801c042:	1c42      	adds	r2, r0, #1
 801c044:	d101      	bne.n	801c04a <__sflush_r+0x76>
 801c046:	682b      	ldr	r3, [r5, #0]
 801c048:	b903      	cbnz	r3, 801c04c <__sflush_r+0x78>
 801c04a:	6560      	str	r0, [r4, #84]	@ 0x54
 801c04c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c04e:	602f      	str	r7, [r5, #0]
 801c050:	b1b9      	cbz	r1, 801c082 <__sflush_r+0xae>
 801c052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c056:	4299      	cmp	r1, r3
 801c058:	d002      	beq.n	801c060 <__sflush_r+0x8c>
 801c05a:	4628      	mov	r0, r5
 801c05c:	f7ff fb48 	bl	801b6f0 <_free_r>
 801c060:	2300      	movs	r3, #0
 801c062:	6363      	str	r3, [r4, #52]	@ 0x34
 801c064:	e00d      	b.n	801c082 <__sflush_r+0xae>
 801c066:	2301      	movs	r3, #1
 801c068:	4628      	mov	r0, r5
 801c06a:	47b0      	blx	r6
 801c06c:	4602      	mov	r2, r0
 801c06e:	1c50      	adds	r0, r2, #1
 801c070:	d1c9      	bne.n	801c006 <__sflush_r+0x32>
 801c072:	682b      	ldr	r3, [r5, #0]
 801c074:	2b00      	cmp	r3, #0
 801c076:	d0c6      	beq.n	801c006 <__sflush_r+0x32>
 801c078:	2b1d      	cmp	r3, #29
 801c07a:	d001      	beq.n	801c080 <__sflush_r+0xac>
 801c07c:	2b16      	cmp	r3, #22
 801c07e:	d11e      	bne.n	801c0be <__sflush_r+0xea>
 801c080:	602f      	str	r7, [r5, #0]
 801c082:	2000      	movs	r0, #0
 801c084:	e022      	b.n	801c0cc <__sflush_r+0xf8>
 801c086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c08a:	b21b      	sxth	r3, r3
 801c08c:	e01b      	b.n	801c0c6 <__sflush_r+0xf2>
 801c08e:	690f      	ldr	r7, [r1, #16]
 801c090:	2f00      	cmp	r7, #0
 801c092:	d0f6      	beq.n	801c082 <__sflush_r+0xae>
 801c094:	0793      	lsls	r3, r2, #30
 801c096:	680e      	ldr	r6, [r1, #0]
 801c098:	bf08      	it	eq
 801c09a:	694b      	ldreq	r3, [r1, #20]
 801c09c:	600f      	str	r7, [r1, #0]
 801c09e:	bf18      	it	ne
 801c0a0:	2300      	movne	r3, #0
 801c0a2:	eba6 0807 	sub.w	r8, r6, r7
 801c0a6:	608b      	str	r3, [r1, #8]
 801c0a8:	f1b8 0f00 	cmp.w	r8, #0
 801c0ac:	dde9      	ble.n	801c082 <__sflush_r+0xae>
 801c0ae:	6a21      	ldr	r1, [r4, #32]
 801c0b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c0b2:	4643      	mov	r3, r8
 801c0b4:	463a      	mov	r2, r7
 801c0b6:	4628      	mov	r0, r5
 801c0b8:	47b0      	blx	r6
 801c0ba:	2800      	cmp	r0, #0
 801c0bc:	dc08      	bgt.n	801c0d0 <__sflush_r+0xfc>
 801c0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c0c6:	81a3      	strh	r3, [r4, #12]
 801c0c8:	f04f 30ff 	mov.w	r0, #4294967295
 801c0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0d0:	4407      	add	r7, r0
 801c0d2:	eba8 0800 	sub.w	r8, r8, r0
 801c0d6:	e7e7      	b.n	801c0a8 <__sflush_r+0xd4>
 801c0d8:	dfbffffe 	.word	0xdfbffffe

0801c0dc <_fflush_r>:
 801c0dc:	b538      	push	{r3, r4, r5, lr}
 801c0de:	690b      	ldr	r3, [r1, #16]
 801c0e0:	4605      	mov	r5, r0
 801c0e2:	460c      	mov	r4, r1
 801c0e4:	b913      	cbnz	r3, 801c0ec <_fflush_r+0x10>
 801c0e6:	2500      	movs	r5, #0
 801c0e8:	4628      	mov	r0, r5
 801c0ea:	bd38      	pop	{r3, r4, r5, pc}
 801c0ec:	b118      	cbz	r0, 801c0f6 <_fflush_r+0x1a>
 801c0ee:	6a03      	ldr	r3, [r0, #32]
 801c0f0:	b90b      	cbnz	r3, 801c0f6 <_fflush_r+0x1a>
 801c0f2:	f7ff f893 	bl	801b21c <__sinit>
 801c0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d0f3      	beq.n	801c0e6 <_fflush_r+0xa>
 801c0fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c100:	07d0      	lsls	r0, r2, #31
 801c102:	d404      	bmi.n	801c10e <_fflush_r+0x32>
 801c104:	0599      	lsls	r1, r3, #22
 801c106:	d402      	bmi.n	801c10e <_fflush_r+0x32>
 801c108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c10a:	f7ff fae0 	bl	801b6ce <__retarget_lock_acquire_recursive>
 801c10e:	4628      	mov	r0, r5
 801c110:	4621      	mov	r1, r4
 801c112:	f7ff ff5f 	bl	801bfd4 <__sflush_r>
 801c116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c118:	07da      	lsls	r2, r3, #31
 801c11a:	4605      	mov	r5, r0
 801c11c:	d4e4      	bmi.n	801c0e8 <_fflush_r+0xc>
 801c11e:	89a3      	ldrh	r3, [r4, #12]
 801c120:	059b      	lsls	r3, r3, #22
 801c122:	d4e1      	bmi.n	801c0e8 <_fflush_r+0xc>
 801c124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c126:	f7ff fad3 	bl	801b6d0 <__retarget_lock_release_recursive>
 801c12a:	e7dd      	b.n	801c0e8 <_fflush_r+0xc>

0801c12c <__swhatbuf_r>:
 801c12c:	b570      	push	{r4, r5, r6, lr}
 801c12e:	460c      	mov	r4, r1
 801c130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c134:	2900      	cmp	r1, #0
 801c136:	b096      	sub	sp, #88	@ 0x58
 801c138:	4615      	mov	r5, r2
 801c13a:	461e      	mov	r6, r3
 801c13c:	da0d      	bge.n	801c15a <__swhatbuf_r+0x2e>
 801c13e:	89a3      	ldrh	r3, [r4, #12]
 801c140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c144:	f04f 0100 	mov.w	r1, #0
 801c148:	bf14      	ite	ne
 801c14a:	2340      	movne	r3, #64	@ 0x40
 801c14c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c150:	2000      	movs	r0, #0
 801c152:	6031      	str	r1, [r6, #0]
 801c154:	602b      	str	r3, [r5, #0]
 801c156:	b016      	add	sp, #88	@ 0x58
 801c158:	bd70      	pop	{r4, r5, r6, pc}
 801c15a:	466a      	mov	r2, sp
 801c15c:	f000 f896 	bl	801c28c <_fstat_r>
 801c160:	2800      	cmp	r0, #0
 801c162:	dbec      	blt.n	801c13e <__swhatbuf_r+0x12>
 801c164:	9901      	ldr	r1, [sp, #4]
 801c166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c16a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c16e:	4259      	negs	r1, r3
 801c170:	4159      	adcs	r1, r3
 801c172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c176:	e7eb      	b.n	801c150 <__swhatbuf_r+0x24>

0801c178 <__smakebuf_r>:
 801c178:	898b      	ldrh	r3, [r1, #12]
 801c17a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c17c:	079d      	lsls	r5, r3, #30
 801c17e:	4606      	mov	r6, r0
 801c180:	460c      	mov	r4, r1
 801c182:	d507      	bpl.n	801c194 <__smakebuf_r+0x1c>
 801c184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c188:	6023      	str	r3, [r4, #0]
 801c18a:	6123      	str	r3, [r4, #16]
 801c18c:	2301      	movs	r3, #1
 801c18e:	6163      	str	r3, [r4, #20]
 801c190:	b003      	add	sp, #12
 801c192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c194:	ab01      	add	r3, sp, #4
 801c196:	466a      	mov	r2, sp
 801c198:	f7ff ffc8 	bl	801c12c <__swhatbuf_r>
 801c19c:	9f00      	ldr	r7, [sp, #0]
 801c19e:	4605      	mov	r5, r0
 801c1a0:	4639      	mov	r1, r7
 801c1a2:	4630      	mov	r0, r6
 801c1a4:	f7fe ff22 	bl	801afec <_malloc_r>
 801c1a8:	b948      	cbnz	r0, 801c1be <__smakebuf_r+0x46>
 801c1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c1ae:	059a      	lsls	r2, r3, #22
 801c1b0:	d4ee      	bmi.n	801c190 <__smakebuf_r+0x18>
 801c1b2:	f023 0303 	bic.w	r3, r3, #3
 801c1b6:	f043 0302 	orr.w	r3, r3, #2
 801c1ba:	81a3      	strh	r3, [r4, #12]
 801c1bc:	e7e2      	b.n	801c184 <__smakebuf_r+0xc>
 801c1be:	89a3      	ldrh	r3, [r4, #12]
 801c1c0:	6020      	str	r0, [r4, #0]
 801c1c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c1c6:	81a3      	strh	r3, [r4, #12]
 801c1c8:	9b01      	ldr	r3, [sp, #4]
 801c1ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c1ce:	b15b      	cbz	r3, 801c1e8 <__smakebuf_r+0x70>
 801c1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c1d4:	4630      	mov	r0, r6
 801c1d6:	f000 f86b 	bl	801c2b0 <_isatty_r>
 801c1da:	b128      	cbz	r0, 801c1e8 <__smakebuf_r+0x70>
 801c1dc:	89a3      	ldrh	r3, [r4, #12]
 801c1de:	f023 0303 	bic.w	r3, r3, #3
 801c1e2:	f043 0301 	orr.w	r3, r3, #1
 801c1e6:	81a3      	strh	r3, [r4, #12]
 801c1e8:	89a3      	ldrh	r3, [r4, #12]
 801c1ea:	431d      	orrs	r5, r3
 801c1ec:	81a5      	strh	r5, [r4, #12]
 801c1ee:	e7cf      	b.n	801c190 <__smakebuf_r+0x18>

0801c1f0 <_putc_r>:
 801c1f0:	b570      	push	{r4, r5, r6, lr}
 801c1f2:	460d      	mov	r5, r1
 801c1f4:	4614      	mov	r4, r2
 801c1f6:	4606      	mov	r6, r0
 801c1f8:	b118      	cbz	r0, 801c202 <_putc_r+0x12>
 801c1fa:	6a03      	ldr	r3, [r0, #32]
 801c1fc:	b90b      	cbnz	r3, 801c202 <_putc_r+0x12>
 801c1fe:	f7ff f80d 	bl	801b21c <__sinit>
 801c202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c204:	07d8      	lsls	r0, r3, #31
 801c206:	d405      	bmi.n	801c214 <_putc_r+0x24>
 801c208:	89a3      	ldrh	r3, [r4, #12]
 801c20a:	0599      	lsls	r1, r3, #22
 801c20c:	d402      	bmi.n	801c214 <_putc_r+0x24>
 801c20e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c210:	f7ff fa5d 	bl	801b6ce <__retarget_lock_acquire_recursive>
 801c214:	68a3      	ldr	r3, [r4, #8]
 801c216:	3b01      	subs	r3, #1
 801c218:	2b00      	cmp	r3, #0
 801c21a:	60a3      	str	r3, [r4, #8]
 801c21c:	da05      	bge.n	801c22a <_putc_r+0x3a>
 801c21e:	69a2      	ldr	r2, [r4, #24]
 801c220:	4293      	cmp	r3, r2
 801c222:	db12      	blt.n	801c24a <_putc_r+0x5a>
 801c224:	b2eb      	uxtb	r3, r5
 801c226:	2b0a      	cmp	r3, #10
 801c228:	d00f      	beq.n	801c24a <_putc_r+0x5a>
 801c22a:	6823      	ldr	r3, [r4, #0]
 801c22c:	1c5a      	adds	r2, r3, #1
 801c22e:	6022      	str	r2, [r4, #0]
 801c230:	701d      	strb	r5, [r3, #0]
 801c232:	b2ed      	uxtb	r5, r5
 801c234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c236:	07da      	lsls	r2, r3, #31
 801c238:	d405      	bmi.n	801c246 <_putc_r+0x56>
 801c23a:	89a3      	ldrh	r3, [r4, #12]
 801c23c:	059b      	lsls	r3, r3, #22
 801c23e:	d402      	bmi.n	801c246 <_putc_r+0x56>
 801c240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c242:	f7ff fa45 	bl	801b6d0 <__retarget_lock_release_recursive>
 801c246:	4628      	mov	r0, r5
 801c248:	bd70      	pop	{r4, r5, r6, pc}
 801c24a:	4629      	mov	r1, r5
 801c24c:	4622      	mov	r2, r4
 801c24e:	4630      	mov	r0, r6
 801c250:	f7ff f8f5 	bl	801b43e <__swbuf_r>
 801c254:	4605      	mov	r5, r0
 801c256:	e7ed      	b.n	801c234 <_putc_r+0x44>

0801c258 <memmove>:
 801c258:	4288      	cmp	r0, r1
 801c25a:	b510      	push	{r4, lr}
 801c25c:	eb01 0402 	add.w	r4, r1, r2
 801c260:	d902      	bls.n	801c268 <memmove+0x10>
 801c262:	4284      	cmp	r4, r0
 801c264:	4623      	mov	r3, r4
 801c266:	d807      	bhi.n	801c278 <memmove+0x20>
 801c268:	1e43      	subs	r3, r0, #1
 801c26a:	42a1      	cmp	r1, r4
 801c26c:	d008      	beq.n	801c280 <memmove+0x28>
 801c26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c272:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c276:	e7f8      	b.n	801c26a <memmove+0x12>
 801c278:	4402      	add	r2, r0
 801c27a:	4601      	mov	r1, r0
 801c27c:	428a      	cmp	r2, r1
 801c27e:	d100      	bne.n	801c282 <memmove+0x2a>
 801c280:	bd10      	pop	{r4, pc}
 801c282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c28a:	e7f7      	b.n	801c27c <memmove+0x24>

0801c28c <_fstat_r>:
 801c28c:	b538      	push	{r3, r4, r5, lr}
 801c28e:	4d07      	ldr	r5, [pc, #28]	@ (801c2ac <_fstat_r+0x20>)
 801c290:	2300      	movs	r3, #0
 801c292:	4604      	mov	r4, r0
 801c294:	4608      	mov	r0, r1
 801c296:	4611      	mov	r1, r2
 801c298:	602b      	str	r3, [r5, #0]
 801c29a:	f7e4 fea8 	bl	8000fee <_fstat>
 801c29e:	1c43      	adds	r3, r0, #1
 801c2a0:	d102      	bne.n	801c2a8 <_fstat_r+0x1c>
 801c2a2:	682b      	ldr	r3, [r5, #0]
 801c2a4:	b103      	cbz	r3, 801c2a8 <_fstat_r+0x1c>
 801c2a6:	6023      	str	r3, [r4, #0]
 801c2a8:	bd38      	pop	{r3, r4, r5, pc}
 801c2aa:	bf00      	nop
 801c2ac:	2000c58c 	.word	0x2000c58c

0801c2b0 <_isatty_r>:
 801c2b0:	b538      	push	{r3, r4, r5, lr}
 801c2b2:	4d06      	ldr	r5, [pc, #24]	@ (801c2cc <_isatty_r+0x1c>)
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	4604      	mov	r4, r0
 801c2b8:	4608      	mov	r0, r1
 801c2ba:	602b      	str	r3, [r5, #0]
 801c2bc:	f7e4 fea7 	bl	800100e <_isatty>
 801c2c0:	1c43      	adds	r3, r0, #1
 801c2c2:	d102      	bne.n	801c2ca <_isatty_r+0x1a>
 801c2c4:	682b      	ldr	r3, [r5, #0]
 801c2c6:	b103      	cbz	r3, 801c2ca <_isatty_r+0x1a>
 801c2c8:	6023      	str	r3, [r4, #0]
 801c2ca:	bd38      	pop	{r3, r4, r5, pc}
 801c2cc:	2000c58c 	.word	0x2000c58c

0801c2d0 <_realloc_r>:
 801c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2d4:	4680      	mov	r8, r0
 801c2d6:	4615      	mov	r5, r2
 801c2d8:	460c      	mov	r4, r1
 801c2da:	b921      	cbnz	r1, 801c2e6 <_realloc_r+0x16>
 801c2dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2e0:	4611      	mov	r1, r2
 801c2e2:	f7fe be83 	b.w	801afec <_malloc_r>
 801c2e6:	b92a      	cbnz	r2, 801c2f4 <_realloc_r+0x24>
 801c2e8:	f7ff fa02 	bl	801b6f0 <_free_r>
 801c2ec:	2400      	movs	r4, #0
 801c2ee:	4620      	mov	r0, r4
 801c2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2f4:	f000 f81a 	bl	801c32c <_malloc_usable_size_r>
 801c2f8:	4285      	cmp	r5, r0
 801c2fa:	4606      	mov	r6, r0
 801c2fc:	d802      	bhi.n	801c304 <_realloc_r+0x34>
 801c2fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801c302:	d8f4      	bhi.n	801c2ee <_realloc_r+0x1e>
 801c304:	4629      	mov	r1, r5
 801c306:	4640      	mov	r0, r8
 801c308:	f7fe fe70 	bl	801afec <_malloc_r>
 801c30c:	4607      	mov	r7, r0
 801c30e:	2800      	cmp	r0, #0
 801c310:	d0ec      	beq.n	801c2ec <_realloc_r+0x1c>
 801c312:	42b5      	cmp	r5, r6
 801c314:	462a      	mov	r2, r5
 801c316:	4621      	mov	r1, r4
 801c318:	bf28      	it	cs
 801c31a:	4632      	movcs	r2, r6
 801c31c:	f7ff f9d9 	bl	801b6d2 <memcpy>
 801c320:	4621      	mov	r1, r4
 801c322:	4640      	mov	r0, r8
 801c324:	f7ff f9e4 	bl	801b6f0 <_free_r>
 801c328:	463c      	mov	r4, r7
 801c32a:	e7e0      	b.n	801c2ee <_realloc_r+0x1e>

0801c32c <_malloc_usable_size_r>:
 801c32c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c330:	1f18      	subs	r0, r3, #4
 801c332:	2b00      	cmp	r3, #0
 801c334:	bfbc      	itt	lt
 801c336:	580b      	ldrlt	r3, [r1, r0]
 801c338:	18c0      	addlt	r0, r0, r3
 801c33a:	4770      	bx	lr

0801c33c <powf>:
 801c33c:	b508      	push	{r3, lr}
 801c33e:	ed2d 8b04 	vpush	{d8-d9}
 801c342:	eeb0 8a60 	vmov.f32	s16, s1
 801c346:	eeb0 9a40 	vmov.f32	s18, s0
 801c34a:	f000 f87d 	bl	801c448 <__ieee754_powf>
 801c34e:	eeb4 8a48 	vcmp.f32	s16, s16
 801c352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c356:	eef0 8a40 	vmov.f32	s17, s0
 801c35a:	d63e      	bvs.n	801c3da <powf+0x9e>
 801c35c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801c360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c364:	d112      	bne.n	801c38c <powf+0x50>
 801c366:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801c36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c36e:	d039      	beq.n	801c3e4 <powf+0xa8>
 801c370:	eeb0 0a48 	vmov.f32	s0, s16
 801c374:	f000 f839 	bl	801c3ea <finitef>
 801c378:	b378      	cbz	r0, 801c3da <powf+0x9e>
 801c37a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c382:	d52a      	bpl.n	801c3da <powf+0x9e>
 801c384:	f7ff f978 	bl	801b678 <__errno>
 801c388:	2322      	movs	r3, #34	@ 0x22
 801c38a:	e014      	b.n	801c3b6 <powf+0x7a>
 801c38c:	f000 f82d 	bl	801c3ea <finitef>
 801c390:	b998      	cbnz	r0, 801c3ba <powf+0x7e>
 801c392:	eeb0 0a49 	vmov.f32	s0, s18
 801c396:	f000 f828 	bl	801c3ea <finitef>
 801c39a:	b170      	cbz	r0, 801c3ba <powf+0x7e>
 801c39c:	eeb0 0a48 	vmov.f32	s0, s16
 801c3a0:	f000 f823 	bl	801c3ea <finitef>
 801c3a4:	b148      	cbz	r0, 801c3ba <powf+0x7e>
 801c3a6:	eef4 8a68 	vcmp.f32	s17, s17
 801c3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3ae:	d7e9      	bvc.n	801c384 <powf+0x48>
 801c3b0:	f7ff f962 	bl	801b678 <__errno>
 801c3b4:	2321      	movs	r3, #33	@ 0x21
 801c3b6:	6003      	str	r3, [r0, #0]
 801c3b8:	e00f      	b.n	801c3da <powf+0x9e>
 801c3ba:	eef5 8a40 	vcmp.f32	s17, #0.0
 801c3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3c2:	d10a      	bne.n	801c3da <powf+0x9e>
 801c3c4:	eeb0 0a49 	vmov.f32	s0, s18
 801c3c8:	f000 f80f 	bl	801c3ea <finitef>
 801c3cc:	b128      	cbz	r0, 801c3da <powf+0x9e>
 801c3ce:	eeb0 0a48 	vmov.f32	s0, s16
 801c3d2:	f000 f80a 	bl	801c3ea <finitef>
 801c3d6:	2800      	cmp	r0, #0
 801c3d8:	d1d4      	bne.n	801c384 <powf+0x48>
 801c3da:	eeb0 0a68 	vmov.f32	s0, s17
 801c3de:	ecbd 8b04 	vpop	{d8-d9}
 801c3e2:	bd08      	pop	{r3, pc}
 801c3e4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801c3e8:	e7f7      	b.n	801c3da <powf+0x9e>

0801c3ea <finitef>:
 801c3ea:	ee10 3a10 	vmov	r3, s0
 801c3ee:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801c3f2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801c3f6:	bfac      	ite	ge
 801c3f8:	2000      	movge	r0, #0
 801c3fa:	2001      	movlt	r0, #1
 801c3fc:	4770      	bx	lr
	...

0801c400 <roundf>:
 801c400:	ee10 0a10 	vmov	r0, s0
 801c404:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801c408:	3a7f      	subs	r2, #127	@ 0x7f
 801c40a:	2a16      	cmp	r2, #22
 801c40c:	dc15      	bgt.n	801c43a <roundf+0x3a>
 801c40e:	2a00      	cmp	r2, #0
 801c410:	da08      	bge.n	801c424 <roundf+0x24>
 801c412:	3201      	adds	r2, #1
 801c414:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 801c418:	d101      	bne.n	801c41e <roundf+0x1e>
 801c41a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801c41e:	ee00 3a10 	vmov	s0, r3
 801c422:	4770      	bx	lr
 801c424:	4907      	ldr	r1, [pc, #28]	@ (801c444 <roundf+0x44>)
 801c426:	4111      	asrs	r1, r2
 801c428:	4201      	tst	r1, r0
 801c42a:	d0fa      	beq.n	801c422 <roundf+0x22>
 801c42c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801c430:	4113      	asrs	r3, r2
 801c432:	4403      	add	r3, r0
 801c434:	ea23 0301 	bic.w	r3, r3, r1
 801c438:	e7f1      	b.n	801c41e <roundf+0x1e>
 801c43a:	2a80      	cmp	r2, #128	@ 0x80
 801c43c:	d1f1      	bne.n	801c422 <roundf+0x22>
 801c43e:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c442:	4770      	bx	lr
 801c444:	007fffff 	.word	0x007fffff

0801c448 <__ieee754_powf>:
 801c448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c44c:	ee10 4a90 	vmov	r4, s1
 801c450:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801c454:	ed2d 8b02 	vpush	{d8}
 801c458:	ee10 6a10 	vmov	r6, s0
 801c45c:	eeb0 8a40 	vmov.f32	s16, s0
 801c460:	eef0 8a60 	vmov.f32	s17, s1
 801c464:	d10c      	bne.n	801c480 <__ieee754_powf+0x38>
 801c466:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801c46a:	0076      	lsls	r6, r6, #1
 801c46c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801c470:	f240 829c 	bls.w	801c9ac <__ieee754_powf+0x564>
 801c474:	ee38 0a28 	vadd.f32	s0, s16, s17
 801c478:	ecbd 8b02 	vpop	{d8}
 801c47c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c480:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801c484:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801c488:	d802      	bhi.n	801c490 <__ieee754_powf+0x48>
 801c48a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801c48e:	d908      	bls.n	801c4a2 <__ieee754_powf+0x5a>
 801c490:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801c494:	d1ee      	bne.n	801c474 <__ieee754_powf+0x2c>
 801c496:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801c49a:	0064      	lsls	r4, r4, #1
 801c49c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801c4a0:	e7e6      	b.n	801c470 <__ieee754_powf+0x28>
 801c4a2:	2e00      	cmp	r6, #0
 801c4a4:	da1e      	bge.n	801c4e4 <__ieee754_powf+0x9c>
 801c4a6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801c4aa:	d22b      	bcs.n	801c504 <__ieee754_powf+0xbc>
 801c4ac:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801c4b0:	d332      	bcc.n	801c518 <__ieee754_powf+0xd0>
 801c4b2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801c4b6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801c4ba:	fa49 f503 	asr.w	r5, r9, r3
 801c4be:	fa05 f303 	lsl.w	r3, r5, r3
 801c4c2:	454b      	cmp	r3, r9
 801c4c4:	d126      	bne.n	801c514 <__ieee754_powf+0xcc>
 801c4c6:	f005 0501 	and.w	r5, r5, #1
 801c4ca:	f1c5 0502 	rsb	r5, r5, #2
 801c4ce:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801c4d2:	d122      	bne.n	801c51a <__ieee754_powf+0xd2>
 801c4d4:	2c00      	cmp	r4, #0
 801c4d6:	f280 826f 	bge.w	801c9b8 <__ieee754_powf+0x570>
 801c4da:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c4de:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801c4e2:	e7c9      	b.n	801c478 <__ieee754_powf+0x30>
 801c4e4:	2500      	movs	r5, #0
 801c4e6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801c4ea:	d1f0      	bne.n	801c4ce <__ieee754_powf+0x86>
 801c4ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801c4f0:	f000 825c 	beq.w	801c9ac <__ieee754_powf+0x564>
 801c4f4:	d908      	bls.n	801c508 <__ieee754_powf+0xc0>
 801c4f6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 801c858 <__ieee754_powf+0x410>
 801c4fa:	2c00      	cmp	r4, #0
 801c4fc:	bfa8      	it	ge
 801c4fe:	eeb0 0a68 	vmovge.f32	s0, s17
 801c502:	e7b9      	b.n	801c478 <__ieee754_powf+0x30>
 801c504:	2502      	movs	r5, #2
 801c506:	e7ee      	b.n	801c4e6 <__ieee754_powf+0x9e>
 801c508:	2c00      	cmp	r4, #0
 801c50a:	f280 8252 	bge.w	801c9b2 <__ieee754_powf+0x56a>
 801c50e:	eeb1 0a68 	vneg.f32	s0, s17
 801c512:	e7b1      	b.n	801c478 <__ieee754_powf+0x30>
 801c514:	2500      	movs	r5, #0
 801c516:	e7da      	b.n	801c4ce <__ieee754_powf+0x86>
 801c518:	2500      	movs	r5, #0
 801c51a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801c51e:	d102      	bne.n	801c526 <__ieee754_powf+0xde>
 801c520:	ee28 0a08 	vmul.f32	s0, s16, s16
 801c524:	e7a8      	b.n	801c478 <__ieee754_powf+0x30>
 801c526:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801c52a:	d109      	bne.n	801c540 <__ieee754_powf+0xf8>
 801c52c:	2e00      	cmp	r6, #0
 801c52e:	db07      	blt.n	801c540 <__ieee754_powf+0xf8>
 801c530:	eeb0 0a48 	vmov.f32	s0, s16
 801c534:	ecbd 8b02 	vpop	{d8}
 801c538:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c53c:	f000 bae8 	b.w	801cb10 <__ieee754_sqrtf>
 801c540:	eeb0 0a48 	vmov.f32	s0, s16
 801c544:	f000 fa50 	bl	801c9e8 <fabsf>
 801c548:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801c54c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801c550:	4647      	mov	r7, r8
 801c552:	d002      	beq.n	801c55a <__ieee754_powf+0x112>
 801c554:	f1b8 0f00 	cmp.w	r8, #0
 801c558:	d117      	bne.n	801c58a <__ieee754_powf+0x142>
 801c55a:	2c00      	cmp	r4, #0
 801c55c:	bfbc      	itt	lt
 801c55e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801c562:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801c566:	2e00      	cmp	r6, #0
 801c568:	da86      	bge.n	801c478 <__ieee754_powf+0x30>
 801c56a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801c56e:	ea58 0805 	orrs.w	r8, r8, r5
 801c572:	d104      	bne.n	801c57e <__ieee754_powf+0x136>
 801c574:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c578:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801c57c:	e77c      	b.n	801c478 <__ieee754_powf+0x30>
 801c57e:	2d01      	cmp	r5, #1
 801c580:	f47f af7a 	bne.w	801c478 <__ieee754_powf+0x30>
 801c584:	eeb1 0a40 	vneg.f32	s0, s0
 801c588:	e776      	b.n	801c478 <__ieee754_powf+0x30>
 801c58a:	0ff0      	lsrs	r0, r6, #31
 801c58c:	3801      	subs	r0, #1
 801c58e:	ea55 0300 	orrs.w	r3, r5, r0
 801c592:	d104      	bne.n	801c59e <__ieee754_powf+0x156>
 801c594:	ee38 8a48 	vsub.f32	s16, s16, s16
 801c598:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801c59c:	e76c      	b.n	801c478 <__ieee754_powf+0x30>
 801c59e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801c5a2:	d973      	bls.n	801c68c <__ieee754_powf+0x244>
 801c5a4:	4bad      	ldr	r3, [pc, #692]	@ (801c85c <__ieee754_powf+0x414>)
 801c5a6:	4598      	cmp	r8, r3
 801c5a8:	d808      	bhi.n	801c5bc <__ieee754_powf+0x174>
 801c5aa:	2c00      	cmp	r4, #0
 801c5ac:	da0b      	bge.n	801c5c6 <__ieee754_powf+0x17e>
 801c5ae:	2000      	movs	r0, #0
 801c5b0:	ecbd 8b02 	vpop	{d8}
 801c5b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5b8:	f000 baa4 	b.w	801cb04 <__math_oflowf>
 801c5bc:	4ba8      	ldr	r3, [pc, #672]	@ (801c860 <__ieee754_powf+0x418>)
 801c5be:	4598      	cmp	r8, r3
 801c5c0:	d908      	bls.n	801c5d4 <__ieee754_powf+0x18c>
 801c5c2:	2c00      	cmp	r4, #0
 801c5c4:	dcf3      	bgt.n	801c5ae <__ieee754_powf+0x166>
 801c5c6:	2000      	movs	r0, #0
 801c5c8:	ecbd 8b02 	vpop	{d8}
 801c5cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5d0:	f000 ba92 	b.w	801caf8 <__math_uflowf>
 801c5d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c5d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c5dc:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 801c864 <__ieee754_powf+0x41c>
 801c5e0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801c5e4:	eee0 6a67 	vfms.f32	s13, s0, s15
 801c5e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c5ec:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801c5f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c5f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c5f8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801c868 <__ieee754_powf+0x420>
 801c5fc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801c600:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 801c86c <__ieee754_powf+0x424>
 801c604:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c608:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801c870 <__ieee754_powf+0x428>
 801c60c:	eef0 6a67 	vmov.f32	s13, s15
 801c610:	eee0 6a07 	vfma.f32	s13, s0, s14
 801c614:	ee16 3a90 	vmov	r3, s13
 801c618:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801c61c:	f023 030f 	bic.w	r3, r3, #15
 801c620:	ee06 3a90 	vmov	s13, r3
 801c624:	eee0 6a47 	vfms.f32	s13, s0, s14
 801c628:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c62c:	3d01      	subs	r5, #1
 801c62e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801c632:	4305      	orrs	r5, r0
 801c634:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c638:	f024 040f 	bic.w	r4, r4, #15
 801c63c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801c640:	bf18      	it	ne
 801c642:	eeb0 8a47 	vmovne.f32	s16, s14
 801c646:	ee07 4a10 	vmov	s14, r4
 801c64a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801c64e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801c652:	ee07 3a90 	vmov	s15, r3
 801c656:	eee7 0a27 	vfma.f32	s1, s14, s15
 801c65a:	ee07 4a10 	vmov	s14, r4
 801c65e:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c662:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801c666:	ee17 1a10 	vmov	r1, s14
 801c66a:	2900      	cmp	r1, #0
 801c66c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801c670:	f340 80dd 	ble.w	801c82e <__ieee754_powf+0x3e6>
 801c674:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801c678:	f240 80ca 	bls.w	801c810 <__ieee754_powf+0x3c8>
 801c67c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c684:	bf4c      	ite	mi
 801c686:	2001      	movmi	r0, #1
 801c688:	2000      	movpl	r0, #0
 801c68a:	e791      	b.n	801c5b0 <__ieee754_powf+0x168>
 801c68c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801c690:	bf01      	itttt	eq
 801c692:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801c874 <__ieee754_powf+0x42c>
 801c696:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801c69a:	f06f 0317 	mvneq.w	r3, #23
 801c69e:	ee17 7a90 	vmoveq	r7, s15
 801c6a2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801c6a6:	bf18      	it	ne
 801c6a8:	2300      	movne	r3, #0
 801c6aa:	3a7f      	subs	r2, #127	@ 0x7f
 801c6ac:	441a      	add	r2, r3
 801c6ae:	4b72      	ldr	r3, [pc, #456]	@ (801c878 <__ieee754_powf+0x430>)
 801c6b0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801c6b4:	429f      	cmp	r7, r3
 801c6b6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801c6ba:	dd06      	ble.n	801c6ca <__ieee754_powf+0x282>
 801c6bc:	4b6f      	ldr	r3, [pc, #444]	@ (801c87c <__ieee754_powf+0x434>)
 801c6be:	429f      	cmp	r7, r3
 801c6c0:	f340 80a4 	ble.w	801c80c <__ieee754_powf+0x3c4>
 801c6c4:	3201      	adds	r2, #1
 801c6c6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801c6ca:	2600      	movs	r6, #0
 801c6cc:	4b6c      	ldr	r3, [pc, #432]	@ (801c880 <__ieee754_powf+0x438>)
 801c6ce:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801c6d2:	ee07 1a10 	vmov	s14, r1
 801c6d6:	edd3 5a00 	vldr	s11, [r3]
 801c6da:	4b6a      	ldr	r3, [pc, #424]	@ (801c884 <__ieee754_powf+0x43c>)
 801c6dc:	ee75 7a87 	vadd.f32	s15, s11, s14
 801c6e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c6e4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801c6e8:	1049      	asrs	r1, r1, #1
 801c6ea:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801c6ee:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801c6f2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801c6f6:	ee37 6a65 	vsub.f32	s12, s14, s11
 801c6fa:	ee07 1a90 	vmov	s15, r1
 801c6fe:	ee26 5a24 	vmul.f32	s10, s12, s9
 801c702:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801c706:	ee15 7a10 	vmov	r7, s10
 801c70a:	401f      	ands	r7, r3
 801c70c:	ee06 7a90 	vmov	s13, r7
 801c710:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801c714:	ee37 7a65 	vsub.f32	s14, s14, s11
 801c718:	ee65 7a05 	vmul.f32	s15, s10, s10
 801c71c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801c720:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801c888 <__ieee754_powf+0x440>
 801c724:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801c88c <__ieee754_powf+0x444>
 801c728:	eee7 5a87 	vfma.f32	s11, s15, s14
 801c72c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801c890 <__ieee754_powf+0x448>
 801c730:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c734:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801c864 <__ieee754_powf+0x41c>
 801c738:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c73c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801c894 <__ieee754_powf+0x44c>
 801c740:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c744:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801c898 <__ieee754_powf+0x450>
 801c748:	ee26 6a24 	vmul.f32	s12, s12, s9
 801c74c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c750:	ee35 7a26 	vadd.f32	s14, s10, s13
 801c754:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801c758:	ee27 7a06 	vmul.f32	s14, s14, s12
 801c75c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801c760:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801c764:	eef0 5a67 	vmov.f32	s11, s15
 801c768:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801c76c:	ee75 5a87 	vadd.f32	s11, s11, s14
 801c770:	ee15 1a90 	vmov	r1, s11
 801c774:	4019      	ands	r1, r3
 801c776:	ee05 1a90 	vmov	s11, r1
 801c77a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c77e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801c782:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c786:	ee67 7a85 	vmul.f32	s15, s15, s10
 801c78a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801c78e:	eeb0 6a67 	vmov.f32	s12, s15
 801c792:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c796:	ee16 1a10 	vmov	r1, s12
 801c79a:	4019      	ands	r1, r3
 801c79c:	ee06 1a10 	vmov	s12, r1
 801c7a0:	eeb0 7a46 	vmov.f32	s14, s12
 801c7a4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801c7a8:	493c      	ldr	r1, [pc, #240]	@ (801c89c <__ieee754_powf+0x454>)
 801c7aa:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801c7ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c7b2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801c8a0 <__ieee754_powf+0x458>
 801c7b6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801c8a4 <__ieee754_powf+0x45c>
 801c7ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c7be:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801c8a8 <__ieee754_powf+0x460>
 801c7c2:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c7c6:	ed91 7a00 	vldr	s14, [r1]
 801c7ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c7ce:	ee07 2a10 	vmov	s14, r2
 801c7d2:	eef0 6a67 	vmov.f32	s13, s15
 801c7d6:	4a35      	ldr	r2, [pc, #212]	@ (801c8ac <__ieee754_powf+0x464>)
 801c7d8:	eee6 6a25 	vfma.f32	s13, s12, s11
 801c7dc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801c7e0:	ed92 5a00 	vldr	s10, [r2]
 801c7e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c7e8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801c7ec:	ee76 6a87 	vadd.f32	s13, s13, s14
 801c7f0:	ee16 2a90 	vmov	r2, s13
 801c7f4:	4013      	ands	r3, r2
 801c7f6:	ee06 3a90 	vmov	s13, r3
 801c7fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801c7fe:	ee37 7a45 	vsub.f32	s14, s14, s10
 801c802:	eea6 7a65 	vfms.f32	s14, s12, s11
 801c806:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c80a:	e70f      	b.n	801c62c <__ieee754_powf+0x1e4>
 801c80c:	2601      	movs	r6, #1
 801c80e:	e75d      	b.n	801c6cc <__ieee754_powf+0x284>
 801c810:	d152      	bne.n	801c8b8 <__ieee754_powf+0x470>
 801c812:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801c8b0 <__ieee754_powf+0x468>
 801c816:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c81a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801c81e:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c826:	f73f af29 	bgt.w	801c67c <__ieee754_powf+0x234>
 801c82a:	2386      	movs	r3, #134	@ 0x86
 801c82c:	e048      	b.n	801c8c0 <__ieee754_powf+0x478>
 801c82e:	4a21      	ldr	r2, [pc, #132]	@ (801c8b4 <__ieee754_powf+0x46c>)
 801c830:	4293      	cmp	r3, r2
 801c832:	d907      	bls.n	801c844 <__ieee754_powf+0x3fc>
 801c834:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801c838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c83c:	bf4c      	ite	mi
 801c83e:	2001      	movmi	r0, #1
 801c840:	2000      	movpl	r0, #0
 801c842:	e6c1      	b.n	801c5c8 <__ieee754_powf+0x180>
 801c844:	d138      	bne.n	801c8b8 <__ieee754_powf+0x470>
 801c846:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c84a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801c84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c852:	dbea      	blt.n	801c82a <__ieee754_powf+0x3e2>
 801c854:	e7ee      	b.n	801c834 <__ieee754_powf+0x3ec>
 801c856:	bf00      	nop
 801c858:	00000000 	.word	0x00000000
 801c85c:	3f7ffff3 	.word	0x3f7ffff3
 801c860:	3f800007 	.word	0x3f800007
 801c864:	3eaaaaab 	.word	0x3eaaaaab
 801c868:	3fb8aa3b 	.word	0x3fb8aa3b
 801c86c:	36eca570 	.word	0x36eca570
 801c870:	3fb8aa00 	.word	0x3fb8aa00
 801c874:	4b800000 	.word	0x4b800000
 801c878:	001cc471 	.word	0x001cc471
 801c87c:	005db3d6 	.word	0x005db3d6
 801c880:	080214a0 	.word	0x080214a0
 801c884:	fffff000 	.word	0xfffff000
 801c888:	3e6c3255 	.word	0x3e6c3255
 801c88c:	3e53f142 	.word	0x3e53f142
 801c890:	3e8ba305 	.word	0x3e8ba305
 801c894:	3edb6db7 	.word	0x3edb6db7
 801c898:	3f19999a 	.word	0x3f19999a
 801c89c:	08021490 	.word	0x08021490
 801c8a0:	3f76384f 	.word	0x3f76384f
 801c8a4:	3f763800 	.word	0x3f763800
 801c8a8:	369dc3a0 	.word	0x369dc3a0
 801c8ac:	08021498 	.word	0x08021498
 801c8b0:	3338aa3c 	.word	0x3338aa3c
 801c8b4:	43160000 	.word	0x43160000
 801c8b8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801c8bc:	d971      	bls.n	801c9a2 <__ieee754_powf+0x55a>
 801c8be:	15db      	asrs	r3, r3, #23
 801c8c0:	3b7e      	subs	r3, #126	@ 0x7e
 801c8c2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801c8c6:	4118      	asrs	r0, r3
 801c8c8:	4408      	add	r0, r1
 801c8ca:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801c8ce:	4a3c      	ldr	r2, [pc, #240]	@ (801c9c0 <__ieee754_powf+0x578>)
 801c8d0:	3b7f      	subs	r3, #127	@ 0x7f
 801c8d2:	411a      	asrs	r2, r3
 801c8d4:	4002      	ands	r2, r0
 801c8d6:	ee07 2a10 	vmov	s14, r2
 801c8da:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801c8de:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801c8e2:	f1c3 0317 	rsb	r3, r3, #23
 801c8e6:	4118      	asrs	r0, r3
 801c8e8:	2900      	cmp	r1, #0
 801c8ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c8ee:	bfb8      	it	lt
 801c8f0:	4240      	neglt	r0, r0
 801c8f2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801c8f6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801c9c4 <__ieee754_powf+0x57c>
 801c8fa:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 801c9c8 <__ieee754_powf+0x580>
 801c8fe:	ee17 3a10 	vmov	r3, s14
 801c902:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801c906:	f023 030f 	bic.w	r3, r3, #15
 801c90a:	ee07 3a10 	vmov	s14, r3
 801c90e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c912:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c916:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801c91a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801c9cc <__ieee754_powf+0x584>
 801c91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c922:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801c926:	eef0 6a67 	vmov.f32	s13, s15
 801c92a:	eee7 6a06 	vfma.f32	s13, s14, s12
 801c92e:	eef0 5a66 	vmov.f32	s11, s13
 801c932:	eee7 5a46 	vfms.f32	s11, s14, s12
 801c936:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801c93a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801c93e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801c9d0 <__ieee754_powf+0x588>
 801c942:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801c9d4 <__ieee754_powf+0x58c>
 801c946:	eea7 6a25 	vfma.f32	s12, s14, s11
 801c94a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 801c9d8 <__ieee754_powf+0x590>
 801c94e:	eee6 5a07 	vfma.f32	s11, s12, s14
 801c952:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801c9dc <__ieee754_powf+0x594>
 801c956:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c95a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801c9e0 <__ieee754_powf+0x598>
 801c95e:	eee6 5a07 	vfma.f32	s11, s12, s14
 801c962:	eeb0 6a66 	vmov.f32	s12, s13
 801c966:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801c96a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801c96e:	ee66 5a86 	vmul.f32	s11, s13, s12
 801c972:	ee36 6a47 	vsub.f32	s12, s12, s14
 801c976:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801c97a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801c97e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c986:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c98a:	ee10 3a10 	vmov	r3, s0
 801c98e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801c992:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c996:	da06      	bge.n	801c9a6 <__ieee754_powf+0x55e>
 801c998:	f000 f82e 	bl	801c9f8 <scalbnf>
 801c99c:	ee20 0a08 	vmul.f32	s0, s0, s16
 801c9a0:	e56a      	b.n	801c478 <__ieee754_powf+0x30>
 801c9a2:	2000      	movs	r0, #0
 801c9a4:	e7a5      	b.n	801c8f2 <__ieee754_powf+0x4aa>
 801c9a6:	ee00 3a10 	vmov	s0, r3
 801c9aa:	e7f7      	b.n	801c99c <__ieee754_powf+0x554>
 801c9ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c9b0:	e562      	b.n	801c478 <__ieee754_powf+0x30>
 801c9b2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801c9e4 <__ieee754_powf+0x59c>
 801c9b6:	e55f      	b.n	801c478 <__ieee754_powf+0x30>
 801c9b8:	eeb0 0a48 	vmov.f32	s0, s16
 801c9bc:	e55c      	b.n	801c478 <__ieee754_powf+0x30>
 801c9be:	bf00      	nop
 801c9c0:	ff800000 	.word	0xff800000
 801c9c4:	3f317218 	.word	0x3f317218
 801c9c8:	3f317200 	.word	0x3f317200
 801c9cc:	35bfbe8c 	.word	0x35bfbe8c
 801c9d0:	b5ddea0e 	.word	0xb5ddea0e
 801c9d4:	3331bb4c 	.word	0x3331bb4c
 801c9d8:	388ab355 	.word	0x388ab355
 801c9dc:	bb360b61 	.word	0xbb360b61
 801c9e0:	3e2aaaab 	.word	0x3e2aaaab
 801c9e4:	00000000 	.word	0x00000000

0801c9e8 <fabsf>:
 801c9e8:	ee10 3a10 	vmov	r3, s0
 801c9ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c9f0:	ee00 3a10 	vmov	s0, r3
 801c9f4:	4770      	bx	lr
	...

0801c9f8 <scalbnf>:
 801c9f8:	ee10 3a10 	vmov	r3, s0
 801c9fc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801ca00:	d02b      	beq.n	801ca5a <scalbnf+0x62>
 801ca02:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801ca06:	d302      	bcc.n	801ca0e <scalbnf+0x16>
 801ca08:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ca0c:	4770      	bx	lr
 801ca0e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801ca12:	d123      	bne.n	801ca5c <scalbnf+0x64>
 801ca14:	4b24      	ldr	r3, [pc, #144]	@ (801caa8 <scalbnf+0xb0>)
 801ca16:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801caac <scalbnf+0xb4>
 801ca1a:	4298      	cmp	r0, r3
 801ca1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ca20:	db17      	blt.n	801ca52 <scalbnf+0x5a>
 801ca22:	ee10 3a10 	vmov	r3, s0
 801ca26:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ca2a:	3a19      	subs	r2, #25
 801ca2c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801ca30:	4288      	cmp	r0, r1
 801ca32:	dd15      	ble.n	801ca60 <scalbnf+0x68>
 801ca34:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801cab0 <scalbnf+0xb8>
 801ca38:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801cab4 <scalbnf+0xbc>
 801ca3c:	ee10 3a10 	vmov	r3, s0
 801ca40:	eeb0 7a67 	vmov.f32	s14, s15
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	bfb8      	it	lt
 801ca48:	eef0 7a66 	vmovlt.f32	s15, s13
 801ca4c:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ca50:	4770      	bx	lr
 801ca52:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801cab8 <scalbnf+0xc0>
 801ca56:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ca5a:	4770      	bx	lr
 801ca5c:	0dd2      	lsrs	r2, r2, #23
 801ca5e:	e7e5      	b.n	801ca2c <scalbnf+0x34>
 801ca60:	4410      	add	r0, r2
 801ca62:	28fe      	cmp	r0, #254	@ 0xfe
 801ca64:	dce6      	bgt.n	801ca34 <scalbnf+0x3c>
 801ca66:	2800      	cmp	r0, #0
 801ca68:	dd06      	ble.n	801ca78 <scalbnf+0x80>
 801ca6a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ca6e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ca72:	ee00 3a10 	vmov	s0, r3
 801ca76:	4770      	bx	lr
 801ca78:	f110 0f16 	cmn.w	r0, #22
 801ca7c:	da09      	bge.n	801ca92 <scalbnf+0x9a>
 801ca7e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801cab8 <scalbnf+0xc0>
 801ca82:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801cabc <scalbnf+0xc4>
 801ca86:	ee10 3a10 	vmov	r3, s0
 801ca8a:	eeb0 7a67 	vmov.f32	s14, s15
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	e7d9      	b.n	801ca46 <scalbnf+0x4e>
 801ca92:	3019      	adds	r0, #25
 801ca94:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ca98:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ca9c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801cac0 <scalbnf+0xc8>
 801caa0:	ee07 3a90 	vmov	s15, r3
 801caa4:	e7d7      	b.n	801ca56 <scalbnf+0x5e>
 801caa6:	bf00      	nop
 801caa8:	ffff3cb0 	.word	0xffff3cb0
 801caac:	4c000000 	.word	0x4c000000
 801cab0:	7149f2ca 	.word	0x7149f2ca
 801cab4:	f149f2ca 	.word	0xf149f2ca
 801cab8:	0da24260 	.word	0x0da24260
 801cabc:	8da24260 	.word	0x8da24260
 801cac0:	33000000 	.word	0x33000000

0801cac4 <with_errnof>:
 801cac4:	b510      	push	{r4, lr}
 801cac6:	ed2d 8b02 	vpush	{d8}
 801caca:	eeb0 8a40 	vmov.f32	s16, s0
 801cace:	4604      	mov	r4, r0
 801cad0:	f7fe fdd2 	bl	801b678 <__errno>
 801cad4:	eeb0 0a48 	vmov.f32	s0, s16
 801cad8:	ecbd 8b02 	vpop	{d8}
 801cadc:	6004      	str	r4, [r0, #0]
 801cade:	bd10      	pop	{r4, pc}

0801cae0 <xflowf>:
 801cae0:	b130      	cbz	r0, 801caf0 <xflowf+0x10>
 801cae2:	eef1 7a40 	vneg.f32	s15, s0
 801cae6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801caea:	2022      	movs	r0, #34	@ 0x22
 801caec:	f7ff bfea 	b.w	801cac4 <with_errnof>
 801caf0:	eef0 7a40 	vmov.f32	s15, s0
 801caf4:	e7f7      	b.n	801cae6 <xflowf+0x6>
	...

0801caf8 <__math_uflowf>:
 801caf8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801cb00 <__math_uflowf+0x8>
 801cafc:	f7ff bff0 	b.w	801cae0 <xflowf>
 801cb00:	10000000 	.word	0x10000000

0801cb04 <__math_oflowf>:
 801cb04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801cb0c <__math_oflowf+0x8>
 801cb08:	f7ff bfea 	b.w	801cae0 <xflowf>
 801cb0c:	70000000 	.word	0x70000000

0801cb10 <__ieee754_sqrtf>:
 801cb10:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801cb14:	4770      	bx	lr
	...

0801cb18 <_init>:
 801cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb1a:	bf00      	nop
 801cb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cb1e:	bc08      	pop	{r3}
 801cb20:	469e      	mov	lr, r3
 801cb22:	4770      	bx	lr

0801cb24 <_fini>:
 801cb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb26:	bf00      	nop
 801cb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cb2a:	bc08      	pop	{r3}
 801cb2c:	469e      	mov	lr, r3
 801cb2e:	4770      	bx	lr
