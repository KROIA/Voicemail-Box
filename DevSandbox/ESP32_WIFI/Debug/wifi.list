
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe48  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08010008  08010008  00011008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101e8  080101e8  00012088  2**0
                  CONTENTS
  4 .ARM          00000008  080101e8  080101e8  000111e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101f0  080101f0  00012088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101f0  080101f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080101f4  080101f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080101f8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012088  2**0
                  CONTENTS
 10 .bss          00000e00  20000088  20000088  00012088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e88  20000e88  00012088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e3b8  00000000  00000000  000120b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000634d  00000000  00000000  00040470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002708  00000000  00000000  000467c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e42  00000000  00000000  00048ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034644  00000000  00000000  0004ad0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034888  00000000  00000000  0007f34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119456  00000000  00000000  000b3bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001cd02c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000af80  00000000  00000000  001cd070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  001d7ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800fff0 	.word	0x0800fff0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	0800fff0 	.word	0x0800fff0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <sendToESP>:
#define ESP_TIMEOUT 2000         // Timeout in milliseconds
#define ESP_RESPONSE_SIZE 128    // Buffer size for response

/* Function to send AT command over SPI and receive response */
int sendToESP(const char *cmd)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b0c6      	sub	sp, #280	@ 0x118
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80005ae:	6018      	str	r0, [r3, #0]
    char response[ESP_RESPONSE_SIZE] = {0}; // Buffer for ESP32 response
 80005b0:	2300      	movs	r3, #0
 80005b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80005b6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80005ba:	227c      	movs	r2, #124	@ 0x7c
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f00e ffb6 	bl	800f530 <memset>
    uint8_t txBuffer[ESP_RESPONSE_SIZE] = {0};
 80005c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	3304      	adds	r3, #4
 80005d2:	227c      	movs	r2, #124	@ 0x7c
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f00e ffaa 	bl	800f530 <memset>
    int index = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t startTime = HAL_GetTick(); // Start timer
 80005e2:	f001 fda1 	bl	8002128 <HAL_GetTick>
 80005e6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Copy the AT command into the buffer and append "\r\n"
    snprintf((char *)txBuffer, ESP_RESPONSE_SIZE, "%s\r\n", cmd);
 80005ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80005f2:	f107 0010 	add.w	r0, r7, #16
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a36      	ldr	r2, [pc, #216]	@ (80006d4 <sendToESP+0x134>)
 80005fa:	2180      	movs	r1, #128	@ 0x80
 80005fc:	f00e fe8c 	bl	800f318 <sniprintf>

    // Pull CS (Chip Select) low to start SPI transaction
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Adjust GPIO pin based on your setup

    // Send the AT command via SPI
    HAL_SPI_Transmit(&hspi1, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff fdfb 	bl	8000200 <strlen>
 800060a:	4603      	mov	r3, r0
 800060c:	b29a      	uxth	r2, r3
 800060e:	f107 0110 	add.w	r1, r7, #16
 8000612:	f04f 33ff 	mov.w	r3, #4294967295
 8000616:	4830      	ldr	r0, [pc, #192]	@ (80006d8 <sendToESP+0x138>)
 8000618:	f008 fafe 	bl	8008c18 <HAL_SPI_Transmit>

    // Small delay to allow ESP32 to process
    HAL_Delay(50);
 800061c:	2032      	movs	r0, #50	@ 0x32
 800061e:	f001 fd8f 	bl	8002140 <HAL_Delay>

    // Receive response from ESP32
    while ((HAL_GetTick() - startTime) < ESP_TIMEOUT)
 8000622:	e040      	b.n	80006a6 <sendToESP+0x106>
    {
        uint8_t rxByte;
        HAL_SPI_Receive(&hspi1, &rxByte, 1, 10); // Read one byte at a time
 8000624:	f107 010f 	add.w	r1, r7, #15
 8000628:	230a      	movs	r3, #10
 800062a:	2201      	movs	r2, #1
 800062c:	482a      	ldr	r0, [pc, #168]	@ (80006d8 <sendToESP+0x138>)
 800062e:	f008 fc37 	bl	8008ea0 <HAL_SPI_Receive>

        if (rxByte != 0xFF) // Ignore empty responses
 8000632:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000636:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2bff      	cmp	r3, #255	@ 0xff
 800063e:	d012      	beq.n	8000666 <sendToESP+0xc6>
        {
            response[index++] = rxByte;
 8000640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800064a:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800064e:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8000652:	7812      	ldrb	r2, [r2, #0]
 8000654:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8000658:	443b      	add	r3, r7
 800065a:	f803 2c88 	strb.w	r2, [r3, #-136]
            if (index >= ESP_RESPONSE_SIZE - 1) break; // Prevent buffer overflow
 800065e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000662:	2b7e      	cmp	r3, #126	@ 0x7e
 8000664:	dc29      	bgt.n	80006ba <sendToESP+0x11a>
        }

        // Check if response contains "OK" or "ERROR"
        if (strstr(response, "OK"))
 8000666:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800066a:	491c      	ldr	r1, [pc, #112]	@ (80006dc <sendToESP+0x13c>)
 800066c:	4618      	mov	r0, r3
 800066e:	f00e ff67 	bl	800f540 <strstr>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d006      	beq.n	8000686 <sendToESP+0xe6>
        {
            // Pull CS high to end SPI transaction
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	2140      	movs	r1, #64	@ 0x40
 800067c:	4818      	ldr	r0, [pc, #96]	@ (80006e0 <sendToESP+0x140>)
 800067e:	f003 f839 	bl	80036f4 <HAL_GPIO_WritePin>
            return 1; // Success
 8000682:	2301      	movs	r3, #1
 8000684:	e021      	b.n	80006ca <sendToESP+0x12a>
        }
        else if (strstr(response, "ERROR"))
 8000686:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800068a:	4916      	ldr	r1, [pc, #88]	@ (80006e4 <sendToESP+0x144>)
 800068c:	4618      	mov	r0, r3
 800068e:	f00e ff57 	bl	800f540 <strstr>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d006      	beq.n	80006a6 <sendToESP+0x106>
        {
            // Pull CS high to end SPI transaction
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2140      	movs	r1, #64	@ 0x40
 800069c:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <sendToESP+0x140>)
 800069e:	f003 f829 	bl	80036f4 <HAL_GPIO_WritePin>
            return 0; // Failure
 80006a2:	2300      	movs	r3, #0
 80006a4:	e011      	b.n	80006ca <sendToESP+0x12a>
    while ((HAL_GetTick() - startTime) < ESP_TIMEOUT)
 80006a6:	f001 fd3f 	bl	8002128 <HAL_GetTick>
 80006aa:	4602      	mov	r2, r0
 80006ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006b6:	d3b5      	bcc.n	8000624 <sendToESP+0x84>
 80006b8:	e000      	b.n	80006bc <sendToESP+0x11c>
            if (index >= ESP_RESPONSE_SIZE - 1) break; // Prevent buffer overflow
 80006ba:	bf00      	nop
        }
    }

    // Pull CS high to end SPI transaction
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2140      	movs	r1, #64	@ 0x40
 80006c0:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <sendToESP+0x140>)
 80006c2:	f003 f817 	bl	80036f4 <HAL_GPIO_WritePin>
    return -1; // Timeout or no response
 80006c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08010028 	.word	0x08010028
 80006d8:	200003b0 	.word	0x200003b0
 80006dc:	08010030 	.word	0x08010030
 80006e0:	40020400 	.word	0x40020400
 80006e4:	08010034 	.word	0x08010034

080006e8 <setupESP32Hotspot>:
void setupESP32Hotspot(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    if (sendToESP("AT")) {
 80006ec:	481f      	ldr	r0, [pc, #124]	@ (800076c <setupESP32Hotspot+0x84>)
 80006ee:	f7ff ff57 	bl	80005a0 <sendToESP>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d009      	beq.n	800070c <setupESP32Hotspot+0x24>
        printf("ESP32 is responsive.\n");
 80006f8:	481d      	ldr	r0, [pc, #116]	@ (8000770 <setupESP32Hotspot+0x88>)
 80006fa:	f00e fe05 	bl	800f308 <puts>
    } else {
        printf("ESP32 is not responding!\n");
        return;
    }

    if (sendToESP("AT+CWMODE=2")) {
 80006fe:	481d      	ldr	r0, [pc, #116]	@ (8000774 <setupESP32Hotspot+0x8c>)
 8000700:	f7ff ff4e 	bl	80005a0 <sendToESP>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d008      	beq.n	800071c <setupESP32Hotspot+0x34>
 800070a:	e003      	b.n	8000714 <setupESP32Hotspot+0x2c>
        printf("ESP32 is not responding!\n");
 800070c:	481a      	ldr	r0, [pc, #104]	@ (8000778 <setupESP32Hotspot+0x90>)
 800070e:	f00e fdfb 	bl	800f308 <puts>
        return;
 8000712:	e029      	b.n	8000768 <setupESP32Hotspot+0x80>
        printf("WiFi mode set to AP.\n");
 8000714:	4819      	ldr	r0, [pc, #100]	@ (800077c <setupESP32Hotspot+0x94>)
 8000716:	f00e fdf7 	bl	800f308 <puts>
 800071a:	e002      	b.n	8000722 <setupESP32Hotspot+0x3a>
    } else {
        printf("Failed to set WiFi mode.\n");
 800071c:	4818      	ldr	r0, [pc, #96]	@ (8000780 <setupESP32Hotspot+0x98>)
 800071e:	f00e fdf3 	bl	800f308 <puts>
    }

    if (sendToESP("AT+CWSAP=\"MyHotspot\",\"MyPassword\",5,3")) {
 8000722:	4818      	ldr	r0, [pc, #96]	@ (8000784 <setupESP32Hotspot+0x9c>)
 8000724:	f7ff ff3c 	bl	80005a0 <sendToESP>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d003      	beq.n	8000736 <setupESP32Hotspot+0x4e>
        printf("Hotspot created successfully.\n");
 800072e:	4816      	ldr	r0, [pc, #88]	@ (8000788 <setupESP32Hotspot+0xa0>)
 8000730:	f00e fdea 	bl	800f308 <puts>
 8000734:	e002      	b.n	800073c <setupESP32Hotspot+0x54>
    } else {
        printf("Failed to create hotspot.\n");
 8000736:	4815      	ldr	r0, [pc, #84]	@ (800078c <setupESP32Hotspot+0xa4>)
 8000738:	f00e fde6 	bl	800f308 <puts>
    }

    if (sendToESP("AT+CWDHCP=2,1")) {
 800073c:	4814      	ldr	r0, [pc, #80]	@ (8000790 <setupESP32Hotspot+0xa8>)
 800073e:	f7ff ff2f 	bl	80005a0 <sendToESP>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <setupESP32Hotspot+0x68>
        printf("DHCP server enabled.\n");
 8000748:	4812      	ldr	r0, [pc, #72]	@ (8000794 <setupESP32Hotspot+0xac>)
 800074a:	f00e fddd 	bl	800f308 <puts>
 800074e:	e002      	b.n	8000756 <setupESP32Hotspot+0x6e>
    } else {
        printf("Failed to enable DHCP.\n");
 8000750:	4811      	ldr	r0, [pc, #68]	@ (8000798 <setupESP32Hotspot+0xb0>)
 8000752:	f00e fdd9 	bl	800f308 <puts>
    }

    if (sendToESP("AT+CWLIF")) {
 8000756:	4811      	ldr	r0, [pc, #68]	@ (800079c <setupESP32Hotspot+0xb4>)
 8000758:	f7ff ff22 	bl	80005a0 <sendToESP>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d002      	beq.n	8000768 <setupESP32Hotspot+0x80>
        printf("Checking connected clients...\n");
 8000762:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <setupESP32Hotspot+0xb8>)
 8000764:	f00e fdd0 	bl	800f308 <puts>
    }
}
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	0801003c 	.word	0x0801003c
 8000770:	08010040 	.word	0x08010040
 8000774:	08010074 	.word	0x08010074
 8000778:	08010058 	.word	0x08010058
 800077c:	08010080 	.word	0x08010080
 8000780:	08010098 	.word	0x08010098
 8000784:	080100b4 	.word	0x080100b4
 8000788:	080100dc 	.word	0x080100dc
 800078c:	080100fc 	.word	0x080100fc
 8000790:	08010118 	.word	0x08010118
 8000794:	08010128 	.word	0x08010128
 8000798:	08010140 	.word	0x08010140
 800079c:	08010158 	.word	0x08010158
 80007a0:	08010164 	.word	0x08010164

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a8:	f001 fc88 	bl	80020bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ac:	f000 f82e 	bl	800080c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007b0:	f000 f89e 	bl	80008f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 fcbe 	bl	8001134 <MX_GPIO_Init>
  MX_CRC_Init();
 80007b8:	f000 f8c6 	bl	8000948 <MX_CRC_Init>
  MX_DMA2D_Init();
 80007bc:	f000 f8d8 	bl	8000970 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80007c0:	f000 f908 	bl	80009d4 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80007c4:	f000 fc66 	bl	8001094 <MX_FMC_Init>
  MX_I2C1_Init();
 80007c8:	f000 fa04 	bl	8000bd4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007cc:	f000 fa30 	bl	8000c30 <MX_I2C2_Init>
  MX_LTDC_Init();
 80007d0:	f000 fa5c 	bl	8000c8c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80007d4:	f000 fad8 	bl	8000d88 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80007d8:	f000 fb02 	bl	8000de0 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 80007dc:	f000 fb5e 	bl	8000e9c <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 80007e0:	f000 fbb4 	bl	8000f4c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80007e4:	f000 fc02 	bl	8000fec <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80007e8:	f000 fc2a 	bl	8001040 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80007ec:	f00b fe32 	bl	800c454 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 80007f0:	f00e f8aa 	bl	800e948 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 80007f4:	f000 fb74 	bl	8000ee0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setupESP32Hotspot();
 80007f8:	f7ff ff76 	bl	80006e8 <setupESP32Hotspot>
      if (HAL_SPI_Receive(&hspi1, spi_rx_buffer, BUFFER_SIZE, HAL_MAX_DELAY) == HAL_OK)
      {

      }*/

      HAL_Delay(1000);
 80007fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000800:	f001 fc9e 	bl	8002140 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000804:	f00e f8c6 	bl	800e994 <MX_USB_HOST_Process>
      HAL_Delay(1000);
 8000808:	bf00      	nop
 800080a:	e7f7      	b.n	80007fc <main+0x58>

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2234      	movs	r2, #52	@ 0x34
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f00e fe88 	bl	800f530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <SystemClock_Config+0xdc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	4a2b      	ldr	r2, [pc, #172]	@ (80008e8 <SystemClock_Config+0xdc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <SystemClock_Config+0xdc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	2300      	movs	r3, #0
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	4b26      	ldr	r3, [pc, #152]	@ (80008ec <SystemClock_Config+0xe0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <SystemClock_Config+0xe0>)
 8000856:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <SystemClock_Config+0xe0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000870:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800087a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087c:	2304      	movs	r3, #4
 800087e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000880:	23b4      	movs	r3, #180	@ 0xb4
 8000882:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000888:	2306      	movs	r3, #6
 800088a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 800088c:	2306      	movs	r3, #6
 800088e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4618      	mov	r0, r3
 8000896:	f006 fac9 	bl	8006e2c <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a0:	f000 fde6 	bl	8001470 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a4:	f005 fd20 	bl	80062e8 <HAL_PWREx_EnableOverDrive>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ae:	f000 fddf 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	2105      	movs	r1, #5
 80008d0:	4618      	mov	r0, r3
 80008d2:	f005 fe1b 	bl	800650c <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008dc:	f000 fdc8 	bl	8001470 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b090      	sub	sp, #64	@ 0x40
 80008f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	223c      	movs	r2, #60	@ 0x3c
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00e fe17 	bl	800f530 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8000902:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8000906:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000908:	2390      	movs	r3, #144	@ 0x90
 800090a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000914:	2306      	movs	r3, #6
 8000916:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800091c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000922:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000926:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4618      	mov	r0, r3
 8000930:	f006 f83e 	bl	80069b0 <HAL_RCCEx_PeriphCLKConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800093a:	f000 fd99 	bl	8001470 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3740      	adds	r7, #64	@ 0x40
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800094c:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <MX_CRC_Init+0x20>)
 800094e:	4a07      	ldr	r2, [pc, #28]	@ (800096c <MX_CRC_Init+0x24>)
 8000950:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_CRC_Init+0x20>)
 8000954:	f001 fcfa 	bl	800234c <HAL_CRC_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800095e:	f000 fd87 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000a4 	.word	0x200000a4
 800096c:	40023000 	.word	0x40023000

08000970 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000974:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 8000976:	4a16      	ldr	r2, [pc, #88]	@ (80009d0 <MX_DMA2D_Init+0x60>)
 8000978:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 8000988:	2200      	movs	r2, #0
 800098a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 8000994:	2200      	movs	r2, #0
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 800099a:	2200      	movs	r2, #0
 800099c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009a4:	4809      	ldr	r0, [pc, #36]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 80009a6:	f001 fced 	bl	8002384 <HAL_DMA2D_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009b0:	f000 fd5e 	bl	8001470 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009b4:	2101      	movs	r1, #1
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_DMA2D_Init+0x5c>)
 80009b8:	f001 fe3e 	bl	8002638 <HAL_DMA2D_ConfigLayer>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009c2:	f000 fd55 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000ac 	.word	0x200000ac
 80009d0:	4002b000 	.word	0x4002b000

080009d4 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0aa      	sub	sp, #168	@ 0xa8
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 80009da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80009e6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80009ea:	2224      	movs	r2, #36	@ 0x24
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00e fd9e 	bl	800f530 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80009f4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
 8000a04:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0a:	2234      	movs	r2, #52	@ 0x34
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f00e fd8e 	bl	800f530 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a14:	463b      	mov	r3, r7
 8000a16:	222c      	movs	r2, #44	@ 0x2c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00e fd88 	bl	800f530 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a20:	4b6a      	ldr	r3, [pc, #424]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a22:	4a6b      	ldr	r2, [pc, #428]	@ (8000bd0 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000a24:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a26:	4b69      	ldr	r3, [pc, #420]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a2c:	4b67      	ldr	r3, [pc, #412]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a32:	4b66      	ldr	r3, [pc, #408]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000a38:	237d      	movs	r3, #125	@ 0x7d
 8000a3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	485e      	ldr	r0, [pc, #376]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a52:	f001 fe83 	bl	800275c <HAL_DSI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000a5c:	f000 fd08 	bl	8001470 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000a92:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a96:	4619      	mov	r1, r3
 8000a98:	484c      	ldr	r0, [pc, #304]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a9a:	f002 fb73 	bl	8003184 <HAL_DSI_ConfigHostTimeouts>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000aa4:	f000 fce4 	bl	8001470 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000aa8:	231c      	movs	r3, #28
 8000aaa:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000aac:	2321      	movs	r3, #33	@ 0x21
 8000aae:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000ab4:	2319      	movs	r3, #25
 8000ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000abc:	230a      	movs	r3, #10
 8000abe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000ac0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4841      	ldr	r0, [pc, #260]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ac8:	f002 faf2 	bl	80030b0 <HAL_DSI_ConfigPhyTimer>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000ad2:	f000 fccd 	bl	8001470 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	483c      	ldr	r0, [pc, #240]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ada:	f002 fac1 	bl	8003060 <HAL_DSI_ConfigFlowControl>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000ae4:	f000 fcc4 	bl	8001470 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000ae8:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000aec:	4837      	ldr	r0, [pc, #220]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000aee:	f002 fc0f 	bl	8003310 <HAL_DSI_SetLowPowerRXFilter>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000af8:	f000 fcba 	bl	8001470 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	4833      	ldr	r0, [pc, #204]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b00:	f001 ffac 	bl	8002a5c <HAL_DSI_ConfigErrorMonitor>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b0a:	f000 fcb1 	bl	8001470 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000b0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b18:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b1e:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000b20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b24:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000b26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000b32:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b36:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000b38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000b3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000b44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b48:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000b4a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b54:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5e:	4619      	mov	r1, r3
 8000b60:	481a      	ldr	r0, [pc, #104]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b62:	f002 fa1f 	bl	8002fa4 <HAL_DSI_ConfigCommand>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000b6c:	f000 fc80 	bl	8001470 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000b74:	2305      	movs	r3, #5
 8000b76:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000b78:	23c8      	movs	r3, #200	@ 0xc8
 8000b7a:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000b84:	2304      	movs	r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000b94:	2340      	movs	r3, #64	@ 0x40
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480a      	ldr	r0, [pc, #40]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ba2:	f002 f927 	bl	8002df4 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000bac:	f000 fc60 	bl	8001470 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bb4:	f002 f8f6 	bl	8002da4 <HAL_DSI_SetGenericVCID>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000bbe:	f000 fc57 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	37a8      	adds	r7, #168	@ 0xa8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	200000ec 	.word	0x200000ec
 8000bd0:	40016c00 	.word	0x40016c00

08000bd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bda:	4a13      	ldr	r2, [pc, #76]	@ (8000c28 <MX_I2C1_Init+0x54>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000be0:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <MX_I2C1_Init+0x58>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_I2C1_Init+0x50>)
 8000c12:	f004 febd 	bl	8005990 <HAL_I2C_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 fc28 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000108 	.word	0x20000108
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	000186a0 	.word	0x000186a0

08000c30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	@ (8000c84 <MX_I2C2_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	@ (8000c88 <MX_I2C2_Init+0x58>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_I2C2_Init+0x50>)
 8000c6e:	f004 fe8f 	bl	8005990 <HAL_I2C_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c78:	f000 fbfa 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000015c 	.word	0x2000015c
 8000c84:	40005800 	.word	0x40005800
 8000c88:	000186a0 	.word	0x000186a0

08000c8c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	@ 0x38
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2234      	movs	r2, #52	@ 0x34
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f00e fc49 	bl	800f530 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c9e:	4b38      	ldr	r3, [pc, #224]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000ca0:	4a38      	ldr	r2, [pc, #224]	@ (8000d84 <MX_LTDC_Init+0xf8>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ca4:	4b36      	ldr	r3, [pc, #216]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000caa:	4b35      	ldr	r3, [pc, #212]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cb0:	4b33      	ldr	r3, [pc, #204]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cb6:	4b32      	ldr	r3, [pc, #200]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000cbc:	4b30      	ldr	r3, [pc, #192]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cd6:	22c9      	movs	r2, #201	@ 0xc9
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cdc:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000ce0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000ce2:	4b27      	ldr	r3, [pc, #156]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000ce4:	22ca      	movs	r2, #202	@ 0xca
 8000ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000ce8:	4b25      	ldr	r3, [pc, #148]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cea:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000cf0:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d00:	4b1f      	ldr	r3, [pc, #124]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d08:	481d      	ldr	r0, [pc, #116]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000d0a:	f004 ff85 	bl	8005c18 <HAL_LTDC_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000d14:	f000 fbac 	bl	8001470 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000d1c:	23c8      	movs	r3, #200	@ 0xc8
 8000d1e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000d24:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d28:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d2e:	23ff      	movs	r3, #255	@ 0xff
 8000d30:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d3a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d40:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000d46:	23c8      	movs	r3, #200	@ 0xc8
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000d4a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d4e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <MX_LTDC_Init+0xf4>)
 8000d6a:	f005 f8e7 	bl	8005f3c <HAL_LTDC_ConfigLayer>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000d74:	f000 fb7c 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	3738      	adds	r7, #56	@ 0x38
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	200001b0 	.word	0x200001b0
 8000d84:	40016800 	.word	0x40016800

08000d88 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000d8e:	4a13      	ldr	r2, [pc, #76]	@ (8000ddc <MX_QUADSPI_Init+0x54>)
 8000d90:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000d92:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000da0:	2210      	movs	r2, #16
 8000da2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000da6:	2218      	movs	r2, #24
 8000da8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000dac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <MX_QUADSPI_Init+0x50>)
 8000dc6:	f005 fadf 	bl	8006388 <HAL_QSPI_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000dd0:	f000 fb4e 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000258 	.word	0x20000258
 8000ddc:	a0001000 	.word	0xa0001000

08000de0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000de4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000de6:	4a2b      	ldr	r2, [pc, #172]	@ (8000e94 <MX_SAI1_Init+0xb4>)
 8000de8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dea:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000df0:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000df6:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000df8:	2240      	movs	r2, #64	@ 0x40
 8000dfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e08:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e0e:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e28:	4a1b      	ldr	r2, [pc, #108]	@ (8000e98 <MX_SAI1_Init+0xb8>)
 8000e2a:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e46:	2208      	movs	r2, #8
 8000e48:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e68:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000e74:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <MX_SAI1_Init+0xb0>)
 8000e7c:	f006 fa5a 	bl	8007334 <HAL_SAI_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000e86:	f000 faf3 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200002a4 	.word	0x200002a4
 8000e94:	40015804 	.word	0x40015804
 8000e98:	0002ee00 	.word	0x0002ee00

08000e9c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed8 <MX_SDIO_SD_Init+0x3c>)
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8000edc <MX_SDIO_SD_Init+0x40>)
 8000ea4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed8 <MX_SDIO_SD_Init+0x3c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <MX_SDIO_SD_Init+0x3c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	@ (8000ed8 <MX_SDIO_SD_Init+0x3c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	@ (8000ed8 <MX_SDIO_SD_Init+0x3c>)
 8000eba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ebe:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <MX_SDIO_SD_Init+0x3c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ec6:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <MX_SDIO_SD_Init+0x3c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000032c 	.word	0x2000032c
 8000edc:	40012c00 	.word	0x40012c00

08000ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000ee6:	4a18      	ldr	r2, [pc, #96]	@ (8000f48 <MX_SPI1_Init+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000eec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	@ (8000f44 <MX_SPI1_Init+0x64>)
 8000f32:	f007 fde8 	bl	8008b06 <HAL_SPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f3c:	f000 fa98 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200003b0 	.word	0x200003b0
 8000f48:	40013000 	.word	0x40013000

08000f4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe8 <MX_TIM1_Init+0x9c>)
 8000f6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000f7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f94:	4813      	ldr	r0, [pc, #76]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000f96:	f008 fb87 	bl	80096a8 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fa0:	f000 fa66 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000fb2:	f008 fd29 	bl	8009a08 <HAL_TIM_ConfigClockSource>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fbc:	f000 fa58 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_TIM1_Init+0x98>)
 8000fce:	f008 ff51 	bl	8009e74 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000fd8:	f000 fa4a 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000408 	.word	0x20000408
 8000fe8:	40010000 	.word	0x40010000

08000fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <MX_USART3_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_USART3_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_USART3_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <MX_USART3_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_USART3_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_USART3_UART_Init+0x4c>)
 8001024:	f008 ffb6 	bl	8009f94 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f000 fa1f 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000450 	.word	0x20000450
 800103c:	40004800 	.word	0x40004800

08001040 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_USART6_UART_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_USART6_UART_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_USART6_UART_Init+0x4c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_USART6_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_USART6_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_USART6_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_USART6_UART_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_USART6_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_USART6_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_USART6_UART_Init+0x4c>)
 8001078:	f008 ff8c 	bl	8009f94 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001082:	f000 f9f5 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000498 	.word	0x20000498
 8001090:	40011400 	.word	0x40011400

08001094 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_FMC_Init+0x98>)
 80010ae:	4a20      	ldr	r2, [pc, #128]	@ (8001130 <MX_FMC_Init+0x9c>)
 80010b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <MX_FMC_Init+0x98>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_FMC_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010be:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <MX_FMC_Init+0x98>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_FMC_Init+0x98>)
 80010c6:	2220      	movs	r2, #32
 80010c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <MX_FMC_Init+0x98>)
 80010cc:	2240      	movs	r2, #64	@ 0x40
 80010ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <MX_FMC_Init+0x98>)
 80010d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010d8:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_FMC_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010de:	4b13      	ldr	r3, [pc, #76]	@ (800112c <MX_FMC_Init+0x98>)
 80010e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_FMC_Init+0x98>)
 80010e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_FMC_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010f8:	2307      	movs	r3, #7
 80010fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001100:	2307      	movs	r3, #7
 8001102:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001104:	2303      	movs	r3, #3
 8001106:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800110c:	2302      	movs	r3, #2
 800110e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4619      	mov	r1, r3
 8001114:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_FMC_Init+0x98>)
 8001116:	f007 fcc2 	bl	8008a9e <HAL_SDRAM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001120:	f000 f9a6 	bl	8001470 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200004e0 	.word	0x200004e0
 8001130:	a0000140 	.word	0xa0000140

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b090      	sub	sp, #64	@ 0x40
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800114e:	4bae      	ldr	r3, [pc, #696]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4aad      	ldr	r2, [pc, #692]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4bab      	ldr	r3, [pc, #684]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
 800116a:	4ba7      	ldr	r3, [pc, #668]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4aa6      	ldr	r2, [pc, #664]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4ba4      	ldr	r3, [pc, #656]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
 8001186:	4ba0      	ldr	r3, [pc, #640]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a9f      	ldr	r2, [pc, #636]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b9d      	ldr	r3, [pc, #628]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	4b99      	ldr	r3, [pc, #612]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a98      	ldr	r2, [pc, #608]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b96      	ldr	r3, [pc, #600]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	4b92      	ldr	r3, [pc, #584]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a91      	ldr	r2, [pc, #580]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b8f      	ldr	r3, [pc, #572]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	4b8b      	ldr	r3, [pc, #556]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a8a      	ldr	r2, [pc, #552]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b88      	ldr	r3, [pc, #544]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b84      	ldr	r3, [pc, #528]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a83      	ldr	r2, [pc, #524]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 80011fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b81      	ldr	r3, [pc, #516]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b7d      	ldr	r3, [pc, #500]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a7c      	ldr	r2, [pc, #496]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b7a      	ldr	r3, [pc, #488]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b76      	ldr	r3, [pc, #472]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a75      	ldr	r2, [pc, #468]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001234:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b73      	ldr	r3, [pc, #460]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b6f      	ldr	r3, [pc, #444]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a6e      	ldr	r2, [pc, #440]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b6c      	ldr	r3, [pc, #432]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b68      	ldr	r3, [pc, #416]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a67      	ldr	r2, [pc, #412]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 800126c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b65      	ldr	r3, [pc, #404]	@ (8001408 <MX_GPIO_Init+0x2d4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	210c      	movs	r1, #12
 8001282:	4862      	ldr	r0, [pc, #392]	@ (800140c <MX_GPIO_Init+0x2d8>)
 8001284:	f002 fa36 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2130      	movs	r1, #48	@ 0x30
 800128c:	4860      	ldr	r0, [pc, #384]	@ (8001410 <MX_GPIO_Init+0x2dc>)
 800128e:	f002 fa31 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	2108      	movs	r1, #8
 8001296:	485f      	ldr	r0, [pc, #380]	@ (8001414 <MX_GPIO_Init+0x2e0>)
 8001298:	f002 fa2c 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2140      	movs	r1, #64	@ 0x40
 80012a0:	485d      	ldr	r0, [pc, #372]	@ (8001418 <MX_GPIO_Init+0x2e4>)
 80012a2:	f002 fa27 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2105      	movs	r1, #5
 80012aa:	485c      	ldr	r0, [pc, #368]	@ (800141c <MX_GPIO_Init+0x2e8>)
 80012ac:	f002 fa22 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	485a      	ldr	r0, [pc, #360]	@ (8001420 <MX_GPIO_Init+0x2ec>)
 80012b6:	f002 fa1d 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2108      	movs	r1, #8
 80012be:	4859      	ldr	r0, [pc, #356]	@ (8001424 <MX_GPIO_Init+0x2f0>)
 80012c0:	f002 fa18 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 80012c4:	230c      	movs	r3, #12
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d8:	4619      	mov	r1, r3
 80012da:	484c      	ldr	r0, [pc, #304]	@ (800140c <MX_GPIO_Init+0x2d8>)
 80012dc:	f002 f846 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 80012e0:	2308      	movs	r3, #8
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012f0:	2306      	movs	r3, #6
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f8:	4619      	mov	r1, r3
 80012fa:	4848      	ldr	r0, [pc, #288]	@ (800141c <MX_GPIO_Init+0x2e8>)
 80012fc:	f002 f836 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001304:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001308:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001312:	4619      	mov	r1, r3
 8001314:	4841      	ldr	r0, [pc, #260]	@ (800141c <MX_GPIO_Init+0x2e8>)
 8001316:	f002 f829 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800131a:	2330      	movs	r3, #48	@ 0x30
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800131e:	2311      	movs	r3, #17
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132e:	4619      	mov	r1, r3
 8001330:	4837      	ldr	r0, [pc, #220]	@ (8001410 <MX_GPIO_Init+0x2dc>)
 8001332:	f002 f81b 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001336:	2308      	movs	r3, #8
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800133a:	2311      	movs	r3, #17
 800133c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800134a:	4619      	mov	r1, r3
 800134c:	4831      	ldr	r0, [pc, #196]	@ (8001414 <MX_GPIO_Init+0x2e0>)
 800134e:	f002 f80d 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001352:	2340      	movs	r3, #64	@ 0x40
 8001354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001356:	2311      	movs	r3, #17
 8001358:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2300      	movs	r3, #0
 8001360:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001366:	4619      	mov	r1, r3
 8001368:	482b      	ldr	r0, [pc, #172]	@ (8001418 <MX_GPIO_Init+0x2e4>)
 800136a:	f001 ffff 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800136e:	2305      	movs	r3, #5
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001382:	4619      	mov	r1, r3
 8001384:	4825      	ldr	r0, [pc, #148]	@ (800141c <MX_GPIO_Init+0x2e8>)
 8001386:	f001 fff1 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800139c:	2302      	movs	r3, #2
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a4:	4619      	mov	r1, r3
 80013a6:	481a      	ldr	r0, [pc, #104]	@ (8001410 <MX_GPIO_Init+0x2dc>)
 80013a8:	f001 ffe0 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80013ac:	2304      	movs	r3, #4
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013bc:	4619      	mov	r1, r3
 80013be:	4816      	ldr	r0, [pc, #88]	@ (8001418 <MX_GPIO_Init+0x2e4>)
 80013c0:	f001 ffd4 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80013c4:	2320      	movs	r3, #32
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d6:	4619      	mov	r1, r3
 80013d8:	4813      	ldr	r0, [pc, #76]	@ (8001428 <MX_GPIO_Init+0x2f4>)
 80013da:	f001 ffc7 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013f2:	4619      	mov	r1, r3
 80013f4:	480a      	ldr	r0, [pc, #40]	@ (8001420 <MX_GPIO_Init+0x2ec>)
 80013f6:	f001 ffb9 	bl	800336c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80013fa:	2308      	movs	r3, #8
 80013fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	e012      	b.n	800142c <MX_GPIO_Init+0x2f8>
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40021000 	.word	0x40021000
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40022800 	.word	0x40022800
 8001418:	40021800 	.word	0x40021800
 800141c:	40020400 	.word	0x40020400
 8001420:	40021c00 	.word	0x40021c00
 8001424:	40020000 	.word	0x40020000
 8001428:	40022400 	.word	0x40022400
 800142c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001436:	4619      	mov	r1, r3
 8001438:	4803      	ldr	r0, [pc, #12]	@ (8001448 <MX_GPIO_Init+0x314>)
 800143a:	f001 ff97 	bl	800336c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143e:	bf00      	nop
 8001440:	3740      	adds	r7, #64	@ 0x40
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40020000 	.word	0x40020000

0800144c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a04      	ldr	r2, [pc, #16]	@ (800146c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800145e:	f000 fe4f 	bl	8002100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40001000 	.word	0x40001000

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <Error_Handler+0x8>

0800147c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	4a0f      	ldr	r2, [pc, #60]	@ (80014c8 <HAL_MspInit+0x4c>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001490:	6453      	str	r3, [r2, #68]	@ 0x44
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a6:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <HAL_MspInit+0x4c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_CRC_MspInit+0x3c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10d      	bne.n	80014fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_CRC_MspInit+0x40>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <HAL_CRC_MspInit+0x40>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <HAL_CRC_MspInit+0x40>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023000 	.word	0x40023000
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a0e      	ldr	r2, [pc, #56]	@ (8001558 <HAL_DMA2D_MspInit+0x48>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d115      	bne.n	800154e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <HAL_DMA2D_MspInit+0x4c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a0c      	ldr	r2, [pc, #48]	@ (800155c <HAL_DMA2D_MspInit+0x4c>)
 800152c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_DMA2D_MspInit+0x4c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	205a      	movs	r0, #90	@ 0x5a
 8001544:	f000 fed8 	bl	80022f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001548:	205a      	movs	r0, #90	@ 0x5a
 800154a:	f000 fef1 	bl	8002330 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	4002b000 	.word	0x4002b000
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <HAL_DSI_MspInit+0x94>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d133      	bne.n	80015ea <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <HAL_DSI_MspInit+0x98>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158a:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <HAL_DSI_MspInit+0x98>)
 800158c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001590:	6453      	str	r3, [r2, #68]	@ 0x44
 8001592:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_DSI_MspInit+0x98>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_DSI_MspInit+0x98>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a6:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <HAL_DSI_MspInit+0x98>)
 80015a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ae:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <HAL_DSI_MspInit+0x98>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80015ba:	2304      	movs	r3, #4
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80015ca:	230d      	movs	r3, #13
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4809      	ldr	r0, [pc, #36]	@ (80015fc <HAL_DSI_MspInit+0x9c>)
 80015d6:	f001 fec9 	bl	800336c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	205c      	movs	r0, #92	@ 0x5c
 80015e0:	f000 fe8a 	bl	80022f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80015e4:	205c      	movs	r0, #92	@ 0x5c
 80015e6:	f000 fea3 	bl	8002330 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	@ 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40016c00 	.word	0x40016c00
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40022400 	.word	0x40022400

08001600 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a32      	ldr	r2, [pc, #200]	@ (80016e8 <HAL_I2C_MspInit+0xe8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12d      	bne.n	800167e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a30      	ldr	r2, [pc, #192]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800163e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001644:	2312      	movs	r3, #18
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001650:	2304      	movs	r3, #4
 8001652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4825      	ldr	r0, [pc, #148]	@ (80016f0 <HAL_I2C_MspInit+0xf0>)
 800165c:	f001 fe86 	bl	800336c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a20      	ldr	r2, [pc, #128]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 800166a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001670:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800167c:	e030      	b.n	80016e0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1c      	ldr	r2, [pc, #112]	@ (80016f4 <HAL_I2C_MspInit+0xf4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d12b      	bne.n	80016e0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001690:	4a16      	ldr	r2, [pc, #88]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 8001692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001696:	6313      	str	r3, [r2, #48]	@ 0x30
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80016a4:	2330      	movs	r3, #48	@ 0x30
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a8:	2312      	movs	r3, #18
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b0:	2303      	movs	r3, #3
 80016b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016b4:	2304      	movs	r3, #4
 80016b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	480e      	ldr	r0, [pc, #56]	@ (80016f8 <HAL_I2C_MspInit+0xf8>)
 80016c0:	f001 fe54 	bl	800336c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	4a07      	ldr	r2, [pc, #28]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 80016ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_I2C_MspInit+0xec>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3730      	adds	r7, #48	@ 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40005400 	.word	0x40005400
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40005800 	.word	0x40005800
 80016f8:	40021c00 	.word	0x40021c00

080016fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <HAL_LTDC_MspInit+0x48>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d115      	bne.n	800173a <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_LTDC_MspInit+0x4c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	4a0c      	ldr	r2, [pc, #48]	@ (8001748 <HAL_LTDC_MspInit+0x4c>)
 8001718:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800171c:	6453      	str	r3, [r2, #68]	@ 0x44
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_LTDC_MspInit+0x4c>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2058      	movs	r0, #88	@ 0x58
 8001730:	f000 fde2 	bl	80022f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001734:	2058      	movs	r0, #88	@ 0x58
 8001736:	f000 fdfb 	bl	8002330 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40016800 	.word	0x40016800
 8001748:	40023800 	.word	0x40023800

0800174c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a31      	ldr	r2, [pc, #196]	@ (8001830 <HAL_QSPI_MspInit+0xe4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d15b      	bne.n	8001826 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b30      	ldr	r3, [pc, #192]	@ (8001834 <HAL_QSPI_MspInit+0xe8>)
 8001774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001776:	4a2f      	ldr	r2, [pc, #188]	@ (8001834 <HAL_QSPI_MspInit+0xe8>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6393      	str	r3, [r2, #56]	@ 0x38
 800177e:	4b2d      	ldr	r3, [pc, #180]	@ (8001834 <HAL_QSPI_MspInit+0xe8>)
 8001780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <HAL_QSPI_MspInit+0xe8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a28      	ldr	r2, [pc, #160]	@ (8001834 <HAL_QSPI_MspInit+0xe8>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <HAL_QSPI_MspInit+0xe8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <HAL_QSPI_MspInit+0xe8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <HAL_QSPI_MspInit+0xe8>)
 80017b0:	f043 0320 	orr.w	r3, r3, #32
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <HAL_QSPI_MspInit+0xe8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017c2:	2340      	movs	r3, #64	@ 0x40
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ce:	2303      	movs	r3, #3
 80017d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80017d2:	230a      	movs	r3, #10
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4816      	ldr	r0, [pc, #88]	@ (8001838 <HAL_QSPI_MspInit+0xec>)
 80017de:	f001 fdc5 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80017e2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80017f4:	2309      	movs	r3, #9
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	480f      	ldr	r0, [pc, #60]	@ (800183c <HAL_QSPI_MspInit+0xf0>)
 8001800:	f001 fdb4 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001804:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001816:	230a      	movs	r3, #10
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4806      	ldr	r0, [pc, #24]	@ (800183c <HAL_QSPI_MspInit+0xf0>)
 8001822:	f001 fda3 	bl	800336c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001826:	bf00      	nop
 8001828:	3728      	adds	r7, #40	@ 0x28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	a0001000 	.word	0xa0001000
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400
 800183c:	40021400 	.word	0x40021400

08001840 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	@ 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a28      	ldr	r2, [pc, #160]	@ (8001900 <HAL_SD_MspInit+0xc0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d14a      	bne.n	80018f8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <HAL_SD_MspInit+0xc4>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	4a26      	ldr	r2, [pc, #152]	@ (8001904 <HAL_SD_MspInit+0xc4>)
 800186c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001870:	6453      	str	r3, [r2, #68]	@ 0x44
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <HAL_SD_MspInit+0xc4>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <HAL_SD_MspInit+0xc4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <HAL_SD_MspInit+0xc4>)
 8001888:	f043 0304 	orr.w	r3, r3, #4
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_SD_MspInit+0xc4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_SD_MspInit+0xc4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <HAL_SD_MspInit+0xc4>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <HAL_SD_MspInit+0xc4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80018b6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80018ba:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c4:	2303      	movs	r3, #3
 80018c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018c8:	230c      	movs	r3, #12
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	480d      	ldr	r0, [pc, #52]	@ (8001908 <HAL_SD_MspInit+0xc8>)
 80018d4:	f001 fd4a 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80018d8:	2304      	movs	r3, #4
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018e8:	230c      	movs	r3, #12
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	@ (800190c <HAL_SD_MspInit+0xcc>)
 80018f4:	f001 fd3a 	bl	800336c <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	@ 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40012c00 	.word	0x40012c00
 8001904:	40023800 	.word	0x40023800
 8001908:	40020800 	.word	0x40020800
 800190c:	40020c00 	.word	0x40020c00

08001910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a28      	ldr	r2, [pc, #160]	@ (80019d0 <HAL_SPI_MspInit+0xc0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d149      	bne.n	80019c6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_SPI_MspInit+0xc4>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	4a26      	ldr	r2, [pc, #152]	@ (80019d4 <HAL_SPI_MspInit+0xc4>)
 800193c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001940:	6453      	str	r3, [r2, #68]	@ 0x44
 8001942:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <HAL_SPI_MspInit+0xc4>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <HAL_SPI_MspInit+0xc4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a1f      	ldr	r2, [pc, #124]	@ (80019d4 <HAL_SPI_MspInit+0xc4>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <HAL_SPI_MspInit+0xc4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <HAL_SPI_MspInit+0xc4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a18      	ldr	r2, [pc, #96]	@ (80019d4 <HAL_SPI_MspInit+0xc4>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_SPI_MspInit+0xc4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001986:	2330      	movs	r3, #48	@ 0x30
 8001988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001996:	2305      	movs	r3, #5
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <HAL_SPI_MspInit+0xc8>)
 80019a2:	f001 fce3 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019a6:	2320      	movs	r3, #32
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b6:	2305      	movs	r3, #5
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	4806      	ldr	r0, [pc, #24]	@ (80019dc <HAL_SPI_MspInit+0xcc>)
 80019c2:	f001 fcd3 	bl	800336c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40013000 	.word	0x40013000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020000 	.word	0x40020000

080019e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0b      	ldr	r2, [pc, #44]	@ (8001a1c <HAL_TIM_Base_MspInit+0x3c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10d      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a20 <HAL_TIM_Base_MspInit+0x40>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	4a09      	ldr	r2, [pc, #36]	@ (8001a20 <HAL_TIM_Base_MspInit+0x40>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a02:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <HAL_TIM_Base_MspInit+0x40>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	@ 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a32      	ldr	r2, [pc, #200]	@ (8001b0c <HAL_UART_MspInit+0xe8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12d      	bne.n	8001aa2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	4b31      	ldr	r3, [pc, #196]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a30      	ldr	r2, [pc, #192]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b2e      	ldr	r3, [pc, #184]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	4b2a      	ldr	r3, [pc, #168]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a29      	ldr	r2, [pc, #164]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a7e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a90:	2307      	movs	r3, #7
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	481e      	ldr	r0, [pc, #120]	@ (8001b14 <HAL_UART_MspInit+0xf0>)
 8001a9c:	f001 fc66 	bl	800336c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001aa0:	e030      	b.n	8001b04 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b18 <HAL_UART_MspInit+0xf4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d12b      	bne.n	8001b04 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	4b17      	ldr	r3, [pc, #92]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	4a16      	ldr	r2, [pc, #88]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001ab6:	f043 0320 	orr.w	r3, r3, #32
 8001aba:	6453      	str	r3, [r2, #68]	@ 0x44
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <HAL_UART_MspInit+0xec>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_RX_Pin|ARDUINO_USART6_TX_Pin;
 8001ae4:	23c0      	movs	r3, #192	@ 0xc0
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001af4:	2308      	movs	r3, #8
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <HAL_UART_MspInit+0xf8>)
 8001b00:	f001 fc34 	bl	800336c <HAL_GPIO_Init>
}
 8001b04:	bf00      	nop
 8001b06:	3730      	adds	r7, #48	@ 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40004800 	.word	0x40004800
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400
 8001b18:	40011400 	.word	0x40011400
 8001b1c:	40020800 	.word	0x40020800

08001b20 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b34:	4b44      	ldr	r3, [pc, #272]	@ (8001c48 <HAL_FMC_MspInit+0x128>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 8081 	bne.w	8001c40 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001b3e:	4b42      	ldr	r3, [pc, #264]	@ (8001c48 <HAL_FMC_MspInit+0x128>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <HAL_FMC_MspInit+0x12c>)
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8001c4c <HAL_FMC_MspInit+0x12c>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b54:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <HAL_FMC_MspInit+0x12c>)
 8001b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001b60:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001b64:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b72:	230c      	movs	r3, #12
 8001b74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4835      	ldr	r0, [pc, #212]	@ (8001c50 <HAL_FMC_MspInit+0x130>)
 8001b7c:	f001 fbf6 	bl	800336c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001b80:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001b84:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b92:	230c      	movs	r3, #12
 8001b94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	4619      	mov	r1, r3
 8001b9a:	482e      	ldr	r0, [pc, #184]	@ (8001c54 <HAL_FMC_MspInit+0x134>)
 8001b9c:	f001 fbe6 	bl	800336c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001ba0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001ba4:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4827      	ldr	r0, [pc, #156]	@ (8001c58 <HAL_FMC_MspInit+0x138>)
 8001bbc:	f001 fbd6 	bl	800336c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001bc0:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001bc4:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4820      	ldr	r0, [pc, #128]	@ (8001c5c <HAL_FMC_MspInit+0x13c>)
 8001bdc:	f001 fbc6 	bl	800336c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001be0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001be4:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4819      	ldr	r0, [pc, #100]	@ (8001c60 <HAL_FMC_MspInit+0x140>)
 8001bfc:	f001 fbb6 	bl	800336c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001c00:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8001c04:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c12:	230c      	movs	r3, #12
 8001c14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4812      	ldr	r0, [pc, #72]	@ (8001c64 <HAL_FMC_MspInit+0x144>)
 8001c1c:	f001 fba6 	bl	800336c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001c20:	2301      	movs	r3, #1
 8001c22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c30:	230c      	movs	r3, #12
 8001c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	4619      	mov	r1, r3
 8001c38:	480b      	ldr	r0, [pc, #44]	@ (8001c68 <HAL_FMC_MspInit+0x148>)
 8001c3a:	f001 fb97 	bl	800336c <HAL_GPIO_Init>
 8001c3e:	e000      	b.n	8001c42 <HAL_FMC_MspInit+0x122>
    return;
 8001c40:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000514 	.word	0x20000514
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40020c00 	.word	0x40020c00
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021400 	.word	0x40021400
 8001c64:	40021c00 	.word	0x40021c00
 8001c68:	40020800 	.word	0x40020800

08001c6c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c74:	f7ff ff54 	bl	8001b20 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a26      	ldr	r2, [pc, #152]	@ (8001d28 <HAL_SAI_MspInit+0xa8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d146      	bne.n	8001d20 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001c92:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <HAL_SAI_MspInit+0xac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10d      	bne.n	8001cb6 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <HAL_SAI_MspInit+0xb0>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	4a23      	ldr	r2, [pc, #140]	@ (8001d30 <HAL_SAI_MspInit+0xb0>)
 8001ca4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001caa:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <HAL_SAI_MspInit+0xb0>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_SAI_MspInit+0xac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <HAL_SAI_MspInit+0xac>)
 8001cbe:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001cc0:	2330      	movs	r3, #48	@ 0x30
 8001cc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4816      	ldr	r0, [pc, #88]	@ (8001d34 <HAL_SAI_MspInit+0xb4>)
 8001cdc:	f001 fb46 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001ce0:	2340      	movs	r3, #64	@ 0x40
 8001ce2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001cf0:	2306      	movs	r3, #6
 8001cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	480f      	ldr	r0, [pc, #60]	@ (8001d38 <HAL_SAI_MspInit+0xb8>)
 8001cfc:	f001 fb36 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d10:	2306      	movs	r3, #6
 8001d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <HAL_SAI_MspInit+0xbc>)
 8001d1c:	f001 fb26 	bl	800336c <HAL_GPIO_Init>

    }
}
 8001d20:	bf00      	nop
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40015804 	.word	0x40015804
 8001d2c:	20000518 	.word	0x20000518
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40020c00 	.word	0x40020c00
 8001d3c:	40021800 	.word	0x40021800

08001d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08e      	sub	sp, #56	@ 0x38
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4b33      	ldr	r3, [pc, #204]	@ (8001e24 <HAL_InitTick+0xe4>)
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	4a32      	ldr	r2, [pc, #200]	@ (8001e24 <HAL_InitTick+0xe4>)
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d60:	4b30      	ldr	r3, [pc, #192]	@ (8001e24 <HAL_InitTick+0xe4>)
 8001d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d6c:	f107 0210 	add.w	r2, r7, #16
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4611      	mov	r1, r2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f004 fde8 	bl	800694c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d103      	bne.n	8001d8e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d86:	f004 fdb9 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 8001d8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d8c:	e004      	b.n	8001d98 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d8e:	f004 fdb5 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 8001d92:	4603      	mov	r3, r0
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d9a:	4a23      	ldr	r2, [pc, #140]	@ (8001e28 <HAL_InitTick+0xe8>)
 8001d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	3b01      	subs	r3, #1
 8001da4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <HAL_InitTick+0xec>)
 8001da8:	4a21      	ldr	r2, [pc, #132]	@ (8001e30 <HAL_InitTick+0xf0>)
 8001daa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001db2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001db4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e2c <HAL_InitTick+0xec>)
 8001db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dba:	4b1c      	ldr	r3, [pc, #112]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001dcc:	4817      	ldr	r0, [pc, #92]	@ (8001e2c <HAL_InitTick+0xec>)
 8001dce:	f007 fc6b 	bl	80096a8 <HAL_TIM_Base_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d11b      	bne.n	8001e18 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001de0:	4812      	ldr	r0, [pc, #72]	@ (8001e2c <HAL_InitTick+0xec>)
 8001de2:	f007 fcb1 	bl	8009748 <HAL_TIM_Base_Start_IT>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001dec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d111      	bne.n	8001e18 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001df4:	2036      	movs	r0, #54	@ 0x36
 8001df6:	f000 fa9b 	bl	8002330 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d808      	bhi.n	8001e12 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	2036      	movs	r0, #54	@ 0x36
 8001e06:	f000 fa77 	bl	80022f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <HAL_InitTick+0xf4>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e002      	b.n	8001e18 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3738      	adds	r7, #56	@ 0x38
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	431bde83 	.word	0x431bde83
 8001e2c:	2000051c 	.word	0x2000051c
 8001e30:	40001000 	.word	0x40001000
 8001e34:	20000004 	.word	0x20000004

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <NMI_Handler+0x4>

08001e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <HardFault_Handler+0x4>

08001e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <MemManage_Handler+0x4>

08001e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e54:	bf00      	nop
 8001e56:	e7fd      	b.n	8001e54 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <TIM6_DAC_IRQHandler+0x10>)
 8001e9e:	f007 fcc3 	bl	8009828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000051c 	.word	0x2000051c

08001eac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <OTG_FS_IRQHandler+0x10>)
 8001eb2:	f001 ff19 	bl	8003ce8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000095c 	.word	0x2000095c

08001ec0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <LTDC_IRQHandler+0x10>)
 8001ec6:	f003 ff77 	bl	8005db8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	200001b0 	.word	0x200001b0

08001ed4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <DMA2D_IRQHandler+0x10>)
 8001eda:	f000 fa9c 	bl	8002416 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200000ac 	.word	0x200000ac

08001ee8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <DSI_IRQHandler+0x10>)
 8001eee:	f000 fe72 	bl	8002bd6 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200000ec 	.word	0x200000ec

08001efc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e00a      	b.n	8001f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0e:	f3af 8000 	nop.w
 8001f12:	4601      	mov	r1, r0
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	60ba      	str	r2, [r7, #8]
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf0      	blt.n	8001f0e <_read+0x12>
  }

  return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e009      	b.n	8001f5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf1      	blt.n	8001f48 <_write+0x12>
  }
  return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_close>:

int _close(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f96:	605a      	str	r2, [r3, #4]
  return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_isatty>:

int _isatty(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	@ (8002034 <_sbrk+0x5c>)
 8001fe2:	4b15      	ldr	r3, [pc, #84]	@ (8002038 <_sbrk+0x60>)
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fec:	4b13      	ldr	r3, [pc, #76]	@ (800203c <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <_sbrk+0x64>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	@ (8002040 <_sbrk+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002008:	f00d fb06 	bl	800f618 <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e009      	b.n	800202c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a05      	ldr	r2, [pc, #20]	@ (800203c <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20050000 	.word	0x20050000
 8002038:	00000400 	.word	0x00000400
 800203c:	20000564 	.word	0x20000564
 8002040:	20000e88 	.word	0x20000e88

08002044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <SystemInit+0x20>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204e:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <SystemInit+0x20>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002068:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800206c:	f7ff ffea 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002070:	480c      	ldr	r0, [pc, #48]	@ (80020a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002072:	490d      	ldr	r1, [pc, #52]	@ (80020a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002074:	4a0d      	ldr	r2, [pc, #52]	@ (80020ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002078:	e002      	b.n	8002080 <LoopCopyDataInit>

0800207a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800207c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207e:	3304      	adds	r3, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002084:	d3f9      	bcc.n	800207a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002088:	4c0a      	ldr	r4, [pc, #40]	@ (80020b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800208c:	e001      	b.n	8002092 <LoopFillZerobss>

0800208e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002090:	3204      	adds	r2, #4

08002092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002094:	d3fb      	bcc.n	800208e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002096:	f00d fac5 	bl	800f624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800209a:	f7fe fb83 	bl	80007a4 <main>
  bx  lr    
 800209e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80020ac:	080101f8 	.word	0x080101f8
  ldr r2, =_sbss
 80020b0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80020b4:	20000e88 	.word	0x20000e88

080020b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC_IRQHandler>
	...

080020bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c0:	4b0e      	ldr	r3, [pc, #56]	@ (80020fc <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0d      	ldr	r2, [pc, #52]	@ (80020fc <HAL_Init+0x40>)
 80020c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020cc:	4b0b      	ldr	r3, [pc, #44]	@ (80020fc <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <HAL_Init+0x40>)
 80020d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a07      	ldr	r2, [pc, #28]	@ (80020fc <HAL_Init+0x40>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e4:	2003      	movs	r0, #3
 80020e6:	f000 f8fc 	bl	80022e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ea:	200f      	movs	r0, #15
 80020ec:	f7ff fe28 	bl	8001d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f0:	f7ff f9c4 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000008 	.word	0x20000008
 8002124:	20000568 	.word	0x20000568

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000568 	.word	0x20000568

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_Delay+0x44>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffde 	bl	8002128 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000008 	.word	0x20000008

08002188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002198:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a4:	4013      	ands	r3, r2
 80021a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ba:	4a04      	ldr	r2, [pc, #16]	@ (80021cc <__NVIC_SetPriorityGrouping+0x44>)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	60d3      	str	r3, [r2, #12]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <__NVIC_GetPriorityGrouping+0x18>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0307 	and.w	r3, r3, #7
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	db0b      	blt.n	8002216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	f003 021f 	and.w	r2, r3, #31
 8002204:	4907      	ldr	r1, [pc, #28]	@ (8002224 <__NVIC_EnableIRQ+0x38>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2001      	movs	r0, #1
 800220e:	fa00 f202 	lsl.w	r2, r0, r2
 8002212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	e000e100 	.word	0xe000e100

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002238:	2b00      	cmp	r3, #0
 800223a:	db0a      	blt.n	8002252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	490c      	ldr	r1, [pc, #48]	@ (8002274 <__NVIC_SetPriority+0x4c>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	0112      	lsls	r2, r2, #4
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	440b      	add	r3, r1
 800224c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002250:	e00a      	b.n	8002268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4908      	ldr	r1, [pc, #32]	@ (8002278 <__NVIC_SetPriority+0x50>)
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	3b04      	subs	r3, #4
 8002260:	0112      	lsls	r2, r2, #4
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	440b      	add	r3, r1
 8002266:	761a      	strb	r2, [r3, #24]
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000e100 	.word	0xe000e100
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	@ 0x24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2b04      	cmp	r3, #4
 8002298:	bf28      	it	cs
 800229a:	2304      	movcs	r3, #4
 800229c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2b06      	cmp	r3, #6
 80022a4:	d902      	bls.n	80022ac <NVIC_EncodePriority+0x30>
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3b03      	subs	r3, #3
 80022aa:	e000      	b.n	80022ae <NVIC_EncodePriority+0x32>
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	401a      	ands	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c4:	f04f 31ff 	mov.w	r1, #4294967295
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	fa01 f303 	lsl.w	r3, r1, r3
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d4:	4313      	orrs	r3, r2
         );
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	@ 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ff4c 	bl	8002188 <__NVIC_SetPriorityGrouping>
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800230a:	f7ff ff61 	bl	80021d0 <__NVIC_GetPriorityGrouping>
 800230e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	6978      	ldr	r0, [r7, #20]
 8002316:	f7ff ffb1 	bl	800227c <NVIC_EncodePriority>
 800231a:	4602      	mov	r2, r0
 800231c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff80 	bl	8002228 <__NVIC_SetPriority>
}
 8002328:	bf00      	nop
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff54 	bl	80021ec <__NVIC_EnableIRQ>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e00e      	b.n	800237c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	795b      	ldrb	r3, [r3, #5]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff f8ac 	bl	80014cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e03b      	b.n	800240e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff f8b0 	bl	8001510 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d4:	f023 0107 	bic.w	r1, r3, #7
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68d1      	ldr	r1, [r2, #12]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	430b      	orrs	r3, r1
 80023fc:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d026      	beq.n	8002486 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d021      	beq.n	8002486 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002450:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2201      	movs	r2, #1
 8002464:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2204      	movs	r2, #4
 800246a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f003 0320 	and.w	r3, r3, #32
 800248c:	2b00      	cmp	r3, #0
 800248e:	d026      	beq.n	80024de <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d021      	beq.n	80024de <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024a8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2220      	movs	r2, #32
 80024b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b6:	f043 0202 	orr.w	r2, r3, #2
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2204      	movs	r2, #4
 80024c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d026      	beq.n	8002536 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d021      	beq.n	8002536 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002500:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2208      	movs	r2, #8
 8002508:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2204      	movs	r2, #4
 800251a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d013      	beq.n	8002568 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00e      	beq.n	8002568 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002558:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2204      	movs	r2, #4
 8002560:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f853 	bl	800260e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d024      	beq.n	80025bc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01f      	beq.n	80025bc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800258a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2202      	movs	r2, #2
 8002592:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d01f      	beq.n	8002606 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01a      	beq.n	8002606 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025de:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2210      	movs	r2, #16
 80025e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f80e 	bl	8002622 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002638:	b480      	push	{r7}
 800263a:	b087      	sub	sp, #28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_DMA2D_ConfigLayer+0x20>
 8002654:	2302      	movs	r3, #2
 8002656:	e079      	b.n	800274c <HAL_DMA2D_ConfigLayer+0x114>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	3318      	adds	r3, #24
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	041b      	lsls	r3, r3, #16
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002682:	4b35      	ldr	r3, [pc, #212]	@ (8002758 <HAL_DMA2D_ConfigLayer+0x120>)
 8002684:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b0a      	cmp	r3, #10
 800268c:	d003      	beq.n	8002696 <HAL_DMA2D_ConfigLayer+0x5e>
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b09      	cmp	r3, #9
 8002694:	d107      	bne.n	80026a6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	e005      	b.n	80026b2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	061b      	lsls	r3, r3, #24
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d120      	bne.n	80026fa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	ea02 0103 	and.w	r1, r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b0a      	cmp	r3, #10
 80026e0:	d003      	beq.n	80026ea <HAL_DMA2D_ConfigLayer+0xb2>
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b09      	cmp	r3, #9
 80026e8:	d127      	bne.n	800273a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80026f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80026f8:	e01f      	b.n	800273a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69da      	ldr	r2, [r3, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	43db      	mvns	r3, r3
 8002704:	ea02 0103 	and.w	r1, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	430a      	orrs	r2, r1
 8002710:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b0a      	cmp	r3, #10
 8002722:	d003      	beq.n	800272c <HAL_DMA2D_ConfigLayer+0xf4>
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b09      	cmp	r3, #9
 800272a:	d106      	bne.n	800273a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002738:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	ff03000f 	.word	0xff03000f

0800275c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	@ 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e16e      	b.n	8002a4e <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7c5b      	ldrb	r3, [r3, #17]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d102      	bne.n	8002780 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe fef0 	bl	8001560 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2203      	movs	r2, #3
 8002784:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800279a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80027a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ae:	f7ff fcbb 	bl	8002128 <HAL_GetTick>
 80027b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80027b4:	e009      	b.n	80027ca <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80027b6:	f7ff fcb7 	bl	8002128 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027c4:	d901      	bls.n	80027ca <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e141      	b.n	8002a4e <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80027d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0ed      	beq.n	80027b6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 80027ea:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80027ee:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002806:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800280e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002842:	2001      	movs	r0, #1
 8002844:	f7ff fc7c 	bl	8002140 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002848:	f7ff fc6e 	bl	8002128 <HAL_GetTick>
 800284c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800284e:	e009      	b.n	8002864 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002850:	f7ff fc6a 	bl	8002128 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800285e:	d901      	bls.n	8002864 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e0f4      	b.n	8002a4e <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800286c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ed      	beq.n	8002850 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028a4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0202 	orr.w	r2, r2, #2
 80028c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0204 	orr.w	r2, r2, #4
 80028dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 0203 	bic.w	r2, r2, #3
 80028f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 800290a:	f7ff fc0d 	bl	8002128 <HAL_GetTick>
 800290e:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d123      	bne.n	8002968 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002920:	e00c      	b.n	800293c <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002922:	f7ff fc01 	bl	8002128 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002930:	d904      	bls.n	800293c <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e088      	b.n	8002a4e <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002944:	f003 0314 	and.w	r3, r3, #20
 8002948:	2b14      	cmp	r3, #20
 800294a:	d1ea      	bne.n	8002922 <HAL_DSI_Init+0x1c6>
 800294c:	e014      	b.n	8002978 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800294e:	f7ff fbeb 	bl	8002128 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800295c:	d904      	bls.n	8002968 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e072      	b.n	8002a4e <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002970:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8002974:	2b94      	cmp	r3, #148	@ 0x94
 8002976:	d1ea      	bne.n	800294e <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_DSI_Init+0x22a>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	e000      	b.n	8002988 <HAL_DSI_Init+0x22c>
 8002986:	2301      	movs	r3, #1
 8002988:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	4a32      	ldr	r2, [pc, #200]	@ (8002a58 <HAL_DSI_Init+0x2fc>)
 800298e:	fb03 f202 	mul.w	r2, r3, r2
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	409a      	lsls	r2, r3
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80029be:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0203 	bic.w	r2, r2, #3
 8002a22:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 0201 	orr.w	r2, r2, #1
 8002a3c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3728      	adds	r7, #40	@ 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	003d0900 	.word	0x003d0900

08002a5c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7c1b      	ldrb	r3, [r3, #16]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_DSI_ConfigErrorMonitor+0x16>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e0ab      	b.n	8002bca <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002aac:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002ab0:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8002ace:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f042 0201 	orr.w	r2, r2, #1
 8002aec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0202 	orr.w	r2, r2, #2
 8002b0a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d009      	beq.n	8002b2c <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 020c 	orr.w	r2, r2, #12
 8002b28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	f003 0320 	and.w	r3, r3, #32
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0210 	orr.w	r2, r2, #16
 8002b46:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d009      	beq.n	8002b68 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0220 	orr.w	r2, r2, #32
 8002b64:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b82:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ba0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8002bbe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00f      	beq.n	8002c0e <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8ad 	bl	8002d68 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00f      	beq.n	8002c3e <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f89f 	bl	8002d7c <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 808c 	beq.w	8002d60 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002c50:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c68:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4013      	ands	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f043 0201 	orr.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f043 0202 	orr.w	r2, r3, #2
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f043 0208 	orr.w	r2, r3, #8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f043 0210 	orr.w	r2, r3, #16
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f818 	bl	8002d90 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7c1b      	ldrb	r3, [r3, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_DSI_SetGenericVCID+0x16>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e016      	b.n	8002de8 <HAL_DSI_SetGenericVCID+0x44>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0203 	bic.w	r2, r2, #3
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7c1b      	ldrb	r3, [r3, #16]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e0c5      	b.n	8002f96 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0201 	bic.w	r2, r2, #1
 8002e30:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0203 	bic.w	r2, r2, #3
 8002e56:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68d9      	ldr	r1, [r3, #12]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695a      	ldr	r2, [r3, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0207 	bic.w	r2, r2, #7
 8002e78:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6959      	ldr	r1, [r3, #20]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691a      	ldr	r2, [r3, #16]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 020f 	bic.w	r2, r2, #15
 8002ea6:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6919      	ldr	r1, [r3, #16]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 020e 	bic.w	r2, r2, #14
 8002eca:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	005a      	lsls	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002f18:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0202 	orr.w	r2, r2, #2
 8002f8a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	7c1b      	ldrb	r3, [r3, #16]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_DSI_ConfigCommand+0x16>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e049      	b.n	800304e <HAL_DSI_ConfigCommand+0xaa>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b24      	ldr	r3, [pc, #144]	@ (800305c <HAL_DSI_ConfigCommand+0xb8>)
 8002fcc:	400b      	ands	r3, r1
 8002fce:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002fde:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8002fe4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8002fea:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8002ff0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8002ff6:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8002ffc:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003002:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003008:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800300e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003014:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800301a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0202 	bic.w	r2, r2, #2
 8003032:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	fef080ff 	.word	0xfef080ff

08003060 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7c1b      	ldrb	r3, [r3, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_DSI_ConfigFlowControl+0x16>
 8003072:	2302      	movs	r3, #2
 8003074:	e016      	b.n	80030a4 <HAL_DSI_ConfigFlowControl+0x44>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 021f 	bic.w	r2, r2, #31
 800308a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	7c1b      	ldrb	r3, [r3, #16]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_DSI_ConfigPhyTimer+0x16>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e058      	b.n	8003178 <HAL_DSI_ConfigPhyTimer+0xc8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4293      	cmp	r3, r2
 80030d6:	bf38      	it	cc
 80030d8:	4613      	movcc	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80030ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	041a      	lsls	r2, r3, #16
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800311a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	041b      	lsls	r3, r3, #16
 8003130:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003154:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	021a      	lsls	r2, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	7c1b      	ldrb	r3, [r3, #16]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d101      	bne.n	800319a <HAL_DSI_ConfigHostTimeouts+0x16>
 8003196:	2302      	movs	r3, #2
 8003198:	e0b4      	b.n	8003304 <HAL_DSI_ConfigHostTimeouts+0x180>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80031ae:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6899      	ldr	r1, [r3, #8]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	021a      	lsls	r2, r3, #8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	b292      	uxth	r2, r2
 80031d0:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	041a      	lsls	r2, r3, #16
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	0c1b      	lsrs	r3, r3, #16
 80031f2:	041b      	lsls	r3, r3, #16
 80031f4:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	0c1b      	lsrs	r3, r3, #16
 8003214:	041b      	lsls	r3, r3, #16
 8003216:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	0c1b      	lsrs	r3, r3, #16
 8003238:	041b      	lsls	r3, r3, #16
 800323a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800328e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6812      	ldr	r2, [r2, #0]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	041b      	lsls	r3, r3, #16
 80032e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6a1a      	ldr	r2, [r3, #32]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	7c1b      	ldrb	r3, [r3, #16]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003322:	2302      	movs	r3, #2
 8003324:	e01b      	b.n	800335e <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 800333c:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	065a      	lsls	r2, r3, #25
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	@ 0x24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
 8003386:	e177      	b.n	8003678 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003388:	2201      	movs	r2, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f040 8166 	bne.w	8003672 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d005      	beq.n	80033be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d130      	bne.n	8003420 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f4:	2201      	movs	r2, #1
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 0201 	and.w	r2, r3, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0303 	and.w	r3, r3, #3
 8003428:	2b03      	cmp	r3, #3
 800342a:	d017      	beq.n	800345c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	2203      	movs	r2, #3
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d123      	bne.n	80034b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	220f      	movs	r2, #15
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4313      	orrs	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	08da      	lsrs	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3208      	adds	r2, #8
 80034aa:	69b9      	ldr	r1, [r7, #24]
 80034ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0203 	and.w	r2, r3, #3
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 80c0 	beq.w	8003672 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	4b66      	ldr	r3, [pc, #408]	@ (8003690 <HAL_GPIO_Init+0x324>)
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	4a65      	ldr	r2, [pc, #404]	@ (8003690 <HAL_GPIO_Init+0x324>)
 80034fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003500:	6453      	str	r3, [r2, #68]	@ 0x44
 8003502:	4b63      	ldr	r3, [pc, #396]	@ (8003690 <HAL_GPIO_Init+0x324>)
 8003504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350e:	4a61      	ldr	r2, [pc, #388]	@ (8003694 <HAL_GPIO_Init+0x328>)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	3302      	adds	r3, #2
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	220f      	movs	r2, #15
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a58      	ldr	r2, [pc, #352]	@ (8003698 <HAL_GPIO_Init+0x32c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d037      	beq.n	80035aa <HAL_GPIO_Init+0x23e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a57      	ldr	r2, [pc, #348]	@ (800369c <HAL_GPIO_Init+0x330>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d031      	beq.n	80035a6 <HAL_GPIO_Init+0x23a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a56      	ldr	r2, [pc, #344]	@ (80036a0 <HAL_GPIO_Init+0x334>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d02b      	beq.n	80035a2 <HAL_GPIO_Init+0x236>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a55      	ldr	r2, [pc, #340]	@ (80036a4 <HAL_GPIO_Init+0x338>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d025      	beq.n	800359e <HAL_GPIO_Init+0x232>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a54      	ldr	r2, [pc, #336]	@ (80036a8 <HAL_GPIO_Init+0x33c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d01f      	beq.n	800359a <HAL_GPIO_Init+0x22e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a53      	ldr	r2, [pc, #332]	@ (80036ac <HAL_GPIO_Init+0x340>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d019      	beq.n	8003596 <HAL_GPIO_Init+0x22a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a52      	ldr	r2, [pc, #328]	@ (80036b0 <HAL_GPIO_Init+0x344>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_GPIO_Init+0x226>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a51      	ldr	r2, [pc, #324]	@ (80036b4 <HAL_GPIO_Init+0x348>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00d      	beq.n	800358e <HAL_GPIO_Init+0x222>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a50      	ldr	r2, [pc, #320]	@ (80036b8 <HAL_GPIO_Init+0x34c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <HAL_GPIO_Init+0x21e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a4f      	ldr	r2, [pc, #316]	@ (80036bc <HAL_GPIO_Init+0x350>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_GPIO_Init+0x21a>
 8003582:	2309      	movs	r3, #9
 8003584:	e012      	b.n	80035ac <HAL_GPIO_Init+0x240>
 8003586:	230a      	movs	r3, #10
 8003588:	e010      	b.n	80035ac <HAL_GPIO_Init+0x240>
 800358a:	2308      	movs	r3, #8
 800358c:	e00e      	b.n	80035ac <HAL_GPIO_Init+0x240>
 800358e:	2307      	movs	r3, #7
 8003590:	e00c      	b.n	80035ac <HAL_GPIO_Init+0x240>
 8003592:	2306      	movs	r3, #6
 8003594:	e00a      	b.n	80035ac <HAL_GPIO_Init+0x240>
 8003596:	2305      	movs	r3, #5
 8003598:	e008      	b.n	80035ac <HAL_GPIO_Init+0x240>
 800359a:	2304      	movs	r3, #4
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x240>
 800359e:	2303      	movs	r3, #3
 80035a0:	e004      	b.n	80035ac <HAL_GPIO_Init+0x240>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_Init+0x240>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x240>
 80035aa:	2300      	movs	r3, #0
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	f002 0203 	and.w	r2, r2, #3
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	4093      	lsls	r3, r2
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035bc:	4935      	ldr	r1, [pc, #212]	@ (8003694 <HAL_GPIO_Init+0x328>)
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ca:	4b3d      	ldr	r3, [pc, #244]	@ (80036c0 <HAL_GPIO_Init+0x354>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ee:	4a34      	ldr	r2, [pc, #208]	@ (80036c0 <HAL_GPIO_Init+0x354>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035f4:	4b32      	ldr	r3, [pc, #200]	@ (80036c0 <HAL_GPIO_Init+0x354>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003618:	4a29      	ldr	r2, [pc, #164]	@ (80036c0 <HAL_GPIO_Init+0x354>)
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800361e:	4b28      	ldr	r3, [pc, #160]	@ (80036c0 <HAL_GPIO_Init+0x354>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	43db      	mvns	r3, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4013      	ands	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003642:	4a1f      	ldr	r2, [pc, #124]	@ (80036c0 <HAL_GPIO_Init+0x354>)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003648:	4b1d      	ldr	r3, [pc, #116]	@ (80036c0 <HAL_GPIO_Init+0x354>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	43db      	mvns	r3, r3
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800366c:	4a14      	ldr	r2, [pc, #80]	@ (80036c0 <HAL_GPIO_Init+0x354>)
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	3301      	adds	r3, #1
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b0f      	cmp	r3, #15
 800367c:	f67f ae84 	bls.w	8003388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3724      	adds	r7, #36	@ 0x24
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	40013800 	.word	0x40013800
 8003698:	40020000 	.word	0x40020000
 800369c:	40020400 	.word	0x40020400
 80036a0:	40020800 	.word	0x40020800
 80036a4:	40020c00 	.word	0x40020c00
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40021400 	.word	0x40021400
 80036b0:	40021800 	.word	0x40021800
 80036b4:	40021c00 	.word	0x40021c00
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40022400 	.word	0x40022400
 80036c0:	40013c00 	.word	0x40013c00

080036c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	887b      	ldrh	r3, [r7, #2]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	e001      	b.n	80036e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
 8003700:	4613      	mov	r3, r2
 8003702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003704:	787b      	ldrb	r3, [r7, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003710:	e003      	b.n	800371a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	041a      	lsls	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	619a      	str	r2, [r3, #24]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af02      	add	r7, sp, #8
 800372c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e059      	b.n	80037ec <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f00b f956 	bl	800ea04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2203      	movs	r2, #3
 800375c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003766:	d102      	bne.n	800376e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f007 fd81 	bl	800b27a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	7c1a      	ldrb	r2, [r3, #16]
 8003780:	f88d 2000 	strb.w	r2, [sp]
 8003784:	3304      	adds	r3, #4
 8003786:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003788:	f007 fd02 	bl	800b190 <USB_CoreInit>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e026      	b.n	80037ec <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2101      	movs	r1, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	f007 fd79 	bl	800b29c <USB_SetCurrentMode>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e017      	b.n	80037ec <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7c1a      	ldrb	r2, [r3, #16]
 80037c4:	f88d 2000 	strb.w	r2, [sp]
 80037c8:	3304      	adds	r3, #4
 80037ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037cc:	f007 ff1c 	bl	800b608 <USB_HostInit>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e004      	b.n	80037ec <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b08b      	sub	sp, #44	@ 0x2c
 80037f8:	af04      	add	r7, sp, #16
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	461a      	mov	r2, r3
 8003802:	4603      	mov	r3, r0
 8003804:	70fb      	strb	r3, [r7, #3]
 8003806:	460b      	mov	r3, r1
 8003808:	70bb      	strb	r3, [r7, #2]
 800380a:	4613      	mov	r3, r2
 800380c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800380e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003810:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_HCD_HC_Init+0x2c>
 800381c:	2302      	movs	r3, #2
 800381e:	e09d      	b.n	800395c <HAL_HCD_HC_Init+0x168>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	3319      	adds	r3, #25
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3314      	adds	r3, #20
 800384c:	787a      	ldrb	r2, [r7, #1]
 800384e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	3315      	adds	r3, #21
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3326      	adds	r3, #38	@ 0x26
 8003874:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003878:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	78bb      	ldrb	r3, [r7, #2]
 800387e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003882:	b2d8      	uxtb	r0, r3
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	3316      	adds	r3, #22
 8003892:	4602      	mov	r2, r0
 8003894:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fbc8 	bl	8004030 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80038a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	da0a      	bge.n	80038be <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	3317      	adds	r3, #23
 80038b8:	2201      	movs	r2, #1
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e009      	b.n	80038d2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3317      	adds	r3, #23
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f007 ffee 	bl	800b8b8 <USB_GetHostSpeed>
 80038dc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80038de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10b      	bne.n	80038fe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80038e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d107      	bne.n	80038fe <HAL_HCD_HC_Init+0x10a>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80038f8:	d901      	bls.n	80038fe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80038fa:	23bc      	movs	r3, #188	@ 0xbc
 80038fc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3318      	adds	r3, #24
 800390e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003912:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	b298      	uxth	r0, r3
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	3328      	adds	r3, #40	@ 0x28
 8003928:	4602      	mov	r2, r0
 800392a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	b29b      	uxth	r3, r3
 8003934:	787c      	ldrb	r4, [r7, #1]
 8003936:	78ba      	ldrb	r2, [r7, #2]
 8003938:	78f9      	ldrb	r1, [r7, #3]
 800393a:	9302      	str	r3, [sp, #8]
 800393c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	4623      	mov	r3, r4
 800394a:	f007 ffdd 	bl	800b908 <USB_HC_Init>
 800394e:	4603      	mov	r3, r0
 8003950:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd90      	pop	{r4, r7, pc}

08003964 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_HCD_HC_Halt+0x1e>
 800397e:	2302      	movs	r3, #2
 8003980:	e00f      	b.n	80039a2 <HAL_HCD_HC_Halt+0x3e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	4611      	mov	r1, r2
 8003992:	4618      	mov	r0, r3
 8003994:	f008 fb6f 	bl	800c076 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	461a      	mov	r2, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	70fb      	strb	r3, [r7, #3]
 80039be:	460b      	mov	r3, r1
 80039c0:	70bb      	strb	r3, [r7, #2]
 80039c2:	4613      	mov	r3, r2
 80039c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	3317      	adds	r3, #23
 80039d6:	78ba      	ldrb	r2, [r7, #2]
 80039d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	3326      	adds	r3, #38	@ 0x26
 80039ea:	787a      	ldrb	r2, [r7, #1]
 80039ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80039ee:	7c3b      	ldrb	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d114      	bne.n	8003a1e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	332a      	adds	r3, #42	@ 0x2a
 8003a04:	2203      	movs	r2, #3
 8003a06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	3319      	adds	r3, #25
 8003a18:	7f3a      	ldrb	r2, [r7, #28]
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e009      	b.n	8003a32 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	332a      	adds	r3, #42	@ 0x2a
 8003a2e:	2202      	movs	r2, #2
 8003a30:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a32:	787b      	ldrb	r3, [r7, #1]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	f200 8102 	bhi.w	8003c3e <HAL_HCD_HC_SubmitRequest+0x292>
 8003a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003c29 	.word	0x08003c29
 8003a48:	08003b15 	.word	0x08003b15
 8003a4c:	08003b9f 	.word	0x08003b9f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003a50:	7c3b      	ldrb	r3, [r7, #16]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	f040 80f5 	bne.w	8003c42 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003a58:	78bb      	ldrb	r3, [r7, #2]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d12d      	bne.n	8003aba <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003a5e:	8b3b      	ldrh	r3, [r7, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	333d      	adds	r3, #61	@ 0x3d
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	333d      	adds	r3, #61	@ 0x3d
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	332a      	adds	r3, #42	@ 0x2a
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003aa2:	e0ce      	b.n	8003c42 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	332a      	adds	r3, #42	@ 0x2a
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	701a      	strb	r2, [r3, #0]
      break;
 8003ab8:	e0c3      	b.n	8003c42 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	331a      	adds	r3, #26
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	f040 80b8 	bne.w	8003c42 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	333c      	adds	r3, #60	@ 0x3c
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	332a      	adds	r3, #42	@ 0x2a
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]
      break;
 8003afc:	e0a1      	b.n	8003c42 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	332a      	adds	r3, #42	@ 0x2a
 8003b0e:	2202      	movs	r2, #2
 8003b10:	701a      	strb	r2, [r3, #0]
      break;
 8003b12:	e096      	b.n	8003c42 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b14:	78bb      	ldrb	r3, [r7, #2]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d120      	bne.n	8003b5c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	333d      	adds	r3, #61	@ 0x3d
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	332a      	adds	r3, #42	@ 0x2a
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b44:	e07e      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	332a      	adds	r3, #42	@ 0x2a
 8003b56:	2202      	movs	r2, #2
 8003b58:	701a      	strb	r2, [r3, #0]
      break;
 8003b5a:	e073      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	333c      	adds	r3, #60	@ 0x3c
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	332a      	adds	r3, #42	@ 0x2a
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
      break;
 8003b86:	e05d      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	332a      	adds	r3, #42	@ 0x2a
 8003b98:	2202      	movs	r2, #2
 8003b9a:	701a      	strb	r2, [r3, #0]
      break;
 8003b9c:	e052      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003b9e:	78bb      	ldrb	r3, [r7, #2]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d120      	bne.n	8003be6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	333d      	adds	r3, #61	@ 0x3d
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	332a      	adds	r3, #42	@ 0x2a
 8003bca:	2200      	movs	r2, #0
 8003bcc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bce:	e039      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	332a      	adds	r3, #42	@ 0x2a
 8003be0:	2202      	movs	r2, #2
 8003be2:	701a      	strb	r2, [r3, #0]
      break;
 8003be4:	e02e      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	333c      	adds	r3, #60	@ 0x3c
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	332a      	adds	r3, #42	@ 0x2a
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
      break;
 8003c10:	e018      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	332a      	adds	r3, #42	@ 0x2a
 8003c22:	2202      	movs	r2, #2
 8003c24:	701a      	strb	r2, [r3, #0]
      break;
 8003c26:	e00d      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	332a      	adds	r3, #42	@ 0x2a
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
      break;
 8003c3c:	e002      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003c42:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	332c      	adds	r3, #44	@ 0x2c
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	8b39      	ldrh	r1, [r7, #24]
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4403      	add	r3, r0
 8003c68:	3334      	adds	r3, #52	@ 0x34
 8003c6a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	334c      	adds	r3, #76	@ 0x4c
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3338      	adds	r3, #56	@ 0x38
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3315      	adds	r3, #21
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	334d      	adds	r3, #77	@ 0x4d
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	3310      	adds	r3, #16
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	1d19      	adds	r1, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	799b      	ldrb	r3, [r3, #6]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	f007 ff42 	bl	800bb60 <USB_HC_StartXfer>
 8003cdc:	4603      	mov	r3, r0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop

08003ce8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f007 fc42 	bl	800b588 <USB_GetMode>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	f040 80fb 	bne.w	8003f02 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f007 fc05 	bl	800b520 <USB_ReadInterrupts>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80f1 	beq.w	8003f00 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f007 fbfc 	bl	800b520 <USB_ReadInterrupts>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d32:	d104      	bne.n	8003d3e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f007 fbec 	bl	800b520 <USB_ReadInterrupts>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d52:	d104      	bne.n	8003d5e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f007 fbdc 	bl	800b520 <USB_ReadInterrupts>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d72:	d104      	bne.n	8003d7e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003d7c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f007 fbcc 	bl	800b520 <USB_ReadInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d103      	bne.n	8003d9a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2202      	movs	r2, #2
 8003d98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f007 fbbe 	bl	800b520 <USB_ReadInterrupts>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003daa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dae:	d120      	bne.n	8003df2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003db8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d113      	bne.n	8003df2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003dca:	2110      	movs	r1, #16
 8003dcc:	6938      	ldr	r0, [r7, #16]
 8003dce:	f007 fab1 	bl	800b334 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003dd2:	6938      	ldr	r0, [r7, #16]
 8003dd4:	f007 fae0 	bl	800b398 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7a5b      	ldrb	r3, [r3, #9]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d105      	bne.n	8003dec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f007 fcc6 	bl	800b778 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f00a fe87 	bl	800eb00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f007 fb92 	bl	800b520 <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e06:	d102      	bne.n	8003e0e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f001 fd4d 	bl	80058a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f007 fb84 	bl	800b520 <USB_ReadInterrupts>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d106      	bne.n	8003e30 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f00a fe50 	bl	800eac8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f007 fb73 	bl	800b520 <USB_ReadInterrupts>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e44:	d139      	bne.n	8003eba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f008 f902 	bl	800c054 <USB_HC_ReadInterrupt>
 8003e50:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	e025      	b.n	8003ea4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d018      	beq.n	8003e9e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e82:	d106      	bne.n	8003e92 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	4619      	mov	r1, r3
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f905 	bl	800409a <HCD_HC_IN_IRQHandler>
 8003e90:	e005      	b.n	8003e9e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	4619      	mov	r1, r3
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 ff67 	bl	8004d6c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	795b      	ldrb	r3, [r3, #5]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d3d3      	bcc.n	8003e58 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f007 fb2e 	bl	800b520 <USB_ReadInterrupts>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b10      	cmp	r3, #16
 8003ecc:	d101      	bne.n	8003ed2 <HAL_HCD_IRQHandler+0x1ea>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_HCD_IRQHandler+0x1ec>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d014      	beq.n	8003f02 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0210 	bic.w	r2, r2, #16
 8003ee6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 fbfe 	bl	80056ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699a      	ldr	r2, [r3, #24]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0210 	orr.w	r2, r2, #16
 8003efc:	619a      	str	r2, [r3, #24]
 8003efe:	e000      	b.n	8003f02 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003f00:	bf00      	nop
    }
  }
}
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_HCD_Start+0x16>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e013      	b.n	8003f46 <HAL_HCD_Start+0x3e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f007 fc8a 	bl	800b846 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f007 f98e 	bl	800b258 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_HCD_Stop+0x16>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e00d      	b.n	8003f80 <HAL_HCD_Stop+0x32>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f008 f9dd 	bl	800c330 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f007 fc2c 	bl	800b7f2 <USB_ResetPort>
 8003f9a:	4603      	mov	r3, r0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	334c      	adds	r3, #76	@ 0x4c
 8003fc0:	781b      	ldrb	r3, [r3, #0]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3338      	adds	r3, #56	@ 0x38
 8003fea:	681b      	ldr	r3, [r3, #0]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f007 fc6e 	bl	800b8e6 <USB_GetCurrentFrame>
 800400a:	4603      	mov	r3, r0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f007 fc49 	bl	800b8b8 <USB_GetHostSpeed>
 8004026:	4603      	mov	r3, r0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	331a      	adds	r3, #26
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	331b      	adds	r3, #27
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	3325      	adds	r3, #37	@ 0x25
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	3324      	adds	r3, #36	@ 0x24
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b086      	sub	sp, #24
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f007 fa44 	bl	800b546 <USB_ReadChInterrupts>
 80040be:	4603      	mov	r3, r0
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d11a      	bne.n	80040fe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d4:	461a      	mov	r2, r3
 80040d6:	2304      	movs	r3, #4
 80040d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	334d      	adds	r3, #77	@ 0x4d
 80040ea:	2207      	movs	r2, #7
 80040ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f007 ffbd 	bl	800c076 <USB_HC_Halt>
 80040fc:	e09e      	b.n	800423c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f007 fa1d 	bl	800b546 <USB_ReadChInterrupts>
 800410c:	4603      	mov	r3, r0
 800410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004116:	d11b      	bne.n	8004150 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004118:	78fb      	ldrb	r3, [r7, #3]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004124:	461a      	mov	r2, r3
 8004126:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800412a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800412c:	78fa      	ldrb	r2, [r7, #3]
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4613      	mov	r3, r2
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	334d      	adds	r3, #77	@ 0x4d
 800413c:	2208      	movs	r2, #8
 800413e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f007 ff94 	bl	800c076 <USB_HC_Halt>
 800414e:	e075      	b.n	800423c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	4611      	mov	r1, r2
 8004158:	4618      	mov	r0, r3
 800415a:	f007 f9f4 	bl	800b546 <USB_ReadChInterrupts>
 800415e:	4603      	mov	r3, r0
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b08      	cmp	r3, #8
 8004166:	d11a      	bne.n	800419e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4413      	add	r3, r2
 8004170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004174:	461a      	mov	r2, r3
 8004176:	2308      	movs	r3, #8
 8004178:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	1a9b      	subs	r3, r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	334d      	adds	r3, #77	@ 0x4d
 800418a:	2206      	movs	r2, #6
 800418c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	4611      	mov	r1, r2
 8004196:	4618      	mov	r0, r3
 8004198:	f007 ff6d 	bl	800c076 <USB_HC_Halt>
 800419c:	e04e      	b.n	800423c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f007 f9cd 	bl	800b546 <USB_ReadChInterrupts>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b6:	d11b      	bne.n	80041f0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c4:	461a      	mov	r2, r3
 80041c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80041cc:	78fa      	ldrb	r2, [r7, #3]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	334d      	adds	r3, #77	@ 0x4d
 80041dc:	2209      	movs	r2, #9
 80041de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f007 ff44 	bl	800c076 <USB_HC_Halt>
 80041ee:	e025      	b.n	800423c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	4611      	mov	r1, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f007 f9a4 	bl	800b546 <USB_ReadChInterrupts>
 80041fe:	4603      	mov	r3, r0
 8004200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004204:	2b80      	cmp	r3, #128	@ 0x80
 8004206:	d119      	bne.n	800423c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	015a      	lsls	r2, r3, #5
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4413      	add	r3, r2
 8004210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004214:	461a      	mov	r2, r3
 8004216:	2380      	movs	r3, #128	@ 0x80
 8004218:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	334d      	adds	r3, #77	@ 0x4d
 800422a:	2207      	movs	r2, #7
 800422c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f007 ff1d 	bl	800c076 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	78fa      	ldrb	r2, [r7, #3]
 8004242:	4611      	mov	r1, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f007 f97e 	bl	800b546 <USB_ReadChInterrupts>
 800424a:	4603      	mov	r3, r0
 800424c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004254:	d112      	bne.n	800427c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f007 ff09 	bl	800c076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4413      	add	r3, r2
 800426c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004270:	461a      	mov	r2, r3
 8004272:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004276:	6093      	str	r3, [r2, #8]
 8004278:	f000 bd75 	b.w	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	78fa      	ldrb	r2, [r7, #3]
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f007 f95e 	bl	800b546 <USB_ReadChInterrupts>
 800428a:	4603      	mov	r3, r0
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b01      	cmp	r3, #1
 8004292:	f040 8128 	bne.w	80044e6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042a2:	461a      	mov	r2, r3
 80042a4:	2320      	movs	r3, #32
 80042a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	331b      	adds	r3, #27
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d119      	bne.n	80042f2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	331b      	adds	r3, #27
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042f0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	799b      	ldrb	r3, [r3, #6]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d01b      	beq.n	8004332 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	3330      	adds	r3, #48	@ 0x30
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	1ac9      	subs	r1, r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4403      	add	r3, r0
 800432e:	3338      	adds	r3, #56	@ 0x38
 8004330:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	334d      	adds	r3, #77	@ 0x4d
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	440b      	add	r3, r1
 8004354:	3344      	adds	r3, #68	@ 0x44
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004366:	461a      	mov	r2, r3
 8004368:	2301      	movs	r3, #1
 800436a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	3326      	adds	r3, #38	@ 0x26
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	3326      	adds	r3, #38	@ 0x26
 8004392:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004394:	2b02      	cmp	r3, #2
 8004396:	d110      	bne.n	80043ba <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f007 fe68 	bl	800c076 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b2:	461a      	mov	r2, r3
 80043b4:	2310      	movs	r3, #16
 80043b6:	6093      	str	r3, [r2, #8]
 80043b8:	e03d      	b.n	8004436 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3326      	adds	r3, #38	@ 0x26
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d00a      	beq.n	80043e6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	3326      	adds	r3, #38	@ 0x26
 80043e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d127      	bne.n	8004436 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	0151      	lsls	r1, r2, #5
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	440a      	add	r2, r1
 80043fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004400:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004404:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004406:	78fa      	ldrb	r2, [r7, #3]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	4613      	mov	r3, r2
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	334c      	adds	r3, #76	@ 0x4c
 8004416:	2201      	movs	r2, #1
 8004418:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	6879      	ldr	r1, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	011b      	lsls	r3, r3, #4
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	334c      	adds	r3, #76	@ 0x4c
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f00a fb73 	bl	800eb1c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	799b      	ldrb	r3, [r3, #6]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d13b      	bne.n	80044b6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3338      	adds	r3, #56	@ 0x38
 800444e:	6819      	ldr	r1, [r3, #0]
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4403      	add	r3, r0
 800445e:	3328      	adds	r3, #40	@ 0x28
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	440b      	add	r3, r1
 8004464:	1e59      	subs	r1, r3, #1
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4403      	add	r3, r0
 8004474:	3328      	adds	r3, #40	@ 0x28
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	fbb1 f3f3 	udiv	r3, r1, r3
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8470 	beq.w	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	333c      	adds	r3, #60	@ 0x3c
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	f083 0301 	eor.w	r3, r3, #1
 800449e:	b2d8      	uxtb	r0, r3
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	333c      	adds	r3, #60	@ 0x3c
 80044ae:	4602      	mov	r2, r0
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	f000 bc58 	b.w	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	333c      	adds	r3, #60	@ 0x3c
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	f083 0301 	eor.w	r3, r3, #1
 80044ce:	b2d8      	uxtb	r0, r3
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	333c      	adds	r3, #60	@ 0x3c
 80044de:	4602      	mov	r2, r0
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	f000 bc40 	b.w	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	78fa      	ldrb	r2, [r7, #3]
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f007 f829 	bl	800b546 <USB_ReadChInterrupts>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d131      	bne.n	8004562 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800450a:	461a      	mov	r2, r3
 800450c:	2320      	movs	r3, #32
 800450e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004510:	78fa      	ldrb	r2, [r7, #3]
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	4613      	mov	r3, r2
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	331a      	adds	r3, #26
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	f040 841f 	bne.w	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	331b      	adds	r3, #27
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	334d      	adds	r3, #77	@ 0x4d
 800454c:	2203      	movs	r2, #3
 800454e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	4611      	mov	r1, r2
 8004558:	4618      	mov	r0, r3
 800455a:	f007 fd8c 	bl	800c076 <USB_HC_Halt>
 800455e:	f000 bc02 	b.w	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f006 ffeb 	bl	800b546 <USB_ReadChInterrupts>
 8004570:	4603      	mov	r3, r0
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b02      	cmp	r3, #2
 8004578:	f040 8305 	bne.w	8004b86 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004588:	461a      	mov	r2, r3
 800458a:	2302      	movs	r3, #2
 800458c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	334d      	adds	r3, #77	@ 0x4d
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d114      	bne.n	80045ce <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	334d      	adds	r3, #77	@ 0x4d
 80045b4:	2202      	movs	r2, #2
 80045b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	334c      	adds	r3, #76	@ 0x4c
 80045c8:	2201      	movs	r2, #1
 80045ca:	701a      	strb	r2, [r3, #0]
 80045cc:	e2cc      	b.n	8004b68 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	334d      	adds	r3, #77	@ 0x4d
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b06      	cmp	r3, #6
 80045e2:	d114      	bne.n	800460e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	334d      	adds	r3, #77	@ 0x4d
 80045f4:	2202      	movs	r2, #2
 80045f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80045f8:	78fa      	ldrb	r2, [r7, #3]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	334c      	adds	r3, #76	@ 0x4c
 8004608:	2205      	movs	r2, #5
 800460a:	701a      	strb	r2, [r3, #0]
 800460c:	e2ac      	b.n	8004b68 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	334d      	adds	r3, #77	@ 0x4d
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b07      	cmp	r3, #7
 8004622:	d00b      	beq.n	800463c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334d      	adds	r3, #77	@ 0x4d
 8004634:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004636:	2b09      	cmp	r3, #9
 8004638:	f040 80a6 	bne.w	8004788 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	334d      	adds	r3, #77	@ 0x4d
 800464c:	2202      	movs	r2, #2
 800464e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	3344      	adds	r3, #68	@ 0x44
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	011b      	lsls	r3, r3, #4
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4403      	add	r3, r0
 8004670:	3344      	adds	r3, #68	@ 0x44
 8004672:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3344      	adds	r3, #68	@ 0x44
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d943      	bls.n	8004712 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	3344      	adds	r3, #68	@ 0x44
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	331a      	adds	r3, #26
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d123      	bne.n	80046fc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	331b      	adds	r3, #27
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	331c      	adds	r3, #28
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	0151      	lsls	r1, r2, #5
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	440a      	add	r2, r1
 80046f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046fc:	78fa      	ldrb	r2, [r7, #3]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	334c      	adds	r3, #76	@ 0x4c
 800470c:	2204      	movs	r2, #4
 800470e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004710:	e229      	b.n	8004b66 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004712:	78fa      	ldrb	r2, [r7, #3]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	1a9b      	subs	r3, r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	334c      	adds	r3, #76	@ 0x4c
 8004722:	2202      	movs	r2, #2
 8004724:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004726:	78fa      	ldrb	r2, [r7, #3]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	3326      	adds	r3, #38	@ 0x26
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	3326      	adds	r3, #38	@ 0x26
 800474c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800474e:	2b02      	cmp	r3, #2
 8004750:	f040 8209 	bne.w	8004b66 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4413      	add	r3, r2
 800475c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800476a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004772:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004780:	461a      	mov	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004786:	e1ee      	b.n	8004b66 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	334d      	adds	r3, #77	@ 0x4d
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b05      	cmp	r3, #5
 800479c:	f040 80c8 	bne.w	8004930 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	334d      	adds	r3, #77	@ 0x4d
 80047b0:	2202      	movs	r2, #2
 80047b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	331b      	adds	r3, #27
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	f040 81ce 	bne.w	8004b68 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	3326      	adds	r3, #38	@ 0x26
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d16b      	bne.n	80048ba <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	3348      	adds	r3, #72	@ 0x48
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1c59      	adds	r1, r3, #1
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4403      	add	r3, r0
 8004802:	3348      	adds	r3, #72	@ 0x48
 8004804:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	3348      	adds	r3, #72	@ 0x48
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d943      	bls.n	80048a4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	3348      	adds	r3, #72	@ 0x48
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	331b      	adds	r3, #27
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	3344      	adds	r3, #68	@ 0x44
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d809      	bhi.n	800486e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	331c      	adds	r3, #28
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800486e:	78fb      	ldrb	r3, [r7, #3]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	0151      	lsls	r1, r2, #5
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	440a      	add	r2, r1
 8004884:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800488c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	334c      	adds	r3, #76	@ 0x4c
 800489e:	2204      	movs	r2, #4
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e014      	b.n	80048ce <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	334c      	adds	r3, #76	@ 0x4c
 80048b4:	2202      	movs	r2, #2
 80048b6:	701a      	strb	r2, [r3, #0]
 80048b8:	e009      	b.n	80048ce <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	334c      	adds	r3, #76	@ 0x4c
 80048ca:	2202      	movs	r2, #2
 80048cc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	3326      	adds	r3, #38	@ 0x26
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	3326      	adds	r3, #38	@ 0x26
 80048f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f040 8136 	bne.w	8004b68 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004912:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800491a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4413      	add	r3, r2
 8004924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004928:	461a      	mov	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e11b      	b.n	8004b68 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	334d      	adds	r3, #77	@ 0x4d
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b03      	cmp	r3, #3
 8004944:	f040 8081 	bne.w	8004a4a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	334d      	adds	r3, #77	@ 0x4d
 8004958:	2202      	movs	r2, #2
 800495a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	331b      	adds	r3, #27
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b01      	cmp	r3, #1
 8004970:	f040 80fa 	bne.w	8004b68 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	334c      	adds	r3, #76	@ 0x4c
 8004984:	2202      	movs	r2, #2
 8004986:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	440a      	add	r2, r1
 800499e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049c6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	78fa      	ldrb	r2, [r7, #3]
 80049d8:	0151      	lsls	r1, r2, #5
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	440a      	add	r2, r1
 80049de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049e2:	f023 0320 	bic.w	r3, r3, #32
 80049e6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049e8:	78fa      	ldrb	r2, [r7, #3]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	3326      	adds	r3, #38	@ 0x26
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3326      	adds	r3, #38	@ 0x26
 8004a0e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	f040 80a9 	bne.w	8004b68 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a2c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a34:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a36:	78fb      	ldrb	r3, [r7, #3]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a42:	461a      	mov	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	e08e      	b.n	8004b68 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	334d      	adds	r3, #77	@ 0x4d
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d143      	bne.n	8004ae8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a60:	78fa      	ldrb	r2, [r7, #3]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	334d      	adds	r3, #77	@ 0x4d
 8004a70:	2202      	movs	r2, #2
 8004a72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a74:	78fa      	ldrb	r2, [r7, #3]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	334c      	adds	r3, #76	@ 0x4c
 8004a84:	2202      	movs	r2, #2
 8004a86:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	3326      	adds	r3, #38	@ 0x26
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3326      	adds	r3, #38	@ 0x26
 8004aae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d159      	bne.n	8004b68 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ab4:	78fb      	ldrb	r3, [r7, #3]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004aca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ad2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ad4:	78fb      	ldrb	r3, [r7, #3]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e03f      	b.n	8004b68 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	334d      	adds	r3, #77	@ 0x4d
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d126      	bne.n	8004b4c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	334d      	adds	r3, #77	@ 0x4d
 8004b0e:	2202      	movs	r2, #2
 8004b10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3344      	adds	r3, #68	@ 0x44
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	1c59      	adds	r1, r3, #1
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4403      	add	r3, r0
 8004b32:	3344      	adds	r3, #68	@ 0x44
 8004b34:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	440b      	add	r3, r1
 8004b44:	334c      	adds	r3, #76	@ 0x4c
 8004b46:	2204      	movs	r2, #4
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	e00d      	b.n	8004b68 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	334d      	adds	r3, #77	@ 0x4d
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	f000 8100 	beq.w	8004d64 <HCD_HC_IN_IRQHandler+0xcca>
 8004b64:	e000      	b.n	8004b68 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b66:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	334c      	adds	r3, #76	@ 0x4c
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	78fb      	ldrb	r3, [r7, #3]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f009 ffcc 	bl	800eb1c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b84:	e0ef      	b.n	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f006 fcd9 	bl	800b546 <USB_ReadChInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9a:	2b40      	cmp	r3, #64	@ 0x40
 8004b9c:	d12f      	bne.n	8004bfe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004baa:	461a      	mov	r2, r3
 8004bac:	2340      	movs	r3, #64	@ 0x40
 8004bae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004bb0:	78fa      	ldrb	r2, [r7, #3]
 8004bb2:	6879      	ldr	r1, [r7, #4]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	011b      	lsls	r3, r3, #4
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	334d      	adds	r3, #77	@ 0x4d
 8004bc0:	2205      	movs	r2, #5
 8004bc2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004bc4:	78fa      	ldrb	r2, [r7, #3]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	440b      	add	r3, r1
 8004bd2:	331a      	adds	r3, #26
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004bda:	78fa      	ldrb	r2, [r7, #3]
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	3344      	adds	r3, #68	@ 0x44
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f007 fa3d 	bl	800c076 <USB_HC_Halt>
 8004bfc:	e0b3      	b.n	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f006 fc9d 	bl	800b546 <USB_ReadChInterrupts>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	f040 80a7 	bne.w	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	3326      	adds	r3, #38	@ 0x26
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d11b      	bne.n	8004c66 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3344      	adds	r3, #68	@ 0x44
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	334d      	adds	r3, #77	@ 0x4d
 8004c52:	2204      	movs	r2, #4
 8004c54:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f007 fa09 	bl	800c076 <USB_HC_Halt>
 8004c64:	e03f      	b.n	8004ce6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	3326      	adds	r3, #38	@ 0x26
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3326      	adds	r3, #38	@ 0x26
 8004c8c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d129      	bne.n	8004ce6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3344      	adds	r3, #68	@ 0x44
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	799b      	ldrb	r3, [r3, #6]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HCD_HC_IN_IRQHandler+0xc2a>
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	011b      	lsls	r3, r3, #4
 8004cb6:	1a9b      	subs	r3, r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	440b      	add	r3, r1
 8004cbc:	331b      	adds	r3, #27
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d110      	bne.n	8004ce6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004cc4:	78fa      	ldrb	r2, [r7, #3]
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	334d      	adds	r3, #77	@ 0x4d
 8004cd4:	2204      	movs	r2, #4
 8004cd6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	78fa      	ldrb	r2, [r7, #3]
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f007 f9c8 	bl	800c076 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	331b      	adds	r3, #27
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d129      	bne.n	8004d50 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	331b      	adds	r3, #27
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	0151      	lsls	r1, r2, #5
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	440a      	add	r2, r1
 8004d26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	78fa      	ldrb	r2, [r7, #3]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d4a:	f043 0320 	orr.w	r3, r3, #32
 8004d4e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2310      	movs	r3, #16
 8004d60:	6093      	str	r3, [r2, #8]
 8004d62:	e000      	b.n	8004d66 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004d64:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	4611      	mov	r1, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f006 fbdb 	bl	800b546 <USB_ReadChInterrupts>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d11b      	bne.n	8004dd2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004da6:	461a      	mov	r2, r3
 8004da8:	2304      	movs	r3, #4
 8004daa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	334d      	adds	r3, #77	@ 0x4d
 8004dbc:	2207      	movs	r2, #7
 8004dbe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f007 f954 	bl	800c076 <USB_HC_Halt>
 8004dce:	f000 bc89 	b.w	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	78fa      	ldrb	r2, [r7, #3]
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f006 fbb3 	bl	800b546 <USB_ReadChInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	f040 8082 	bne.w	8004ef0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2320      	movs	r3, #32
 8004dfc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	3319      	adds	r3, #25
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d124      	bne.n	8004e5e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004e14:	78fa      	ldrb	r2, [r7, #3]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	011b      	lsls	r3, r3, #4
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	3319      	adds	r3, #25
 8004e24:	2200      	movs	r2, #0
 8004e26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	334c      	adds	r3, #76	@ 0x4c
 8004e38:	2202      	movs	r2, #2
 8004e3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004e3c:	78fa      	ldrb	r2, [r7, #3]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	334d      	adds	r3, #77	@ 0x4d
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	4611      	mov	r1, r2
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f007 f90c 	bl	800c076 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	331a      	adds	r3, #26
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	f040 8437 	bne.w	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	331b      	adds	r3, #27
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f040 842b 	bne.w	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004e8e:	78fa      	ldrb	r2, [r7, #3]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3326      	adds	r3, #38	@ 0x26
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d009      	beq.n	8004eb8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004ea4:	78fa      	ldrb	r2, [r7, #3]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	331b      	adds	r3, #27
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004eb8:	78fa      	ldrb	r2, [r7, #3]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	1a9b      	subs	r3, r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	334d      	adds	r3, #77	@ 0x4d
 8004ec8:	2203      	movs	r2, #3
 8004eca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f007 f8ce 	bl	800c076 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004eda:	78fa      	ldrb	r2, [r7, #3]
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	3344      	adds	r3, #68	@ 0x44
 8004eea:	2200      	movs	r2, #0
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	e3f9      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f006 fb24 	bl	800b546 <USB_ReadChInterrupts>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f08:	d111      	bne.n	8004f2e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f16:	461a      	mov	r2, r3
 8004f18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	78fa      	ldrb	r2, [r7, #3]
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f007 f8a5 	bl	800c076 <USB_HC_Halt>
 8004f2c:	e3da      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	78fa      	ldrb	r2, [r7, #3]
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f006 fb05 	bl	800b546 <USB_ReadChInterrupts>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d168      	bne.n	8005018 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f46:	78fa      	ldrb	r2, [r7, #3]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3344      	adds	r3, #68	@ 0x44
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f006 faef 	bl	800b546 <USB_ReadChInterrupts>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6e:	2b40      	cmp	r3, #64	@ 0x40
 8004f70:	d112      	bne.n	8004f98 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3319      	adds	r3, #25
 8004f82:	2201      	movs	r2, #1
 8004f84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f92:	461a      	mov	r2, r3
 8004f94:	2340      	movs	r3, #64	@ 0x40
 8004f96:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004f98:	78fa      	ldrb	r2, [r7, #3]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	1a9b      	subs	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	331b      	adds	r3, #27
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d019      	beq.n	8004fe2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004fae:	78fa      	ldrb	r2, [r7, #3]
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	1a9b      	subs	r3, r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	440b      	add	r3, r1
 8004fbc:	331b      	adds	r3, #27
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	0151      	lsls	r1, r2, #5
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	440a      	add	r2, r1
 8004fd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fe0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fee:	461a      	mov	r2, r3
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	440b      	add	r3, r1
 8005002:	334d      	adds	r3, #77	@ 0x4d
 8005004:	2201      	movs	r2, #1
 8005006:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f007 f830 	bl	800c076 <USB_HC_Halt>
 8005016:	e365      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	4611      	mov	r1, r2
 8005020:	4618      	mov	r0, r3
 8005022:	f006 fa90 	bl	800b546 <USB_ReadChInterrupts>
 8005026:	4603      	mov	r3, r0
 8005028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800502c:	2b40      	cmp	r3, #64	@ 0x40
 800502e:	d139      	bne.n	80050a4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	334d      	adds	r3, #77	@ 0x4d
 8005040:	2205      	movs	r2, #5
 8005042:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	331a      	adds	r3, #26
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	3319      	adds	r3, #25
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	3344      	adds	r3, #68	@ 0x44
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f006 fff3 	bl	800c076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800509c:	461a      	mov	r2, r3
 800509e:	2340      	movs	r3, #64	@ 0x40
 80050a0:	6093      	str	r3, [r2, #8]
 80050a2:	e31f      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	78fa      	ldrb	r2, [r7, #3]
 80050aa:	4611      	mov	r1, r2
 80050ac:	4618      	mov	r0, r3
 80050ae:	f006 fa4a 	bl	800b546 <USB_ReadChInterrupts>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d11a      	bne.n	80050f2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c8:	461a      	mov	r2, r3
 80050ca:	2308      	movs	r3, #8
 80050cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	334d      	adds	r3, #77	@ 0x4d
 80050de:	2206      	movs	r2, #6
 80050e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	78fa      	ldrb	r2, [r7, #3]
 80050e8:	4611      	mov	r1, r2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f006 ffc3 	bl	800c076 <USB_HC_Halt>
 80050f0:	e2f8      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	78fa      	ldrb	r2, [r7, #3]
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f006 fa23 	bl	800b546 <USB_ReadChInterrupts>
 8005100:	4603      	mov	r3, r0
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	2b10      	cmp	r3, #16
 8005108:	d144      	bne.n	8005194 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800510a:	78fa      	ldrb	r2, [r7, #3]
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	4613      	mov	r3, r2
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	1a9b      	subs	r3, r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	440b      	add	r3, r1
 8005118:	3344      	adds	r3, #68	@ 0x44
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800511e:	78fa      	ldrb	r2, [r7, #3]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	334d      	adds	r3, #77	@ 0x4d
 800512e:	2204      	movs	r2, #4
 8005130:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005132:	78fa      	ldrb	r2, [r7, #3]
 8005134:	6879      	ldr	r1, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	3319      	adds	r3, #25
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d114      	bne.n	8005172 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	3318      	adds	r3, #24
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	3319      	adds	r3, #25
 800516e:	2201      	movs	r2, #1
 8005170:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f006 ff7b 	bl	800c076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800518c:	461a      	mov	r2, r3
 800518e:	2310      	movs	r3, #16
 8005190:	6093      	str	r3, [r2, #8]
 8005192:	e2a7      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	4611      	mov	r1, r2
 800519c:	4618      	mov	r0, r3
 800519e:	f006 f9d2 	bl	800b546 <USB_ReadChInterrupts>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a8:	2b80      	cmp	r3, #128	@ 0x80
 80051aa:	f040 8083 	bne.w	80052b4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	799b      	ldrb	r3, [r3, #6]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d111      	bne.n	80051da <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	1a9b      	subs	r3, r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	334d      	adds	r3, #77	@ 0x4d
 80051c6:	2207      	movs	r2, #7
 80051c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	4611      	mov	r1, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f006 ff4f 	bl	800c076 <USB_HC_Halt>
 80051d8:	e062      	b.n	80052a0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80051da:	78fa      	ldrb	r2, [r7, #3]
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	3344      	adds	r3, #68	@ 0x44
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	1c59      	adds	r1, r3, #1
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4403      	add	r3, r0
 80051fa:	3344      	adds	r3, #68	@ 0x44
 80051fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	3344      	adds	r3, #68	@ 0x44
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d922      	bls.n	800525a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	3344      	adds	r3, #68	@ 0x44
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	1a9b      	subs	r3, r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	334c      	adds	r3, #76	@ 0x4c
 8005238:	2204      	movs	r2, #4
 800523a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800523c:	78fa      	ldrb	r2, [r7, #3]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	334c      	adds	r3, #76	@ 0x4c
 800524c:	781a      	ldrb	r2, [r3, #0]
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	4619      	mov	r1, r3
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f009 fc62 	bl	800eb1c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005258:	e022      	b.n	80052a0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	1a9b      	subs	r3, r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	334c      	adds	r3, #76	@ 0x4c
 800526a:	2202      	movs	r2, #2
 800526c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4413      	add	r3, r2
 8005276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005284:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800528c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4413      	add	r3, r2
 8005296:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800529a:	461a      	mov	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ac:	461a      	mov	r2, r3
 80052ae:	2380      	movs	r3, #128	@ 0x80
 80052b0:	6093      	str	r3, [r2, #8]
 80052b2:	e217      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	78fa      	ldrb	r2, [r7, #3]
 80052ba:	4611      	mov	r1, r2
 80052bc:	4618      	mov	r0, r3
 80052be:	f006 f942 	bl	800b546 <USB_ReadChInterrupts>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052cc:	d11b      	bne.n	8005306 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	334d      	adds	r3, #77	@ 0x4d
 80052de:	2209      	movs	r2, #9
 80052e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	4611      	mov	r1, r2
 80052ea:	4618      	mov	r0, r3
 80052ec:	f006 fec3 	bl	800c076 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052fc:	461a      	mov	r2, r3
 80052fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005302:	6093      	str	r3, [r2, #8]
 8005304:	e1ee      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	4611      	mov	r1, r2
 800530e:	4618      	mov	r0, r3
 8005310:	f006 f919 	bl	800b546 <USB_ReadChInterrupts>
 8005314:	4603      	mov	r3, r0
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	f040 81df 	bne.w	80056de <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800532c:	461a      	mov	r2, r3
 800532e:	2302      	movs	r3, #2
 8005330:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	6879      	ldr	r1, [r7, #4]
 8005336:	4613      	mov	r3, r2
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	334d      	adds	r3, #77	@ 0x4d
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b01      	cmp	r3, #1
 8005346:	f040 8093 	bne.w	8005470 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800534a:	78fa      	ldrb	r2, [r7, #3]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	334d      	adds	r3, #77	@ 0x4d
 800535a:	2202      	movs	r2, #2
 800535c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	334c      	adds	r3, #76	@ 0x4c
 800536e:	2201      	movs	r2, #1
 8005370:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3326      	adds	r3, #38	@ 0x26
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d00b      	beq.n	80053a0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	3326      	adds	r3, #38	@ 0x26
 8005398:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800539a:	2b03      	cmp	r3, #3
 800539c:	f040 8190 	bne.w	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	799b      	ldrb	r3, [r3, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d115      	bne.n	80053d4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80053a8:	78fa      	ldrb	r2, [r7, #3]
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	333d      	adds	r3, #61	@ 0x3d
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	78fa      	ldrb	r2, [r7, #3]
 80053bc:	f083 0301 	eor.w	r3, r3, #1
 80053c0:	b2d8      	uxtb	r0, r3
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	333d      	adds	r3, #61	@ 0x3d
 80053d0:	4602      	mov	r2, r0
 80053d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	799b      	ldrb	r3, [r3, #6]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	f040 8171 	bne.w	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
 80053de:	78fa      	ldrb	r2, [r7, #3]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	011b      	lsls	r3, r3, #4
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	3334      	adds	r3, #52	@ 0x34
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8165 	beq.w	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80053f6:	78fa      	ldrb	r2, [r7, #3]
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	3334      	adds	r3, #52	@ 0x34
 8005406:	6819      	ldr	r1, [r3, #0]
 8005408:	78fa      	ldrb	r2, [r7, #3]
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4403      	add	r3, r0
 8005416:	3328      	adds	r3, #40	@ 0x28
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	440b      	add	r3, r1
 800541c:	1e59      	subs	r1, r3, #1
 800541e:	78fa      	ldrb	r2, [r7, #3]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4403      	add	r3, r0
 800542c:	3328      	adds	r3, #40	@ 0x28
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	fbb1 f3f3 	udiv	r3, r1, r3
 8005434:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 813f 	beq.w	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005442:	78fa      	ldrb	r2, [r7, #3]
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	333d      	adds	r3, #61	@ 0x3d
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	78fa      	ldrb	r2, [r7, #3]
 8005456:	f083 0301 	eor.w	r3, r3, #1
 800545a:	b2d8      	uxtb	r0, r3
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	333d      	adds	r3, #61	@ 0x3d
 800546a:	4602      	mov	r2, r0
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e127      	b.n	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4613      	mov	r3, r2
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	334d      	adds	r3, #77	@ 0x4d
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d120      	bne.n	80054c8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005486:	78fa      	ldrb	r2, [r7, #3]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	334d      	adds	r3, #77	@ 0x4d
 8005496:	2202      	movs	r2, #2
 8005498:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800549a:	78fa      	ldrb	r2, [r7, #3]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	1a9b      	subs	r3, r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	331b      	adds	r3, #27
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	f040 8107 	bne.w	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	334c      	adds	r3, #76	@ 0x4c
 80054c2:	2202      	movs	r2, #2
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	e0fb      	b.n	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	334d      	adds	r3, #77	@ 0x4d
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d13a      	bne.n	8005554 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054de:	78fa      	ldrb	r2, [r7, #3]
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	334d      	adds	r3, #77	@ 0x4d
 80054ee:	2202      	movs	r2, #2
 80054f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	334c      	adds	r3, #76	@ 0x4c
 8005502:	2202      	movs	r2, #2
 8005504:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	331b      	adds	r3, #27
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	f040 80d1 	bne.w	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	331b      	adds	r3, #27
 800552e:	2200      	movs	r2, #0
 8005530:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	4413      	add	r3, r2
 800553a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	440a      	add	r2, r1
 8005548:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800554c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005550:	6053      	str	r3, [r2, #4]
 8005552:	e0b5      	b.n	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005554:	78fa      	ldrb	r2, [r7, #3]
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	334d      	adds	r3, #77	@ 0x4d
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b05      	cmp	r3, #5
 8005568:	d114      	bne.n	8005594 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	1a9b      	subs	r3, r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	334d      	adds	r3, #77	@ 0x4d
 800557a:	2202      	movs	r2, #2
 800557c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	334c      	adds	r3, #76	@ 0x4c
 800558e:	2202      	movs	r2, #2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	e095      	b.n	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	334d      	adds	r3, #77	@ 0x4d
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b06      	cmp	r3, #6
 80055a8:	d114      	bne.n	80055d4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	334d      	adds	r3, #77	@ 0x4d
 80055ba:	2202      	movs	r2, #2
 80055bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	334c      	adds	r3, #76	@ 0x4c
 80055ce:	2205      	movs	r2, #5
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e075      	b.n	80056c0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80055d4:	78fa      	ldrb	r2, [r7, #3]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	334d      	adds	r3, #77	@ 0x4d
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b07      	cmp	r3, #7
 80055e8:	d00a      	beq.n	8005600 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80055ea:	78fa      	ldrb	r2, [r7, #3]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	334d      	adds	r3, #77	@ 0x4d
 80055fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80055fc:	2b09      	cmp	r3, #9
 80055fe:	d170      	bne.n	80056e2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	334d      	adds	r3, #77	@ 0x4d
 8005610:	2202      	movs	r2, #2
 8005612:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	3344      	adds	r3, #68	@ 0x44
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	4613      	mov	r3, r2
 800562c:	011b      	lsls	r3, r3, #4
 800562e:	1a9b      	subs	r3, r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4403      	add	r3, r0
 8005634:	3344      	adds	r3, #68	@ 0x44
 8005636:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3344      	adds	r3, #68	@ 0x44
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b02      	cmp	r3, #2
 800564c:	d914      	bls.n	8005678 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800564e:	78fa      	ldrb	r2, [r7, #3]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	011b      	lsls	r3, r3, #4
 8005656:	1a9b      	subs	r3, r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	3344      	adds	r3, #68	@ 0x44
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	334c      	adds	r3, #76	@ 0x4c
 8005672:	2204      	movs	r2, #4
 8005674:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005676:	e022      	b.n	80056be <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005678:	78fa      	ldrb	r2, [r7, #3]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	334c      	adds	r3, #76	@ 0x4c
 8005688:	2202      	movs	r2, #2
 800568a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056a2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056aa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b8:	461a      	mov	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056c0:	78fa      	ldrb	r2, [r7, #3]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	4613      	mov	r3, r2
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	334c      	adds	r3, #76	@ 0x4c
 80056d0:	781a      	ldrb	r2, [r3, #0]
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	4619      	mov	r1, r3
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f009 fa20 	bl	800eb1c <HAL_HCD_HC_NotifyURBChange_Callback>
 80056dc:	e002      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80056e2:	bf00      	nop
  }
}
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b08a      	sub	sp, #40	@ 0x28
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	0c5b      	lsrs	r3, r3, #17
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	091b      	lsrs	r3, r3, #4
 800571a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800571e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d004      	beq.n	8005730 <HCD_RXQLVL_IRQHandler+0x46>
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b05      	cmp	r3, #5
 800572a:	f000 80b6 	beq.w	800589a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800572e:	e0b7      	b.n	80058a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80b3 	beq.w	800589e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	4613      	mov	r3, r2
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	332c      	adds	r3, #44	@ 0x2c
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80a7 	beq.w	800589e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4613      	mov	r3, r2
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3338      	adds	r3, #56	@ 0x38
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	18d1      	adds	r1, r2, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4613      	mov	r3, r2
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4403      	add	r3, r0
 8005774:	3334      	adds	r3, #52	@ 0x34
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4299      	cmp	r1, r3
 800577a:	f200 8083 	bhi.w	8005884 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4613      	mov	r3, r2
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	440b      	add	r3, r1
 8005790:	332c      	adds	r3, #44	@ 0x2c
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	b292      	uxth	r2, r2
 8005798:	4619      	mov	r1, r3
 800579a:	f005 fe69 	bl	800b470 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4613      	mov	r3, r2
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	332c      	adds	r3, #44	@ 0x2c
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	18d1      	adds	r1, r2, r3
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	4613      	mov	r3, r2
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	1a9b      	subs	r3, r3, r2
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	4403      	add	r3, r0
 80057c2:	332c      	adds	r3, #44	@ 0x2c
 80057c4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	4613      	mov	r3, r2
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3338      	adds	r3, #56	@ 0x38
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	18d1      	adds	r1, r2, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	4613      	mov	r3, r2
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	1a9b      	subs	r3, r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4403      	add	r3, r0
 80057ea:	3338      	adds	r3, #56	@ 0x38
 80057ec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	0cdb      	lsrs	r3, r3, #19
 80057fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005802:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4613      	mov	r3, r2
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	1a9b      	subs	r3, r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	3328      	adds	r3, #40	@ 0x28
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4293      	cmp	r3, r2
 800581c:	d13f      	bne.n	800589e <HCD_RXQLVL_IRQHandler+0x1b4>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d03c      	beq.n	800589e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	4413      	add	r3, r2
 800582c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800583a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005842:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4613      	mov	r3, r2
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	333c      	adds	r3, #60	@ 0x3c
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f083 0301 	eor.w	r3, r3, #1
 800586c:	b2d8      	uxtb	r0, r3
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4613      	mov	r3, r2
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	440b      	add	r3, r1
 800587c:	333c      	adds	r3, #60	@ 0x3c
 800587e:	4602      	mov	r2, r0
 8005880:	701a      	strb	r2, [r3, #0]
      break;
 8005882:	e00c      	b.n	800589e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4613      	mov	r3, r2
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	334c      	adds	r3, #76	@ 0x4c
 8005894:	2204      	movs	r2, #4
 8005896:	701a      	strb	r2, [r3, #0]
      break;
 8005898:	e001      	b.n	800589e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800589a:	bf00      	nop
 800589c:	e000      	b.n	80058a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800589e:	bf00      	nop
  }
}
 80058a0:	bf00      	nop
 80058a2:	3728      	adds	r7, #40	@ 0x28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80058d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d10b      	bne.n	80058f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d102      	bne.n	80058f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f009 f8fa 	bl	800eae4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f043 0302 	orr.w	r3, r3, #2
 80058f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d132      	bne.n	8005968 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f043 0308 	orr.w	r3, r3, #8
 8005908:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b04      	cmp	r3, #4
 8005912:	d126      	bne.n	8005962 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	7a5b      	ldrb	r3, [r3, #9]
 8005918:	2b02      	cmp	r3, #2
 800591a:	d113      	bne.n	8005944 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005922:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005926:	d106      	bne.n	8005936 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2102      	movs	r1, #2
 800592e:	4618      	mov	r0, r3
 8005930:	f005 ff22 	bl	800b778 <USB_InitFSLSPClkSel>
 8005934:	e011      	b.n	800595a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2101      	movs	r1, #1
 800593c:	4618      	mov	r0, r3
 800593e:	f005 ff1b 	bl	800b778 <USB_InitFSLSPClkSel>
 8005942:	e00a      	b.n	800595a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	79db      	ldrb	r3, [r3, #7]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d106      	bne.n	800595a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005952:	461a      	mov	r2, r3
 8005954:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005958:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f009 f8ec 	bl	800eb38 <HAL_HCD_PortEnabled_Callback>
 8005960:	e002      	b.n	8005968 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f009 f8f6 	bl	800eb54 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b20      	cmp	r3, #32
 8005970:	d103      	bne.n	800597a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f043 0320 	orr.w	r3, r3, #32
 8005978:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005980:	461a      	mov	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	6013      	str	r3, [r2, #0]
}
 8005986:	bf00      	nop
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e12b      	b.n	8005bfa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fb fe22 	bl	8001600 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2224      	movs	r2, #36	@ 0x24
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0201 	bic.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80059e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80059f4:	f000 ff82 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 80059f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	4a81      	ldr	r2, [pc, #516]	@ (8005c04 <HAL_I2C_Init+0x274>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d807      	bhi.n	8005a14 <HAL_I2C_Init+0x84>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a80      	ldr	r2, [pc, #512]	@ (8005c08 <HAL_I2C_Init+0x278>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	bf94      	ite	ls
 8005a0c:	2301      	movls	r3, #1
 8005a0e:	2300      	movhi	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e006      	b.n	8005a22 <HAL_I2C_Init+0x92>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a7d      	ldr	r2, [pc, #500]	@ (8005c0c <HAL_I2C_Init+0x27c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	bf94      	ite	ls
 8005a1c:	2301      	movls	r3, #1
 8005a1e:	2300      	movhi	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0e7      	b.n	8005bfa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a78      	ldr	r2, [pc, #480]	@ (8005c10 <HAL_I2C_Init+0x280>)
 8005a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a32:	0c9b      	lsrs	r3, r3, #18
 8005a34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	4a6a      	ldr	r2, [pc, #424]	@ (8005c04 <HAL_I2C_Init+0x274>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d802      	bhi.n	8005a64 <HAL_I2C_Init+0xd4>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	3301      	adds	r3, #1
 8005a62:	e009      	b.n	8005a78 <HAL_I2C_Init+0xe8>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	4a69      	ldr	r2, [pc, #420]	@ (8005c14 <HAL_I2C_Init+0x284>)
 8005a70:	fba2 2303 	umull	r2, r3, r2, r3
 8005a74:	099b      	lsrs	r3, r3, #6
 8005a76:	3301      	adds	r3, #1
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6812      	ldr	r2, [r2, #0]
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005a8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	495c      	ldr	r1, [pc, #368]	@ (8005c04 <HAL_I2C_Init+0x274>)
 8005a94:	428b      	cmp	r3, r1
 8005a96:	d819      	bhi.n	8005acc <HAL_I2C_Init+0x13c>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	1e59      	subs	r1, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aa6:	1c59      	adds	r1, r3, #1
 8005aa8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005aac:	400b      	ands	r3, r1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00a      	beq.n	8005ac8 <HAL_I2C_Init+0x138>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1e59      	subs	r1, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ac6:	e051      	b.n	8005b6c <HAL_I2C_Init+0x1dc>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	e04f      	b.n	8005b6c <HAL_I2C_Init+0x1dc>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d111      	bne.n	8005af8 <HAL_I2C_Init+0x168>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	1e58      	subs	r0, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6859      	ldr	r1, [r3, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	440b      	add	r3, r1
 8005ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	e012      	b.n	8005b1e <HAL_I2C_Init+0x18e>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	1e58      	subs	r0, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6859      	ldr	r1, [r3, #4]
 8005b00:	460b      	mov	r3, r1
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	440b      	add	r3, r1
 8005b06:	0099      	lsls	r1, r3, #2
 8005b08:	440b      	add	r3, r1
 8005b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	bf0c      	ite	eq
 8005b18:	2301      	moveq	r3, #1
 8005b1a:	2300      	movne	r3, #0
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_I2C_Init+0x196>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e022      	b.n	8005b6c <HAL_I2C_Init+0x1dc>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10e      	bne.n	8005b4c <HAL_I2C_Init+0x1bc>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	1e58      	subs	r0, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6859      	ldr	r1, [r3, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	440b      	add	r3, r1
 8005b3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b40:	3301      	adds	r3, #1
 8005b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b4a:	e00f      	b.n	8005b6c <HAL_I2C_Init+0x1dc>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1e58      	subs	r0, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6859      	ldr	r1, [r3, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	0099      	lsls	r1, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b62:	3301      	adds	r3, #1
 8005b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	6809      	ldr	r1, [r1, #0]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69da      	ldr	r2, [r3, #28]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005b9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6911      	ldr	r1, [r2, #16]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68d2      	ldr	r2, [r2, #12]
 8005ba6:	4311      	orrs	r1, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	430b      	orrs	r3, r1
 8005bae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	000186a0 	.word	0x000186a0
 8005c08:	001e847f 	.word	0x001e847f
 8005c0c:	003d08ff 	.word	0x003d08ff
 8005c10:	431bde83 	.word	0x431bde83
 8005c14:	10624dd3 	.word	0x10624dd3

08005c18 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e0bf      	b.n	8005daa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fb fd5c 	bl	80016fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005c5a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6999      	ldr	r1, [r3, #24]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c70:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6899      	ldr	r1, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005db4 <HAL_LTDC_Init+0x19c>)
 8005c8c:	400b      	ands	r3, r1
 8005c8e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	041b      	lsls	r3, r3, #16
 8005c96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6899      	ldr	r1, [r3, #8]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68d9      	ldr	r1, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8005db4 <HAL_LTDC_Init+0x19c>)
 8005cba:	400b      	ands	r3, r1
 8005cbc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68d9      	ldr	r1, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1a      	ldr	r2, [r3, #32]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6919      	ldr	r1, [r3, #16]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b33      	ldr	r3, [pc, #204]	@ (8005db4 <HAL_LTDC_Init+0x19c>)
 8005ce8:	400b      	ands	r3, r1
 8005cea:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6919      	ldr	r1, [r3, #16]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	431a      	orrs	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6959      	ldr	r1, [r3, #20]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <HAL_LTDC_Init+0x19c>)
 8005d16:	400b      	ands	r3, r1
 8005d18:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6959      	ldr	r1, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d3e:	021b      	lsls	r3, r3, #8
 8005d40:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0206 	orr.w	r2, r2, #6
 8005d86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	f000f800 	.word	0xf000f800

08005db8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dce:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f003 0304 	and.w	r3, r3, #4
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d023      	beq.n	8005e22 <HAL_LTDC_IRQHandler+0x6a>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01e      	beq.n	8005e22 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0204 	bic.w	r2, r2, #4
 8005df2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2204      	movs	r2, #4
 8005dfa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e02:	f043 0201 	orr.w	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2204      	movs	r2, #4
 8005e10:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f86f 	bl	8005f00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d023      	beq.n	8005e74 <HAL_LTDC_IRQHandler+0xbc>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01e      	beq.n	8005e74 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0202 	bic.w	r2, r2, #2
 8005e44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e54:	f043 0202 	orr.w	r2, r3, #2
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2204      	movs	r2, #4
 8005e62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f846 	bl	8005f00 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01b      	beq.n	8005eb6 <HAL_LTDC_IRQHandler+0xfe>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d016      	beq.n	8005eb6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0201 	bic.w	r2, r2, #1
 8005e96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f82f 	bl	8005f14 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <HAL_LTDC_IRQHandler+0x140>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d016      	beq.n	8005ef8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0208 	bic.w	r2, r2, #8
 8005ed8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2208      	movs	r2, #8
 8005ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f818 	bl	8005f28 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f3c:	b5b0      	push	{r4, r5, r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d101      	bne.n	8005f56 <HAL_LTDC_ConfigLayer+0x1a>
 8005f52:	2302      	movs	r3, #2
 8005f54:	e02c      	b.n	8005fb0 <HAL_LTDC_ConfigLayer+0x74>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2202      	movs	r2, #2
 8005f62:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2134      	movs	r1, #52	@ 0x34
 8005f6c:	fb01 f303 	mul.w	r3, r1, r3
 8005f70:	4413      	add	r3, r2
 8005f72:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	4614      	mov	r4, r2
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68b9      	ldr	r1, [r7, #8]
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f811 	bl	8005fb8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bdb0      	pop	{r4, r5, r7, pc}

08005fb8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b089      	sub	sp, #36	@ 0x24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	0c1b      	lsrs	r3, r3, #16
 8005fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd4:	4413      	add	r3, r2
 8005fd6:	041b      	lsls	r3, r3, #16
 8005fd8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	01db      	lsls	r3, r3, #7
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3384      	adds	r3, #132	@ 0x84
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	4611      	mov	r1, r2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	01d2      	lsls	r2, r2, #7
 8005ff4:	440a      	add	r2, r1
 8005ff6:	3284      	adds	r2, #132	@ 0x84
 8005ff8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005ffc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800600e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006010:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	01db      	lsls	r3, r3, #7
 800601c:	440b      	add	r3, r1
 800601e:	3384      	adds	r3, #132	@ 0x84
 8006020:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006026:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006036:	4413      	add	r3, r2
 8006038:	041b      	lsls	r3, r3, #16
 800603a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	01db      	lsls	r3, r3, #7
 8006046:	4413      	add	r3, r2
 8006048:	3384      	adds	r3, #132	@ 0x84
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	6812      	ldr	r2, [r2, #0]
 8006050:	4611      	mov	r1, r2
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	01d2      	lsls	r2, r2, #7
 8006056:	440a      	add	r2, r1
 8006058:	3284      	adds	r2, #132	@ 0x84
 800605a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800605e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800606e:	4413      	add	r3, r2
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4619      	mov	r1, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	01db      	lsls	r3, r3, #7
 800607c:	440b      	add	r3, r1
 800607e:	3384      	adds	r3, #132	@ 0x84
 8006080:	4619      	mov	r1, r3
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4313      	orrs	r3, r2
 8006086:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	01db      	lsls	r3, r3, #7
 8006092:	4413      	add	r3, r2
 8006094:	3384      	adds	r3, #132	@ 0x84
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	4611      	mov	r1, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	01d2      	lsls	r2, r2, #7
 80060a2:	440a      	add	r2, r1
 80060a4:	3284      	adds	r2, #132	@ 0x84
 80060a6:	f023 0307 	bic.w	r3, r3, #7
 80060aa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	01db      	lsls	r3, r3, #7
 80060b6:	4413      	add	r3, r2
 80060b8:	3384      	adds	r3, #132	@ 0x84
 80060ba:	461a      	mov	r2, r3
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	061b      	lsls	r3, r3, #24
 80060dc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	01db      	lsls	r3, r3, #7
 80060e8:	4413      	add	r3, r2
 80060ea:	3384      	adds	r3, #132	@ 0x84
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	01db      	lsls	r3, r3, #7
 80060f8:	4413      	add	r3, r2
 80060fa:	3384      	adds	r3, #132	@ 0x84
 80060fc:	461a      	mov	r2, r3
 80060fe:	2300      	movs	r3, #0
 8006100:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006108:	461a      	mov	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	431a      	orrs	r2, r3
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	431a      	orrs	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4619      	mov	r1, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	01db      	lsls	r3, r3, #7
 800611c:	440b      	add	r3, r1
 800611e:	3384      	adds	r3, #132	@ 0x84
 8006120:	4619      	mov	r1, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	01db      	lsls	r3, r3, #7
 8006132:	4413      	add	r3, r2
 8006134:	3384      	adds	r3, #132	@ 0x84
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	6812      	ldr	r2, [r2, #0]
 800613c:	4611      	mov	r1, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	01d2      	lsls	r2, r2, #7
 8006142:	440a      	add	r2, r1
 8006144:	3284      	adds	r2, #132	@ 0x84
 8006146:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800614a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	01db      	lsls	r3, r3, #7
 8006156:	4413      	add	r3, r2
 8006158:	3384      	adds	r3, #132	@ 0x84
 800615a:	461a      	mov	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	01db      	lsls	r3, r3, #7
 800616c:	4413      	add	r3, r2
 800616e:	3384      	adds	r3, #132	@ 0x84
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	6812      	ldr	r2, [r2, #0]
 8006176:	4611      	mov	r1, r2
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	01d2      	lsls	r2, r2, #7
 800617c:	440a      	add	r2, r1
 800617e:	3284      	adds	r2, #132	@ 0x84
 8006180:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006184:	f023 0307 	bic.w	r3, r3, #7
 8006188:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	68f9      	ldr	r1, [r7, #12]
 8006194:	6809      	ldr	r1, [r1, #0]
 8006196:	4608      	mov	r0, r1
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	01c9      	lsls	r1, r1, #7
 800619c:	4401      	add	r1, r0
 800619e:	3184      	adds	r1, #132	@ 0x84
 80061a0:	4313      	orrs	r3, r2
 80061a2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	01db      	lsls	r3, r3, #7
 80061ae:	4413      	add	r3, r2
 80061b0:	3384      	adds	r3, #132	@ 0x84
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	01db      	lsls	r3, r3, #7
 80061be:	4413      	add	r3, r2
 80061c0:	3384      	adds	r3, #132	@ 0x84
 80061c2:	461a      	mov	r2, r3
 80061c4:	2300      	movs	r3, #0
 80061c6:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	01db      	lsls	r3, r3, #7
 80061d2:	4413      	add	r3, r2
 80061d4:	3384      	adds	r3, #132	@ 0x84
 80061d6:	461a      	mov	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80061e6:	2304      	movs	r3, #4
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	e01b      	b.n	8006224 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d102      	bne.n	80061fa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80061f4:	2303      	movs	r3, #3
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	e014      	b.n	8006224 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d00b      	beq.n	800621a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006206:	2b02      	cmp	r3, #2
 8006208:	d007      	beq.n	800621a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800620e:	2b03      	cmp	r3, #3
 8006210:	d003      	beq.n	800621a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006216:	2b07      	cmp	r3, #7
 8006218:	d102      	bne.n	8006220 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800621a:	2302      	movs	r3, #2
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	e001      	b.n	8006224 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006220:	2301      	movs	r3, #1
 8006222:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	01db      	lsls	r3, r3, #7
 800622e:	4413      	add	r3, r2
 8006230:	3384      	adds	r3, #132	@ 0x84
 8006232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	4611      	mov	r1, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	01d2      	lsls	r2, r2, #7
 800623e:	440a      	add	r2, r1
 8006240:	3284      	adds	r2, #132	@ 0x84
 8006242:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006246:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	6859      	ldr	r1, [r3, #4]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	1acb      	subs	r3, r1, r3
 800625e:	69f9      	ldr	r1, [r7, #28]
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	6809      	ldr	r1, [r1, #0]
 800626a:	4608      	mov	r0, r1
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	01c9      	lsls	r1, r1, #7
 8006270:	4401      	add	r1, r0
 8006272:	3184      	adds	r1, #132	@ 0x84
 8006274:	4313      	orrs	r3, r2
 8006276:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	01db      	lsls	r3, r3, #7
 8006282:	4413      	add	r3, r2
 8006284:	3384      	adds	r3, #132	@ 0x84
 8006286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	4611      	mov	r1, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	01d2      	lsls	r2, r2, #7
 8006292:	440a      	add	r2, r1
 8006294:	3284      	adds	r2, #132	@ 0x84
 8006296:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800629a:	f023 0307 	bic.w	r3, r3, #7
 800629e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	01db      	lsls	r3, r3, #7
 80062aa:	4413      	add	r3, r2
 80062ac:	3384      	adds	r3, #132	@ 0x84
 80062ae:	461a      	mov	r2, r3
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	461a      	mov	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	01db      	lsls	r3, r3, #7
 80062c0:	4413      	add	r3, r2
 80062c2:	3384      	adds	r3, #132	@ 0x84
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	4611      	mov	r1, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	01d2      	lsls	r2, r2, #7
 80062d0:	440a      	add	r2, r1
 80062d2:	3284      	adds	r2, #132	@ 0x84
 80062d4:	f043 0301 	orr.w	r3, r3, #1
 80062d8:	6013      	str	r3, [r2, #0]
}
 80062da:	bf00      	nop
 80062dc:	3724      	adds	r7, #36	@ 0x24
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
	...

080062e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80062f2:	2300      	movs	r3, #0
 80062f4:	603b      	str	r3, [r7, #0]
 80062f6:	4b20      	ldr	r3, [pc, #128]	@ (8006378 <HAL_PWREx_EnableOverDrive+0x90>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006378 <HAL_PWREx_EnableOverDrive+0x90>)
 80062fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006300:	6413      	str	r3, [r2, #64]	@ 0x40
 8006302:	4b1d      	ldr	r3, [pc, #116]	@ (8006378 <HAL_PWREx_EnableOverDrive+0x90>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800630e:	4b1b      	ldr	r3, [pc, #108]	@ (800637c <HAL_PWREx_EnableOverDrive+0x94>)
 8006310:	2201      	movs	r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006314:	f7fb ff08 	bl	8002128 <HAL_GetTick>
 8006318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800631a:	e009      	b.n	8006330 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800631c:	f7fb ff04 	bl	8002128 <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800632a:	d901      	bls.n	8006330 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e01f      	b.n	8006370 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006330:	4b13      	ldr	r3, [pc, #76]	@ (8006380 <HAL_PWREx_EnableOverDrive+0x98>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800633c:	d1ee      	bne.n	800631c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800633e:	4b11      	ldr	r3, [pc, #68]	@ (8006384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006340:	2201      	movs	r2, #1
 8006342:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006344:	f7fb fef0 	bl	8002128 <HAL_GetTick>
 8006348:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800634a:	e009      	b.n	8006360 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800634c:	f7fb feec 	bl	8002128 <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800635a:	d901      	bls.n	8006360 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e007      	b.n	8006370 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006360:	4b07      	ldr	r3, [pc, #28]	@ (8006380 <HAL_PWREx_EnableOverDrive+0x98>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006368:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800636c:	d1ee      	bne.n	800634c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40023800 	.word	0x40023800
 800637c:	420e0040 	.word	0x420e0040
 8006380:	40007000 	.word	0x40007000
 8006384:	420e0044 	.word	0x420e0044

08006388 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af02      	add	r7, sp, #8
 800638e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006390:	f7fb feca 	bl	8002128 <HAL_GetTick>
 8006394:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e069      	b.n	8006474 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10b      	bne.n	80063c4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7fb f9c9 	bl	800174c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80063ba:	f241 3188 	movw	r1, #5000	@ 0x1388
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f85e 	bl	8006480 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	021a      	lsls	r2, r3, #8
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	2120      	movs	r1, #32
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f856 	bl	800649c <QSPI_WaitFlagStateUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80063f4:	7afb      	ldrb	r3, [r7, #11]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d137      	bne.n	800646a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006404:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6852      	ldr	r2, [r2, #4]
 800640c:	0611      	lsls	r1, r2, #24
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68d2      	ldr	r2, [r2, #12]
 8006412:	4311      	orrs	r1, r2
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	69d2      	ldr	r2, [r2, #28]
 8006418:	4311      	orrs	r1, r2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6a12      	ldr	r2, [r2, #32]
 800641e:	4311      	orrs	r1, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	430b      	orrs	r3, r1
 8006426:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	4b13      	ldr	r3, [pc, #76]	@ (800647c <HAL_QSPI_Init+0xf4>)
 8006430:	4013      	ands	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6912      	ldr	r2, [r2, #16]
 8006436:	0411      	lsls	r1, r2, #16
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6952      	ldr	r2, [r2, #20]
 800643c:	4311      	orrs	r1, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6992      	ldr	r2, [r2, #24]
 8006442:	4311      	orrs	r1, r2
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	430b      	orrs	r3, r1
 800644a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8006472:	7afb      	ldrb	r3, [r7, #11]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	ffe0f8fe 	.word	0xffe0f8fe

08006480 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064ac:	e01a      	b.n	80064e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d016      	beq.n	80064e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b6:	f7fb fe37 	bl	8002128 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d302      	bcc.n	80064cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10b      	bne.n	80064e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2204      	movs	r2, #4
 80064d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d8:	f043 0201 	orr.w	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e00e      	b.n	8006502 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	bf14      	ite	ne
 80064f2:	2301      	movne	r3, #1
 80064f4:	2300      	moveq	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d1d6      	bne.n	80064ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0cc      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006520:	4b68      	ldr	r3, [pc, #416]	@ (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 030f 	and.w	r3, r3, #15
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d90c      	bls.n	8006548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652e:	4b65      	ldr	r3, [pc, #404]	@ (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006536:	4b63      	ldr	r3, [pc, #396]	@ (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d001      	beq.n	8006548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e0b8      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d020      	beq.n	8006596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006560:	4b59      	ldr	r3, [pc, #356]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4a58      	ldr	r2, [pc, #352]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006566:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800656a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	d005      	beq.n	8006584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006578:	4b53      	ldr	r3, [pc, #332]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	4a52      	ldr	r2, [pc, #328]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006584:	4b50      	ldr	r3, [pc, #320]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	494d      	ldr	r1, [pc, #308]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	4313      	orrs	r3, r2
 8006594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d044      	beq.n	800662c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d107      	bne.n	80065ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065aa:	4b47      	ldr	r3, [pc, #284]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d119      	bne.n	80065ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e07f      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d003      	beq.n	80065ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065c6:	2b03      	cmp	r3, #3
 80065c8:	d107      	bne.n	80065da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ca:	4b3f      	ldr	r3, [pc, #252]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d109      	bne.n	80065ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e06f      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065da:	4b3b      	ldr	r3, [pc, #236]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e067      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065ea:	4b37      	ldr	r3, [pc, #220]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 0203 	bic.w	r2, r3, #3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	4934      	ldr	r1, [pc, #208]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065fc:	f7fb fd94 	bl	8002128 <HAL_GetTick>
 8006600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006602:	e00a      	b.n	800661a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006604:	f7fb fd90 	bl	8002128 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006612:	4293      	cmp	r3, r2
 8006614:	d901      	bls.n	800661a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e04f      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800661a:	4b2b      	ldr	r3, [pc, #172]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 020c 	and.w	r2, r3, #12
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	429a      	cmp	r2, r3
 800662a:	d1eb      	bne.n	8006604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800662c:	4b25      	ldr	r3, [pc, #148]	@ (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d20c      	bcs.n	8006654 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800663a:	4b22      	ldr	r3, [pc, #136]	@ (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	b2d2      	uxtb	r2, r2
 8006640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006642:	4b20      	ldr	r3, [pc, #128]	@ (80066c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d001      	beq.n	8006654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e032      	b.n	80066ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006660:	4b19      	ldr	r3, [pc, #100]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	4916      	ldr	r1, [pc, #88]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800666e:	4313      	orrs	r3, r2
 8006670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800667e:	4b12      	ldr	r3, [pc, #72]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	490e      	ldr	r1, [pc, #56]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	4313      	orrs	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006692:	f000 f821 	bl	80066d8 <HAL_RCC_GetSysClockFreq>
 8006696:	4602      	mov	r2, r0
 8006698:	4b0b      	ldr	r3, [pc, #44]	@ (80066c8 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	490a      	ldr	r1, [pc, #40]	@ (80066cc <HAL_RCC_ClockConfig+0x1c0>)
 80066a4:	5ccb      	ldrb	r3, [r1, r3]
 80066a6:	fa22 f303 	lsr.w	r3, r2, r3
 80066aa:	4a09      	ldr	r2, [pc, #36]	@ (80066d0 <HAL_RCC_ClockConfig+0x1c4>)
 80066ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066ae:	4b09      	ldr	r3, [pc, #36]	@ (80066d4 <HAL_RCC_ClockConfig+0x1c8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fb fb44 	bl	8001d40 <HAL_InitTick>

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40023c00 	.word	0x40023c00
 80066c8:	40023800 	.word	0x40023800
 80066cc:	08010188 	.word	0x08010188
 80066d0:	20000000 	.word	0x20000000
 80066d4:	20000004 	.word	0x20000004

080066d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066dc:	b094      	sub	sp, #80	@ 0x50
 80066de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066e0:	2300      	movs	r3, #0
 80066e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066f0:	4b79      	ldr	r3, [pc, #484]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 030c 	and.w	r3, r3, #12
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d00d      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0x40>
 80066fc:	2b08      	cmp	r3, #8
 80066fe:	f200 80e1 	bhi.w	80068c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <HAL_RCC_GetSysClockFreq+0x34>
 8006706:	2b04      	cmp	r3, #4
 8006708:	d003      	beq.n	8006712 <HAL_RCC_GetSysClockFreq+0x3a>
 800670a:	e0db      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800670c:	4b73      	ldr	r3, [pc, #460]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x204>)
 800670e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006710:	e0db      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006712:	4b73      	ldr	r3, [pc, #460]	@ (80068e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006714:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006716:	e0d8      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006718:	4b6f      	ldr	r3, [pc, #444]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006720:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006722:	4b6d      	ldr	r3, [pc, #436]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d063      	beq.n	80067f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800672e:	4b6a      	ldr	r3, [pc, #424]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	099b      	lsrs	r3, r3, #6
 8006734:	2200      	movs	r2, #0
 8006736:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006738:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800673a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006740:	633b      	str	r3, [r7, #48]	@ 0x30
 8006742:	2300      	movs	r3, #0
 8006744:	637b      	str	r3, [r7, #52]	@ 0x34
 8006746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800674a:	4622      	mov	r2, r4
 800674c:	462b      	mov	r3, r5
 800674e:	f04f 0000 	mov.w	r0, #0
 8006752:	f04f 0100 	mov.w	r1, #0
 8006756:	0159      	lsls	r1, r3, #5
 8006758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800675c:	0150      	lsls	r0, r2, #5
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4621      	mov	r1, r4
 8006764:	1a51      	subs	r1, r2, r1
 8006766:	6139      	str	r1, [r7, #16]
 8006768:	4629      	mov	r1, r5
 800676a:	eb63 0301 	sbc.w	r3, r3, r1
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800677c:	4659      	mov	r1, fp
 800677e:	018b      	lsls	r3, r1, #6
 8006780:	4651      	mov	r1, sl
 8006782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006786:	4651      	mov	r1, sl
 8006788:	018a      	lsls	r2, r1, #6
 800678a:	4651      	mov	r1, sl
 800678c:	ebb2 0801 	subs.w	r8, r2, r1
 8006790:	4659      	mov	r1, fp
 8006792:	eb63 0901 	sbc.w	r9, r3, r1
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067aa:	4690      	mov	r8, r2
 80067ac:	4699      	mov	r9, r3
 80067ae:	4623      	mov	r3, r4
 80067b0:	eb18 0303 	adds.w	r3, r8, r3
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	462b      	mov	r3, r5
 80067b8:	eb49 0303 	adc.w	r3, r9, r3
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067ca:	4629      	mov	r1, r5
 80067cc:	024b      	lsls	r3, r1, #9
 80067ce:	4621      	mov	r1, r4
 80067d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067d4:	4621      	mov	r1, r4
 80067d6:	024a      	lsls	r2, r1, #9
 80067d8:	4610      	mov	r0, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067de:	2200      	movs	r2, #0
 80067e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067e8:	f7f9 fd62 	bl	80002b0 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4613      	mov	r3, r2
 80067f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067f4:	e058      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067f6:	4b38      	ldr	r3, [pc, #224]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	099b      	lsrs	r3, r3, #6
 80067fc:	2200      	movs	r2, #0
 80067fe:	4618      	mov	r0, r3
 8006800:	4611      	mov	r1, r2
 8006802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006806:	623b      	str	r3, [r7, #32]
 8006808:	2300      	movs	r3, #0
 800680a:	627b      	str	r3, [r7, #36]	@ 0x24
 800680c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006810:	4642      	mov	r2, r8
 8006812:	464b      	mov	r3, r9
 8006814:	f04f 0000 	mov.w	r0, #0
 8006818:	f04f 0100 	mov.w	r1, #0
 800681c:	0159      	lsls	r1, r3, #5
 800681e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006822:	0150      	lsls	r0, r2, #5
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4641      	mov	r1, r8
 800682a:	ebb2 0a01 	subs.w	sl, r2, r1
 800682e:	4649      	mov	r1, r9
 8006830:	eb63 0b01 	sbc.w	fp, r3, r1
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006848:	ebb2 040a 	subs.w	r4, r2, sl
 800684c:	eb63 050b 	sbc.w	r5, r3, fp
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	00eb      	lsls	r3, r5, #3
 800685a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800685e:	00e2      	lsls	r2, r4, #3
 8006860:	4614      	mov	r4, r2
 8006862:	461d      	mov	r5, r3
 8006864:	4643      	mov	r3, r8
 8006866:	18e3      	adds	r3, r4, r3
 8006868:	603b      	str	r3, [r7, #0]
 800686a:	464b      	mov	r3, r9
 800686c:	eb45 0303 	adc.w	r3, r5, r3
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800687e:	4629      	mov	r1, r5
 8006880:	028b      	lsls	r3, r1, #10
 8006882:	4621      	mov	r1, r4
 8006884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006888:	4621      	mov	r1, r4
 800688a:	028a      	lsls	r2, r1, #10
 800688c:	4610      	mov	r0, r2
 800688e:	4619      	mov	r1, r3
 8006890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006892:	2200      	movs	r2, #0
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	61fa      	str	r2, [r7, #28]
 8006898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800689c:	f7f9 fd08 	bl	80002b0 <__aeabi_uldivmod>
 80068a0:	4602      	mov	r2, r0
 80068a2:	460b      	mov	r3, r1
 80068a4:	4613      	mov	r3, r2
 80068a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068a8:	4b0b      	ldr	r3, [pc, #44]	@ (80068d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	3301      	adds	r3, #1
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068c2:	e002      	b.n	80068ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068c4:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <HAL_RCC_GetSysClockFreq+0x204>)
 80068c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3750      	adds	r7, #80	@ 0x50
 80068d0:	46bd      	mov	sp, r7
 80068d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068d6:	bf00      	nop
 80068d8:	40023800 	.word	0x40023800
 80068dc:	00f42400 	.word	0x00f42400
 80068e0:	007a1200 	.word	0x007a1200

080068e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068e8:	4b03      	ldr	r3, [pc, #12]	@ (80068f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80068ea:	681b      	ldr	r3, [r3, #0]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000000 	.word	0x20000000

080068fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006900:	f7ff fff0 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b05      	ldr	r3, [pc, #20]	@ (800691c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	0a9b      	lsrs	r3, r3, #10
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	4903      	ldr	r1, [pc, #12]	@ (8006920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40023800 	.word	0x40023800
 8006920:	08010198 	.word	0x08010198

08006924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006928:	f7ff ffdc 	bl	80068e4 <HAL_RCC_GetHCLKFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0b5b      	lsrs	r3, r3, #13
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4903      	ldr	r1, [pc, #12]	@ (8006948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40023800 	.word	0x40023800
 8006948:	08010198 	.word	0x08010198

0800694c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	220f      	movs	r2, #15
 800695a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800695c:	4b12      	ldr	r3, [pc, #72]	@ (80069a8 <HAL_RCC_GetClockConfig+0x5c>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0203 	and.w	r2, r3, #3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006968:	4b0f      	ldr	r3, [pc, #60]	@ (80069a8 <HAL_RCC_GetClockConfig+0x5c>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006974:	4b0c      	ldr	r3, [pc, #48]	@ (80069a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006980:	4b09      	ldr	r3, [pc, #36]	@ (80069a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	08db      	lsrs	r3, r3, #3
 8006986:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800698e:	4b07      	ldr	r3, [pc, #28]	@ (80069ac <HAL_RCC_GetClockConfig+0x60>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 020f 	and.w	r2, r3, #15
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	601a      	str	r2, [r3, #0]
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40023800 	.word	0x40023800
 80069ac:	40023c00 	.word	0x40023c00

080069b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069d8:	4b66      	ldr	r3, [pc, #408]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069de:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e6:	4963      	ldr	r1, [pc, #396]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80069fa:	4b5e      	ldr	r3, [pc, #376]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80069fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a00:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a08:	495a      	ldr	r1, [pc, #360]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d105      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d075      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a34:	4b50      	ldr	r3, [pc, #320]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a3a:	f7fb fb75 	bl	8002128 <HAL_GetTick>
 8006a3e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a40:	e008      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a42:	f7fb fb71 	bl	8002128 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e1dc      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a54:	4b47      	ldr	r3, [pc, #284]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1f0      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d009      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	019a      	lsls	r2, r3, #6
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	071b      	lsls	r3, r3, #28
 8006a78:	493e      	ldr	r1, [pc, #248]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01f      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a8c:	4b39      	ldr	r3, [pc, #228]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a92:	0f1b      	lsrs	r3, r3, #28
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	019a      	lsls	r2, r3, #6
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	071b      	lsls	r3, r3, #28
 8006aac:	4931      	ldr	r1, [pc, #196]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006aba:	f023 021f 	bic.w	r2, r3, #31
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	492b      	ldr	r1, [pc, #172]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	019a      	lsls	r2, r3, #6
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	061b      	lsls	r3, r3, #24
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	071b      	lsls	r3, r3, #28
 8006aec:	4921      	ldr	r1, [pc, #132]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006af4:	4b20      	ldr	r3, [pc, #128]	@ (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006afa:	f7fb fb15 	bl	8002128 <HAL_GetTick>
 8006afe:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b02:	f7fb fb11 	bl	8002128 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e17c      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b14:	4b17      	ldr	r3, [pc, #92]	@ (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0304 	and.w	r3, r3, #4
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d112      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10c      	bne.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 80ce 	beq.w	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006b4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b4e:	f040 80c8 	bne.w	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b52:	4b0a      	ldr	r3, [pc, #40]	@ (8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b58:	f7fb fae6 	bl	8002128 <HAL_GetTick>
 8006b5c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b5e:	e00f      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b60:	f7fb fae2 	bl	8002128 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d908      	bls.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e14d      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006b72:	bf00      	nop
 8006b74:	40023800 	.word	0x40023800
 8006b78:	42470068 	.word	0x42470068
 8006b7c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b80:	4ba5      	ldr	r3, [pc, #660]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b8c:	d0e8      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d02e      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006b9a:	4b9f      	ldr	r3, [pc, #636]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bac:	4b9a      	ldr	r3, [pc, #616]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb2:	0f1b      	lsrs	r3, r3, #28
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	019a      	lsls	r2, r3, #6
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	041b      	lsls	r3, r3, #16
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	061b      	lsls	r3, r3, #24
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	071b      	lsls	r3, r3, #28
 8006bd6:	4990      	ldr	r1, [pc, #576]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006bde:	4b8e      	ldr	r3, [pc, #568]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006be4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	3b01      	subs	r3, #1
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	4989      	ldr	r1, [pc, #548]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d02c      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006c04:	4b84      	ldr	r3, [pc, #528]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0a:	0c1b      	lsrs	r3, r3, #16
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	3301      	adds	r3, #1
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c16:	4b80      	ldr	r3, [pc, #512]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1c:	0e1b      	lsrs	r3, r3, #24
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	019a      	lsls	r2, r3, #6
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	041b      	lsls	r3, r3, #16
 8006c32:	431a      	orrs	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	061b      	lsls	r3, r3, #24
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	071b      	lsls	r3, r3, #28
 8006c40:	4975      	ldr	r1, [pc, #468]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c48:	4b73      	ldr	r3, [pc, #460]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c4e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c56:	4970      	ldr	r1, [pc, #448]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d024      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006c6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c72:	d11f      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c74:	4b68      	ldr	r3, [pc, #416]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7a:	0e1b      	lsrs	r3, r3, #24
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c82:	4b65      	ldr	r3, [pc, #404]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c88:	0f1b      	lsrs	r3, r3, #28
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	019a      	lsls	r2, r3, #6
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	085b      	lsrs	r3, r3, #1
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	431a      	orrs	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	061b      	lsls	r3, r3, #24
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	071b      	lsls	r3, r3, #28
 8006cac:	495a      	ldr	r1, [pc, #360]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006cb4:	4b59      	ldr	r3, [pc, #356]	@ (8006e1c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cba:	f7fb fa35 	bl	8002128 <HAL_GetTick>
 8006cbe:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cc0:	e008      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cc2:	f7fb fa31 	bl	8002128 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e09c      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cd4:	4b50      	ldr	r3, [pc, #320]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ce0:	d1ef      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8083 	beq.w	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60bb      	str	r3, [r7, #8]
 8006cf4:	4b48      	ldr	r3, [pc, #288]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf8:	4a47      	ldr	r2, [pc, #284]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d00:	4b45      	ldr	r3, [pc, #276]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d0c:	4b44      	ldr	r3, [pc, #272]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a43      	ldr	r2, [pc, #268]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d16:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d18:	f7fb fa06 	bl	8002128 <HAL_GetTick>
 8006d1c:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d1e:	e008      	b.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d20:	f7fb fa02 	bl	8002128 <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d901      	bls.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e06d      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d32:	4b3b      	ldr	r3, [pc, #236]	@ (8006e20 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0f0      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d3e:	4b36      	ldr	r3, [pc, #216]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d46:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d02f      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d028      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d64:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d66:	4b2f      	ldr	r3, [pc, #188]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8006e24 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d72:	4a29      	ldr	r2, [pc, #164]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d78:	4b27      	ldr	r3, [pc, #156]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d7c:	f003 0301 	and.w	r3, r3, #1
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d114      	bne.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d84:	f7fb f9d0 	bl	8002128 <HAL_GetTick>
 8006d88:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d8a:	e00a      	b.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8c:	f7fb f9cc 	bl	8002128 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e035      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0ee      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006db6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dba:	d10d      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006dbc:	4b16      	ldr	r3, [pc, #88]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006dcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dd0:	4911      	ldr	r1, [pc, #68]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	608b      	str	r3, [r1, #8]
 8006dd6:	e005      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dde:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006de2:	6093      	str	r3, [r2, #8]
 8006de4:	4b0c      	ldr	r3, [pc, #48]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006de6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006df0:	4909      	ldr	r1, [pc, #36]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0310 	and.w	r3, r3, #16
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006e08:	4b07      	ldr	r3, [pc, #28]	@ (8006e28 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006e0a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3720      	adds	r7, #32
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	40023800 	.word	0x40023800
 8006e1c:	42470070 	.word	0x42470070
 8006e20:	40007000 	.word	0x40007000
 8006e24:	42470e40 	.word	0x42470e40
 8006e28:	424711e0 	.word	0x424711e0

08006e2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e273      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d075      	beq.n	8006f36 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006e4a:	4b88      	ldr	r3, [pc, #544]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d00c      	beq.n	8006e70 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e56:	4b85      	ldr	r3, [pc, #532]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 030c 	and.w	r3, r3, #12
        || \
 8006e5e:	2b08      	cmp	r3, #8
 8006e60:	d112      	bne.n	8006e88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e62:	4b82      	ldr	r3, [pc, #520]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e6e:	d10b      	bne.n	8006e88 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e70:	4b7e      	ldr	r3, [pc, #504]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d05b      	beq.n	8006f34 <HAL_RCC_OscConfig+0x108>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d157      	bne.n	8006f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e24e      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e90:	d106      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x74>
 8006e92:	4b76      	ldr	r3, [pc, #472]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a75      	ldr	r2, [pc, #468]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e01d      	b.n	8006edc <HAL_RCC_OscConfig+0xb0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ea8:	d10c      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x98>
 8006eaa:	4b70      	ldr	r3, [pc, #448]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a6f      	ldr	r2, [pc, #444]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a6c      	ldr	r2, [pc, #432]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	e00b      	b.n	8006edc <HAL_RCC_OscConfig+0xb0>
 8006ec4:	4b69      	ldr	r3, [pc, #420]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a68      	ldr	r2, [pc, #416]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	4b66      	ldr	r3, [pc, #408]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a65      	ldr	r2, [pc, #404]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d013      	beq.n	8006f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee4:	f7fb f920 	bl	8002128 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eec:	f7fb f91c 	bl	8002128 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b64      	cmp	r3, #100	@ 0x64
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e213      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006efe:	4b5b      	ldr	r3, [pc, #364]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0xc0>
 8006f0a:	e014      	b.n	8006f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fb f90c 	bl	8002128 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f14:	f7fb f908 	bl	8002128 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b64      	cmp	r3, #100	@ 0x64
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e1ff      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f26:	4b51      	ldr	r3, [pc, #324]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0xe8>
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d063      	beq.n	800700a <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f42:	4b4a      	ldr	r3, [pc, #296]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 030c 	and.w	r3, r3, #12
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00b      	beq.n	8006f66 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f4e:	4b47      	ldr	r3, [pc, #284]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 030c 	and.w	r3, r3, #12
        || \
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	d11c      	bne.n	8006f94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f5a:	4b44      	ldr	r3, [pc, #272]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d116      	bne.n	8006f94 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f66:	4b41      	ldr	r3, [pc, #260]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d005      	beq.n	8006f7e <HAL_RCC_OscConfig+0x152>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d001      	beq.n	8006f7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e1d3      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4937      	ldr	r1, [pc, #220]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f92:	e03a      	b.n	800700a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d020      	beq.n	8006fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f9c:	4b34      	ldr	r3, [pc, #208]	@ (8007070 <HAL_RCC_OscConfig+0x244>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa2:	f7fb f8c1 	bl	8002128 <HAL_GetTick>
 8006fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006faa:	f7fb f8bd 	bl	8002128 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e1b4      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fc8:	4b28      	ldr	r3, [pc, #160]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	00db      	lsls	r3, r3, #3
 8006fd6:	4925      	ldr	r1, [pc, #148]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
 8006fdc:	e015      	b.n	800700a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fde:	4b24      	ldr	r3, [pc, #144]	@ (8007070 <HAL_RCC_OscConfig+0x244>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fb f8a0 	bl	8002128 <HAL_GetTick>
 8006fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fec:	f7fb f89c 	bl	8002128 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e193      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f0      	bne.n	8006fec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d036      	beq.n	8007084 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d016      	beq.n	800704c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800701e:	4b15      	ldr	r3, [pc, #84]	@ (8007074 <HAL_RCC_OscConfig+0x248>)
 8007020:	2201      	movs	r2, #1
 8007022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007024:	f7fb f880 	bl	8002128 <HAL_GetTick>
 8007028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800702a:	e008      	b.n	800703e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800702c:	f7fb f87c 	bl	8002128 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	2b02      	cmp	r3, #2
 8007038:	d901      	bls.n	800703e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e173      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800703e:	4b0b      	ldr	r3, [pc, #44]	@ (800706c <HAL_RCC_OscConfig+0x240>)
 8007040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0f0      	beq.n	800702c <HAL_RCC_OscConfig+0x200>
 800704a:	e01b      	b.n	8007084 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800704c:	4b09      	ldr	r3, [pc, #36]	@ (8007074 <HAL_RCC_OscConfig+0x248>)
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007052:	f7fb f869 	bl	8002128 <HAL_GetTick>
 8007056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007058:	e00e      	b.n	8007078 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800705a:	f7fb f865 	bl	8002128 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d907      	bls.n	8007078 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e15c      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
 800706c:	40023800 	.word	0x40023800
 8007070:	42470000 	.word	0x42470000
 8007074:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007078:	4b8a      	ldr	r3, [pc, #552]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800707a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1ea      	bne.n	800705a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 8097 	beq.w	80071c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007092:	2300      	movs	r3, #0
 8007094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007096:	4b83      	ldr	r3, [pc, #524]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10f      	bne.n	80070c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070a2:	2300      	movs	r3, #0
 80070a4:	60bb      	str	r3, [r7, #8]
 80070a6:	4b7f      	ldr	r3, [pc, #508]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80070a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070aa:	4a7e      	ldr	r2, [pc, #504]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80070ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80070b2:	4b7c      	ldr	r3, [pc, #496]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80070b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ba:	60bb      	str	r3, [r7, #8]
 80070bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070be:	2301      	movs	r3, #1
 80070c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c2:	4b79      	ldr	r3, [pc, #484]	@ (80072a8 <HAL_RCC_OscConfig+0x47c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d118      	bne.n	8007100 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070ce:	4b76      	ldr	r3, [pc, #472]	@ (80072a8 <HAL_RCC_OscConfig+0x47c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a75      	ldr	r2, [pc, #468]	@ (80072a8 <HAL_RCC_OscConfig+0x47c>)
 80070d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070da:	f7fb f825 	bl	8002128 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070e0:	e008      	b.n	80070f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e2:	f7fb f821 	bl	8002128 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d901      	bls.n	80070f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e118      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070f4:	4b6c      	ldr	r3, [pc, #432]	@ (80072a8 <HAL_RCC_OscConfig+0x47c>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0f0      	beq.n	80070e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	2b01      	cmp	r3, #1
 8007106:	d106      	bne.n	8007116 <HAL_RCC_OscConfig+0x2ea>
 8007108:	4b66      	ldr	r3, [pc, #408]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800710c:	4a65      	ldr	r2, [pc, #404]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	6713      	str	r3, [r2, #112]	@ 0x70
 8007114:	e01c      	b.n	8007150 <HAL_RCC_OscConfig+0x324>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b05      	cmp	r3, #5
 800711c:	d10c      	bne.n	8007138 <HAL_RCC_OscConfig+0x30c>
 800711e:	4b61      	ldr	r3, [pc, #388]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007122:	4a60      	ldr	r2, [pc, #384]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007124:	f043 0304 	orr.w	r3, r3, #4
 8007128:	6713      	str	r3, [r2, #112]	@ 0x70
 800712a:	4b5e      	ldr	r3, [pc, #376]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800712c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712e:	4a5d      	ldr	r2, [pc, #372]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007130:	f043 0301 	orr.w	r3, r3, #1
 8007134:	6713      	str	r3, [r2, #112]	@ 0x70
 8007136:	e00b      	b.n	8007150 <HAL_RCC_OscConfig+0x324>
 8007138:	4b5a      	ldr	r3, [pc, #360]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800713a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713c:	4a59      	ldr	r2, [pc, #356]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800713e:	f023 0301 	bic.w	r3, r3, #1
 8007142:	6713      	str	r3, [r2, #112]	@ 0x70
 8007144:	4b57      	ldr	r3, [pc, #348]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007148:	4a56      	ldr	r2, [pc, #344]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800714a:	f023 0304 	bic.w	r3, r3, #4
 800714e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d015      	beq.n	8007184 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007158:	f7fa ffe6 	bl	8002128 <HAL_GetTick>
 800715c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800715e:	e00a      	b.n	8007176 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007160:	f7fa ffe2 	bl	8002128 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800716e:	4293      	cmp	r3, r2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e0d7      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007176:	4b4b      	ldr	r3, [pc, #300]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0ee      	beq.n	8007160 <HAL_RCC_OscConfig+0x334>
 8007182:	e014      	b.n	80071ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007184:	f7fa ffd0 	bl	8002128 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800718a:	e00a      	b.n	80071a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800718c:	f7fa ffcc 	bl	8002128 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e0c1      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071a2:	4b40      	ldr	r3, [pc, #256]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80071a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1ee      	bne.n	800718c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d105      	bne.n	80071c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071b4:	4b3b      	ldr	r3, [pc, #236]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b8:	4a3a      	ldr	r2, [pc, #232]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80071ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80ad 	beq.w	8007324 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071ca:	4b36      	ldr	r3, [pc, #216]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 030c 	and.w	r3, r3, #12
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d060      	beq.n	8007298 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d145      	bne.n	800726a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071de:	4b33      	ldr	r3, [pc, #204]	@ (80072ac <HAL_RCC_OscConfig+0x480>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071e4:	f7fa ffa0 	bl	8002128 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ec:	f7fa ff9c 	bl	8002128 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e093      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071fe:	4b29      	ldr	r3, [pc, #164]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1f0      	bne.n	80071ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69da      	ldr	r2, [r3, #28]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007218:	019b      	lsls	r3, r3, #6
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	3b01      	subs	r3, #1
 8007224:	041b      	lsls	r3, r3, #16
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	061b      	lsls	r3, r3, #24
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007234:	071b      	lsls	r3, r3, #28
 8007236:	491b      	ldr	r1, [pc, #108]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 8007238:	4313      	orrs	r3, r2
 800723a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800723c:	4b1b      	ldr	r3, [pc, #108]	@ (80072ac <HAL_RCC_OscConfig+0x480>)
 800723e:	2201      	movs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007242:	f7fa ff71 	bl	8002128 <HAL_GetTick>
 8007246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007248:	e008      	b.n	800725c <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724a:	f7fa ff6d 	bl	8002128 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	2b02      	cmp	r3, #2
 8007256:	d901      	bls.n	800725c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e064      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800725c:	4b11      	ldr	r3, [pc, #68]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0f0      	beq.n	800724a <HAL_RCC_OscConfig+0x41e>
 8007268:	e05c      	b.n	8007324 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800726a:	4b10      	ldr	r3, [pc, #64]	@ (80072ac <HAL_RCC_OscConfig+0x480>)
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fa ff5a 	bl	8002128 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007278:	f7fa ff56 	bl	8002128 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e04d      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800728a:	4b06      	ldr	r3, [pc, #24]	@ (80072a4 <HAL_RCC_OscConfig+0x478>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1f0      	bne.n	8007278 <HAL_RCC_OscConfig+0x44c>
 8007296:	e045      	b.n	8007324 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	699b      	ldr	r3, [r3, #24]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d107      	bne.n	80072b0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e040      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
 80072a4:	40023800 	.word	0x40023800
 80072a8:	40007000 	.word	0x40007000
 80072ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072b0:	4b1f      	ldr	r3, [pc, #124]	@ (8007330 <HAL_RCC_OscConfig+0x504>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d030      	beq.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d129      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d122      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80072e0:	4013      	ands	r3, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d119      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	3b01      	subs	r3, #1
 80072fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d10f      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800730c:	429a      	cmp	r2, r3
 800730e:	d107      	bne.n	8007320 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800731c:	429a      	cmp	r2, r3
 800731e:	d001      	beq.n	8007324 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e000      	b.n	8007326 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	40023800 	.word	0x40023800

08007334 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e10c      	b.n	8007570 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fa fc88 	bl	8001c80 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f903 	bl	8007584 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f938 	bl	80075f4 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d030      	beq.n	80073ee <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f957 	bl	8007640 <SAI_GetInputClock>
 8007392:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	461a      	mov	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	025b      	lsls	r3, r3, #9
 80073a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073aa:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a72      	ldr	r2, [pc, #456]	@ (8007578 <HAL_SAI_Init+0x244>)
 80073b0:	fba2 2303 	umull	r2, r3, r2, r3
 80073b4:	08da      	lsrs	r2, r3, #3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80073ba:	68f9      	ldr	r1, [r7, #12]
 80073bc:	4b6e      	ldr	r3, [pc, #440]	@ (8007578 <HAL_SAI_Init+0x244>)
 80073be:	fba3 2301 	umull	r2, r3, r3, r1
 80073c2:	08da      	lsrs	r2, r3, #3
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	1aca      	subs	r2, r1, r3
 80073ce:	2a08      	cmp	r2, #8
 80073d0:	d904      	bls.n	80073dc <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d104      	bne.n	80073ee <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	085a      	lsrs	r2, r3, #1
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_SAI_Init+0xca>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d109      	bne.n	8007412 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_SAI_Init+0xd6>
 8007406:	2300      	movs	r3, #0
 8007408:	e001      	b.n	800740e <HAL_SAI_Init+0xda>
 800740a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	e008      	b.n	8007424 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007416:	2b01      	cmp	r3, #1
 8007418:	d102      	bne.n	8007420 <HAL_SAI_Init+0xec>
 800741a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800741e:	e000      	b.n	8007422 <HAL_SAI_Init+0xee>
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b03      	cmp	r3, #3
 800742a:	d811      	bhi.n	8007450 <HAL_SAI_Init+0x11c>
 800742c:	2b02      	cmp	r3, #2
 800742e:	d20b      	bcs.n	8007448 <HAL_SAI_Init+0x114>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_SAI_Init+0x106>
 8007434:	2b01      	cmp	r3, #1
 8007436:	d003      	beq.n	8007440 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007438:	e00a      	b.n	8007450 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	613b      	str	r3, [r7, #16]
    break;
 800743e:	e008      	b.n	8007452 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007440:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007444:	613b      	str	r3, [r7, #16]
    break;
 8007446:	e004      	b.n	8007452 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007448:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800744c:	613b      	str	r3, [r7, #16]
    break;
 800744e:	e000      	b.n	8007452 <HAL_SAI_Init+0x11e>
      break;
 8007450:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6819      	ldr	r1, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	4b47      	ldr	r3, [pc, #284]	@ (800757c <HAL_SAI_Init+0x248>)
 800745e:	400b      	ands	r3, r1
 8007460:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6819      	ldr	r1, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007470:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007476:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747c:	431a      	orrs	r2, r3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800748a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007496:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749c:	051b      	lsls	r3, r3, #20
 800749e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80074b6:	f023 030f 	bic.w	r3, r3, #15
 80074ba:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6859      	ldr	r1, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6899      	ldr	r1, [r3, #8]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4b26      	ldr	r3, [pc, #152]	@ (8007580 <HAL_SAI_Init+0x24c>)
 80074e6:	400b      	ands	r3, r1
 80074e8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	6899      	ldr	r1, [r3, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074f4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80074fa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8007500:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007506:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800750c:	3b01      	subs	r3, #1
 800750e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007510:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	430a      	orrs	r2, r1
 8007518:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68d9      	ldr	r1, [r3, #12]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007528:	400b      	ands	r3, r1
 800752a:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68d9      	ldr	r1, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800753a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007540:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007542:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007548:	3b01      	subs	r3, #1
 800754a:	021b      	lsls	r3, r3, #8
 800754c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	cccccccd 	.word	0xcccccccd
 800757c:	ff05c010 	.word	0xff05c010
 8007580:	fff88000 	.word	0xfff88000

08007584 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800758c:	4b17      	ldr	r3, [pc, #92]	@ (80075ec <SAI_Disable+0x68>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a17      	ldr	r2, [pc, #92]	@ (80075f0 <SAI_Disable+0x6c>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	0b1b      	lsrs	r3, r3, #12
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80075ae:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	1e5a      	subs	r2, r3, #1
 80075b4:	60fa      	str	r2, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10a      	bne.n	80075d0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	72fb      	strb	r3, [r7, #11]
      break;
 80075ce:	e006      	b.n	80075de <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e8      	bne.n	80075b0 <SAI_Disable+0x2c>

  return status;
 80075de:	7afb      	ldrb	r3, [r7, #11]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3714      	adds	r7, #20
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	20000000 	.word	0x20000000
 80075f0:	95cbec1b 	.word	0x95cbec1b

080075f4 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d00c      	beq.n	800761e <SAI_BlockSynchroConfig+0x2a>
 8007604:	2b02      	cmp	r3, #2
 8007606:	d80d      	bhi.n	8007624 <SAI_BlockSynchroConfig+0x30>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <SAI_BlockSynchroConfig+0x1e>
 800760c:	2b01      	cmp	r3, #1
 800760e:	d003      	beq.n	8007618 <SAI_BlockSynchroConfig+0x24>
 8007610:	e008      	b.n	8007624 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
      break;
 8007616:	e008      	b.n	800762a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007618:	2310      	movs	r3, #16
 800761a:	60fb      	str	r3, [r7, #12]
      break;
 800761c:	e005      	b.n	800762a <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800761e:	2320      	movs	r3, #32
 8007620:	60fb      	str	r3, [r7, #12]
      break;
 8007622:	e002      	b.n	800762a <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
      break;
 8007628:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 800762a:	4a04      	ldr	r2, [pc, #16]	@ (800763c <SAI_BlockSynchroConfig+0x48>)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007630:	bf00      	nop
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	40015800 	.word	0x40015800

08007640 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a46      	ldr	r2, [pc, #280]	@ (8007774 <SAI_GetInputClock+0x134>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d10b      	bne.n	8007676 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800765e:	4b46      	ldr	r3, [pc, #280]	@ (8007778 <SAI_GetInputClock+0x138>)
 8007660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007664:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	4942      	ldr	r1, [pc, #264]	@ (8007778 <SAI_GetInputClock+0x138>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007674:	e00b      	b.n	800768e <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8007676:	4b40      	ldr	r3, [pc, #256]	@ (8007778 <SAI_GetInputClock+0x138>)
 8007678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800767c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	69db      	ldr	r3, [r3, #28]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	493c      	ldr	r1, [pc, #240]	@ (8007778 <SAI_GetInputClock+0x138>)
 8007688:	4313      	orrs	r3, r2
 800768a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800768e:	4b3a      	ldr	r3, [pc, #232]	@ (8007778 <SAI_GetInputClock+0x138>)
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d108      	bne.n	80076ac <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800769a:	4b37      	ldr	r3, [pc, #220]	@ (8007778 <SAI_GetInputClock+0x138>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076a2:	4a36      	ldr	r2, [pc, #216]	@ (800777c <SAI_GetInputClock+0x13c>)
 80076a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	e007      	b.n	80076bc <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80076ac:	4b32      	ldr	r3, [pc, #200]	@ (8007778 <SAI_GetInputClock+0x138>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076b4:	4a32      	ldr	r2, [pc, #200]	@ (8007780 <SAI_GetInputClock+0x140>)
 80076b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ba:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d121      	bne.n	8007708 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80076c4:	4b2c      	ldr	r3, [pc, #176]	@ (8007778 <SAI_GetInputClock+0x138>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ca:	0e1b      	lsrs	r3, r3, #24
 80076cc:	f003 030f 	and.w	r3, r3, #15
 80076d0:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 80076d2:	4b29      	ldr	r3, [pc, #164]	@ (8007778 <SAI_GetInputClock+0x138>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d8:	099b      	lsrs	r3, r3, #6
 80076da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	fb03 f202 	mul.w	r2, r3, r2
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80076ec:	4b22      	ldr	r3, [pc, #136]	@ (8007778 <SAI_GetInputClock+0x138>)
 80076ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076f2:	0a1b      	lsrs	r3, r3, #8
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	3301      	adds	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	fbb2 f3f3 	udiv	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]
 8007706:	e02d      	b.n	8007764 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007710:	d120      	bne.n	8007754 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8007712:	4b19      	ldr	r3, [pc, #100]	@ (8007778 <SAI_GetInputClock+0x138>)
 8007714:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007718:	0e1b      	lsrs	r3, r3, #24
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8007720:	4b15      	ldr	r3, [pc, #84]	@ (8007778 <SAI_GetInputClock+0x138>)
 8007722:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007726:	099b      	lsrs	r3, r3, #6
 8007728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	fb03 f202 	mul.w	r2, r3, r2
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	fbb2 f3f3 	udiv	r3, r2, r3
 8007738:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 800773a:	4b0f      	ldr	r3, [pc, #60]	@ (8007778 <SAI_GetInputClock+0x138>)
 800773c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]
 8007752:	e007      	b.n	8007764 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8007754:	4b08      	ldr	r3, [pc, #32]	@ (8007778 <SAI_GetInputClock+0x138>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	4a07      	ldr	r2, [pc, #28]	@ (8007778 <SAI_GetInputClock+0x138>)
 800775a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800775e:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8007760:	4b08      	ldr	r3, [pc, #32]	@ (8007784 <SAI_GetInputClock+0x144>)
 8007762:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8007764:	697b      	ldr	r3, [r7, #20]
}
 8007766:	4618      	mov	r0, r3
 8007768:	371c      	adds	r7, #28
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40015804 	.word	0x40015804
 8007778:	40023800 	.word	0x40023800
 800777c:	00f42400 	.word	0x00f42400
 8007780:	007a1200 	.word	0x007a1200
 8007784:	00bb8000 	.word	0x00bb8000

08007788 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e022      	b.n	80077e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d105      	bne.n	80077b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f7fa f847 	bl	8001840 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2203      	movs	r2, #3
 80077b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f814 	bl	80077e8 <HAL_SD_InitCard>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e00a      	b.n	80077e0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80077e8:	b5b0      	push	{r4, r5, r7, lr}
 80077ea:	b08e      	sub	sp, #56	@ 0x38
 80077ec:	af04      	add	r7, sp, #16
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80077fc:	2300      	movs	r3, #0
 80077fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007800:	2300      	movs	r3, #0
 8007802:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007804:	2376      	movs	r3, #118	@ 0x76
 8007806:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681d      	ldr	r5, [r3, #0]
 800780c:	466c      	mov	r4, sp
 800780e:	f107 0314 	add.w	r3, r7, #20
 8007812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800781a:	f107 0308 	add.w	r3, r7, #8
 800781e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007820:	4628      	mov	r0, r5
 8007822:	f002 ff41 	bl	800a6a8 <SDIO_Init>
 8007826:	4603      	mov	r3, r0
 8007828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800782c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e04f      	b.n	80078d8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007838:	4b29      	ldr	r3, [pc, #164]	@ (80078e0 <HAL_SD_InitCard+0xf8>)
 800783a:	2200      	movs	r2, #0
 800783c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4618      	mov	r0, r3
 8007844:	f002 ff79 	bl	800a73a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007848:	4b25      	ldr	r3, [pc, #148]	@ (80078e0 <HAL_SD_InitCard+0xf8>)
 800784a:	2201      	movs	r2, #1
 800784c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800784e:	2002      	movs	r0, #2
 8007850:	f7fa fc76 	bl	8002140 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 ff03 	bl	8008660 <SD_PowerON>
 800785a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00b      	beq.n	800787a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e02e      	b.n	80078d8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fe22 	bl	80084c4 <SD_InitCard>
 8007880:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e01b      	b.n	80078d8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078a8:	4618      	mov	r0, r3
 80078aa:	f002 ffd8 	bl	800a85e <SDMMC_CmdBlockLength>
 80078ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00f      	beq.n	80078d6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a0a      	ldr	r2, [pc, #40]	@ (80078e4 <HAL_SD_InitCard+0xfc>)
 80078bc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3728      	adds	r7, #40	@ 0x28
 80078dc:	46bd      	mov	sp, r7
 80078de:	bdb0      	pop	{r4, r5, r7, pc}
 80078e0:	422580a0 	.word	0x422580a0
 80078e4:	004005ff 	.word	0x004005ff

080078e8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b092      	sub	sp, #72	@ 0x48
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80078f6:	f7fa fc17 	bl	8002128 <HAL_GetTick>
 80078fa:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e1bd      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b01      	cmp	r3, #1
 8007924:	f040 81b0 	bne.w	8007c88 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2200      	movs	r2, #0
 800792c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800792e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	441a      	add	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007938:	429a      	cmp	r2, r3
 800793a:	d907      	bls.n	800794c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007940:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e1a4      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2203      	movs	r2, #3
 8007950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2200      	movs	r2, #0
 800795a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007960:	2b01      	cmp	r3, #1
 8007962:	d002      	beq.n	800796a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007966:	025b      	lsls	r3, r3, #9
 8007968:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800796a:	f04f 33ff 	mov.w	r3, #4294967295
 800796e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	025b      	lsls	r3, r3, #9
 8007974:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007976:	2390      	movs	r3, #144	@ 0x90
 8007978:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800797a:	2302      	movs	r3, #2
 800797c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800797e:	2300      	movs	r3, #0
 8007980:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007982:	2301      	movs	r3, #1
 8007984:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f107 0214 	add.w	r2, r7, #20
 800798e:	4611      	mov	r1, r2
 8007990:	4618      	mov	r0, r3
 8007992:	f002 ff38 	bl	800a806 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d90a      	bls.n	80079b2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2202      	movs	r2, #2
 80079a0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079a8:	4618      	mov	r0, r3
 80079aa:	f002 ff9c 	bl	800a8e6 <SDMMC_CmdReadMultiBlock>
 80079ae:	6478      	str	r0, [r7, #68]	@ 0x44
 80079b0:	e009      	b.n	80079c6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2201      	movs	r2, #1
 80079b6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079be:	4618      	mov	r0, r3
 80079c0:	f002 ff6f 	bl	800a8a2 <SDMMC_CmdReadSingleBlock>
 80079c4:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d012      	beq.n	80079f2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a7a      	ldr	r2, [pc, #488]	@ (8007bbc <HAL_SD_ReadBlocks+0x2d4>)
 80079d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079da:	431a      	orrs	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e151      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80079f6:	e061      	b.n	8007abc <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d03c      	beq.n	8007a80 <HAL_SD_ReadBlocks+0x198>
 8007a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d039      	beq.n	8007a80 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a10:	e033      	b.n	8007a7a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f002 fe71 	bl	800a6fe <SDIO_ReadFIFO>
 8007a1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a20:	b2da      	uxtb	r2, r3
 8007a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a24:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a28:	3301      	adds	r3, #1
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3e:	3301      	adds	r3, #1
 8007a40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a44:	3b01      	subs	r3, #1
 8007a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4a:	0c1b      	lsrs	r3, r3, #16
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a54:	3301      	adds	r3, #1
 8007a56:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	0e1b      	lsrs	r3, r3, #24
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a66:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a70:	3b01      	subs	r3, #1
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8007a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a76:	3301      	adds	r3, #1
 8007a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a7c:	2b07      	cmp	r3, #7
 8007a7e:	d9c8      	bls.n	8007a12 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007a80:	f7fa fb52 	bl	8002128 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d902      	bls.n	8007a96 <HAL_SD_ReadBlocks+0x1ae>
 8007a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d112      	bne.n	8007abc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a48      	ldr	r2, [pc, #288]	@ (8007bbc <HAL_SD_ReadBlocks+0x2d4>)
 8007a9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e0ec      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ac2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d096      	beq.n	80079f8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d022      	beq.n	8007b1e <HAL_SD_ReadBlocks+0x236>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d91f      	bls.n	8007b1e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d01b      	beq.n	8007b1e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f002 ff62 	bl	800a9b4 <SDMMC_CmdStopTransfer>
 8007af0:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d012      	beq.n	8007b1e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a2f      	ldr	r2, [pc, #188]	@ (8007bbc <HAL_SD_ReadBlocks+0x2d4>)
 8007afe:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b06:	431a      	orrs	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e0bb      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d012      	beq.n	8007b52 <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a22      	ldr	r2, [pc, #136]	@ (8007bbc <HAL_SD_ReadBlocks+0x2d4>)
 8007b32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b38:	f043 0208 	orr.w	r2, r3, #8
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e0a1      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d012      	beq.n	8007b86 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a15      	ldr	r2, [pc, #84]	@ (8007bbc <HAL_SD_ReadBlocks+0x2d4>)
 8007b66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b6c:	f043 0202 	orr.w	r2, r3, #2
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e087      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b8c:	f003 0320 	and.w	r3, r3, #32
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d064      	beq.n	8007c5e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a08      	ldr	r2, [pc, #32]	@ (8007bbc <HAL_SD_ReadBlocks+0x2d4>)
 8007b9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba0:	f043 0220 	orr.w	r2, r3, #32
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e06d      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>
 8007bba:	bf00      	nop
 8007bbc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f002 fd9a 	bl	800a6fe <SDIO_ReadFIFO>
 8007bca:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be2:	0a1b      	lsrs	r3, r3, #8
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bec:	3301      	adds	r3, #1
 8007bee:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf8:	0c1b      	lsrs	r3, r3, #16
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c02:	3301      	adds	r3, #1
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0e:	0e1b      	lsrs	r3, r3, #24
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c14:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c18:	3301      	adds	r3, #1
 8007c1a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007c22:	f7fa fa81 	bl	8002128 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d902      	bls.n	8007c38 <HAL_SD_ReadBlocks+0x350>
 8007c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d112      	bne.n	8007c5e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a18      	ldr	r2, [pc, #96]	@ (8007ca0 <HAL_SD_ReadBlocks+0x3b8>)
 8007c3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c44:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e01b      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d002      	beq.n	8007c72 <HAL_SD_ReadBlocks+0x38a>
 8007c6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1a6      	bne.n	8007bc0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007c7a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	e006      	b.n	8007c96 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
  }
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3748      	adds	r7, #72	@ 0x48
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	004005ff 	.word	0x004005ff

08007ca4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b092      	sub	sp, #72	@ 0x48
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cb2:	f7fa fa39 	bl	8002128 <HAL_GetTick>
 8007cb6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d107      	bne.n	8007cd6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e165      	b.n	8007fa2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	f040 8158 	bne.w	8007f94 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	441a      	add	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d907      	bls.n	8007d08 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e14c      	b.n	8007fa2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2203      	movs	r2, #3
 8007d0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2200      	movs	r2, #0
 8007d16:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d002      	beq.n	8007d26 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d22:	025b      	lsls	r3, r3, #9
 8007d24:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d26:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	025b      	lsls	r3, r3, #9
 8007d30:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007d32:	2390      	movs	r3, #144	@ 0x90
 8007d34:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007d36:	2300      	movs	r3, #0
 8007d38:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f107 0218 	add.w	r2, r7, #24
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f002 fd5a 	bl	800a806 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d90a      	bls.n	8007d6e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d64:	4618      	mov	r0, r3
 8007d66:	f002 fe02 	bl	800a96e <SDMMC_CmdWriteMultiBlock>
 8007d6a:	6478      	str	r0, [r7, #68]	@ 0x44
 8007d6c:	e009      	b.n	8007d82 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2210      	movs	r2, #16
 8007d72:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f002 fdd5 	bl	800a92a <SDMMC_CmdWriteSingleBlock>
 8007d80:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d012      	beq.n	8007dae <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a87      	ldr	r2, [pc, #540]	@ (8007fac <HAL_SD_WriteBlocks+0x308>)
 8007d8e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d96:	431a      	orrs	r2, r3
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e0f9      	b.n	8007fa2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007db2:	e065      	b.n	8007e80 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d040      	beq.n	8007e44 <HAL_SD_WriteBlocks+0x1a0>
 8007dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d03d      	beq.n	8007e44 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dcc:	e037      	b.n	8007e3e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	021a      	lsls	r2, r3, #8
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dee:	3301      	adds	r3, #1
 8007df0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df4:	3b01      	subs	r3, #1
 8007df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	041a      	lsls	r2, r3, #16
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e06:	3301      	adds	r3, #1
 8007e08:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	061a      	lsls	r2, r3, #24
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1e:	3301      	adds	r3, #1
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e24:	3b01      	subs	r3, #1
 8007e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f107 0214 	add.w	r2, r7, #20
 8007e30:	4611      	mov	r1, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f002 fc70 	bl	800a718 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e40:	2b07      	cmp	r3, #7
 8007e42:	d9c4      	bls.n	8007dce <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007e44:	f7fa f970 	bl	8002128 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d902      	bls.n	8007e5a <HAL_SD_WriteBlocks+0x1b6>
 8007e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d112      	bne.n	8007e80 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a53      	ldr	r2, [pc, #332]	@ (8007fac <HAL_SD_WriteBlocks+0x308>)
 8007e60:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e090      	b.n	8007fa2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e86:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d092      	beq.n	8007db4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d022      	beq.n	8007ee2 <HAL_SD_WriteBlocks+0x23e>
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d91f      	bls.n	8007ee2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d01b      	beq.n	8007ee2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f002 fd80 	bl	800a9b4 <SDMMC_CmdStopTransfer>
 8007eb4:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007eb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d012      	beq.n	8007ee2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a3a      	ldr	r2, [pc, #232]	@ (8007fac <HAL_SD_WriteBlocks+0x308>)
 8007ec2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e05f      	b.n	8007fa2 <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d012      	beq.n	8007f16 <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8007fac <HAL_SD_WriteBlocks+0x308>)
 8007ef6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007efc:	f043 0208 	orr.w	r2, r3, #8
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e045      	b.n	8007fa2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d012      	beq.n	8007f4a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a20      	ldr	r2, [pc, #128]	@ (8007fac <HAL_SD_WriteBlocks+0x308>)
 8007f2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f30:	f043 0202 	orr.w	r2, r3, #2
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e02b      	b.n	8007fa2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f50:	f003 0310 	and.w	r3, r3, #16
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d012      	beq.n	8007f7e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a13      	ldr	r2, [pc, #76]	@ (8007fac <HAL_SD_WriteBlocks+0x308>)
 8007f5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f64:	f043 0210 	orr.w	r2, r3, #16
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e011      	b.n	8007fa2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007f86:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e006      	b.n	8007fa2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f98:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
  }
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3748      	adds	r7, #72	@ 0x48
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	004005ff 	.word	0x004005ff

08007fb0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fbe:	0f9b      	lsrs	r3, r3, #30
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fca:	0e9b      	lsrs	r3, r3, #26
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	f003 030f 	and.w	r3, r3, #15
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fdc:	0e1b      	lsrs	r3, r3, #24
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	f003 0303 	and.w	r3, r3, #3
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fee:	0c1b      	lsrs	r3, r3, #16
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ffa:	0a1b      	lsrs	r3, r3, #8
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008006:	b2da      	uxtb	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008010:	0d1b      	lsrs	r3, r3, #20
 8008012:	b29a      	uxth	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800801c:	0c1b      	lsrs	r3, r3, #16
 800801e:	b2db      	uxtb	r3, r3
 8008020:	f003 030f 	and.w	r3, r3, #15
 8008024:	b2da      	uxtb	r2, r3
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800802e:	0bdb      	lsrs	r3, r3, #15
 8008030:	b2db      	uxtb	r3, r3
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	b2da      	uxtb	r2, r3
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008040:	0b9b      	lsrs	r3, r3, #14
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	b2da      	uxtb	r2, r3
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008052:	0b5b      	lsrs	r3, r3, #13
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	b2da      	uxtb	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008064:	0b1b      	lsrs	r3, r3, #12
 8008066:	b2db      	uxtb	r3, r3
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	b2da      	uxtb	r2, r3
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2200      	movs	r2, #0
 8008076:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807c:	2b00      	cmp	r3, #0
 800807e:	d163      	bne.n	8008148 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008084:	009a      	lsls	r2, r3, #2
 8008086:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800808a:	4013      	ands	r3, r2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008090:	0f92      	lsrs	r2, r2, #30
 8008092:	431a      	orrs	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800809c:	0edb      	lsrs	r3, r3, #27
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ae:	0e1b      	lsrs	r3, r3, #24
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	b2da      	uxtb	r2, r3
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080c0:	0d5b      	lsrs	r3, r3, #21
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080d2:	0c9b      	lsrs	r3, r3, #18
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080e4:	0bdb      	lsrs	r3, r3, #15
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	7e1b      	ldrb	r3, [r3, #24]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	3302      	adds	r3, #2
 8008108:	2201      	movs	r2, #1
 800810a:	fa02 f303 	lsl.w	r3, r2, r3
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008112:	fb03 f202 	mul.w	r2, r3, r2
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	7a1b      	ldrb	r3, [r3, #8]
 800811e:	b2db      	uxtb	r3, r3
 8008120:	f003 030f 	and.w	r3, r3, #15
 8008124:	2201      	movs	r2, #1
 8008126:	409a      	lsls	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008134:	0a52      	lsrs	r2, r2, #9
 8008136:	fb03 f202 	mul.w	r2, r3, r2
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008144:	661a      	str	r2, [r3, #96]	@ 0x60
 8008146:	e031      	b.n	80081ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800814c:	2b01      	cmp	r3, #1
 800814e:	d11d      	bne.n	800818c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800815e:	0c1b      	lsrs	r3, r3, #16
 8008160:	431a      	orrs	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	3301      	adds	r3, #1
 800816c:	029a      	lsls	r2, r3, #10
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008180:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	661a      	str	r2, [r3, #96]	@ 0x60
 800818a:	e00f      	b.n	80081ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a58      	ldr	r2, [pc, #352]	@ (80082f4 <HAL_SD_GetCardCSD+0x344>)
 8008192:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008198:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e09d      	b.n	80082e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081b0:	0b9b      	lsrs	r3, r3, #14
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081c2:	09db      	lsrs	r3, r3, #7
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e4:	0fdb      	lsrs	r3, r3, #31
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f0:	0f5b      	lsrs	r3, r3, #29
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008202:	0e9b      	lsrs	r3, r3, #26
 8008204:	b2db      	uxtb	r3, r3
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	b2da      	uxtb	r2, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008214:	0d9b      	lsrs	r3, r3, #22
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	b2da      	uxtb	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008226:	0d5b      	lsrs	r3, r3, #21
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	b2da      	uxtb	r2, r3
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008242:	0c1b      	lsrs	r3, r3, #16
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	b2da      	uxtb	r2, r3
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008256:	0bdb      	lsrs	r3, r3, #15
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	b2da      	uxtb	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826a:	0b9b      	lsrs	r3, r3, #14
 800826c:	b2db      	uxtb	r3, r3
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	b2da      	uxtb	r2, r3
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800827e:	0b5b      	lsrs	r3, r3, #13
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 0301 	and.w	r3, r3, #1
 8008286:	b2da      	uxtb	r2, r3
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008292:	0b1b      	lsrs	r3, r3, #12
 8008294:	b2db      	uxtb	r3, r3
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	b2da      	uxtb	r2, r3
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a6:	0a9b      	lsrs	r3, r3, #10
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ba:	0a1b      	lsrs	r3, r3, #8
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082ce:	085b      	lsrs	r3, r3, #1
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr
 80082f4:	004005ff 	.word	0x004005ff

080082f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	370c      	adds	r7, #12
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008350:	b5b0      	push	{r4, r5, r7, lr}
 8008352:	b08e      	sub	sp, #56	@ 0x38
 8008354:	af04      	add	r7, sp, #16
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800835a:	2300      	movs	r3, #0
 800835c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2203      	movs	r2, #3
 8008364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836c:	2b03      	cmp	r3, #3
 800836e:	d02e      	beq.n	80083ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008376:	d106      	bne.n	8008386 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800837c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	639a      	str	r2, [r3, #56]	@ 0x38
 8008384:	e029      	b.n	80083da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800838c:	d10a      	bne.n	80083a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa1c 	bl	80087cc <SD_WideBus_Enable>
 8008394:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	431a      	orrs	r2, r3
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80083a2:	e01a      	b.n	80083da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fa59 	bl	8008862 <SD_WideBus_Disable>
 80083b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	431a      	orrs	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80083be:	e00c      	b.n	80083da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80083cc:	e005      	b.n	80083da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00b      	beq.n	80083fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a26      	ldr	r2, [pc, #152]	@ (8008480 <HAL_SD_ConfigWideBusOperation+0x130>)
 80083e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80083f8:	e01f      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	695b      	ldr	r3, [r3, #20]
 8008414:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681d      	ldr	r5, [r3, #0]
 8008420:	466c      	mov	r4, sp
 8008422:	f107 0314 	add.w	r3, r7, #20
 8008426:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800842a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800842e:	f107 0308 	add.w	r3, r7, #8
 8008432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008434:	4628      	mov	r0, r5
 8008436:	f002 f937 	bl	800a6a8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008442:	4618      	mov	r0, r3
 8008444:	f002 fa0b 	bl	800a85e <SDMMC_CmdBlockLength>
 8008448:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00c      	beq.n	800846a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a0a      	ldr	r2, [pc, #40]	@ (8008480 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008456:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	431a      	orrs	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8008472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008476:	4618      	mov	r0, r3
 8008478:	3728      	adds	r7, #40	@ 0x28
 800847a:	46bd      	mov	sp, r7
 800847c:	bdb0      	pop	{r4, r5, r7, pc}
 800847e:	bf00      	nop
 8008480:	004005ff 	.word	0x004005ff

08008484 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f970 	bl	800877c <SD_SendStatus>
 800849c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	431a      	orrs	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	0a5b      	lsrs	r3, r3, #9
 80084b4:	f003 030f 	and.w	r3, r3, #15
 80084b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80084ba:	693b      	ldr	r3, [r7, #16]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084c4:	b5b0      	push	{r4, r5, r7, lr}
 80084c6:	b094      	sub	sp, #80	@ 0x50
 80084c8:	af04      	add	r7, sp, #16
 80084ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80084cc:	2301      	movs	r3, #1
 80084ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f002 f93e 	bl	800a756 <SDIO_GetPowerState>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d102      	bne.n	80084e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084e0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80084e4:	e0b8      	b.n	8008658 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	d02f      	beq.n	800854e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f002 fb68 	bl	800abc8 <SDMMC_CmdSendCID>
 80084f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80084fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <SD_InitCard+0x40>
    {
      return errorstate;
 8008500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008502:	e0a9      	b.n	8008658 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2100      	movs	r1, #0
 800850a:	4618      	mov	r0, r3
 800850c:	f002 f968 	bl	800a7e0 <SDIO_GetResponse>
 8008510:	4602      	mov	r2, r0
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2104      	movs	r1, #4
 800851c:	4618      	mov	r0, r3
 800851e:	f002 f95f 	bl	800a7e0 <SDIO_GetResponse>
 8008522:	4602      	mov	r2, r0
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	2108      	movs	r1, #8
 800852e:	4618      	mov	r0, r3
 8008530:	f002 f956 	bl	800a7e0 <SDIO_GetResponse>
 8008534:	4602      	mov	r2, r0
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	210c      	movs	r1, #12
 8008540:	4618      	mov	r0, r3
 8008542:	f002 f94d 	bl	800a7e0 <SDIO_GetResponse>
 8008546:	4602      	mov	r2, r0
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008552:	2b03      	cmp	r3, #3
 8008554:	d00d      	beq.n	8008572 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f107 020e 	add.w	r2, r7, #14
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f002 fb6e 	bl	800ac42 <SDMMC_CmdSetRelAdd>
 8008566:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <SD_InitCard+0xae>
    {
      return errorstate;
 800856e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008570:	e072      	b.n	8008658 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008576:	2b03      	cmp	r3, #3
 8008578:	d036      	beq.n	80085e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800857a:	89fb      	ldrh	r3, [r7, #14]
 800857c:	461a      	mov	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800858a:	041b      	lsls	r3, r3, #16
 800858c:	4619      	mov	r1, r3
 800858e:	4610      	mov	r0, r2
 8008590:	f002 fb38 	bl	800ac04 <SDMMC_CmdSendCSD>
 8008594:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800859c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800859e:	e05b      	b.n	8008658 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2100      	movs	r1, #0
 80085a6:	4618      	mov	r0, r3
 80085a8:	f002 f91a 	bl	800a7e0 <SDIO_GetResponse>
 80085ac:	4602      	mov	r2, r0
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2104      	movs	r1, #4
 80085b8:	4618      	mov	r0, r3
 80085ba:	f002 f911 	bl	800a7e0 <SDIO_GetResponse>
 80085be:	4602      	mov	r2, r0
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2108      	movs	r1, #8
 80085ca:	4618      	mov	r0, r3
 80085cc:	f002 f908 	bl	800a7e0 <SDIO_GetResponse>
 80085d0:	4602      	mov	r2, r0
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	210c      	movs	r1, #12
 80085dc:	4618      	mov	r0, r3
 80085de:	f002 f8ff 	bl	800a7e0 <SDIO_GetResponse>
 80085e2:	4602      	mov	r2, r0
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2104      	movs	r1, #4
 80085ee:	4618      	mov	r0, r3
 80085f0:	f002 f8f6 	bl	800a7e0 <SDIO_GetResponse>
 80085f4:	4603      	mov	r3, r0
 80085f6:	0d1a      	lsrs	r2, r3, #20
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80085fc:	f107 0310 	add.w	r3, r7, #16
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff fcd4 	bl	8007fb0 <HAL_SD_GetCardCSD>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800860e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008612:	e021      	b.n	8008658 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6819      	ldr	r1, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800861c:	041b      	lsls	r3, r3, #16
 800861e:	2200      	movs	r2, #0
 8008620:	461c      	mov	r4, r3
 8008622:	4615      	mov	r5, r2
 8008624:	4622      	mov	r2, r4
 8008626:	462b      	mov	r3, r5
 8008628:	4608      	mov	r0, r1
 800862a:	f002 f9e5 	bl	800a9f8 <SDMMC_CmdSelDesel>
 800862e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <SD_InitCard+0x176>
  {
    return errorstate;
 8008636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008638:	e00e      	b.n	8008658 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681d      	ldr	r5, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	466c      	mov	r4, sp
 8008642:	f103 0210 	add.w	r2, r3, #16
 8008646:	ca07      	ldmia	r2, {r0, r1, r2}
 8008648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800864c:	3304      	adds	r3, #4
 800864e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008650:	4628      	mov	r0, r5
 8008652:	f002 f829 	bl	800a6a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3740      	adds	r7, #64	@ 0x40
 800865c:	46bd      	mov	sp, r7
 800865e:	bdb0      	pop	{r4, r5, r7, pc}

08008660 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800866c:	2300      	movs	r3, #0
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	2300      	movs	r3, #0
 8008672:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4618      	mov	r0, r3
 800867a:	f002 f9e0 	bl	800aa3e <SDMMC_CmdGoIdleState>
 800867e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	e072      	b.n	8008770 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4618      	mov	r0, r3
 8008690:	f002 f9f3 	bl	800aa7a <SDMMC_CmdOperCond>
 8008694:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00d      	beq.n	80086b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f002 f9c9 	bl	800aa3e <SDMMC_CmdGoIdleState>
 80086ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d004      	beq.n	80086be <SD_PowerON+0x5e>
    {
      return errorstate;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	e05b      	b.n	8008770 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d137      	bne.n	8008736 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2100      	movs	r1, #0
 80086cc:	4618      	mov	r0, r3
 80086ce:	f002 f9f3 	bl	800aab8 <SDMMC_CmdAppCommand>
 80086d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d02d      	beq.n	8008736 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80086da:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80086de:	e047      	b.n	8008770 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2100      	movs	r1, #0
 80086e6:	4618      	mov	r0, r3
 80086e8:	f002 f9e6 	bl	800aab8 <SDMMC_CmdAppCommand>
 80086ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d001      	beq.n	80086f8 <SD_PowerON+0x98>
    {
      return errorstate;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	e03b      	b.n	8008770 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	491e      	ldr	r1, [pc, #120]	@ (8008778 <SD_PowerON+0x118>)
 80086fe:	4618      	mov	r0, r3
 8008700:	f002 f9fc 	bl	800aafc <SDMMC_CmdAppOperCommand>
 8008704:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800870c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008710:	e02e      	b.n	8008770 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2100      	movs	r1, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f002 f861 	bl	800a7e0 <SDIO_GetResponse>
 800871e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	0fdb      	lsrs	r3, r3, #31
 8008724:	2b01      	cmp	r3, #1
 8008726:	d101      	bne.n	800872c <SD_PowerON+0xcc>
 8008728:	2301      	movs	r3, #1
 800872a:	e000      	b.n	800872e <SD_PowerON+0xce>
 800872c:	2300      	movs	r3, #0
 800872e:	613b      	str	r3, [r7, #16]

    count++;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	3301      	adds	r3, #1
 8008734:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800873c:	4293      	cmp	r3, r2
 800873e:	d802      	bhi.n	8008746 <SD_PowerON+0xe6>
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d0cc      	beq.n	80086e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800874c:	4293      	cmp	r3, r2
 800874e:	d902      	bls.n	8008756 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008750:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008754:	e00c      	b.n	8008770 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800875c:	2b00      	cmp	r3, #0
 800875e:	d003      	beq.n	8008768 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	645a      	str	r2, [r3, #68]	@ 0x44
 8008766:	e002      	b.n	800876e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	c1100000 	.word	0xc1100000

0800877c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d102      	bne.n	8008792 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800878c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008790:	e018      	b.n	80087c4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800879a:	041b      	lsls	r3, r3, #16
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f002 fa70 	bl	800ac84 <SDMMC_CmdSendStatus>
 80087a4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	e009      	b.n	80087c4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f002 f812 	bl	800a7e0 <SDIO_GetResponse>
 80087bc:	4602      	mov	r2, r0
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80087d4:	2300      	movs	r3, #0
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	2300      	movs	r3, #0
 80087da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2100      	movs	r1, #0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 fffc 	bl	800a7e0 <SDIO_GetResponse>
 80087e8:	4603      	mov	r3, r0
 80087ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087f2:	d102      	bne.n	80087fa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80087f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80087f8:	e02f      	b.n	800885a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80087fa:	f107 030c 	add.w	r3, r7, #12
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f879 	bl	80088f8 <SD_FindSCR>
 8008806:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	e023      	b.n	800885a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01c      	beq.n	8008856 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008824:	041b      	lsls	r3, r3, #16
 8008826:	4619      	mov	r1, r3
 8008828:	4610      	mov	r0, r2
 800882a:	f002 f945 	bl	800aab8 <SDMMC_CmdAppCommand>
 800882e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	e00f      	b.n	800885a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2102      	movs	r1, #2
 8008840:	4618      	mov	r0, r3
 8008842:	f002 f97e 	bl	800ab42 <SDMMC_CmdBusWidth>
 8008846:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	e003      	b.n	800885a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008852:	2300      	movs	r3, #0
 8008854:	e001      	b.n	800885a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008856:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800885a:	4618      	mov	r0, r3
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b086      	sub	sp, #24
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2100      	movs	r1, #0
 8008878:	4618      	mov	r0, r3
 800887a:	f001 ffb1 	bl	800a7e0 <SDIO_GetResponse>
 800887e:	4603      	mov	r3, r0
 8008880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008884:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008888:	d102      	bne.n	8008890 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800888a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800888e:	e02f      	b.n	80088f0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008890:	f107 030c 	add.w	r3, r7, #12
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f82e 	bl	80088f8 <SD_FindSCR>
 800889c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	e023      	b.n	80088f0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01c      	beq.n	80088ec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f002 f8fa 	bl	800aab8 <SDMMC_CmdAppCommand>
 80088c4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	e00f      	b.n	80088f0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2100      	movs	r1, #0
 80088d6:	4618      	mov	r0, r3
 80088d8:	f002 f933 	bl	800ab42 <SDMMC_CmdBusWidth>
 80088dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	e003      	b.n	80088f0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	e001      	b.n	80088f0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80088ec:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3718      	adds	r7, #24
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80088f8:	b590      	push	{r4, r7, lr}
 80088fa:	b08f      	sub	sp, #60	@ 0x3c
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008902:	f7f9 fc11 	bl	8002128 <HAL_GetTick>
 8008906:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800890c:	2300      	movs	r3, #0
 800890e:	60bb      	str	r3, [r7, #8]
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2108      	movs	r1, #8
 800891e:	4618      	mov	r0, r3
 8008920:	f001 ff9d 	bl	800a85e <SDMMC_CmdBlockLength>
 8008924:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <SD_FindSCR+0x38>
  {
    return errorstate;
 800892c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892e:	e0b2      	b.n	8008a96 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008938:	041b      	lsls	r3, r3, #16
 800893a:	4619      	mov	r1, r3
 800893c:	4610      	mov	r0, r2
 800893e:	f002 f8bb 	bl	800aab8 <SDMMC_CmdAppCommand>
 8008942:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <SD_FindSCR+0x56>
  {
    return errorstate;
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	e0a3      	b.n	8008a96 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800894e:	f04f 33ff 	mov.w	r3, #4294967295
 8008952:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008954:	2308      	movs	r3, #8
 8008956:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008958:	2330      	movs	r3, #48	@ 0x30
 800895a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800895c:	2302      	movs	r3, #2
 800895e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008960:	2300      	movs	r3, #0
 8008962:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008964:	2301      	movs	r3, #1
 8008966:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f107 0210 	add.w	r2, r7, #16
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f001 ff47 	bl	800a806 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4618      	mov	r0, r3
 800897e:	f002 f902 	bl	800ab86 <SDMMC_CmdSendSCR>
 8008982:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008986:	2b00      	cmp	r3, #0
 8008988:	d02a      	beq.n	80089e0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800898a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898c:	e083      	b.n	8008a96 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00f      	beq.n	80089bc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	f107 0208 	add.w	r2, r7, #8
 80089a8:	18d4      	adds	r4, r2, r3
 80089aa:	4608      	mov	r0, r1
 80089ac:	f001 fea7 	bl	800a6fe <SDIO_ReadFIFO>
 80089b0:	4603      	mov	r3, r0
 80089b2:	6023      	str	r3, [r4, #0]
      index++;
 80089b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b6:	3301      	adds	r3, #1
 80089b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ba:	e006      	b.n	80089ca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d012      	beq.n	80089f0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80089ca:	f7f9 fbad 	bl	8002128 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d8:	d102      	bne.n	80089e0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089da:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80089de:	e05a      	b.n	8008a96 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e6:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0cf      	beq.n	800898e <SD_FindSCR+0x96>
 80089ee:	e000      	b.n	80089f2 <SD_FindSCR+0xfa>
      break;
 80089f0:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f8:	f003 0308 	and.w	r3, r3, #8
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2208      	movs	r2, #8
 8008a06:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a08:	2308      	movs	r3, #8
 8008a0a:	e044      	b.n	8008a96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a22:	2302      	movs	r3, #2
 8008a24:	e037      	b.n	8008a96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a3c:	2320      	movs	r3, #32
 8008a3e:	e02a      	b.n	8008a96 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a48:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	061a      	lsls	r2, r3, #24
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	021b      	lsls	r3, r3, #8
 8008a52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	0a1b      	lsrs	r3, r3, #8
 8008a5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a60:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	0e1b      	lsrs	r3, r3, #24
 8008a66:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	601a      	str	r2, [r3, #0]
    scr++;
 8008a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6e:	3304      	adds	r3, #4
 8008a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	061a      	lsls	r2, r3, #24
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	021b      	lsls	r3, r3, #8
 8008a7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	0a1b      	lsrs	r3, r3, #8
 8008a84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a88:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	0e1b      	lsrs	r3, r3, #24
 8008a8e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a92:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	373c      	adds	r7, #60	@ 0x3c
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd90      	pop	{r4, r7, pc}

08008a9e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e025      	b.n	8008afe <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d106      	bne.n	8008acc <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7f9 f8d0 	bl	8001c6c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3304      	adds	r3, #4
 8008adc:	4619      	mov	r1, r3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	f001 fd1c 	bl	800a51c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	461a      	mov	r2, r3
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	f001 fd71 	bl	800a5d6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d101      	bne.n	8008b18 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e07b      	b.n	8008c10 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d108      	bne.n	8008b32 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b28:	d009      	beq.n	8008b3e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	61da      	str	r2, [r3, #28]
 8008b30:	e005      	b.n	8008b3e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d106      	bne.n	8008b5e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f7f8 fed9 	bl	8001910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2202      	movs	r2, #2
 8008b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b86:	431a      	orrs	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b90:	431a      	orrs	r2, r3
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	695b      	ldr	r3, [r3, #20]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bb8:	431a      	orrs	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc2:	ea42 0103 	orr.w	r1, r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	0c1b      	lsrs	r3, r3, #16
 8008bdc:	f003 0104 	and.w	r1, r3, #4
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	f003 0210 	and.w	r2, r3, #16
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	69da      	ldr	r2, [r3, #28]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	603b      	str	r3, [r7, #0]
 8008c24:	4613      	mov	r3, r2
 8008c26:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c28:	f7f9 fa7e 	bl	8002128 <HAL_GetTick>
 8008c2c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008c2e:	88fb      	ldrh	r3, [r7, #6]
 8008c30:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d001      	beq.n	8008c42 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008c3e:	2302      	movs	r3, #2
 8008c40:	e12a      	b.n	8008e98 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d002      	beq.n	8008c4e <HAL_SPI_Transmit+0x36>
 8008c48:	88fb      	ldrh	r3, [r7, #6]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e122      	b.n	8008e98 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_SPI_Transmit+0x48>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e11b      	b.n	8008e98 <HAL_SPI_Transmit+0x280>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2203      	movs	r2, #3
 8008c6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	88fa      	ldrh	r2, [r7, #6]
 8008c80:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	88fa      	ldrh	r2, [r7, #6]
 8008c86:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cae:	d10f      	bne.n	8008cd0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cda:	2b40      	cmp	r3, #64	@ 0x40
 8008cdc:	d007      	beq.n	8008cee <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cf6:	d152      	bne.n	8008d9e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <HAL_SPI_Transmit+0xee>
 8008d00:	8b7b      	ldrh	r3, [r7, #26]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d145      	bne.n	8008d92 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0a:	881a      	ldrh	r2, [r3, #0]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d16:	1c9a      	adds	r2, r3, #2
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	3b01      	subs	r3, #1
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008d2a:	e032      	b.n	8008d92 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d112      	bne.n	8008d60 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3e:	881a      	ldrh	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d4a:	1c9a      	adds	r2, r3, #2
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008d5e:	e018      	b.n	8008d92 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d60:	f7f9 f9e2 	bl	8002128 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	683a      	ldr	r2, [r7, #0]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d803      	bhi.n	8008d78 <HAL_SPI_Transmit+0x160>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d76:	d102      	bne.n	8008d7e <HAL_SPI_Transmit+0x166>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d109      	bne.n	8008d92 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e082      	b.n	8008e98 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1c7      	bne.n	8008d2c <HAL_SPI_Transmit+0x114>
 8008d9c:	e053      	b.n	8008e46 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <HAL_SPI_Transmit+0x194>
 8008da6:	8b7b      	ldrh	r3, [r7, #26]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d147      	bne.n	8008e3c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	330c      	adds	r3, #12
 8008db6:	7812      	ldrb	r2, [r2, #0]
 8008db8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbe:	1c5a      	adds	r2, r3, #1
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008dd2:	e033      	b.n	8008e3c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b02      	cmp	r3, #2
 8008de0:	d113      	bne.n	8008e0a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	330c      	adds	r3, #12
 8008dec:	7812      	ldrb	r2, [r2, #0]
 8008dee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df4:	1c5a      	adds	r2, r3, #1
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	3b01      	subs	r3, #1
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008e08:	e018      	b.n	8008e3c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e0a:	f7f9 f98d 	bl	8002128 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d803      	bhi.n	8008e22 <HAL_SPI_Transmit+0x20a>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e20:	d102      	bne.n	8008e28 <HAL_SPI_Transmit+0x210>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d109      	bne.n	8008e3c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e02d      	b.n	8008e98 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1c6      	bne.n	8008dd4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008e46:	69fa      	ldr	r2, [r7, #28]
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fbd8 	bl	8009600 <SPI_EndRxTxTransaction>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d002      	beq.n	8008e5c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e64:	2300      	movs	r3, #0
 8008e66:	617b      	str	r3, [r7, #20]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e000      	b.n	8008e98 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008e96:	2300      	movs	r3, #0
  }
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	603b      	str	r3, [r7, #0]
 8008eac:	4613      	mov	r3, r2
 8008eae:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d001      	beq.n	8008ec0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	e104      	b.n	80090ca <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008ec8:	d112      	bne.n	8008ef0 <HAL_SPI_Receive+0x50>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10e      	bne.n	8008ef0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2204      	movs	r2, #4
 8008ed6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008eda:	88fa      	ldrh	r2, [r7, #6]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f8f3 	bl	80090d2 <HAL_SPI_TransmitReceive>
 8008eec:	4603      	mov	r3, r0
 8008eee:	e0ec      	b.n	80090ca <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ef0:	f7f9 f91a 	bl	8002128 <HAL_GetTick>
 8008ef4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <HAL_SPI_Receive+0x62>
 8008efc:	88fb      	ldrh	r3, [r7, #6]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e0e1      	b.n	80090ca <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_SPI_Receive+0x74>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e0da      	b.n	80090ca <HAL_SPI_Receive+0x22a>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2204      	movs	r2, #4
 8008f20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	88fa      	ldrh	r2, [r7, #6]
 8008f34:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	88fa      	ldrh	r2, [r7, #6]
 8008f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2200      	movs	r2, #0
 8008f52:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f62:	d10f      	bne.n	8008f84 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008f82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8e:	2b40      	cmp	r3, #64	@ 0x40
 8008f90:	d007      	beq.n	8008fa2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fa0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d170      	bne.n	800908c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008faa:	e035      	b.n	8009018 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d115      	bne.n	8008fe6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f103 020c 	add.w	r2, r3, #12
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	b2d2      	uxtb	r2, r2
 8008fca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008fe4:	e018      	b.n	8009018 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fe6:	f7f9 f89f 	bl	8002128 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	683a      	ldr	r2, [r7, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d803      	bhi.n	8008ffe <HAL_SPI_Receive+0x15e>
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffc:	d102      	bne.n	8009004 <HAL_SPI_Receive+0x164>
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d109      	bne.n	8009018 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2201      	movs	r2, #1
 8009008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e058      	b.n	80090ca <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800901c:	b29b      	uxth	r3, r3
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1c4      	bne.n	8008fac <HAL_SPI_Receive+0x10c>
 8009022:	e038      	b.n	8009096 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b01      	cmp	r3, #1
 8009030:	d113      	bne.n	800905a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800903c:	b292      	uxth	r2, r2
 800903e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009044:	1c9a      	adds	r2, r3, #2
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800904e:	b29b      	uxth	r3, r3
 8009050:	3b01      	subs	r3, #1
 8009052:	b29a      	uxth	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009058:	e018      	b.n	800908c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800905a:	f7f9 f865 	bl	8002128 <HAL_GetTick>
 800905e:	4602      	mov	r2, r0
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	429a      	cmp	r2, r3
 8009068:	d803      	bhi.n	8009072 <HAL_SPI_Receive+0x1d2>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009070:	d102      	bne.n	8009078 <HAL_SPI_Receive+0x1d8>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d109      	bne.n	800908c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e01e      	b.n	80090ca <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009090:	b29b      	uxth	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1c6      	bne.n	8009024 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f000 fa4a 	bl	8009534 <SPI_EndRxTransaction>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2220      	movs	r2, #32
 80090aa:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e000      	b.n	80090ca <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80090c8:	2300      	movs	r3, #0
  }
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b08a      	sub	sp, #40	@ 0x28
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	607a      	str	r2, [r7, #4]
 80090de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80090e0:	2301      	movs	r3, #1
 80090e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090e4:	f7f9 f820 	bl	8002128 <HAL_GetTick>
 80090e8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80090f0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80090f8:	887b      	ldrh	r3, [r7, #2]
 80090fa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80090fc:	7ffb      	ldrb	r3, [r7, #31]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d00c      	beq.n	800911c <HAL_SPI_TransmitReceive+0x4a>
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009108:	d106      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d102      	bne.n	8009118 <HAL_SPI_TransmitReceive+0x46>
 8009112:	7ffb      	ldrb	r3, [r7, #31]
 8009114:	2b04      	cmp	r3, #4
 8009116:	d001      	beq.n	800911c <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8009118:	2302      	movs	r3, #2
 800911a:	e17f      	b.n	800941c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d005      	beq.n	800912e <HAL_SPI_TransmitReceive+0x5c>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <HAL_SPI_TransmitReceive+0x5c>
 8009128:	887b      	ldrh	r3, [r7, #2]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e174      	b.n	800941c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_SPI_TransmitReceive+0x6e>
 800913c:	2302      	movs	r3, #2
 800913e:	e16d      	b.n	800941c <HAL_SPI_TransmitReceive+0x34a>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b04      	cmp	r3, #4
 8009152:	d003      	beq.n	800915c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2205      	movs	r2, #5
 8009158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2200      	movs	r2, #0
 8009160:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	887a      	ldrh	r2, [r7, #2]
 800916c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	887a      	ldrh	r2, [r7, #2]
 8009172:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	887a      	ldrh	r2, [r7, #2]
 800917e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	887a      	ldrh	r2, [r7, #2]
 8009184:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2200      	movs	r2, #0
 8009190:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800919c:	2b40      	cmp	r3, #64	@ 0x40
 800919e:	d007      	beq.n	80091b0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091b8:	d17e      	bne.n	80092b8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <HAL_SPI_TransmitReceive+0xf6>
 80091c2:	8afb      	ldrh	r3, [r7, #22]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d16c      	bne.n	80092a2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091cc:	881a      	ldrh	r2, [r3, #0]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d8:	1c9a      	adds	r2, r3, #2
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	3b01      	subs	r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091ec:	e059      	b.n	80092a2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d11b      	bne.n	8009234 <HAL_SPI_TransmitReceive+0x162>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d016      	beq.n	8009234 <HAL_SPI_TransmitReceive+0x162>
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	2b01      	cmp	r3, #1
 800920a:	d113      	bne.n	8009234 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009210:	881a      	ldrh	r2, [r3, #0]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800921c:	1c9a      	adds	r2, r3, #2
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009226:	b29b      	uxth	r3, r3
 8009228:	3b01      	subs	r3, #1
 800922a:	b29a      	uxth	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b01      	cmp	r3, #1
 8009240:	d119      	bne.n	8009276 <HAL_SPI_TransmitReceive+0x1a4>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d014      	beq.n	8009276 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	b292      	uxth	r2, r2
 8009258:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800925e:	1c9a      	adds	r2, r3, #2
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009268:	b29b      	uxth	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	b29a      	uxth	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009272:	2301      	movs	r3, #1
 8009274:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009276:	f7f8 ff57 	bl	8002128 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009282:	429a      	cmp	r2, r3
 8009284:	d80d      	bhi.n	80092a2 <HAL_SPI_TransmitReceive+0x1d0>
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928c:	d009      	beq.n	80092a2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e0bc      	b.n	800941c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1a0      	bne.n	80091ee <HAL_SPI_TransmitReceive+0x11c>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d19b      	bne.n	80091ee <HAL_SPI_TransmitReceive+0x11c>
 80092b6:	e082      	b.n	80093be <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <HAL_SPI_TransmitReceive+0x1f4>
 80092c0:	8afb      	ldrh	r3, [r7, #22]
 80092c2:	2b01      	cmp	r3, #1
 80092c4:	d171      	bne.n	80093aa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	330c      	adds	r3, #12
 80092d0:	7812      	ldrb	r2, [r2, #0]
 80092d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d8:	1c5a      	adds	r2, r3, #1
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	3b01      	subs	r3, #1
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092ec:	e05d      	b.n	80093aa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f003 0302 	and.w	r3, r3, #2
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d11c      	bne.n	8009336 <HAL_SPI_TransmitReceive+0x264>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009300:	b29b      	uxth	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d017      	beq.n	8009336 <HAL_SPI_TransmitReceive+0x264>
 8009306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009308:	2b01      	cmp	r3, #1
 800930a:	d114      	bne.n	8009336 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	330c      	adds	r3, #12
 8009316:	7812      	ldrb	r2, [r2, #0]
 8009318:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009328:	b29b      	uxth	r3, r3
 800932a:	3b01      	subs	r3, #1
 800932c:	b29a      	uxth	r2, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b01      	cmp	r3, #1
 8009342:	d119      	bne.n	8009378 <HAL_SPI_TransmitReceive+0x2a6>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009348:	b29b      	uxth	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d014      	beq.n	8009378 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009358:	b2d2      	uxtb	r2, r2
 800935a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800936a:	b29b      	uxth	r3, r3
 800936c:	3b01      	subs	r3, #1
 800936e:	b29a      	uxth	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009374:	2301      	movs	r3, #1
 8009376:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009378:	f7f8 fed6 	bl	8002128 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009384:	429a      	cmp	r2, r3
 8009386:	d803      	bhi.n	8009390 <HAL_SPI_TransmitReceive+0x2be>
 8009388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	d102      	bne.n	8009396 <HAL_SPI_TransmitReceive+0x2c4>
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	2b00      	cmp	r3, #0
 8009394:	d109      	bne.n	80093aa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80093a6:	2303      	movs	r3, #3
 80093a8:	e038      	b.n	800941c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d19c      	bne.n	80092ee <HAL_SPI_TransmitReceive+0x21c>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d197      	bne.n	80092ee <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093be:	6a3a      	ldr	r2, [r7, #32]
 80093c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 f91c 	bl	8009600 <SPI_EndRxTxTransaction>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d008      	beq.n	80093e0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2220      	movs	r2, #32
 80093d2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e01d      	b.n	800941c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10a      	bne.n	80093fe <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093e8:	2300      	movs	r3, #0
 80093ea:	613b      	str	r3, [r7, #16]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	613b      	str	r3, [r7, #16]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	613b      	str	r3, [r7, #16]
 80093fc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800941a:	2300      	movs	r3, #0
  }
}
 800941c:	4618      	mov	r0, r3
 800941e:	3728      	adds	r7, #40	@ 0x28
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	4613      	mov	r3, r2
 8009432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009434:	f7f8 fe78 	bl	8002128 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943c:	1a9b      	subs	r3, r3, r2
 800943e:	683a      	ldr	r2, [r7, #0]
 8009440:	4413      	add	r3, r2
 8009442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009444:	f7f8 fe70 	bl	8002128 <HAL_GetTick>
 8009448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800944a:	4b39      	ldr	r3, [pc, #228]	@ (8009530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	015b      	lsls	r3, r3, #5
 8009450:	0d1b      	lsrs	r3, r3, #20
 8009452:	69fa      	ldr	r2, [r7, #28]
 8009454:	fb02 f303 	mul.w	r3, r2, r3
 8009458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800945a:	e054      	b.n	8009506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009462:	d050      	beq.n	8009506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009464:	f7f8 fe60 	bl	8002128 <HAL_GetTick>
 8009468:	4602      	mov	r2, r0
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	1ad3      	subs	r3, r2, r3
 800946e:	69fa      	ldr	r2, [r7, #28]
 8009470:	429a      	cmp	r2, r3
 8009472:	d902      	bls.n	800947a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d13d      	bne.n	80094f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009492:	d111      	bne.n	80094b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800949c:	d004      	beq.n	80094a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094a6:	d107      	bne.n	80094b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094c0:	d10f      	bne.n	80094e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80094e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e017      	b.n	8009526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d101      	bne.n	8009500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80094fc:	2300      	movs	r3, #0
 80094fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	3b01      	subs	r3, #1
 8009504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4013      	ands	r3, r2
 8009510:	68ba      	ldr	r2, [r7, #8]
 8009512:	429a      	cmp	r2, r3
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2300      	movne	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	461a      	mov	r2, r3
 800951e:	79fb      	ldrb	r3, [r7, #7]
 8009520:	429a      	cmp	r2, r3
 8009522:	d19b      	bne.n	800945c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3720      	adds	r7, #32
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	20000000 	.word	0x20000000

08009534 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009548:	d111      	bne.n	800956e <SPI_EndRxTransaction+0x3a>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009552:	d004      	beq.n	800955e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800955c:	d107      	bne.n	800956e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800956c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009576:	d12a      	bne.n	80095ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009580:	d012      	beq.n	80095a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2200      	movs	r2, #0
 800958a:	2180      	movs	r1, #128	@ 0x80
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f7ff ff49 	bl	8009424 <SPI_WaitFlagStateUntilTimeout>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d02d      	beq.n	80095f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800959c:	f043 0220 	orr.w	r2, r3, #32
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e026      	b.n	80095f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	2101      	movs	r1, #1
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f7ff ff36 	bl	8009424 <SPI_WaitFlagStateUntilTimeout>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d01a      	beq.n	80095f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095c2:	f043 0220 	orr.w	r2, r3, #32
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e013      	b.n	80095f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2200      	movs	r2, #0
 80095d6:	2101      	movs	r1, #1
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7ff ff23 	bl	8009424 <SPI_WaitFlagStateUntilTimeout>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d007      	beq.n	80095f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095e8:	f043 0220 	orr.w	r2, r3, #32
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80095f0:	2303      	movs	r3, #3
 80095f2:	e000      	b.n	80095f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80095f4:	2300      	movs	r3, #0
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
	...

08009600 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b088      	sub	sp, #32
 8009604:	af02      	add	r7, sp, #8
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2201      	movs	r2, #1
 8009614:	2102      	movs	r1, #2
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f7ff ff04 	bl	8009424 <SPI_WaitFlagStateUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d007      	beq.n	8009632 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009626:	f043 0220 	orr.w	r2, r3, #32
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e032      	b.n	8009698 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009632:	4b1b      	ldr	r3, [pc, #108]	@ (80096a0 <SPI_EndRxTxTransaction+0xa0>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a1b      	ldr	r2, [pc, #108]	@ (80096a4 <SPI_EndRxTxTransaction+0xa4>)
 8009638:	fba2 2303 	umull	r2, r3, r2, r3
 800963c:	0d5b      	lsrs	r3, r3, #21
 800963e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009642:	fb02 f303 	mul.w	r3, r2, r3
 8009646:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009650:	d112      	bne.n	8009678 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2200      	movs	r2, #0
 800965a:	2180      	movs	r1, #128	@ 0x80
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff fee1 	bl	8009424 <SPI_WaitFlagStateUntilTimeout>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d016      	beq.n	8009696 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966c:	f043 0220 	orr.w	r2, r3, #32
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e00f      	b.n	8009698 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	3b01      	subs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800968e:	2b80      	cmp	r3, #128	@ 0x80
 8009690:	d0f2      	beq.n	8009678 <SPI_EndRxTxTransaction+0x78>
 8009692:	e000      	b.n	8009696 <SPI_EndRxTxTransaction+0x96>
        break;
 8009694:	bf00      	nop
  }

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3718      	adds	r7, #24
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20000000 	.word	0x20000000
 80096a4:	165e9f81 	.word	0x165e9f81

080096a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e041      	b.n	800973e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d106      	bne.n	80096d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7f8 f986 	bl	80019e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4610      	mov	r0, r2
 80096e8:	f000 fa7e 	bl	8009be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b01      	cmp	r3, #1
 800975a:	d001      	beq.n	8009760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e04e      	b.n	80097fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0201 	orr.w	r2, r2, #1
 8009776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a23      	ldr	r2, [pc, #140]	@ (800980c <HAL_TIM_Base_Start_IT+0xc4>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d022      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x80>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800978a:	d01d      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x80>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a1f      	ldr	r2, [pc, #124]	@ (8009810 <HAL_TIM_Base_Start_IT+0xc8>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d018      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x80>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a1e      	ldr	r2, [pc, #120]	@ (8009814 <HAL_TIM_Base_Start_IT+0xcc>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d013      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x80>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009818 <HAL_TIM_Base_Start_IT+0xd0>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d00e      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x80>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a1b      	ldr	r2, [pc, #108]	@ (800981c <HAL_TIM_Base_Start_IT+0xd4>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d009      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x80>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a19      	ldr	r2, [pc, #100]	@ (8009820 <HAL_TIM_Base_Start_IT+0xd8>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d004      	beq.n	80097c8 <HAL_TIM_Base_Start_IT+0x80>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a18      	ldr	r2, [pc, #96]	@ (8009824 <HAL_TIM_Base_Start_IT+0xdc>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d111      	bne.n	80097ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f003 0307 	and.w	r3, r3, #7
 80097d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b06      	cmp	r3, #6
 80097d8:	d010      	beq.n	80097fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f042 0201 	orr.w	r2, r2, #1
 80097e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097ea:	e007      	b.n	80097fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0201 	orr.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	40010000 	.word	0x40010000
 8009810:	40000400 	.word	0x40000400
 8009814:	40000800 	.word	0x40000800
 8009818:	40000c00 	.word	0x40000c00
 800981c:	40010400 	.word	0x40010400
 8009820:	40014000 	.word	0x40014000
 8009824:	40001800 	.word	0x40001800

08009828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d020      	beq.n	800988c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f003 0302 	and.w	r3, r3, #2
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01b      	beq.n	800988c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f06f 0202 	mvn.w	r2, #2
 800985c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f999 	bl	8009baa <HAL_TIM_IC_CaptureCallback>
 8009878:	e005      	b.n	8009886 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f98b 	bl	8009b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f99c 	bl	8009bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	d020      	beq.n	80098d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	2b00      	cmp	r3, #0
 800989e:	d01b      	beq.n	80098d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f06f 0204 	mvn.w	r2, #4
 80098a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2202      	movs	r2, #2
 80098ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f973 	bl	8009baa <HAL_TIM_IC_CaptureCallback>
 80098c4:	e005      	b.n	80098d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f965 	bl	8009b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f976 	bl	8009bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f003 0308 	and.w	r3, r3, #8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d020      	beq.n	8009924 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f003 0308 	and.w	r3, r3, #8
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d01b      	beq.n	8009924 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f06f 0208 	mvn.w	r2, #8
 80098f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2204      	movs	r2, #4
 80098fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f94d 	bl	8009baa <HAL_TIM_IC_CaptureCallback>
 8009910:	e005      	b.n	800991e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f93f 	bl	8009b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f950 	bl	8009bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f003 0310 	and.w	r3, r3, #16
 800992a:	2b00      	cmp	r3, #0
 800992c:	d020      	beq.n	8009970 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f003 0310 	and.w	r3, r3, #16
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01b      	beq.n	8009970 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f06f 0210 	mvn.w	r2, #16
 8009940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2208      	movs	r2, #8
 8009946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f927 	bl	8009baa <HAL_TIM_IC_CaptureCallback>
 800995c:	e005      	b.n	800996a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f919 	bl	8009b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f92a 	bl	8009bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	f003 0301 	and.w	r3, r3, #1
 8009976:	2b00      	cmp	r3, #0
 8009978:	d00c      	beq.n	8009994 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f003 0301 	and.w	r3, r3, #1
 8009980:	2b00      	cmp	r3, #0
 8009982:	d007      	beq.n	8009994 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f06f 0201 	mvn.w	r2, #1
 800998c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7f7 fd5c 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00c      	beq.n	80099b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d007      	beq.n	80099b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80099b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fae4 	bl	8009f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00c      	beq.n	80099dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d007      	beq.n	80099dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80099d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f8fb 	bl	8009bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00c      	beq.n	8009a00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f003 0320 	and.w	r3, r3, #32
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d007      	beq.n	8009a00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f06f 0220 	mvn.w	r2, #32
 80099f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fab6 	bl	8009f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d101      	bne.n	8009a24 <HAL_TIM_ConfigClockSource+0x1c>
 8009a20:	2302      	movs	r3, #2
 8009a22:	e0b4      	b.n	8009b8e <HAL_TIM_ConfigClockSource+0x186>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a5c:	d03e      	beq.n	8009adc <HAL_TIM_ConfigClockSource+0xd4>
 8009a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a62:	f200 8087 	bhi.w	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a6a:	f000 8086 	beq.w	8009b7a <HAL_TIM_ConfigClockSource+0x172>
 8009a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a72:	d87f      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a74:	2b70      	cmp	r3, #112	@ 0x70
 8009a76:	d01a      	beq.n	8009aae <HAL_TIM_ConfigClockSource+0xa6>
 8009a78:	2b70      	cmp	r3, #112	@ 0x70
 8009a7a:	d87b      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a7c:	2b60      	cmp	r3, #96	@ 0x60
 8009a7e:	d050      	beq.n	8009b22 <HAL_TIM_ConfigClockSource+0x11a>
 8009a80:	2b60      	cmp	r3, #96	@ 0x60
 8009a82:	d877      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a84:	2b50      	cmp	r3, #80	@ 0x50
 8009a86:	d03c      	beq.n	8009b02 <HAL_TIM_ConfigClockSource+0xfa>
 8009a88:	2b50      	cmp	r3, #80	@ 0x50
 8009a8a:	d873      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a8c:	2b40      	cmp	r3, #64	@ 0x40
 8009a8e:	d058      	beq.n	8009b42 <HAL_TIM_ConfigClockSource+0x13a>
 8009a90:	2b40      	cmp	r3, #64	@ 0x40
 8009a92:	d86f      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a94:	2b30      	cmp	r3, #48	@ 0x30
 8009a96:	d064      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x15a>
 8009a98:	2b30      	cmp	r3, #48	@ 0x30
 8009a9a:	d86b      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009a9c:	2b20      	cmp	r3, #32
 8009a9e:	d060      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x15a>
 8009aa0:	2b20      	cmp	r3, #32
 8009aa2:	d867      	bhi.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d05c      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x15a>
 8009aa8:	2b10      	cmp	r3, #16
 8009aaa:	d05a      	beq.n	8009b62 <HAL_TIM_ConfigClockSource+0x15a>
 8009aac:	e062      	b.n	8009b74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009abe:	f000 f9b9 	bl	8009e34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009ad0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	609a      	str	r2, [r3, #8]
      break;
 8009ada:	e04f      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009aec:	f000 f9a2 	bl	8009e34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689a      	ldr	r2, [r3, #8]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009afe:	609a      	str	r2, [r3, #8]
      break;
 8009b00:	e03c      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f000 f916 	bl	8009d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2150      	movs	r1, #80	@ 0x50
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 f96f 	bl	8009dfe <TIM_ITRx_SetConfig>
      break;
 8009b20:	e02c      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f000 f935 	bl	8009d9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2160      	movs	r1, #96	@ 0x60
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 f95f 	bl	8009dfe <TIM_ITRx_SetConfig>
      break;
 8009b40:	e01c      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f000 f8f6 	bl	8009d40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2140      	movs	r1, #64	@ 0x40
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f94f 	bl	8009dfe <TIM_ITRx_SetConfig>
      break;
 8009b60:	e00c      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4610      	mov	r0, r2
 8009b6e:	f000 f946 	bl	8009dfe <TIM_ITRx_SetConfig>
      break;
 8009b72:	e003      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	73fb      	strb	r3, [r7, #15]
      break;
 8009b78:	e000      	b.n	8009b7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b083      	sub	sp, #12
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b083      	sub	sp, #12
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bb2:	bf00      	nop
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bbe:	b480      	push	{r7}
 8009bc0:	b083      	sub	sp, #12
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bc6:	bf00      	nop
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bda:	bf00      	nop
 8009bdc:	370c      	adds	r7, #12
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
	...

08009be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a46      	ldr	r2, [pc, #280]	@ (8009d14 <TIM_Base_SetConfig+0x12c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d013      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c06:	d00f      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a43      	ldr	r2, [pc, #268]	@ (8009d18 <TIM_Base_SetConfig+0x130>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00b      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a42      	ldr	r2, [pc, #264]	@ (8009d1c <TIM_Base_SetConfig+0x134>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d007      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a41      	ldr	r2, [pc, #260]	@ (8009d20 <TIM_Base_SetConfig+0x138>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d003      	beq.n	8009c28 <TIM_Base_SetConfig+0x40>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a40      	ldr	r2, [pc, #256]	@ (8009d24 <TIM_Base_SetConfig+0x13c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d108      	bne.n	8009c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a35      	ldr	r2, [pc, #212]	@ (8009d14 <TIM_Base_SetConfig+0x12c>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d02b      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c48:	d027      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a32      	ldr	r2, [pc, #200]	@ (8009d18 <TIM_Base_SetConfig+0x130>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d023      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a31      	ldr	r2, [pc, #196]	@ (8009d1c <TIM_Base_SetConfig+0x134>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d01f      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a30      	ldr	r2, [pc, #192]	@ (8009d20 <TIM_Base_SetConfig+0x138>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d01b      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a2f      	ldr	r2, [pc, #188]	@ (8009d24 <TIM_Base_SetConfig+0x13c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d017      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8009d28 <TIM_Base_SetConfig+0x140>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d013      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a2d      	ldr	r2, [pc, #180]	@ (8009d2c <TIM_Base_SetConfig+0x144>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d00f      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8009d30 <TIM_Base_SetConfig+0x148>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d00b      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a2b      	ldr	r2, [pc, #172]	@ (8009d34 <TIM_Base_SetConfig+0x14c>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d007      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8009d38 <TIM_Base_SetConfig+0x150>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d003      	beq.n	8009c9a <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a29      	ldr	r2, [pc, #164]	@ (8009d3c <TIM_Base_SetConfig+0x154>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d108      	bne.n	8009cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	689a      	ldr	r2, [r3, #8]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a10      	ldr	r2, [pc, #64]	@ (8009d14 <TIM_Base_SetConfig+0x12c>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d003      	beq.n	8009ce0 <TIM_Base_SetConfig+0xf8>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a12      	ldr	r2, [pc, #72]	@ (8009d24 <TIM_Base_SetConfig+0x13c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d103      	bne.n	8009ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	691a      	ldr	r2, [r3, #16]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d105      	bne.n	8009d06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	f023 0201 	bic.w	r2, r3, #1
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	611a      	str	r2, [r3, #16]
  }
}
 8009d06:	bf00      	nop
 8009d08:	3714      	adds	r7, #20
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	40010000 	.word	0x40010000
 8009d18:	40000400 	.word	0x40000400
 8009d1c:	40000800 	.word	0x40000800
 8009d20:	40000c00 	.word	0x40000c00
 8009d24:	40010400 	.word	0x40010400
 8009d28:	40014000 	.word	0x40014000
 8009d2c:	40014400 	.word	0x40014400
 8009d30:	40014800 	.word	0x40014800
 8009d34:	40001800 	.word	0x40001800
 8009d38:	40001c00 	.word	0x40001c00
 8009d3c:	40002000 	.word	0x40002000

08009d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b087      	sub	sp, #28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6a1b      	ldr	r3, [r3, #32]
 8009d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6a1b      	ldr	r3, [r3, #32]
 8009d56:	f023 0201 	bic.w	r2, r3, #1
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f023 030a 	bic.w	r3, r3, #10
 8009d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	621a      	str	r2, [r3, #32]
}
 8009d92:	bf00      	nop
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b087      	sub	sp, #28
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	6a1b      	ldr	r3, [r3, #32]
 8009db4:	f023 0210 	bic.w	r2, r3, #16
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	699b      	ldr	r3, [r3, #24]
 8009dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009dc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	031b      	lsls	r3, r3, #12
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009dda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	011b      	lsls	r3, r3, #4
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	621a      	str	r2, [r3, #32]
}
 8009df2:	bf00      	nop
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b085      	sub	sp, #20
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
 8009e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	f043 0307 	orr.w	r3, r3, #7
 8009e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	609a      	str	r2, [r3, #8]
}
 8009e28:	bf00      	nop
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	021a      	lsls	r2, r3, #8
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	431a      	orrs	r2, r3
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	697a      	ldr	r2, [r7, #20]
 8009e66:	609a      	str	r2, [r3, #8]
}
 8009e68:	bf00      	nop
 8009e6a:	371c      	adds	r7, #28
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d101      	bne.n	8009e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	e05a      	b.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a21      	ldr	r2, [pc, #132]	@ (8009f50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d022      	beq.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ed8:	d01d      	beq.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a1d      	ldr	r2, [pc, #116]	@ (8009f54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d018      	beq.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d013      	beq.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8009f5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00e      	beq.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a18      	ldr	r2, [pc, #96]	@ (8009f60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d009      	beq.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a17      	ldr	r2, [pc, #92]	@ (8009f64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d004      	beq.n	8009f16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a15      	ldr	r2, [pc, #84]	@ (8009f68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d10c      	bne.n	8009f30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	40010000 	.word	0x40010000
 8009f54:	40000400 	.word	0x40000400
 8009f58:	40000800 	.word	0x40000800
 8009f5c:	40000c00 	.word	0x40000c00
 8009f60:	40010400 	.word	0x40010400
 8009f64:	40014000 	.word	0x40014000
 8009f68:	40001800 	.word	0x40001800

08009f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e042      	b.n	800a02c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d106      	bne.n	8009fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7f7 fd32 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2224      	movs	r2, #36	@ 0x24
 8009fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	68da      	ldr	r2, [r3, #12]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 f82b 	bl	800a034 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	691a      	ldr	r2, [r3, #16]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	695a      	ldr	r2, [r3, #20]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68da      	ldr	r2, [r3, #12]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a00c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2220      	movs	r2, #32
 800a018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2220      	movs	r2, #32
 800a020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3708      	adds	r7, #8
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a038:	b0c0      	sub	sp, #256	@ 0x100
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a050:	68d9      	ldr	r1, [r3, #12]
 800a052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	ea40 0301 	orr.w	r3, r0, r1
 800a05c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a05e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a062:	689a      	ldr	r2, [r3, #8]
 800a064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	431a      	orrs	r2, r3
 800a06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	431a      	orrs	r2, r3
 800a074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	4313      	orrs	r3, r2
 800a07c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a08c:	f021 010c 	bic.w	r1, r1, #12
 800a090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a09a:	430b      	orrs	r3, r1
 800a09c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a09e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ae:	6999      	ldr	r1, [r3, #24]
 800a0b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	ea40 0301 	orr.w	r3, r0, r1
 800a0ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	4b8f      	ldr	r3, [pc, #572]	@ (800a300 <UART_SetConfig+0x2cc>)
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d005      	beq.n	800a0d4 <UART_SetConfig+0xa0>
 800a0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	4b8d      	ldr	r3, [pc, #564]	@ (800a304 <UART_SetConfig+0x2d0>)
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d104      	bne.n	800a0de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a0d4:	f7fc fc26 	bl	8006924 <HAL_RCC_GetPCLK2Freq>
 800a0d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a0dc:	e003      	b.n	800a0e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a0de:	f7fc fc0d 	bl	80068fc <HAL_RCC_GetPCLK1Freq>
 800a0e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ea:	69db      	ldr	r3, [r3, #28]
 800a0ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0f0:	f040 810c 	bne.w	800a30c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a0f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a102:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a106:	4622      	mov	r2, r4
 800a108:	462b      	mov	r3, r5
 800a10a:	1891      	adds	r1, r2, r2
 800a10c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a10e:	415b      	adcs	r3, r3
 800a110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a112:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a116:	4621      	mov	r1, r4
 800a118:	eb12 0801 	adds.w	r8, r2, r1
 800a11c:	4629      	mov	r1, r5
 800a11e:	eb43 0901 	adc.w	r9, r3, r1
 800a122:	f04f 0200 	mov.w	r2, #0
 800a126:	f04f 0300 	mov.w	r3, #0
 800a12a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a12e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a136:	4690      	mov	r8, r2
 800a138:	4699      	mov	r9, r3
 800a13a:	4623      	mov	r3, r4
 800a13c:	eb18 0303 	adds.w	r3, r8, r3
 800a140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a144:	462b      	mov	r3, r5
 800a146:	eb49 0303 	adc.w	r3, r9, r3
 800a14a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a15a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a15e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a162:	460b      	mov	r3, r1
 800a164:	18db      	adds	r3, r3, r3
 800a166:	653b      	str	r3, [r7, #80]	@ 0x50
 800a168:	4613      	mov	r3, r2
 800a16a:	eb42 0303 	adc.w	r3, r2, r3
 800a16e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a170:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a174:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a178:	f7f6 f89a 	bl	80002b0 <__aeabi_uldivmod>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	4b61      	ldr	r3, [pc, #388]	@ (800a308 <UART_SetConfig+0x2d4>)
 800a182:	fba3 2302 	umull	r2, r3, r3, r2
 800a186:	095b      	lsrs	r3, r3, #5
 800a188:	011c      	lsls	r4, r3, #4
 800a18a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a194:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a198:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a19c:	4642      	mov	r2, r8
 800a19e:	464b      	mov	r3, r9
 800a1a0:	1891      	adds	r1, r2, r2
 800a1a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a1a4:	415b      	adcs	r3, r3
 800a1a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a1ac:	4641      	mov	r1, r8
 800a1ae:	eb12 0a01 	adds.w	sl, r2, r1
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	eb43 0b01 	adc.w	fp, r3, r1
 800a1b8:	f04f 0200 	mov.w	r2, #0
 800a1bc:	f04f 0300 	mov.w	r3, #0
 800a1c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a1c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a1c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1cc:	4692      	mov	sl, r2
 800a1ce:	469b      	mov	fp, r3
 800a1d0:	4643      	mov	r3, r8
 800a1d2:	eb1a 0303 	adds.w	r3, sl, r3
 800a1d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a1da:	464b      	mov	r3, r9
 800a1dc:	eb4b 0303 	adc.w	r3, fp, r3
 800a1e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a1f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a1f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	18db      	adds	r3, r3, r3
 800a1fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1fe:	4613      	mov	r3, r2
 800a200:	eb42 0303 	adc.w	r3, r2, r3
 800a204:	647b      	str	r3, [r7, #68]	@ 0x44
 800a206:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a20a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a20e:	f7f6 f84f 	bl	80002b0 <__aeabi_uldivmod>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	4611      	mov	r1, r2
 800a218:	4b3b      	ldr	r3, [pc, #236]	@ (800a308 <UART_SetConfig+0x2d4>)
 800a21a:	fba3 2301 	umull	r2, r3, r3, r1
 800a21e:	095b      	lsrs	r3, r3, #5
 800a220:	2264      	movs	r2, #100	@ 0x64
 800a222:	fb02 f303 	mul.w	r3, r2, r3
 800a226:	1acb      	subs	r3, r1, r3
 800a228:	00db      	lsls	r3, r3, #3
 800a22a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a22e:	4b36      	ldr	r3, [pc, #216]	@ (800a308 <UART_SetConfig+0x2d4>)
 800a230:	fba3 2302 	umull	r2, r3, r3, r2
 800a234:	095b      	lsrs	r3, r3, #5
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a23c:	441c      	add	r4, r3
 800a23e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a242:	2200      	movs	r2, #0
 800a244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a248:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a24c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a250:	4642      	mov	r2, r8
 800a252:	464b      	mov	r3, r9
 800a254:	1891      	adds	r1, r2, r2
 800a256:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a258:	415b      	adcs	r3, r3
 800a25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a25c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a260:	4641      	mov	r1, r8
 800a262:	1851      	adds	r1, r2, r1
 800a264:	6339      	str	r1, [r7, #48]	@ 0x30
 800a266:	4649      	mov	r1, r9
 800a268:	414b      	adcs	r3, r1
 800a26a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a26c:	f04f 0200 	mov.w	r2, #0
 800a270:	f04f 0300 	mov.w	r3, #0
 800a274:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a278:	4659      	mov	r1, fp
 800a27a:	00cb      	lsls	r3, r1, #3
 800a27c:	4651      	mov	r1, sl
 800a27e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a282:	4651      	mov	r1, sl
 800a284:	00ca      	lsls	r2, r1, #3
 800a286:	4610      	mov	r0, r2
 800a288:	4619      	mov	r1, r3
 800a28a:	4603      	mov	r3, r0
 800a28c:	4642      	mov	r2, r8
 800a28e:	189b      	adds	r3, r3, r2
 800a290:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a294:	464b      	mov	r3, r9
 800a296:	460a      	mov	r2, r1
 800a298:	eb42 0303 	adc.w	r3, r2, r3
 800a29c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a2ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a2b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	18db      	adds	r3, r3, r3
 800a2b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	eb42 0303 	adc.w	r3, r2, r3
 800a2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a2c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a2ca:	f7f5 fff1 	bl	80002b0 <__aeabi_uldivmod>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a308 <UART_SetConfig+0x2d4>)
 800a2d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a2d8:	095b      	lsrs	r3, r3, #5
 800a2da:	2164      	movs	r1, #100	@ 0x64
 800a2dc:	fb01 f303 	mul.w	r3, r1, r3
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	3332      	adds	r3, #50	@ 0x32
 800a2e6:	4a08      	ldr	r2, [pc, #32]	@ (800a308 <UART_SetConfig+0x2d4>)
 800a2e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ec:	095b      	lsrs	r3, r3, #5
 800a2ee:	f003 0207 	and.w	r2, r3, #7
 800a2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4422      	add	r2, r4
 800a2fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a2fc:	e106      	b.n	800a50c <UART_SetConfig+0x4d8>
 800a2fe:	bf00      	nop
 800a300:	40011000 	.word	0x40011000
 800a304:	40011400 	.word	0x40011400
 800a308:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a30c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a310:	2200      	movs	r2, #0
 800a312:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a316:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a31a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a31e:	4642      	mov	r2, r8
 800a320:	464b      	mov	r3, r9
 800a322:	1891      	adds	r1, r2, r2
 800a324:	6239      	str	r1, [r7, #32]
 800a326:	415b      	adcs	r3, r3
 800a328:	627b      	str	r3, [r7, #36]	@ 0x24
 800a32a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a32e:	4641      	mov	r1, r8
 800a330:	1854      	adds	r4, r2, r1
 800a332:	4649      	mov	r1, r9
 800a334:	eb43 0501 	adc.w	r5, r3, r1
 800a338:	f04f 0200 	mov.w	r2, #0
 800a33c:	f04f 0300 	mov.w	r3, #0
 800a340:	00eb      	lsls	r3, r5, #3
 800a342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a346:	00e2      	lsls	r2, r4, #3
 800a348:	4614      	mov	r4, r2
 800a34a:	461d      	mov	r5, r3
 800a34c:	4643      	mov	r3, r8
 800a34e:	18e3      	adds	r3, r4, r3
 800a350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a354:	464b      	mov	r3, r9
 800a356:	eb45 0303 	adc.w	r3, r5, r3
 800a35a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a35e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a36a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a36e:	f04f 0200 	mov.w	r2, #0
 800a372:	f04f 0300 	mov.w	r3, #0
 800a376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a37a:	4629      	mov	r1, r5
 800a37c:	008b      	lsls	r3, r1, #2
 800a37e:	4621      	mov	r1, r4
 800a380:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a384:	4621      	mov	r1, r4
 800a386:	008a      	lsls	r2, r1, #2
 800a388:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a38c:	f7f5 ff90 	bl	80002b0 <__aeabi_uldivmod>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4b60      	ldr	r3, [pc, #384]	@ (800a518 <UART_SetConfig+0x4e4>)
 800a396:	fba3 2302 	umull	r2, r3, r3, r2
 800a39a:	095b      	lsrs	r3, r3, #5
 800a39c:	011c      	lsls	r4, r3, #4
 800a39e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a3a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a3ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a3b0:	4642      	mov	r2, r8
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	1891      	adds	r1, r2, r2
 800a3b6:	61b9      	str	r1, [r7, #24]
 800a3b8:	415b      	adcs	r3, r3
 800a3ba:	61fb      	str	r3, [r7, #28]
 800a3bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a3c0:	4641      	mov	r1, r8
 800a3c2:	1851      	adds	r1, r2, r1
 800a3c4:	6139      	str	r1, [r7, #16]
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	414b      	adcs	r3, r1
 800a3ca:	617b      	str	r3, [r7, #20]
 800a3cc:	f04f 0200 	mov.w	r2, #0
 800a3d0:	f04f 0300 	mov.w	r3, #0
 800a3d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a3d8:	4659      	mov	r1, fp
 800a3da:	00cb      	lsls	r3, r1, #3
 800a3dc:	4651      	mov	r1, sl
 800a3de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3e2:	4651      	mov	r1, sl
 800a3e4:	00ca      	lsls	r2, r1, #3
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	189b      	adds	r3, r3, r2
 800a3f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	460a      	mov	r2, r1
 800a3f8:	eb42 0303 	adc.w	r3, r2, r3
 800a3fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a40a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a40c:	f04f 0200 	mov.w	r2, #0
 800a410:	f04f 0300 	mov.w	r3, #0
 800a414:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a418:	4649      	mov	r1, r9
 800a41a:	008b      	lsls	r3, r1, #2
 800a41c:	4641      	mov	r1, r8
 800a41e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a422:	4641      	mov	r1, r8
 800a424:	008a      	lsls	r2, r1, #2
 800a426:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a42a:	f7f5 ff41 	bl	80002b0 <__aeabi_uldivmod>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4611      	mov	r1, r2
 800a434:	4b38      	ldr	r3, [pc, #224]	@ (800a518 <UART_SetConfig+0x4e4>)
 800a436:	fba3 2301 	umull	r2, r3, r3, r1
 800a43a:	095b      	lsrs	r3, r3, #5
 800a43c:	2264      	movs	r2, #100	@ 0x64
 800a43e:	fb02 f303 	mul.w	r3, r2, r3
 800a442:	1acb      	subs	r3, r1, r3
 800a444:	011b      	lsls	r3, r3, #4
 800a446:	3332      	adds	r3, #50	@ 0x32
 800a448:	4a33      	ldr	r2, [pc, #204]	@ (800a518 <UART_SetConfig+0x4e4>)
 800a44a:	fba2 2303 	umull	r2, r3, r2, r3
 800a44e:	095b      	lsrs	r3, r3, #5
 800a450:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a454:	441c      	add	r4, r3
 800a456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a45a:	2200      	movs	r2, #0
 800a45c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a45e:	677a      	str	r2, [r7, #116]	@ 0x74
 800a460:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a464:	4642      	mov	r2, r8
 800a466:	464b      	mov	r3, r9
 800a468:	1891      	adds	r1, r2, r2
 800a46a:	60b9      	str	r1, [r7, #8]
 800a46c:	415b      	adcs	r3, r3
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a474:	4641      	mov	r1, r8
 800a476:	1851      	adds	r1, r2, r1
 800a478:	6039      	str	r1, [r7, #0]
 800a47a:	4649      	mov	r1, r9
 800a47c:	414b      	adcs	r3, r1
 800a47e:	607b      	str	r3, [r7, #4]
 800a480:	f04f 0200 	mov.w	r2, #0
 800a484:	f04f 0300 	mov.w	r3, #0
 800a488:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a48c:	4659      	mov	r1, fp
 800a48e:	00cb      	lsls	r3, r1, #3
 800a490:	4651      	mov	r1, sl
 800a492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a496:	4651      	mov	r1, sl
 800a498:	00ca      	lsls	r2, r1, #3
 800a49a:	4610      	mov	r0, r2
 800a49c:	4619      	mov	r1, r3
 800a49e:	4603      	mov	r3, r0
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	189b      	adds	r3, r3, r2
 800a4a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4a6:	464b      	mov	r3, r9
 800a4a8:	460a      	mov	r2, r1
 800a4aa:	eb42 0303 	adc.w	r3, r2, r3
 800a4ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a4b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a4ba:	667a      	str	r2, [r7, #100]	@ 0x64
 800a4bc:	f04f 0200 	mov.w	r2, #0
 800a4c0:	f04f 0300 	mov.w	r3, #0
 800a4c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	008b      	lsls	r3, r1, #2
 800a4cc:	4641      	mov	r1, r8
 800a4ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a4d2:	4641      	mov	r1, r8
 800a4d4:	008a      	lsls	r2, r1, #2
 800a4d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a4da:	f7f5 fee9 	bl	80002b0 <__aeabi_uldivmod>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	460b      	mov	r3, r1
 800a4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a518 <UART_SetConfig+0x4e4>)
 800a4e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a4e8:	095b      	lsrs	r3, r3, #5
 800a4ea:	2164      	movs	r1, #100	@ 0x64
 800a4ec:	fb01 f303 	mul.w	r3, r1, r3
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	011b      	lsls	r3, r3, #4
 800a4f4:	3332      	adds	r3, #50	@ 0x32
 800a4f6:	4a08      	ldr	r2, [pc, #32]	@ (800a518 <UART_SetConfig+0x4e4>)
 800a4f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4fc:	095b      	lsrs	r3, r3, #5
 800a4fe:	f003 020f 	and.w	r2, r3, #15
 800a502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4422      	add	r2, r4
 800a50a:	609a      	str	r2, [r3, #8]
}
 800a50c:	bf00      	nop
 800a50e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a512:	46bd      	mov	sp, r7
 800a514:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a518:	51eb851f 	.word	0x51eb851f

0800a51c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d123      	bne.n	800a576 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a536:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	6851      	ldr	r1, [r2, #4]
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	6892      	ldr	r2, [r2, #8]
 800a542:	4311      	orrs	r1, r2
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	68d2      	ldr	r2, [r2, #12]
 800a548:	4311      	orrs	r1, r2
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	6912      	ldr	r2, [r2, #16]
 800a54e:	4311      	orrs	r1, r2
 800a550:	683a      	ldr	r2, [r7, #0]
 800a552:	6952      	ldr	r2, [r2, #20]
 800a554:	4311      	orrs	r1, r2
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	6992      	ldr	r2, [r2, #24]
 800a55a:	4311      	orrs	r1, r2
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	69d2      	ldr	r2, [r2, #28]
 800a560:	4311      	orrs	r1, r2
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	6a12      	ldr	r2, [r2, #32]
 800a566:	4311      	orrs	r1, r2
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a56c:	430a      	orrs	r2, r1
 800a56e:	431a      	orrs	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	e028      	b.n	800a5c8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	69d9      	ldr	r1, [r3, #28]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	4319      	orrs	r1, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58c:	430b      	orrs	r3, r1
 800a58e:	431a      	orrs	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a59c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	6851      	ldr	r1, [r2, #4]
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	6892      	ldr	r2, [r2, #8]
 800a5a8:	4311      	orrs	r1, r2
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	68d2      	ldr	r2, [r2, #12]
 800a5ae:	4311      	orrs	r1, r2
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	6912      	ldr	r2, [r2, #16]
 800a5b4:	4311      	orrs	r1, r2
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	6952      	ldr	r2, [r2, #20]
 800a5ba:	4311      	orrs	r1, r2
 800a5bc:	683a      	ldr	r2, [r7, #0]
 800a5be:	6992      	ldr	r2, [r2, #24]
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	431a      	orrs	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b085      	sub	sp, #20
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	60f8      	str	r0, [r7, #12]
 800a5de:	60b9      	str	r1, [r7, #8]
 800a5e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d128      	bne.n	800a63a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	1e59      	subs	r1, r3, #1
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	011b      	lsls	r3, r3, #4
 800a5fe:	4319      	orrs	r1, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	3b01      	subs	r3, #1
 800a606:	021b      	lsls	r3, r3, #8
 800a608:	4319      	orrs	r1, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	3b01      	subs	r3, #1
 800a610:	031b      	lsls	r3, r3, #12
 800a612:	4319      	orrs	r1, r3
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	3b01      	subs	r3, #1
 800a61a:	041b      	lsls	r3, r3, #16
 800a61c:	4319      	orrs	r1, r3
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	695b      	ldr	r3, [r3, #20]
 800a622:	3b01      	subs	r3, #1
 800a624:	051b      	lsls	r3, r3, #20
 800a626:	4319      	orrs	r1, r3
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	3b01      	subs	r3, #1
 800a62e:	061b      	lsls	r3, r3, #24
 800a630:	430b      	orrs	r3, r1
 800a632:	431a      	orrs	r2, r3
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	609a      	str	r2, [r3, #8]
 800a638:	e02f      	b.n	800a69a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a642:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a646:	68ba      	ldr	r2, [r7, #8]
 800a648:	68d2      	ldr	r2, [r2, #12]
 800a64a:	3a01      	subs	r2, #1
 800a64c:	0311      	lsls	r1, r2, #12
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	6952      	ldr	r2, [r2, #20]
 800a652:	3a01      	subs	r2, #1
 800a654:	0512      	lsls	r2, r2, #20
 800a656:	430a      	orrs	r2, r1
 800a658:	431a      	orrs	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	68db      	ldr	r3, [r3, #12]
 800a662:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	1e59      	subs	r1, r3, #1
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	3b01      	subs	r3, #1
 800a672:	011b      	lsls	r3, r3, #4
 800a674:	4319      	orrs	r1, r3
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	021b      	lsls	r3, r3, #8
 800a67e:	4319      	orrs	r1, r3
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	3b01      	subs	r3, #1
 800a686:	041b      	lsls	r3, r3, #16
 800a688:	4319      	orrs	r1, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	3b01      	subs	r3, #1
 800a690:	061b      	lsls	r3, r3, #24
 800a692:	430b      	orrs	r3, r1
 800a694:	431a      	orrs	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a6a8:	b084      	sub	sp, #16
 800a6aa:	b480      	push	{r7}
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	f107 001c 	add.w	r0, r7, #28
 800a6b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a6be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a6c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a6c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a6ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a6ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a6d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a6e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a6e6:	68fa      	ldr	r2, [r7, #12]
 800a6e8:	431a      	orrs	r2, r3
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	b004      	add	sp, #16
 800a6fc:	4770      	bx	lr

0800a6fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b083      	sub	sp, #12
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2203      	movs	r2, #3
 800a746:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a748:	2300      	movs	r3, #0
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 0303 	and.w	r3, r3, #3
}
 800a766:	4618      	mov	r0, r3
 800a768:	370c      	adds	r7, #12
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr

0800a772 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a772:	b480      	push	{r7}
 800a774:	b085      	sub	sp, #20
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
 800a77a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a790:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a796:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a79c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a7ac:	f023 030f 	bic.w	r3, r3, #15
 800a7b0:	68fa      	ldr	r2, [r7, #12]
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	b2db      	uxtb	r3, r3
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	3314      	adds	r3, #20
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
}  
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a82c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a832:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a838:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a844:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	431a      	orrs	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a850:	2300      	movs	r3, #0

}
 800a852:	4618      	mov	r0, r3
 800a854:	3714      	adds	r7, #20
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b088      	sub	sp, #32
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a86c:	2310      	movs	r3, #16
 800a86e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a870:	2340      	movs	r3, #64	@ 0x40
 800a872:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a874:	2300      	movs	r3, #0
 800a876:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a87c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a87e:	f107 0308 	add.w	r3, r7, #8
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f7ff ff74 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a88a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a88e:	2110      	movs	r1, #16
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 fa19 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a896:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a898:	69fb      	ldr	r3, [r7, #28]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3720      	adds	r7, #32
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b088      	sub	sp, #32
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a8b0:	2311      	movs	r3, #17
 800a8b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8b4:	2340      	movs	r3, #64	@ 0x40
 800a8b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a8bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a8c2:	f107 0308 	add.w	r3, r7, #8
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff ff52 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a8ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8d2:	2111      	movs	r1, #17
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f9f7 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a8da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8dc:	69fb      	ldr	r3, [r7, #28]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3720      	adds	r7, #32
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b088      	sub	sp, #32
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a8f4:	2312      	movs	r3, #18
 800a8f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a8f8:	2340      	movs	r3, #64	@ 0x40
 800a8fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a904:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a906:	f107 0308 	add.w	r3, r7, #8
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff ff30 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a912:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a916:	2112      	movs	r1, #18
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f9d5 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a91e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a920:	69fb      	ldr	r3, [r7, #28]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3720      	adds	r7, #32
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b088      	sub	sp, #32
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a938:	2318      	movs	r3, #24
 800a93a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a93c:	2340      	movs	r3, #64	@ 0x40
 800a93e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a948:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a94a:	f107 0308 	add.w	r3, r7, #8
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7ff ff0e 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a95a:	2118      	movs	r1, #24
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f9b3 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a962:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a964:	69fb      	ldr	r3, [r7, #28]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3720      	adds	r7, #32
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b088      	sub	sp, #32
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a97c:	2319      	movs	r3, #25
 800a97e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a980:	2340      	movs	r3, #64	@ 0x40
 800a982:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a984:	2300      	movs	r3, #0
 800a986:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a988:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a98c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a98e:	f107 0308 	add.w	r3, r7, #8
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7ff feec 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a99a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a99e:	2119      	movs	r1, #25
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f991 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a9a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9a8:	69fb      	ldr	r3, [r7, #28]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3720      	adds	r7, #32
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
	...

0800a9b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b088      	sub	sp, #32
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a9c0:	230c      	movs	r3, #12
 800a9c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a9c4:	2340      	movs	r3, #64	@ 0x40
 800a9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a9cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a9d2:	f107 0308 	add.w	r3, r7, #8
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7ff feca 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a9de:	4a05      	ldr	r2, [pc, #20]	@ (800a9f4 <SDMMC_CmdStopTransfer+0x40>)
 800a9e0:	210c      	movs	r1, #12
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f970 	bl	800acc8 <SDMMC_GetCmdResp1>
 800a9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ea:	69fb      	ldr	r3, [r7, #28]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3720      	adds	r7, #32
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	05f5e100 	.word	0x05f5e100

0800a9f8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b08a      	sub	sp, #40	@ 0x28
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aa08:	2307      	movs	r3, #7
 800aa0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa0c:	2340      	movs	r3, #64	@ 0x40
 800aa0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa10:	2300      	movs	r3, #0
 800aa12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa18:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa1a:	f107 0310 	add.w	r3, r7, #16
 800aa1e:	4619      	mov	r1, r3
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7ff fea6 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800aa26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa2a:	2107      	movs	r1, #7
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f000 f94b 	bl	800acc8 <SDMMC_GetCmdResp1>
 800aa32:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800aa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3728      	adds	r7, #40	@ 0x28
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b088      	sub	sp, #32
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa5c:	f107 0308 	add.w	r3, r7, #8
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7ff fe85 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fb65 	bl	800b138 <SDMMC_GetCmdError>
 800aa6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa70:	69fb      	ldr	r3, [r7, #28]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b088      	sub	sp, #32
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aa82:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800aa86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aa88:	2308      	movs	r3, #8
 800aa8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aa8c:	2340      	movs	r3, #64	@ 0x40
 800aa8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aa90:	2300      	movs	r3, #0
 800aa92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aa94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aa9a:	f107 0308 	add.w	r3, r7, #8
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff fe66 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 faf8 	bl	800b09c <SDMMC_GetCmdResp7>
 800aaac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaae:	69fb      	ldr	r3, [r7, #28]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3720      	adds	r7, #32
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b088      	sub	sp, #32
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aac6:	2337      	movs	r3, #55	@ 0x37
 800aac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aaca:	2340      	movs	r3, #64	@ 0x40
 800aacc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aace:	2300      	movs	r3, #0
 800aad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aad6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aad8:	f107 0308 	add.w	r3, r7, #8
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f7ff fe47 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800aae4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aae8:	2137      	movs	r1, #55	@ 0x37
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f8ec 	bl	800acc8 <SDMMC_GetCmdResp1>
 800aaf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3720      	adds	r7, #32
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ab0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ab10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ab12:	2329      	movs	r3, #41	@ 0x29
 800ab14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab16:	2340      	movs	r3, #64	@ 0x40
 800ab18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff fe21 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f9ff 	bl	800af34 <SDMMC_GetCmdResp3>
 800ab36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab38:	69fb      	ldr	r3, [r7, #28]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3720      	adds	r7, #32
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b088      	sub	sp, #32
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ab50:	2306      	movs	r3, #6
 800ab52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab54:	2340      	movs	r3, #64	@ 0x40
 800ab56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab62:	f107 0308 	add.w	r3, r7, #8
 800ab66:	4619      	mov	r1, r3
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7ff fe02 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ab6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab72:	2106      	movs	r1, #6
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 f8a7 	bl	800acc8 <SDMMC_GetCmdResp1>
 800ab7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab7c:	69fb      	ldr	r3, [r7, #28]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3720      	adds	r7, #32
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b088      	sub	sp, #32
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ab92:	2333      	movs	r3, #51	@ 0x33
 800ab94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab96:	2340      	movs	r3, #64	@ 0x40
 800ab98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aba4:	f107 0308 	add.w	r3, r7, #8
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff fde1 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800abb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abb4:	2133      	movs	r1, #51	@ 0x33
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f886 	bl	800acc8 <SDMMC_GetCmdResp1>
 800abbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abbe:	69fb      	ldr	r3, [r7, #28]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3720      	adds	r7, #32
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800abd4:	2302      	movs	r3, #2
 800abd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800abd8:	23c0      	movs	r3, #192	@ 0xc0
 800abda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abdc:	2300      	movs	r3, #0
 800abde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abe0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abe6:	f107 0308 	add.w	r3, r7, #8
 800abea:	4619      	mov	r1, r3
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f7ff fdc0 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f956 	bl	800aea4 <SDMMC_GetCmdResp2>
 800abf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abfa:	69fb      	ldr	r3, [r7, #28]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3720      	adds	r7, #32
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ac12:	2309      	movs	r3, #9
 800ac14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ac16:	23c0      	movs	r3, #192	@ 0xc0
 800ac18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac24:	f107 0308 	add.w	r3, r7, #8
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f7ff fda1 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f937 	bl	800aea4 <SDMMC_GetCmdResp2>
 800ac36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac38:	69fb      	ldr	r3, [r7, #28]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3720      	adds	r7, #32
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b088      	sub	sp, #32
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ac50:	2303      	movs	r3, #3
 800ac52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac54:	2340      	movs	r3, #64	@ 0x40
 800ac56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac62:	f107 0308 	add.w	r3, r7, #8
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff fd82 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	2103      	movs	r1, #3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f99c 	bl	800afb0 <SDMMC_GetCmdResp6>
 800ac78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac7a:	69fb      	ldr	r3, [r7, #28]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3720      	adds	r7, #32
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b088      	sub	sp, #32
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ac92:	230d      	movs	r3, #13
 800ac94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac96:	2340      	movs	r3, #64	@ 0x40
 800ac98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aca2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aca4:	f107 0308 	add.w	r3, r7, #8
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff fd61 	bl	800a772 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800acb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800acb4:	210d      	movs	r1, #13
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f806 	bl	800acc8 <SDMMC_GetCmdResp1>
 800acbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acbe:	69fb      	ldr	r3, [r7, #28]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3720      	adds	r7, #32
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b088      	sub	sp, #32
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	460b      	mov	r3, r1
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800acd6:	4b70      	ldr	r3, [pc, #448]	@ (800ae98 <SDMMC_GetCmdResp1+0x1d0>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a70      	ldr	r2, [pc, #448]	@ (800ae9c <SDMMC_GetCmdResp1+0x1d4>)
 800acdc:	fba2 2303 	umull	r2, r3, r2, r3
 800ace0:	0a5a      	lsrs	r2, r3, #9
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	fb02 f303 	mul.w	r3, r2, r3
 800ace8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	1e5a      	subs	r2, r3, #1
 800acee:	61fa      	str	r2, [r7, #28]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d102      	bne.n	800acfa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800acf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800acf8:	e0c9      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acfe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d0ef      	beq.n	800acea <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1ea      	bne.n	800acea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad18:	f003 0304 	and.w	r3, r3, #4
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d004      	beq.n	800ad2a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2204      	movs	r2, #4
 800ad24:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad26:	2304      	movs	r3, #4
 800ad28:	e0b1      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad2e:	f003 0301 	and.w	r3, r3, #1
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d004      	beq.n	800ad40 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e0a6      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	22c5      	movs	r2, #197	@ 0xc5
 800ad44:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f7ff fd3d 	bl	800a7c6 <SDIO_GetCommandResponse>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	461a      	mov	r2, r3
 800ad50:	7afb      	ldrb	r3, [r7, #11]
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d001      	beq.n	800ad5a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e099      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ad5a:	2100      	movs	r1, #0
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7ff fd3f 	bl	800a7e0 <SDIO_GetResponse>
 800ad62:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4b4e      	ldr	r3, [pc, #312]	@ (800aea0 <SDMMC_GetCmdResp1+0x1d8>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d101      	bne.n	800ad72 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	e08d      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	da02      	bge.n	800ad7e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ad78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ad7c:	e087      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ad88:	2340      	movs	r3, #64	@ 0x40
 800ad8a:	e080      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ad96:	2380      	movs	r3, #128	@ 0x80
 800ad98:	e079      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ada4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ada8:	e071      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800adb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adb8:	e069      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800adc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800adc8:	e061      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800add4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800add8:	e059      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d002      	beq.n	800adea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ade4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ade8:	e051      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800adf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800adf8:	e049      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ae04:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800ae08:	e041      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d002      	beq.n	800ae1a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ae14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae18:	e039      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d002      	beq.n	800ae2a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ae24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800ae28:	e031      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ae34:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800ae38:	e029      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae44:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ae48:	e021      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ae58:	e019      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ae64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800ae68:	e011      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ae74:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ae78:	e009      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f003 0308 	and.w	r3, r3, #8
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ae84:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ae88:	e001      	b.n	800ae8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ae8a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3720      	adds	r7, #32
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20000000 	.word	0x20000000
 800ae9c:	10624dd3 	.word	0x10624dd3
 800aea0:	fdffe008 	.word	0xfdffe008

0800aea4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aeac:	4b1f      	ldr	r3, [pc, #124]	@ (800af2c <SDMMC_GetCmdResp2+0x88>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a1f      	ldr	r2, [pc, #124]	@ (800af30 <SDMMC_GetCmdResp2+0x8c>)
 800aeb2:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb6:	0a5b      	lsrs	r3, r3, #9
 800aeb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aebc:	fb02 f303 	mul.w	r3, r2, r3
 800aec0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	1e5a      	subs	r2, r3, #1
 800aec6:	60fa      	str	r2, [r7, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d102      	bne.n	800aed2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aecc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aed0:	e026      	b.n	800af20 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aed6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d0ef      	beq.n	800aec2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1ea      	bne.n	800aec2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d004      	beq.n	800af02 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2204      	movs	r2, #4
 800aefc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aefe:	2304      	movs	r3, #4
 800af00:	e00e      	b.n	800af20 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d004      	beq.n	800af18 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af14:	2301      	movs	r3, #1
 800af16:	e003      	b.n	800af20 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	22c5      	movs	r2, #197	@ 0xc5
 800af1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	20000000 	.word	0x20000000
 800af30:	10624dd3 	.word	0x10624dd3

0800af34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af3c:	4b1a      	ldr	r3, [pc, #104]	@ (800afa8 <SDMMC_GetCmdResp3+0x74>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a1a      	ldr	r2, [pc, #104]	@ (800afac <SDMMC_GetCmdResp3+0x78>)
 800af42:	fba2 2303 	umull	r2, r3, r2, r3
 800af46:	0a5b      	lsrs	r3, r3, #9
 800af48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af4c:	fb02 f303 	mul.w	r3, r2, r3
 800af50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	1e5a      	subs	r2, r3, #1
 800af56:	60fa      	str	r2, [r7, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d102      	bne.n	800af62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800af60:	e01b      	b.n	800af9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0ef      	beq.n	800af52 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1ea      	bne.n	800af52 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af80:	f003 0304 	and.w	r3, r3, #4
 800af84:	2b00      	cmp	r3, #0
 800af86:	d004      	beq.n	800af92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2204      	movs	r2, #4
 800af8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af8e:	2304      	movs	r3, #4
 800af90:	e003      	b.n	800af9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	22c5      	movs	r2, #197	@ 0xc5
 800af96:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3714      	adds	r7, #20
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	20000000 	.word	0x20000000
 800afac:	10624dd3 	.word	0x10624dd3

0800afb0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	460b      	mov	r3, r1
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800afbe:	4b35      	ldr	r3, [pc, #212]	@ (800b094 <SDMMC_GetCmdResp6+0xe4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a35      	ldr	r2, [pc, #212]	@ (800b098 <SDMMC_GetCmdResp6+0xe8>)
 800afc4:	fba2 2303 	umull	r2, r3, r2, r3
 800afc8:	0a5b      	lsrs	r3, r3, #9
 800afca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afce:	fb02 f303 	mul.w	r3, r2, r3
 800afd2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	1e5a      	subs	r2, r3, #1
 800afd8:	61fa      	str	r2, [r7, #28]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800afde:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800afe2:	e052      	b.n	800b08a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afe8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d0ef      	beq.n	800afd4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1ea      	bne.n	800afd4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b002:	f003 0304 	and.w	r3, r3, #4
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2204      	movs	r2, #4
 800b00e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b010:	2304      	movs	r3, #4
 800b012:	e03a      	b.n	800b08a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b018:	f003 0301 	and.w	r3, r3, #1
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d004      	beq.n	800b02a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2201      	movs	r2, #1
 800b024:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b026:	2301      	movs	r3, #1
 800b028:	e02f      	b.n	800b08a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f7ff fbcb 	bl	800a7c6 <SDIO_GetCommandResponse>
 800b030:	4603      	mov	r3, r0
 800b032:	461a      	mov	r2, r3
 800b034:	7afb      	ldrb	r3, [r7, #11]
 800b036:	4293      	cmp	r3, r2
 800b038:	d001      	beq.n	800b03e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e025      	b.n	800b08a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	22c5      	movs	r2, #197	@ 0xc5
 800b042:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b044:	2100      	movs	r1, #0
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f7ff fbca 	bl	800a7e0 <SDIO_GetResponse>
 800b04c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800b054:	2b00      	cmp	r3, #0
 800b056:	d106      	bne.n	800b066 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	0c1b      	lsrs	r3, r3, #16
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b062:	2300      	movs	r3, #0
 800b064:	e011      	b.n	800b08a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b074:	e009      	b.n	800b08a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b084:	e001      	b.n	800b08a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b086:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3720      	adds	r7, #32
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	20000000 	.word	0x20000000
 800b098:	10624dd3 	.word	0x10624dd3

0800b09c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0a4:	4b22      	ldr	r3, [pc, #136]	@ (800b130 <SDMMC_GetCmdResp7+0x94>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a22      	ldr	r2, [pc, #136]	@ (800b134 <SDMMC_GetCmdResp7+0x98>)
 800b0aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ae:	0a5b      	lsrs	r3, r3, #9
 800b0b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0b4:	fb02 f303 	mul.w	r3, r2, r3
 800b0b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	60fa      	str	r2, [r7, #12]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d102      	bne.n	800b0ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0c4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b0c8:	e02c      	b.n	800b124 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0ef      	beq.n	800b0ba <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1ea      	bne.n	800b0ba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d004      	beq.n	800b0fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2204      	movs	r2, #4
 800b0f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0f6:	2304      	movs	r3, #4
 800b0f8:	e014      	b.n	800b124 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d004      	beq.n	800b110 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2201      	movs	r2, #1
 800b10a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e009      	b.n	800b124 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2240      	movs	r2, #64	@ 0x40
 800b120:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b122:	2300      	movs	r3, #0
  
}
 800b124:	4618      	mov	r0, r3
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	20000000 	.word	0x20000000
 800b134:	10624dd3 	.word	0x10624dd3

0800b138 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b140:	4b11      	ldr	r3, [pc, #68]	@ (800b188 <SDMMC_GetCmdError+0x50>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a11      	ldr	r2, [pc, #68]	@ (800b18c <SDMMC_GetCmdError+0x54>)
 800b146:	fba2 2303 	umull	r2, r3, r2, r3
 800b14a:	0a5b      	lsrs	r3, r3, #9
 800b14c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b150:	fb02 f303 	mul.w	r3, r2, r3
 800b154:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	1e5a      	subs	r2, r3, #1
 800b15a:	60fa      	str	r2, [r7, #12]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d102      	bne.n	800b166 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b160:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b164:	e009      	b.n	800b17a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b16a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0f1      	beq.n	800b156 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	22c5      	movs	r2, #197	@ 0xc5
 800b176:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	20000000 	.word	0x20000000
 800b18c:	10624dd3 	.word	0x10624dd3

0800b190 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b190:	b084      	sub	sp, #16
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	f107 001c 	add.w	r0, r7, #28
 800b19e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b1a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d123      	bne.n	800b1f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800b1be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b1d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b1d6:	2b01      	cmp	r3, #1
 800b1d8:	d105      	bne.n	800b1e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	68db      	ldr	r3, [r3, #12]
 800b1de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f9dc 	bl	800b5a4 <USB_CoreReset>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	73fb      	strb	r3, [r7, #15]
 800b1f0:	e01b      	b.n	800b22a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f9d0 	bl	800b5a4 <USB_CoreReset>
 800b204:	4603      	mov	r3, r0
 800b206:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b208:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d106      	bne.n	800b21e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b214:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b21c:	e005      	b.n	800b22a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b222:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b22a:	7fbb      	ldrb	r3, [r7, #30]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d10b      	bne.n	800b248 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f043 0206 	orr.w	r2, r3, #6
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	f043 0220 	orr.w	r2, r3, #32
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b248:	7bfb      	ldrb	r3, [r7, #15]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b254:	b004      	add	sp, #16
 800b256:	4770      	bx	lr

0800b258 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	f043 0201 	orr.w	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	689b      	ldr	r3, [r3, #8]
 800b286:	f023 0201 	bic.w	r2, r3, #1
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d115      	bne.n	800b2ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b2ca:	200a      	movs	r0, #10
 800b2cc:	f7f6 ff38 	bl	8002140 <HAL_Delay>
      ms += 10U;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	330a      	adds	r3, #10
 800b2d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f956 	bl	800b588 <USB_GetMode>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d01e      	beq.n	800b320 <USB_SetCurrentMode+0x84>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2bc7      	cmp	r3, #199	@ 0xc7
 800b2e6:	d9f0      	bls.n	800b2ca <USB_SetCurrentMode+0x2e>
 800b2e8:	e01a      	b.n	800b320 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b2ea:	78fb      	ldrb	r3, [r7, #3]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d115      	bne.n	800b31c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b2fc:	200a      	movs	r0, #10
 800b2fe:	f7f6 ff1f 	bl	8002140 <HAL_Delay>
      ms += 10U;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	330a      	adds	r3, #10
 800b306:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f93d 	bl	800b588 <USB_GetMode>
 800b30e:	4603      	mov	r3, r0
 800b310:	2b00      	cmp	r3, #0
 800b312:	d005      	beq.n	800b320 <USB_SetCurrentMode+0x84>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2bc7      	cmp	r3, #199	@ 0xc7
 800b318:	d9f0      	bls.n	800b2fc <USB_SetCurrentMode+0x60>
 800b31a:	e001      	b.n	800b320 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e005      	b.n	800b32c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2bc8      	cmp	r3, #200	@ 0xc8
 800b324:	d101      	bne.n	800b32a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b326:	2301      	movs	r3, #1
 800b328:	e000      	b.n	800b32c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b33e:	2300      	movs	r3, #0
 800b340:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	3301      	adds	r3, #1
 800b346:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b34e:	d901      	bls.n	800b354 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b350:	2303      	movs	r3, #3
 800b352:	e01b      	b.n	800b38c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	daf2      	bge.n	800b342 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b35c:	2300      	movs	r3, #0
 800b35e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	019b      	lsls	r3, r3, #6
 800b364:	f043 0220 	orr.w	r2, r3, #32
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3301      	adds	r3, #1
 800b370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b378:	d901      	bls.n	800b37e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	e006      	b.n	800b38c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	f003 0320 	and.w	r3, r3, #32
 800b386:	2b20      	cmp	r3, #32
 800b388:	d0f0      	beq.n	800b36c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b38a:	2300      	movs	r3, #0
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3714      	adds	r7, #20
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b3b0:	d901      	bls.n	800b3b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e018      	b.n	800b3e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	daf2      	bge.n	800b3a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2210      	movs	r2, #16
 800b3c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b3d4:	d901      	bls.n	800b3da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b3d6:	2303      	movs	r3, #3
 800b3d8:	e006      	b.n	800b3e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	f003 0310 	and.w	r3, r3, #16
 800b3e2:	2b10      	cmp	r3, #16
 800b3e4:	d0f0      	beq.n	800b3c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3714      	adds	r7, #20
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b089      	sub	sp, #36	@ 0x24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	4611      	mov	r1, r2
 800b400:	461a      	mov	r2, r3
 800b402:	460b      	mov	r3, r1
 800b404:	71fb      	strb	r3, [r7, #7]
 800b406:	4613      	mov	r3, r2
 800b408:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b412:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b416:	2b00      	cmp	r3, #0
 800b418:	d123      	bne.n	800b462 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b41a:	88bb      	ldrh	r3, [r7, #4]
 800b41c:	3303      	adds	r3, #3
 800b41e:	089b      	lsrs	r3, r3, #2
 800b420:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b422:	2300      	movs	r3, #0
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	e018      	b.n	800b45a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	031a      	lsls	r2, r3, #12
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	4413      	add	r3, r2
 800b430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b434:	461a      	mov	r2, r3
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	3301      	adds	r3, #1
 800b440:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	3301      	adds	r3, #1
 800b446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	3301      	adds	r3, #1
 800b44c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b44e:	69fb      	ldr	r3, [r7, #28]
 800b450:	3301      	adds	r3, #1
 800b452:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	3301      	adds	r3, #1
 800b458:	61bb      	str	r3, [r7, #24]
 800b45a:	69ba      	ldr	r2, [r7, #24]
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d3e2      	bcc.n	800b428 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3724      	adds	r7, #36	@ 0x24
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b470:	b480      	push	{r7}
 800b472:	b08b      	sub	sp, #44	@ 0x2c
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	4613      	mov	r3, r2
 800b47c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b486:	88fb      	ldrh	r3, [r7, #6]
 800b488:	089b      	lsrs	r3, r3, #2
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b48e:	88fb      	ldrh	r3, [r7, #6]
 800b490:	f003 0303 	and.w	r3, r3, #3
 800b494:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b496:	2300      	movs	r3, #0
 800b498:	623b      	str	r3, [r7, #32]
 800b49a:	e014      	b.n	800b4c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4bc:	3301      	adds	r3, #1
 800b4be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b4c0:	6a3b      	ldr	r3, [r7, #32]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	623b      	str	r3, [r7, #32]
 800b4c6:	6a3a      	ldr	r2, [r7, #32]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d3e6      	bcc.n	800b49c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b4ce:	8bfb      	ldrh	r3, [r7, #30]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d01e      	beq.n	800b512 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4de:	461a      	mov	r2, r3
 800b4e0:	f107 0310 	add.w	r3, r7, #16
 800b4e4:	6812      	ldr	r2, [r2, #0]
 800b4e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	00db      	lsls	r3, r3, #3
 800b4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f8:	701a      	strb	r2, [r3, #0]
      i++;
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	623b      	str	r3, [r7, #32]
      pDest++;
 800b500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b502:	3301      	adds	r3, #1
 800b504:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b506:	8bfb      	ldrh	r3, [r7, #30]
 800b508:	3b01      	subs	r3, #1
 800b50a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b50c:	8bfb      	ldrh	r3, [r7, #30]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1ea      	bne.n	800b4e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b514:	4618      	mov	r0, r3
 800b516:	372c      	adds	r7, #44	@ 0x2c
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	695b      	ldr	r3, [r3, #20]
 800b52c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	4013      	ands	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b538:	68fb      	ldr	r3, [r7, #12]
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800b546:	b480      	push	{r7}
 800b548:	b085      	sub	sp, #20
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	460b      	mov	r3, r1
 800b550:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	015a      	lsls	r2, r3, #5
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800b566:	78fb      	ldrb	r3, [r7, #3]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	4013      	ands	r3, r2
 800b578:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b57a:	68bb      	ldr	r3, [r7, #8]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3714      	adds	r7, #20
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	f003 0301 	and.w	r3, r3, #1
}
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b085      	sub	sp, #20
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b5bc:	d901      	bls.n	800b5c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b5be:	2303      	movs	r3, #3
 800b5c0:	e01b      	b.n	800b5fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	daf2      	bge.n	800b5b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	f043 0201 	orr.w	r2, r3, #1
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b5e6:	d901      	bls.n	800b5ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e006      	b.n	800b5fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d0f0      	beq.n	800b5da <USB_CoreReset+0x36>

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
	...

0800b608 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b608:	b084      	sub	sp, #16
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b086      	sub	sp, #24
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b61a:	2300      	movs	r3, #0
 800b61c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b628:	461a      	mov	r2, r3
 800b62a:	2300      	movs	r3, #0
 800b62c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b632:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b642:	2b00      	cmp	r3, #0
 800b644:	d119      	bne.n	800b67a <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d10a      	bne.n	800b664 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b65c:	f043 0304 	orr.w	r3, r3, #4
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	e014      	b.n	800b68e <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b672:	f023 0304 	bic.w	r3, r3, #4
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	e009      	b.n	800b68e <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b688:	f023 0304 	bic.w	r3, r3, #4
 800b68c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b68e:	2110      	movs	r1, #16
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7ff fe4f 	bl	800b334 <USB_FlushTxFifo>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d001      	beq.n	800b6a0 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff fe79 	bl	800b398 <USB_FlushRxFifo>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	613b      	str	r3, [r7, #16]
 800b6b4:	e015      	b.n	800b6e2 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	015a      	lsls	r2, r3, #5
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4413      	add	r3, r2
 800b6be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	613b      	str	r3, [r7, #16]
 800b6e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d3e3      	bcc.n	800b6b6 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a18      	ldr	r2, [pc, #96]	@ (800b760 <USB_HostInit+0x158>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d10b      	bne.n	800b71c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b70a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a15      	ldr	r2, [pc, #84]	@ (800b764 <USB_HostInit+0x15c>)
 800b710:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a14      	ldr	r2, [pc, #80]	@ (800b768 <USB_HostInit+0x160>)
 800b716:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800b71a:	e009      	b.n	800b730 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2280      	movs	r2, #128	@ 0x80
 800b720:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a11      	ldr	r2, [pc, #68]	@ (800b76c <USB_HostInit+0x164>)
 800b726:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a11      	ldr	r2, [pc, #68]	@ (800b770 <USB_HostInit+0x168>)
 800b72c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b730:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b734:	2b00      	cmp	r3, #0
 800b736:	d105      	bne.n	800b744 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	f043 0210 	orr.w	r2, r3, #16
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	699a      	ldr	r2, [r3, #24]
 800b748:	4b0a      	ldr	r3, [pc, #40]	@ (800b774 <USB_HostInit+0x16c>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b750:	7dfb      	ldrb	r3, [r7, #23]
}
 800b752:	4618      	mov	r0, r3
 800b754:	3718      	adds	r7, #24
 800b756:	46bd      	mov	sp, r7
 800b758:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b75c:	b004      	add	sp, #16
 800b75e:	4770      	bx	lr
 800b760:	40040000 	.word	0x40040000
 800b764:	01000200 	.word	0x01000200
 800b768:	00e00300 	.word	0x00e00300
 800b76c:	00600080 	.word	0x00600080
 800b770:	004000e0 	.word	0x004000e0
 800b774:	a3200008 	.word	0xa3200008

0800b778 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	460b      	mov	r3, r1
 800b782:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b796:	f023 0303 	bic.w	r3, r3, #3
 800b79a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	78fb      	ldrb	r3, [r7, #3]
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	68f9      	ldr	r1, [r7, #12]
 800b7ac:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b7b4:	78fb      	ldrb	r3, [r7, #3]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d107      	bne.n	800b7ca <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b7c6:	6053      	str	r3, [r2, #4]
 800b7c8:	e00c      	b.n	800b7e4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b7ca:	78fb      	ldrb	r3, [r7, #3]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d107      	bne.n	800b7e0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b7dc:	6053      	str	r3, [r2, #4]
 800b7de:	e001      	b.n	800b7e4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e000      	b.n	800b7e6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b812:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b81c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b820:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b822:	2064      	movs	r0, #100	@ 0x64
 800b824:	f7f6 fc8c 	bl	8002140 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b830:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b834:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b836:	200a      	movs	r0, #10
 800b838:	f7f6 fc82 	bl	8002140 <HAL_Delay>

  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b846:	b480      	push	{r7}
 800b848:	b085      	sub	sp, #20
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	460b      	mov	r3, r1
 800b850:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b86a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b872:	2b00      	cmp	r3, #0
 800b874:	d109      	bne.n	800b88a <USB_DriveVbus+0x44>
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d106      	bne.n	800b88a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b884:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b888:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b894:	d109      	bne.n	800b8aa <USB_DriveVbus+0x64>
 800b896:	78fb      	ldrb	r3, [r7, #3]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d106      	bne.n	800b8aa <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b8a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8a8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	0c5b      	lsrs	r3, r3, #17
 800b8d6:	f003 0303 	and.w	r3, r3, #3
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	b29b      	uxth	r3, r3
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3714      	adds	r7, #20
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b088      	sub	sp, #32
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	4608      	mov	r0, r1
 800b912:	4611      	mov	r1, r2
 800b914:	461a      	mov	r2, r3
 800b916:	4603      	mov	r3, r0
 800b918:	70fb      	strb	r3, [r7, #3]
 800b91a:	460b      	mov	r3, r1
 800b91c:	70bb      	strb	r3, [r7, #2]
 800b91e:	4613      	mov	r3, r2
 800b920:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	4413      	add	r3, r2
 800b932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b936:	461a      	mov	r2, r3
 800b938:	f04f 33ff 	mov.w	r3, #4294967295
 800b93c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b93e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b942:	2b03      	cmp	r3, #3
 800b944:	d87c      	bhi.n	800ba40 <USB_HC_Init+0x138>
 800b946:	a201      	add	r2, pc, #4	@ (adr r2, 800b94c <USB_HC_Init+0x44>)
 800b948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94c:	0800b95d 	.word	0x0800b95d
 800b950:	0800ba03 	.word	0x0800ba03
 800b954:	0800b95d 	.word	0x0800b95d
 800b958:	0800b9c5 	.word	0x0800b9c5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b95c:	78fb      	ldrb	r3, [r7, #3]
 800b95e:	015a      	lsls	r2, r3, #5
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	4413      	add	r3, r2
 800b964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b968:	461a      	mov	r2, r3
 800b96a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b96e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b970:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b974:	2b00      	cmp	r3, #0
 800b976:	da10      	bge.n	800b99a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b978:	78fb      	ldrb	r3, [r7, #3]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	78fa      	ldrb	r2, [r7, #3]
 800b988:	0151      	lsls	r1, r2, #5
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	440a      	add	r2, r1
 800b98e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b996:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b998:	e055      	b.n	800ba46 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a6f      	ldr	r2, [pc, #444]	@ (800bb5c <USB_HC_Init+0x254>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d151      	bne.n	800ba46 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b9a2:	78fb      	ldrb	r3, [r7, #3]
 800b9a4:	015a      	lsls	r2, r3, #5
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	78fa      	ldrb	r2, [r7, #3]
 800b9b2:	0151      	lsls	r1, r2, #5
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	440a      	add	r2, r1
 800b9b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b9c0:	60d3      	str	r3, [r2, #12]
      break;
 800b9c2:	e040      	b.n	800ba46 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b9d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b9d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	da34      	bge.n	800ba4a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	015a      	lsls	r2, r3, #5
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	78fa      	ldrb	r2, [r7, #3]
 800b9f0:	0151      	lsls	r1, r2, #5
 800b9f2:	693a      	ldr	r2, [r7, #16]
 800b9f4:	440a      	add	r2, r1
 800b9f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b9fe:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ba00:	e023      	b.n	800ba4a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ba02:	78fb      	ldrb	r3, [r7, #3]
 800ba04:	015a      	lsls	r2, r3, #5
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	4413      	add	r3, r2
 800ba0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f240 2325 	movw	r3, #549	@ 0x225
 800ba14:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ba16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	da17      	bge.n	800ba4e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ba1e:	78fb      	ldrb	r3, [r7, #3]
 800ba20:	015a      	lsls	r2, r3, #5
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	4413      	add	r3, r2
 800ba26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	78fa      	ldrb	r2, [r7, #3]
 800ba2e:	0151      	lsls	r1, r2, #5
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	440a      	add	r2, r1
 800ba34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba38:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800ba3c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ba3e:	e006      	b.n	800ba4e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	77fb      	strb	r3, [r7, #31]
      break;
 800ba44:	e004      	b.n	800ba50 <USB_HC_Init+0x148>
      break;
 800ba46:	bf00      	nop
 800ba48:	e002      	b.n	800ba50 <USB_HC_Init+0x148>
      break;
 800ba4a:	bf00      	nop
 800ba4c:	e000      	b.n	800ba50 <USB_HC_Init+0x148>
      break;
 800ba4e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800ba62:	78fb      	ldrb	r3, [r7, #3]
 800ba64:	015a      	lsls	r2, r3, #5
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	4413      	add	r3, r2
 800ba6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	78fa      	ldrb	r2, [r7, #3]
 800ba72:	0151      	lsls	r1, r2, #5
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	440a      	add	r2, r1
 800ba78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba7c:	f043 0302 	orr.w	r3, r3, #2
 800ba80:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba88:	699a      	ldr	r2, [r3, #24]
 800ba8a:	78fb      	ldrb	r3, [r7, #3]
 800ba8c:	f003 030f 	and.w	r3, r3, #15
 800ba90:	2101      	movs	r1, #1
 800ba92:	fa01 f303 	lsl.w	r3, r1, r3
 800ba96:	6939      	ldr	r1, [r7, #16]
 800ba98:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800baac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	da03      	bge.n	800babc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bab4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bab8:	61bb      	str	r3, [r7, #24]
 800baba:	e001      	b.n	800bac0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800babc:	2300      	movs	r3, #0
 800babe:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f7ff fef9 	bl	800b8b8 <USB_GetHostSpeed>
 800bac6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800bac8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d106      	bne.n	800bade <USB_HC_Init+0x1d6>
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d003      	beq.n	800bade <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bad6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800bada:	617b      	str	r3, [r7, #20]
 800badc:	e001      	b.n	800bae2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bade:	2300      	movs	r3, #0
 800bae0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bae2:	787b      	ldrb	r3, [r7, #1]
 800bae4:	059b      	lsls	r3, r3, #22
 800bae6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800baea:	78bb      	ldrb	r3, [r7, #2]
 800baec:	02db      	lsls	r3, r3, #11
 800baee:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800baf2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800baf4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800baf8:	049b      	lsls	r3, r3, #18
 800bafa:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bafe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800bb00:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800bb02:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bb06:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb10:	78fa      	ldrb	r2, [r7, #3]
 800bb12:	0151      	lsls	r1, r2, #5
 800bb14:	693a      	ldr	r2, [r7, #16]
 800bb16:	440a      	add	r2, r1
 800bb18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800bb1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bb20:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800bb22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d003      	beq.n	800bb32 <USB_HC_Init+0x22a>
 800bb2a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d10f      	bne.n	800bb52 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800bb32:	78fb      	ldrb	r3, [r7, #3]
 800bb34:	015a      	lsls	r2, r3, #5
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	4413      	add	r3, r2
 800bb3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	78fa      	ldrb	r2, [r7, #3]
 800bb42:	0151      	lsls	r1, r2, #5
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	440a      	add	r2, r1
 800bb48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bb50:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bb52:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3720      	adds	r7, #32
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}
 800bb5c:	40040000 	.word	0x40040000

0800bb60 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b08c      	sub	sp, #48	@ 0x30
 800bb64:	af02      	add	r7, sp, #8
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	785b      	ldrb	r3, [r3, #1]
 800bb76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800bb78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bb7c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	4a5d      	ldr	r2, [pc, #372]	@ (800bcf8 <USB_HC_StartXfer+0x198>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d12f      	bne.n	800bbe6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800bb86:	79fb      	ldrb	r3, [r7, #7]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d11c      	bne.n	800bbc6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	7c9b      	ldrb	r3, [r3, #18]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d003      	beq.n	800bb9c <USB_HC_StartXfer+0x3c>
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	7c9b      	ldrb	r3, [r3, #18]
 800bb98:	2b02      	cmp	r3, #2
 800bb9a:	d124      	bne.n	800bbe6 <USB_HC_StartXfer+0x86>
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	799b      	ldrb	r3, [r3, #6]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d120      	bne.n	800bbe6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	6a3b      	ldr	r3, [r7, #32]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	69fa      	ldr	r2, [r7, #28]
 800bbb4:	0151      	lsls	r1, r2, #5
 800bbb6:	6a3a      	ldr	r2, [r7, #32]
 800bbb8:	440a      	add	r2, r1
 800bbba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbc2:	60d3      	str	r3, [r2, #12]
 800bbc4:	e00f      	b.n	800bbe6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	791b      	ldrb	r3, [r3, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10b      	bne.n	800bbe6 <USB_HC_StartXfer+0x86>
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	795b      	ldrb	r3, [r3, #5]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d107      	bne.n	800bbe6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	785b      	ldrb	r3, [r3, #1]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 fb6b 	bl	800c2b8 <USB_DoPing>
        return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	e232      	b.n	800c04c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	799b      	ldrb	r3, [r3, #6]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d158      	bne.n	800bca0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	78db      	ldrb	r3, [r3, #3]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d007      	beq.n	800bc0a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800bbfa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	8a92      	ldrh	r2, [r2, #20]
 800bc00:	fb03 f202 	mul.w	r2, r3, r2
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	61da      	str	r2, [r3, #28]
 800bc08:	e07c      	b.n	800bd04 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	7c9b      	ldrb	r3, [r3, #18]
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d130      	bne.n	800bc74 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	2bbc      	cmp	r3, #188	@ 0xbc
 800bc18:	d918      	bls.n	800bc4c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	8a9b      	ldrh	r3, [r3, #20]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	69da      	ldr	r2, [r3, #28]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d003      	beq.n	800bc3c <USB_HC_StartXfer+0xdc>
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	d103      	bne.n	800bc44 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2202      	movs	r2, #2
 800bc40:	60da      	str	r2, [r3, #12]
 800bc42:	e05f      	b.n	800bd04 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2201      	movs	r2, #1
 800bc48:	60da      	str	r2, [r3, #12]
 800bc4a:	e05b      	b.n	800bd04 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	6a1a      	ldr	r2, [r3, #32]
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d007      	beq.n	800bc6c <USB_HC_StartXfer+0x10c>
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d003      	beq.n	800bc6c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2204      	movs	r2, #4
 800bc68:	60da      	str	r2, [r3, #12]
 800bc6a:	e04b      	b.n	800bd04 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	2203      	movs	r2, #3
 800bc70:	60da      	str	r2, [r3, #12]
 800bc72:	e047      	b.n	800bd04 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800bc74:	79fb      	ldrb	r3, [r7, #7]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d10d      	bne.n	800bc96 <USB_HC_StartXfer+0x136>
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	6a1b      	ldr	r3, [r3, #32]
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	8a92      	ldrh	r2, [r2, #20]
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d907      	bls.n	800bc96 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800bc86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	8a92      	ldrh	r2, [r2, #20]
 800bc8c:	fb03 f202 	mul.w	r2, r3, r2
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	61da      	str	r2, [r3, #28]
 800bc94:	e036      	b.n	800bd04 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	6a1a      	ldr	r2, [r3, #32]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	61da      	str	r2, [r3, #28]
 800bc9e:	e031      	b.n	800bd04 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	6a1b      	ldr	r3, [r3, #32]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d018      	beq.n	800bcda <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	8a92      	ldrh	r2, [r2, #20]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	8a92      	ldrh	r2, [r2, #20]
 800bcb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bcbc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800bcbe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800bcc0:	8b7b      	ldrh	r3, [r7, #26]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d90b      	bls.n	800bcde <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800bcc6:	8b7b      	ldrh	r3, [r7, #26]
 800bcc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800bcca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	8a92      	ldrh	r2, [r2, #20]
 800bcd0:	fb03 f202 	mul.w	r2, r3, r2
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	61da      	str	r2, [r3, #28]
 800bcd8:	e001      	b.n	800bcde <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	78db      	ldrb	r3, [r3, #3]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00a      	beq.n	800bcfc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800bce6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bce8:	68ba      	ldr	r2, [r7, #8]
 800bcea:	8a92      	ldrh	r2, [r2, #20]
 800bcec:	fb03 f202 	mul.w	r2, r3, r2
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	61da      	str	r2, [r3, #28]
 800bcf4:	e006      	b.n	800bd04 <USB_HC_StartXfer+0x1a4>
 800bcf6:	bf00      	nop
 800bcf8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	6a1a      	ldr	r2, [r3, #32]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	69db      	ldr	r3, [r3, #28]
 800bd08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bd0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bd0e:	04d9      	lsls	r1, r3, #19
 800bd10:	4ba3      	ldr	r3, [pc, #652]	@ (800bfa0 <USB_HC_StartXfer+0x440>)
 800bd12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	7d9b      	ldrb	r3, [r3, #22]
 800bd1a:	075b      	lsls	r3, r3, #29
 800bd1c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd20:	69f9      	ldr	r1, [r7, #28]
 800bd22:	0148      	lsls	r0, r1, #5
 800bd24:	6a39      	ldr	r1, [r7, #32]
 800bd26:	4401      	add	r1, r0
 800bd28:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bd2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800bd2e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bd30:	79fb      	ldrb	r3, [r7, #7]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d009      	beq.n	800bd4a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	6999      	ldr	r1, [r3, #24]
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	015a      	lsls	r2, r3, #5
 800bd3e:	6a3b      	ldr	r3, [r7, #32]
 800bd40:	4413      	add	r3, r2
 800bd42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd46:	460a      	mov	r2, r1
 800bd48:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	bf0c      	ite	eq
 800bd5a:	2301      	moveq	r3, #1
 800bd5c:	2300      	movne	r3, #0
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	015a      	lsls	r2, r3, #5
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	4413      	add	r3, r2
 800bd6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	69fa      	ldr	r2, [r7, #28]
 800bd72:	0151      	lsls	r1, r2, #5
 800bd74:	6a3a      	ldr	r2, [r7, #32]
 800bd76:	440a      	add	r2, r1
 800bd78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bd7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bd80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	015a      	lsls	r2, r3, #5
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	4413      	add	r3, r2
 800bd8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	7e7b      	ldrb	r3, [r7, #25]
 800bd92:	075b      	lsls	r3, r3, #29
 800bd94:	69f9      	ldr	r1, [r7, #28]
 800bd96:	0148      	lsls	r0, r1, #5
 800bd98:	6a39      	ldr	r1, [r7, #32]
 800bd9a:	4401      	add	r1, r0
 800bd9c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800bda0:	4313      	orrs	r3, r2
 800bda2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	799b      	ldrb	r3, [r3, #6]
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	f040 80c3 	bne.w	800bf34 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	7c5b      	ldrb	r3, [r3, #17]
 800bdb2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800bdb4:	68ba      	ldr	r2, [r7, #8]
 800bdb6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	69fa      	ldr	r2, [r7, #28]
 800bdbc:	0151      	lsls	r1, r2, #5
 800bdbe:	6a3a      	ldr	r2, [r7, #32]
 800bdc0:	440a      	add	r2, r1
 800bdc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800bdc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800bdca:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800bdcc:	69fb      	ldr	r3, [r7, #28]
 800bdce:	015a      	lsls	r2, r3, #5
 800bdd0:	6a3b      	ldr	r3, [r7, #32]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	69fa      	ldr	r2, [r7, #28]
 800bddc:	0151      	lsls	r1, r2, #5
 800bdde:	6a3a      	ldr	r2, [r7, #32]
 800bde0:	440a      	add	r2, r1
 800bde2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bde6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800bdea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	79db      	ldrb	r3, [r3, #7]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d123      	bne.n	800be3c <USB_HC_StartXfer+0x2dc>
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	78db      	ldrb	r3, [r3, #3]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d11f      	bne.n	800be3c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	015a      	lsls	r2, r3, #5
 800be00:	6a3b      	ldr	r3, [r7, #32]
 800be02:	4413      	add	r3, r2
 800be04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	0151      	lsls	r1, r2, #5
 800be0e:	6a3a      	ldr	r2, [r7, #32]
 800be10:	440a      	add	r2, r1
 800be12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800be16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be1a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	015a      	lsls	r2, r3, #5
 800be20:	6a3b      	ldr	r3, [r7, #32]
 800be22:	4413      	add	r3, r2
 800be24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	69fa      	ldr	r2, [r7, #28]
 800be2c:	0151      	lsls	r1, r2, #5
 800be2e:	6a3a      	ldr	r2, [r7, #32]
 800be30:	440a      	add	r2, r1
 800be32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800be36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be3a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	7c9b      	ldrb	r3, [r3, #18]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d003      	beq.n	800be4c <USB_HC_StartXfer+0x2ec>
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	7c9b      	ldrb	r3, [r3, #18]
 800be48:	2b03      	cmp	r3, #3
 800be4a:	d117      	bne.n	800be7c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800be50:	2b01      	cmp	r3, #1
 800be52:	d113      	bne.n	800be7c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	78db      	ldrb	r3, [r3, #3]
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d10f      	bne.n	800be7c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	4413      	add	r3, r2
 800be64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	69fa      	ldr	r2, [r7, #28]
 800be6c:	0151      	lsls	r1, r2, #5
 800be6e:	6a3a      	ldr	r2, [r7, #32]
 800be70:	440a      	add	r2, r1
 800be72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800be76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be7a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	7c9b      	ldrb	r3, [r3, #18]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d162      	bne.n	800bf4a <USB_HC_StartXfer+0x3ea>
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	78db      	ldrb	r3, [r3, #3]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d15e      	bne.n	800bf4a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	3b01      	subs	r3, #1
 800be92:	2b03      	cmp	r3, #3
 800be94:	d858      	bhi.n	800bf48 <USB_HC_StartXfer+0x3e8>
 800be96:	a201      	add	r2, pc, #4	@ (adr r2, 800be9c <USB_HC_StartXfer+0x33c>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800bead 	.word	0x0800bead
 800bea0:	0800becf 	.word	0x0800becf
 800bea4:	0800bef1 	.word	0x0800bef1
 800bea8:	0800bf13 	.word	0x0800bf13
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	015a      	lsls	r2, r3, #5
 800beb0:	6a3b      	ldr	r3, [r7, #32]
 800beb2:	4413      	add	r3, r2
 800beb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	69fa      	ldr	r2, [r7, #28]
 800bebc:	0151      	lsls	r1, r2, #5
 800bebe:	6a3a      	ldr	r2, [r7, #32]
 800bec0:	440a      	add	r2, r1
 800bec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800beca:	6053      	str	r3, [r2, #4]
          break;
 800becc:	e03d      	b.n	800bf4a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	015a      	lsls	r2, r3, #5
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	4413      	add	r3, r2
 800bed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	69fa      	ldr	r2, [r7, #28]
 800bede:	0151      	lsls	r1, r2, #5
 800bee0:	6a3a      	ldr	r2, [r7, #32]
 800bee2:	440a      	add	r2, r1
 800bee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bee8:	f043 030e 	orr.w	r3, r3, #14
 800beec:	6053      	str	r3, [r2, #4]
          break;
 800beee:	e02c      	b.n	800bf4a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	015a      	lsls	r2, r3, #5
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	4413      	add	r3, r2
 800bef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	69fa      	ldr	r2, [r7, #28]
 800bf00:	0151      	lsls	r1, r2, #5
 800bf02:	6a3a      	ldr	r2, [r7, #32]
 800bf04:	440a      	add	r2, r1
 800bf06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bf0e:	6053      	str	r3, [r2, #4]
          break;
 800bf10:	e01b      	b.n	800bf4a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	015a      	lsls	r2, r3, #5
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	4413      	add	r3, r2
 800bf1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	69fa      	ldr	r2, [r7, #28]
 800bf22:	0151      	lsls	r1, r2, #5
 800bf24:	6a3a      	ldr	r2, [r7, #32]
 800bf26:	440a      	add	r2, r1
 800bf28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bf2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf30:	6053      	str	r3, [r2, #4]
          break;
 800bf32:	e00a      	b.n	800bf4a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	015a      	lsls	r2, r3, #5
 800bf38:	6a3b      	ldr	r3, [r7, #32]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf40:	461a      	mov	r2, r3
 800bf42:	2300      	movs	r3, #0
 800bf44:	6053      	str	r3, [r2, #4]
 800bf46:	e000      	b.n	800bf4a <USB_HC_StartXfer+0x3ea>
          break;
 800bf48:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	015a      	lsls	r2, r3, #5
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	4413      	add	r3, r2
 800bf52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bf60:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	78db      	ldrb	r3, [r3, #3]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d004      	beq.n	800bf74 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bf6a:	693b      	ldr	r3, [r7, #16]
 800bf6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf70:	613b      	str	r3, [r7, #16]
 800bf72:	e003      	b.n	800bf7c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bf7a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bf82:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	015a      	lsls	r2, r3, #5
 800bf88:	6a3b      	ldr	r3, [r7, #32]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bf90:	461a      	mov	r2, r3
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d003      	beq.n	800bfa4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	e055      	b.n	800c04c <USB_HC_StartXfer+0x4ec>
 800bfa0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	78db      	ldrb	r3, [r3, #3]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d14e      	bne.n	800c04a <USB_HC_StartXfer+0x4ea>
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	6a1b      	ldr	r3, [r3, #32]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d04a      	beq.n	800c04a <USB_HC_StartXfer+0x4ea>
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	79db      	ldrb	r3, [r3, #7]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d146      	bne.n	800c04a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	7c9b      	ldrb	r3, [r3, #18]
 800bfc0:	2b03      	cmp	r3, #3
 800bfc2:	d831      	bhi.n	800c028 <USB_HC_StartXfer+0x4c8>
 800bfc4:	a201      	add	r2, pc, #4	@ (adr r2, 800bfcc <USB_HC_StartXfer+0x46c>)
 800bfc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfca:	bf00      	nop
 800bfcc:	0800bfdd 	.word	0x0800bfdd
 800bfd0:	0800c001 	.word	0x0800c001
 800bfd4:	0800bfdd 	.word	0x0800bfdd
 800bfd8:	0800c001 	.word	0x0800c001
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	6a1b      	ldr	r3, [r3, #32]
 800bfe0:	3303      	adds	r3, #3
 800bfe2:	089b      	lsrs	r3, r3, #2
 800bfe4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bfe6:	8afa      	ldrh	r2, [r7, #22]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d91c      	bls.n	800c02c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	699b      	ldr	r3, [r3, #24]
 800bff6:	f043 0220 	orr.w	r2, r3, #32
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	619a      	str	r2, [r3, #24]
        }
        break;
 800bffe:	e015      	b.n	800c02c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	6a1b      	ldr	r3, [r3, #32]
 800c004:	3303      	adds	r3, #3
 800c006:	089b      	lsrs	r3, r3, #2
 800c008:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c00a:	8afa      	ldrh	r2, [r7, #22]
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c012:	691b      	ldr	r3, [r3, #16]
 800c014:	b29b      	uxth	r3, r3
 800c016:	429a      	cmp	r2, r3
 800c018:	d90a      	bls.n	800c030 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	699b      	ldr	r3, [r3, #24]
 800c01e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	619a      	str	r2, [r3, #24]
        }
        break;
 800c026:	e003      	b.n	800c030 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800c028:	bf00      	nop
 800c02a:	e002      	b.n	800c032 <USB_HC_StartXfer+0x4d2>
        break;
 800c02c:	bf00      	nop
 800c02e:	e000      	b.n	800c032 <USB_HC_StartXfer+0x4d2>
        break;
 800c030:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	6999      	ldr	r1, [r3, #24]
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	785a      	ldrb	r2, [r3, #1]
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	6a1b      	ldr	r3, [r3, #32]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	2000      	movs	r0, #0
 800c042:	9000      	str	r0, [sp, #0]
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f7ff f9d5 	bl	800b3f4 <USB_WritePacket>
  }

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3728      	adds	r7, #40	@ 0x28
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	b29b      	uxth	r3, r3
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c076:	b480      	push	{r7}
 800c078:	b089      	sub	sp, #36	@ 0x24
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	460b      	mov	r3, r1
 800c080:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c086:	78fb      	ldrb	r3, [r7, #3]
 800c088:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c08a:	2300      	movs	r3, #0
 800c08c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c08e:	69bb      	ldr	r3, [r7, #24]
 800c090:	015a      	lsls	r2, r3, #5
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	4413      	add	r3, r2
 800c096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	0c9b      	lsrs	r3, r3, #18
 800c09e:	f003 0303 	and.w	r3, r3, #3
 800c0a2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	015a      	lsls	r2, r3, #5
 800c0a8:	69fb      	ldr	r3, [r7, #28]
 800c0aa:	4413      	add	r3, r2
 800c0ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	0fdb      	lsrs	r3, r3, #31
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c0c6:	685b      	ldr	r3, [r3, #4]
 800c0c8:	0fdb      	lsrs	r3, r3, #31
 800c0ca:	f003 0301 	and.w	r3, r3, #1
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	f003 0320 	and.w	r3, r3, #32
 800c0d8:	2b20      	cmp	r3, #32
 800c0da:	d10d      	bne.n	800c0f8 <USB_HC_Halt+0x82>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d10a      	bne.n	800c0f8 <USB_HC_Halt+0x82>
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d005      	beq.n	800c0f4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d002      	beq.n	800c0f4 <USB_HC_Halt+0x7e>
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d101      	bne.n	800c0f8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	e0d8      	b.n	800c2aa <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d002      	beq.n	800c104 <USB_HC_Halt+0x8e>
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	2b02      	cmp	r3, #2
 800c102:	d173      	bne.n	800c1ec <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	015a      	lsls	r2, r3, #5
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	4413      	add	r3, r2
 800c10c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	0151      	lsls	r1, r2, #5
 800c116:	69fa      	ldr	r2, [r7, #28]
 800c118:	440a      	add	r2, r1
 800c11a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c11e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c122:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	f003 0320 	and.w	r3, r3, #32
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d14a      	bne.n	800c1c6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c134:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d133      	bne.n	800c1a4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	015a      	lsls	r2, r3, #5
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	4413      	add	r3, r2
 800c144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	0151      	lsls	r1, r2, #5
 800c14e:	69fa      	ldr	r2, [r7, #28]
 800c150:	440a      	add	r2, r1
 800c152:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c156:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c15a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	015a      	lsls	r2, r3, #5
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	4413      	add	r3, r2
 800c164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	0151      	lsls	r1, r2, #5
 800c16e:	69fa      	ldr	r2, [r7, #28]
 800c170:	440a      	add	r2, r1
 800c172:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c176:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c17a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	3301      	adds	r3, #1
 800c180:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c188:	d82e      	bhi.n	800c1e8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	015a      	lsls	r2, r3, #5
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	4413      	add	r3, r2
 800c192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c19c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c1a0:	d0ec      	beq.n	800c17c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c1a2:	e081      	b.n	800c2a8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	015a      	lsls	r2, r3, #5
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69ba      	ldr	r2, [r7, #24]
 800c1b4:	0151      	lsls	r1, r2, #5
 800c1b6:	69fa      	ldr	r2, [r7, #28]
 800c1b8:	440a      	add	r2, r1
 800c1ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c1be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c1c2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c1c4:	e070      	b.n	800c2a8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	69ba      	ldr	r2, [r7, #24]
 800c1d6:	0151      	lsls	r1, r2, #5
 800c1d8:	69fa      	ldr	r2, [r7, #28]
 800c1da:	440a      	add	r2, r1
 800c1dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c1e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c1e4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c1e6:	e05f      	b.n	800c2a8 <USB_HC_Halt+0x232>
            break;
 800c1e8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c1ea:	e05d      	b.n	800c2a8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	69ba      	ldr	r2, [r7, #24]
 800c1fc:	0151      	lsls	r1, r2, #5
 800c1fe:	69fa      	ldr	r2, [r7, #28]
 800c200:	440a      	add	r2, r1
 800c202:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c206:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c20a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d133      	bne.n	800c284 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c21c:	69bb      	ldr	r3, [r7, #24]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	4413      	add	r3, r2
 800c224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	69ba      	ldr	r2, [r7, #24]
 800c22c:	0151      	lsls	r1, r2, #5
 800c22e:	69fa      	ldr	r2, [r7, #28]
 800c230:	440a      	add	r2, r1
 800c232:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c236:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c23a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	015a      	lsls	r2, r3, #5
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	4413      	add	r3, r2
 800c244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	0151      	lsls	r1, r2, #5
 800c24e:	69fa      	ldr	r2, [r7, #28]
 800c250:	440a      	add	r2, r1
 800c252:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c256:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c25a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	3301      	adds	r3, #1
 800c260:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c268:	d81d      	bhi.n	800c2a6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	69fb      	ldr	r3, [r7, #28]
 800c270:	4413      	add	r3, r2
 800c272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c27c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c280:	d0ec      	beq.n	800c25c <USB_HC_Halt+0x1e6>
 800c282:	e011      	b.n	800c2a8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	015a      	lsls	r2, r3, #5
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	69ba      	ldr	r2, [r7, #24]
 800c294:	0151      	lsls	r1, r2, #5
 800c296:	69fa      	ldr	r2, [r7, #28]
 800c298:	440a      	add	r2, r1
 800c29a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c29e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c2a2:	6013      	str	r3, [r2, #0]
 800c2a4:	e000      	b.n	800c2a8 <USB_HC_Halt+0x232>
          break;
 800c2a6:	bf00      	nop
    }
  }

  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3724      	adds	r7, #36	@ 0x24
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr
	...

0800c2b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c2b8:	b480      	push	{r7}
 800c2ba:	b087      	sub	sp, #28
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c2c8:	78fb      	ldrb	r3, [r7, #3]
 800c2ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	04da      	lsls	r2, r3, #19
 800c2d4:	4b15      	ldr	r3, [pc, #84]	@ (800c32c <USB_DoPing+0x74>)
 800c2d6:	4013      	ands	r3, r2
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	0151      	lsls	r1, r2, #5
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	440a      	add	r2, r1
 800c2e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c2e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c2e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	015a      	lsls	r2, r3, #5
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c300:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c308:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	015a      	lsls	r2, r3, #5
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	4413      	add	r3, r2
 800c312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c316:	461a      	mov	r2, r3
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	371c      	adds	r7, #28
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	1ff80000 	.word	0x1ff80000

0800c330 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b088      	sub	sp, #32
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c338:	2300      	movs	r3, #0
 800c33a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c340:	2300      	movs	r3, #0
 800c342:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7fe ff98 	bl	800b27a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c34a:	2110      	movs	r1, #16
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7fe fff1 	bl	800b334 <USB_FlushTxFifo>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c358:	2301      	movs	r3, #1
 800c35a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7ff f81b 	bl	800b398 <USB_FlushRxFifo>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c36c:	2300      	movs	r3, #0
 800c36e:	61bb      	str	r3, [r7, #24]
 800c370:	e01f      	b.n	800c3b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	015a      	lsls	r2, r3, #5
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	4413      	add	r3, r2
 800c37a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c388:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c390:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c398:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	015a      	lsls	r2, r3, #5
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	61bb      	str	r3, [r7, #24]
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	2b0f      	cmp	r3, #15
 800c3b6:	d9dc      	bls.n	800c372 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	61bb      	str	r3, [r7, #24]
 800c3bc:	e034      	b.n	800c428 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	015a      	lsls	r2, r3, #5
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c3d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c3dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c3de:	693b      	ldr	r3, [r7, #16]
 800c3e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c3e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	015a      	lsls	r2, r3, #5
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	4413      	add	r3, r2
 800c3ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c404:	d80c      	bhi.n	800c420 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	015a      	lsls	r2, r3, #5
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	4413      	add	r3, r2
 800c40e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c418:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c41c:	d0ec      	beq.n	800c3f8 <USB_StopHost+0xc8>
 800c41e:	e000      	b.n	800c422 <USB_StopHost+0xf2>
        break;
 800c420:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	3301      	adds	r3, #1
 800c426:	61bb      	str	r3, [r7, #24]
 800c428:	69bb      	ldr	r3, [r7, #24]
 800c42a:	2b0f      	cmp	r3, #15
 800c42c:	d9c7      	bls.n	800c3be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c434:	461a      	mov	r2, r3
 800c436:	f04f 33ff 	mov.w	r3, #4294967295
 800c43a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f04f 32ff 	mov.w	r2, #4294967295
 800c442:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7fe ff07 	bl	800b258 <USB_EnableGlobalInt>

  return ret;
 800c44a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3720      	adds	r7, #32
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c458:	4904      	ldr	r1, [pc, #16]	@ (800c46c <MX_FATFS_Init+0x18>)
 800c45a:	4805      	ldr	r0, [pc, #20]	@ (800c470 <MX_FATFS_Init+0x1c>)
 800c45c:	f002 fa64 	bl	800e928 <FATFS_LinkDriver>
 800c460:	4603      	mov	r3, r0
 800c462:	461a      	mov	r2, r3
 800c464:	4b03      	ldr	r3, [pc, #12]	@ (800c474 <MX_FATFS_Init+0x20>)
 800c466:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c468:	bf00      	nop
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20000570 	.word	0x20000570
 800c470:	080101a0 	.word	0x080101a0
 800c474:	2000056c 	.word	0x2000056c

0800c478 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c482:	f000 f879 	bl	800c578 <BSP_SD_IsDetected>
 800c486:	4603      	mov	r3, r0
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d001      	beq.n	800c490 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	e012      	b.n	800c4b6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c490:	480b      	ldr	r0, [pc, #44]	@ (800c4c0 <BSP_SD_Init+0x48>)
 800c492:	f7fb f979 	bl	8007788 <HAL_SD_Init>
 800c496:	4603      	mov	r3, r0
 800c498:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c49a:	79fb      	ldrb	r3, [r7, #7]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d109      	bne.n	800c4b4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c4a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800c4a4:	4806      	ldr	r0, [pc, #24]	@ (800c4c0 <BSP_SD_Init+0x48>)
 800c4a6:	f7fb ff53 	bl	8008350 <HAL_SD_ConfigWideBusOperation>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c4b4:	79fb      	ldrb	r3, [r7, #7]
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	2000032c 	.word	0x2000032c

0800c4c4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af02      	add	r7, sp, #8
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	68f9      	ldr	r1, [r7, #12]
 800c4e0:	4806      	ldr	r0, [pc, #24]	@ (800c4fc <BSP_SD_ReadBlocks+0x38>)
 800c4e2:	f7fb fa01 	bl	80078e8 <HAL_SD_ReadBlocks>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d001      	beq.n	800c4f0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	2000032c 	.word	0x2000032c

0800c500 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b088      	sub	sp, #32
 800c504:	af02      	add	r7, sp, #8
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	607a      	str	r2, [r7, #4]
 800c50c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c50e:	2300      	movs	r3, #0
 800c510:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	68f9      	ldr	r1, [r7, #12]
 800c51c:	4806      	ldr	r0, [pc, #24]	@ (800c538 <BSP_SD_WriteBlocks+0x38>)
 800c51e:	f7fb fbc1 	bl	8007ca4 <HAL_SD_WriteBlocks>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c528:	2301      	movs	r3, #1
 800c52a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3718      	adds	r7, #24
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	2000032c 	.word	0x2000032c

0800c53c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c540:	4805      	ldr	r0, [pc, #20]	@ (800c558 <BSP_SD_GetCardState+0x1c>)
 800c542:	f7fb ff9f 	bl	8008484 <HAL_SD_GetCardState>
 800c546:	4603      	mov	r3, r0
 800c548:	2b04      	cmp	r3, #4
 800c54a:	bf14      	ite	ne
 800c54c:	2301      	movne	r3, #1
 800c54e:	2300      	moveq	r3, #0
 800c550:	b2db      	uxtb	r3, r3
}
 800c552:	4618      	mov	r0, r3
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	2000032c 	.word	0x2000032c

0800c55c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b082      	sub	sp, #8
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c564:	6879      	ldr	r1, [r7, #4]
 800c566:	4803      	ldr	r0, [pc, #12]	@ (800c574 <BSP_SD_GetCardInfo+0x18>)
 800c568:	f7fb fec6 	bl	80082f8 <HAL_SD_GetCardInfo>
}
 800c56c:	bf00      	nop
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}
 800c574:	2000032c 	.word	0x2000032c

0800c578 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c57e:	2301      	movs	r3, #1
 800c580:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c582:	f000 f80b 	bl	800c59c <BSP_PlatformIsDetected>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d101      	bne.n	800c590 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c58c:	2300      	movs	r3, #0
 800c58e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c590:	79fb      	ldrb	r3, [r7, #7]
 800c592:	b2db      	uxtb	r3, r3
}
 800c594:	4618      	mov	r0, r3
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c5a6:	2104      	movs	r1, #4
 800c5a8:	4806      	ldr	r0, [pc, #24]	@ (800c5c4 <BSP_PlatformIsDetected+0x28>)
 800c5aa:	f7f7 f88b 	bl	80036c4 <HAL_GPIO_ReadPin>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c5b8:	79fb      	ldrb	r3, [r7, #7]
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	40021800 	.word	0x40021800

0800c5c8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c600 <SD_CheckStatus+0x38>)
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c5d8:	f7ff ffb0 	bl	800c53c <BSP_SD_GetCardState>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d107      	bne.n	800c5f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c5e2:	4b07      	ldr	r3, [pc, #28]	@ (800c600 <SD_CheckStatus+0x38>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	f023 0301 	bic.w	r3, r3, #1
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	4b04      	ldr	r3, [pc, #16]	@ (800c600 <SD_CheckStatus+0x38>)
 800c5f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c5f2:	4b03      	ldr	r3, [pc, #12]	@ (800c600 <SD_CheckStatus+0x38>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	b2db      	uxtb	r3, r3
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3708      	adds	r7, #8
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	20000009 	.word	0x20000009

0800c604 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	4603      	mov	r3, r0
 800c60c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c60e:	4b0b      	ldr	r3, [pc, #44]	@ (800c63c <SD_initialize+0x38>)
 800c610:	2201      	movs	r2, #1
 800c612:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c614:	f7ff ff30 	bl	800c478 <BSP_SD_Init>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d107      	bne.n	800c62e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c61e:	79fb      	ldrb	r3, [r7, #7]
 800c620:	4618      	mov	r0, r3
 800c622:	f7ff ffd1 	bl	800c5c8 <SD_CheckStatus>
 800c626:	4603      	mov	r3, r0
 800c628:	461a      	mov	r2, r3
 800c62a:	4b04      	ldr	r3, [pc, #16]	@ (800c63c <SD_initialize+0x38>)
 800c62c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c62e:	4b03      	ldr	r3, [pc, #12]	@ (800c63c <SD_initialize+0x38>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	b2db      	uxtb	r3, r3
}
 800c634:	4618      	mov	r0, r3
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	20000009 	.word	0x20000009

0800c640 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	4603      	mov	r3, r0
 800c648:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c64a:	79fb      	ldrb	r3, [r7, #7]
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7ff ffbb 	bl	800c5c8 <SD_CheckStatus>
 800c652:	4603      	mov	r3, r0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b086      	sub	sp, #24
 800c660:	af00      	add	r7, sp, #0
 800c662:	60b9      	str	r1, [r7, #8]
 800c664:	607a      	str	r2, [r7, #4]
 800c666:	603b      	str	r3, [r7, #0]
 800c668:	4603      	mov	r3, r0
 800c66a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c670:	f04f 33ff 	mov.w	r3, #4294967295
 800c674:	683a      	ldr	r2, [r7, #0]
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	68b8      	ldr	r0, [r7, #8]
 800c67a:	f7ff ff23 	bl	800c4c4 <BSP_SD_ReadBlocks>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d107      	bne.n	800c694 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c684:	bf00      	nop
 800c686:	f7ff ff59 	bl	800c53c <BSP_SD_GetCardState>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1fa      	bne.n	800c686 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c690:	2300      	movs	r3, #0
 800c692:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c694:	7dfb      	ldrb	r3, [r7, #23]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3718      	adds	r7, #24
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}

0800c69e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b086      	sub	sp, #24
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
 800c6a8:	603b      	str	r3, [r7, #0]
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	6879      	ldr	r1, [r7, #4]
 800c6ba:	68b8      	ldr	r0, [r7, #8]
 800c6bc:	f7ff ff20 	bl	800c500 <BSP_SD_WriteBlocks>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d107      	bne.n	800c6d6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c6c6:	bf00      	nop
 800c6c8:	f7ff ff38 	bl	800c53c <BSP_SD_GetCardState>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1fa      	bne.n	800c6c8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c6d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3718      	adds	r7, #24
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b08c      	sub	sp, #48	@ 0x30
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	603a      	str	r2, [r7, #0]
 800c6ea:	71fb      	strb	r3, [r7, #7]
 800c6ec:	460b      	mov	r3, r1
 800c6ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c6f6:	4b25      	ldr	r3, [pc, #148]	@ (800c78c <SD_ioctl+0xac>)
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <SD_ioctl+0x28>
 800c704:	2303      	movs	r3, #3
 800c706:	e03c      	b.n	800c782 <SD_ioctl+0xa2>

  switch (cmd)
 800c708:	79bb      	ldrb	r3, [r7, #6]
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	d834      	bhi.n	800c778 <SD_ioctl+0x98>
 800c70e:	a201      	add	r2, pc, #4	@ (adr r2, 800c714 <SD_ioctl+0x34>)
 800c710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c714:	0800c725 	.word	0x0800c725
 800c718:	0800c72d 	.word	0x0800c72d
 800c71c:	0800c745 	.word	0x0800c745
 800c720:	0800c75f 	.word	0x0800c75f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c72a:	e028      	b.n	800c77e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c72c:	f107 030c 	add.w	r3, r7, #12
 800c730:	4618      	mov	r0, r3
 800c732:	f7ff ff13 	bl	800c55c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c742:	e01c      	b.n	800c77e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c744:	f107 030c 	add.w	r3, r7, #12
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff ff07 	bl	800c55c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c750:	b29a      	uxth	r2, r3
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c756:	2300      	movs	r3, #0
 800c758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c75c:	e00f      	b.n	800c77e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c75e:	f107 030c 	add.w	r3, r7, #12
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff fefa 	bl	800c55c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76a:	0a5a      	lsrs	r2, r3, #9
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c776:	e002      	b.n	800c77e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c778:	2304      	movs	r3, #4
 800c77a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c77e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c782:	4618      	mov	r0, r3
 800c784:	3730      	adds	r7, #48	@ 0x30
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	20000009 	.word	0x20000009

0800c790 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c790:	b590      	push	{r4, r7, lr}
 800c792:	b089      	sub	sp, #36	@ 0x24
 800c794:	af04      	add	r7, sp, #16
 800c796:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c798:	2301      	movs	r3, #1
 800c79a:	2202      	movs	r2, #2
 800c79c:	2102      	movs	r1, #2
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fc85 	bl	800d0ae <USBH_FindInterface>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	2bff      	cmp	r3, #255	@ 0xff
 800c7ac:	d002      	beq.n	800c7b4 <USBH_CDC_InterfaceInit+0x24>
 800c7ae:	7bfb      	ldrb	r3, [r7, #15]
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d901      	bls.n	800c7b8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	e13d      	b.n	800ca34 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c7b8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 fc5a 	bl	800d076 <USBH_SelectInterface>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c7c6:	7bbb      	ldrb	r3, [r7, #14]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	e131      	b.n	800ca34 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800c7d6:	2050      	movs	r0, #80	@ 0x50
 800c7d8:	f002 fbc0 	bl	800ef5c <malloc>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c7e6:	69db      	ldr	r3, [r3, #28]
 800c7e8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d101      	bne.n	800c7f4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	e11f      	b.n	800ca34 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c7f4:	2250      	movs	r2, #80	@ 0x50
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	68b8      	ldr	r0, [r7, #8]
 800c7fa:	f002 fe99 	bl	800f530 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	211a      	movs	r1, #26
 800c804:	fb01 f303 	mul.w	r3, r1, r3
 800c808:	4413      	add	r3, r2
 800c80a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	b25b      	sxtb	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	da15      	bge.n	800c842 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c816:	7bfb      	ldrb	r3, [r7, #15]
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	211a      	movs	r1, #26
 800c81c:	fb01 f303 	mul.w	r3, r1, r3
 800c820:	4413      	add	r3, r2
 800c822:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c826:	781a      	ldrb	r2, [r3, #0]
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c82c:	7bfb      	ldrb	r3, [r7, #15]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	211a      	movs	r1, #26
 800c832:	fb01 f303 	mul.w	r3, r1, r3
 800c836:	4413      	add	r3, r2
 800c838:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c83c:	881a      	ldrh	r2, [r3, #0]
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	785b      	ldrb	r3, [r3, #1]
 800c846:	4619      	mov	r1, r3
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f001 ffbe 	bl	800e7ca <USBH_AllocPipe>
 800c84e:	4603      	mov	r3, r0
 800c850:	461a      	mov	r2, r3
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	7819      	ldrb	r1, [r3, #0]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	7858      	ldrb	r0, [r3, #1]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	8952      	ldrh	r2, [r2, #10]
 800c86e:	9202      	str	r2, [sp, #8]
 800c870:	2203      	movs	r2, #3
 800c872:	9201      	str	r2, [sp, #4]
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	4623      	mov	r3, r4
 800c878:	4602      	mov	r2, r0
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f001 ff76 	bl	800e76c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	2200      	movs	r2, #0
 800c886:	4619      	mov	r1, r3
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f002 fae1 	bl	800ee50 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c88e:	2300      	movs	r3, #0
 800c890:	2200      	movs	r2, #0
 800c892:	210a      	movs	r1, #10
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fc0a 	bl	800d0ae <USBH_FindInterface>
 800c89a:	4603      	mov	r3, r0
 800c89c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c89e:	7bfb      	ldrb	r3, [r7, #15]
 800c8a0:	2bff      	cmp	r3, #255	@ 0xff
 800c8a2:	d002      	beq.n	800c8aa <USBH_CDC_InterfaceInit+0x11a>
 800c8a4:	7bfb      	ldrb	r3, [r7, #15]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d901      	bls.n	800c8ae <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c8aa:	2302      	movs	r3, #2
 800c8ac:	e0c2      	b.n	800ca34 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	211a      	movs	r1, #26
 800c8b4:	fb01 f303 	mul.w	r3, r1, r3
 800c8b8:	4413      	add	r3, r2
 800c8ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	b25b      	sxtb	r3, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da16      	bge.n	800c8f4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	211a      	movs	r1, #26
 800c8cc:	fb01 f303 	mul.w	r3, r1, r3
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c8d6:	781a      	ldrb	r2, [r3, #0]
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c8dc:	7bfb      	ldrb	r3, [r7, #15]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	211a      	movs	r1, #26
 800c8e2:	fb01 f303 	mul.w	r3, r1, r3
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c8ec:	881a      	ldrh	r2, [r3, #0]
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	835a      	strh	r2, [r3, #26]
 800c8f2:	e015      	b.n	800c920 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c8f4:	7bfb      	ldrb	r3, [r7, #15]
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	211a      	movs	r1, #26
 800c8fa:	fb01 f303 	mul.w	r3, r1, r3
 800c8fe:	4413      	add	r3, r2
 800c900:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c904:	781a      	ldrb	r2, [r3, #0]
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	211a      	movs	r1, #26
 800c910:	fb01 f303 	mul.w	r3, r1, r3
 800c914:	4413      	add	r3, r2
 800c916:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c91a:	881a      	ldrh	r2, [r3, #0]
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c920:	7bfb      	ldrb	r3, [r7, #15]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	211a      	movs	r1, #26
 800c926:	fb01 f303 	mul.w	r3, r1, r3
 800c92a:	4413      	add	r3, r2
 800c92c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	b25b      	sxtb	r3, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	da16      	bge.n	800c966 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	211a      	movs	r1, #26
 800c93e:	fb01 f303 	mul.w	r3, r1, r3
 800c942:	4413      	add	r3, r2
 800c944:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c948:	781a      	ldrb	r2, [r3, #0]
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	211a      	movs	r1, #26
 800c954:	fb01 f303 	mul.w	r3, r1, r3
 800c958:	4413      	add	r3, r2
 800c95a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c95e:	881a      	ldrh	r2, [r3, #0]
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	835a      	strh	r2, [r3, #26]
 800c964:	e015      	b.n	800c992 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c966:	7bfb      	ldrb	r3, [r7, #15]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	211a      	movs	r1, #26
 800c96c:	fb01 f303 	mul.w	r3, r1, r3
 800c970:	4413      	add	r3, r2
 800c972:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c976:	781a      	ldrb	r2, [r3, #0]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c97c:	7bfb      	ldrb	r3, [r7, #15]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	211a      	movs	r1, #26
 800c982:	fb01 f303 	mul.w	r3, r1, r3
 800c986:	4413      	add	r3, r2
 800c988:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c98c:	881a      	ldrh	r2, [r3, #0]
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	7b9b      	ldrb	r3, [r3, #14]
 800c996:	4619      	mov	r1, r3
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f001 ff16 	bl	800e7ca <USBH_AllocPipe>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	7bdb      	ldrb	r3, [r3, #15]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f001 ff0c 	bl	800e7ca <USBH_AllocPipe>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	7b59      	ldrb	r1, [r3, #13]
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	7b98      	ldrb	r0, [r3, #14]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	8b12      	ldrh	r2, [r2, #24]
 800c9d2:	9202      	str	r2, [sp, #8]
 800c9d4:	2202      	movs	r2, #2
 800c9d6:	9201      	str	r2, [sp, #4]
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	4623      	mov	r3, r4
 800c9dc:	4602      	mov	r2, r0
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f001 fec4 	bl	800e76c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	7b19      	ldrb	r1, [r3, #12]
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	7bd8      	ldrb	r0, [r3, #15]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	8b52      	ldrh	r2, [r2, #26]
 800c9fc:	9202      	str	r2, [sp, #8]
 800c9fe:	2202      	movs	r2, #2
 800ca00:	9201      	str	r2, [sp, #4]
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	4623      	mov	r3, r4
 800ca06:	4602      	mov	r2, r0
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f001 feaf 	bl	800e76c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	7b5b      	ldrb	r3, [r3, #13]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f002 fa16 	bl	800ee50 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	7b1b      	ldrb	r3, [r3, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f002 fa0f 	bl	800ee50 <USBH_LL_SetToggle>

  return USBH_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd90      	pop	{r4, r7, pc}

0800ca3c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ca4a:	69db      	ldr	r3, [r3, #28]
 800ca4c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d00e      	beq.n	800ca74 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	4619      	mov	r1, r3
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f001 fea4 	bl	800e7aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	4619      	mov	r1, r3
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f001 fecf 	bl	800e80c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2200      	movs	r2, #0
 800ca72:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	7b1b      	ldrb	r3, [r3, #12]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00e      	beq.n	800ca9a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	7b1b      	ldrb	r3, [r3, #12]
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f001 fe91 	bl	800e7aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	7b1b      	ldrb	r3, [r3, #12]
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f001 febc 	bl	800e80c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	7b5b      	ldrb	r3, [r3, #13]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00e      	beq.n	800cac0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	7b5b      	ldrb	r3, [r3, #13]
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f001 fe7e 	bl	800e7aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	7b5b      	ldrb	r3, [r3, #13]
 800cab2:	4619      	mov	r1, r3
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f001 fea9 	bl	800e80c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cac6:	69db      	ldr	r3, [r3, #28]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00b      	beq.n	800cae4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cad2:	69db      	ldr	r3, [r3, #28]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f002 fa49 	bl	800ef6c <free>
    phost->pActiveClass->pData = 0U;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cae0:	2200      	movs	r2, #0
 800cae2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800caee:	b580      	push	{r7, lr}
 800caf0:	b084      	sub	sp, #16
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3340      	adds	r3, #64	@ 0x40
 800cb04:	4619      	mov	r1, r3
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f8b1 	bl	800cc6e <GetLineCoding>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cb10:	7afb      	ldrb	r3, [r7, #11]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d105      	bne.n	800cb22 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cb1c:	2102      	movs	r1, #2
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cb22:	7afb      	ldrb	r3, [r7, #11]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cb34:	2301      	movs	r3, #1
 800cb36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cb42:	69db      	ldr	r3, [r3, #28]
 800cb44:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800cb4c:	2b04      	cmp	r3, #4
 800cb4e:	d877      	bhi.n	800cc40 <USBH_CDC_Process+0x114>
 800cb50:	a201      	add	r2, pc, #4	@ (adr r2, 800cb58 <USBH_CDC_Process+0x2c>)
 800cb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb56:	bf00      	nop
 800cb58:	0800cb6d 	.word	0x0800cb6d
 800cb5c:	0800cb73 	.word	0x0800cb73
 800cb60:	0800cba3 	.word	0x0800cba3
 800cb64:	0800cc17 	.word	0x0800cc17
 800cb68:	0800cc25 	.word	0x0800cc25
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	73fb      	strb	r3, [r7, #15]
      break;
 800cb70:	e06d      	b.n	800cc4e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800cb72:	68bb      	ldr	r3, [r7, #8]
 800cb74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 f897 	bl	800ccac <SetLineCoding>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cb82:	7bbb      	ldrb	r3, [r7, #14]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d104      	bne.n	800cb92 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cb90:	e058      	b.n	800cc44 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d055      	beq.n	800cc44 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	2204      	movs	r2, #4
 800cb9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800cba0:	e050      	b.n	800cc44 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	3340      	adds	r3, #64	@ 0x40
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 f860 	bl	800cc6e <GetLineCoding>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d126      	bne.n	800cc06 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbca:	791b      	ldrb	r3, [r3, #4]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d13b      	bne.n	800cc48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbda:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d133      	bne.n	800cc48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbea:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d12b      	bne.n	800cc48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cbf8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d124      	bne.n	800cc48 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f958 	bl	800ceb4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cc04:	e020      	b.n	800cc48 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cc06:	7bbb      	ldrb	r3, [r7, #14]
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d01d      	beq.n	800cc48 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	2204      	movs	r2, #4
 800cc10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800cc14:	e018      	b.n	800cc48 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f867 	bl	800ccea <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 f8da 	bl	800cdd6 <CDC_ProcessReception>
      break;
 800cc22:	e014      	b.n	800cc4e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cc24:	2100      	movs	r1, #0
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f001 f81a 	bl	800dc60 <USBH_ClrFeature>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cc30:	7bbb      	ldrb	r3, [r7, #14]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d10a      	bne.n	800cc4c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800cc3e:	e005      	b.n	800cc4c <USBH_CDC_Process+0x120>

    default:
      break;
 800cc40:	bf00      	nop
 800cc42:	e004      	b.n	800cc4e <USBH_CDC_Process+0x122>
      break;
 800cc44:	bf00      	nop
 800cc46:	e002      	b.n	800cc4e <USBH_CDC_Process+0x122>
      break;
 800cc48:	bf00      	nop
 800cc4a:	e000      	b.n	800cc4e <USBH_CDC_Process+0x122>
      break;
 800cc4c:	bf00      	nop

  }

  return status;
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3710      	adds	r7, #16
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	370c      	adds	r7, #12
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b082      	sub	sp, #8
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	22a1      	movs	r2, #161	@ 0xa1
 800cc7c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2221      	movs	r2, #33	@ 0x21
 800cc82:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2207      	movs	r2, #7
 800cc94:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	2207      	movs	r2, #7
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f001 fb14 	bl	800e2ca <USBH_CtlReq>
 800cca2:	4603      	mov	r3, r0
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2221      	movs	r2, #33	@ 0x21
 800ccba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2220      	movs	r2, #32
 800ccc0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2207      	movs	r2, #7
 800ccd2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	2207      	movs	r2, #7
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f001 faf5 	bl	800e2ca <USBH_CtlReq>
 800cce0:	4603      	mov	r3, r0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b086      	sub	sp, #24
 800ccee:	af02      	add	r7, sp, #8
 800ccf0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d002      	beq.n	800cd10 <CDC_ProcessTransmission+0x26>
 800cd0a:	2b02      	cmp	r3, #2
 800cd0c:	d023      	beq.n	800cd56 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800cd0e:	e05e      	b.n	800cdce <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	8b12      	ldrh	r2, [r2, #24]
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d90b      	bls.n	800cd34 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	69d9      	ldr	r1, [r3, #28]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	8b1a      	ldrh	r2, [r3, #24]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	7b5b      	ldrb	r3, [r3, #13]
 800cd28:	2001      	movs	r0, #1
 800cd2a:	9000      	str	r0, [sp, #0]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f001 fcda 	bl	800e6e6 <USBH_BulkSendData>
 800cd32:	e00b      	b.n	800cd4c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800cd3c:	b29a      	uxth	r2, r3
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	7b5b      	ldrb	r3, [r3, #13]
 800cd42:	2001      	movs	r0, #1
 800cd44:	9000      	str	r0, [sp, #0]
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f001 fccd 	bl	800e6e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2202      	movs	r2, #2
 800cd50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800cd54:	e03b      	b.n	800cdce <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	7b5b      	ldrb	r3, [r3, #13]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f002 f84d 	bl	800edfc <USBH_LL_GetURBState>
 800cd62:	4603      	mov	r3, r0
 800cd64:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800cd66:	7afb      	ldrb	r3, [r7, #11]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d128      	bne.n	800cdbe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	8b12      	ldrh	r2, [r2, #24]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d90e      	bls.n	800cd96 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	8b12      	ldrh	r2, [r2, #24]
 800cd80:	1a9a      	subs	r2, r3, r2
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	69db      	ldr	r3, [r3, #28]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	8b12      	ldrh	r2, [r2, #24]
 800cd8e:	441a      	add	r2, r3
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	61da      	str	r2, [r3, #28]
 800cd94:	e002      	b.n	800cd9c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d004      	beq.n	800cdae <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800cdac:	e00e      	b.n	800cdcc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 f868 	bl	800ce8c <USBH_CDC_TransmitCallback>
      break;
 800cdbc:	e006      	b.n	800cdcc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800cdbe:	7afb      	ldrb	r3, [r7, #11]
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d103      	bne.n	800cdcc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800cdcc:	bf00      	nop
  }
}
 800cdce:	bf00      	nop
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b086      	sub	sp, #24
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cde4:	69db      	ldr	r3, [r3, #28]
 800cde6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cde8:	2300      	movs	r3, #0
 800cdea:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800cdf2:	2b03      	cmp	r3, #3
 800cdf4:	d002      	beq.n	800cdfc <CDC_ProcessReception+0x26>
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d00e      	beq.n	800ce18 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800cdfa:	e043      	b.n	800ce84 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	6a19      	ldr	r1, [r3, #32]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	8b5a      	ldrh	r2, [r3, #26]
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	7b1b      	ldrb	r3, [r3, #12]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f001 fc91 	bl	800e730 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	2204      	movs	r2, #4
 800ce12:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ce16:	e035      	b.n	800ce84 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	7b1b      	ldrb	r3, [r3, #12]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f001 ffec 	bl	800edfc <USBH_LL_GetURBState>
 800ce24:	4603      	mov	r3, r0
 800ce26:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ce28:	7cfb      	ldrb	r3, [r7, #19]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d129      	bne.n	800ce82 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	7b1b      	ldrb	r3, [r3, #12]
 800ce32:	4619      	mov	r1, r3
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f001 ff4f 	bl	800ecd8 <USBH_LL_GetLastXferSize>
 800ce3a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce40:	68fa      	ldr	r2, [r7, #12]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d016      	beq.n	800ce74 <CDC_ProcessReception+0x9e>
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	8b5b      	ldrh	r3, [r3, #26]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d110      	bne.n	800ce74 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	1ad2      	subs	r2, r2, r3
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	6a1a      	ldr	r2, [r3, #32]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	441a      	add	r2, r3
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	2203      	movs	r2, #3
 800ce6e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ce72:	e006      	b.n	800ce82 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f000 f80f 	bl	800cea0 <USBH_CDC_ReceiveCallback>
      break;
 800ce82:	bf00      	nop
  }
}
 800ce84:	bf00      	nop
 800ce86:	3718      	adds	r7, #24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ce94:	bf00      	nop
 800ce96:	370c      	adds	r7, #12
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr

0800cea0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cea8:	bf00      	nop
 800ceaa:	370c      	adds	r7, #12
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b083      	sub	sp, #12
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	4613      	mov	r3, r2
 800ced4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d101      	bne.n	800cee0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cedc:	2302      	movs	r3, #2
 800cede:	e029      	b.n	800cf34 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	79fa      	ldrb	r2, [r7, #7]
 800cee4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f000 f81f 	bl	800cf3c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d003      	beq.n	800cf2c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	68ba      	ldr	r2, [r7, #8]
 800cf28:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f001 fe1f 	bl	800eb70 <USBH_LL_Init>

  return USBH_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cf44:	2300      	movs	r3, #0
 800cf46:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	e009      	b.n	800cf62 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	33e0      	adds	r3, #224	@ 0xe0
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	2200      	movs	r2, #0
 800cf5a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	60fb      	str	r3, [r7, #12]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2b0f      	cmp	r3, #15
 800cf66:	d9f2      	bls.n	800cf4e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cf68:	2300      	movs	r3, #0
 800cf6a:	60fb      	str	r3, [r7, #12]
 800cf6c:	e009      	b.n	800cf82 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	4413      	add	r3, r2
 800cf74:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cf78:	2200      	movs	r2, #0
 800cf7a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	60fb      	str	r3, [r7, #12]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf88:	d3f1      	bcc.n	800cf6e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2200      	movs	r2, #0
 800cf94:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2240      	movs	r2, #64	@ 0x40
 800cfae:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	331c      	adds	r3, #28
 800cfda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cfde:	2100      	movs	r1, #0
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f002 faa5 	bl	800f530 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cfec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cff0:	2100      	movs	r1, #0
 800cff2:	4618      	mov	r0, r3
 800cff4:	f002 fa9c 	bl	800f530 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800cffe:	2212      	movs	r2, #18
 800d000:	2100      	movs	r1, #0
 800d002:	4618      	mov	r0, r3
 800d004:	f002 fa94 	bl	800f530 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d00e:	223e      	movs	r2, #62	@ 0x3e
 800d010:	2100      	movs	r1, #0
 800d012:	4618      	mov	r0, r3
 800d014:	f002 fa8c 	bl	800f530 <memset>

  return USBH_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d022:	b480      	push	{r7}
 800d024:	b085      	sub	sp, #20
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d016      	beq.n	800d064 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10e      	bne.n	800d05e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d046:	1c59      	adds	r1, r3, #1
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	33de      	adds	r3, #222	@ 0xde
 800d052:	6839      	ldr	r1, [r7, #0]
 800d054:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d058:	2300      	movs	r3, #0
 800d05a:	73fb      	strb	r3, [r7, #15]
 800d05c:	e004      	b.n	800d068 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d05e:	2302      	movs	r3, #2
 800d060:	73fb      	strb	r3, [r7, #15]
 800d062:	e001      	b.n	800d068 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d064:	2302      	movs	r3, #2
 800d066:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d068:	7bfb      	ldrb	r3, [r7, #15]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3714      	adds	r7, #20
 800d06e:	46bd      	mov	sp, r7
 800d070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d074:	4770      	bx	lr

0800d076 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d076:	b480      	push	{r7}
 800d078:	b085      	sub	sp, #20
 800d07a:	af00      	add	r7, sp, #0
 800d07c:	6078      	str	r0, [r7, #4]
 800d07e:	460b      	mov	r3, r1
 800d080:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d082:	2300      	movs	r3, #0
 800d084:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800d08c:	78fa      	ldrb	r2, [r7, #3]
 800d08e:	429a      	cmp	r2, r3
 800d090:	d204      	bcs.n	800d09c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	78fa      	ldrb	r2, [r7, #3]
 800d096:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800d09a:	e001      	b.n	800d0a0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d09c:	2302      	movs	r3, #2
 800d09e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3714      	adds	r7, #20
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b087      	sub	sp, #28
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	4608      	mov	r0, r1
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	4603      	mov	r3, r0
 800d0be:	70fb      	strb	r3, [r7, #3]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	70bb      	strb	r3, [r7, #2]
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d0d6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d0d8:	e025      	b.n	800d126 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d0da:	7dfb      	ldrb	r3, [r7, #23]
 800d0dc:	221a      	movs	r2, #26
 800d0de:	fb02 f303 	mul.w	r3, r2, r3
 800d0e2:	3308      	adds	r3, #8
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	3302      	adds	r3, #2
 800d0ea:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	795b      	ldrb	r3, [r3, #5]
 800d0f0:	78fa      	ldrb	r2, [r7, #3]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d002      	beq.n	800d0fc <USBH_FindInterface+0x4e>
 800d0f6:	78fb      	ldrb	r3, [r7, #3]
 800d0f8:	2bff      	cmp	r3, #255	@ 0xff
 800d0fa:	d111      	bne.n	800d120 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d100:	78ba      	ldrb	r2, [r7, #2]
 800d102:	429a      	cmp	r2, r3
 800d104:	d002      	beq.n	800d10c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d106:	78bb      	ldrb	r3, [r7, #2]
 800d108:	2bff      	cmp	r3, #255	@ 0xff
 800d10a:	d109      	bne.n	800d120 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d110:	787a      	ldrb	r2, [r7, #1]
 800d112:	429a      	cmp	r2, r3
 800d114:	d002      	beq.n	800d11c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d116:	787b      	ldrb	r3, [r7, #1]
 800d118:	2bff      	cmp	r3, #255	@ 0xff
 800d11a:	d101      	bne.n	800d120 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d11c:	7dfb      	ldrb	r3, [r7, #23]
 800d11e:	e006      	b.n	800d12e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d120:	7dfb      	ldrb	r3, [r7, #23]
 800d122:	3301      	adds	r3, #1
 800d124:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d126:	7dfb      	ldrb	r3, [r7, #23]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d9d6      	bls.n	800d0da <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d12c:	23ff      	movs	r3, #255	@ 0xff
}
 800d12e:	4618      	mov	r0, r3
 800d130:	371c      	adds	r7, #28
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b082      	sub	sp, #8
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f001 fd50 	bl	800ebe8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d148:	2101      	movs	r1, #1
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f001 fe69 	bl	800ee22 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
	...

0800d15c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b088      	sub	sp, #32
 800d160:	af04      	add	r7, sp, #16
 800d162:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d164:	2302      	movs	r3, #2
 800d166:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d168:	2300      	movs	r3, #0
 800d16a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800d172:	b2db      	uxtb	r3, r3
 800d174:	2b01      	cmp	r3, #1
 800d176:	d102      	bne.n	800d17e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2203      	movs	r2, #3
 800d17c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b0b      	cmp	r3, #11
 800d186:	f200 81bb 	bhi.w	800d500 <USBH_Process+0x3a4>
 800d18a:	a201      	add	r2, pc, #4	@ (adr r2, 800d190 <USBH_Process+0x34>)
 800d18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d190:	0800d1c1 	.word	0x0800d1c1
 800d194:	0800d1f3 	.word	0x0800d1f3
 800d198:	0800d25b 	.word	0x0800d25b
 800d19c:	0800d49b 	.word	0x0800d49b
 800d1a0:	0800d501 	.word	0x0800d501
 800d1a4:	0800d2fb 	.word	0x0800d2fb
 800d1a8:	0800d441 	.word	0x0800d441
 800d1ac:	0800d331 	.word	0x0800d331
 800d1b0:	0800d351 	.word	0x0800d351
 800d1b4:	0800d36f 	.word	0x0800d36f
 800d1b8:	0800d3b3 	.word	0x0800d3b3
 800d1bc:	0800d483 	.word	0x0800d483
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	f000 819b 	beq.w	800d504 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d1d4:	20c8      	movs	r0, #200	@ 0xc8
 800d1d6:	f001 fe6e 	bl	800eeb6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f001 fd61 	bl	800eca2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d1f0:	e188      	b.n	800d504 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d107      	bne.n	800d20c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2202      	movs	r2, #2
 800d208:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d20a:	e18a      	b.n	800d522 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800d212:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d216:	d914      	bls.n	800d242 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800d21e:	3301      	adds	r3, #1
 800d220:	b2da      	uxtb	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800d22e:	2b03      	cmp	r3, #3
 800d230:	d903      	bls.n	800d23a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	220d      	movs	r2, #13
 800d236:	701a      	strb	r2, [r3, #0]
      break;
 800d238:	e173      	b.n	800d522 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	701a      	strb	r2, [r3, #0]
      break;
 800d240:	e16f      	b.n	800d522 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800d248:	f103 020a 	add.w	r2, r3, #10
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800d252:	200a      	movs	r0, #10
 800d254:	f001 fe2f 	bl	800eeb6 <USBH_Delay>
      break;
 800d258:	e163      	b.n	800d522 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d260:	2b00      	cmp	r3, #0
 800d262:	d005      	beq.n	800d270 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d26a:	2104      	movs	r1, #4
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d270:	2064      	movs	r0, #100	@ 0x64
 800d272:	f001 fe20 	bl	800eeb6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f001 fcec 	bl	800ec54 <USBH_LL_GetSpeed>
 800d27c:	4603      	mov	r3, r0
 800d27e:	461a      	mov	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2205      	movs	r2, #5
 800d28a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d28c:	2100      	movs	r1, #0
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f001 fa9b 	bl	800e7ca <USBH_AllocPipe>
 800d294:	4603      	mov	r3, r0
 800d296:	461a      	mov	r2, r3
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d29c:	2180      	movs	r1, #128	@ 0x80
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f001 fa93 	bl	800e7ca <USBH_AllocPipe>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	7919      	ldrb	r1, [r3, #4]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d2c0:	9202      	str	r2, [sp, #8]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	9201      	str	r2, [sp, #4]
 800d2c6:	9300      	str	r3, [sp, #0]
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2280      	movs	r2, #128	@ 0x80
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f001 fa4d 	bl	800e76c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	7959      	ldrb	r1, [r3, #5]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d2e6:	9202      	str	r2, [sp, #8]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	9201      	str	r2, [sp, #4]
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f001 fa3a 	bl	800e76c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d2f8:	e113      	b.n	800d522 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f916 	bl	800d52c <USBH_HandleEnum>
 800d300:	4603      	mov	r3, r0
 800d302:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d304:	7bbb      	ldrb	r3, [r7, #14]
 800d306:	b2db      	uxtb	r3, r3
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f040 80fd 	bne.w	800d508 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d103      	bne.n	800d328 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2208      	movs	r2, #8
 800d324:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d326:	e0ef      	b.n	800d508 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2207      	movs	r2, #7
 800d32c:	701a      	strb	r2, [r3, #0]
      break;
 800d32e:	e0eb      	b.n	800d508 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d336:	2b00      	cmp	r3, #0
 800d338:	f000 80e8 	beq.w	800d50c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d342:	2101      	movs	r1, #1
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2208      	movs	r2, #8
 800d34c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d34e:	e0dd      	b.n	800d50c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800d356:	4619      	mov	r1, r3
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fc3a 	bl	800dbd2 <USBH_SetCfg>
 800d35e:	4603      	mov	r3, r0
 800d360:	2b00      	cmp	r3, #0
 800d362:	f040 80d5 	bne.w	800d510 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2209      	movs	r2, #9
 800d36a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d36c:	e0d0      	b.n	800d510 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800d374:	f003 0320 	and.w	r3, r3, #32
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d016      	beq.n	800d3aa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d37c:	2101      	movs	r1, #1
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fc4a 	bl	800dc18 <USBH_SetFeature>
 800d384:	4603      	mov	r3, r0
 800d386:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d388:	7bbb      	ldrb	r3, [r7, #14]
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d103      	bne.n	800d398 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	220a      	movs	r2, #10
 800d394:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d396:	e0bd      	b.n	800d514 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800d398:	7bbb      	ldrb	r3, [r7, #14]
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	2b03      	cmp	r3, #3
 800d39e:	f040 80b9 	bne.w	800d514 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	220a      	movs	r2, #10
 800d3a6:	701a      	strb	r2, [r3, #0]
      break;
 800d3a8:	e0b4      	b.n	800d514 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	220a      	movs	r2, #10
 800d3ae:	701a      	strb	r2, [r3, #0]
      break;
 800d3b0:	e0b0      	b.n	800d514 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f000 80ad 	beq.w	800d518 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	73fb      	strb	r3, [r7, #15]
 800d3ca:	e016      	b.n	800d3fa <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d3cc:	7bfa      	ldrb	r2, [r7, #15]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	32de      	adds	r2, #222	@ 0xde
 800d3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d6:	791a      	ldrb	r2, [r3, #4]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d108      	bne.n	800d3f4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d3e2:	7bfa      	ldrb	r2, [r7, #15]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	32de      	adds	r2, #222	@ 0xde
 800d3e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800d3f2:	e005      	b.n	800d400 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	73fb      	strb	r3, [r7, #15]
 800d3fa:	7bfb      	ldrb	r3, [r7, #15]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d0e5      	beq.n	800d3cc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d406:	2b00      	cmp	r3, #0
 800d408:	d016      	beq.n	800d438 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	4798      	blx	r3
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d109      	bne.n	800d430 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2206      	movs	r2, #6
 800d420:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d428:	2103      	movs	r1, #3
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d42e:	e073      	b.n	800d518 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	220d      	movs	r2, #13
 800d434:	701a      	strb	r2, [r3, #0]
      break;
 800d436:	e06f      	b.n	800d518 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	220d      	movs	r2, #13
 800d43c:	701a      	strb	r2, [r3, #0]
      break;
 800d43e:	e06b      	b.n	800d518 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d446:	2b00      	cmp	r3, #0
 800d448:	d017      	beq.n	800d47a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	4798      	blx	r3
 800d456:	4603      	mov	r3, r0
 800d458:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d45a:	7bbb      	ldrb	r3, [r7, #14]
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d103      	bne.n	800d46a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	220b      	movs	r2, #11
 800d466:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d468:	e058      	b.n	800d51c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800d46a:	7bbb      	ldrb	r3, [r7, #14]
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b02      	cmp	r3, #2
 800d470:	d154      	bne.n	800d51c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	220d      	movs	r2, #13
 800d476:	701a      	strb	r2, [r3, #0]
      break;
 800d478:	e050      	b.n	800d51c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	220d      	movs	r2, #13
 800d47e:	701a      	strb	r2, [r3, #0]
      break;
 800d480:	e04c      	b.n	800d51c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d049      	beq.n	800d520 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d492:	695b      	ldr	r3, [r3, #20]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	4798      	blx	r3
      }
      break;
 800d498:	e042      	b.n	800d520 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f7ff fd4a 	bl	800cf3c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d009      	beq.n	800d4c6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d005      	beq.n	800d4dc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d4d6:	2105      	movs	r1, #5
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800d4e2:	b2db      	uxtb	r3, r3
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d107      	bne.n	800d4f8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff fe22 	bl	800d13a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d4f6:	e014      	b.n	800d522 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f001 fb75 	bl	800ebe8 <USBH_LL_Start>
      break;
 800d4fe:	e010      	b.n	800d522 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d500:	bf00      	nop
 800d502:	e00e      	b.n	800d522 <USBH_Process+0x3c6>
      break;
 800d504:	bf00      	nop
 800d506:	e00c      	b.n	800d522 <USBH_Process+0x3c6>
      break;
 800d508:	bf00      	nop
 800d50a:	e00a      	b.n	800d522 <USBH_Process+0x3c6>
    break;
 800d50c:	bf00      	nop
 800d50e:	e008      	b.n	800d522 <USBH_Process+0x3c6>
      break;
 800d510:	bf00      	nop
 800d512:	e006      	b.n	800d522 <USBH_Process+0x3c6>
      break;
 800d514:	bf00      	nop
 800d516:	e004      	b.n	800d522 <USBH_Process+0x3c6>
      break;
 800d518:	bf00      	nop
 800d51a:	e002      	b.n	800d522 <USBH_Process+0x3c6>
      break;
 800d51c:	bf00      	nop
 800d51e:	e000      	b.n	800d522 <USBH_Process+0x3c6>
      break;
 800d520:	bf00      	nop
  }
  return USBH_OK;
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	3710      	adds	r7, #16
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af04      	add	r7, sp, #16
 800d532:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d534:	2301      	movs	r3, #1
 800d536:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d538:	2301      	movs	r3, #1
 800d53a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	785b      	ldrb	r3, [r3, #1]
 800d540:	2b07      	cmp	r3, #7
 800d542:	f200 81bd 	bhi.w	800d8c0 <USBH_HandleEnum+0x394>
 800d546:	a201      	add	r2, pc, #4	@ (adr r2, 800d54c <USBH_HandleEnum+0x20>)
 800d548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d54c:	0800d56d 	.word	0x0800d56d
 800d550:	0800d627 	.word	0x0800d627
 800d554:	0800d691 	.word	0x0800d691
 800d558:	0800d71b 	.word	0x0800d71b
 800d55c:	0800d785 	.word	0x0800d785
 800d560:	0800d7f5 	.word	0x0800d7f5
 800d564:	0800d83b 	.word	0x0800d83b
 800d568:	0800d881 	.word	0x0800d881
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d56c:	2108      	movs	r1, #8
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fa4c 	bl	800da0c <USBH_Get_DevDesc>
 800d574:	4603      	mov	r3, r0
 800d576:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d578:	7bbb      	ldrb	r3, [r7, #14]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d12e      	bne.n	800d5dc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	7919      	ldrb	r1, [r3, #4]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d5a2:	9202      	str	r2, [sp, #8]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	9201      	str	r2, [sp, #4]
 800d5a8:	9300      	str	r3, [sp, #0]
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2280      	movs	r2, #128	@ 0x80
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f001 f8dc 	bl	800e76c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	7959      	ldrb	r1, [r3, #5]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d5c4:	687a      	ldr	r2, [r7, #4]
 800d5c6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d5c8:	9202      	str	r2, [sp, #8]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	9201      	str	r2, [sp, #4]
 800d5ce:	9300      	str	r3, [sp, #0]
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f001 f8c9 	bl	800e76c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d5da:	e173      	b.n	800d8c4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5dc:	7bbb      	ldrb	r3, [r7, #14]
 800d5de:	2b03      	cmp	r3, #3
 800d5e0:	f040 8170 	bne.w	800d8c4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	b2da      	uxtb	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d5fa:	2b03      	cmp	r3, #3
 800d5fc:	d903      	bls.n	800d606 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	220d      	movs	r2, #13
 800d602:	701a      	strb	r2, [r3, #0]
      break;
 800d604:	e15e      	b.n	800d8c4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	795b      	ldrb	r3, [r3, #5]
 800d60a:	4619      	mov	r1, r3
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f001 f8fd 	bl	800e80c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	791b      	ldrb	r3, [r3, #4]
 800d616:	4619      	mov	r1, r3
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f001 f8f7 	bl	800e80c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	701a      	strb	r2, [r3, #0]
      break;
 800d624:	e14e      	b.n	800d8c4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d626:	2112      	movs	r1, #18
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f000 f9ef 	bl	800da0c <USBH_Get_DevDesc>
 800d62e:	4603      	mov	r3, r0
 800d630:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d632:	7bbb      	ldrb	r3, [r7, #14]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d103      	bne.n	800d640 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2202      	movs	r2, #2
 800d63c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d63e:	e143      	b.n	800d8c8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d640:	7bbb      	ldrb	r3, [r7, #14]
 800d642:	2b03      	cmp	r3, #3
 800d644:	f040 8140 	bne.w	800d8c8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d64e:	3301      	adds	r3, #1
 800d650:	b2da      	uxtb	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d65e:	2b03      	cmp	r3, #3
 800d660:	d903      	bls.n	800d66a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	220d      	movs	r2, #13
 800d666:	701a      	strb	r2, [r3, #0]
      break;
 800d668:	e12e      	b.n	800d8c8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	795b      	ldrb	r3, [r3, #5]
 800d66e:	4619      	mov	r1, r3
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f001 f8cb 	bl	800e80c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	791b      	ldrb	r3, [r3, #4]
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f001 f8c5 	bl	800e80c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	701a      	strb	r2, [r3, #0]
      break;
 800d68e:	e11b      	b.n	800d8c8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d690:	2101      	movs	r1, #1
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fa79 	bl	800db8a <USBH_SetAddress>
 800d698:	4603      	mov	r3, r0
 800d69a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d69c:	7bbb      	ldrb	r3, [r7, #14]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d130      	bne.n	800d704 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800d6a2:	2002      	movs	r0, #2
 800d6a4:	f001 fc07 	bl	800eeb6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2203      	movs	r2, #3
 800d6b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	7919      	ldrb	r1, [r3, #4]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d6c6:	687a      	ldr	r2, [r7, #4]
 800d6c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d6ca:	9202      	str	r2, [sp, #8]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	9201      	str	r2, [sp, #4]
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2280      	movs	r2, #128	@ 0x80
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f001 f848 	bl	800e76c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	7959      	ldrb	r1, [r3, #5]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d6f0:	9202      	str	r2, [sp, #8]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	9201      	str	r2, [sp, #4]
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f001 f835 	bl	800e76c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d702:	e0e3      	b.n	800d8cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d704:	7bbb      	ldrb	r3, [r7, #14]
 800d706:	2b03      	cmp	r3, #3
 800d708:	f040 80e0 	bne.w	800d8cc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	220d      	movs	r2, #13
 800d710:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	705a      	strb	r2, [r3, #1]
      break;
 800d718:	e0d8      	b.n	800d8cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d71a:	2109      	movs	r1, #9
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 f9a1 	bl	800da64 <USBH_Get_CfgDesc>
 800d722:	4603      	mov	r3, r0
 800d724:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d726:	7bbb      	ldrb	r3, [r7, #14]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d103      	bne.n	800d734 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2204      	movs	r2, #4
 800d730:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d732:	e0cd      	b.n	800d8d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d734:	7bbb      	ldrb	r3, [r7, #14]
 800d736:	2b03      	cmp	r3, #3
 800d738:	f040 80ca 	bne.w	800d8d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d742:	3301      	adds	r3, #1
 800d744:	b2da      	uxtb	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d752:	2b03      	cmp	r3, #3
 800d754:	d903      	bls.n	800d75e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	220d      	movs	r2, #13
 800d75a:	701a      	strb	r2, [r3, #0]
      break;
 800d75c:	e0b8      	b.n	800d8d0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	795b      	ldrb	r3, [r3, #5]
 800d762:	4619      	mov	r1, r3
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f001 f851 	bl	800e80c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	791b      	ldrb	r3, [r3, #4]
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f001 f84b 	bl	800e80c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2200      	movs	r2, #0
 800d77a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	701a      	strb	r2, [r3, #0]
      break;
 800d782:	e0a5      	b.n	800d8d0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d78a:	4619      	mov	r1, r3
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f969 	bl	800da64 <USBH_Get_CfgDesc>
 800d792:	4603      	mov	r3, r0
 800d794:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d796:	7bbb      	ldrb	r3, [r7, #14]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d103      	bne.n	800d7a4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2205      	movs	r2, #5
 800d7a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d7a2:	e097      	b.n	800d8d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7a4:	7bbb      	ldrb	r3, [r7, #14]
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	f040 8094 	bne.w	800d8d4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d7c2:	2b03      	cmp	r3, #3
 800d7c4:	d903      	bls.n	800d7ce <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	220d      	movs	r2, #13
 800d7ca:	701a      	strb	r2, [r3, #0]
      break;
 800d7cc:	e082      	b.n	800d8d4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	795b      	ldrb	r3, [r3, #5]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f001 f819 	bl	800e80c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	791b      	ldrb	r3, [r3, #4]
 800d7de:	4619      	mov	r1, r3
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f001 f813 	bl	800e80c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	701a      	strb	r2, [r3, #0]
      break;
 800d7f2:	e06f      	b.n	800d8d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d019      	beq.n	800d832 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d80a:	23ff      	movs	r3, #255	@ 0xff
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f953 	bl	800dab8 <USBH_Get_StringDesc>
 800d812:	4603      	mov	r3, r0
 800d814:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d816:	7bbb      	ldrb	r3, [r7, #14]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d103      	bne.n	800d824 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2206      	movs	r2, #6
 800d820:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d822:	e059      	b.n	800d8d8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d824:	7bbb      	ldrb	r3, [r7, #14]
 800d826:	2b03      	cmp	r3, #3
 800d828:	d156      	bne.n	800d8d8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2206      	movs	r2, #6
 800d82e:	705a      	strb	r2, [r3, #1]
      break;
 800d830:	e052      	b.n	800d8d8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2206      	movs	r2, #6
 800d836:	705a      	strb	r2, [r3, #1]
      break;
 800d838:	e04e      	b.n	800d8d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d840:	2b00      	cmp	r3, #0
 800d842:	d019      	beq.n	800d878 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d850:	23ff      	movs	r3, #255	@ 0xff
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f930 	bl	800dab8 <USBH_Get_StringDesc>
 800d858:	4603      	mov	r3, r0
 800d85a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d85c:	7bbb      	ldrb	r3, [r7, #14]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d103      	bne.n	800d86a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2207      	movs	r2, #7
 800d866:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d868:	e038      	b.n	800d8dc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d86a:	7bbb      	ldrb	r3, [r7, #14]
 800d86c:	2b03      	cmp	r3, #3
 800d86e:	d135      	bne.n	800d8dc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2207      	movs	r2, #7
 800d874:	705a      	strb	r2, [r3, #1]
      break;
 800d876:	e031      	b.n	800d8dc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2207      	movs	r2, #7
 800d87c:	705a      	strb	r2, [r3, #1]
      break;
 800d87e:	e02d      	b.n	800d8dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d886:	2b00      	cmp	r3, #0
 800d888:	d017      	beq.n	800d8ba <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d896:	23ff      	movs	r3, #255	@ 0xff
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 f90d 	bl	800dab8 <USBH_Get_StringDesc>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d8a2:	7bbb      	ldrb	r3, [r7, #14]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d102      	bne.n	800d8ae <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d8ac:	e018      	b.n	800d8e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8ae:	7bbb      	ldrb	r3, [r7, #14]
 800d8b0:	2b03      	cmp	r3, #3
 800d8b2:	d115      	bne.n	800d8e0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800d8b8:	e012      	b.n	800d8e0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d8be:	e00f      	b.n	800d8e0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800d8c0:	bf00      	nop
 800d8c2:	e00e      	b.n	800d8e2 <USBH_HandleEnum+0x3b6>
      break;
 800d8c4:	bf00      	nop
 800d8c6:	e00c      	b.n	800d8e2 <USBH_HandleEnum+0x3b6>
      break;
 800d8c8:	bf00      	nop
 800d8ca:	e00a      	b.n	800d8e2 <USBH_HandleEnum+0x3b6>
      break;
 800d8cc:	bf00      	nop
 800d8ce:	e008      	b.n	800d8e2 <USBH_HandleEnum+0x3b6>
      break;
 800d8d0:	bf00      	nop
 800d8d2:	e006      	b.n	800d8e2 <USBH_HandleEnum+0x3b6>
      break;
 800d8d4:	bf00      	nop
 800d8d6:	e004      	b.n	800d8e2 <USBH_HandleEnum+0x3b6>
      break;
 800d8d8:	bf00      	nop
 800d8da:	e002      	b.n	800d8e2 <USBH_HandleEnum+0x3b6>
      break;
 800d8dc:	bf00      	nop
 800d8de:	e000      	b.n	800d8e2 <USBH_HandleEnum+0x3b6>
      break;
 800d8e0:	bf00      	nop
  }
  return Status;
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b083      	sub	sp, #12
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	683a      	ldr	r2, [r7, #0]
 800d8fa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d8fe:	bf00      	nop
 800d900:	370c      	adds	r7, #12
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b082      	sub	sp, #8
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d918:	1c5a      	adds	r2, r3, #1
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f804 	bl	800d92e <USBH_HandleSof>
}
 800d926:	bf00      	nop
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b082      	sub	sp, #8
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	2b0b      	cmp	r3, #11
 800d93e:	d10a      	bne.n	800d956 <USBH_HandleSof+0x28>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d946:	2b00      	cmp	r3, #0
 800d948:	d005      	beq.n	800d956 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	4798      	blx	r3
  }
}
 800d956:	bf00      	nop
 800d958:	3708      	adds	r7, #8
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d96e:	bf00      	nop
}
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d97a:	b480      	push	{r7}
 800d97c:	b083      	sub	sp, #12
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d98a:	bf00      	nop
}
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d996:	b480      	push	{r7}
 800d998:	b083      	sub	sp, #12
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr

0800d9c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f001 f91a 	bl	800ec1e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	791b      	ldrb	r3, [r3, #4]
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 ff0b 	bl	800e80c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	795b      	ldrb	r3, [r3, #5]
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 ff05 	bl	800e80c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800da02:	2300      	movs	r3, #0
}
 800da04:	4618      	mov	r0, r3
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b086      	sub	sp, #24
 800da10:	af02      	add	r7, sp, #8
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	460b      	mov	r3, r1
 800da16:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800da18:	887b      	ldrh	r3, [r7, #2]
 800da1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da1e:	d901      	bls.n	800da24 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800da20:	2303      	movs	r3, #3
 800da22:	e01b      	b.n	800da5c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800da2a:	887b      	ldrh	r3, [r7, #2]
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	4613      	mov	r3, r2
 800da30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800da34:	2100      	movs	r1, #0
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f000 f872 	bl	800db20 <USBH_GetDescriptor>
 800da3c:	4603      	mov	r3, r0
 800da3e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800da40:	7bfb      	ldrb	r3, [r7, #15]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d109      	bne.n	800da5a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800da4c:	887a      	ldrh	r2, [r7, #2]
 800da4e:	4619      	mov	r1, r3
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 f929 	bl	800dca8 <USBH_ParseDevDesc>
 800da56:	4603      	mov	r3, r0
 800da58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b086      	sub	sp, #24
 800da68:	af02      	add	r7, sp, #8
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	331c      	adds	r3, #28
 800da74:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800da76:	887b      	ldrh	r3, [r7, #2]
 800da78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da7c:	d901      	bls.n	800da82 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800da7e:	2303      	movs	r3, #3
 800da80:	e016      	b.n	800dab0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800da82:	887b      	ldrh	r3, [r7, #2]
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da8c:	2100      	movs	r1, #0
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f000 f846 	bl	800db20 <USBH_GetDescriptor>
 800da94:	4603      	mov	r3, r0
 800da96:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d107      	bne.n	800daae <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800da9e:	887b      	ldrh	r3, [r7, #2]
 800daa0:	461a      	mov	r2, r3
 800daa2:	68b9      	ldr	r1, [r7, #8]
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 f9af 	bl	800de08 <USBH_ParseCfgDesc>
 800daaa:	4603      	mov	r3, r0
 800daac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800daae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3710      	adds	r7, #16
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}

0800dab8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b088      	sub	sp, #32
 800dabc:	af02      	add	r7, sp, #8
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	607a      	str	r2, [r7, #4]
 800dac2:	461a      	mov	r2, r3
 800dac4:	460b      	mov	r3, r1
 800dac6:	72fb      	strb	r3, [r7, #11]
 800dac8:	4613      	mov	r3, r2
 800daca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800dacc:	893b      	ldrh	r3, [r7, #8]
 800dace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dad2:	d802      	bhi.n	800dada <USBH_Get_StringDesc+0x22>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800dada:	2303      	movs	r3, #3
 800dadc:	e01c      	b.n	800db18 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800dade:	7afb      	ldrb	r3, [r7, #11]
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800dae6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800daee:	893b      	ldrh	r3, [r7, #8]
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	460b      	mov	r3, r1
 800daf4:	2100      	movs	r1, #0
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f000 f812 	bl	800db20 <USBH_GetDescriptor>
 800dafc:	4603      	mov	r3, r0
 800dafe:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800db00:	7dfb      	ldrb	r3, [r7, #23]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d107      	bne.n	800db16 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800db0c:	893a      	ldrh	r2, [r7, #8]
 800db0e:	6879      	ldr	r1, [r7, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	f000 fb8d 	bl	800e230 <USBH_ParseStringDesc>
  }

  return status;
 800db16:	7dfb      	ldrb	r3, [r7, #23]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3718      	adds	r7, #24
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b084      	sub	sp, #16
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	607b      	str	r3, [r7, #4]
 800db2a:	460b      	mov	r3, r1
 800db2c:	72fb      	strb	r3, [r7, #11]
 800db2e:	4613      	mov	r3, r2
 800db30:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	789b      	ldrb	r3, [r3, #2]
 800db36:	2b01      	cmp	r3, #1
 800db38:	d11c      	bne.n	800db74 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800db3a:	7afb      	ldrb	r3, [r7, #11]
 800db3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800db40:	b2da      	uxtb	r2, r3
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2206      	movs	r2, #6
 800db4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	893a      	ldrh	r2, [r7, #8]
 800db50:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800db52:	893b      	ldrh	r3, [r7, #8]
 800db54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800db58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800db5c:	d104      	bne.n	800db68 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f240 4209 	movw	r2, #1033	@ 0x409
 800db64:	829a      	strh	r2, [r3, #20]
 800db66:	e002      	b.n	800db6e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	8b3a      	ldrh	r2, [r7, #24]
 800db72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800db74:	8b3b      	ldrh	r3, [r7, #24]
 800db76:	461a      	mov	r2, r3
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f000 fba5 	bl	800e2ca <USBH_CtlReq>
 800db80:	4603      	mov	r3, r0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3710      	adds	r7, #16
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b082      	sub	sp, #8
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	460b      	mov	r3, r1
 800db94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	789b      	ldrb	r3, [r3, #2]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d10f      	bne.n	800dbbe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2205      	movs	r2, #5
 800dba8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dbaa:	78fb      	ldrb	r3, [r7, #3]
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fb81 	bl	800e2ca <USBH_CtlReq>
 800dbc8:	4603      	mov	r3, r0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b082      	sub	sp, #8
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	460b      	mov	r3, r1
 800dbdc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	789b      	ldrb	r3, [r3, #2]
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d10e      	bne.n	800dc04 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2209      	movs	r2, #9
 800dbf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	887a      	ldrh	r2, [r7, #2]
 800dbf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dc04:	2200      	movs	r2, #0
 800dc06:	2100      	movs	r1, #0
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fb5e 	bl	800e2ca <USBH_CtlReq>
 800dc0e:	4603      	mov	r3, r0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3708      	adds	r7, #8
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}

0800dc18 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	460b      	mov	r3, r1
 800dc22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	789b      	ldrb	r3, [r3, #2]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d10f      	bne.n	800dc4c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2203      	movs	r2, #3
 800dc36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dc38:	78fb      	ldrb	r3, [r7, #3]
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2200      	movs	r2, #0
 800dc44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	2100      	movs	r1, #0
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 fb3a 	bl	800e2ca <USBH_CtlReq>
 800dc56:	4603      	mov	r3, r0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	789b      	ldrb	r3, [r3, #2]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d10f      	bne.n	800dc94 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2202      	movs	r2, #2
 800dc78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dc86:	78fb      	ldrb	r3, [r7, #3]
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dc94:	2200      	movs	r2, #0
 800dc96:	2100      	movs	r1, #0
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 fb16 	bl	800e2ca <USBH_CtlReq>
 800dc9e:	4603      	mov	r3, r0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b087      	sub	sp, #28
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800dcbc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d101      	bne.n	800dccc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800dcc8:	2302      	movs	r3, #2
 800dcca:	e094      	b.n	800ddf6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	781a      	ldrb	r2, [r3, #0]
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	785a      	ldrb	r2, [r3, #1]
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	3302      	adds	r3, #2
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	461a      	mov	r2, r3
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	3303      	adds	r3, #3
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	021b      	lsls	r3, r3, #8
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	791a      	ldrb	r2, [r3, #4]
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	795a      	ldrb	r2, [r3, #5]
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	799a      	ldrb	r2, [r3, #6]
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	79da      	ldrb	r2, [r3, #7]
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d004      	beq.n	800dd2a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d11b      	bne.n	800dd62 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	79db      	ldrb	r3, [r3, #7]
 800dd2e:	2b20      	cmp	r3, #32
 800dd30:	dc0f      	bgt.n	800dd52 <USBH_ParseDevDesc+0xaa>
 800dd32:	2b08      	cmp	r3, #8
 800dd34:	db0f      	blt.n	800dd56 <USBH_ParseDevDesc+0xae>
 800dd36:	3b08      	subs	r3, #8
 800dd38:	4a32      	ldr	r2, [pc, #200]	@ (800de04 <USBH_ParseDevDesc+0x15c>)
 800dd3a:	fa22 f303 	lsr.w	r3, r2, r3
 800dd3e:	f003 0301 	and.w	r3, r3, #1
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	bf14      	ite	ne
 800dd46:	2301      	movne	r3, #1
 800dd48:	2300      	moveq	r3, #0
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d106      	bne.n	800dd5e <USBH_ParseDevDesc+0xb6>
 800dd50:	e001      	b.n	800dd56 <USBH_ParseDevDesc+0xae>
 800dd52:	2b40      	cmp	r3, #64	@ 0x40
 800dd54:	d003      	beq.n	800dd5e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	2208      	movs	r2, #8
 800dd5a:	71da      	strb	r2, [r3, #7]
        break;
 800dd5c:	e000      	b.n	800dd60 <USBH_ParseDevDesc+0xb8>
        break;
 800dd5e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800dd60:	e00e      	b.n	800dd80 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dd68:	2b02      	cmp	r3, #2
 800dd6a:	d107      	bne.n	800dd7c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	79db      	ldrb	r3, [r3, #7]
 800dd70:	2b08      	cmp	r3, #8
 800dd72:	d005      	beq.n	800dd80 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	2208      	movs	r2, #8
 800dd78:	71da      	strb	r2, [r3, #7]
 800dd7a:	e001      	b.n	800dd80 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800dd7c:	2303      	movs	r3, #3
 800dd7e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800dd80:	88fb      	ldrh	r3, [r7, #6]
 800dd82:	2b08      	cmp	r3, #8
 800dd84:	d936      	bls.n	800ddf4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	3308      	adds	r3, #8
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	3309      	adds	r3, #9
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	021b      	lsls	r3, r3, #8
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	b29a      	uxth	r2, r3
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	330a      	adds	r3, #10
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	461a      	mov	r2, r3
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	330b      	adds	r3, #11
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	021b      	lsls	r3, r3, #8
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	330c      	adds	r3, #12
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	330d      	adds	r3, #13
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	021b      	lsls	r3, r3, #8
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	4313      	orrs	r3, r2
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	7b9a      	ldrb	r2, [r3, #14]
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	7bda      	ldrb	r2, [r3, #15]
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	7c1a      	ldrb	r2, [r3, #16]
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	7c5a      	ldrb	r2, [r3, #17]
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ddf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	371c      	adds	r7, #28
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	01000101 	.word	0x01000101

0800de08 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08c      	sub	sp, #48	@ 0x30
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	4613      	mov	r3, r2
 800de14:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800de1c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800de24:	2300      	movs	r3, #0
 800de26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800de2a:	2300      	movs	r3, #0
 800de2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800de36:	2302      	movs	r3, #2
 800de38:	e0da      	b.n	800dff0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800de3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2b09      	cmp	r3, #9
 800de44:	d002      	beq.n	800de4c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800de46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de48:	2209      	movs	r2, #9
 800de4a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	781a      	ldrb	r2, [r3, #0]
 800de50:	6a3b      	ldr	r3, [r7, #32]
 800de52:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	785a      	ldrb	r2, [r3, #1]
 800de58:	6a3b      	ldr	r3, [r7, #32]
 800de5a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	3302      	adds	r3, #2
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	461a      	mov	r2, r3
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	3303      	adds	r3, #3
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	021b      	lsls	r3, r3, #8
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	4313      	orrs	r3, r2
 800de70:	b29b      	uxth	r3, r3
 800de72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de76:	bf28      	it	cs
 800de78:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	6a3b      	ldr	r3, [r7, #32]
 800de80:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	791a      	ldrb	r2, [r3, #4]
 800de86:	6a3b      	ldr	r3, [r7, #32]
 800de88:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	795a      	ldrb	r2, [r3, #5]
 800de8e:	6a3b      	ldr	r3, [r7, #32]
 800de90:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	799a      	ldrb	r2, [r3, #6]
 800de96:	6a3b      	ldr	r3, [r7, #32]
 800de98:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	79da      	ldrb	r2, [r3, #7]
 800de9e:	6a3b      	ldr	r3, [r7, #32]
 800dea0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	7a1a      	ldrb	r2, [r3, #8]
 800dea6:	6a3b      	ldr	r3, [r7, #32]
 800dea8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800deaa:	88fb      	ldrh	r3, [r7, #6]
 800deac:	2b09      	cmp	r3, #9
 800deae:	f240 809d 	bls.w	800dfec <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800deb2:	2309      	movs	r3, #9
 800deb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800deb6:	2300      	movs	r3, #0
 800deb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800deba:	e081      	b.n	800dfc0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800debc:	f107 0316 	add.w	r3, r7, #22
 800dec0:	4619      	mov	r1, r3
 800dec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dec4:	f000 f9e7 	bl	800e296 <USBH_GetNextDesc>
 800dec8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800deca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800decc:	785b      	ldrb	r3, [r3, #1]
 800dece:	2b04      	cmp	r3, #4
 800ded0:	d176      	bne.n	800dfc0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ded2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	2b09      	cmp	r3, #9
 800ded8:	d002      	beq.n	800dee0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800deda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dedc:	2209      	movs	r2, #9
 800dede:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800dee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dee4:	221a      	movs	r2, #26
 800dee6:	fb02 f303 	mul.w	r3, r2, r3
 800deea:	3308      	adds	r3, #8
 800deec:	6a3a      	ldr	r2, [r7, #32]
 800deee:	4413      	add	r3, r2
 800def0:	3302      	adds	r3, #2
 800def2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800def4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800def6:	69f8      	ldr	r0, [r7, #28]
 800def8:	f000 f87e 	bl	800dff8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800defc:	2300      	movs	r3, #0
 800defe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800df02:	2300      	movs	r3, #0
 800df04:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df06:	e043      	b.n	800df90 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800df08:	f107 0316 	add.w	r3, r7, #22
 800df0c:	4619      	mov	r1, r3
 800df0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df10:	f000 f9c1 	bl	800e296 <USBH_GetNextDesc>
 800df14:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800df16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df18:	785b      	ldrb	r3, [r3, #1]
 800df1a:	2b05      	cmp	r3, #5
 800df1c:	d138      	bne.n	800df90 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	795b      	ldrb	r3, [r3, #5]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d113      	bne.n	800df4e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800df2a:	2b02      	cmp	r3, #2
 800df2c:	d003      	beq.n	800df36 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	799b      	ldrb	r3, [r3, #6]
 800df32:	2b03      	cmp	r3, #3
 800df34:	d10b      	bne.n	800df4e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	79db      	ldrb	r3, [r3, #7]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d10b      	bne.n	800df56 <USBH_ParseCfgDesc+0x14e>
 800df3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	2b09      	cmp	r3, #9
 800df44:	d007      	beq.n	800df56 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800df46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df48:	2209      	movs	r2, #9
 800df4a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800df4c:	e003      	b.n	800df56 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800df4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df50:	2207      	movs	r2, #7
 800df52:	701a      	strb	r2, [r3, #0]
 800df54:	e000      	b.n	800df58 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800df56:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800df58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df5c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800df60:	3201      	adds	r2, #1
 800df62:	00d2      	lsls	r2, r2, #3
 800df64:	211a      	movs	r1, #26
 800df66:	fb01 f303 	mul.w	r3, r1, r3
 800df6a:	4413      	add	r3, r2
 800df6c:	3308      	adds	r3, #8
 800df6e:	6a3a      	ldr	r2, [r7, #32]
 800df70:	4413      	add	r3, r2
 800df72:	3304      	adds	r3, #4
 800df74:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800df76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df78:	69b9      	ldr	r1, [r7, #24]
 800df7a:	68f8      	ldr	r0, [r7, #12]
 800df7c:	f000 f870 	bl	800e060 <USBH_ParseEPDesc>
 800df80:	4603      	mov	r3, r0
 800df82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800df86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800df8a:	3301      	adds	r3, #1
 800df8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	791b      	ldrb	r3, [r3, #4]
 800df94:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800df98:	429a      	cmp	r2, r3
 800df9a:	d204      	bcs.n	800dfa6 <USBH_ParseCfgDesc+0x19e>
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	885a      	ldrh	r2, [r3, #2]
 800dfa0:	8afb      	ldrh	r3, [r7, #22]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d8b0      	bhi.n	800df08 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	791b      	ldrb	r3, [r3, #4]
 800dfaa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d201      	bcs.n	800dfb6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	e01c      	b.n	800dff0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800dfb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfba:	3301      	adds	r3, #1
 800dfbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dfc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d805      	bhi.n	800dfd4 <USBH_ParseCfgDesc+0x1cc>
 800dfc8:	6a3b      	ldr	r3, [r7, #32]
 800dfca:	885a      	ldrh	r2, [r3, #2]
 800dfcc:	8afb      	ldrh	r3, [r7, #22]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	f63f af74 	bhi.w	800debc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800dfd4:	6a3b      	ldr	r3, [r7, #32]
 800dfd6:	791b      	ldrb	r3, [r3, #4]
 800dfd8:	2b02      	cmp	r3, #2
 800dfda:	bf28      	it	cs
 800dfdc:	2302      	movcs	r3, #2
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d201      	bcs.n	800dfec <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800dfe8:	2303      	movs	r3, #3
 800dfea:	e001      	b.n	800dff0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800dfec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3730      	adds	r7, #48	@ 0x30
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b083      	sub	sp, #12
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	781a      	ldrb	r2, [r3, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	785a      	ldrb	r2, [r3, #1]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	789a      	ldrb	r2, [r3, #2]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	78da      	ldrb	r2, [r3, #3]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	3304      	adds	r3, #4
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	2b02      	cmp	r3, #2
 800e02a:	bf28      	it	cs
 800e02c:	2302      	movcs	r3, #2
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	795a      	ldrb	r2, [r3, #5]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	799a      	ldrb	r2, [r3, #6]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	79da      	ldrb	r2, [r3, #7]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	7a1a      	ldrb	r2, [r3, #8]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	721a      	strb	r2, [r3, #8]
}
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800e060:	b480      	push	{r7}
 800e062:	b087      	sub	sp, #28
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e06c:	2300      	movs	r3, #0
 800e06e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	785a      	ldrb	r2, [r3, #1]
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	789a      	ldrb	r2, [r3, #2]
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	78da      	ldrb	r2, [r3, #3]
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	3304      	adds	r3, #4
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	461a      	mov	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	3305      	adds	r3, #5
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	021b      	lsls	r3, r3, #8
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	4313      	orrs	r3, r2
 800e0a4:	b29a      	uxth	r2, r3
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	799a      	ldrb	r2, [r3, #6]
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	889b      	ldrh	r3, [r3, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d009      	beq.n	800e0ce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e0be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0c2:	d804      	bhi.n	800e0ce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e0c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0cc:	d901      	bls.n	800e0d2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d136      	bne.n	800e14a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	78db      	ldrb	r3, [r3, #3]
 800e0e0:	f003 0303 	and.w	r3, r3, #3
 800e0e4:	2b02      	cmp	r3, #2
 800e0e6:	d108      	bne.n	800e0fa <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	889b      	ldrh	r3, [r3, #4]
 800e0ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0f0:	f240 8097 	bls.w	800e222 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e0f4:	2303      	movs	r3, #3
 800e0f6:	75fb      	strb	r3, [r7, #23]
 800e0f8:	e093      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	78db      	ldrb	r3, [r3, #3]
 800e0fe:	f003 0303 	and.w	r3, r3, #3
 800e102:	2b00      	cmp	r3, #0
 800e104:	d107      	bne.n	800e116 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	889b      	ldrh	r3, [r3, #4]
 800e10a:	2b40      	cmp	r3, #64	@ 0x40
 800e10c:	f240 8089 	bls.w	800e222 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e110:	2303      	movs	r3, #3
 800e112:	75fb      	strb	r3, [r7, #23]
 800e114:	e085      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	78db      	ldrb	r3, [r3, #3]
 800e11a:	f003 0303 	and.w	r3, r3, #3
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d005      	beq.n	800e12e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	78db      	ldrb	r3, [r3, #3]
 800e126:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e12a:	2b03      	cmp	r3, #3
 800e12c:	d10a      	bne.n	800e144 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	799b      	ldrb	r3, [r3, #6]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d003      	beq.n	800e13e <USBH_ParseEPDesc+0xde>
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	799b      	ldrb	r3, [r3, #6]
 800e13a:	2b10      	cmp	r3, #16
 800e13c:	d970      	bls.n	800e220 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800e13e:	2303      	movs	r3, #3
 800e140:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e142:	e06d      	b.n	800e220 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e144:	2303      	movs	r3, #3
 800e146:	75fb      	strb	r3, [r7, #23]
 800e148:	e06b      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e150:	2b01      	cmp	r3, #1
 800e152:	d13c      	bne.n	800e1ce <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	78db      	ldrb	r3, [r3, #3]
 800e158:	f003 0303 	and.w	r3, r3, #3
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d005      	beq.n	800e16c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	78db      	ldrb	r3, [r3, #3]
 800e164:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d106      	bne.n	800e17a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	889b      	ldrh	r3, [r3, #4]
 800e170:	2b40      	cmp	r3, #64	@ 0x40
 800e172:	d956      	bls.n	800e222 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e174:	2303      	movs	r3, #3
 800e176:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e178:	e053      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	78db      	ldrb	r3, [r3, #3]
 800e17e:	f003 0303 	and.w	r3, r3, #3
 800e182:	2b01      	cmp	r3, #1
 800e184:	d10e      	bne.n	800e1a4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	799b      	ldrb	r3, [r3, #6]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d007      	beq.n	800e19e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800e192:	2b10      	cmp	r3, #16
 800e194:	d803      	bhi.n	800e19e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800e19a:	2b40      	cmp	r3, #64	@ 0x40
 800e19c:	d941      	bls.n	800e222 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e19e:	2303      	movs	r3, #3
 800e1a0:	75fb      	strb	r3, [r7, #23]
 800e1a2:	e03e      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	78db      	ldrb	r3, [r3, #3]
 800e1a8:	f003 0303 	and.w	r3, r3, #3
 800e1ac:	2b03      	cmp	r3, #3
 800e1ae:	d10b      	bne.n	800e1c8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	799b      	ldrb	r3, [r3, #6]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d004      	beq.n	800e1c2 <USBH_ParseEPDesc+0x162>
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	889b      	ldrh	r3, [r3, #4]
 800e1bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1c0:	d32f      	bcc.n	800e222 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e1c2:	2303      	movs	r3, #3
 800e1c4:	75fb      	strb	r3, [r7, #23]
 800e1c6:	e02c      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	75fb      	strb	r3, [r7, #23]
 800e1cc:	e029      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e1d4:	2b02      	cmp	r3, #2
 800e1d6:	d120      	bne.n	800e21a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	78db      	ldrb	r3, [r3, #3]
 800e1dc:	f003 0303 	and.w	r3, r3, #3
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d106      	bne.n	800e1f2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	889b      	ldrh	r3, [r3, #4]
 800e1e8:	2b08      	cmp	r3, #8
 800e1ea:	d01a      	beq.n	800e222 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e1ec:	2303      	movs	r3, #3
 800e1ee:	75fb      	strb	r3, [r7, #23]
 800e1f0:	e017      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	78db      	ldrb	r3, [r3, #3]
 800e1f6:	f003 0303 	and.w	r3, r3, #3
 800e1fa:	2b03      	cmp	r3, #3
 800e1fc:	d10a      	bne.n	800e214 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	799b      	ldrb	r3, [r3, #6]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d003      	beq.n	800e20e <USBH_ParseEPDesc+0x1ae>
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	889b      	ldrh	r3, [r3, #4]
 800e20a:	2b08      	cmp	r3, #8
 800e20c:	d909      	bls.n	800e222 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e20e:	2303      	movs	r3, #3
 800e210:	75fb      	strb	r3, [r7, #23]
 800e212:	e006      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e214:	2303      	movs	r3, #3
 800e216:	75fb      	strb	r3, [r7, #23]
 800e218:	e003      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e21a:	2303      	movs	r3, #3
 800e21c:	75fb      	strb	r3, [r7, #23]
 800e21e:	e000      	b.n	800e222 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e220:	bf00      	nop
  }

  return status;
 800e222:	7dfb      	ldrb	r3, [r7, #23]
}
 800e224:	4618      	mov	r0, r3
 800e226:	371c      	adds	r7, #28
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr

0800e230 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e230:	b480      	push	{r7}
 800e232:	b087      	sub	sp, #28
 800e234:	af00      	add	r7, sp, #0
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	4613      	mov	r3, r2
 800e23c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3301      	adds	r3, #1
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	2b03      	cmp	r3, #3
 800e246:	d120      	bne.n	800e28a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	1e9a      	subs	r2, r3, #2
 800e24e:	88fb      	ldrh	r3, [r7, #6]
 800e250:	4293      	cmp	r3, r2
 800e252:	bf28      	it	cs
 800e254:	4613      	movcs	r3, r2
 800e256:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	3302      	adds	r3, #2
 800e25c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e25e:	2300      	movs	r3, #0
 800e260:	82fb      	strh	r3, [r7, #22]
 800e262:	e00b      	b.n	800e27c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e264:	8afb      	ldrh	r3, [r7, #22]
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	4413      	add	r3, r2
 800e26a:	781a      	ldrb	r2, [r3, #0]
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	3301      	adds	r3, #1
 800e274:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e276:	8afb      	ldrh	r3, [r7, #22]
 800e278:	3302      	adds	r3, #2
 800e27a:	82fb      	strh	r3, [r7, #22]
 800e27c:	8afa      	ldrh	r2, [r7, #22]
 800e27e:	8abb      	ldrh	r3, [r7, #20]
 800e280:	429a      	cmp	r2, r3
 800e282:	d3ef      	bcc.n	800e264 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2200      	movs	r2, #0
 800e288:	701a      	strb	r2, [r3, #0]
  }
}
 800e28a:	bf00      	nop
 800e28c:	371c      	adds	r7, #28
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e296:	b480      	push	{r7}
 800e298:	b085      	sub	sp, #20
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
 800e29e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	7812      	ldrb	r2, [r2, #0]
 800e2a8:	4413      	add	r3, r2
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	781b      	ldrb	r3, [r3, #0]
 800e2b4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3714      	adds	r7, #20
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr

0800e2ca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b086      	sub	sp, #24
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	60f8      	str	r0, [r7, #12]
 800e2d2:	60b9      	str	r1, [r7, #8]
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	789b      	ldrb	r3, [r3, #2]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d002      	beq.n	800e2ea <USBH_CtlReq+0x20>
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	d00f      	beq.n	800e308 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e2e8:	e027      	b.n	800e33a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	68ba      	ldr	r2, [r7, #8]
 800e2ee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	88fa      	ldrh	r2, [r7, #6]
 800e2f4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2202      	movs	r2, #2
 800e300:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e302:	2301      	movs	r3, #1
 800e304:	75fb      	strb	r3, [r7, #23]
      break;
 800e306:	e018      	b.n	800e33a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e308:	68f8      	ldr	r0, [r7, #12]
 800e30a:	f000 f81b 	bl	800e344 <USBH_HandleControl>
 800e30e:	4603      	mov	r3, r0
 800e310:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e312:	7dfb      	ldrb	r3, [r7, #23]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d002      	beq.n	800e31e <USBH_CtlReq+0x54>
 800e318:	7dfb      	ldrb	r3, [r7, #23]
 800e31a:	2b03      	cmp	r3, #3
 800e31c:	d106      	bne.n	800e32c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2201      	movs	r2, #1
 800e322:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2200      	movs	r2, #0
 800e328:	761a      	strb	r2, [r3, #24]
      break;
 800e32a:	e005      	b.n	800e338 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e32c:	7dfb      	ldrb	r3, [r7, #23]
 800e32e:	2b02      	cmp	r3, #2
 800e330:	d102      	bne.n	800e338 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2201      	movs	r2, #1
 800e336:	709a      	strb	r2, [r3, #2]
      break;
 800e338:	bf00      	nop
  }
  return status;
 800e33a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b086      	sub	sp, #24
 800e348:	af02      	add	r7, sp, #8
 800e34a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e34c:	2301      	movs	r3, #1
 800e34e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e350:	2300      	movs	r3, #0
 800e352:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	7e1b      	ldrb	r3, [r3, #24]
 800e358:	3b01      	subs	r3, #1
 800e35a:	2b0a      	cmp	r3, #10
 800e35c:	f200 8156 	bhi.w	800e60c <USBH_HandleControl+0x2c8>
 800e360:	a201      	add	r2, pc, #4	@ (adr r2, 800e368 <USBH_HandleControl+0x24>)
 800e362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e366:	bf00      	nop
 800e368:	0800e395 	.word	0x0800e395
 800e36c:	0800e3af 	.word	0x0800e3af
 800e370:	0800e419 	.word	0x0800e419
 800e374:	0800e43f 	.word	0x0800e43f
 800e378:	0800e477 	.word	0x0800e477
 800e37c:	0800e4a1 	.word	0x0800e4a1
 800e380:	0800e4f3 	.word	0x0800e4f3
 800e384:	0800e515 	.word	0x0800e515
 800e388:	0800e551 	.word	0x0800e551
 800e38c:	0800e577 	.word	0x0800e577
 800e390:	0800e5b5 	.word	0x0800e5b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f103 0110 	add.w	r1, r3, #16
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	795b      	ldrb	r3, [r3, #5]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f943 	bl	800e62c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2202      	movs	r2, #2
 800e3aa:	761a      	strb	r2, [r3, #24]
      break;
 800e3ac:	e139      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	795b      	ldrb	r3, [r3, #5]
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f000 fd21 	bl	800edfc <USBH_LL_GetURBState>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e3be:	7bbb      	ldrb	r3, [r7, #14]
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d11e      	bne.n	800e402 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	7c1b      	ldrb	r3, [r3, #16]
 800e3c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e3cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	8adb      	ldrh	r3, [r3, #22]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d00a      	beq.n	800e3ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e3d6:	7b7b      	ldrb	r3, [r7, #13]
 800e3d8:	2b80      	cmp	r3, #128	@ 0x80
 800e3da:	d103      	bne.n	800e3e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2203      	movs	r2, #3
 800e3e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e3e2:	e115      	b.n	800e610 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2205      	movs	r2, #5
 800e3e8:	761a      	strb	r2, [r3, #24]
      break;
 800e3ea:	e111      	b.n	800e610 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e3ec:	7b7b      	ldrb	r3, [r7, #13]
 800e3ee:	2b80      	cmp	r3, #128	@ 0x80
 800e3f0:	d103      	bne.n	800e3fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2209      	movs	r2, #9
 800e3f6:	761a      	strb	r2, [r3, #24]
      break;
 800e3f8:	e10a      	b.n	800e610 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2207      	movs	r2, #7
 800e3fe:	761a      	strb	r2, [r3, #24]
      break;
 800e400:	e106      	b.n	800e610 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e402:	7bbb      	ldrb	r3, [r7, #14]
 800e404:	2b04      	cmp	r3, #4
 800e406:	d003      	beq.n	800e410 <USBH_HandleControl+0xcc>
 800e408:	7bbb      	ldrb	r3, [r7, #14]
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	f040 8100 	bne.w	800e610 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	220b      	movs	r2, #11
 800e414:	761a      	strb	r2, [r3, #24]
      break;
 800e416:	e0fb      	b.n	800e610 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e41e:	b29a      	uxth	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6899      	ldr	r1, [r3, #8]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	899a      	ldrh	r2, [r3, #12]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	791b      	ldrb	r3, [r3, #4]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f93a 	bl	800e6aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2204      	movs	r2, #4
 800e43a:	761a      	strb	r2, [r3, #24]
      break;
 800e43c:	e0f1      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	791b      	ldrb	r3, [r3, #4]
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 fcd9 	bl	800edfc <USBH_LL_GetURBState>
 800e44a:	4603      	mov	r3, r0
 800e44c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e44e:	7bbb      	ldrb	r3, [r7, #14]
 800e450:	2b01      	cmp	r3, #1
 800e452:	d102      	bne.n	800e45a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2209      	movs	r2, #9
 800e458:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e45a:	7bbb      	ldrb	r3, [r7, #14]
 800e45c:	2b05      	cmp	r3, #5
 800e45e:	d102      	bne.n	800e466 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e460:	2303      	movs	r3, #3
 800e462:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e464:	e0d6      	b.n	800e614 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e466:	7bbb      	ldrb	r3, [r7, #14]
 800e468:	2b04      	cmp	r3, #4
 800e46a:	f040 80d3 	bne.w	800e614 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	220b      	movs	r2, #11
 800e472:	761a      	strb	r2, [r3, #24]
      break;
 800e474:	e0ce      	b.n	800e614 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6899      	ldr	r1, [r3, #8]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	899a      	ldrh	r2, [r3, #12]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	795b      	ldrb	r3, [r3, #5]
 800e482:	2001      	movs	r0, #1
 800e484:	9000      	str	r0, [sp, #0]
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f8ea 	bl	800e660 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e492:	b29a      	uxth	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2206      	movs	r2, #6
 800e49c:	761a      	strb	r2, [r3, #24]
      break;
 800e49e:	e0c0      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	795b      	ldrb	r3, [r3, #5]
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 fca8 	bl	800edfc <USBH_LL_GetURBState>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e4b0:	7bbb      	ldrb	r3, [r7, #14]
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d103      	bne.n	800e4be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2207      	movs	r2, #7
 800e4ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e4bc:	e0ac      	b.n	800e618 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e4be:	7bbb      	ldrb	r3, [r7, #14]
 800e4c0:	2b05      	cmp	r3, #5
 800e4c2:	d105      	bne.n	800e4d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	220c      	movs	r2, #12
 800e4c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e4ca:	2303      	movs	r3, #3
 800e4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800e4ce:	e0a3      	b.n	800e618 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e4d0:	7bbb      	ldrb	r3, [r7, #14]
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	d103      	bne.n	800e4de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2205      	movs	r2, #5
 800e4da:	761a      	strb	r2, [r3, #24]
      break;
 800e4dc:	e09c      	b.n	800e618 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e4de:	7bbb      	ldrb	r3, [r7, #14]
 800e4e0:	2b04      	cmp	r3, #4
 800e4e2:	f040 8099 	bne.w	800e618 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	220b      	movs	r2, #11
 800e4ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e4ec:	2302      	movs	r3, #2
 800e4ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e4f0:	e092      	b.n	800e618 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	791b      	ldrb	r3, [r3, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 f8d5 	bl	800e6aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e506:	b29a      	uxth	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2208      	movs	r2, #8
 800e510:	761a      	strb	r2, [r3, #24]

      break;
 800e512:	e086      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	791b      	ldrb	r3, [r3, #4]
 800e518:	4619      	mov	r1, r3
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fc6e 	bl	800edfc <USBH_LL_GetURBState>
 800e520:	4603      	mov	r3, r0
 800e522:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e524:	7bbb      	ldrb	r3, [r7, #14]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d105      	bne.n	800e536 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	220d      	movs	r2, #13
 800e52e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e534:	e072      	b.n	800e61c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e536:	7bbb      	ldrb	r3, [r7, #14]
 800e538:	2b04      	cmp	r3, #4
 800e53a:	d103      	bne.n	800e544 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	220b      	movs	r2, #11
 800e540:	761a      	strb	r2, [r3, #24]
      break;
 800e542:	e06b      	b.n	800e61c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e544:	7bbb      	ldrb	r3, [r7, #14]
 800e546:	2b05      	cmp	r3, #5
 800e548:	d168      	bne.n	800e61c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e54a:	2303      	movs	r3, #3
 800e54c:	73fb      	strb	r3, [r7, #15]
      break;
 800e54e:	e065      	b.n	800e61c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	795b      	ldrb	r3, [r3, #5]
 800e554:	2201      	movs	r2, #1
 800e556:	9200      	str	r2, [sp, #0]
 800e558:	2200      	movs	r2, #0
 800e55a:	2100      	movs	r1, #0
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f87f 	bl	800e660 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e568:	b29a      	uxth	r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	220a      	movs	r2, #10
 800e572:	761a      	strb	r2, [r3, #24]
      break;
 800e574:	e055      	b.n	800e622 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	795b      	ldrb	r3, [r3, #5]
 800e57a:	4619      	mov	r1, r3
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fc3d 	bl	800edfc <USBH_LL_GetURBState>
 800e582:	4603      	mov	r3, r0
 800e584:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e586:	7bbb      	ldrb	r3, [r7, #14]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d105      	bne.n	800e598 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e58c:	2300      	movs	r3, #0
 800e58e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	220d      	movs	r2, #13
 800e594:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e596:	e043      	b.n	800e620 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e598:	7bbb      	ldrb	r3, [r7, #14]
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d103      	bne.n	800e5a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2209      	movs	r2, #9
 800e5a2:	761a      	strb	r2, [r3, #24]
      break;
 800e5a4:	e03c      	b.n	800e620 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e5a6:	7bbb      	ldrb	r3, [r7, #14]
 800e5a8:	2b04      	cmp	r3, #4
 800e5aa:	d139      	bne.n	800e620 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	220b      	movs	r2, #11
 800e5b0:	761a      	strb	r2, [r3, #24]
      break;
 800e5b2:	e035      	b.n	800e620 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	7e5b      	ldrb	r3, [r3, #25]
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	b2da      	uxtb	r2, r3
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	765a      	strb	r2, [r3, #25]
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	7e5b      	ldrb	r3, [r3, #25]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d806      	bhi.n	800e5d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2201      	movs	r2, #1
 800e5d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e5d4:	e025      	b.n	800e622 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e5dc:	2106      	movs	r1, #6
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	795b      	ldrb	r3, [r3, #5]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f000 f90c 	bl	800e80c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	791b      	ldrb	r3, [r3, #4]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f906 	bl	800e80c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e606:	2302      	movs	r3, #2
 800e608:	73fb      	strb	r3, [r7, #15]
      break;
 800e60a:	e00a      	b.n	800e622 <USBH_HandleControl+0x2de>

    default:
      break;
 800e60c:	bf00      	nop
 800e60e:	e008      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e610:	bf00      	nop
 800e612:	e006      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e614:	bf00      	nop
 800e616:	e004      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e618:	bf00      	nop
 800e61a:	e002      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e61c:	bf00      	nop
 800e61e:	e000      	b.n	800e622 <USBH_HandleControl+0x2de>
      break;
 800e620:	bf00      	nop
  }

  return status;
 800e622:	7bfb      	ldrb	r3, [r7, #15]
}
 800e624:	4618      	mov	r0, r3
 800e626:	3710      	adds	r7, #16
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b088      	sub	sp, #32
 800e630:	af04      	add	r7, sp, #16
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e63a:	79f9      	ldrb	r1, [r7, #7]
 800e63c:	2300      	movs	r3, #0
 800e63e:	9303      	str	r3, [sp, #12]
 800e640:	2308      	movs	r3, #8
 800e642:	9302      	str	r3, [sp, #8]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	9301      	str	r3, [sp, #4]
 800e648:	2300      	movs	r3, #0
 800e64a:	9300      	str	r3, [sp, #0]
 800e64c:	2300      	movs	r3, #0
 800e64e:	2200      	movs	r2, #0
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f000 fba2 	bl	800ed9a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b088      	sub	sp, #32
 800e664:	af04      	add	r7, sp, #16
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	4611      	mov	r1, r2
 800e66c:	461a      	mov	r2, r3
 800e66e:	460b      	mov	r3, r1
 800e670:	80fb      	strh	r3, [r7, #6]
 800e672:	4613      	mov	r3, r2
 800e674:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d001      	beq.n	800e684 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e680:	2300      	movs	r3, #0
 800e682:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e684:	7979      	ldrb	r1, [r7, #5]
 800e686:	7e3b      	ldrb	r3, [r7, #24]
 800e688:	9303      	str	r3, [sp, #12]
 800e68a:	88fb      	ldrh	r3, [r7, #6]
 800e68c:	9302      	str	r3, [sp, #8]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	9301      	str	r3, [sp, #4]
 800e692:	2301      	movs	r3, #1
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	2300      	movs	r3, #0
 800e698:	2200      	movs	r2, #0
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f000 fb7d 	bl	800ed9a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e6a0:	2300      	movs	r3, #0
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3710      	adds	r7, #16
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b088      	sub	sp, #32
 800e6ae:	af04      	add	r7, sp, #16
 800e6b0:	60f8      	str	r0, [r7, #12]
 800e6b2:	60b9      	str	r1, [r7, #8]
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	80fb      	strh	r3, [r7, #6]
 800e6bc:	4613      	mov	r3, r2
 800e6be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e6c0:	7979      	ldrb	r1, [r7, #5]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	9303      	str	r3, [sp, #12]
 800e6c6:	88fb      	ldrh	r3, [r7, #6]
 800e6c8:	9302      	str	r3, [sp, #8]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	9301      	str	r3, [sp, #4]
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	9300      	str	r3, [sp, #0]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	68f8      	ldr	r0, [r7, #12]
 800e6d8:	f000 fb5f 	bl	800ed9a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e6dc:	2300      	movs	r3, #0

}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3710      	adds	r7, #16
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b088      	sub	sp, #32
 800e6ea:	af04      	add	r7, sp, #16
 800e6ec:	60f8      	str	r0, [r7, #12]
 800e6ee:	60b9      	str	r1, [r7, #8]
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	461a      	mov	r2, r3
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	80fb      	strh	r3, [r7, #6]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e706:	2300      	movs	r3, #0
 800e708:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e70a:	7979      	ldrb	r1, [r7, #5]
 800e70c:	7e3b      	ldrb	r3, [r7, #24]
 800e70e:	9303      	str	r3, [sp, #12]
 800e710:	88fb      	ldrh	r3, [r7, #6]
 800e712:	9302      	str	r3, [sp, #8]
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	9301      	str	r3, [sp, #4]
 800e718:	2301      	movs	r3, #1
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	2302      	movs	r3, #2
 800e71e:	2200      	movs	r2, #0
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f000 fb3a 	bl	800ed9a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b088      	sub	sp, #32
 800e734:	af04      	add	r7, sp, #16
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	4611      	mov	r1, r2
 800e73c:	461a      	mov	r2, r3
 800e73e:	460b      	mov	r3, r1
 800e740:	80fb      	strh	r3, [r7, #6]
 800e742:	4613      	mov	r3, r2
 800e744:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e746:	7979      	ldrb	r1, [r7, #5]
 800e748:	2300      	movs	r3, #0
 800e74a:	9303      	str	r3, [sp, #12]
 800e74c:	88fb      	ldrh	r3, [r7, #6]
 800e74e:	9302      	str	r3, [sp, #8]
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	9301      	str	r3, [sp, #4]
 800e754:	2301      	movs	r3, #1
 800e756:	9300      	str	r3, [sp, #0]
 800e758:	2302      	movs	r3, #2
 800e75a:	2201      	movs	r2, #1
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f000 fb1c 	bl	800ed9a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3710      	adds	r7, #16
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b086      	sub	sp, #24
 800e770:	af04      	add	r7, sp, #16
 800e772:	6078      	str	r0, [r7, #4]
 800e774:	4608      	mov	r0, r1
 800e776:	4611      	mov	r1, r2
 800e778:	461a      	mov	r2, r3
 800e77a:	4603      	mov	r3, r0
 800e77c:	70fb      	strb	r3, [r7, #3]
 800e77e:	460b      	mov	r3, r1
 800e780:	70bb      	strb	r3, [r7, #2]
 800e782:	4613      	mov	r3, r2
 800e784:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e786:	7878      	ldrb	r0, [r7, #1]
 800e788:	78ba      	ldrb	r2, [r7, #2]
 800e78a:	78f9      	ldrb	r1, [r7, #3]
 800e78c:	8b3b      	ldrh	r3, [r7, #24]
 800e78e:	9302      	str	r3, [sp, #8]
 800e790:	7d3b      	ldrb	r3, [r7, #20]
 800e792:	9301      	str	r3, [sp, #4]
 800e794:	7c3b      	ldrb	r3, [r7, #16]
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	4603      	mov	r3, r0
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 faaf 	bl	800ecfe <USBH_LL_OpenPipe>

  return USBH_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b082      	sub	sp, #8
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e7b6:	78fb      	ldrb	r3, [r7, #3]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 face 	bl	800ed5c <USBH_LL_ClosePipe>

  return USBH_OK;
 800e7c0:	2300      	movs	r3, #0
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f836 	bl	800e848 <USBH_GetFreePipe>
 800e7dc:	4603      	mov	r3, r0
 800e7de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e7e0:	89fb      	ldrh	r3, [r7, #14]
 800e7e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d00a      	beq.n	800e800 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e7ea:	78fa      	ldrb	r2, [r7, #3]
 800e7ec:	89fb      	ldrh	r3, [r7, #14]
 800e7ee:	f003 030f 	and.w	r3, r3, #15
 800e7f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e7f6:	6879      	ldr	r1, [r7, #4]
 800e7f8:	33e0      	adds	r3, #224	@ 0xe0
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	440b      	add	r3, r1
 800e7fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e800:	89fb      	ldrh	r3, [r7, #14]
 800e802:	b2db      	uxtb	r3, r3
}
 800e804:	4618      	mov	r0, r3
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	460b      	mov	r3, r1
 800e816:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e818:	78fb      	ldrb	r3, [r7, #3]
 800e81a:	2b0f      	cmp	r3, #15
 800e81c:	d80d      	bhi.n	800e83a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e81e:	78fb      	ldrb	r3, [r7, #3]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	33e0      	adds	r3, #224	@ 0xe0
 800e824:	009b      	lsls	r3, r3, #2
 800e826:	4413      	add	r3, r2
 800e828:	685a      	ldr	r2, [r3, #4]
 800e82a:	78fb      	ldrb	r3, [r7, #3]
 800e82c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e830:	6879      	ldr	r1, [r7, #4]
 800e832:	33e0      	adds	r3, #224	@ 0xe0
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	440b      	add	r3, r1
 800e838:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e83a:	2300      	movs	r3, #0
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e850:	2300      	movs	r3, #0
 800e852:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e854:	2300      	movs	r3, #0
 800e856:	73fb      	strb	r3, [r7, #15]
 800e858:	e00f      	b.n	800e87a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	33e0      	adds	r3, #224	@ 0xe0
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4413      	add	r3, r2
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d102      	bne.n	800e874 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e86e:	7bfb      	ldrb	r3, [r7, #15]
 800e870:	b29b      	uxth	r3, r3
 800e872:	e007      	b.n	800e884 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	3301      	adds	r3, #1
 800e878:	73fb      	strb	r3, [r7, #15]
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
 800e87c:	2b0f      	cmp	r3, #15
 800e87e:	d9ec      	bls.n	800e85a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e880:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e884:	4618      	mov	r0, r3
 800e886:	3714      	adds	r7, #20
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e890:	b480      	push	{r7}
 800e892:	b087      	sub	sp, #28
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	4613      	mov	r3, r2
 800e89c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e8a6:	4b1f      	ldr	r3, [pc, #124]	@ (800e924 <FATFS_LinkDriverEx+0x94>)
 800e8a8:	7a5b      	ldrb	r3, [r3, #9]
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d131      	bne.n	800e914 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e8b0:	4b1c      	ldr	r3, [pc, #112]	@ (800e924 <FATFS_LinkDriverEx+0x94>)
 800e8b2:	7a5b      	ldrb	r3, [r3, #9]
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	4b1a      	ldr	r3, [pc, #104]	@ (800e924 <FATFS_LinkDriverEx+0x94>)
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e8be:	4b19      	ldr	r3, [pc, #100]	@ (800e924 <FATFS_LinkDriverEx+0x94>)
 800e8c0:	7a5b      	ldrb	r3, [r3, #9]
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	4a17      	ldr	r2, [pc, #92]	@ (800e924 <FATFS_LinkDriverEx+0x94>)
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4413      	add	r3, r2
 800e8ca:	68fa      	ldr	r2, [r7, #12]
 800e8cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e8ce:	4b15      	ldr	r3, [pc, #84]	@ (800e924 <FATFS_LinkDriverEx+0x94>)
 800e8d0:	7a5b      	ldrb	r3, [r3, #9]
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	4b13      	ldr	r3, [pc, #76]	@ (800e924 <FATFS_LinkDriverEx+0x94>)
 800e8d8:	4413      	add	r3, r2
 800e8da:	79fa      	ldrb	r2, [r7, #7]
 800e8dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e8de:	4b11      	ldr	r3, [pc, #68]	@ (800e924 <FATFS_LinkDriverEx+0x94>)
 800e8e0:	7a5b      	ldrb	r3, [r3, #9]
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	1c5a      	adds	r2, r3, #1
 800e8e6:	b2d1      	uxtb	r1, r2
 800e8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800e924 <FATFS_LinkDriverEx+0x94>)
 800e8ea:	7251      	strb	r1, [r2, #9]
 800e8ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e8ee:	7dbb      	ldrb	r3, [r7, #22]
 800e8f0:	3330      	adds	r3, #48	@ 0x30
 800e8f2:	b2da      	uxtb	r2, r3
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	223a      	movs	r2, #58	@ 0x3a
 800e8fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e900:	68bb      	ldr	r3, [r7, #8]
 800e902:	3302      	adds	r3, #2
 800e904:	222f      	movs	r2, #47	@ 0x2f
 800e906:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	3303      	adds	r3, #3
 800e90c:	2200      	movs	r2, #0
 800e90e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e910:	2300      	movs	r3, #0
 800e912:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e914:	7dfb      	ldrb	r3, [r7, #23]
}
 800e916:	4618      	mov	r0, r3
 800e918:	371c      	adds	r7, #28
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	20000574 	.word	0x20000574

0800e928 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
 800e930:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e932:	2200      	movs	r2, #0
 800e934:	6839      	ldr	r1, [r7, #0]
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7ff ffaa 	bl	800e890 <FATFS_LinkDriverEx>
 800e93c:	4603      	mov	r3, r0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3708      	adds	r7, #8
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
	...

0800e948 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e94c:	2201      	movs	r2, #1
 800e94e:	490e      	ldr	r1, [pc, #56]	@ (800e988 <MX_USB_HOST_Init+0x40>)
 800e950:	480e      	ldr	r0, [pc, #56]	@ (800e98c <MX_USB_HOST_Init+0x44>)
 800e952:	f7fe fab9 	bl	800cec8 <USBH_Init>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d001      	beq.n	800e960 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e95c:	f7f2 fd88 	bl	8001470 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e960:	490b      	ldr	r1, [pc, #44]	@ (800e990 <MX_USB_HOST_Init+0x48>)
 800e962:	480a      	ldr	r0, [pc, #40]	@ (800e98c <MX_USB_HOST_Init+0x44>)
 800e964:	f7fe fb5d 	bl	800d022 <USBH_RegisterClass>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d001      	beq.n	800e972 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e96e:	f7f2 fd7f 	bl	8001470 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e972:	4806      	ldr	r0, [pc, #24]	@ (800e98c <MX_USB_HOST_Init+0x44>)
 800e974:	f7fe fbe1 	bl	800d13a <USBH_Start>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d001      	beq.n	800e982 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e97e:	f7f2 fd77 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e982:	bf00      	nop
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	0800e9a9 	.word	0x0800e9a9
 800e98c:	20000580 	.word	0x20000580
 800e990:	2000000c 	.word	0x2000000c

0800e994 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e998:	4802      	ldr	r0, [pc, #8]	@ (800e9a4 <MX_USB_HOST_Process+0x10>)
 800e99a:	f7fe fbdf 	bl	800d15c <USBH_Process>
}
 800e99e:	bf00      	nop
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20000580 	.word	0x20000580

0800e9a8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e9b4:	78fb      	ldrb	r3, [r7, #3]
 800e9b6:	3b01      	subs	r3, #1
 800e9b8:	2b04      	cmp	r3, #4
 800e9ba:	d819      	bhi.n	800e9f0 <USBH_UserProcess+0x48>
 800e9bc:	a201      	add	r2, pc, #4	@ (adr r2, 800e9c4 <USBH_UserProcess+0x1c>)
 800e9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c2:	bf00      	nop
 800e9c4:	0800e9f1 	.word	0x0800e9f1
 800e9c8:	0800e9e1 	.word	0x0800e9e1
 800e9cc:	0800e9f1 	.word	0x0800e9f1
 800e9d0:	0800e9e9 	.word	0x0800e9e9
 800e9d4:	0800e9d9 	.word	0x0800e9d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e9d8:	4b09      	ldr	r3, [pc, #36]	@ (800ea00 <USBH_UserProcess+0x58>)
 800e9da:	2203      	movs	r2, #3
 800e9dc:	701a      	strb	r2, [r3, #0]
  break;
 800e9de:	e008      	b.n	800e9f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e9e0:	4b07      	ldr	r3, [pc, #28]	@ (800ea00 <USBH_UserProcess+0x58>)
 800e9e2:	2202      	movs	r2, #2
 800e9e4:	701a      	strb	r2, [r3, #0]
  break;
 800e9e6:	e004      	b.n	800e9f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e9e8:	4b05      	ldr	r3, [pc, #20]	@ (800ea00 <USBH_UserProcess+0x58>)
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	701a      	strb	r2, [r3, #0]
  break;
 800e9ee:	e000      	b.n	800e9f2 <USBH_UserProcess+0x4a>

  default:
  break;
 800e9f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e9f2:	bf00      	nop
 800e9f4:	370c      	adds	r7, #12
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	20000958 	.word	0x20000958

0800ea04 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b08a      	sub	sp, #40	@ 0x28
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea0c:	f107 0314 	add.w	r3, r7, #20
 800ea10:	2200      	movs	r2, #0
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	605a      	str	r2, [r3, #4]
 800ea16:	609a      	str	r2, [r3, #8]
 800ea18:	60da      	str	r2, [r3, #12]
 800ea1a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ea24:	d147      	bne.n	800eab6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea26:	2300      	movs	r3, #0
 800ea28:	613b      	str	r3, [r7, #16]
 800ea2a:	4b25      	ldr	r3, [pc, #148]	@ (800eac0 <HAL_HCD_MspInit+0xbc>)
 800ea2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea2e:	4a24      	ldr	r2, [pc, #144]	@ (800eac0 <HAL_HCD_MspInit+0xbc>)
 800ea30:	f043 0301 	orr.w	r3, r3, #1
 800ea34:	6313      	str	r3, [r2, #48]	@ 0x30
 800ea36:	4b22      	ldr	r3, [pc, #136]	@ (800eac0 <HAL_HCD_MspInit+0xbc>)
 800ea38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea3a:	f003 0301 	and.w	r3, r3, #1
 800ea3e:	613b      	str	r3, [r7, #16]
 800ea40:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800ea42:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ea46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea48:	2302      	movs	r3, #2
 800ea4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea50:	2303      	movs	r3, #3
 800ea52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ea54:	230a      	movs	r3, #10
 800ea56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea58:	f107 0314 	add.w	r3, r7, #20
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	4819      	ldr	r0, [pc, #100]	@ (800eac4 <HAL_HCD_MspInit+0xc0>)
 800ea60:	f7f4 fc84 	bl	800336c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 800ea64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea6a:	2302      	movs	r3, #2
 800ea6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800ea72:	f107 0314 	add.w	r3, r7, #20
 800ea76:	4619      	mov	r1, r3
 800ea78:	4812      	ldr	r0, [pc, #72]	@ (800eac4 <HAL_HCD_MspInit+0xc0>)
 800ea7a:	f7f4 fc77 	bl	800336c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ea7e:	4b10      	ldr	r3, [pc, #64]	@ (800eac0 <HAL_HCD_MspInit+0xbc>)
 800ea80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea82:	4a0f      	ldr	r2, [pc, #60]	@ (800eac0 <HAL_HCD_MspInit+0xbc>)
 800ea84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea88:	6353      	str	r3, [r2, #52]	@ 0x34
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	60fb      	str	r3, [r7, #12]
 800ea8e:	4b0c      	ldr	r3, [pc, #48]	@ (800eac0 <HAL_HCD_MspInit+0xbc>)
 800ea90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea92:	4a0b      	ldr	r2, [pc, #44]	@ (800eac0 <HAL_HCD_MspInit+0xbc>)
 800ea94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ea98:	6453      	str	r3, [r2, #68]	@ 0x44
 800ea9a:	4b09      	ldr	r3, [pc, #36]	@ (800eac0 <HAL_HCD_MspInit+0xbc>)
 800ea9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	2043      	movs	r0, #67	@ 0x43
 800eaac:	f7f3 fc24 	bl	80022f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eab0:	2043      	movs	r0, #67	@ 0x43
 800eab2:	f7f3 fc3d 	bl	8002330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eab6:	bf00      	nop
 800eab8:	3728      	adds	r7, #40	@ 0x28
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	40023800 	.word	0x40023800
 800eac4:	40020000 	.word	0x40020000

0800eac8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fe ff17 	bl	800d90a <USBH_LL_IncTimer>
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fe ff4f 	bl	800d996 <USBH_LL_Connect>
}
 800eaf8:	bf00      	nop
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fe ff58 	bl	800d9c4 <USBH_LL_Disconnect>
}
 800eb14:	bf00      	nop
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	460b      	mov	r3, r1
 800eb26:	70fb      	strb	r3, [r7, #3]
 800eb28:	4613      	mov	r3, r2
 800eb2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800eb2c:	bf00      	nop
 800eb2e:	370c      	adds	r7, #12
 800eb30:	46bd      	mov	sp, r7
 800eb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb36:	4770      	bx	lr

0800eb38 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b082      	sub	sp, #8
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7fe ff09 	bl	800d95e <USBH_LL_PortEnabled>
}
 800eb4c:	bf00      	nop
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b082      	sub	sp, #8
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fe ff09 	bl	800d97a <USBH_LL_PortDisabled>
}
 800eb68:	bf00      	nop
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800eb7e:	2b01      	cmp	r3, #1
 800eb80:	d12a      	bne.n	800ebd8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800eb82:	4a18      	ldr	r2, [pc, #96]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a15      	ldr	r2, [pc, #84]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800eb8e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb92:	4b14      	ldr	r3, [pc, #80]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800eb94:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800eb98:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800eb9a:	4b12      	ldr	r3, [pc, #72]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800eb9c:	2208      	movs	r2, #8
 800eb9e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800eba0:	4b10      	ldr	r3, [pc, #64]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800eba2:	2201      	movs	r2, #1
 800eba4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eba6:	4b0f      	ldr	r3, [pc, #60]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ebac:	4b0d      	ldr	r3, [pc, #52]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800ebae:	2202      	movs	r2, #2
 800ebb0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ebb2:	4b0c      	ldr	r3, [pc, #48]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ebb8:	480a      	ldr	r0, [pc, #40]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800ebba:	f7f4 fdb4 	bl	8003726 <HAL_HCD_Init>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d001      	beq.n	800ebc8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ebc4:	f7f2 fc54 	bl	8001470 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ebc8:	4806      	ldr	r0, [pc, #24]	@ (800ebe4 <USBH_LL_Init+0x74>)
 800ebca:	f7f5 fa15 	bl	8003ff8 <HAL_HCD_GetCurrentFrame>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7fe fe8a 	bl	800d8ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	2000095c 	.word	0x2000095c

0800ebe8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7f5 f982 	bl	8003f08 <HAL_HCD_Start>
 800ec04:	4603      	mov	r3, r0
 800ec06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec08:	7bfb      	ldrb	r3, [r7, #15]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f000 f95e 	bl	800eecc <USBH_Get_USB_Status>
 800ec10:	4603      	mov	r3, r0
 800ec12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3710      	adds	r7, #16
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b084      	sub	sp, #16
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec26:	2300      	movs	r3, #0
 800ec28:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7f5 f98a 	bl	8003f4e <HAL_HCD_Stop>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec3e:	7bfb      	ldrb	r3, [r7, #15]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 f943 	bl	800eecc <USBH_Get_USB_Status>
 800ec46:	4603      	mov	r3, r0
 800ec48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}

0800ec54 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7f5 f9d4 	bl	8004014 <HAL_HCD_GetCurrentSpeed>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b02      	cmp	r3, #2
 800ec70:	d00c      	beq.n	800ec8c <USBH_LL_GetSpeed+0x38>
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	d80d      	bhi.n	800ec92 <USBH_LL_GetSpeed+0x3e>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d002      	beq.n	800ec80 <USBH_LL_GetSpeed+0x2c>
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d003      	beq.n	800ec86 <USBH_LL_GetSpeed+0x32>
 800ec7e:	e008      	b.n	800ec92 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ec80:	2300      	movs	r3, #0
 800ec82:	73fb      	strb	r3, [r7, #15]
    break;
 800ec84:	e008      	b.n	800ec98 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ec86:	2301      	movs	r3, #1
 800ec88:	73fb      	strb	r3, [r7, #15]
    break;
 800ec8a:	e005      	b.n	800ec98 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ec8c:	2302      	movs	r3, #2
 800ec8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec90:	e002      	b.n	800ec98 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ec92:	2301      	movs	r3, #1
 800ec94:	73fb      	strb	r3, [r7, #15]
    break;
 800ec96:	bf00      	nop
  }
  return  speed;
 800ec98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3710      	adds	r7, #16
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}

0800eca2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b084      	sub	sp, #16
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7f5 f965 	bl	8003f88 <HAL_HCD_ResetPort>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ecc2:	7bfb      	ldrb	r3, [r7, #15]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f000 f901 	bl	800eecc <USBH_Get_USB_Status>
 800ecca:	4603      	mov	r3, r0
 800eccc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecce:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	460b      	mov	r3, r1
 800ece2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ecea:	78fa      	ldrb	r2, [r7, #3]
 800ecec:	4611      	mov	r1, r2
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7f5 f96d 	bl	8003fce <HAL_HCD_HC_GetXferCount>
 800ecf4:	4603      	mov	r3, r0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ecfe:	b590      	push	{r4, r7, lr}
 800ed00:	b089      	sub	sp, #36	@ 0x24
 800ed02:	af04      	add	r7, sp, #16
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	4608      	mov	r0, r1
 800ed08:	4611      	mov	r1, r2
 800ed0a:	461a      	mov	r2, r3
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	70fb      	strb	r3, [r7, #3]
 800ed10:	460b      	mov	r3, r1
 800ed12:	70bb      	strb	r3, [r7, #2]
 800ed14:	4613      	mov	r3, r2
 800ed16:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ed26:	787c      	ldrb	r4, [r7, #1]
 800ed28:	78ba      	ldrb	r2, [r7, #2]
 800ed2a:	78f9      	ldrb	r1, [r7, #3]
 800ed2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ed2e:	9302      	str	r3, [sp, #8]
 800ed30:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ed34:	9301      	str	r3, [sp, #4]
 800ed36:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed3a:	9300      	str	r3, [sp, #0]
 800ed3c:	4623      	mov	r3, r4
 800ed3e:	f7f4 fd59 	bl	80037f4 <HAL_HCD_HC_Init>
 800ed42:	4603      	mov	r3, r0
 800ed44:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed46:	7bfb      	ldrb	r3, [r7, #15]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f000 f8bf 	bl	800eecc <USBH_Get_USB_Status>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed52:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3714      	adds	r7, #20
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd90      	pop	{r4, r7, pc}

0800ed5c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	460b      	mov	r3, r1
 800ed66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ed76:	78fa      	ldrb	r2, [r7, #3]
 800ed78:	4611      	mov	r1, r2
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7f4 fdf2 	bl	8003964 <HAL_HCD_HC_Halt>
 800ed80:	4603      	mov	r3, r0
 800ed82:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ed84:	7bfb      	ldrb	r3, [r7, #15]
 800ed86:	4618      	mov	r0, r3
 800ed88:	f000 f8a0 	bl	800eecc <USBH_Get_USB_Status>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ed9a:	b590      	push	{r4, r7, lr}
 800ed9c:	b089      	sub	sp, #36	@ 0x24
 800ed9e:	af04      	add	r7, sp, #16
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	4608      	mov	r0, r1
 800eda4:	4611      	mov	r1, r2
 800eda6:	461a      	mov	r2, r3
 800eda8:	4603      	mov	r3, r0
 800edaa:	70fb      	strb	r3, [r7, #3]
 800edac:	460b      	mov	r3, r1
 800edae:	70bb      	strb	r3, [r7, #2]
 800edb0:	4613      	mov	r3, r2
 800edb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edb4:	2300      	movs	r3, #0
 800edb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edb8:	2300      	movs	r3, #0
 800edba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800edc2:	787c      	ldrb	r4, [r7, #1]
 800edc4:	78ba      	ldrb	r2, [r7, #2]
 800edc6:	78f9      	ldrb	r1, [r7, #3]
 800edc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800edcc:	9303      	str	r3, [sp, #12]
 800edce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800edd0:	9302      	str	r3, [sp, #8]
 800edd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd4:	9301      	str	r3, [sp, #4]
 800edd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800edda:	9300      	str	r3, [sp, #0]
 800eddc:	4623      	mov	r3, r4
 800edde:	f7f4 fde5 	bl	80039ac <HAL_HCD_HC_SubmitRequest>
 800ede2:	4603      	mov	r3, r0
 800ede4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ede6:	7bfb      	ldrb	r3, [r7, #15]
 800ede8:	4618      	mov	r0, r3
 800edea:	f000 f86f 	bl	800eecc <USBH_Get_USB_Status>
 800edee:	4603      	mov	r3, r0
 800edf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3714      	adds	r7, #20
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd90      	pop	{r4, r7, pc}

0800edfc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	460b      	mov	r3, r1
 800ee06:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ee0e:	78fa      	ldrb	r2, [r7, #3]
 800ee10:	4611      	mov	r1, r2
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7f5 f8c6 	bl	8003fa4 <HAL_HCD_HC_GetURBState>
 800ee18:	4603      	mov	r3, r0
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b082      	sub	sp, #8
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	460b      	mov	r3, r1
 800ee2c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d103      	bne.n	800ee40 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ee38:	78fb      	ldrb	r3, [r7, #3]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f000 f872 	bl	800ef24 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ee40:	20c8      	movs	r0, #200	@ 0xc8
 800ee42:	f7f3 f97d 	bl	8002140 <HAL_Delay>
  return USBH_OK;
 800ee46:	2300      	movs	r3, #0
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3708      	adds	r7, #8
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b085      	sub	sp, #20
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	460b      	mov	r3, r1
 800ee5a:	70fb      	strb	r3, [r7, #3]
 800ee5c:	4613      	mov	r3, r2
 800ee5e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ee66:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ee68:	78fa      	ldrb	r2, [r7, #3]
 800ee6a:	68f9      	ldr	r1, [r7, #12]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	011b      	lsls	r3, r3, #4
 800ee70:	1a9b      	subs	r3, r3, r2
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	440b      	add	r3, r1
 800ee76:	3317      	adds	r3, #23
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00a      	beq.n	800ee94 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ee7e:	78fa      	ldrb	r2, [r7, #3]
 800ee80:	68f9      	ldr	r1, [r7, #12]
 800ee82:	4613      	mov	r3, r2
 800ee84:	011b      	lsls	r3, r3, #4
 800ee86:	1a9b      	subs	r3, r3, r2
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	440b      	add	r3, r1
 800ee8c:	333c      	adds	r3, #60	@ 0x3c
 800ee8e:	78ba      	ldrb	r2, [r7, #2]
 800ee90:	701a      	strb	r2, [r3, #0]
 800ee92:	e009      	b.n	800eea8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ee94:	78fa      	ldrb	r2, [r7, #3]
 800ee96:	68f9      	ldr	r1, [r7, #12]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	011b      	lsls	r3, r3, #4
 800ee9c:	1a9b      	subs	r3, r3, r2
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	440b      	add	r3, r1
 800eea2:	333d      	adds	r3, #61	@ 0x3d
 800eea4:	78ba      	ldrb	r2, [r7, #2]
 800eea6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800eea8:	2300      	movs	r3, #0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3714      	adds	r7, #20
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr

0800eeb6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b082      	sub	sp, #8
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7f3 f93e 	bl	8002140 <HAL_Delay>
}
 800eec4:	bf00      	nop
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eecc:	b480      	push	{r7}
 800eece:	b085      	sub	sp, #20
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	4603      	mov	r3, r0
 800eed4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eed6:	2300      	movs	r3, #0
 800eed8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eeda:	79fb      	ldrb	r3, [r7, #7]
 800eedc:	2b03      	cmp	r3, #3
 800eede:	d817      	bhi.n	800ef10 <USBH_Get_USB_Status+0x44>
 800eee0:	a201      	add	r2, pc, #4	@ (adr r2, 800eee8 <USBH_Get_USB_Status+0x1c>)
 800eee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eee6:	bf00      	nop
 800eee8:	0800eef9 	.word	0x0800eef9
 800eeec:	0800eeff 	.word	0x0800eeff
 800eef0:	0800ef05 	.word	0x0800ef05
 800eef4:	0800ef0b 	.word	0x0800ef0b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800eef8:	2300      	movs	r3, #0
 800eefa:	73fb      	strb	r3, [r7, #15]
    break;
 800eefc:	e00b      	b.n	800ef16 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800eefe:	2302      	movs	r3, #2
 800ef00:	73fb      	strb	r3, [r7, #15]
    break;
 800ef02:	e008      	b.n	800ef16 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ef04:	2301      	movs	r3, #1
 800ef06:	73fb      	strb	r3, [r7, #15]
    break;
 800ef08:	e005      	b.n	800ef16 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ef0a:	2302      	movs	r3, #2
 800ef0c:	73fb      	strb	r3, [r7, #15]
    break;
 800ef0e:	e002      	b.n	800ef16 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ef10:	2302      	movs	r3, #2
 800ef12:	73fb      	strb	r3, [r7, #15]
    break;
 800ef14:	bf00      	nop
  }
  return usb_status;
 800ef16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3714      	adds	r7, #20
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b084      	sub	sp, #16
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ef2e:	79fb      	ldrb	r3, [r7, #7]
 800ef30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ef32:	79fb      	ldrb	r3, [r7, #7]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d102      	bne.n	800ef3e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	73fb      	strb	r3, [r7, #15]
 800ef3c:	e001      	b.n	800ef42 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 800ef42:	7bfb      	ldrb	r3, [r7, #15]
 800ef44:	461a      	mov	r2, r3
 800ef46:	2104      	movs	r1, #4
 800ef48:	4803      	ldr	r0, [pc, #12]	@ (800ef58 <MX_DriverVbusFS+0x34>)
 800ef4a:	f7f4 fbd3 	bl	80036f4 <HAL_GPIO_WritePin>
}
 800ef4e:	bf00      	nop
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	40020400 	.word	0x40020400

0800ef5c <malloc>:
 800ef5c:	4b02      	ldr	r3, [pc, #8]	@ (800ef68 <malloc+0xc>)
 800ef5e:	4601      	mov	r1, r0
 800ef60:	6818      	ldr	r0, [r3, #0]
 800ef62:	f000 b82d 	b.w	800efc0 <_malloc_r>
 800ef66:	bf00      	nop
 800ef68:	20000038 	.word	0x20000038

0800ef6c <free>:
 800ef6c:	4b02      	ldr	r3, [pc, #8]	@ (800ef78 <free+0xc>)
 800ef6e:	4601      	mov	r1, r0
 800ef70:	6818      	ldr	r0, [r3, #0]
 800ef72:	f000 bb7f 	b.w	800f674 <_free_r>
 800ef76:	bf00      	nop
 800ef78:	20000038 	.word	0x20000038

0800ef7c <sbrk_aligned>:
 800ef7c:	b570      	push	{r4, r5, r6, lr}
 800ef7e:	4e0f      	ldr	r6, [pc, #60]	@ (800efbc <sbrk_aligned+0x40>)
 800ef80:	460c      	mov	r4, r1
 800ef82:	6831      	ldr	r1, [r6, #0]
 800ef84:	4605      	mov	r5, r0
 800ef86:	b911      	cbnz	r1, 800ef8e <sbrk_aligned+0x12>
 800ef88:	f000 fb24 	bl	800f5d4 <_sbrk_r>
 800ef8c:	6030      	str	r0, [r6, #0]
 800ef8e:	4621      	mov	r1, r4
 800ef90:	4628      	mov	r0, r5
 800ef92:	f000 fb1f 	bl	800f5d4 <_sbrk_r>
 800ef96:	1c43      	adds	r3, r0, #1
 800ef98:	d103      	bne.n	800efa2 <sbrk_aligned+0x26>
 800ef9a:	f04f 34ff 	mov.w	r4, #4294967295
 800ef9e:	4620      	mov	r0, r4
 800efa0:	bd70      	pop	{r4, r5, r6, pc}
 800efa2:	1cc4      	adds	r4, r0, #3
 800efa4:	f024 0403 	bic.w	r4, r4, #3
 800efa8:	42a0      	cmp	r0, r4
 800efaa:	d0f8      	beq.n	800ef9e <sbrk_aligned+0x22>
 800efac:	1a21      	subs	r1, r4, r0
 800efae:	4628      	mov	r0, r5
 800efb0:	f000 fb10 	bl	800f5d4 <_sbrk_r>
 800efb4:	3001      	adds	r0, #1
 800efb6:	d1f2      	bne.n	800ef9e <sbrk_aligned+0x22>
 800efb8:	e7ef      	b.n	800ef9a <sbrk_aligned+0x1e>
 800efba:	bf00      	nop
 800efbc:	20000d3c 	.word	0x20000d3c

0800efc0 <_malloc_r>:
 800efc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efc4:	1ccd      	adds	r5, r1, #3
 800efc6:	f025 0503 	bic.w	r5, r5, #3
 800efca:	3508      	adds	r5, #8
 800efcc:	2d0c      	cmp	r5, #12
 800efce:	bf38      	it	cc
 800efd0:	250c      	movcc	r5, #12
 800efd2:	2d00      	cmp	r5, #0
 800efd4:	4606      	mov	r6, r0
 800efd6:	db01      	blt.n	800efdc <_malloc_r+0x1c>
 800efd8:	42a9      	cmp	r1, r5
 800efda:	d904      	bls.n	800efe6 <_malloc_r+0x26>
 800efdc:	230c      	movs	r3, #12
 800efde:	6033      	str	r3, [r6, #0]
 800efe0:	2000      	movs	r0, #0
 800efe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efe6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f0bc <_malloc_r+0xfc>
 800efea:	f000 f869 	bl	800f0c0 <__malloc_lock>
 800efee:	f8d8 3000 	ldr.w	r3, [r8]
 800eff2:	461c      	mov	r4, r3
 800eff4:	bb44      	cbnz	r4, 800f048 <_malloc_r+0x88>
 800eff6:	4629      	mov	r1, r5
 800eff8:	4630      	mov	r0, r6
 800effa:	f7ff ffbf 	bl	800ef7c <sbrk_aligned>
 800effe:	1c43      	adds	r3, r0, #1
 800f000:	4604      	mov	r4, r0
 800f002:	d158      	bne.n	800f0b6 <_malloc_r+0xf6>
 800f004:	f8d8 4000 	ldr.w	r4, [r8]
 800f008:	4627      	mov	r7, r4
 800f00a:	2f00      	cmp	r7, #0
 800f00c:	d143      	bne.n	800f096 <_malloc_r+0xd6>
 800f00e:	2c00      	cmp	r4, #0
 800f010:	d04b      	beq.n	800f0aa <_malloc_r+0xea>
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	4639      	mov	r1, r7
 800f016:	4630      	mov	r0, r6
 800f018:	eb04 0903 	add.w	r9, r4, r3
 800f01c:	f000 fada 	bl	800f5d4 <_sbrk_r>
 800f020:	4581      	cmp	r9, r0
 800f022:	d142      	bne.n	800f0aa <_malloc_r+0xea>
 800f024:	6821      	ldr	r1, [r4, #0]
 800f026:	1a6d      	subs	r5, r5, r1
 800f028:	4629      	mov	r1, r5
 800f02a:	4630      	mov	r0, r6
 800f02c:	f7ff ffa6 	bl	800ef7c <sbrk_aligned>
 800f030:	3001      	adds	r0, #1
 800f032:	d03a      	beq.n	800f0aa <_malloc_r+0xea>
 800f034:	6823      	ldr	r3, [r4, #0]
 800f036:	442b      	add	r3, r5
 800f038:	6023      	str	r3, [r4, #0]
 800f03a:	f8d8 3000 	ldr.w	r3, [r8]
 800f03e:	685a      	ldr	r2, [r3, #4]
 800f040:	bb62      	cbnz	r2, 800f09c <_malloc_r+0xdc>
 800f042:	f8c8 7000 	str.w	r7, [r8]
 800f046:	e00f      	b.n	800f068 <_malloc_r+0xa8>
 800f048:	6822      	ldr	r2, [r4, #0]
 800f04a:	1b52      	subs	r2, r2, r5
 800f04c:	d420      	bmi.n	800f090 <_malloc_r+0xd0>
 800f04e:	2a0b      	cmp	r2, #11
 800f050:	d917      	bls.n	800f082 <_malloc_r+0xc2>
 800f052:	1961      	adds	r1, r4, r5
 800f054:	42a3      	cmp	r3, r4
 800f056:	6025      	str	r5, [r4, #0]
 800f058:	bf18      	it	ne
 800f05a:	6059      	strne	r1, [r3, #4]
 800f05c:	6863      	ldr	r3, [r4, #4]
 800f05e:	bf08      	it	eq
 800f060:	f8c8 1000 	streq.w	r1, [r8]
 800f064:	5162      	str	r2, [r4, r5]
 800f066:	604b      	str	r3, [r1, #4]
 800f068:	4630      	mov	r0, r6
 800f06a:	f000 f82f 	bl	800f0cc <__malloc_unlock>
 800f06e:	f104 000b 	add.w	r0, r4, #11
 800f072:	1d23      	adds	r3, r4, #4
 800f074:	f020 0007 	bic.w	r0, r0, #7
 800f078:	1ac2      	subs	r2, r0, r3
 800f07a:	bf1c      	itt	ne
 800f07c:	1a1b      	subne	r3, r3, r0
 800f07e:	50a3      	strne	r3, [r4, r2]
 800f080:	e7af      	b.n	800efe2 <_malloc_r+0x22>
 800f082:	6862      	ldr	r2, [r4, #4]
 800f084:	42a3      	cmp	r3, r4
 800f086:	bf0c      	ite	eq
 800f088:	f8c8 2000 	streq.w	r2, [r8]
 800f08c:	605a      	strne	r2, [r3, #4]
 800f08e:	e7eb      	b.n	800f068 <_malloc_r+0xa8>
 800f090:	4623      	mov	r3, r4
 800f092:	6864      	ldr	r4, [r4, #4]
 800f094:	e7ae      	b.n	800eff4 <_malloc_r+0x34>
 800f096:	463c      	mov	r4, r7
 800f098:	687f      	ldr	r7, [r7, #4]
 800f09a:	e7b6      	b.n	800f00a <_malloc_r+0x4a>
 800f09c:	461a      	mov	r2, r3
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	42a3      	cmp	r3, r4
 800f0a2:	d1fb      	bne.n	800f09c <_malloc_r+0xdc>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	6053      	str	r3, [r2, #4]
 800f0a8:	e7de      	b.n	800f068 <_malloc_r+0xa8>
 800f0aa:	230c      	movs	r3, #12
 800f0ac:	6033      	str	r3, [r6, #0]
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	f000 f80c 	bl	800f0cc <__malloc_unlock>
 800f0b4:	e794      	b.n	800efe0 <_malloc_r+0x20>
 800f0b6:	6005      	str	r5, [r0, #0]
 800f0b8:	e7d6      	b.n	800f068 <_malloc_r+0xa8>
 800f0ba:	bf00      	nop
 800f0bc:	20000d40 	.word	0x20000d40

0800f0c0 <__malloc_lock>:
 800f0c0:	4801      	ldr	r0, [pc, #4]	@ (800f0c8 <__malloc_lock+0x8>)
 800f0c2:	f000 bad4 	b.w	800f66e <__retarget_lock_acquire_recursive>
 800f0c6:	bf00      	nop
 800f0c8:	20000e84 	.word	0x20000e84

0800f0cc <__malloc_unlock>:
 800f0cc:	4801      	ldr	r0, [pc, #4]	@ (800f0d4 <__malloc_unlock+0x8>)
 800f0ce:	f000 bacf 	b.w	800f670 <__retarget_lock_release_recursive>
 800f0d2:	bf00      	nop
 800f0d4:	20000e84 	.word	0x20000e84

0800f0d8 <std>:
 800f0d8:	2300      	movs	r3, #0
 800f0da:	b510      	push	{r4, lr}
 800f0dc:	4604      	mov	r4, r0
 800f0de:	e9c0 3300 	strd	r3, r3, [r0]
 800f0e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0e6:	6083      	str	r3, [r0, #8]
 800f0e8:	8181      	strh	r1, [r0, #12]
 800f0ea:	6643      	str	r3, [r0, #100]	@ 0x64
 800f0ec:	81c2      	strh	r2, [r0, #14]
 800f0ee:	6183      	str	r3, [r0, #24]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	2208      	movs	r2, #8
 800f0f4:	305c      	adds	r0, #92	@ 0x5c
 800f0f6:	f000 fa1b 	bl	800f530 <memset>
 800f0fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f130 <std+0x58>)
 800f0fc:	6263      	str	r3, [r4, #36]	@ 0x24
 800f0fe:	4b0d      	ldr	r3, [pc, #52]	@ (800f134 <std+0x5c>)
 800f100:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f102:	4b0d      	ldr	r3, [pc, #52]	@ (800f138 <std+0x60>)
 800f104:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f106:	4b0d      	ldr	r3, [pc, #52]	@ (800f13c <std+0x64>)
 800f108:	6323      	str	r3, [r4, #48]	@ 0x30
 800f10a:	4b0d      	ldr	r3, [pc, #52]	@ (800f140 <std+0x68>)
 800f10c:	6224      	str	r4, [r4, #32]
 800f10e:	429c      	cmp	r4, r3
 800f110:	d006      	beq.n	800f120 <std+0x48>
 800f112:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f116:	4294      	cmp	r4, r2
 800f118:	d002      	beq.n	800f120 <std+0x48>
 800f11a:	33d0      	adds	r3, #208	@ 0xd0
 800f11c:	429c      	cmp	r4, r3
 800f11e:	d105      	bne.n	800f12c <std+0x54>
 800f120:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f128:	f000 baa0 	b.w	800f66c <__retarget_lock_init_recursive>
 800f12c:	bd10      	pop	{r4, pc}
 800f12e:	bf00      	nop
 800f130:	0800f381 	.word	0x0800f381
 800f134:	0800f3a3 	.word	0x0800f3a3
 800f138:	0800f3db 	.word	0x0800f3db
 800f13c:	0800f3ff 	.word	0x0800f3ff
 800f140:	20000d44 	.word	0x20000d44

0800f144 <stdio_exit_handler>:
 800f144:	4a02      	ldr	r2, [pc, #8]	@ (800f150 <stdio_exit_handler+0xc>)
 800f146:	4903      	ldr	r1, [pc, #12]	@ (800f154 <stdio_exit_handler+0x10>)
 800f148:	4803      	ldr	r0, [pc, #12]	@ (800f158 <stdio_exit_handler+0x14>)
 800f14a:	f000 b869 	b.w	800f220 <_fwalk_sglue>
 800f14e:	bf00      	nop
 800f150:	2000002c 	.word	0x2000002c
 800f154:	0800fddd 	.word	0x0800fddd
 800f158:	2000003c 	.word	0x2000003c

0800f15c <cleanup_stdio>:
 800f15c:	6841      	ldr	r1, [r0, #4]
 800f15e:	4b0c      	ldr	r3, [pc, #48]	@ (800f190 <cleanup_stdio+0x34>)
 800f160:	4299      	cmp	r1, r3
 800f162:	b510      	push	{r4, lr}
 800f164:	4604      	mov	r4, r0
 800f166:	d001      	beq.n	800f16c <cleanup_stdio+0x10>
 800f168:	f000 fe38 	bl	800fddc <_fflush_r>
 800f16c:	68a1      	ldr	r1, [r4, #8]
 800f16e:	4b09      	ldr	r3, [pc, #36]	@ (800f194 <cleanup_stdio+0x38>)
 800f170:	4299      	cmp	r1, r3
 800f172:	d002      	beq.n	800f17a <cleanup_stdio+0x1e>
 800f174:	4620      	mov	r0, r4
 800f176:	f000 fe31 	bl	800fddc <_fflush_r>
 800f17a:	68e1      	ldr	r1, [r4, #12]
 800f17c:	4b06      	ldr	r3, [pc, #24]	@ (800f198 <cleanup_stdio+0x3c>)
 800f17e:	4299      	cmp	r1, r3
 800f180:	d004      	beq.n	800f18c <cleanup_stdio+0x30>
 800f182:	4620      	mov	r0, r4
 800f184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f188:	f000 be28 	b.w	800fddc <_fflush_r>
 800f18c:	bd10      	pop	{r4, pc}
 800f18e:	bf00      	nop
 800f190:	20000d44 	.word	0x20000d44
 800f194:	20000dac 	.word	0x20000dac
 800f198:	20000e14 	.word	0x20000e14

0800f19c <global_stdio_init.part.0>:
 800f19c:	b510      	push	{r4, lr}
 800f19e:	4b0b      	ldr	r3, [pc, #44]	@ (800f1cc <global_stdio_init.part.0+0x30>)
 800f1a0:	4c0b      	ldr	r4, [pc, #44]	@ (800f1d0 <global_stdio_init.part.0+0x34>)
 800f1a2:	4a0c      	ldr	r2, [pc, #48]	@ (800f1d4 <global_stdio_init.part.0+0x38>)
 800f1a4:	601a      	str	r2, [r3, #0]
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	2104      	movs	r1, #4
 800f1ac:	f7ff ff94 	bl	800f0d8 <std>
 800f1b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	2109      	movs	r1, #9
 800f1b8:	f7ff ff8e 	bl	800f0d8 <std>
 800f1bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f1c0:	2202      	movs	r2, #2
 800f1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1c6:	2112      	movs	r1, #18
 800f1c8:	f7ff bf86 	b.w	800f0d8 <std>
 800f1cc:	20000e7c 	.word	0x20000e7c
 800f1d0:	20000d44 	.word	0x20000d44
 800f1d4:	0800f145 	.word	0x0800f145

0800f1d8 <__sfp_lock_acquire>:
 800f1d8:	4801      	ldr	r0, [pc, #4]	@ (800f1e0 <__sfp_lock_acquire+0x8>)
 800f1da:	f000 ba48 	b.w	800f66e <__retarget_lock_acquire_recursive>
 800f1de:	bf00      	nop
 800f1e0:	20000e85 	.word	0x20000e85

0800f1e4 <__sfp_lock_release>:
 800f1e4:	4801      	ldr	r0, [pc, #4]	@ (800f1ec <__sfp_lock_release+0x8>)
 800f1e6:	f000 ba43 	b.w	800f670 <__retarget_lock_release_recursive>
 800f1ea:	bf00      	nop
 800f1ec:	20000e85 	.word	0x20000e85

0800f1f0 <__sinit>:
 800f1f0:	b510      	push	{r4, lr}
 800f1f2:	4604      	mov	r4, r0
 800f1f4:	f7ff fff0 	bl	800f1d8 <__sfp_lock_acquire>
 800f1f8:	6a23      	ldr	r3, [r4, #32]
 800f1fa:	b11b      	cbz	r3, 800f204 <__sinit+0x14>
 800f1fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f200:	f7ff bff0 	b.w	800f1e4 <__sfp_lock_release>
 800f204:	4b04      	ldr	r3, [pc, #16]	@ (800f218 <__sinit+0x28>)
 800f206:	6223      	str	r3, [r4, #32]
 800f208:	4b04      	ldr	r3, [pc, #16]	@ (800f21c <__sinit+0x2c>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1f5      	bne.n	800f1fc <__sinit+0xc>
 800f210:	f7ff ffc4 	bl	800f19c <global_stdio_init.part.0>
 800f214:	e7f2      	b.n	800f1fc <__sinit+0xc>
 800f216:	bf00      	nop
 800f218:	0800f15d 	.word	0x0800f15d
 800f21c:	20000e7c 	.word	0x20000e7c

0800f220 <_fwalk_sglue>:
 800f220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f224:	4607      	mov	r7, r0
 800f226:	4688      	mov	r8, r1
 800f228:	4614      	mov	r4, r2
 800f22a:	2600      	movs	r6, #0
 800f22c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f230:	f1b9 0901 	subs.w	r9, r9, #1
 800f234:	d505      	bpl.n	800f242 <_fwalk_sglue+0x22>
 800f236:	6824      	ldr	r4, [r4, #0]
 800f238:	2c00      	cmp	r4, #0
 800f23a:	d1f7      	bne.n	800f22c <_fwalk_sglue+0xc>
 800f23c:	4630      	mov	r0, r6
 800f23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f242:	89ab      	ldrh	r3, [r5, #12]
 800f244:	2b01      	cmp	r3, #1
 800f246:	d907      	bls.n	800f258 <_fwalk_sglue+0x38>
 800f248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f24c:	3301      	adds	r3, #1
 800f24e:	d003      	beq.n	800f258 <_fwalk_sglue+0x38>
 800f250:	4629      	mov	r1, r5
 800f252:	4638      	mov	r0, r7
 800f254:	47c0      	blx	r8
 800f256:	4306      	orrs	r6, r0
 800f258:	3568      	adds	r5, #104	@ 0x68
 800f25a:	e7e9      	b.n	800f230 <_fwalk_sglue+0x10>

0800f25c <_puts_r>:
 800f25c:	6a03      	ldr	r3, [r0, #32]
 800f25e:	b570      	push	{r4, r5, r6, lr}
 800f260:	6884      	ldr	r4, [r0, #8]
 800f262:	4605      	mov	r5, r0
 800f264:	460e      	mov	r6, r1
 800f266:	b90b      	cbnz	r3, 800f26c <_puts_r+0x10>
 800f268:	f7ff ffc2 	bl	800f1f0 <__sinit>
 800f26c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f26e:	07db      	lsls	r3, r3, #31
 800f270:	d405      	bmi.n	800f27e <_puts_r+0x22>
 800f272:	89a3      	ldrh	r3, [r4, #12]
 800f274:	0598      	lsls	r0, r3, #22
 800f276:	d402      	bmi.n	800f27e <_puts_r+0x22>
 800f278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f27a:	f000 f9f8 	bl	800f66e <__retarget_lock_acquire_recursive>
 800f27e:	89a3      	ldrh	r3, [r4, #12]
 800f280:	0719      	lsls	r1, r3, #28
 800f282:	d502      	bpl.n	800f28a <_puts_r+0x2e>
 800f284:	6923      	ldr	r3, [r4, #16]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d135      	bne.n	800f2f6 <_puts_r+0x9a>
 800f28a:	4621      	mov	r1, r4
 800f28c:	4628      	mov	r0, r5
 800f28e:	f000 f8f9 	bl	800f484 <__swsetup_r>
 800f292:	b380      	cbz	r0, 800f2f6 <_puts_r+0x9a>
 800f294:	f04f 35ff 	mov.w	r5, #4294967295
 800f298:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f29a:	07da      	lsls	r2, r3, #31
 800f29c:	d405      	bmi.n	800f2aa <_puts_r+0x4e>
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	059b      	lsls	r3, r3, #22
 800f2a2:	d402      	bmi.n	800f2aa <_puts_r+0x4e>
 800f2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2a6:	f000 f9e3 	bl	800f670 <__retarget_lock_release_recursive>
 800f2aa:	4628      	mov	r0, r5
 800f2ac:	bd70      	pop	{r4, r5, r6, pc}
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	da04      	bge.n	800f2bc <_puts_r+0x60>
 800f2b2:	69a2      	ldr	r2, [r4, #24]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	dc17      	bgt.n	800f2e8 <_puts_r+0x8c>
 800f2b8:	290a      	cmp	r1, #10
 800f2ba:	d015      	beq.n	800f2e8 <_puts_r+0x8c>
 800f2bc:	6823      	ldr	r3, [r4, #0]
 800f2be:	1c5a      	adds	r2, r3, #1
 800f2c0:	6022      	str	r2, [r4, #0]
 800f2c2:	7019      	strb	r1, [r3, #0]
 800f2c4:	68a3      	ldr	r3, [r4, #8]
 800f2c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	60a3      	str	r3, [r4, #8]
 800f2ce:	2900      	cmp	r1, #0
 800f2d0:	d1ed      	bne.n	800f2ae <_puts_r+0x52>
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	da11      	bge.n	800f2fa <_puts_r+0x9e>
 800f2d6:	4622      	mov	r2, r4
 800f2d8:	210a      	movs	r1, #10
 800f2da:	4628      	mov	r0, r5
 800f2dc:	f000 f893 	bl	800f406 <__swbuf_r>
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	d0d7      	beq.n	800f294 <_puts_r+0x38>
 800f2e4:	250a      	movs	r5, #10
 800f2e6:	e7d7      	b.n	800f298 <_puts_r+0x3c>
 800f2e8:	4622      	mov	r2, r4
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	f000 f88b 	bl	800f406 <__swbuf_r>
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	d1e7      	bne.n	800f2c4 <_puts_r+0x68>
 800f2f4:	e7ce      	b.n	800f294 <_puts_r+0x38>
 800f2f6:	3e01      	subs	r6, #1
 800f2f8:	e7e4      	b.n	800f2c4 <_puts_r+0x68>
 800f2fa:	6823      	ldr	r3, [r4, #0]
 800f2fc:	1c5a      	adds	r2, r3, #1
 800f2fe:	6022      	str	r2, [r4, #0]
 800f300:	220a      	movs	r2, #10
 800f302:	701a      	strb	r2, [r3, #0]
 800f304:	e7ee      	b.n	800f2e4 <_puts_r+0x88>
	...

0800f308 <puts>:
 800f308:	4b02      	ldr	r3, [pc, #8]	@ (800f314 <puts+0xc>)
 800f30a:	4601      	mov	r1, r0
 800f30c:	6818      	ldr	r0, [r3, #0]
 800f30e:	f7ff bfa5 	b.w	800f25c <_puts_r>
 800f312:	bf00      	nop
 800f314:	20000038 	.word	0x20000038

0800f318 <sniprintf>:
 800f318:	b40c      	push	{r2, r3}
 800f31a:	b530      	push	{r4, r5, lr}
 800f31c:	4b17      	ldr	r3, [pc, #92]	@ (800f37c <sniprintf+0x64>)
 800f31e:	1e0c      	subs	r4, r1, #0
 800f320:	681d      	ldr	r5, [r3, #0]
 800f322:	b09d      	sub	sp, #116	@ 0x74
 800f324:	da08      	bge.n	800f338 <sniprintf+0x20>
 800f326:	238b      	movs	r3, #139	@ 0x8b
 800f328:	602b      	str	r3, [r5, #0]
 800f32a:	f04f 30ff 	mov.w	r0, #4294967295
 800f32e:	b01d      	add	sp, #116	@ 0x74
 800f330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f334:	b002      	add	sp, #8
 800f336:	4770      	bx	lr
 800f338:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f33c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f340:	bf14      	ite	ne
 800f342:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f346:	4623      	moveq	r3, r4
 800f348:	9304      	str	r3, [sp, #16]
 800f34a:	9307      	str	r3, [sp, #28]
 800f34c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f350:	9002      	str	r0, [sp, #8]
 800f352:	9006      	str	r0, [sp, #24]
 800f354:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f358:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f35a:	ab21      	add	r3, sp, #132	@ 0x84
 800f35c:	a902      	add	r1, sp, #8
 800f35e:	4628      	mov	r0, r5
 800f360:	9301      	str	r3, [sp, #4]
 800f362:	f000 fa2d 	bl	800f7c0 <_svfiprintf_r>
 800f366:	1c43      	adds	r3, r0, #1
 800f368:	bfbc      	itt	lt
 800f36a:	238b      	movlt	r3, #139	@ 0x8b
 800f36c:	602b      	strlt	r3, [r5, #0]
 800f36e:	2c00      	cmp	r4, #0
 800f370:	d0dd      	beq.n	800f32e <sniprintf+0x16>
 800f372:	9b02      	ldr	r3, [sp, #8]
 800f374:	2200      	movs	r2, #0
 800f376:	701a      	strb	r2, [r3, #0]
 800f378:	e7d9      	b.n	800f32e <sniprintf+0x16>
 800f37a:	bf00      	nop
 800f37c:	20000038 	.word	0x20000038

0800f380 <__sread>:
 800f380:	b510      	push	{r4, lr}
 800f382:	460c      	mov	r4, r1
 800f384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f388:	f000 f912 	bl	800f5b0 <_read_r>
 800f38c:	2800      	cmp	r0, #0
 800f38e:	bfab      	itete	ge
 800f390:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f392:	89a3      	ldrhlt	r3, [r4, #12]
 800f394:	181b      	addge	r3, r3, r0
 800f396:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f39a:	bfac      	ite	ge
 800f39c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f39e:	81a3      	strhlt	r3, [r4, #12]
 800f3a0:	bd10      	pop	{r4, pc}

0800f3a2 <__swrite>:
 800f3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3a6:	461f      	mov	r7, r3
 800f3a8:	898b      	ldrh	r3, [r1, #12]
 800f3aa:	05db      	lsls	r3, r3, #23
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	460c      	mov	r4, r1
 800f3b0:	4616      	mov	r6, r2
 800f3b2:	d505      	bpl.n	800f3c0 <__swrite+0x1e>
 800f3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f000 f8e6 	bl	800f58c <_lseek_r>
 800f3c0:	89a3      	ldrh	r3, [r4, #12]
 800f3c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f3ca:	81a3      	strh	r3, [r4, #12]
 800f3cc:	4632      	mov	r2, r6
 800f3ce:	463b      	mov	r3, r7
 800f3d0:	4628      	mov	r0, r5
 800f3d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d6:	f000 b90d 	b.w	800f5f4 <_write_r>

0800f3da <__sseek>:
 800f3da:	b510      	push	{r4, lr}
 800f3dc:	460c      	mov	r4, r1
 800f3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3e2:	f000 f8d3 	bl	800f58c <_lseek_r>
 800f3e6:	1c43      	adds	r3, r0, #1
 800f3e8:	89a3      	ldrh	r3, [r4, #12]
 800f3ea:	bf15      	itete	ne
 800f3ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f3ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f3f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f3f6:	81a3      	strheq	r3, [r4, #12]
 800f3f8:	bf18      	it	ne
 800f3fa:	81a3      	strhne	r3, [r4, #12]
 800f3fc:	bd10      	pop	{r4, pc}

0800f3fe <__sclose>:
 800f3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f402:	f000 b8b3 	b.w	800f56c <_close_r>

0800f406 <__swbuf_r>:
 800f406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f408:	460e      	mov	r6, r1
 800f40a:	4614      	mov	r4, r2
 800f40c:	4605      	mov	r5, r0
 800f40e:	b118      	cbz	r0, 800f418 <__swbuf_r+0x12>
 800f410:	6a03      	ldr	r3, [r0, #32]
 800f412:	b90b      	cbnz	r3, 800f418 <__swbuf_r+0x12>
 800f414:	f7ff feec 	bl	800f1f0 <__sinit>
 800f418:	69a3      	ldr	r3, [r4, #24]
 800f41a:	60a3      	str	r3, [r4, #8]
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	071a      	lsls	r2, r3, #28
 800f420:	d501      	bpl.n	800f426 <__swbuf_r+0x20>
 800f422:	6923      	ldr	r3, [r4, #16]
 800f424:	b943      	cbnz	r3, 800f438 <__swbuf_r+0x32>
 800f426:	4621      	mov	r1, r4
 800f428:	4628      	mov	r0, r5
 800f42a:	f000 f82b 	bl	800f484 <__swsetup_r>
 800f42e:	b118      	cbz	r0, 800f438 <__swbuf_r+0x32>
 800f430:	f04f 37ff 	mov.w	r7, #4294967295
 800f434:	4638      	mov	r0, r7
 800f436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f438:	6823      	ldr	r3, [r4, #0]
 800f43a:	6922      	ldr	r2, [r4, #16]
 800f43c:	1a98      	subs	r0, r3, r2
 800f43e:	6963      	ldr	r3, [r4, #20]
 800f440:	b2f6      	uxtb	r6, r6
 800f442:	4283      	cmp	r3, r0
 800f444:	4637      	mov	r7, r6
 800f446:	dc05      	bgt.n	800f454 <__swbuf_r+0x4e>
 800f448:	4621      	mov	r1, r4
 800f44a:	4628      	mov	r0, r5
 800f44c:	f000 fcc6 	bl	800fddc <_fflush_r>
 800f450:	2800      	cmp	r0, #0
 800f452:	d1ed      	bne.n	800f430 <__swbuf_r+0x2a>
 800f454:	68a3      	ldr	r3, [r4, #8]
 800f456:	3b01      	subs	r3, #1
 800f458:	60a3      	str	r3, [r4, #8]
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	1c5a      	adds	r2, r3, #1
 800f45e:	6022      	str	r2, [r4, #0]
 800f460:	701e      	strb	r6, [r3, #0]
 800f462:	6962      	ldr	r2, [r4, #20]
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	429a      	cmp	r2, r3
 800f468:	d004      	beq.n	800f474 <__swbuf_r+0x6e>
 800f46a:	89a3      	ldrh	r3, [r4, #12]
 800f46c:	07db      	lsls	r3, r3, #31
 800f46e:	d5e1      	bpl.n	800f434 <__swbuf_r+0x2e>
 800f470:	2e0a      	cmp	r6, #10
 800f472:	d1df      	bne.n	800f434 <__swbuf_r+0x2e>
 800f474:	4621      	mov	r1, r4
 800f476:	4628      	mov	r0, r5
 800f478:	f000 fcb0 	bl	800fddc <_fflush_r>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d0d9      	beq.n	800f434 <__swbuf_r+0x2e>
 800f480:	e7d6      	b.n	800f430 <__swbuf_r+0x2a>
	...

0800f484 <__swsetup_r>:
 800f484:	b538      	push	{r3, r4, r5, lr}
 800f486:	4b29      	ldr	r3, [pc, #164]	@ (800f52c <__swsetup_r+0xa8>)
 800f488:	4605      	mov	r5, r0
 800f48a:	6818      	ldr	r0, [r3, #0]
 800f48c:	460c      	mov	r4, r1
 800f48e:	b118      	cbz	r0, 800f498 <__swsetup_r+0x14>
 800f490:	6a03      	ldr	r3, [r0, #32]
 800f492:	b90b      	cbnz	r3, 800f498 <__swsetup_r+0x14>
 800f494:	f7ff feac 	bl	800f1f0 <__sinit>
 800f498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f49c:	0719      	lsls	r1, r3, #28
 800f49e:	d422      	bmi.n	800f4e6 <__swsetup_r+0x62>
 800f4a0:	06da      	lsls	r2, r3, #27
 800f4a2:	d407      	bmi.n	800f4b4 <__swsetup_r+0x30>
 800f4a4:	2209      	movs	r2, #9
 800f4a6:	602a      	str	r2, [r5, #0]
 800f4a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f4ac:	81a3      	strh	r3, [r4, #12]
 800f4ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f4b2:	e033      	b.n	800f51c <__swsetup_r+0x98>
 800f4b4:	0758      	lsls	r0, r3, #29
 800f4b6:	d512      	bpl.n	800f4de <__swsetup_r+0x5a>
 800f4b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4ba:	b141      	cbz	r1, 800f4ce <__swsetup_r+0x4a>
 800f4bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f4c0:	4299      	cmp	r1, r3
 800f4c2:	d002      	beq.n	800f4ca <__swsetup_r+0x46>
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	f000 f8d5 	bl	800f674 <_free_r>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f4ce:	89a3      	ldrh	r3, [r4, #12]
 800f4d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f4d4:	81a3      	strh	r3, [r4, #12]
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	6063      	str	r3, [r4, #4]
 800f4da:	6923      	ldr	r3, [r4, #16]
 800f4dc:	6023      	str	r3, [r4, #0]
 800f4de:	89a3      	ldrh	r3, [r4, #12]
 800f4e0:	f043 0308 	orr.w	r3, r3, #8
 800f4e4:	81a3      	strh	r3, [r4, #12]
 800f4e6:	6923      	ldr	r3, [r4, #16]
 800f4e8:	b94b      	cbnz	r3, 800f4fe <__swsetup_r+0x7a>
 800f4ea:	89a3      	ldrh	r3, [r4, #12]
 800f4ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f4f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f4f4:	d003      	beq.n	800f4fe <__swsetup_r+0x7a>
 800f4f6:	4621      	mov	r1, r4
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	f000 fcbd 	bl	800fe78 <__smakebuf_r>
 800f4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f502:	f013 0201 	ands.w	r2, r3, #1
 800f506:	d00a      	beq.n	800f51e <__swsetup_r+0x9a>
 800f508:	2200      	movs	r2, #0
 800f50a:	60a2      	str	r2, [r4, #8]
 800f50c:	6962      	ldr	r2, [r4, #20]
 800f50e:	4252      	negs	r2, r2
 800f510:	61a2      	str	r2, [r4, #24]
 800f512:	6922      	ldr	r2, [r4, #16]
 800f514:	b942      	cbnz	r2, 800f528 <__swsetup_r+0xa4>
 800f516:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f51a:	d1c5      	bne.n	800f4a8 <__swsetup_r+0x24>
 800f51c:	bd38      	pop	{r3, r4, r5, pc}
 800f51e:	0799      	lsls	r1, r3, #30
 800f520:	bf58      	it	pl
 800f522:	6962      	ldrpl	r2, [r4, #20]
 800f524:	60a2      	str	r2, [r4, #8]
 800f526:	e7f4      	b.n	800f512 <__swsetup_r+0x8e>
 800f528:	2000      	movs	r0, #0
 800f52a:	e7f7      	b.n	800f51c <__swsetup_r+0x98>
 800f52c:	20000038 	.word	0x20000038

0800f530 <memset>:
 800f530:	4402      	add	r2, r0
 800f532:	4603      	mov	r3, r0
 800f534:	4293      	cmp	r3, r2
 800f536:	d100      	bne.n	800f53a <memset+0xa>
 800f538:	4770      	bx	lr
 800f53a:	f803 1b01 	strb.w	r1, [r3], #1
 800f53e:	e7f9      	b.n	800f534 <memset+0x4>

0800f540 <strstr>:
 800f540:	780a      	ldrb	r2, [r1, #0]
 800f542:	b570      	push	{r4, r5, r6, lr}
 800f544:	b96a      	cbnz	r2, 800f562 <strstr+0x22>
 800f546:	bd70      	pop	{r4, r5, r6, pc}
 800f548:	429a      	cmp	r2, r3
 800f54a:	d109      	bne.n	800f560 <strstr+0x20>
 800f54c:	460c      	mov	r4, r1
 800f54e:	4605      	mov	r5, r0
 800f550:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f554:	2b00      	cmp	r3, #0
 800f556:	d0f6      	beq.n	800f546 <strstr+0x6>
 800f558:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f55c:	429e      	cmp	r6, r3
 800f55e:	d0f7      	beq.n	800f550 <strstr+0x10>
 800f560:	3001      	adds	r0, #1
 800f562:	7803      	ldrb	r3, [r0, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d1ef      	bne.n	800f548 <strstr+0x8>
 800f568:	4618      	mov	r0, r3
 800f56a:	e7ec      	b.n	800f546 <strstr+0x6>

0800f56c <_close_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d06      	ldr	r5, [pc, #24]	@ (800f588 <_close_r+0x1c>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	602b      	str	r3, [r5, #0]
 800f578:	f7f2 fcf9 	bl	8001f6e <_close>
 800f57c:	1c43      	adds	r3, r0, #1
 800f57e:	d102      	bne.n	800f586 <_close_r+0x1a>
 800f580:	682b      	ldr	r3, [r5, #0]
 800f582:	b103      	cbz	r3, 800f586 <_close_r+0x1a>
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	bd38      	pop	{r3, r4, r5, pc}
 800f588:	20000e80 	.word	0x20000e80

0800f58c <_lseek_r>:
 800f58c:	b538      	push	{r3, r4, r5, lr}
 800f58e:	4d07      	ldr	r5, [pc, #28]	@ (800f5ac <_lseek_r+0x20>)
 800f590:	4604      	mov	r4, r0
 800f592:	4608      	mov	r0, r1
 800f594:	4611      	mov	r1, r2
 800f596:	2200      	movs	r2, #0
 800f598:	602a      	str	r2, [r5, #0]
 800f59a:	461a      	mov	r2, r3
 800f59c:	f7f2 fd0e 	bl	8001fbc <_lseek>
 800f5a0:	1c43      	adds	r3, r0, #1
 800f5a2:	d102      	bne.n	800f5aa <_lseek_r+0x1e>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	b103      	cbz	r3, 800f5aa <_lseek_r+0x1e>
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	20000e80 	.word	0x20000e80

0800f5b0 <_read_r>:
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	4d07      	ldr	r5, [pc, #28]	@ (800f5d0 <_read_r+0x20>)
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	4608      	mov	r0, r1
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	602a      	str	r2, [r5, #0]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	f7f2 fc9c 	bl	8001efc <_read>
 800f5c4:	1c43      	adds	r3, r0, #1
 800f5c6:	d102      	bne.n	800f5ce <_read_r+0x1e>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	b103      	cbz	r3, 800f5ce <_read_r+0x1e>
 800f5cc:	6023      	str	r3, [r4, #0]
 800f5ce:	bd38      	pop	{r3, r4, r5, pc}
 800f5d0:	20000e80 	.word	0x20000e80

0800f5d4 <_sbrk_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d06      	ldr	r5, [pc, #24]	@ (800f5f0 <_sbrk_r+0x1c>)
 800f5d8:	2300      	movs	r3, #0
 800f5da:	4604      	mov	r4, r0
 800f5dc:	4608      	mov	r0, r1
 800f5de:	602b      	str	r3, [r5, #0]
 800f5e0:	f7f2 fcfa 	bl	8001fd8 <_sbrk>
 800f5e4:	1c43      	adds	r3, r0, #1
 800f5e6:	d102      	bne.n	800f5ee <_sbrk_r+0x1a>
 800f5e8:	682b      	ldr	r3, [r5, #0]
 800f5ea:	b103      	cbz	r3, 800f5ee <_sbrk_r+0x1a>
 800f5ec:	6023      	str	r3, [r4, #0]
 800f5ee:	bd38      	pop	{r3, r4, r5, pc}
 800f5f0:	20000e80 	.word	0x20000e80

0800f5f4 <_write_r>:
 800f5f4:	b538      	push	{r3, r4, r5, lr}
 800f5f6:	4d07      	ldr	r5, [pc, #28]	@ (800f614 <_write_r+0x20>)
 800f5f8:	4604      	mov	r4, r0
 800f5fa:	4608      	mov	r0, r1
 800f5fc:	4611      	mov	r1, r2
 800f5fe:	2200      	movs	r2, #0
 800f600:	602a      	str	r2, [r5, #0]
 800f602:	461a      	mov	r2, r3
 800f604:	f7f2 fc97 	bl	8001f36 <_write>
 800f608:	1c43      	adds	r3, r0, #1
 800f60a:	d102      	bne.n	800f612 <_write_r+0x1e>
 800f60c:	682b      	ldr	r3, [r5, #0]
 800f60e:	b103      	cbz	r3, 800f612 <_write_r+0x1e>
 800f610:	6023      	str	r3, [r4, #0]
 800f612:	bd38      	pop	{r3, r4, r5, pc}
 800f614:	20000e80 	.word	0x20000e80

0800f618 <__errno>:
 800f618:	4b01      	ldr	r3, [pc, #4]	@ (800f620 <__errno+0x8>)
 800f61a:	6818      	ldr	r0, [r3, #0]
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	20000038 	.word	0x20000038

0800f624 <__libc_init_array>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	4d0d      	ldr	r5, [pc, #52]	@ (800f65c <__libc_init_array+0x38>)
 800f628:	4c0d      	ldr	r4, [pc, #52]	@ (800f660 <__libc_init_array+0x3c>)
 800f62a:	1b64      	subs	r4, r4, r5
 800f62c:	10a4      	asrs	r4, r4, #2
 800f62e:	2600      	movs	r6, #0
 800f630:	42a6      	cmp	r6, r4
 800f632:	d109      	bne.n	800f648 <__libc_init_array+0x24>
 800f634:	4d0b      	ldr	r5, [pc, #44]	@ (800f664 <__libc_init_array+0x40>)
 800f636:	4c0c      	ldr	r4, [pc, #48]	@ (800f668 <__libc_init_array+0x44>)
 800f638:	f000 fcda 	bl	800fff0 <_init>
 800f63c:	1b64      	subs	r4, r4, r5
 800f63e:	10a4      	asrs	r4, r4, #2
 800f640:	2600      	movs	r6, #0
 800f642:	42a6      	cmp	r6, r4
 800f644:	d105      	bne.n	800f652 <__libc_init_array+0x2e>
 800f646:	bd70      	pop	{r4, r5, r6, pc}
 800f648:	f855 3b04 	ldr.w	r3, [r5], #4
 800f64c:	4798      	blx	r3
 800f64e:	3601      	adds	r6, #1
 800f650:	e7ee      	b.n	800f630 <__libc_init_array+0xc>
 800f652:	f855 3b04 	ldr.w	r3, [r5], #4
 800f656:	4798      	blx	r3
 800f658:	3601      	adds	r6, #1
 800f65a:	e7f2      	b.n	800f642 <__libc_init_array+0x1e>
 800f65c:	080101f0 	.word	0x080101f0
 800f660:	080101f0 	.word	0x080101f0
 800f664:	080101f0 	.word	0x080101f0
 800f668:	080101f4 	.word	0x080101f4

0800f66c <__retarget_lock_init_recursive>:
 800f66c:	4770      	bx	lr

0800f66e <__retarget_lock_acquire_recursive>:
 800f66e:	4770      	bx	lr

0800f670 <__retarget_lock_release_recursive>:
 800f670:	4770      	bx	lr
	...

0800f674 <_free_r>:
 800f674:	b538      	push	{r3, r4, r5, lr}
 800f676:	4605      	mov	r5, r0
 800f678:	2900      	cmp	r1, #0
 800f67a:	d041      	beq.n	800f700 <_free_r+0x8c>
 800f67c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f680:	1f0c      	subs	r4, r1, #4
 800f682:	2b00      	cmp	r3, #0
 800f684:	bfb8      	it	lt
 800f686:	18e4      	addlt	r4, r4, r3
 800f688:	f7ff fd1a 	bl	800f0c0 <__malloc_lock>
 800f68c:	4a1d      	ldr	r2, [pc, #116]	@ (800f704 <_free_r+0x90>)
 800f68e:	6813      	ldr	r3, [r2, #0]
 800f690:	b933      	cbnz	r3, 800f6a0 <_free_r+0x2c>
 800f692:	6063      	str	r3, [r4, #4]
 800f694:	6014      	str	r4, [r2, #0]
 800f696:	4628      	mov	r0, r5
 800f698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f69c:	f7ff bd16 	b.w	800f0cc <__malloc_unlock>
 800f6a0:	42a3      	cmp	r3, r4
 800f6a2:	d908      	bls.n	800f6b6 <_free_r+0x42>
 800f6a4:	6820      	ldr	r0, [r4, #0]
 800f6a6:	1821      	adds	r1, r4, r0
 800f6a8:	428b      	cmp	r3, r1
 800f6aa:	bf01      	itttt	eq
 800f6ac:	6819      	ldreq	r1, [r3, #0]
 800f6ae:	685b      	ldreq	r3, [r3, #4]
 800f6b0:	1809      	addeq	r1, r1, r0
 800f6b2:	6021      	streq	r1, [r4, #0]
 800f6b4:	e7ed      	b.n	800f692 <_free_r+0x1e>
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	b10b      	cbz	r3, 800f6c0 <_free_r+0x4c>
 800f6bc:	42a3      	cmp	r3, r4
 800f6be:	d9fa      	bls.n	800f6b6 <_free_r+0x42>
 800f6c0:	6811      	ldr	r1, [r2, #0]
 800f6c2:	1850      	adds	r0, r2, r1
 800f6c4:	42a0      	cmp	r0, r4
 800f6c6:	d10b      	bne.n	800f6e0 <_free_r+0x6c>
 800f6c8:	6820      	ldr	r0, [r4, #0]
 800f6ca:	4401      	add	r1, r0
 800f6cc:	1850      	adds	r0, r2, r1
 800f6ce:	4283      	cmp	r3, r0
 800f6d0:	6011      	str	r1, [r2, #0]
 800f6d2:	d1e0      	bne.n	800f696 <_free_r+0x22>
 800f6d4:	6818      	ldr	r0, [r3, #0]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	6053      	str	r3, [r2, #4]
 800f6da:	4408      	add	r0, r1
 800f6dc:	6010      	str	r0, [r2, #0]
 800f6de:	e7da      	b.n	800f696 <_free_r+0x22>
 800f6e0:	d902      	bls.n	800f6e8 <_free_r+0x74>
 800f6e2:	230c      	movs	r3, #12
 800f6e4:	602b      	str	r3, [r5, #0]
 800f6e6:	e7d6      	b.n	800f696 <_free_r+0x22>
 800f6e8:	6820      	ldr	r0, [r4, #0]
 800f6ea:	1821      	adds	r1, r4, r0
 800f6ec:	428b      	cmp	r3, r1
 800f6ee:	bf04      	itt	eq
 800f6f0:	6819      	ldreq	r1, [r3, #0]
 800f6f2:	685b      	ldreq	r3, [r3, #4]
 800f6f4:	6063      	str	r3, [r4, #4]
 800f6f6:	bf04      	itt	eq
 800f6f8:	1809      	addeq	r1, r1, r0
 800f6fa:	6021      	streq	r1, [r4, #0]
 800f6fc:	6054      	str	r4, [r2, #4]
 800f6fe:	e7ca      	b.n	800f696 <_free_r+0x22>
 800f700:	bd38      	pop	{r3, r4, r5, pc}
 800f702:	bf00      	nop
 800f704:	20000d40 	.word	0x20000d40

0800f708 <__ssputs_r>:
 800f708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f70c:	688e      	ldr	r6, [r1, #8]
 800f70e:	461f      	mov	r7, r3
 800f710:	42be      	cmp	r6, r7
 800f712:	680b      	ldr	r3, [r1, #0]
 800f714:	4682      	mov	sl, r0
 800f716:	460c      	mov	r4, r1
 800f718:	4690      	mov	r8, r2
 800f71a:	d82d      	bhi.n	800f778 <__ssputs_r+0x70>
 800f71c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f720:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f724:	d026      	beq.n	800f774 <__ssputs_r+0x6c>
 800f726:	6965      	ldr	r5, [r4, #20]
 800f728:	6909      	ldr	r1, [r1, #16]
 800f72a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f72e:	eba3 0901 	sub.w	r9, r3, r1
 800f732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f736:	1c7b      	adds	r3, r7, #1
 800f738:	444b      	add	r3, r9
 800f73a:	106d      	asrs	r5, r5, #1
 800f73c:	429d      	cmp	r5, r3
 800f73e:	bf38      	it	cc
 800f740:	461d      	movcc	r5, r3
 800f742:	0553      	lsls	r3, r2, #21
 800f744:	d527      	bpl.n	800f796 <__ssputs_r+0x8e>
 800f746:	4629      	mov	r1, r5
 800f748:	f7ff fc3a 	bl	800efc0 <_malloc_r>
 800f74c:	4606      	mov	r6, r0
 800f74e:	b360      	cbz	r0, 800f7aa <__ssputs_r+0xa2>
 800f750:	6921      	ldr	r1, [r4, #16]
 800f752:	464a      	mov	r2, r9
 800f754:	f000 fc08 	bl	800ff68 <memcpy>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f75e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f762:	81a3      	strh	r3, [r4, #12]
 800f764:	6126      	str	r6, [r4, #16]
 800f766:	6165      	str	r5, [r4, #20]
 800f768:	444e      	add	r6, r9
 800f76a:	eba5 0509 	sub.w	r5, r5, r9
 800f76e:	6026      	str	r6, [r4, #0]
 800f770:	60a5      	str	r5, [r4, #8]
 800f772:	463e      	mov	r6, r7
 800f774:	42be      	cmp	r6, r7
 800f776:	d900      	bls.n	800f77a <__ssputs_r+0x72>
 800f778:	463e      	mov	r6, r7
 800f77a:	6820      	ldr	r0, [r4, #0]
 800f77c:	4632      	mov	r2, r6
 800f77e:	4641      	mov	r1, r8
 800f780:	f000 fbb6 	bl	800fef0 <memmove>
 800f784:	68a3      	ldr	r3, [r4, #8]
 800f786:	1b9b      	subs	r3, r3, r6
 800f788:	60a3      	str	r3, [r4, #8]
 800f78a:	6823      	ldr	r3, [r4, #0]
 800f78c:	4433      	add	r3, r6
 800f78e:	6023      	str	r3, [r4, #0]
 800f790:	2000      	movs	r0, #0
 800f792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f796:	462a      	mov	r2, r5
 800f798:	f000 fbf4 	bl	800ff84 <_realloc_r>
 800f79c:	4606      	mov	r6, r0
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d1e0      	bne.n	800f764 <__ssputs_r+0x5c>
 800f7a2:	6921      	ldr	r1, [r4, #16]
 800f7a4:	4650      	mov	r0, sl
 800f7a6:	f7ff ff65 	bl	800f674 <_free_r>
 800f7aa:	230c      	movs	r3, #12
 800f7ac:	f8ca 3000 	str.w	r3, [sl]
 800f7b0:	89a3      	ldrh	r3, [r4, #12]
 800f7b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7b6:	81a3      	strh	r3, [r4, #12]
 800f7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7bc:	e7e9      	b.n	800f792 <__ssputs_r+0x8a>
	...

0800f7c0 <_svfiprintf_r>:
 800f7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c4:	4698      	mov	r8, r3
 800f7c6:	898b      	ldrh	r3, [r1, #12]
 800f7c8:	061b      	lsls	r3, r3, #24
 800f7ca:	b09d      	sub	sp, #116	@ 0x74
 800f7cc:	4607      	mov	r7, r0
 800f7ce:	460d      	mov	r5, r1
 800f7d0:	4614      	mov	r4, r2
 800f7d2:	d510      	bpl.n	800f7f6 <_svfiprintf_r+0x36>
 800f7d4:	690b      	ldr	r3, [r1, #16]
 800f7d6:	b973      	cbnz	r3, 800f7f6 <_svfiprintf_r+0x36>
 800f7d8:	2140      	movs	r1, #64	@ 0x40
 800f7da:	f7ff fbf1 	bl	800efc0 <_malloc_r>
 800f7de:	6028      	str	r0, [r5, #0]
 800f7e0:	6128      	str	r0, [r5, #16]
 800f7e2:	b930      	cbnz	r0, 800f7f2 <_svfiprintf_r+0x32>
 800f7e4:	230c      	movs	r3, #12
 800f7e6:	603b      	str	r3, [r7, #0]
 800f7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ec:	b01d      	add	sp, #116	@ 0x74
 800f7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f2:	2340      	movs	r3, #64	@ 0x40
 800f7f4:	616b      	str	r3, [r5, #20]
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7fa:	2320      	movs	r3, #32
 800f7fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f800:	f8cd 800c 	str.w	r8, [sp, #12]
 800f804:	2330      	movs	r3, #48	@ 0x30
 800f806:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f9a4 <_svfiprintf_r+0x1e4>
 800f80a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f80e:	f04f 0901 	mov.w	r9, #1
 800f812:	4623      	mov	r3, r4
 800f814:	469a      	mov	sl, r3
 800f816:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f81a:	b10a      	cbz	r2, 800f820 <_svfiprintf_r+0x60>
 800f81c:	2a25      	cmp	r2, #37	@ 0x25
 800f81e:	d1f9      	bne.n	800f814 <_svfiprintf_r+0x54>
 800f820:	ebba 0b04 	subs.w	fp, sl, r4
 800f824:	d00b      	beq.n	800f83e <_svfiprintf_r+0x7e>
 800f826:	465b      	mov	r3, fp
 800f828:	4622      	mov	r2, r4
 800f82a:	4629      	mov	r1, r5
 800f82c:	4638      	mov	r0, r7
 800f82e:	f7ff ff6b 	bl	800f708 <__ssputs_r>
 800f832:	3001      	adds	r0, #1
 800f834:	f000 80a7 	beq.w	800f986 <_svfiprintf_r+0x1c6>
 800f838:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f83a:	445a      	add	r2, fp
 800f83c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f83e:	f89a 3000 	ldrb.w	r3, [sl]
 800f842:	2b00      	cmp	r3, #0
 800f844:	f000 809f 	beq.w	800f986 <_svfiprintf_r+0x1c6>
 800f848:	2300      	movs	r3, #0
 800f84a:	f04f 32ff 	mov.w	r2, #4294967295
 800f84e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f852:	f10a 0a01 	add.w	sl, sl, #1
 800f856:	9304      	str	r3, [sp, #16]
 800f858:	9307      	str	r3, [sp, #28]
 800f85a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f85e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f860:	4654      	mov	r4, sl
 800f862:	2205      	movs	r2, #5
 800f864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f868:	484e      	ldr	r0, [pc, #312]	@ (800f9a4 <_svfiprintf_r+0x1e4>)
 800f86a:	f7f0 fcd1 	bl	8000210 <memchr>
 800f86e:	9a04      	ldr	r2, [sp, #16]
 800f870:	b9d8      	cbnz	r0, 800f8aa <_svfiprintf_r+0xea>
 800f872:	06d0      	lsls	r0, r2, #27
 800f874:	bf44      	itt	mi
 800f876:	2320      	movmi	r3, #32
 800f878:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f87c:	0711      	lsls	r1, r2, #28
 800f87e:	bf44      	itt	mi
 800f880:	232b      	movmi	r3, #43	@ 0x2b
 800f882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f886:	f89a 3000 	ldrb.w	r3, [sl]
 800f88a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f88c:	d015      	beq.n	800f8ba <_svfiprintf_r+0xfa>
 800f88e:	9a07      	ldr	r2, [sp, #28]
 800f890:	4654      	mov	r4, sl
 800f892:	2000      	movs	r0, #0
 800f894:	f04f 0c0a 	mov.w	ip, #10
 800f898:	4621      	mov	r1, r4
 800f89a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f89e:	3b30      	subs	r3, #48	@ 0x30
 800f8a0:	2b09      	cmp	r3, #9
 800f8a2:	d94b      	bls.n	800f93c <_svfiprintf_r+0x17c>
 800f8a4:	b1b0      	cbz	r0, 800f8d4 <_svfiprintf_r+0x114>
 800f8a6:	9207      	str	r2, [sp, #28]
 800f8a8:	e014      	b.n	800f8d4 <_svfiprintf_r+0x114>
 800f8aa:	eba0 0308 	sub.w	r3, r0, r8
 800f8ae:	fa09 f303 	lsl.w	r3, r9, r3
 800f8b2:	4313      	orrs	r3, r2
 800f8b4:	9304      	str	r3, [sp, #16]
 800f8b6:	46a2      	mov	sl, r4
 800f8b8:	e7d2      	b.n	800f860 <_svfiprintf_r+0xa0>
 800f8ba:	9b03      	ldr	r3, [sp, #12]
 800f8bc:	1d19      	adds	r1, r3, #4
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	9103      	str	r1, [sp, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	bfbb      	ittet	lt
 800f8c6:	425b      	neglt	r3, r3
 800f8c8:	f042 0202 	orrlt.w	r2, r2, #2
 800f8cc:	9307      	strge	r3, [sp, #28]
 800f8ce:	9307      	strlt	r3, [sp, #28]
 800f8d0:	bfb8      	it	lt
 800f8d2:	9204      	strlt	r2, [sp, #16]
 800f8d4:	7823      	ldrb	r3, [r4, #0]
 800f8d6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8d8:	d10a      	bne.n	800f8f0 <_svfiprintf_r+0x130>
 800f8da:	7863      	ldrb	r3, [r4, #1]
 800f8dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8de:	d132      	bne.n	800f946 <_svfiprintf_r+0x186>
 800f8e0:	9b03      	ldr	r3, [sp, #12]
 800f8e2:	1d1a      	adds	r2, r3, #4
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	9203      	str	r2, [sp, #12]
 800f8e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8ec:	3402      	adds	r4, #2
 800f8ee:	9305      	str	r3, [sp, #20]
 800f8f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f9b4 <_svfiprintf_r+0x1f4>
 800f8f4:	7821      	ldrb	r1, [r4, #0]
 800f8f6:	2203      	movs	r2, #3
 800f8f8:	4650      	mov	r0, sl
 800f8fa:	f7f0 fc89 	bl	8000210 <memchr>
 800f8fe:	b138      	cbz	r0, 800f910 <_svfiprintf_r+0x150>
 800f900:	9b04      	ldr	r3, [sp, #16]
 800f902:	eba0 000a 	sub.w	r0, r0, sl
 800f906:	2240      	movs	r2, #64	@ 0x40
 800f908:	4082      	lsls	r2, r0
 800f90a:	4313      	orrs	r3, r2
 800f90c:	3401      	adds	r4, #1
 800f90e:	9304      	str	r3, [sp, #16]
 800f910:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f914:	4824      	ldr	r0, [pc, #144]	@ (800f9a8 <_svfiprintf_r+0x1e8>)
 800f916:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f91a:	2206      	movs	r2, #6
 800f91c:	f7f0 fc78 	bl	8000210 <memchr>
 800f920:	2800      	cmp	r0, #0
 800f922:	d036      	beq.n	800f992 <_svfiprintf_r+0x1d2>
 800f924:	4b21      	ldr	r3, [pc, #132]	@ (800f9ac <_svfiprintf_r+0x1ec>)
 800f926:	bb1b      	cbnz	r3, 800f970 <_svfiprintf_r+0x1b0>
 800f928:	9b03      	ldr	r3, [sp, #12]
 800f92a:	3307      	adds	r3, #7
 800f92c:	f023 0307 	bic.w	r3, r3, #7
 800f930:	3308      	adds	r3, #8
 800f932:	9303      	str	r3, [sp, #12]
 800f934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f936:	4433      	add	r3, r6
 800f938:	9309      	str	r3, [sp, #36]	@ 0x24
 800f93a:	e76a      	b.n	800f812 <_svfiprintf_r+0x52>
 800f93c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f940:	460c      	mov	r4, r1
 800f942:	2001      	movs	r0, #1
 800f944:	e7a8      	b.n	800f898 <_svfiprintf_r+0xd8>
 800f946:	2300      	movs	r3, #0
 800f948:	3401      	adds	r4, #1
 800f94a:	9305      	str	r3, [sp, #20]
 800f94c:	4619      	mov	r1, r3
 800f94e:	f04f 0c0a 	mov.w	ip, #10
 800f952:	4620      	mov	r0, r4
 800f954:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f958:	3a30      	subs	r2, #48	@ 0x30
 800f95a:	2a09      	cmp	r2, #9
 800f95c:	d903      	bls.n	800f966 <_svfiprintf_r+0x1a6>
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d0c6      	beq.n	800f8f0 <_svfiprintf_r+0x130>
 800f962:	9105      	str	r1, [sp, #20]
 800f964:	e7c4      	b.n	800f8f0 <_svfiprintf_r+0x130>
 800f966:	fb0c 2101 	mla	r1, ip, r1, r2
 800f96a:	4604      	mov	r4, r0
 800f96c:	2301      	movs	r3, #1
 800f96e:	e7f0      	b.n	800f952 <_svfiprintf_r+0x192>
 800f970:	ab03      	add	r3, sp, #12
 800f972:	9300      	str	r3, [sp, #0]
 800f974:	462a      	mov	r2, r5
 800f976:	4b0e      	ldr	r3, [pc, #56]	@ (800f9b0 <_svfiprintf_r+0x1f0>)
 800f978:	a904      	add	r1, sp, #16
 800f97a:	4638      	mov	r0, r7
 800f97c:	f3af 8000 	nop.w
 800f980:	1c42      	adds	r2, r0, #1
 800f982:	4606      	mov	r6, r0
 800f984:	d1d6      	bne.n	800f934 <_svfiprintf_r+0x174>
 800f986:	89ab      	ldrh	r3, [r5, #12]
 800f988:	065b      	lsls	r3, r3, #25
 800f98a:	f53f af2d 	bmi.w	800f7e8 <_svfiprintf_r+0x28>
 800f98e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f990:	e72c      	b.n	800f7ec <_svfiprintf_r+0x2c>
 800f992:	ab03      	add	r3, sp, #12
 800f994:	9300      	str	r3, [sp, #0]
 800f996:	462a      	mov	r2, r5
 800f998:	4b05      	ldr	r3, [pc, #20]	@ (800f9b0 <_svfiprintf_r+0x1f0>)
 800f99a:	a904      	add	r1, sp, #16
 800f99c:	4638      	mov	r0, r7
 800f99e:	f000 f879 	bl	800fa94 <_printf_i>
 800f9a2:	e7ed      	b.n	800f980 <_svfiprintf_r+0x1c0>
 800f9a4:	080101b4 	.word	0x080101b4
 800f9a8:	080101be 	.word	0x080101be
 800f9ac:	00000000 	.word	0x00000000
 800f9b0:	0800f709 	.word	0x0800f709
 800f9b4:	080101ba 	.word	0x080101ba

0800f9b8 <_printf_common>:
 800f9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9bc:	4616      	mov	r6, r2
 800f9be:	4698      	mov	r8, r3
 800f9c0:	688a      	ldr	r2, [r1, #8]
 800f9c2:	690b      	ldr	r3, [r1, #16]
 800f9c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	bfb8      	it	lt
 800f9cc:	4613      	movlt	r3, r2
 800f9ce:	6033      	str	r3, [r6, #0]
 800f9d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	460c      	mov	r4, r1
 800f9d8:	b10a      	cbz	r2, 800f9de <_printf_common+0x26>
 800f9da:	3301      	adds	r3, #1
 800f9dc:	6033      	str	r3, [r6, #0]
 800f9de:	6823      	ldr	r3, [r4, #0]
 800f9e0:	0699      	lsls	r1, r3, #26
 800f9e2:	bf42      	ittt	mi
 800f9e4:	6833      	ldrmi	r3, [r6, #0]
 800f9e6:	3302      	addmi	r3, #2
 800f9e8:	6033      	strmi	r3, [r6, #0]
 800f9ea:	6825      	ldr	r5, [r4, #0]
 800f9ec:	f015 0506 	ands.w	r5, r5, #6
 800f9f0:	d106      	bne.n	800fa00 <_printf_common+0x48>
 800f9f2:	f104 0a19 	add.w	sl, r4, #25
 800f9f6:	68e3      	ldr	r3, [r4, #12]
 800f9f8:	6832      	ldr	r2, [r6, #0]
 800f9fa:	1a9b      	subs	r3, r3, r2
 800f9fc:	42ab      	cmp	r3, r5
 800f9fe:	dc26      	bgt.n	800fa4e <_printf_common+0x96>
 800fa00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fa04:	6822      	ldr	r2, [r4, #0]
 800fa06:	3b00      	subs	r3, #0
 800fa08:	bf18      	it	ne
 800fa0a:	2301      	movne	r3, #1
 800fa0c:	0692      	lsls	r2, r2, #26
 800fa0e:	d42b      	bmi.n	800fa68 <_printf_common+0xb0>
 800fa10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa14:	4641      	mov	r1, r8
 800fa16:	4638      	mov	r0, r7
 800fa18:	47c8      	blx	r9
 800fa1a:	3001      	adds	r0, #1
 800fa1c:	d01e      	beq.n	800fa5c <_printf_common+0xa4>
 800fa1e:	6823      	ldr	r3, [r4, #0]
 800fa20:	6922      	ldr	r2, [r4, #16]
 800fa22:	f003 0306 	and.w	r3, r3, #6
 800fa26:	2b04      	cmp	r3, #4
 800fa28:	bf02      	ittt	eq
 800fa2a:	68e5      	ldreq	r5, [r4, #12]
 800fa2c:	6833      	ldreq	r3, [r6, #0]
 800fa2e:	1aed      	subeq	r5, r5, r3
 800fa30:	68a3      	ldr	r3, [r4, #8]
 800fa32:	bf0c      	ite	eq
 800fa34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa38:	2500      	movne	r5, #0
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	bfc4      	itt	gt
 800fa3e:	1a9b      	subgt	r3, r3, r2
 800fa40:	18ed      	addgt	r5, r5, r3
 800fa42:	2600      	movs	r6, #0
 800fa44:	341a      	adds	r4, #26
 800fa46:	42b5      	cmp	r5, r6
 800fa48:	d11a      	bne.n	800fa80 <_printf_common+0xc8>
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	e008      	b.n	800fa60 <_printf_common+0xa8>
 800fa4e:	2301      	movs	r3, #1
 800fa50:	4652      	mov	r2, sl
 800fa52:	4641      	mov	r1, r8
 800fa54:	4638      	mov	r0, r7
 800fa56:	47c8      	blx	r9
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d103      	bne.n	800fa64 <_printf_common+0xac>
 800fa5c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa64:	3501      	adds	r5, #1
 800fa66:	e7c6      	b.n	800f9f6 <_printf_common+0x3e>
 800fa68:	18e1      	adds	r1, r4, r3
 800fa6a:	1c5a      	adds	r2, r3, #1
 800fa6c:	2030      	movs	r0, #48	@ 0x30
 800fa6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa72:	4422      	add	r2, r4
 800fa74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa7c:	3302      	adds	r3, #2
 800fa7e:	e7c7      	b.n	800fa10 <_printf_common+0x58>
 800fa80:	2301      	movs	r3, #1
 800fa82:	4622      	mov	r2, r4
 800fa84:	4641      	mov	r1, r8
 800fa86:	4638      	mov	r0, r7
 800fa88:	47c8      	blx	r9
 800fa8a:	3001      	adds	r0, #1
 800fa8c:	d0e6      	beq.n	800fa5c <_printf_common+0xa4>
 800fa8e:	3601      	adds	r6, #1
 800fa90:	e7d9      	b.n	800fa46 <_printf_common+0x8e>
	...

0800fa94 <_printf_i>:
 800fa94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa98:	7e0f      	ldrb	r7, [r1, #24]
 800fa9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fa9c:	2f78      	cmp	r7, #120	@ 0x78
 800fa9e:	4691      	mov	r9, r2
 800faa0:	4680      	mov	r8, r0
 800faa2:	460c      	mov	r4, r1
 800faa4:	469a      	mov	sl, r3
 800faa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800faaa:	d807      	bhi.n	800fabc <_printf_i+0x28>
 800faac:	2f62      	cmp	r7, #98	@ 0x62
 800faae:	d80a      	bhi.n	800fac6 <_printf_i+0x32>
 800fab0:	2f00      	cmp	r7, #0
 800fab2:	f000 80d2 	beq.w	800fc5a <_printf_i+0x1c6>
 800fab6:	2f58      	cmp	r7, #88	@ 0x58
 800fab8:	f000 80b9 	beq.w	800fc2e <_printf_i+0x19a>
 800fabc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fac0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fac4:	e03a      	b.n	800fb3c <_printf_i+0xa8>
 800fac6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800faca:	2b15      	cmp	r3, #21
 800facc:	d8f6      	bhi.n	800fabc <_printf_i+0x28>
 800face:	a101      	add	r1, pc, #4	@ (adr r1, 800fad4 <_printf_i+0x40>)
 800fad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fad4:	0800fb2d 	.word	0x0800fb2d
 800fad8:	0800fb41 	.word	0x0800fb41
 800fadc:	0800fabd 	.word	0x0800fabd
 800fae0:	0800fabd 	.word	0x0800fabd
 800fae4:	0800fabd 	.word	0x0800fabd
 800fae8:	0800fabd 	.word	0x0800fabd
 800faec:	0800fb41 	.word	0x0800fb41
 800faf0:	0800fabd 	.word	0x0800fabd
 800faf4:	0800fabd 	.word	0x0800fabd
 800faf8:	0800fabd 	.word	0x0800fabd
 800fafc:	0800fabd 	.word	0x0800fabd
 800fb00:	0800fc41 	.word	0x0800fc41
 800fb04:	0800fb6b 	.word	0x0800fb6b
 800fb08:	0800fbfb 	.word	0x0800fbfb
 800fb0c:	0800fabd 	.word	0x0800fabd
 800fb10:	0800fabd 	.word	0x0800fabd
 800fb14:	0800fc63 	.word	0x0800fc63
 800fb18:	0800fabd 	.word	0x0800fabd
 800fb1c:	0800fb6b 	.word	0x0800fb6b
 800fb20:	0800fabd 	.word	0x0800fabd
 800fb24:	0800fabd 	.word	0x0800fabd
 800fb28:	0800fc03 	.word	0x0800fc03
 800fb2c:	6833      	ldr	r3, [r6, #0]
 800fb2e:	1d1a      	adds	r2, r3, #4
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	6032      	str	r2, [r6, #0]
 800fb34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	e09d      	b.n	800fc7c <_printf_i+0x1e8>
 800fb40:	6833      	ldr	r3, [r6, #0]
 800fb42:	6820      	ldr	r0, [r4, #0]
 800fb44:	1d19      	adds	r1, r3, #4
 800fb46:	6031      	str	r1, [r6, #0]
 800fb48:	0606      	lsls	r6, r0, #24
 800fb4a:	d501      	bpl.n	800fb50 <_printf_i+0xbc>
 800fb4c:	681d      	ldr	r5, [r3, #0]
 800fb4e:	e003      	b.n	800fb58 <_printf_i+0xc4>
 800fb50:	0645      	lsls	r5, r0, #25
 800fb52:	d5fb      	bpl.n	800fb4c <_printf_i+0xb8>
 800fb54:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb58:	2d00      	cmp	r5, #0
 800fb5a:	da03      	bge.n	800fb64 <_printf_i+0xd0>
 800fb5c:	232d      	movs	r3, #45	@ 0x2d
 800fb5e:	426d      	negs	r5, r5
 800fb60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb64:	4859      	ldr	r0, [pc, #356]	@ (800fccc <_printf_i+0x238>)
 800fb66:	230a      	movs	r3, #10
 800fb68:	e011      	b.n	800fb8e <_printf_i+0xfa>
 800fb6a:	6821      	ldr	r1, [r4, #0]
 800fb6c:	6833      	ldr	r3, [r6, #0]
 800fb6e:	0608      	lsls	r0, r1, #24
 800fb70:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb74:	d402      	bmi.n	800fb7c <_printf_i+0xe8>
 800fb76:	0649      	lsls	r1, r1, #25
 800fb78:	bf48      	it	mi
 800fb7a:	b2ad      	uxthmi	r5, r5
 800fb7c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb7e:	4853      	ldr	r0, [pc, #332]	@ (800fccc <_printf_i+0x238>)
 800fb80:	6033      	str	r3, [r6, #0]
 800fb82:	bf14      	ite	ne
 800fb84:	230a      	movne	r3, #10
 800fb86:	2308      	moveq	r3, #8
 800fb88:	2100      	movs	r1, #0
 800fb8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fb8e:	6866      	ldr	r6, [r4, #4]
 800fb90:	60a6      	str	r6, [r4, #8]
 800fb92:	2e00      	cmp	r6, #0
 800fb94:	bfa2      	ittt	ge
 800fb96:	6821      	ldrge	r1, [r4, #0]
 800fb98:	f021 0104 	bicge.w	r1, r1, #4
 800fb9c:	6021      	strge	r1, [r4, #0]
 800fb9e:	b90d      	cbnz	r5, 800fba4 <_printf_i+0x110>
 800fba0:	2e00      	cmp	r6, #0
 800fba2:	d04b      	beq.n	800fc3c <_printf_i+0x1a8>
 800fba4:	4616      	mov	r6, r2
 800fba6:	fbb5 f1f3 	udiv	r1, r5, r3
 800fbaa:	fb03 5711 	mls	r7, r3, r1, r5
 800fbae:	5dc7      	ldrb	r7, [r0, r7]
 800fbb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fbb4:	462f      	mov	r7, r5
 800fbb6:	42bb      	cmp	r3, r7
 800fbb8:	460d      	mov	r5, r1
 800fbba:	d9f4      	bls.n	800fba6 <_printf_i+0x112>
 800fbbc:	2b08      	cmp	r3, #8
 800fbbe:	d10b      	bne.n	800fbd8 <_printf_i+0x144>
 800fbc0:	6823      	ldr	r3, [r4, #0]
 800fbc2:	07df      	lsls	r7, r3, #31
 800fbc4:	d508      	bpl.n	800fbd8 <_printf_i+0x144>
 800fbc6:	6923      	ldr	r3, [r4, #16]
 800fbc8:	6861      	ldr	r1, [r4, #4]
 800fbca:	4299      	cmp	r1, r3
 800fbcc:	bfde      	ittt	le
 800fbce:	2330      	movle	r3, #48	@ 0x30
 800fbd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fbd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fbd8:	1b92      	subs	r2, r2, r6
 800fbda:	6122      	str	r2, [r4, #16]
 800fbdc:	f8cd a000 	str.w	sl, [sp]
 800fbe0:	464b      	mov	r3, r9
 800fbe2:	aa03      	add	r2, sp, #12
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	4640      	mov	r0, r8
 800fbe8:	f7ff fee6 	bl	800f9b8 <_printf_common>
 800fbec:	3001      	adds	r0, #1
 800fbee:	d14a      	bne.n	800fc86 <_printf_i+0x1f2>
 800fbf0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbf4:	b004      	add	sp, #16
 800fbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbfa:	6823      	ldr	r3, [r4, #0]
 800fbfc:	f043 0320 	orr.w	r3, r3, #32
 800fc00:	6023      	str	r3, [r4, #0]
 800fc02:	4833      	ldr	r0, [pc, #204]	@ (800fcd0 <_printf_i+0x23c>)
 800fc04:	2778      	movs	r7, #120	@ 0x78
 800fc06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fc0a:	6823      	ldr	r3, [r4, #0]
 800fc0c:	6831      	ldr	r1, [r6, #0]
 800fc0e:	061f      	lsls	r7, r3, #24
 800fc10:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc14:	d402      	bmi.n	800fc1c <_printf_i+0x188>
 800fc16:	065f      	lsls	r7, r3, #25
 800fc18:	bf48      	it	mi
 800fc1a:	b2ad      	uxthmi	r5, r5
 800fc1c:	6031      	str	r1, [r6, #0]
 800fc1e:	07d9      	lsls	r1, r3, #31
 800fc20:	bf44      	itt	mi
 800fc22:	f043 0320 	orrmi.w	r3, r3, #32
 800fc26:	6023      	strmi	r3, [r4, #0]
 800fc28:	b11d      	cbz	r5, 800fc32 <_printf_i+0x19e>
 800fc2a:	2310      	movs	r3, #16
 800fc2c:	e7ac      	b.n	800fb88 <_printf_i+0xf4>
 800fc2e:	4827      	ldr	r0, [pc, #156]	@ (800fccc <_printf_i+0x238>)
 800fc30:	e7e9      	b.n	800fc06 <_printf_i+0x172>
 800fc32:	6823      	ldr	r3, [r4, #0]
 800fc34:	f023 0320 	bic.w	r3, r3, #32
 800fc38:	6023      	str	r3, [r4, #0]
 800fc3a:	e7f6      	b.n	800fc2a <_printf_i+0x196>
 800fc3c:	4616      	mov	r6, r2
 800fc3e:	e7bd      	b.n	800fbbc <_printf_i+0x128>
 800fc40:	6833      	ldr	r3, [r6, #0]
 800fc42:	6825      	ldr	r5, [r4, #0]
 800fc44:	6961      	ldr	r1, [r4, #20]
 800fc46:	1d18      	adds	r0, r3, #4
 800fc48:	6030      	str	r0, [r6, #0]
 800fc4a:	062e      	lsls	r6, r5, #24
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	d501      	bpl.n	800fc54 <_printf_i+0x1c0>
 800fc50:	6019      	str	r1, [r3, #0]
 800fc52:	e002      	b.n	800fc5a <_printf_i+0x1c6>
 800fc54:	0668      	lsls	r0, r5, #25
 800fc56:	d5fb      	bpl.n	800fc50 <_printf_i+0x1bc>
 800fc58:	8019      	strh	r1, [r3, #0]
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	6123      	str	r3, [r4, #16]
 800fc5e:	4616      	mov	r6, r2
 800fc60:	e7bc      	b.n	800fbdc <_printf_i+0x148>
 800fc62:	6833      	ldr	r3, [r6, #0]
 800fc64:	1d1a      	adds	r2, r3, #4
 800fc66:	6032      	str	r2, [r6, #0]
 800fc68:	681e      	ldr	r6, [r3, #0]
 800fc6a:	6862      	ldr	r2, [r4, #4]
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	4630      	mov	r0, r6
 800fc70:	f7f0 face 	bl	8000210 <memchr>
 800fc74:	b108      	cbz	r0, 800fc7a <_printf_i+0x1e6>
 800fc76:	1b80      	subs	r0, r0, r6
 800fc78:	6060      	str	r0, [r4, #4]
 800fc7a:	6863      	ldr	r3, [r4, #4]
 800fc7c:	6123      	str	r3, [r4, #16]
 800fc7e:	2300      	movs	r3, #0
 800fc80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc84:	e7aa      	b.n	800fbdc <_printf_i+0x148>
 800fc86:	6923      	ldr	r3, [r4, #16]
 800fc88:	4632      	mov	r2, r6
 800fc8a:	4649      	mov	r1, r9
 800fc8c:	4640      	mov	r0, r8
 800fc8e:	47d0      	blx	sl
 800fc90:	3001      	adds	r0, #1
 800fc92:	d0ad      	beq.n	800fbf0 <_printf_i+0x15c>
 800fc94:	6823      	ldr	r3, [r4, #0]
 800fc96:	079b      	lsls	r3, r3, #30
 800fc98:	d413      	bmi.n	800fcc2 <_printf_i+0x22e>
 800fc9a:	68e0      	ldr	r0, [r4, #12]
 800fc9c:	9b03      	ldr	r3, [sp, #12]
 800fc9e:	4298      	cmp	r0, r3
 800fca0:	bfb8      	it	lt
 800fca2:	4618      	movlt	r0, r3
 800fca4:	e7a6      	b.n	800fbf4 <_printf_i+0x160>
 800fca6:	2301      	movs	r3, #1
 800fca8:	4632      	mov	r2, r6
 800fcaa:	4649      	mov	r1, r9
 800fcac:	4640      	mov	r0, r8
 800fcae:	47d0      	blx	sl
 800fcb0:	3001      	adds	r0, #1
 800fcb2:	d09d      	beq.n	800fbf0 <_printf_i+0x15c>
 800fcb4:	3501      	adds	r5, #1
 800fcb6:	68e3      	ldr	r3, [r4, #12]
 800fcb8:	9903      	ldr	r1, [sp, #12]
 800fcba:	1a5b      	subs	r3, r3, r1
 800fcbc:	42ab      	cmp	r3, r5
 800fcbe:	dcf2      	bgt.n	800fca6 <_printf_i+0x212>
 800fcc0:	e7eb      	b.n	800fc9a <_printf_i+0x206>
 800fcc2:	2500      	movs	r5, #0
 800fcc4:	f104 0619 	add.w	r6, r4, #25
 800fcc8:	e7f5      	b.n	800fcb6 <_printf_i+0x222>
 800fcca:	bf00      	nop
 800fccc:	080101c5 	.word	0x080101c5
 800fcd0:	080101d6 	.word	0x080101d6

0800fcd4 <__sflush_r>:
 800fcd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcdc:	0716      	lsls	r6, r2, #28
 800fcde:	4605      	mov	r5, r0
 800fce0:	460c      	mov	r4, r1
 800fce2:	d454      	bmi.n	800fd8e <__sflush_r+0xba>
 800fce4:	684b      	ldr	r3, [r1, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	dc02      	bgt.n	800fcf0 <__sflush_r+0x1c>
 800fcea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	dd48      	ble.n	800fd82 <__sflush_r+0xae>
 800fcf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fcf2:	2e00      	cmp	r6, #0
 800fcf4:	d045      	beq.n	800fd82 <__sflush_r+0xae>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fcfc:	682f      	ldr	r7, [r5, #0]
 800fcfe:	6a21      	ldr	r1, [r4, #32]
 800fd00:	602b      	str	r3, [r5, #0]
 800fd02:	d030      	beq.n	800fd66 <__sflush_r+0x92>
 800fd04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fd06:	89a3      	ldrh	r3, [r4, #12]
 800fd08:	0759      	lsls	r1, r3, #29
 800fd0a:	d505      	bpl.n	800fd18 <__sflush_r+0x44>
 800fd0c:	6863      	ldr	r3, [r4, #4]
 800fd0e:	1ad2      	subs	r2, r2, r3
 800fd10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fd12:	b10b      	cbz	r3, 800fd18 <__sflush_r+0x44>
 800fd14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fd16:	1ad2      	subs	r2, r2, r3
 800fd18:	2300      	movs	r3, #0
 800fd1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fd1c:	6a21      	ldr	r1, [r4, #32]
 800fd1e:	4628      	mov	r0, r5
 800fd20:	47b0      	blx	r6
 800fd22:	1c43      	adds	r3, r0, #1
 800fd24:	89a3      	ldrh	r3, [r4, #12]
 800fd26:	d106      	bne.n	800fd36 <__sflush_r+0x62>
 800fd28:	6829      	ldr	r1, [r5, #0]
 800fd2a:	291d      	cmp	r1, #29
 800fd2c:	d82b      	bhi.n	800fd86 <__sflush_r+0xb2>
 800fd2e:	4a2a      	ldr	r2, [pc, #168]	@ (800fdd8 <__sflush_r+0x104>)
 800fd30:	410a      	asrs	r2, r1
 800fd32:	07d6      	lsls	r6, r2, #31
 800fd34:	d427      	bmi.n	800fd86 <__sflush_r+0xb2>
 800fd36:	2200      	movs	r2, #0
 800fd38:	6062      	str	r2, [r4, #4]
 800fd3a:	04d9      	lsls	r1, r3, #19
 800fd3c:	6922      	ldr	r2, [r4, #16]
 800fd3e:	6022      	str	r2, [r4, #0]
 800fd40:	d504      	bpl.n	800fd4c <__sflush_r+0x78>
 800fd42:	1c42      	adds	r2, r0, #1
 800fd44:	d101      	bne.n	800fd4a <__sflush_r+0x76>
 800fd46:	682b      	ldr	r3, [r5, #0]
 800fd48:	b903      	cbnz	r3, 800fd4c <__sflush_r+0x78>
 800fd4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fd4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd4e:	602f      	str	r7, [r5, #0]
 800fd50:	b1b9      	cbz	r1, 800fd82 <__sflush_r+0xae>
 800fd52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd56:	4299      	cmp	r1, r3
 800fd58:	d002      	beq.n	800fd60 <__sflush_r+0x8c>
 800fd5a:	4628      	mov	r0, r5
 800fd5c:	f7ff fc8a 	bl	800f674 <_free_r>
 800fd60:	2300      	movs	r3, #0
 800fd62:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd64:	e00d      	b.n	800fd82 <__sflush_r+0xae>
 800fd66:	2301      	movs	r3, #1
 800fd68:	4628      	mov	r0, r5
 800fd6a:	47b0      	blx	r6
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	1c50      	adds	r0, r2, #1
 800fd70:	d1c9      	bne.n	800fd06 <__sflush_r+0x32>
 800fd72:	682b      	ldr	r3, [r5, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d0c6      	beq.n	800fd06 <__sflush_r+0x32>
 800fd78:	2b1d      	cmp	r3, #29
 800fd7a:	d001      	beq.n	800fd80 <__sflush_r+0xac>
 800fd7c:	2b16      	cmp	r3, #22
 800fd7e:	d11e      	bne.n	800fdbe <__sflush_r+0xea>
 800fd80:	602f      	str	r7, [r5, #0]
 800fd82:	2000      	movs	r0, #0
 800fd84:	e022      	b.n	800fdcc <__sflush_r+0xf8>
 800fd86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd8a:	b21b      	sxth	r3, r3
 800fd8c:	e01b      	b.n	800fdc6 <__sflush_r+0xf2>
 800fd8e:	690f      	ldr	r7, [r1, #16]
 800fd90:	2f00      	cmp	r7, #0
 800fd92:	d0f6      	beq.n	800fd82 <__sflush_r+0xae>
 800fd94:	0793      	lsls	r3, r2, #30
 800fd96:	680e      	ldr	r6, [r1, #0]
 800fd98:	bf08      	it	eq
 800fd9a:	694b      	ldreq	r3, [r1, #20]
 800fd9c:	600f      	str	r7, [r1, #0]
 800fd9e:	bf18      	it	ne
 800fda0:	2300      	movne	r3, #0
 800fda2:	eba6 0807 	sub.w	r8, r6, r7
 800fda6:	608b      	str	r3, [r1, #8]
 800fda8:	f1b8 0f00 	cmp.w	r8, #0
 800fdac:	dde9      	ble.n	800fd82 <__sflush_r+0xae>
 800fdae:	6a21      	ldr	r1, [r4, #32]
 800fdb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fdb2:	4643      	mov	r3, r8
 800fdb4:	463a      	mov	r2, r7
 800fdb6:	4628      	mov	r0, r5
 800fdb8:	47b0      	blx	r6
 800fdba:	2800      	cmp	r0, #0
 800fdbc:	dc08      	bgt.n	800fdd0 <__sflush_r+0xfc>
 800fdbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fdc6:	81a3      	strh	r3, [r4, #12]
 800fdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdd0:	4407      	add	r7, r0
 800fdd2:	eba8 0800 	sub.w	r8, r8, r0
 800fdd6:	e7e7      	b.n	800fda8 <__sflush_r+0xd4>
 800fdd8:	dfbffffe 	.word	0xdfbffffe

0800fddc <_fflush_r>:
 800fddc:	b538      	push	{r3, r4, r5, lr}
 800fdde:	690b      	ldr	r3, [r1, #16]
 800fde0:	4605      	mov	r5, r0
 800fde2:	460c      	mov	r4, r1
 800fde4:	b913      	cbnz	r3, 800fdec <_fflush_r+0x10>
 800fde6:	2500      	movs	r5, #0
 800fde8:	4628      	mov	r0, r5
 800fdea:	bd38      	pop	{r3, r4, r5, pc}
 800fdec:	b118      	cbz	r0, 800fdf6 <_fflush_r+0x1a>
 800fdee:	6a03      	ldr	r3, [r0, #32]
 800fdf0:	b90b      	cbnz	r3, 800fdf6 <_fflush_r+0x1a>
 800fdf2:	f7ff f9fd 	bl	800f1f0 <__sinit>
 800fdf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d0f3      	beq.n	800fde6 <_fflush_r+0xa>
 800fdfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fe00:	07d0      	lsls	r0, r2, #31
 800fe02:	d404      	bmi.n	800fe0e <_fflush_r+0x32>
 800fe04:	0599      	lsls	r1, r3, #22
 800fe06:	d402      	bmi.n	800fe0e <_fflush_r+0x32>
 800fe08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe0a:	f7ff fc30 	bl	800f66e <__retarget_lock_acquire_recursive>
 800fe0e:	4628      	mov	r0, r5
 800fe10:	4621      	mov	r1, r4
 800fe12:	f7ff ff5f 	bl	800fcd4 <__sflush_r>
 800fe16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fe18:	07da      	lsls	r2, r3, #31
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	d4e4      	bmi.n	800fde8 <_fflush_r+0xc>
 800fe1e:	89a3      	ldrh	r3, [r4, #12]
 800fe20:	059b      	lsls	r3, r3, #22
 800fe22:	d4e1      	bmi.n	800fde8 <_fflush_r+0xc>
 800fe24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fe26:	f7ff fc23 	bl	800f670 <__retarget_lock_release_recursive>
 800fe2a:	e7dd      	b.n	800fde8 <_fflush_r+0xc>

0800fe2c <__swhatbuf_r>:
 800fe2c:	b570      	push	{r4, r5, r6, lr}
 800fe2e:	460c      	mov	r4, r1
 800fe30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe34:	2900      	cmp	r1, #0
 800fe36:	b096      	sub	sp, #88	@ 0x58
 800fe38:	4615      	mov	r5, r2
 800fe3a:	461e      	mov	r6, r3
 800fe3c:	da0d      	bge.n	800fe5a <__swhatbuf_r+0x2e>
 800fe3e:	89a3      	ldrh	r3, [r4, #12]
 800fe40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fe44:	f04f 0100 	mov.w	r1, #0
 800fe48:	bf14      	ite	ne
 800fe4a:	2340      	movne	r3, #64	@ 0x40
 800fe4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fe50:	2000      	movs	r0, #0
 800fe52:	6031      	str	r1, [r6, #0]
 800fe54:	602b      	str	r3, [r5, #0]
 800fe56:	b016      	add	sp, #88	@ 0x58
 800fe58:	bd70      	pop	{r4, r5, r6, pc}
 800fe5a:	466a      	mov	r2, sp
 800fe5c:	f000 f862 	bl	800ff24 <_fstat_r>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	dbec      	blt.n	800fe3e <__swhatbuf_r+0x12>
 800fe64:	9901      	ldr	r1, [sp, #4]
 800fe66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fe6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fe6e:	4259      	negs	r1, r3
 800fe70:	4159      	adcs	r1, r3
 800fe72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe76:	e7eb      	b.n	800fe50 <__swhatbuf_r+0x24>

0800fe78 <__smakebuf_r>:
 800fe78:	898b      	ldrh	r3, [r1, #12]
 800fe7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe7c:	079d      	lsls	r5, r3, #30
 800fe7e:	4606      	mov	r6, r0
 800fe80:	460c      	mov	r4, r1
 800fe82:	d507      	bpl.n	800fe94 <__smakebuf_r+0x1c>
 800fe84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fe88:	6023      	str	r3, [r4, #0]
 800fe8a:	6123      	str	r3, [r4, #16]
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	6163      	str	r3, [r4, #20]
 800fe90:	b003      	add	sp, #12
 800fe92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe94:	ab01      	add	r3, sp, #4
 800fe96:	466a      	mov	r2, sp
 800fe98:	f7ff ffc8 	bl	800fe2c <__swhatbuf_r>
 800fe9c:	9f00      	ldr	r7, [sp, #0]
 800fe9e:	4605      	mov	r5, r0
 800fea0:	4639      	mov	r1, r7
 800fea2:	4630      	mov	r0, r6
 800fea4:	f7ff f88c 	bl	800efc0 <_malloc_r>
 800fea8:	b948      	cbnz	r0, 800febe <__smakebuf_r+0x46>
 800feaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feae:	059a      	lsls	r2, r3, #22
 800feb0:	d4ee      	bmi.n	800fe90 <__smakebuf_r+0x18>
 800feb2:	f023 0303 	bic.w	r3, r3, #3
 800feb6:	f043 0302 	orr.w	r3, r3, #2
 800feba:	81a3      	strh	r3, [r4, #12]
 800febc:	e7e2      	b.n	800fe84 <__smakebuf_r+0xc>
 800febe:	89a3      	ldrh	r3, [r4, #12]
 800fec0:	6020      	str	r0, [r4, #0]
 800fec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fec6:	81a3      	strh	r3, [r4, #12]
 800fec8:	9b01      	ldr	r3, [sp, #4]
 800feca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fece:	b15b      	cbz	r3, 800fee8 <__smakebuf_r+0x70>
 800fed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fed4:	4630      	mov	r0, r6
 800fed6:	f000 f837 	bl	800ff48 <_isatty_r>
 800feda:	b128      	cbz	r0, 800fee8 <__smakebuf_r+0x70>
 800fedc:	89a3      	ldrh	r3, [r4, #12]
 800fede:	f023 0303 	bic.w	r3, r3, #3
 800fee2:	f043 0301 	orr.w	r3, r3, #1
 800fee6:	81a3      	strh	r3, [r4, #12]
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	431d      	orrs	r5, r3
 800feec:	81a5      	strh	r5, [r4, #12]
 800feee:	e7cf      	b.n	800fe90 <__smakebuf_r+0x18>

0800fef0 <memmove>:
 800fef0:	4288      	cmp	r0, r1
 800fef2:	b510      	push	{r4, lr}
 800fef4:	eb01 0402 	add.w	r4, r1, r2
 800fef8:	d902      	bls.n	800ff00 <memmove+0x10>
 800fefa:	4284      	cmp	r4, r0
 800fefc:	4623      	mov	r3, r4
 800fefe:	d807      	bhi.n	800ff10 <memmove+0x20>
 800ff00:	1e43      	subs	r3, r0, #1
 800ff02:	42a1      	cmp	r1, r4
 800ff04:	d008      	beq.n	800ff18 <memmove+0x28>
 800ff06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ff0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ff0e:	e7f8      	b.n	800ff02 <memmove+0x12>
 800ff10:	4402      	add	r2, r0
 800ff12:	4601      	mov	r1, r0
 800ff14:	428a      	cmp	r2, r1
 800ff16:	d100      	bne.n	800ff1a <memmove+0x2a>
 800ff18:	bd10      	pop	{r4, pc}
 800ff1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ff1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ff22:	e7f7      	b.n	800ff14 <memmove+0x24>

0800ff24 <_fstat_r>:
 800ff24:	b538      	push	{r3, r4, r5, lr}
 800ff26:	4d07      	ldr	r5, [pc, #28]	@ (800ff44 <_fstat_r+0x20>)
 800ff28:	2300      	movs	r3, #0
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	4608      	mov	r0, r1
 800ff2e:	4611      	mov	r1, r2
 800ff30:	602b      	str	r3, [r5, #0]
 800ff32:	f7f2 f828 	bl	8001f86 <_fstat>
 800ff36:	1c43      	adds	r3, r0, #1
 800ff38:	d102      	bne.n	800ff40 <_fstat_r+0x1c>
 800ff3a:	682b      	ldr	r3, [r5, #0]
 800ff3c:	b103      	cbz	r3, 800ff40 <_fstat_r+0x1c>
 800ff3e:	6023      	str	r3, [r4, #0]
 800ff40:	bd38      	pop	{r3, r4, r5, pc}
 800ff42:	bf00      	nop
 800ff44:	20000e80 	.word	0x20000e80

0800ff48 <_isatty_r>:
 800ff48:	b538      	push	{r3, r4, r5, lr}
 800ff4a:	4d06      	ldr	r5, [pc, #24]	@ (800ff64 <_isatty_r+0x1c>)
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	4604      	mov	r4, r0
 800ff50:	4608      	mov	r0, r1
 800ff52:	602b      	str	r3, [r5, #0]
 800ff54:	f7f2 f827 	bl	8001fa6 <_isatty>
 800ff58:	1c43      	adds	r3, r0, #1
 800ff5a:	d102      	bne.n	800ff62 <_isatty_r+0x1a>
 800ff5c:	682b      	ldr	r3, [r5, #0]
 800ff5e:	b103      	cbz	r3, 800ff62 <_isatty_r+0x1a>
 800ff60:	6023      	str	r3, [r4, #0]
 800ff62:	bd38      	pop	{r3, r4, r5, pc}
 800ff64:	20000e80 	.word	0x20000e80

0800ff68 <memcpy>:
 800ff68:	440a      	add	r2, r1
 800ff6a:	4291      	cmp	r1, r2
 800ff6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff70:	d100      	bne.n	800ff74 <memcpy+0xc>
 800ff72:	4770      	bx	lr
 800ff74:	b510      	push	{r4, lr}
 800ff76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff7e:	4291      	cmp	r1, r2
 800ff80:	d1f9      	bne.n	800ff76 <memcpy+0xe>
 800ff82:	bd10      	pop	{r4, pc}

0800ff84 <_realloc_r>:
 800ff84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff88:	4680      	mov	r8, r0
 800ff8a:	4615      	mov	r5, r2
 800ff8c:	460c      	mov	r4, r1
 800ff8e:	b921      	cbnz	r1, 800ff9a <_realloc_r+0x16>
 800ff90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff94:	4611      	mov	r1, r2
 800ff96:	f7ff b813 	b.w	800efc0 <_malloc_r>
 800ff9a:	b92a      	cbnz	r2, 800ffa8 <_realloc_r+0x24>
 800ff9c:	f7ff fb6a 	bl	800f674 <_free_r>
 800ffa0:	2400      	movs	r4, #0
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa8:	f000 f81a 	bl	800ffe0 <_malloc_usable_size_r>
 800ffac:	4285      	cmp	r5, r0
 800ffae:	4606      	mov	r6, r0
 800ffb0:	d802      	bhi.n	800ffb8 <_realloc_r+0x34>
 800ffb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ffb6:	d8f4      	bhi.n	800ffa2 <_realloc_r+0x1e>
 800ffb8:	4629      	mov	r1, r5
 800ffba:	4640      	mov	r0, r8
 800ffbc:	f7ff f800 	bl	800efc0 <_malloc_r>
 800ffc0:	4607      	mov	r7, r0
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	d0ec      	beq.n	800ffa0 <_realloc_r+0x1c>
 800ffc6:	42b5      	cmp	r5, r6
 800ffc8:	462a      	mov	r2, r5
 800ffca:	4621      	mov	r1, r4
 800ffcc:	bf28      	it	cs
 800ffce:	4632      	movcs	r2, r6
 800ffd0:	f7ff ffca 	bl	800ff68 <memcpy>
 800ffd4:	4621      	mov	r1, r4
 800ffd6:	4640      	mov	r0, r8
 800ffd8:	f7ff fb4c 	bl	800f674 <_free_r>
 800ffdc:	463c      	mov	r4, r7
 800ffde:	e7e0      	b.n	800ffa2 <_realloc_r+0x1e>

0800ffe0 <_malloc_usable_size_r>:
 800ffe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffe4:	1f18      	subs	r0, r3, #4
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	bfbc      	itt	lt
 800ffea:	580b      	ldrlt	r3, [r1, r0]
 800ffec:	18c0      	addlt	r0, r0, r3
 800ffee:	4770      	bx	lr

0800fff0 <_init>:
 800fff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff2:	bf00      	nop
 800fff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fff6:	bc08      	pop	{r3}
 800fff8:	469e      	mov	lr, r3
 800fffa:	4770      	bx	lr

0800fffc <_fini>:
 800fffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffe:	bf00      	nop
 8010000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010002:	bc08      	pop	{r3}
 8010004:	469e      	mov	lr, r3
 8010006:	4770      	bx	lr
