
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f98c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800fb4c  0800fb4c  00010b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd2c  0800fd2c  00011088  2**0
                  CONTENTS
  4 .ARM          00000008  0800fd2c  0800fd2c  00010d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fd34  0800fd34  00011088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd34  0800fd34  00010d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fd38  0800fd38  00010d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800fd3c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011088  2**0
                  CONTENTS
 10 .bss          00000e00  20000088  20000088  00011088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000e88  20000e88  00011088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e3e0  00000000  00000000  000110b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000635d  00000000  00000000  0003f498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002708  00000000  00000000  000457f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e41  00000000  00000000  00047f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034644  00000000  00000000  00049d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003488e  00000000  00000000  0007e385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00119483  00000000  00000000  000b2c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001cc096  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b058  00000000  00000000  001cc0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  001d7134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000088 	.word	0x20000088
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800fb34 	.word	0x0800fb34

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	0800fb34 	.word	0x0800fb34

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print(const char *text)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	//printf(text);
	uint16_t len = strlen(text);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe29 	bl	8000200 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, text, len, 100);
 80005b2:	89fa      	ldrh	r2, [r7, #14]
 80005b4:	2364      	movs	r3, #100	@ 0x64
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <print+0x28>)
 80005ba:	f009 f809 	bl	80095d0 <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000450 	.word	0x20000450

080005cc <println>:
void println(const char* text)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	print(text);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff ffe3 	bl	80005a0 <print>
	print("\n\r");
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <println+0x1c>)
 80005dc:	f7ff ffe0 	bl	80005a0 <print>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	0800fb4c 	.word	0x0800fb4c

080005ec <sendToESP>:
#define ESP_TIMEOUT 2000         // Timeout in milliseconds
#define ESP_RESPONSE_SIZE 128    // Buffer size for response

/* Function to send AT command over SPI and receive response */
int sendToESP(const char *cmd)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0c6      	sub	sp, #280	@ 0x118
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80005f6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80005fa:	6018      	str	r0, [r3, #0]
    char response[ESP_RESPONSE_SIZE] = {0}; // Buffer for ESP32 response
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000602:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000606:	227c      	movs	r2, #124	@ 0x7c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00e fb5b 	bl	800ecc6 <memset>
    uint8_t txBuffer[ESP_RESPONSE_SIZE] = {0};
 8000610:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	3304      	adds	r3, #4
 800061e:	227c      	movs	r2, #124	@ 0x7c
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f00e fb4f 	bl	800ecc6 <memset>
    int index = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    uint32_t startTime = HAL_GetTick(); // Start timer
 800062e:	f001 fd91 	bl	8002154 <HAL_GetTick>
 8000632:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    // Copy the AT command into the buffer and append "\r\n"
    snprintf((char *)txBuffer, ESP_RESPONSE_SIZE, "%s\r\n", cmd);
 8000636:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800063a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800063e:	f107 0010 	add.w	r0, r7, #16
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a2f      	ldr	r2, [pc, #188]	@ (8000704 <sendToESP+0x118>)
 8000646:	2180      	movs	r1, #128	@ 0x80
 8000648:	f00e fac6 	bl	800ebd8 <sniprintf>
    // Pull CS (Chip Select) low to start SPI transaction
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Adjust GPIO pin based on your setup

    // Send the AT command via SPI
    //HAL_SPI_Transmit(&hspi1, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart6, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY);
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdd5 	bl	8000200 <strlen>
 8000656:	4603      	mov	r3, r0
 8000658:	b29a      	uxth	r2, r3
 800065a:	f107 0110 	add.w	r1, r7, #16
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	4829      	ldr	r0, [pc, #164]	@ (8000708 <sendToESP+0x11c>)
 8000664:	f008 ffb4 	bl	80095d0 <HAL_UART_Transmit>

    // Small delay to allow ESP32 to process
    HAL_Delay(10);
 8000668:	200a      	movs	r0, #10
 800066a:	f001 fd7f 	bl	800216c <HAL_Delay>

    // Receive response from ESP32
    while ((HAL_GetTick() - startTime) < ESP_TIMEOUT)
 800066e:	e037      	b.n	80006e0 <sendToESP+0xf4>
    {
        uint8_t rxByte;
        //HAL_SPI_Receive(&hspi1, &rxByte, 1, 10); // Read one byte at a time
        HAL_UART_Receive(&huart6, &rxByte, 1, HAL_MAX_DELAY);
 8000670:	f107 010f 	add.w	r1, r7, #15
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	2201      	movs	r2, #1
 800067a:	4823      	ldr	r0, [pc, #140]	@ (8000708 <sendToESP+0x11c>)
 800067c:	f009 f833 	bl	80096e6 <HAL_UART_Receive>

        if (rxByte != 0xFF) // Ignore empty responses
 8000680:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000684:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2bff      	cmp	r3, #255	@ 0xff
 800068c:	d012      	beq.n	80006b4 <sendToESP+0xc8>
        {
            response[index++] = rxByte;
 800068e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8000698:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800069c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 80006a0:	7812      	ldrb	r2, [r2, #0]
 80006a2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80006a6:	443b      	add	r3, r7
 80006a8:	f803 2c88 	strb.w	r2, [r3, #-136]
            if (index >= ESP_RESPONSE_SIZE - 1) break; // Prevent buffer overflow
 80006ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80006b0:	2b7e      	cmp	r3, #126	@ 0x7e
 80006b2:	dc1f      	bgt.n	80006f4 <sendToESP+0x108>
        }

        // Check if response contains "OK" or "ERROR"
        if (strstr(response, "OK"))
 80006b4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80006b8:	4914      	ldr	r1, [pc, #80]	@ (800070c <sendToESP+0x120>)
 80006ba:	4618      	mov	r0, r3
 80006bc:	f00e fb0b 	bl	800ecd6 <strstr>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <sendToESP+0xde>
        {
            // Pull CS high to end SPI transaction
            //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
            return 1; // Success
 80006c6:	2301      	movs	r3, #1
 80006c8:	e016      	b.n	80006f8 <sendToESP+0x10c>
        }
        else if (strstr(response, "ERROR"))
 80006ca:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80006ce:	4910      	ldr	r1, [pc, #64]	@ (8000710 <sendToESP+0x124>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f00e fb00 	bl	800ecd6 <strstr>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <sendToESP+0xf4>
        {
            // Pull CS high to end SPI transaction
           // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
            return 0; // Failure
 80006dc:	2300      	movs	r3, #0
 80006de:	e00b      	b.n	80006f8 <sendToESP+0x10c>
    while ((HAL_GetTick() - startTime) < ESP_TIMEOUT)
 80006e0:	f001 fd38 	bl	8002154 <HAL_GetTick>
 80006e4:	4602      	mov	r2, r0
 80006e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006f0:	d3be      	bcc.n	8000670 <sendToESP+0x84>
 80006f2:	e000      	b.n	80006f6 <sendToESP+0x10a>
            if (index >= ESP_RESPONSE_SIZE - 1) break; // Prevent buffer overflow
 80006f4:	bf00      	nop
        }
    }

    // Pull CS high to end SPI transaction
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
    return 0; // Timeout or no response
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	0800fb6c 	.word	0x0800fb6c
 8000708:	20000498 	.word	0x20000498
 800070c:	0800fb74 	.word	0x0800fb74
 8000710:	0800fb78 	.word	0x0800fb78

08000714 <setupESP32Hotspot>:
void setupESP32Hotspot(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    if (sendToESP("AT")) {
 8000718:	481f      	ldr	r0, [pc, #124]	@ (8000798 <setupESP32Hotspot+0x84>)
 800071a:	f7ff ff67 	bl	80005ec <sendToESP>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d009      	beq.n	8000738 <setupESP32Hotspot+0x24>
        println("ESP32 is responsive.");
 8000724:	481d      	ldr	r0, [pc, #116]	@ (800079c <setupESP32Hotspot+0x88>)
 8000726:	f7ff ff51 	bl	80005cc <println>
    } else {
    	println("ESP32 is not responding!");
        return;
    }

    if (sendToESP("AT+CWMODE=2")) {
 800072a:	481d      	ldr	r0, [pc, #116]	@ (80007a0 <setupESP32Hotspot+0x8c>)
 800072c:	f7ff ff5e 	bl	80005ec <sendToESP>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d008      	beq.n	8000748 <setupESP32Hotspot+0x34>
 8000736:	e003      	b.n	8000740 <setupESP32Hotspot+0x2c>
    	println("ESP32 is not responding!");
 8000738:	481a      	ldr	r0, [pc, #104]	@ (80007a4 <setupESP32Hotspot+0x90>)
 800073a:	f7ff ff47 	bl	80005cc <println>
        return;
 800073e:	e029      	b.n	8000794 <setupESP32Hotspot+0x80>
    	println("WiFi mode set to AP.");
 8000740:	4819      	ldr	r0, [pc, #100]	@ (80007a8 <setupESP32Hotspot+0x94>)
 8000742:	f7ff ff43 	bl	80005cc <println>
 8000746:	e002      	b.n	800074e <setupESP32Hotspot+0x3a>
    } else {
    	println("Failed to set WiFi mode.");
 8000748:	4818      	ldr	r0, [pc, #96]	@ (80007ac <setupESP32Hotspot+0x98>)
 800074a:	f7ff ff3f 	bl	80005cc <println>
    }

    if (sendToESP("AT+CWSAP=\"MyHotspot\",\"MyPassword\",5,3")) {
 800074e:	4818      	ldr	r0, [pc, #96]	@ (80007b0 <setupESP32Hotspot+0x9c>)
 8000750:	f7ff ff4c 	bl	80005ec <sendToESP>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d003      	beq.n	8000762 <setupESP32Hotspot+0x4e>
    	println("Hotspot created successfully.");
 800075a:	4816      	ldr	r0, [pc, #88]	@ (80007b4 <setupESP32Hotspot+0xa0>)
 800075c:	f7ff ff36 	bl	80005cc <println>
 8000760:	e002      	b.n	8000768 <setupESP32Hotspot+0x54>
    } else {
    	println("Failed to create hotspot.");
 8000762:	4815      	ldr	r0, [pc, #84]	@ (80007b8 <setupESP32Hotspot+0xa4>)
 8000764:	f7ff ff32 	bl	80005cc <println>
    }

    if (sendToESP("AT+CWDHCP=2,1")) {
 8000768:	4814      	ldr	r0, [pc, #80]	@ (80007bc <setupESP32Hotspot+0xa8>)
 800076a:	f7ff ff3f 	bl	80005ec <sendToESP>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d003      	beq.n	800077c <setupESP32Hotspot+0x68>
    	println("DHCP server enabled.");
 8000774:	4812      	ldr	r0, [pc, #72]	@ (80007c0 <setupESP32Hotspot+0xac>)
 8000776:	f7ff ff29 	bl	80005cc <println>
 800077a:	e002      	b.n	8000782 <setupESP32Hotspot+0x6e>
    } else {
        printf("Failed to enable DHCP.");
 800077c:	4811      	ldr	r0, [pc, #68]	@ (80007c4 <setupESP32Hotspot+0xb0>)
 800077e:	f00e fa19 	bl	800ebb4 <iprintf>
    }

    if (sendToESP("AT+CWLIF")) {
 8000782:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <setupESP32Hotspot+0xb4>)
 8000784:	f7ff ff32 	bl	80005ec <sendToESP>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d002      	beq.n	8000794 <setupESP32Hotspot+0x80>
    	println("Checking connected clients...");
 800078e:	480f      	ldr	r0, [pc, #60]	@ (80007cc <setupESP32Hotspot+0xb8>)
 8000790:	f7ff ff1c 	bl	80005cc <println>
    }
}
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	0800fb80 	.word	0x0800fb80
 800079c:	0800fb84 	.word	0x0800fb84
 80007a0:	0800fbb8 	.word	0x0800fbb8
 80007a4:	0800fb9c 	.word	0x0800fb9c
 80007a8:	0800fbc4 	.word	0x0800fbc4
 80007ac:	0800fbdc 	.word	0x0800fbdc
 80007b0:	0800fbf8 	.word	0x0800fbf8
 80007b4:	0800fc20 	.word	0x0800fc20
 80007b8:	0800fc40 	.word	0x0800fc40
 80007bc:	0800fc5c 	.word	0x0800fc5c
 80007c0:	0800fc6c 	.word	0x0800fc6c
 80007c4:	0800fc84 	.word	0x0800fc84
 80007c8:	0800fc9c 	.word	0x0800fc9c
 80007cc:	0800fca8 	.word	0x0800fca8

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f001 fc88 	bl	80020e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f82e 	bl	8000838 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007dc:	f000 f89e 	bl	800091c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f000 fcbe 	bl	8001160 <MX_GPIO_Init>
  MX_CRC_Init();
 80007e4:	f000 f8c6 	bl	8000974 <MX_CRC_Init>
  MX_DMA2D_Init();
 80007e8:	f000 f8d8 	bl	800099c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80007ec:	f000 f908 	bl	8000a00 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 80007f0:	f000 fc66 	bl	80010c0 <MX_FMC_Init>
  MX_I2C1_Init();
 80007f4:	f000 fa04 	bl	8000c00 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007f8:	f000 fa30 	bl	8000c5c <MX_I2C2_Init>
  MX_LTDC_Init();
 80007fc:	f000 fa5c 	bl	8000cb8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000800:	f000 fad8 	bl	8000db4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000804:	f000 fb02 	bl	8000e0c <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8000808:	f000 fb5e 	bl	8000ec8 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800080c:	f000 fbb4 	bl	8000f78 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000810:	f000 fc02 	bl	8001018 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000814:	f000 fc2a 	bl	800106c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000818:	f00b fac8 	bl	800bdac <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800081c:	f00d fd40 	bl	800e2a0 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 8000820:	f000 fb74 	bl	8000f0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setupESP32Hotspot();
 8000824:	f7ff ff76 	bl	8000714 <setupESP32Hotspot>
      if (HAL_SPI_Receive(&hspi1, spi_rx_buffer, BUFFER_SIZE, HAL_MAX_DELAY) == HAL_OK)
      {

      }*/
	  //sendTextSPI("HALLO");
      HAL_Delay(1000);
 8000828:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800082c:	f001 fc9e 	bl	800216c <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000830:	f00d fd5c 	bl	800e2ec <MX_USB_HOST_Process>
      HAL_Delay(1000);
 8000834:	bf00      	nop
 8000836:	e7f7      	b.n	8000828 <main+0x58>

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	@ 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	2234      	movs	r2, #52	@ 0x34
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f00e fa3d 	bl	800ecc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b2c      	ldr	r3, [pc, #176]	@ (8000914 <SystemClock_Config+0xdc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	4a2b      	ldr	r2, [pc, #172]	@ (8000914 <SystemClock_Config+0xdc>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	@ 0x40
 800086c:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <SystemClock_Config+0xdc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <SystemClock_Config+0xe0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a25      	ldr	r2, [pc, #148]	@ (8000918 <SystemClock_Config+0xe0>)
 8000882:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <SystemClock_Config+0xe0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000898:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80008ac:	23b4      	movs	r3, #180	@ 0xb4
 80008ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80008b4:	2306      	movs	r3, #6
 80008b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 80008b8:	2306      	movs	r3, #6
 80008ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4618      	mov	r0, r3
 80008c2:	f006 fac9 	bl	8006e58 <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008cc:	f000 fde6 	bl	800149c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008d0:	f005 fd20 	bl	8006314 <HAL_PWREx_EnableOverDrive>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008da:	f000 fddf 	bl	800149c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	230f      	movs	r3, #15
 80008e0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2302      	movs	r3, #2
 80008e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2105      	movs	r1, #5
 80008fc:	4618      	mov	r0, r3
 80008fe:	f005 fe1b 	bl	8006538 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000908:	f000 fdc8 	bl	800149c <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3750      	adds	r7, #80	@ 0x50
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40007000 	.word	0x40007000

0800091c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b090      	sub	sp, #64	@ 0x40
 8000920:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	223c      	movs	r2, #60	@ 0x3c
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f00e f9cc 	bl	800ecc6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800092e:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8000932:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000934:	2390      	movs	r3, #144	@ 0x90
 8000936:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800093c:	2302      	movs	r3, #2
 800093e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000940:	2306      	movs	r3, #6
 8000942:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000948:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800094e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000954:	2300      	movs	r3, #0
 8000956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4618      	mov	r0, r3
 800095c:	f006 f83e 	bl	80069dc <HAL_RCCEx_PeriphCLKConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000966:	f000 fd99 	bl	800149c <Error_Handler>
  }
}
 800096a:	bf00      	nop
 800096c:	3740      	adds	r7, #64	@ 0x40
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_CRC_Init+0x20>)
 800097a:	4a07      	ldr	r2, [pc, #28]	@ (8000998 <MX_CRC_Init+0x24>)
 800097c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_CRC_Init+0x20>)
 8000980:	f001 fcfa 	bl	8002378 <HAL_CRC_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800098a:	f000 fd87 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000a4 	.word	0x200000a4
 8000998:	40023000 	.word	0x40023000

0800099c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009a2:	4a16      	ldr	r2, [pc, #88]	@ (80009fc <MX_DMA2D_Init+0x60>)
 80009a4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009d2:	f001 fced 	bl	80023b0 <HAL_DMA2D_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009dc:	f000 fd5e 	bl	800149c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009e0:	2101      	movs	r1, #1
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <MX_DMA2D_Init+0x5c>)
 80009e4:	f001 fe3e 	bl	8002664 <HAL_DMA2D_ConfigLayer>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009ee:	f000 fd55 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000ac 	.word	0x200000ac
 80009fc:	4002b000 	.word	0x4002b000

08000a00 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0aa      	sub	sp, #168	@ 0xa8
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a12:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a16:	2224      	movs	r2, #36	@ 0x24
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00e f953 	bl	800ecc6 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a20:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
 8000a30:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a36:	2234      	movs	r2, #52	@ 0x34
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00e f943 	bl	800ecc6 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	222c      	movs	r2, #44	@ 0x2c
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00e f93d 	bl	800ecc6 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a4e:	4a6b      	ldr	r2, [pc, #428]	@ (8000bfc <MX_DSIHOST_DSI_Init+0x1fc>)
 8000a50:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000a52:	4b69      	ldr	r3, [pc, #420]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000a58:	4b67      	ldr	r3, [pc, #412]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000a5e:	4b66      	ldr	r3, [pc, #408]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000a64:	237d      	movs	r3, #125	@ 0x7d
 8000a66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000a76:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	485e      	ldr	r0, [pc, #376]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000a7e:	f001 fe83 	bl	8002788 <HAL_DSI_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000a88:	f000 fd08 	bl	800149c <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000abe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	484c      	ldr	r0, [pc, #304]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ac6:	f002 fb73 	bl	80031b0 <HAL_DSI_ConfigHostTimeouts>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000ad0:	f000 fce4 	bl	800149c <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000ad4:	231c      	movs	r3, #28
 8000ad6:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000ad8:	2321      	movs	r3, #33	@ 0x21
 8000ada:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000adc:	230f      	movs	r3, #15
 8000ade:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000ae0:	2319      	movs	r3, #25
 8000ae2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000aec:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000af0:	4619      	mov	r1, r3
 8000af2:	4841      	ldr	r0, [pc, #260]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000af4:	f002 faf2 	bl	80030dc <HAL_DSI_ConfigPhyTimer>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000afe:	f000 fccd 	bl	800149c <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b02:	2104      	movs	r1, #4
 8000b04:	483c      	ldr	r0, [pc, #240]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b06:	f002 fac1 	bl	800308c <HAL_DSI_ConfigFlowControl>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000b10:	f000 fcc4 	bl	800149c <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000b14:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000b18:	4837      	ldr	r0, [pc, #220]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b1a:	f002 fc0f 	bl	800333c <HAL_DSI_SetLowPowerRXFilter>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000b24:	f000 fcba 	bl	800149c <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4833      	ldr	r0, [pc, #204]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b2c:	f001 ffac 	bl	8002a88 <HAL_DSI_ConfigErrorMonitor>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b36:	f000 fcb1 	bl	800149c <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000b3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000b40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b44:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000b46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000b4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b50:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000b58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b5c:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000b5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b62:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000b64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b68:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000b6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000b70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b74:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000b76:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000b7a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000b7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b80:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000b86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481a      	ldr	r0, [pc, #104]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b8e:	f002 fa1f 	bl	8002fd0 <HAL_DSI_ConfigCommand>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000b98:	f000 fc80 	bl	800149c <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000ba4:	23c8      	movs	r3, #200	@ 0xc8
 8000ba6:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000bc0:	2340      	movs	r3, #64	@ 0x40
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480a      	ldr	r0, [pc, #40]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bce:	f002 f927 	bl	8002e20 <HAL_DSI_ConfigAdaptedCommandMode>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000bd8:	f000 fc60 	bl	800149c <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000be0:	f002 f8f6 	bl	8002dd0 <HAL_DSI_SetGenericVCID>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000bea:	f000 fc57 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	37a8      	adds	r7, #168	@ 0xa8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000ec 	.word	0x200000ec
 8000bfc:	40016c00 	.word	0x40016c00

08000c00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c06:	4a13      	ldr	r2, [pc, #76]	@ (8000c54 <MX_I2C1_Init+0x54>)
 8000c08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c0c:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <MX_I2C1_Init+0x58>)
 8000c0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	@ (8000c50 <MX_I2C1_Init+0x50>)
 8000c3e:	f004 febd 	bl	80059bc <HAL_I2C_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c48:	f000 fc28 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000108 	.word	0x20000108
 8000c54:	40005400 	.word	0x40005400
 8000c58:	000186a0 	.word	0x000186a0

08000c5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <MX_I2C2_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c68:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <MX_I2C2_Init+0x58>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_I2C2_Init+0x50>)
 8000c9a:	f004 fe8f 	bl	80059bc <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ca4:	f000 fbfa 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000015c 	.word	0x2000015c
 8000cb0:	40005800 	.word	0x40005800
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	@ 0x38
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2234      	movs	r2, #52	@ 0x34
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f00d fffe 	bl	800ecc6 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cca:	4b38      	ldr	r3, [pc, #224]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000ccc:	4a38      	ldr	r2, [pc, #224]	@ (8000db0 <MX_LTDC_Init+0xf8>)
 8000cce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cd0:	4b36      	ldr	r3, [pc, #216]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cdc:	4b33      	ldr	r3, [pc, #204]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000ce8:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000cee:	4b2f      	ldr	r3, [pc, #188]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000d00:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000d02:	22c9      	movs	r2, #201	@ 0xc9
 8000d04:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000d06:	4b29      	ldr	r3, [pc, #164]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000d08:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000d0e:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000d10:	22ca      	movs	r2, #202	@ 0xca
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000d14:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000d16:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d24:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d34:	481d      	ldr	r0, [pc, #116]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000d36:	f004 ff85 	bl	8005c44 <HAL_LTDC_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000d40:	f000 fbac 	bl	800149c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000d48:	23c8      	movs	r3, #200	@ 0xc8
 8000d4a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000d50:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d54:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d56:	2302      	movs	r3, #2
 8000d58:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d5a:	23ff      	movs	r3, #255	@ 0xff
 8000d5c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d66:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d6c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000d72:	23c8      	movs	r3, #200	@ 0xc8
 8000d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000d76:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_LTDC_Init+0xf4>)
 8000d96:	f005 f8e7 	bl	8005f68 <HAL_LTDC_ConfigLayer>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000da0:	f000 fb7c 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3738      	adds	r7, #56	@ 0x38
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200001b0 	.word	0x200001b0
 8000db0:	40016800 	.word	0x40016800

08000db4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000dba:	4a13      	ldr	r2, [pc, #76]	@ (8000e08 <MX_QUADSPI_Init+0x54>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000dcc:	2210      	movs	r2, #16
 8000dce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000dd2:	2218      	movs	r2, #24
 8000dd4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000dd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ddc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000dde:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000de4:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <MX_QUADSPI_Init+0x50>)
 8000df2:	f005 fadf 	bl	80063b4 <HAL_QSPI_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000dfc:	f000 fb4e 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000258 	.word	0x20000258
 8000e08:	a0001000 	.word	0xa0001000

08000e0c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e10:	4b2a      	ldr	r3, [pc, #168]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e12:	4a2b      	ldr	r2, [pc, #172]	@ (8000ec0 <MX_SAI1_Init+0xb4>)
 8000e14:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e16:	4b29      	ldr	r3, [pc, #164]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e1c:	4b27      	ldr	r3, [pc, #156]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e24:	2240      	movs	r2, #64	@ 0x40
 8000e26:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e28:	4b24      	ldr	r3, [pc, #144]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e34:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e40:	4b1e      	ldr	r3, [pc, #120]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e54:	4a1b      	ldr	r2, [pc, #108]	@ (8000ec4 <MX_SAI1_Init+0xb8>)
 8000e56:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e58:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e64:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000e70:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e72:	2208      	movs	r2, #8
 8000e74:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	@ (8000ebc <MX_SAI1_Init+0xb0>)
 8000ea8:	f006 fa5a 	bl	8007360 <HAL_SAI_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000eb2:	f000 faf3 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200002a4 	.word	0x200002a4
 8000ec0:	40015804 	.word	0x40015804
 8000ec4:	0002ee00 	.word	0x0002ee00

08000ec8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <MX_SDIO_SD_Init+0x3c>)
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <MX_SDIO_SD_Init+0x40>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_SDIO_SD_Init+0x3c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <MX_SDIO_SD_Init+0x3c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <MX_SDIO_SD_Init+0x3c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <MX_SDIO_SD_Init+0x3c>)
 8000ee6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000eea:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <MX_SDIO_SD_Init+0x3c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ef2:	4b04      	ldr	r3, [pc, #16]	@ (8000f04 <MX_SDIO_SD_Init+0x3c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	2000032c 	.word	0x2000032c
 8000f08:	40012c00 	.word	0x40012c00

08000f0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f10:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f12:	4a18      	ldr	r2, [pc, #96]	@ (8000f74 <MX_SPI1_Init+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f16:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f40:	2238      	movs	r2, #56	@ 0x38
 8000f42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f58:	220a      	movs	r2, #10
 8000f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <MX_SPI1_Init+0x64>)
 8000f5e:	f007 fde8 	bl	8008b32 <HAL_SPI_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f68:	f000 fa98 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200003b0 	.word	0x200003b0
 8000f74:	40013000 	.word	0x40013000

08000f78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]
 8000f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f94:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000f96:	4a1f      	ldr	r2, [pc, #124]	@ (8001014 <MX_TIM1_Init+0x9c>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc0:	4813      	ldr	r0, [pc, #76]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000fc2:	f007 fe3f 	bl	8008c44 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000fcc:	f000 fa66 	bl	800149c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000fde:	f007 ffe1 	bl	8008fa4 <HAL_TIM_ConfigClockSource>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000fe8:	f000 fa58 	bl	800149c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_TIM1_Init+0x98>)
 8000ffa:	f008 fa09 	bl	8009410 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001004:	f000 fa4a 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000408 	.word	0x20000408
 8001014:	40010000 	.word	0x40010000

08001018 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <MX_USART3_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001050:	f008 fa6e 	bl	8009530 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 fa1f 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000450 	.word	0x20000450
 8001068:	40004800 	.word	0x40004800

0800106c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <MX_USART6_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <MX_USART6_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001076:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <MX_USART6_UART_Init+0x4c>)
 8001078:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800107c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <MX_USART6_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <MX_USART6_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <MX_USART6_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <MX_USART6_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <MX_USART6_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <MX_USART6_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_USART6_UART_Init+0x4c>)
 80010a4:	f008 fa44 	bl	8009530 <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f000 f9f5 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000498 	.word	0x20000498
 80010bc:	40011400 	.word	0x40011400

080010c0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001158 <MX_FMC_Init+0x98>)
 80010da:	4a20      	ldr	r2, [pc, #128]	@ (800115c <MX_FMC_Init+0x9c>)
 80010dc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <MX_FMC_Init+0x98>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <MX_FMC_Init+0x98>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <MX_FMC_Init+0x98>)
 80010ec:	2204      	movs	r2, #4
 80010ee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <MX_FMC_Init+0x98>)
 80010f2:	2220      	movs	r2, #32
 80010f4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <MX_FMC_Init+0x98>)
 80010f8:	2240      	movs	r2, #64	@ 0x40
 80010fa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <MX_FMC_Init+0x98>)
 80010fe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001102:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <MX_FMC_Init+0x98>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800110a:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <MX_FMC_Init+0x98>)
 800110c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001110:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <MX_FMC_Init+0x98>)
 8001114:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <MX_FMC_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001120:	2302      	movs	r3, #2
 8001122:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001124:	2307      	movs	r3, #7
 8001126:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001128:	2304      	movs	r3, #4
 800112a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800112c:	2307      	movs	r3, #7
 800112e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001130:	2303      	movs	r3, #3
 8001132:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_FMC_Init+0x98>)
 8001142:	f007 fcc2 	bl	8008aca <HAL_SDRAM_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800114c:	f000 f9a6 	bl	800149c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200004e0 	.word	0x200004e0
 800115c:	a0000140 	.word	0xa0000140

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b090      	sub	sp, #64	@ 0x40
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800117a:	4bae      	ldr	r3, [pc, #696]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4aad      	ldr	r2, [pc, #692]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4bab      	ldr	r3, [pc, #684]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
 8001196:	4ba7      	ldr	r3, [pc, #668]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4aa6      	ldr	r2, [pc, #664]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4ba4      	ldr	r3, [pc, #656]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
 80011b2:	4ba0      	ldr	r3, [pc, #640]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a9f      	ldr	r2, [pc, #636]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b9d      	ldr	r3, [pc, #628]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	623b      	str	r3, [r7, #32]
 80011c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
 80011ce:	4b99      	ldr	r3, [pc, #612]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a98      	ldr	r2, [pc, #608]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b96      	ldr	r3, [pc, #600]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	4b92      	ldr	r3, [pc, #584]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a91      	ldr	r2, [pc, #580]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b8f      	ldr	r3, [pc, #572]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011fe:	61bb      	str	r3, [r7, #24]
 8001200:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	4b8b      	ldr	r3, [pc, #556]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a8a      	ldr	r2, [pc, #552]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 800120c:	f043 0308 	orr.w	r3, r3, #8
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b88      	ldr	r3, [pc, #544]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b84      	ldr	r3, [pc, #528]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a83      	ldr	r2, [pc, #524]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b81      	ldr	r3, [pc, #516]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b7d      	ldr	r3, [pc, #500]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a7c      	ldr	r2, [pc, #496]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b7a      	ldr	r3, [pc, #488]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b76      	ldr	r3, [pc, #472]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a75      	ldr	r2, [pc, #468]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b73      	ldr	r3, [pc, #460]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b6f      	ldr	r3, [pc, #444]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a6e      	ldr	r2, [pc, #440]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b6c      	ldr	r3, [pc, #432]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b68      	ldr	r3, [pc, #416]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a67      	ldr	r2, [pc, #412]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 8001298:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b65      	ldr	r3, [pc, #404]	@ (8001434 <MX_GPIO_Init+0x2d4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	210c      	movs	r1, #12
 80012ae:	4862      	ldr	r0, [pc, #392]	@ (8001438 <MX_GPIO_Init+0x2d8>)
 80012b0:	f002 fa36 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2130      	movs	r1, #48	@ 0x30
 80012b8:	4860      	ldr	r0, [pc, #384]	@ (800143c <MX_GPIO_Init+0x2dc>)
 80012ba:	f002 fa31 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2108      	movs	r1, #8
 80012c2:	485f      	ldr	r0, [pc, #380]	@ (8001440 <MX_GPIO_Init+0x2e0>)
 80012c4:	f002 fa2c 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80012c8:	2200      	movs	r2, #0
 80012ca:	2140      	movs	r1, #64	@ 0x40
 80012cc:	485d      	ldr	r0, [pc, #372]	@ (8001444 <MX_GPIO_Init+0x2e4>)
 80012ce:	f002 fa27 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2105      	movs	r1, #5
 80012d6:	485c      	ldr	r0, [pc, #368]	@ (8001448 <MX_GPIO_Init+0x2e8>)
 80012d8:	f002 fa22 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	485a      	ldr	r0, [pc, #360]	@ (800144c <MX_GPIO_Init+0x2ec>)
 80012e2:	f002 fa1d 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2108      	movs	r1, #8
 80012ea:	4859      	ldr	r0, [pc, #356]	@ (8001450 <MX_GPIO_Init+0x2f0>)
 80012ec:	f002 fa18 	bl	8003720 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 80012f0:	230c      	movs	r3, #12
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001300:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001304:	4619      	mov	r1, r3
 8001306:	484c      	ldr	r0, [pc, #304]	@ (8001438 <MX_GPIO_Init+0x2d8>)
 8001308:	f002 f846 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 800130c:	2308      	movs	r3, #8
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800131c:	2306      	movs	r3, #6
 800131e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001320:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001324:	4619      	mov	r1, r3
 8001326:	4848      	ldr	r0, [pc, #288]	@ (8001448 <MX_GPIO_Init+0x2e8>)
 8001328:	f002 f836 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800132c:	2380      	movs	r3, #128	@ 0x80
 800132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001330:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001334:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800133e:	4619      	mov	r1, r3
 8001340:	4841      	ldr	r0, [pc, #260]	@ (8001448 <MX_GPIO_Init+0x2e8>)
 8001342:	f002 f829 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001346:	2330      	movs	r3, #48	@ 0x30
 8001348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800134a:	2311      	movs	r3, #17
 800134c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001356:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800135a:	4619      	mov	r1, r3
 800135c:	4837      	ldr	r0, [pc, #220]	@ (800143c <MX_GPIO_Init+0x2dc>)
 800135e:	f002 f81b 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8001362:	2308      	movs	r3, #8
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001366:	2311      	movs	r3, #17
 8001368:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001376:	4619      	mov	r1, r3
 8001378:	4831      	ldr	r0, [pc, #196]	@ (8001440 <MX_GPIO_Init+0x2e0>)
 800137a:	f002 f80d 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800137e:	2340      	movs	r3, #64	@ 0x40
 8001380:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001382:	2311      	movs	r3, #17
 8001384:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001392:	4619      	mov	r1, r3
 8001394:	482b      	ldr	r0, [pc, #172]	@ (8001444 <MX_GPIO_Init+0x2e4>)
 8001396:	f001 ffff 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 800139a:	2305      	movs	r3, #5
 800139c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ae:	4619      	mov	r1, r3
 80013b0:	4825      	ldr	r0, [pc, #148]	@ (8001448 <MX_GPIO_Init+0x2e8>)
 80013b2:	f001 fff1 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 80013b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013c8:	2302      	movs	r3, #2
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d0:	4619      	mov	r1, r3
 80013d2:	481a      	ldr	r0, [pc, #104]	@ (800143c <MX_GPIO_Init+0x2dc>)
 80013d4:	f001 ffe0 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80013d8:	2304      	movs	r3, #4
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013e8:	4619      	mov	r1, r3
 80013ea:	4816      	ldr	r0, [pc, #88]	@ (8001444 <MX_GPIO_Init+0x2e4>)
 80013ec:	f001 ffd4 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80013f0:	2320      	movs	r3, #32
 80013f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80013fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001402:	4619      	mov	r1, r3
 8001404:	4813      	ldr	r0, [pc, #76]	@ (8001454 <MX_GPIO_Init+0x2f4>)
 8001406:	f001 ffc7 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800140a:	2380      	movs	r3, #128	@ 0x80
 800140c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800141a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800141e:	4619      	mov	r1, r3
 8001420:	480a      	ldr	r0, [pc, #40]	@ (800144c <MX_GPIO_Init+0x2ec>)
 8001422:	f001 ffb9 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001426:	2308      	movs	r3, #8
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	e012      	b.n	8001458 <MX_GPIO_Init+0x2f8>
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40021000 	.word	0x40021000
 800143c:	40020c00 	.word	0x40020c00
 8001440:	40022800 	.word	0x40022800
 8001444:	40021800 	.word	0x40021800
 8001448:	40020400 	.word	0x40020400
 800144c:	40021c00 	.word	0x40021c00
 8001450:	40020000 	.word	0x40020000
 8001454:	40022400 	.word	0x40022400
 8001458:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001462:	4619      	mov	r1, r3
 8001464:	4803      	ldr	r0, [pc, #12]	@ (8001474 <MX_GPIO_Init+0x314>)
 8001466:	f001 ff97 	bl	8003398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146a:	bf00      	nop
 800146c:	3740      	adds	r7, #64	@ 0x40
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40020000 	.word	0x40020000

08001478 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800148a:	f000 fe4f 	bl	800212c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40001000 	.word	0x40001000

0800149c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a0:	b672      	cpsid	i
}
 80014a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <Error_Handler+0x8>

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a08      	ldr	r2, [pc, #32]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <HAL_CRC_MspInit+0x3c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d10d      	bne.n	8001526 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <HAL_CRC_MspInit+0x40>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <HAL_CRC_MspInit+0x40>)
 8001514:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b07      	ldr	r3, [pc, #28]	@ (8001538 <HAL_CRC_MspInit+0x40>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023000 	.word	0x40023000
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0e      	ldr	r2, [pc, #56]	@ (8001584 <HAL_DMA2D_MspInit+0x48>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d115      	bne.n	800157a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <HAL_DMA2D_MspInit+0x4c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <HAL_DMA2D_MspInit+0x4c>)
 8001558:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <HAL_DMA2D_MspInit+0x4c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	205a      	movs	r0, #90	@ 0x5a
 8001570:	f000 fed8 	bl	8002324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001574:	205a      	movs	r0, #90	@ 0x5a
 8001576:	f000 fef1 	bl	800235c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	4002b000 	.word	0x4002b000
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	@ 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <HAL_DSI_MspInit+0x94>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d133      	bne.n	8001616 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <HAL_DSI_MspInit+0x98>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <HAL_DSI_MspInit+0x98>)
 80015b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80015bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015be:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_DSI_MspInit+0x98>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <HAL_DSI_MspInit+0x98>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a14      	ldr	r2, [pc, #80]	@ (8001624 <HAL_DSI_MspInit+0x98>)
 80015d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_DSI_MspInit+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80015e6:	2304      	movs	r3, #4
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80015f6:	230d      	movs	r3, #13
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4809      	ldr	r0, [pc, #36]	@ (8001628 <HAL_DSI_MspInit+0x9c>)
 8001602:	f001 fec9 	bl	8003398 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	205c      	movs	r0, #92	@ 0x5c
 800160c:	f000 fe8a 	bl	8002324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001610:	205c      	movs	r0, #92	@ 0x5c
 8001612:	f000 fea3 	bl	800235c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	@ 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40016c00 	.word	0x40016c00
 8001624:	40023800 	.word	0x40023800
 8001628:	40022400 	.word	0x40022400

0800162c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08c      	sub	sp, #48	@ 0x30
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a32      	ldr	r2, [pc, #200]	@ (8001714 <HAL_I2C_MspInit+0xe8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d12d      	bne.n	80016aa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
 8001652:	4b31      	ldr	r3, [pc, #196]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a30      	ldr	r2, [pc, #192]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 8001658:	f043 0302 	orr.w	r3, r3, #2
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b2e      	ldr	r3, [pc, #184]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	61bb      	str	r3, [r7, #24]
 8001668:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800166a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001670:	2312      	movs	r3, #18
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001674:	2301      	movs	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800167c:	2304      	movs	r3, #4
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	4825      	ldr	r0, [pc, #148]	@ (800171c <HAL_I2C_MspInit+0xf0>)
 8001688:	f001 fe86 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	4a20      	ldr	r2, [pc, #128]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 8001696:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800169a:	6413      	str	r3, [r2, #64]	@ 0x40
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 800169e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016a8:	e030      	b.n	800170c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001720 <HAL_I2C_MspInit+0xf4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d12b      	bne.n	800170c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b4:	2300      	movs	r3, #0
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016bc:	4a16      	ldr	r2, [pc, #88]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 80016be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 80016c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80016d0:	2330      	movs	r3, #48	@ 0x30
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d4:	2312      	movs	r3, #18
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d8:	2301      	movs	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016e0:	2304      	movs	r3, #4
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	480e      	ldr	r0, [pc, #56]	@ (8001724 <HAL_I2C_MspInit+0xf8>)
 80016ec:	f001 fe54 	bl	8003398 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	4a07      	ldr	r2, [pc, #28]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 80016fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_I2C_MspInit+0xec>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	bf00      	nop
 800170e:	3730      	adds	r7, #48	@ 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40005400 	.word	0x40005400
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400
 8001720:	40005800 	.word	0x40005800
 8001724:	40021c00 	.word	0x40021c00

08001728 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0e      	ldr	r2, [pc, #56]	@ (8001770 <HAL_LTDC_MspInit+0x48>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d115      	bne.n	8001766 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <HAL_LTDC_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <HAL_LTDC_MspInit+0x4c>)
 8001744:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001748:	6453      	str	r3, [r2, #68]	@ 0x44
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <HAL_LTDC_MspInit+0x4c>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	2058      	movs	r0, #88	@ 0x58
 800175c:	f000 fde2 	bl	8002324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001760:	2058      	movs	r0, #88	@ 0x58
 8001762:	f000 fdfb 	bl	800235c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40016800 	.word	0x40016800
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	@ 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <HAL_QSPI_MspInit+0xe4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d15b      	bne.n	8001852 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <HAL_QSPI_MspInit+0xe8>)
 80017a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001860 <HAL_QSPI_MspInit+0xe8>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	6393      	str	r3, [r2, #56]	@ 0x38
 80017aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001860 <HAL_QSPI_MspInit+0xe8>)
 80017ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <HAL_QSPI_MspInit+0xe8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a28      	ldr	r2, [pc, #160]	@ (8001860 <HAL_QSPI_MspInit+0xe8>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <HAL_QSPI_MspInit+0xe8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_QSPI_MspInit+0xe8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a21      	ldr	r2, [pc, #132]	@ (8001860 <HAL_QSPI_MspInit+0xe8>)
 80017dc:	f043 0320 	orr.w	r3, r3, #32
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <HAL_QSPI_MspInit+0xe8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80017ee:	2340      	movs	r3, #64	@ 0x40
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80017fe:	230a      	movs	r3, #10
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4816      	ldr	r0, [pc, #88]	@ (8001864 <HAL_QSPI_MspInit+0xec>)
 800180a:	f001 fdc5 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 800180e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001820:	2309      	movs	r3, #9
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	480f      	ldr	r0, [pc, #60]	@ (8001868 <HAL_QSPI_MspInit+0xf0>)
 800182c:	f001 fdb4 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001830:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001836:	2302      	movs	r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001842:	230a      	movs	r3, #10
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4806      	ldr	r0, [pc, #24]	@ (8001868 <HAL_QSPI_MspInit+0xf0>)
 800184e:	f001 fda3 	bl	8003398 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	@ 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	a0001000 	.word	0xa0001000
 8001860:	40023800 	.word	0x40023800
 8001864:	40020400 	.word	0x40020400
 8001868:	40021400 	.word	0x40021400

0800186c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a28      	ldr	r2, [pc, #160]	@ (800192c <HAL_SD_MspInit+0xc0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d14a      	bne.n	8001924 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b27      	ldr	r3, [pc, #156]	@ (8001930 <HAL_SD_MspInit+0xc4>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001896:	4a26      	ldr	r2, [pc, #152]	@ (8001930 <HAL_SD_MspInit+0xc4>)
 8001898:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800189c:	6453      	str	r3, [r2, #68]	@ 0x44
 800189e:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <HAL_SD_MspInit+0xc4>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <HAL_SD_MspInit+0xc4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001930 <HAL_SD_MspInit+0xc4>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001930 <HAL_SD_MspInit+0xc4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_SD_MspInit+0xc4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a18      	ldr	r2, [pc, #96]	@ (8001930 <HAL_SD_MspInit+0xc4>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b16      	ldr	r3, [pc, #88]	@ (8001930 <HAL_SD_MspInit+0xc4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 80018e2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80018e6:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80018f4:	230c      	movs	r3, #12
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	480d      	ldr	r0, [pc, #52]	@ (8001934 <HAL_SD_MspInit+0xc8>)
 8001900:	f001 fd4a 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001904:	2304      	movs	r3, #4
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001914:	230c      	movs	r3, #12
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	@ (8001938 <HAL_SD_MspInit+0xcc>)
 8001920:	f001 fd3a 	bl	8003398 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	@ 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40023800 	.word	0x40023800
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00

0800193c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a28      	ldr	r2, [pc, #160]	@ (80019fc <HAL_SPI_MspInit+0xc0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d149      	bne.n	80019f2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <HAL_SPI_MspInit+0xc4>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a26      	ldr	r2, [pc, #152]	@ (8001a00 <HAL_SPI_MspInit+0xc4>)
 8001968:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b24      	ldr	r3, [pc, #144]	@ (8001a00 <HAL_SPI_MspInit+0xc4>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <HAL_SPI_MspInit+0xc4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	4a1f      	ldr	r2, [pc, #124]	@ (8001a00 <HAL_SPI_MspInit+0xc4>)
 8001984:	f043 0302 	orr.w	r3, r3, #2
 8001988:	6313      	str	r3, [r2, #48]	@ 0x30
 800198a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a00 <HAL_SPI_MspInit+0xc4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_SPI_MspInit+0xc4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	4a18      	ldr	r2, [pc, #96]	@ (8001a00 <HAL_SPI_MspInit+0xc4>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a6:	4b16      	ldr	r3, [pc, #88]	@ (8001a00 <HAL_SPI_MspInit+0xc4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 80019b2:	2330      	movs	r3, #48	@ 0x30
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019c2:	2305      	movs	r3, #5
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	480d      	ldr	r0, [pc, #52]	@ (8001a04 <HAL_SPI_MspInit+0xc8>)
 80019ce:	f001 fce3 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019d2:	2320      	movs	r3, #32
 80019d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019e2:	2305      	movs	r3, #5
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	4619      	mov	r1, r3
 80019ec:	4806      	ldr	r0, [pc, #24]	@ (8001a08 <HAL_SPI_MspInit+0xcc>)
 80019ee:	f001 fcd3 	bl	8003398 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	@ 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40013000 	.word	0x40013000
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020000 	.word	0x40020000

08001a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0b      	ldr	r2, [pc, #44]	@ (8001a48 <HAL_TIM_Base_MspInit+0x3c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10d      	bne.n	8001a3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_TIM_Base_MspInit+0x40>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <HAL_TIM_Base_MspInit+0x40>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2e:	4b07      	ldr	r3, [pc, #28]	@ (8001a4c <HAL_TIM_Base_MspInit+0x40>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40023800 	.word	0x40023800

08001a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08c      	sub	sp, #48	@ 0x30
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a32      	ldr	r2, [pc, #200]	@ (8001b38 <HAL_UART_MspInit+0xe8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12d      	bne.n	8001ace <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	4b31      	ldr	r3, [pc, #196]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	4a30      	ldr	r2, [pc, #192]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a82:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	4b2a      	ldr	r3, [pc, #168]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a29      	ldr	r2, [pc, #164]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b27      	ldr	r3, [pc, #156]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001aaa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001abc:	2307      	movs	r3, #7
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	481e      	ldr	r0, [pc, #120]	@ (8001b40 <HAL_UART_MspInit+0xf0>)
 8001ac8:	f001 fc66 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001acc:	e030      	b.n	8001b30 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART6)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8001b44 <HAL_UART_MspInit+0xf4>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d12b      	bne.n	8001b30 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	4b17      	ldr	r3, [pc, #92]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae0:	4a16      	ldr	r2, [pc, #88]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001ae2:	f043 0320 	orr.w	r3, r3, #32
 8001ae6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aec:	f003 0320 	and.w	r3, r3, #32
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afc:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_UART_MspInit+0xec>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_RX_Pin|ARDUINO_USART6_TX_Pin;
 8001b10:	23c0      	movs	r3, #192	@ 0xc0
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b20:	2308      	movs	r3, #8
 8001b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4807      	ldr	r0, [pc, #28]	@ (8001b48 <HAL_UART_MspInit+0xf8>)
 8001b2c:	f001 fc34 	bl	8003398 <HAL_GPIO_Init>
}
 8001b30:	bf00      	nop
 8001b32:	3730      	adds	r7, #48	@ 0x30
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40004800 	.word	0x40004800
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020400 	.word	0x40020400
 8001b44:	40011400 	.word	0x40011400
 8001b48:	40020800 	.word	0x40020800

08001b4c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b60:	4b44      	ldr	r3, [pc, #272]	@ (8001c74 <HAL_FMC_MspInit+0x128>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 8081 	bne.w	8001c6c <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001b6a:	4b42      	ldr	r3, [pc, #264]	@ (8001c74 <HAL_FMC_MspInit+0x128>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b70:	2300      	movs	r3, #0
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	4b40      	ldr	r3, [pc, #256]	@ (8001c78 <HAL_FMC_MspInit+0x12c>)
 8001b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b78:	4a3f      	ldr	r2, [pc, #252]	@ (8001c78 <HAL_FMC_MspInit+0x12c>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001b80:	4b3d      	ldr	r3, [pc, #244]	@ (8001c78 <HAL_FMC_MspInit+0x12c>)
 8001b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001b8c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001b90:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4835      	ldr	r0, [pc, #212]	@ (8001c7c <HAL_FMC_MspInit+0x130>)
 8001ba8:	f001 fbf6 	bl	8003398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001bac:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001bb0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bbe:	230c      	movs	r3, #12
 8001bc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	482e      	ldr	r0, [pc, #184]	@ (8001c80 <HAL_FMC_MspInit+0x134>)
 8001bc8:	f001 fbe6 	bl	8003398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001bcc:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001bd0:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bde:	230c      	movs	r3, #12
 8001be0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	4619      	mov	r1, r3
 8001be6:	4827      	ldr	r0, [pc, #156]	@ (8001c84 <HAL_FMC_MspInit+0x138>)
 8001be8:	f001 fbd6 	bl	8003398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001bec:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001bf0:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bfe:	230c      	movs	r3, #12
 8001c00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4820      	ldr	r0, [pc, #128]	@ (8001c88 <HAL_FMC_MspInit+0x13c>)
 8001c08:	f001 fbc6 	bl	8003398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001c0c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001c10:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c1e:	230c      	movs	r3, #12
 8001c20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4819      	ldr	r0, [pc, #100]	@ (8001c8c <HAL_FMC_MspInit+0x140>)
 8001c28:	f001 fbb6 	bl	8003398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001c2c:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8001c30:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c3e:	230c      	movs	r3, #12
 8001c40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4812      	ldr	r0, [pc, #72]	@ (8001c90 <HAL_FMC_MspInit+0x144>)
 8001c48:	f001 fba6 	bl	8003398 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c5c:	230c      	movs	r3, #12
 8001c5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	480b      	ldr	r0, [pc, #44]	@ (8001c94 <HAL_FMC_MspInit+0x148>)
 8001c66:	f001 fb97 	bl	8003398 <HAL_GPIO_Init>
 8001c6a:	e000      	b.n	8001c6e <HAL_FMC_MspInit+0x122>
    return;
 8001c6c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000514 	.word	0x20000514
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40021800 	.word	0x40021800
 8001c84:	40020c00 	.word	0x40020c00
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021400 	.word	0x40021400
 8001c90:	40021c00 	.word	0x40021c00
 8001c94:	40020800 	.word	0x40020800

08001c98 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001ca0:	f7ff ff54 	bl	8001b4c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a26      	ldr	r2, [pc, #152]	@ (8001d54 <HAL_SAI_MspInit+0xa8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d146      	bne.n	8001d4c <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001cbe:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <HAL_SAI_MspInit+0xac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_SAI_MspInit+0xb0>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	4a23      	ldr	r2, [pc, #140]	@ (8001d5c <HAL_SAI_MspInit+0xb0>)
 8001cd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd6:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <HAL_SAI_MspInit+0xb0>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_SAI_MspInit+0xac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d58 <HAL_SAI_MspInit+0xac>)
 8001cea:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001cec:	2330      	movs	r3, #48	@ 0x30
 8001cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001cfc:	2306      	movs	r3, #6
 8001cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4619      	mov	r1, r3
 8001d06:	4816      	ldr	r0, [pc, #88]	@ (8001d60 <HAL_SAI_MspInit+0xb4>)
 8001d08:	f001 fb46 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001d0c:	2340      	movs	r3, #64	@ 0x40
 8001d0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d1c:	2306      	movs	r3, #6
 8001d1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	480f      	ldr	r0, [pc, #60]	@ (8001d64 <HAL_SAI_MspInit+0xb8>)
 8001d28:	f001 fb36 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 030c 	add.w	r3, r7, #12
 8001d44:	4619      	mov	r1, r3
 8001d46:	4808      	ldr	r0, [pc, #32]	@ (8001d68 <HAL_SAI_MspInit+0xbc>)
 8001d48:	f001 fb26 	bl	8003398 <HAL_GPIO_Init>

    }
}
 8001d4c:	bf00      	nop
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40015804 	.word	0x40015804
 8001d58:	20000518 	.word	0x20000518
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021800 	.word	0x40021800

08001d6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08e      	sub	sp, #56	@ 0x38
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	4b33      	ldr	r3, [pc, #204]	@ (8001e50 <HAL_InitTick+0xe4>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d84:	4a32      	ldr	r2, [pc, #200]	@ (8001e50 <HAL_InitTick+0xe4>)
 8001d86:	f043 0310 	orr.w	r3, r3, #16
 8001d8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8c:	4b30      	ldr	r3, [pc, #192]	@ (8001e50 <HAL_InitTick+0xe4>)
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d98:	f107 0210 	add.w	r2, r7, #16
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f004 fde8 	bl	8006978 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d103      	bne.n	8001dba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001db2:	f004 fdb9 	bl	8006928 <HAL_RCC_GetPCLK1Freq>
 8001db6:	6378      	str	r0, [r7, #52]	@ 0x34
 8001db8:	e004      	b.n	8001dc4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001dba:	f004 fdb5 	bl	8006928 <HAL_RCC_GetPCLK1Freq>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dc6:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <HAL_InitTick+0xe8>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	0c9b      	lsrs	r3, r3, #18
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dd2:	4b21      	ldr	r3, [pc, #132]	@ (8001e58 <HAL_InitTick+0xec>)
 8001dd4:	4a21      	ldr	r2, [pc, #132]	@ (8001e5c <HAL_InitTick+0xf0>)
 8001dd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e58 <HAL_InitTick+0xec>)
 8001dda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dde:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001de0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e58 <HAL_InitTick+0xec>)
 8001de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001de6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_InitTick+0xec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	@ (8001e58 <HAL_InitTick+0xec>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <HAL_InitTick+0xec>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001df8:	4817      	ldr	r0, [pc, #92]	@ (8001e58 <HAL_InitTick+0xec>)
 8001dfa:	f006 ff23 	bl	8008c44 <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001e04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d11b      	bne.n	8001e44 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e0c:	4812      	ldr	r0, [pc, #72]	@ (8001e58 <HAL_InitTick+0xec>)
 8001e0e:	f006 ff69 	bl	8008ce4 <HAL_TIM_Base_Start_IT>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d111      	bne.n	8001e44 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e20:	2036      	movs	r0, #54	@ 0x36
 8001e22:	f000 fa9b 	bl	800235c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d808      	bhi.n	8001e3e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	2036      	movs	r0, #54	@ 0x36
 8001e32:	f000 fa77 	bl	8002324 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <HAL_InitTick+0xf4>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e002      	b.n	8001e44 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3738      	adds	r7, #56	@ 0x38
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	431bde83 	.word	0x431bde83
 8001e58:	2000051c 	.word	0x2000051c
 8001e5c:	40001000 	.word	0x40001000
 8001e60:	20000004 	.word	0x20000004

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <NMI_Handler+0x4>

08001e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e70:	bf00      	nop
 8001e72:	e7fd      	b.n	8001e70 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <TIM6_DAC_IRQHandler+0x10>)
 8001eca:	f006 ff7b 	bl	8008dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000051c 	.word	0x2000051c

08001ed8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <OTG_FS_IRQHandler+0x10>)
 8001ede:	f001 ff19 	bl	8003d14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000095c 	.word	0x2000095c

08001eec <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001ef0:	4802      	ldr	r0, [pc, #8]	@ (8001efc <LTDC_IRQHandler+0x10>)
 8001ef2:	f003 ff77 	bl	8005de4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200001b0 	.word	0x200001b0

08001f00 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001f04:	4802      	ldr	r0, [pc, #8]	@ (8001f10 <DMA2D_IRQHandler+0x10>)
 8001f06:	f000 fa9c 	bl	8002442 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200000ac 	.word	0x200000ac

08001f14 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001f18:	4802      	ldr	r0, [pc, #8]	@ (8001f24 <DSI_IRQHandler+0x10>)
 8001f1a:	f000 fe72 	bl	8002c02 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200000ec 	.word	0x200000ec

08001f28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	e00a      	b.n	8001f50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f3a:	f3af 8000 	nop.w
 8001f3e:	4601      	mov	r1, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	60ba      	str	r2, [r7, #8]
 8001f46:	b2ca      	uxtb	r2, r1
 8001f48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	dbf0      	blt.n	8001f3a <_read+0x12>
  }

  return len;
 8001f58:	687b      	ldr	r3, [r7, #4]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e009      	b.n	8001f88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbf1      	blt.n	8001f74 <_write+0x12>
  }
  return len;
 8001f90:	687b      	ldr	r3, [r7, #4]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <_close>:

int _close(int file)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <_isatty>:

int _isatty(int file)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800200c:	4a14      	ldr	r2, [pc, #80]	@ (8002060 <_sbrk+0x5c>)
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <_sbrk+0x60>)
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002018:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <_sbrk+0x64>)
 8002022:	4a12      	ldr	r2, [pc, #72]	@ (800206c <_sbrk+0x68>)
 8002024:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	429a      	cmp	r2, r3
 8002032:	d207      	bcs.n	8002044 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002034:	f00c febc 	bl	800edb0 <__errno>
 8002038:	4603      	mov	r3, r0
 800203a:	220c      	movs	r2, #12
 800203c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
 8002042:	e009      	b.n	8002058 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002044:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800204a:	4b07      	ldr	r3, [pc, #28]	@ (8002068 <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <_sbrk+0x64>)
 8002054:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002056:	68fb      	ldr	r3, [r7, #12]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20050000 	.word	0x20050000
 8002064:	00000400 	.word	0x00000400
 8002068:	20000564 	.word	0x20000564
 800206c:	20000e88 	.word	0x20000e88

08002070 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <SystemInit+0x20>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207a:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <SystemInit+0x20>)
 800207c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002080:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002094:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002098:	f7ff ffea 	bl	8002070 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800209c:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800209e:	490d      	ldr	r1, [pc, #52]	@ (80020d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a0:	4a0d      	ldr	r2, [pc, #52]	@ (80020d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a4:	e002      	b.n	80020ac <LoopCopyDataInit>

080020a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020aa:	3304      	adds	r3, #4

080020ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b0:	d3f9      	bcc.n	80020a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020b2:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020b4:	4c0a      	ldr	r4, [pc, #40]	@ (80020e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b8:	e001      	b.n	80020be <LoopFillZerobss>

080020ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020bc:	3204      	adds	r2, #4

080020be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c0:	d3fb      	bcc.n	80020ba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020c2:	f00c fe7b 	bl	800edbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c6:	f7fe fb83 	bl	80007d0 <main>
  bx  lr    
 80020ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80020d8:	0800fd3c 	.word	0x0800fd3c
  ldr r2, =_sbss
 80020dc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80020e0:	20000e88 	.word	0x20000e88

080020e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e4:	e7fe      	b.n	80020e4 <ADC_IRQHandler>
	...

080020e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002128 <HAL_Init+0x40>)
 80020f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <HAL_Init+0x40>)
 80020fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002102:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002104:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a07      	ldr	r2, [pc, #28]	@ (8002128 <HAL_Init+0x40>)
 800210a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002110:	2003      	movs	r0, #3
 8002112:	f000 f8fc 	bl	800230e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002116:	200f      	movs	r0, #15
 8002118:	f7ff fe28 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800211c:	f7ff f9c4 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000008 	.word	0x20000008
 8002150:	20000568 	.word	0x20000568

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000568 	.word	0x20000568

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff ffee 	bl	8002154 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffde 	bl	8002154 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	2b00      	cmp	r3, #0
 8002228:	db0b      	blt.n	8002242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	f003 021f 	and.w	r2, r3, #31
 8002230:	4907      	ldr	r1, [pc, #28]	@ (8002250 <__NVIC_EnableIRQ+0x38>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	db0a      	blt.n	800227e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	b2da      	uxtb	r2, r3
 800226c:	490c      	ldr	r1, [pc, #48]	@ (80022a0 <__NVIC_SetPriority+0x4c>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	0112      	lsls	r2, r2, #4
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	440b      	add	r3, r1
 8002278:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800227c:	e00a      	b.n	8002294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4908      	ldr	r1, [pc, #32]	@ (80022a4 <__NVIC_SetPriority+0x50>)
 8002284:	79fb      	ldrb	r3, [r7, #7]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	3b04      	subs	r3, #4
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	440b      	add	r3, r1
 8002292:	761a      	strb	r2, [r3, #24]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	@ 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43da      	mvns	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	43d9      	mvns	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002300:	4313      	orrs	r3, r2
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	@ 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ff4c 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002336:	f7ff ff61 	bl	80021fc <__NVIC_GetPriorityGrouping>
 800233a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	6978      	ldr	r0, [r7, #20]
 8002342:	f7ff ffb1 	bl	80022a8 <NVIC_EncodePriority>
 8002346:	4602      	mov	r2, r0
 8002348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff80 	bl	8002254 <__NVIC_SetPriority>
}
 8002354:	bf00      	nop
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff54 	bl	8002218 <__NVIC_EnableIRQ>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00e      	b.n	80023a8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	795b      	ldrb	r3, [r3, #5]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff f8ac 	bl	80014f8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e03b      	b.n	800243a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff f8b0 	bl	800153c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002400:	f023 0107 	bic.w	r1, r3, #7
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800241a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68d1      	ldr	r1, [r2, #12]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6812      	ldr	r2, [r2, #0]
 8002426:	430b      	orrs	r3, r1
 8002428:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d026      	beq.n	80024b2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800246a:	2b00      	cmp	r3, #0
 800246c:	d021      	beq.n	80024b2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800247c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002482:	f043 0201 	orr.w	r2, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2201      	movs	r2, #1
 8002490:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2204      	movs	r2, #4
 8002496:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d026      	beq.n	800250a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d021      	beq.n	800250a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024d4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2220      	movs	r2, #32
 80024dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e2:	f043 0202 	orr.w	r2, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d026      	beq.n	8002562 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800251a:	2b00      	cmp	r3, #0
 800251c:	d021      	beq.n	8002562 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800252c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2208      	movs	r2, #8
 8002534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253a:	f043 0204 	orr.w	r2, r3, #4
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2204      	movs	r2, #4
 8002546:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00e      	beq.n	8002594 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002584:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2204      	movs	r2, #4
 800258c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f853 	bl	800263a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d024      	beq.n	80025e8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01f      	beq.n	80025e8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80025b6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2202      	movs	r2, #2
 80025be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01f      	beq.n	8002632 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01a      	beq.n	8002632 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800260a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2210      	movs	r2, #16
 8002612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f80e 	bl	800264e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_DMA2D_ConfigLayer+0x20>
 8002680:	2302      	movs	r3, #2
 8002682:	e079      	b.n	8002778 <HAL_DMA2D_ConfigLayer+0x114>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	3318      	adds	r3, #24
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80026ae:	4b35      	ldr	r3, [pc, #212]	@ (8002784 <HAL_DMA2D_ConfigLayer+0x120>)
 80026b0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b0a      	cmp	r3, #10
 80026b8:	d003      	beq.n	80026c2 <HAL_DMA2D_ConfigLayer+0x5e>
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b09      	cmp	r3, #9
 80026c0:	d107      	bne.n	80026d2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	e005      	b.n	80026de <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	061b      	lsls	r3, r3, #24
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	4313      	orrs	r3, r2
 80026dc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d120      	bne.n	8002726 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	ea02 0103 	and.w	r1, r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b0a      	cmp	r3, #10
 800270c:	d003      	beq.n	8002716 <HAL_DMA2D_ConfigLayer+0xb2>
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b09      	cmp	r3, #9
 8002714:	d127      	bne.n	8002766 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002722:	629a      	str	r2, [r3, #40]	@ 0x28
 8002724:	e01f      	b.n	8002766 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43db      	mvns	r3, r3
 8002730:	ea02 0103 	and.w	r1, r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	430a      	orrs	r2, r1
 800273c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b0a      	cmp	r3, #10
 800274e:	d003      	beq.n	8002758 <HAL_DMA2D_ConfigLayer+0xf4>
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b09      	cmp	r3, #9
 8002756:	d106      	bne.n	8002766 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002764:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	ff03000f 	.word	0xff03000f

08002788 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e16e      	b.n	8002a7a <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7c5b      	ldrb	r3, [r3, #17]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7fe fef0 	bl	800158c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2203      	movs	r2, #3
 80027b0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80027c6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80027d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027da:	f7ff fcbb 	bl	8002154 <HAL_GetTick>
 80027de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80027e0:	e009      	b.n	80027f6 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80027e2:	f7ff fcb7 	bl	8002154 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027f0:	d901      	bls.n	80027f6 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e141      	b.n	8002a7a <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80027fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ed      	beq.n	80027e2 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8002816:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800281a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002832:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800283a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800286e:	2001      	movs	r0, #1
 8002870:	f7ff fc7c 	bl	800216c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002874:	f7ff fc6e 	bl	8002154 <HAL_GetTick>
 8002878:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800287a:	e009      	b.n	8002890 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800287c:	f7ff fc6a 	bl	8002154 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800288a:	d901      	bls.n	8002890 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0f4      	b.n	8002a7a <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0ed      	beq.n	800287c <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028d0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0202 	orr.w	r2, r2, #2
 80028f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0204 	orr.w	r2, r2, #4
 8002908:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0203 	bic.w	r2, r2, #3
 800291c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8002936:	f7ff fc0d 	bl	8002154 <HAL_GetTick>
 800293a:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d123      	bne.n	8002994 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800294c:	e00c      	b.n	8002968 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800294e:	f7ff fc01 	bl	8002154 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800295c:	d904      	bls.n	8002968 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e088      	b.n	8002a7a <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002970:	f003 0314 	and.w	r3, r3, #20
 8002974:	2b14      	cmp	r3, #20
 8002976:	d1ea      	bne.n	800294e <HAL_DSI_Init+0x1c6>
 8002978:	e014      	b.n	80029a4 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800297a:	f7ff fbeb 	bl	8002154 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002988:	d904      	bls.n	8002994 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e072      	b.n	8002a7a <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800299c:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80029a0:	2b94      	cmp	r3, #148	@ 0x94
 80029a2:	d1ea      	bne.n	800297a <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_DSI_Init+0x22a>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	e000      	b.n	80029b4 <HAL_DSI_Init+0x22c>
 80029b2:	2301      	movs	r3, #1
 80029b4:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	4a32      	ldr	r2, [pc, #200]	@ (8002a84 <HAL_DSI_Init+0x2fc>)
 80029ba:	fb03 f202 	mul.w	r2, r3, r2
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	409a      	lsls	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80029ea:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0203 	bic.w	r2, r2, #3
 8002a4e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3728      	adds	r7, #40	@ 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	003d0900 	.word	0x003d0900

08002a88 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7c1b      	ldrb	r3, [r3, #16]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_DSI_ConfigErrorMonitor+0x16>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e0ab      	b.n	8002bf6 <HAL_DSI_ConfigErrorMonitor+0x16e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8002ad8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8002adc:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d009      	beq.n	8002afe <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 8002afa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0202 	orr.w	r2, r2, #2
 8002b36:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d009      	beq.n	8002b58 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 020c 	orr.w	r2, r2, #12
 8002b54:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f003 0320 	and.w	r3, r3, #32
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0210 	orr.w	r2, r2, #16
 8002b72:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0220 	orr.w	r2, r2, #32
 8002b90:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bae:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002bcc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 8002bea:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00f      	beq.n	8002c3a <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d007      	beq.n	8002c3a <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f8ad 	bl	8002d94 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00f      	beq.n	8002c6a <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f89f 	bl	8002da8 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 808c 	beq.w	8002d8c <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002c7c:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002c94:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f043 0202 	orr.w	r2, r3, #2
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f043 0204 	orr.w	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	f043 0208 	orr.w	r2, r3, #8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	f003 030c 	and.w	r3, r3, #12
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f043 0210 	orr.w	r2, r3, #16
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f818 	bl	8002dbc <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7c1b      	ldrb	r3, [r3, #16]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_DSI_SetGenericVCID+0x16>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e016      	b.n	8002e14 <HAL_DSI_SetGenericVCID+0x44>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0203 	bic.w	r2, r2, #3
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7c1b      	ldrb	r3, [r3, #16]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e0c5      	b.n	8002fc2 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0201 	orr.w	r2, r2, #1
 8002e70:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0203 	bic.w	r2, r2, #3
 8002e82:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0207 	bic.w	r2, r2, #7
 8002ea4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6959      	ldr	r1, [r3, #20]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 020f 	bic.w	r2, r2, #15
 8002ed2:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6919      	ldr	r1, [r3, #16]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 020e 	bic.w	r2, r2, #14
 8002ef6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	005a      	lsls	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002f44:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8002f64:	431a      	orrs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0202 	orr.w	r2, r2, #2
 8002fb6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
	...

08002fd0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7c1b      	ldrb	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_DSI_ConfigCommand+0x16>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e049      	b.n	800307a <HAL_DSI_ConfigCommand+0xaa>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4b24      	ldr	r3, [pc, #144]	@ (8003088 <HAL_DSI_ConfigCommand+0xb8>)
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800300a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003010:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003016:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 800301c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003022:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003028:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800302e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003034:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800303a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003040:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003046:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0202 	bic.w	r2, r2, #2
 800305e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	fef080ff 	.word	0xfef080ff

0800308c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7c1b      	ldrb	r3, [r3, #16]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_DSI_ConfigFlowControl+0x16>
 800309e:	2302      	movs	r3, #2
 80030a0:	e016      	b.n	80030d0 <HAL_DSI_ConfigFlowControl+0x44>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 021f 	bic.w	r2, r2, #31
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	7c1b      	ldrb	r3, [r3, #16]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_DSI_ConfigPhyTimer+0x16>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e058      	b.n	80031a4 <HAL_DSI_ConfigPhyTimer+0xc8>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4293      	cmp	r3, r2
 8003102:	bf38      	it	cc
 8003104:	4613      	movcc	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8003118:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	041a      	lsls	r2, r3, #16
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8003146:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003180:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	021a      	lsls	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	7c1b      	ldrb	r3, [r3, #16]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_DSI_ConfigHostTimeouts+0x16>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e0b4      	b.n	8003330 <HAL_DSI_ConfigHostTimeouts+0x180>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80031da:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6899      	ldr	r1, [r3, #8]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	021a      	lsls	r2, r3, #8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b292      	uxth	r2, r2
 80031fc:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	041a      	lsls	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	0c1b      	lsrs	r3, r3, #16
 800321e:	041b      	lsls	r3, r3, #16
 8003220:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	041b      	lsls	r3, r3, #16
 8003242:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	0c1b      	lsrs	r3, r3, #16
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	041b      	lsls	r3, r3, #16
 8003290:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80032ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	699a      	ldr	r2, [r3, #24]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	041b      	lsls	r3, r3, #16
 80032e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6812      	ldr	r2, [r2, #0]
 800330a:	0c1b      	lsrs	r3, r3, #16
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	7c1b      	ldrb	r3, [r3, #16]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800334e:	2302      	movs	r3, #2
 8003350:	e01b      	b.n	800338a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003368:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	065a      	lsls	r2, r3, #25
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	@ 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e177      	b.n	80036a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b4:	2201      	movs	r2, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f040 8166 	bne.w	800369e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d005      	beq.n	80033ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d130      	bne.n	800344c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003420:	2201      	movs	r2, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 0201 	and.w	r2, r3, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b03      	cmp	r3, #3
 8003456:	d017      	beq.n	8003488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d123      	bne.n	80034dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	08da      	lsrs	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3208      	adds	r2, #8
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80c0 	beq.w	800369e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b66      	ldr	r3, [pc, #408]	@ (80036bc <HAL_GPIO_Init+0x324>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003526:	4a65      	ldr	r2, [pc, #404]	@ (80036bc <HAL_GPIO_Init+0x324>)
 8003528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800352c:	6453      	str	r3, [r2, #68]	@ 0x44
 800352e:	4b63      	ldr	r3, [pc, #396]	@ (80036bc <HAL_GPIO_Init+0x324>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353a:	4a61      	ldr	r2, [pc, #388]	@ (80036c0 <HAL_GPIO_Init+0x328>)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a58      	ldr	r2, [pc, #352]	@ (80036c4 <HAL_GPIO_Init+0x32c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d037      	beq.n	80035d6 <HAL_GPIO_Init+0x23e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a57      	ldr	r2, [pc, #348]	@ (80036c8 <HAL_GPIO_Init+0x330>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d031      	beq.n	80035d2 <HAL_GPIO_Init+0x23a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a56      	ldr	r2, [pc, #344]	@ (80036cc <HAL_GPIO_Init+0x334>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02b      	beq.n	80035ce <HAL_GPIO_Init+0x236>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a55      	ldr	r2, [pc, #340]	@ (80036d0 <HAL_GPIO_Init+0x338>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d025      	beq.n	80035ca <HAL_GPIO_Init+0x232>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a54      	ldr	r2, [pc, #336]	@ (80036d4 <HAL_GPIO_Init+0x33c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01f      	beq.n	80035c6 <HAL_GPIO_Init+0x22e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a53      	ldr	r2, [pc, #332]	@ (80036d8 <HAL_GPIO_Init+0x340>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d019      	beq.n	80035c2 <HAL_GPIO_Init+0x22a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a52      	ldr	r2, [pc, #328]	@ (80036dc <HAL_GPIO_Init+0x344>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_GPIO_Init+0x226>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a51      	ldr	r2, [pc, #324]	@ (80036e0 <HAL_GPIO_Init+0x348>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00d      	beq.n	80035ba <HAL_GPIO_Init+0x222>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a50      	ldr	r2, [pc, #320]	@ (80036e4 <HAL_GPIO_Init+0x34c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <HAL_GPIO_Init+0x21e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4f      	ldr	r2, [pc, #316]	@ (80036e8 <HAL_GPIO_Init+0x350>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d101      	bne.n	80035b2 <HAL_GPIO_Init+0x21a>
 80035ae:	2309      	movs	r3, #9
 80035b0:	e012      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035b2:	230a      	movs	r3, #10
 80035b4:	e010      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035b6:	2308      	movs	r3, #8
 80035b8:	e00e      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035ba:	2307      	movs	r3, #7
 80035bc:	e00c      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035be:	2306      	movs	r3, #6
 80035c0:	e00a      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035c2:	2305      	movs	r3, #5
 80035c4:	e008      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035c6:	2304      	movs	r3, #4
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035ca:	2303      	movs	r3, #3
 80035cc:	e004      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e002      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_GPIO_Init+0x240>
 80035d6:	2300      	movs	r3, #0
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	f002 0203 	and.w	r2, r2, #3
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	4093      	lsls	r3, r2
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035e8:	4935      	ldr	r1, [pc, #212]	@ (80036c0 <HAL_GPIO_Init+0x328>)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035f6:	4b3d      	ldr	r3, [pc, #244]	@ (80036ec <HAL_GPIO_Init+0x354>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800361a:	4a34      	ldr	r2, [pc, #208]	@ (80036ec <HAL_GPIO_Init+0x354>)
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003620:	4b32      	ldr	r3, [pc, #200]	@ (80036ec <HAL_GPIO_Init+0x354>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003644:	4a29      	ldr	r2, [pc, #164]	@ (80036ec <HAL_GPIO_Init+0x354>)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800364a:	4b28      	ldr	r3, [pc, #160]	@ (80036ec <HAL_GPIO_Init+0x354>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800366e:	4a1f      	ldr	r2, [pc, #124]	@ (80036ec <HAL_GPIO_Init+0x354>)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003674:	4b1d      	ldr	r3, [pc, #116]	@ (80036ec <HAL_GPIO_Init+0x354>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003698:	4a14      	ldr	r2, [pc, #80]	@ (80036ec <HAL_GPIO_Init+0x354>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3301      	adds	r3, #1
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	f67f ae84 	bls.w	80033b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3724      	adds	r7, #36	@ 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40013800 	.word	0x40013800
 80036c4:	40020000 	.word	0x40020000
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020800 	.word	0x40020800
 80036d0:	40020c00 	.word	0x40020c00
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40021400 	.word	0x40021400
 80036dc:	40021800 	.word	0x40021800
 80036e0:	40021c00 	.word	0x40021c00
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40022400 	.word	0x40022400
 80036ec:	40013c00 	.word	0x40013c00

080036f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
 800370c:	e001      	b.n	8003712 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	807b      	strh	r3, [r7, #2]
 800372c:	4613      	mov	r3, r2
 800372e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003730:	787b      	ldrb	r3, [r7, #1]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003736:	887a      	ldrh	r2, [r7, #2]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800373c:	e003      	b.n	8003746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	041a      	lsls	r2, r3, #16
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	619a      	str	r2, [r3, #24]
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr

08003752 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af02      	add	r7, sp, #8
 8003758:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e059      	b.n	8003818 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f00a fdec 	bl	800e35c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2203      	movs	r2, #3
 8003788:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003792:	d102      	bne.n	800379a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f007 fa17 	bl	800abd2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7c1a      	ldrb	r2, [r3, #16]
 80037ac:	f88d 2000 	strb.w	r2, [sp]
 80037b0:	3304      	adds	r3, #4
 80037b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b4:	f007 f998 	bl	800aae8 <USB_CoreInit>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2202      	movs	r2, #2
 80037c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e026      	b.n	8003818 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2101      	movs	r1, #1
 80037d0:	4618      	mov	r0, r3
 80037d2:	f007 fa0f 	bl	800abf4 <USB_SetCurrentMode>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e017      	b.n	8003818 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6818      	ldr	r0, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	7c1a      	ldrb	r2, [r3, #16]
 80037f0:	f88d 2000 	strb.w	r2, [sp]
 80037f4:	3304      	adds	r3, #4
 80037f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037f8:	f007 fbb2 	bl	800af60 <USB_HostInit>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2202      	movs	r2, #2
 8003806:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e004      	b.n	8003818 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b08b      	sub	sp, #44	@ 0x2c
 8003824:	af04      	add	r7, sp, #16
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	4608      	mov	r0, r1
 800382a:	4611      	mov	r1, r2
 800382c:	461a      	mov	r2, r3
 800382e:	4603      	mov	r3, r0
 8003830:	70fb      	strb	r3, [r7, #3]
 8003832:	460b      	mov	r3, r1
 8003834:	70bb      	strb	r3, [r7, #2]
 8003836:	4613      	mov	r3, r2
 8003838:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800383a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800383c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_HCD_HC_Init+0x2c>
 8003848:	2302      	movs	r3, #2
 800384a:	e09d      	b.n	8003988 <HAL_HCD_HC_Init+0x168>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3319      	adds	r3, #25
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3314      	adds	r3, #20
 8003878:	787a      	ldrb	r2, [r7, #1]
 800387a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	3315      	adds	r3, #21
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3326      	adds	r3, #38	@ 0x26
 80038a0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80038a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	78bb      	ldrb	r3, [r7, #2]
 80038aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038ae:	b2d8      	uxtb	r0, r3
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	3316      	adds	r3, #22
 80038be:	4602      	mov	r2, r0
 80038c0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fbc8 	bl	800405c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80038cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da0a      	bge.n	80038ea <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3317      	adds	r3, #23
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]
 80038e8:	e009      	b.n	80038fe <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3317      	adds	r3, #23
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f007 fc84 	bl	800b210 <USB_GetHostSpeed>
 8003908:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800390a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10b      	bne.n	800392a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003912:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_HCD_HC_Init+0x10a>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d104      	bne.n	800392a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2bbc      	cmp	r3, #188	@ 0xbc
 8003924:	d901      	bls.n	800392a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003926:	23bc      	movs	r3, #188	@ 0xbc
 8003928:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	3318      	adds	r3, #24
 800393a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800393e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	b298      	uxth	r0, r3
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3328      	adds	r3, #40	@ 0x28
 8003954:	4602      	mov	r2, r0
 8003956:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	b29b      	uxth	r3, r3
 8003960:	787c      	ldrb	r4, [r7, #1]
 8003962:	78ba      	ldrb	r2, [r7, #2]
 8003964:	78f9      	ldrb	r1, [r7, #3]
 8003966:	9302      	str	r3, [sp, #8]
 8003968:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	4623      	mov	r3, r4
 8003976:	f007 fc73 	bl	800b260 <USB_HC_Init>
 800397a:	4603      	mov	r3, r0
 800397c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
}
 8003988:	4618      	mov	r0, r3
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd90      	pop	{r4, r7, pc}

08003990 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_HCD_HC_Halt+0x1e>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e00f      	b.n	80039ce <HAL_HCD_HC_Halt+0x3e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f008 f805 	bl	800b9ce <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	4608      	mov	r0, r1
 80039e2:	4611      	mov	r1, r2
 80039e4:	461a      	mov	r2, r3
 80039e6:	4603      	mov	r3, r0
 80039e8:	70fb      	strb	r3, [r7, #3]
 80039ea:	460b      	mov	r3, r1
 80039ec:	70bb      	strb	r3, [r7, #2]
 80039ee:	4613      	mov	r3, r2
 80039f0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	3317      	adds	r3, #23
 8003a02:	78ba      	ldrb	r2, [r7, #2]
 8003a04:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	3326      	adds	r3, #38	@ 0x26
 8003a16:	787a      	ldrb	r2, [r7, #1]
 8003a18:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003a1a:	7c3b      	ldrb	r3, [r7, #16]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d114      	bne.n	8003a4a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	332a      	adds	r3, #42	@ 0x2a
 8003a30:	2203      	movs	r2, #3
 8003a32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003a34:	78fa      	ldrb	r2, [r7, #3]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3319      	adds	r3, #25
 8003a44:	7f3a      	ldrb	r2, [r7, #28]
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e009      	b.n	8003a5e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	332a      	adds	r3, #42	@ 0x2a
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003a5e:	787b      	ldrb	r3, [r7, #1]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	f200 8102 	bhi.w	8003c6a <HAL_HCD_HC_SubmitRequest+0x292>
 8003a66:	a201      	add	r2, pc, #4	@ (adr r2, 8003a6c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003c55 	.word	0x08003c55
 8003a74:	08003b41 	.word	0x08003b41
 8003a78:	08003bcb 	.word	0x08003bcb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003a7c:	7c3b      	ldrb	r3, [r7, #16]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	f040 80f5 	bne.w	8003c6e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003a84:	78bb      	ldrb	r3, [r7, #2]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d12d      	bne.n	8003ae6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003a8a:	8b3b      	ldrh	r3, [r7, #24]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d109      	bne.n	8003aa4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	333d      	adds	r3, #61	@ 0x3d
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003aa4:	78fa      	ldrb	r2, [r7, #3]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	333d      	adds	r3, #61	@ 0x3d
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	332a      	adds	r3, #42	@ 0x2a
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003ace:	e0ce      	b.n	8003c6e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	332a      	adds	r3, #42	@ 0x2a
 8003ae0:	2202      	movs	r2, #2
 8003ae2:	701a      	strb	r2, [r3, #0]
      break;
 8003ae4:	e0c3      	b.n	8003c6e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	331a      	adds	r3, #26
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	f040 80b8 	bne.w	8003c6e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	333c      	adds	r3, #60	@ 0x3c
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	332a      	adds	r3, #42	@ 0x2a
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]
      break;
 8003b28:	e0a1      	b.n	8003c6e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	332a      	adds	r3, #42	@ 0x2a
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	701a      	strb	r2, [r3, #0]
      break;
 8003b3e:	e096      	b.n	8003c6e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003b40:	78bb      	ldrb	r3, [r7, #2]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d120      	bne.n	8003b88 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	333d      	adds	r3, #61	@ 0x3d
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b5c:	78fa      	ldrb	r2, [r7, #3]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	332a      	adds	r3, #42	@ 0x2a
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003b70:	e07e      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	332a      	adds	r3, #42	@ 0x2a
 8003b82:	2202      	movs	r2, #2
 8003b84:	701a      	strb	r2, [r3, #0]
      break;
 8003b86:	e073      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	333c      	adds	r3, #60	@ 0x3c
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	332a      	adds	r3, #42	@ 0x2a
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
      break;
 8003bb2:	e05d      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	332a      	adds	r3, #42	@ 0x2a
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	701a      	strb	r2, [r3, #0]
      break;
 8003bc8:	e052      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003bca:	78bb      	ldrb	r3, [r7, #2]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d120      	bne.n	8003c12 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	1a9b      	subs	r3, r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	333d      	adds	r3, #61	@ 0x3d
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	440b      	add	r3, r1
 8003bf4:	332a      	adds	r3, #42	@ 0x2a
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003bfa:	e039      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	332a      	adds	r3, #42	@ 0x2a
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	701a      	strb	r2, [r3, #0]
      break;
 8003c10:	e02e      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	333c      	adds	r3, #60	@ 0x3c
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	332a      	adds	r3, #42	@ 0x2a
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
      break;
 8003c3c:	e018      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	332a      	adds	r3, #42	@ 0x2a
 8003c4e:	2202      	movs	r2, #2
 8003c50:	701a      	strb	r2, [r3, #0]
      break;
 8003c52:	e00d      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	332a      	adds	r3, #42	@ 0x2a
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
      break;
 8003c68:	e002      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e000      	b.n	8003c70 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003c6e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	332c      	adds	r3, #44	@ 0x2c
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	8b39      	ldrh	r1, [r7, #24]
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4403      	add	r3, r0
 8003c94:	3334      	adds	r3, #52	@ 0x34
 8003c96:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003c98:	78fa      	ldrb	r2, [r7, #3]
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	334c      	adds	r3, #76	@ 0x4c
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3338      	adds	r3, #56	@ 0x38
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3315      	adds	r3, #21
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	334d      	adds	r3, #77	@ 0x4d
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	3310      	adds	r3, #16
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	1d19      	adds	r1, r3, #4
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	799b      	ldrb	r3, [r3, #6]
 8003d02:	461a      	mov	r2, r3
 8003d04:	f007 fbd8 	bl	800b4b8 <USB_HC_StartXfer>
 8003d08:	4603      	mov	r3, r0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop

08003d14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f007 f8d8 	bl	800aee0 <USB_GetMode>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	f040 80fb 	bne.w	8003f2e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f007 f89b 	bl	800ae78 <USB_ReadInterrupts>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80f1 	beq.w	8003f2c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f007 f892 	bl	800ae78 <USB_ReadInterrupts>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d5e:	d104      	bne.n	8003d6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003d68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f007 f882 	bl	800ae78 <USB_ReadInterrupts>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d7e:	d104      	bne.n	8003d8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003d88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f007 f872 	bl	800ae78 <USB_ReadInterrupts>
 8003d94:	4603      	mov	r3, r0
 8003d96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d9e:	d104      	bne.n	8003daa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003da8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f007 f862 	bl	800ae78 <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d103      	bne.n	8003dc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f007 f854 	bl	800ae78 <USB_ReadInterrupts>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dda:	d120      	bne.n	8003e1e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003de4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d113      	bne.n	8003e1e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003df6:	2110      	movs	r1, #16
 8003df8:	6938      	ldr	r0, [r7, #16]
 8003dfa:	f006 ff47 	bl	800ac8c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003dfe:	6938      	ldr	r0, [r7, #16]
 8003e00:	f006 ff76 	bl	800acf0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7a5b      	ldrb	r3, [r3, #9]
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d105      	bne.n	8003e18 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	4618      	mov	r0, r3
 8003e14:	f007 f95c 	bl	800b0d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f00a fb1d 	bl	800e458 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f007 f828 	bl	800ae78 <USB_ReadInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e32:	d102      	bne.n	8003e3a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f001 fd4d 	bl	80058d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f007 f81a 	bl	800ae78 <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d106      	bne.n	8003e5c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f00a fae6 	bl	800e420 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2208      	movs	r2, #8
 8003e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f007 f809 	bl	800ae78 <USB_ReadInterrupts>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e70:	d139      	bne.n	8003ee6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f007 fd98 	bl	800b9ac <USB_HC_ReadInterrupt>
 8003e7c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e025      	b.n	8003ed0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d018      	beq.n	8003eca <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eae:	d106      	bne.n	8003ebe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f905 	bl	80040c6 <HCD_HC_IN_IRQHandler>
 8003ebc:	e005      	b.n	8003eca <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 ff67 	bl	8004d98 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	795b      	ldrb	r3, [r3, #5]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d3d3      	bcc.n	8003e84 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f006 ffc4 	bl	800ae78 <USB_ReadInterrupts>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f003 0310 	and.w	r3, r3, #16
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d101      	bne.n	8003efe <HAL_HCD_IRQHandler+0x1ea>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_HCD_IRQHandler+0x1ec>
 8003efe:	2300      	movs	r3, #0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d014      	beq.n	8003f2e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0210 	bic.w	r2, r2, #16
 8003f12:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f001 fbfe 	bl	8005716 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699a      	ldr	r2, [r3, #24]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0210 	orr.w	r2, r2, #16
 8003f28:	619a      	str	r2, [r3, #24]
 8003f2a:	e000      	b.n	8003f2e <HAL_HCD_IRQHandler+0x21a>
      return;
 8003f2c:	bf00      	nop
    }
  }
}
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_HCD_Start+0x16>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e013      	b.n	8003f72 <HAL_HCD_Start+0x3e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2101      	movs	r1, #1
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f007 f920 	bl	800b19e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f006 fe24 	bl	800abb0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_HCD_Stop+0x16>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e00d      	b.n	8003fac <HAL_HCD_Stop+0x32>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f007 fe73 	bl	800bc88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f007 f8c2 	bl	800b14a <USB_ResetPort>
 8003fc6:	4603      	mov	r3, r0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	1a9b      	subs	r3, r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	334c      	adds	r3, #76	@ 0x4c
 8003fec:	781b      	ldrb	r3, [r3, #0]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3338      	adds	r3, #56	@ 0x38
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f007 f904 	bl	800b23e <USB_GetCurrentFrame>
 8004036:	4603      	mov	r3, r0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f007 f8df 	bl	800b210 <USB_GetHostSpeed>
 8004052:	4603      	mov	r3, r0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	331a      	adds	r3, #26
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	331b      	adds	r3, #27
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3325      	adds	r3, #37	@ 0x25
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	3324      	adds	r3, #36	@ 0x24
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b086      	sub	sp, #24
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f006 feda 	bl	800ae9e <USB_ReadChInterrupts>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d11a      	bne.n	800412a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004100:	461a      	mov	r2, r3
 8004102:	2304      	movs	r3, #4
 8004104:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	334d      	adds	r3, #77	@ 0x4d
 8004116:	2207      	movs	r2, #7
 8004118:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f007 fc53 	bl	800b9ce <USB_HC_Halt>
 8004128:	e09e      	b.n	8004268 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f006 feb3 	bl	800ae9e <USB_ReadChInterrupts>
 8004138:	4603      	mov	r3, r0
 800413a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004142:	d11b      	bne.n	800417c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004156:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	334d      	adds	r3, #77	@ 0x4d
 8004168:	2208      	movs	r2, #8
 800416a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f007 fc2a 	bl	800b9ce <USB_HC_Halt>
 800417a:	e075      	b.n	8004268 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f006 fe8a 	bl	800ae9e <USB_ReadChInterrupts>
 800418a:	4603      	mov	r3, r0
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b08      	cmp	r3, #8
 8004192:	d11a      	bne.n	80041ca <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4413      	add	r3, r2
 800419c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a0:	461a      	mov	r2, r3
 80041a2:	2308      	movs	r3, #8
 80041a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	4613      	mov	r3, r2
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	440b      	add	r3, r1
 80041b4:	334d      	adds	r3, #77	@ 0x4d
 80041b6:	2206      	movs	r2, #6
 80041b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f007 fc03 	bl	800b9ce <USB_HC_Halt>
 80041c8:	e04e      	b.n	8004268 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f006 fe63 	bl	800ae9e <USB_ReadChInterrupts>
 80041d8:	4603      	mov	r3, r0
 80041da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e2:	d11b      	bne.n	800421c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f0:	461a      	mov	r2, r3
 80041f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	334d      	adds	r3, #77	@ 0x4d
 8004208:	2209      	movs	r2, #9
 800420a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	4611      	mov	r1, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f007 fbda 	bl	800b9ce <USB_HC_Halt>
 800421a:	e025      	b.n	8004268 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f006 fe3a 	bl	800ae9e <USB_ReadChInterrupts>
 800422a:	4603      	mov	r3, r0
 800422c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004230:	2b80      	cmp	r3, #128	@ 0x80
 8004232:	d119      	bne.n	8004268 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4413      	add	r3, r2
 800423c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004240:	461a      	mov	r2, r3
 8004242:	2380      	movs	r3, #128	@ 0x80
 8004244:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	334d      	adds	r3, #77	@ 0x4d
 8004256:	2207      	movs	r2, #7
 8004258:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f007 fbb3 	bl	800b9ce <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	4611      	mov	r1, r2
 8004270:	4618      	mov	r0, r3
 8004272:	f006 fe14 	bl	800ae9e <USB_ReadChInterrupts>
 8004276:	4603      	mov	r3, r0
 8004278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800427c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004280:	d112      	bne.n	80042a8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f007 fb9f 	bl	800b9ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429c:	461a      	mov	r2, r3
 800429e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042a2:	6093      	str	r3, [r2, #8]
 80042a4:	f000 bd75 	b.w	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	4611      	mov	r1, r2
 80042b0:	4618      	mov	r0, r3
 80042b2:	f006 fdf4 	bl	800ae9e <USB_ReadChInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	f040 8128 	bne.w	8004512 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ce:	461a      	mov	r2, r3
 80042d0:	2320      	movs	r3, #32
 80042d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	331b      	adds	r3, #27
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d119      	bne.n	800431e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	331b      	adds	r3, #27
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4413      	add	r3, r2
 8004306:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	0151      	lsls	r1, r2, #5
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	440a      	add	r2, r1
 8004314:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	799b      	ldrb	r3, [r3, #6]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d01b      	beq.n	800435e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	3330      	adds	r3, #48	@ 0x30
 8004336:	6819      	ldr	r1, [r3, #0]
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	4413      	add	r3, r2
 8004340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	1ac9      	subs	r1, r1, r3
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4403      	add	r3, r0
 800435a:	3338      	adds	r3, #56	@ 0x38
 800435c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	334d      	adds	r3, #77	@ 0x4d
 800436e:	2201      	movs	r2, #1
 8004370:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	3344      	adds	r3, #68	@ 0x44
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	2301      	movs	r3, #1
 8004396:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004398:	78fa      	ldrb	r2, [r7, #3]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	3326      	adds	r3, #38	@ 0x26
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3326      	adds	r3, #38	@ 0x26
 80043be:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d110      	bne.n	80043e6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	78fa      	ldrb	r2, [r7, #3]
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f007 fafe 	bl	800b9ce <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043de:	461a      	mov	r2, r3
 80043e0:	2310      	movs	r3, #16
 80043e2:	6093      	str	r3, [r2, #8]
 80043e4:	e03d      	b.n	8004462 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	3326      	adds	r3, #38	@ 0x26
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d00a      	beq.n	8004412 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	3326      	adds	r3, #38	@ 0x26
 800440c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800440e:	2b01      	cmp	r3, #1
 8004410:	d127      	bne.n	8004462 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4413      	add	r3, r2
 800441a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	440a      	add	r2, r1
 8004428:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800442c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004430:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	334c      	adds	r3, #76	@ 0x4c
 8004442:	2201      	movs	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	334c      	adds	r3, #76	@ 0x4c
 8004456:	781a      	ldrb	r2, [r3, #0]
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f00a f809 	bl	800e474 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	799b      	ldrb	r3, [r3, #6]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d13b      	bne.n	80044e2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	3338      	adds	r3, #56	@ 0x38
 800447a:	6819      	ldr	r1, [r3, #0]
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4403      	add	r3, r0
 800448a:	3328      	adds	r3, #40	@ 0x28
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	440b      	add	r3, r1
 8004490:	1e59      	subs	r1, r3, #1
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4403      	add	r3, r0
 80044a0:	3328      	adds	r3, #40	@ 0x28
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 8470 	beq.w	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80044b2:	78fa      	ldrb	r2, [r7, #3]
 80044b4:	6879      	ldr	r1, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	333c      	adds	r3, #60	@ 0x3c
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	f083 0301 	eor.w	r3, r3, #1
 80044ca:	b2d8      	uxtb	r0, r3
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	333c      	adds	r3, #60	@ 0x3c
 80044da:	4602      	mov	r2, r0
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	f000 bc58 	b.w	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	333c      	adds	r3, #60	@ 0x3c
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	f083 0301 	eor.w	r3, r3, #1
 80044fa:	b2d8      	uxtb	r0, r3
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	333c      	adds	r3, #60	@ 0x3c
 800450a:	4602      	mov	r2, r0
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	f000 bc40 	b.w	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f006 fcbf 	bl	800ae9e <USB_ReadChInterrupts>
 8004520:	4603      	mov	r3, r0
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b20      	cmp	r3, #32
 8004528:	d131      	bne.n	800458e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4413      	add	r3, r2
 8004532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004536:	461a      	mov	r2, r3
 8004538:	2320      	movs	r3, #32
 800453a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	331a      	adds	r3, #26
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	2b01      	cmp	r3, #1
 8004550:	f040 841f 	bne.w	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	331b      	adds	r3, #27
 8004564:	2201      	movs	r2, #1
 8004566:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	334d      	adds	r3, #77	@ 0x4d
 8004578:	2203      	movs	r2, #3
 800457a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f007 fa22 	bl	800b9ce <USB_HC_Halt>
 800458a:	f000 bc02 	b.w	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	4611      	mov	r1, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f006 fc81 	bl	800ae9e <USB_ReadChInterrupts>
 800459c:	4603      	mov	r3, r0
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	f040 8305 	bne.w	8004bb2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80045a8:	78fb      	ldrb	r3, [r7, #3]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b4:	461a      	mov	r2, r3
 80045b6:	2302      	movs	r3, #2
 80045b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	334d      	adds	r3, #77	@ 0x4d
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d114      	bne.n	80045fa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	334d      	adds	r3, #77	@ 0x4d
 80045e0:	2202      	movs	r2, #2
 80045e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80045e4:	78fa      	ldrb	r2, [r7, #3]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4613      	mov	r3, r2
 80045ea:	011b      	lsls	r3, r3, #4
 80045ec:	1a9b      	subs	r3, r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	334c      	adds	r3, #76	@ 0x4c
 80045f4:	2201      	movs	r2, #1
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e2cc      	b.n	8004b94 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	334d      	adds	r3, #77	@ 0x4d
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b06      	cmp	r3, #6
 800460e:	d114      	bne.n	800463a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	6879      	ldr	r1, [r7, #4]
 8004614:	4613      	mov	r3, r2
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	1a9b      	subs	r3, r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	334d      	adds	r3, #77	@ 0x4d
 8004620:	2202      	movs	r2, #2
 8004622:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334c      	adds	r3, #76	@ 0x4c
 8004634:	2205      	movs	r2, #5
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e2ac      	b.n	8004b94 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	1a9b      	subs	r3, r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	334d      	adds	r3, #77	@ 0x4d
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b07      	cmp	r3, #7
 800464e:	d00b      	beq.n	8004668 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	334d      	adds	r3, #77	@ 0x4d
 8004660:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004662:	2b09      	cmp	r3, #9
 8004664:	f040 80a6 	bne.w	80047b4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	334d      	adds	r3, #77	@ 0x4d
 8004678:	2202      	movs	r2, #2
 800467a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800467c:	78fa      	ldrb	r2, [r7, #3]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	3344      	adds	r3, #68	@ 0x44
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	1c59      	adds	r1, r3, #1
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4403      	add	r3, r0
 800469c:	3344      	adds	r3, #68	@ 0x44
 800469e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046a0:	78fa      	ldrb	r2, [r7, #3]
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	4613      	mov	r3, r2
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	3344      	adds	r3, #68	@ 0x44
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d943      	bls.n	800473e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3344      	adds	r3, #68	@ 0x44
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	4613      	mov	r3, r2
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	440b      	add	r3, r1
 80046d8:	331a      	adds	r3, #26
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d123      	bne.n	8004728 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80046e0:	78fa      	ldrb	r2, [r7, #3]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	331b      	adds	r3, #27
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	331c      	adds	r3, #28
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4413      	add	r3, r2
 8004710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	440a      	add	r2, r1
 800471e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004726:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334c      	adds	r3, #76	@ 0x4c
 8004738:	2204      	movs	r2, #4
 800473a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800473c:	e229      	b.n	8004b92 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	334c      	adds	r3, #76	@ 0x4c
 800474e:	2202      	movs	r2, #2
 8004750:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	3326      	adds	r3, #38	@ 0x26
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00b      	beq.n	8004780 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	3326      	adds	r3, #38	@ 0x26
 8004778:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800477a:	2b02      	cmp	r3, #2
 800477c:	f040 8209 	bne.w	8004b92 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4413      	add	r3, r2
 8004788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004796:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800479e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ac:	461a      	mov	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047b2:	e1ee      	b.n	8004b92 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	334d      	adds	r3, #77	@ 0x4d
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	f040 80c8 	bne.w	800495c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	334d      	adds	r3, #77	@ 0x4d
 80047dc:	2202      	movs	r2, #2
 80047de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	440b      	add	r3, r1
 80047ee:	331b      	adds	r3, #27
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	f040 81ce 	bne.w	8004b94 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	3326      	adds	r3, #38	@ 0x26
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d16b      	bne.n	80048e6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800480e:	78fa      	ldrb	r2, [r7, #3]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	3348      	adds	r3, #72	@ 0x48
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	1c59      	adds	r1, r3, #1
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4403      	add	r3, r0
 800482e:	3348      	adds	r3, #72	@ 0x48
 8004830:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	3348      	adds	r3, #72	@ 0x48
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d943      	bls.n	80048d0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	3348      	adds	r3, #72	@ 0x48
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	331b      	adds	r3, #27
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	3344      	adds	r3, #68	@ 0x44
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d809      	bhi.n	800489a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004886:	78fa      	ldrb	r2, [r7, #3]
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	011b      	lsls	r3, r3, #4
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	331c      	adds	r3, #28
 8004896:	2201      	movs	r2, #1
 8004898:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	78fa      	ldrb	r2, [r7, #3]
 80048aa:	0151      	lsls	r1, r2, #5
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	440a      	add	r2, r1
 80048b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048b8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	334c      	adds	r3, #76	@ 0x4c
 80048ca:	2204      	movs	r2, #4
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	e014      	b.n	80048fa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	334c      	adds	r3, #76	@ 0x4c
 80048e0:	2202      	movs	r2, #2
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	e009      	b.n	80048fa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	334c      	adds	r3, #76	@ 0x4c
 80048f6:	2202      	movs	r2, #2
 80048f8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	3326      	adds	r3, #38	@ 0x26
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	3326      	adds	r3, #38	@ 0x26
 8004920:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004922:	2b02      	cmp	r3, #2
 8004924:	f040 8136 	bne.w	8004b94 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800493e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004946:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004954:	461a      	mov	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e11b      	b.n	8004b94 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	334d      	adds	r3, #77	@ 0x4d
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b03      	cmp	r3, #3
 8004970:	f040 8081 	bne.w	8004a76 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	440b      	add	r3, r1
 8004982:	334d      	adds	r3, #77	@ 0x4d
 8004984:	2202      	movs	r2, #2
 8004986:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004988:	78fa      	ldrb	r2, [r7, #3]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	011b      	lsls	r3, r3, #4
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	331b      	adds	r3, #27
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2b01      	cmp	r3, #1
 800499c:	f040 80fa 	bne.w	8004b94 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	334c      	adds	r3, #76	@ 0x4c
 80049b0:	2202      	movs	r2, #2
 80049b2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80049b4:	78fb      	ldrb	r3, [r7, #3]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	0151      	lsls	r1, r2, #5
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	440a      	add	r2, r1
 80049ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	78fa      	ldrb	r2, [r7, #3]
 80049e4:	0151      	lsls	r1, r2, #5
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	440a      	add	r2, r1
 80049ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049f2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a0e:	f023 0320 	bic.w	r3, r3, #32
 8004a12:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	3326      	adds	r3, #38	@ 0x26
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00b      	beq.n	8004a42 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3326      	adds	r3, #38	@ 0x26
 8004a3a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	f040 80a9 	bne.w	8004b94 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	015a      	lsls	r2, r3, #5
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4413      	add	r3, r2
 8004a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a58:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a60:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e08e      	b.n	8004b94 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	334d      	adds	r3, #77	@ 0x4d
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d143      	bne.n	8004b14 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	334d      	adds	r3, #77	@ 0x4d
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	334c      	adds	r3, #76	@ 0x4c
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3326      	adds	r3, #38	@ 0x26
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3326      	adds	r3, #38	@ 0x26
 8004ada:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d159      	bne.n	8004b94 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004af6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004afe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e03f      	b.n	8004b94 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	334d      	adds	r3, #77	@ 0x4d
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d126      	bne.n	8004b78 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	334d      	adds	r3, #77	@ 0x4d
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3344      	adds	r3, #68	@ 0x44
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	1c59      	adds	r1, r3, #1
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4403      	add	r3, r0
 8004b5e:	3344      	adds	r3, #68	@ 0x44
 8004b60:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b62:	78fa      	ldrb	r2, [r7, #3]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	334c      	adds	r3, #76	@ 0x4c
 8004b72:	2204      	movs	r2, #4
 8004b74:	701a      	strb	r2, [r3, #0]
 8004b76:	e00d      	b.n	8004b94 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004b78:	78fa      	ldrb	r2, [r7, #3]
 8004b7a:	6879      	ldr	r1, [r7, #4]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	334d      	adds	r3, #77	@ 0x4d
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	f000 8100 	beq.w	8004d90 <HCD_HC_IN_IRQHandler+0xcca>
 8004b90:	e000      	b.n	8004b94 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b92:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	1a9b      	subs	r3, r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	334c      	adds	r3, #76	@ 0x4c
 8004ba4:	781a      	ldrb	r2, [r3, #0]
 8004ba6:	78fb      	ldrb	r3, [r7, #3]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f009 fc62 	bl	800e474 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004bb0:	e0ef      	b.n	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f006 f96f 	bl	800ae9e <USB_ReadChInterrupts>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc6:	2b40      	cmp	r3, #64	@ 0x40
 8004bc8:	d12f      	bne.n	8004c2a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2340      	movs	r3, #64	@ 0x40
 8004bda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004bdc:	78fa      	ldrb	r2, [r7, #3]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	334d      	adds	r3, #77	@ 0x4d
 8004bec:	2205      	movs	r2, #5
 8004bee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004bf0:	78fa      	ldrb	r2, [r7, #3]
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	331a      	adds	r3, #26
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	3344      	adds	r3, #68	@ 0x44
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f006 fed3 	bl	800b9ce <USB_HC_Halt>
 8004c28:	e0b3      	b.n	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f006 f933 	bl	800ae9e <USB_ReadChInterrupts>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	f003 0310 	and.w	r3, r3, #16
 8004c3e:	2b10      	cmp	r3, #16
 8004c40:	f040 80a7 	bne.w	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004c44:	78fa      	ldrb	r2, [r7, #3]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	1a9b      	subs	r3, r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	3326      	adds	r3, #38	@ 0x26
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d11b      	bne.n	8004c92 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3344      	adds	r3, #68	@ 0x44
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	334d      	adds	r3, #77	@ 0x4d
 8004c7e:	2204      	movs	r2, #4
 8004c80:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	4611      	mov	r1, r2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f006 fe9f 	bl	800b9ce <USB_HC_Halt>
 8004c90:	e03f      	b.n	8004d12 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3326      	adds	r3, #38	@ 0x26
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3326      	adds	r3, #38	@ 0x26
 8004cb8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d129      	bne.n	8004d12 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3344      	adds	r3, #68	@ 0x44
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	799b      	ldrb	r3, [r3, #6]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HCD_HC_IN_IRQHandler+0xc2a>
 8004cda:	78fa      	ldrb	r2, [r7, #3]
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	1a9b      	subs	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	331b      	adds	r3, #27
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d110      	bne.n	8004d12 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004cf0:	78fa      	ldrb	r2, [r7, #3]
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	440b      	add	r3, r1
 8004cfe:	334d      	adds	r3, #77	@ 0x4d
 8004d00:	2204      	movs	r2, #4
 8004d02:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	78fa      	ldrb	r2, [r7, #3]
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f006 fe5e 	bl	800b9ce <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	4613      	mov	r3, r2
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	1a9b      	subs	r3, r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	440b      	add	r3, r1
 8004d20:	331b      	adds	r3, #27
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d129      	bne.n	8004d7c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	6879      	ldr	r1, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	331b      	adds	r3, #27
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d3c:	78fb      	ldrb	r3, [r7, #3]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d5a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	0151      	lsls	r1, r2, #5
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	440a      	add	r2, r1
 8004d72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d76:	f043 0320 	orr.w	r3, r3, #32
 8004d7a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2310      	movs	r3, #16
 8004d8c:	6093      	str	r3, [r2, #8]
 8004d8e:	e000      	b.n	8004d92 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004d90:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	4611      	mov	r1, r2
 8004db6:	4618      	mov	r0, r3
 8004db8:	f006 f871 	bl	800ae9e <USB_ReadChInterrupts>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d11b      	bne.n	8004dfe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004dd8:	78fa      	ldrb	r2, [r7, #3]
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	1a9b      	subs	r3, r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	334d      	adds	r3, #77	@ 0x4d
 8004de8:	2207      	movs	r2, #7
 8004dea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	78fa      	ldrb	r2, [r7, #3]
 8004df2:	4611      	mov	r1, r2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f006 fdea 	bl	800b9ce <USB_HC_Halt>
 8004dfa:	f000 bc89 	b.w	8005710 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f006 f849 	bl	800ae9e <USB_ReadChInterrupts>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	f040 8082 	bne.w	8004f1c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e18:	78fb      	ldrb	r3, [r7, #3]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e24:	461a      	mov	r2, r3
 8004e26:	2320      	movs	r3, #32
 8004e28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	1a9b      	subs	r3, r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	3319      	adds	r3, #25
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d124      	bne.n	8004e8a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	3319      	adds	r3, #25
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	334c      	adds	r3, #76	@ 0x4c
 8004e64:	2202      	movs	r2, #2
 8004e66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	334d      	adds	r3, #77	@ 0x4d
 8004e78:	2203      	movs	r2, #3
 8004e7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	78fa      	ldrb	r2, [r7, #3]
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f006 fda2 	bl	800b9ce <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004e8a:	78fa      	ldrb	r2, [r7, #3]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	1a9b      	subs	r3, r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	440b      	add	r3, r1
 8004e98:	331a      	adds	r3, #26
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	f040 8437 	bne.w	8005710 <HCD_HC_OUT_IRQHandler+0x978>
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	440b      	add	r3, r1
 8004eb0:	331b      	adds	r3, #27
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 842b 	bne.w	8005710 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004eba:	78fa      	ldrb	r2, [r7, #3]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	3326      	adds	r3, #38	@ 0x26
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d009      	beq.n	8004ee4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	331b      	adds	r3, #27
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	1a9b      	subs	r3, r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	334d      	adds	r3, #77	@ 0x4d
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	4611      	mov	r1, r2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f006 fd64 	bl	800b9ce <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	6879      	ldr	r1, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	3344      	adds	r3, #68	@ 0x44
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e3f9      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f005 ffba 	bl	800ae9e <USB_ReadChInterrupts>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f34:	d111      	bne.n	8004f5a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f42:	461a      	mov	r2, r3
 8004f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f006 fd3b 	bl	800b9ce <USB_HC_Halt>
 8004f58:	e3da      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	4611      	mov	r1, r2
 8004f62:	4618      	mov	r0, r3
 8004f64:	f005 ff9b 	bl	800ae9e <USB_ReadChInterrupts>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d168      	bne.n	8005044 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	3344      	adds	r3, #68	@ 0x44
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f005 ff85 	bl	800ae9e <USB_ReadChInterrupts>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f9a:	2b40      	cmp	r3, #64	@ 0x40
 8004f9c:	d112      	bne.n	8004fc4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004f9e:	78fa      	ldrb	r2, [r7, #3]
 8004fa0:	6879      	ldr	r1, [r7, #4]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	440b      	add	r3, r1
 8004fac:	3319      	adds	r3, #25
 8004fae:	2201      	movs	r2, #1
 8004fb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	2340      	movs	r3, #64	@ 0x40
 8004fc2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	331b      	adds	r3, #27
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d019      	beq.n	800500e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	331b      	adds	r3, #27
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004fee:	78fb      	ldrb	r3, [r7, #3]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	440a      	add	r2, r1
 8005004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800500e:	78fb      	ldrb	r3, [r7, #3]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	4413      	add	r3, r2
 8005016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800501a:	461a      	mov	r2, r3
 800501c:	2301      	movs	r3, #1
 800501e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	334d      	adds	r3, #77	@ 0x4d
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	4611      	mov	r1, r2
 800503c:	4618      	mov	r0, r3
 800503e:	f006 fcc6 	bl	800b9ce <USB_HC_Halt>
 8005042:	e365      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f005 ff26 	bl	800ae9e <USB_ReadChInterrupts>
 8005052:	4603      	mov	r3, r0
 8005054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005058:	2b40      	cmp	r3, #64	@ 0x40
 800505a:	d139      	bne.n	80050d0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	334d      	adds	r3, #77	@ 0x4d
 800506c:	2205      	movs	r2, #5
 800506e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	331a      	adds	r3, #26
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	3319      	adds	r3, #25
 8005096:	2201      	movs	r2, #1
 8005098:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	3344      	adds	r3, #68	@ 0x44
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	78fa      	ldrb	r2, [r7, #3]
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f006 fc89 	bl	800b9ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c8:	461a      	mov	r2, r3
 80050ca:	2340      	movs	r3, #64	@ 0x40
 80050cc:	6093      	str	r3, [r2, #8]
 80050ce:	e31f      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	4611      	mov	r1, r2
 80050d8:	4618      	mov	r0, r3
 80050da:	f005 fee0 	bl	800ae9e <USB_ReadChInterrupts>
 80050de:	4603      	mov	r3, r0
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d11a      	bne.n	800511e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f4:	461a      	mov	r2, r3
 80050f6:	2308      	movs	r3, #8
 80050f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	334d      	adds	r3, #77	@ 0x4d
 800510a:	2206      	movs	r2, #6
 800510c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f006 fc59 	bl	800b9ce <USB_HC_Halt>
 800511c:	e2f8      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	78fa      	ldrb	r2, [r7, #3]
 8005124:	4611      	mov	r1, r2
 8005126:	4618      	mov	r0, r3
 8005128:	f005 feb9 	bl	800ae9e <USB_ReadChInterrupts>
 800512c:	4603      	mov	r3, r0
 800512e:	f003 0310 	and.w	r3, r3, #16
 8005132:	2b10      	cmp	r3, #16
 8005134:	d144      	bne.n	80051c0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3344      	adds	r3, #68	@ 0x44
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	334d      	adds	r3, #77	@ 0x4d
 800515a:	2204      	movs	r2, #4
 800515c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	3319      	adds	r3, #25
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d114      	bne.n	800519e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	3318      	adds	r3, #24
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	1a9b      	subs	r3, r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	440b      	add	r3, r1
 8005198:	3319      	adds	r3, #25
 800519a:	2201      	movs	r2, #1
 800519c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	4611      	mov	r1, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f006 fc11 	bl	800b9ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051b8:	461a      	mov	r2, r3
 80051ba:	2310      	movs	r3, #16
 80051bc:	6093      	str	r3, [r2, #8]
 80051be:	e2a7      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f005 fe68 	bl	800ae9e <USB_ReadChInterrupts>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051d4:	2b80      	cmp	r3, #128	@ 0x80
 80051d6:	f040 8083 	bne.w	80052e0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	799b      	ldrb	r3, [r3, #6]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d111      	bne.n	8005206 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	334d      	adds	r3, #77	@ 0x4d
 80051f2:	2207      	movs	r2, #7
 80051f4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	78fa      	ldrb	r2, [r7, #3]
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f006 fbe5 	bl	800b9ce <USB_HC_Halt>
 8005204:	e062      	b.n	80052cc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	3344      	adds	r3, #68	@ 0x44
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	1c59      	adds	r1, r3, #1
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	4613      	mov	r3, r2
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	1a9b      	subs	r3, r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4403      	add	r3, r0
 8005226:	3344      	adds	r3, #68	@ 0x44
 8005228:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	3344      	adds	r3, #68	@ 0x44
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b02      	cmp	r3, #2
 800523e:	d922      	bls.n	8005286 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	3344      	adds	r3, #68	@ 0x44
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005254:	78fa      	ldrb	r2, [r7, #3]
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	1a9b      	subs	r3, r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	440b      	add	r3, r1
 8005262:	334c      	adds	r3, #76	@ 0x4c
 8005264:	2204      	movs	r2, #4
 8005266:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	334c      	adds	r3, #76	@ 0x4c
 8005278:	781a      	ldrb	r2, [r3, #0]
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	4619      	mov	r1, r3
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f009 f8f8 	bl	800e474 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005284:	e022      	b.n	80052cc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	334c      	adds	r3, #76	@ 0x4c
 8005296:	2202      	movs	r2, #2
 8005298:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052b0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052b8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c6:	461a      	mov	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052d8:	461a      	mov	r2, r3
 80052da:	2380      	movs	r3, #128	@ 0x80
 80052dc:	6093      	str	r3, [r2, #8]
 80052de:	e217      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f005 fdd8 	bl	800ae9e <USB_ReadChInterrupts>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f8:	d11b      	bne.n	8005332 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	334d      	adds	r3, #77	@ 0x4d
 800530a:	2209      	movs	r2, #9
 800530c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	4611      	mov	r1, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f006 fb59 	bl	800b9ce <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005328:	461a      	mov	r2, r3
 800532a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800532e:	6093      	str	r3, [r2, #8]
 8005330:	e1ee      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	78fa      	ldrb	r2, [r7, #3]
 8005338:	4611      	mov	r1, r2
 800533a:	4618      	mov	r0, r3
 800533c:	f005 fdaf 	bl	800ae9e <USB_ReadChInterrupts>
 8005340:	4603      	mov	r3, r0
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b02      	cmp	r3, #2
 8005348:	f040 81df 	bne.w	800570a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4413      	add	r3, r2
 8005354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005358:	461a      	mov	r2, r3
 800535a:	2302      	movs	r3, #2
 800535c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	334d      	adds	r3, #77	@ 0x4d
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b01      	cmp	r3, #1
 8005372:	f040 8093 	bne.w	800549c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	334d      	adds	r3, #77	@ 0x4d
 8005386:	2202      	movs	r2, #2
 8005388:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	334c      	adds	r3, #76	@ 0x4c
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800539e:	78fa      	ldrb	r2, [r7, #3]
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	4613      	mov	r3, r2
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	440b      	add	r3, r1
 80053ac:	3326      	adds	r3, #38	@ 0x26
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d00b      	beq.n	80053cc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80053b4:	78fa      	ldrb	r2, [r7, #3]
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	440b      	add	r3, r1
 80053c2:	3326      	adds	r3, #38	@ 0x26
 80053c4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	f040 8190 	bne.w	80056ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	799b      	ldrb	r3, [r3, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d115      	bne.n	8005400 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80053d4:	78fa      	ldrb	r2, [r7, #3]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	333d      	adds	r3, #61	@ 0x3d
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	78fa      	ldrb	r2, [r7, #3]
 80053e8:	f083 0301 	eor.w	r3, r3, #1
 80053ec:	b2d8      	uxtb	r0, r3
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	333d      	adds	r3, #61	@ 0x3d
 80053fc:	4602      	mov	r2, r0
 80053fe:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	799b      	ldrb	r3, [r3, #6]
 8005404:	2b01      	cmp	r3, #1
 8005406:	f040 8171 	bne.w	80056ec <HCD_HC_OUT_IRQHandler+0x954>
 800540a:	78fa      	ldrb	r2, [r7, #3]
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	3334      	adds	r3, #52	@ 0x34
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8165 	beq.w	80056ec <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	3334      	adds	r3, #52	@ 0x34
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	78fa      	ldrb	r2, [r7, #3]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	4613      	mov	r3, r2
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4403      	add	r3, r0
 8005442:	3328      	adds	r3, #40	@ 0x28
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	440b      	add	r3, r1
 8005448:	1e59      	subs	r1, r3, #1
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4403      	add	r3, r0
 8005458:	3328      	adds	r3, #40	@ 0x28
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005460:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	f000 813f 	beq.w	80056ec <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800546e:	78fa      	ldrb	r2, [r7, #3]
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	4613      	mov	r3, r2
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	440b      	add	r3, r1
 800547c:	333d      	adds	r3, #61	@ 0x3d
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	f083 0301 	eor.w	r3, r3, #1
 8005486:	b2d8      	uxtb	r0, r3
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	333d      	adds	r3, #61	@ 0x3d
 8005496:	4602      	mov	r2, r0
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e127      	b.n	80056ec <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	334d      	adds	r3, #77	@ 0x4d
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d120      	bne.n	80054f4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	334d      	adds	r3, #77	@ 0x4d
 80054c2:	2202      	movs	r2, #2
 80054c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80054c6:	78fa      	ldrb	r2, [r7, #3]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	331b      	adds	r3, #27
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	f040 8107 	bne.w	80056ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80054de:	78fa      	ldrb	r2, [r7, #3]
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	334c      	adds	r3, #76	@ 0x4c
 80054ee:	2202      	movs	r2, #2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	e0fb      	b.n	80056ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	334d      	adds	r3, #77	@ 0x4d
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b04      	cmp	r3, #4
 8005508:	d13a      	bne.n	8005580 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	334d      	adds	r3, #77	@ 0x4d
 800551a:	2202      	movs	r2, #2
 800551c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	4613      	mov	r3, r2
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	334c      	adds	r3, #76	@ 0x4c
 800552e:	2202      	movs	r2, #2
 8005530:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005532:	78fa      	ldrb	r2, [r7, #3]
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	440b      	add	r3, r1
 8005540:	331b      	adds	r3, #27
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b01      	cmp	r3, #1
 8005546:	f040 80d1 	bne.w	80056ec <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	440b      	add	r3, r1
 8005558:	331b      	adds	r3, #27
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800555e:	78fb      	ldrb	r3, [r7, #3]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	440a      	add	r2, r1
 8005574:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005578:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800557c:	6053      	str	r3, [r2, #4]
 800557e:	e0b5      	b.n	80056ec <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	334d      	adds	r3, #77	@ 0x4d
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b05      	cmp	r3, #5
 8005594:	d114      	bne.n	80055c0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005596:	78fa      	ldrb	r2, [r7, #3]
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	334d      	adds	r3, #77	@ 0x4d
 80055a6:	2202      	movs	r2, #2
 80055a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	334c      	adds	r3, #76	@ 0x4c
 80055ba:	2202      	movs	r2, #2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	e095      	b.n	80056ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	1a9b      	subs	r3, r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	334d      	adds	r3, #77	@ 0x4d
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b06      	cmp	r3, #6
 80055d4:	d114      	bne.n	8005600 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	4613      	mov	r3, r2
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	440b      	add	r3, r1
 80055e4:	334d      	adds	r3, #77	@ 0x4d
 80055e6:	2202      	movs	r2, #2
 80055e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80055ea:	78fa      	ldrb	r2, [r7, #3]
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	4613      	mov	r3, r2
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	1a9b      	subs	r3, r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	440b      	add	r3, r1
 80055f8:	334c      	adds	r3, #76	@ 0x4c
 80055fa:	2205      	movs	r2, #5
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	e075      	b.n	80056ec <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	1a9b      	subs	r3, r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	334d      	adds	r3, #77	@ 0x4d
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b07      	cmp	r3, #7
 8005614:	d00a      	beq.n	800562c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005616:	78fa      	ldrb	r2, [r7, #3]
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	4613      	mov	r3, r2
 800561c:	011b      	lsls	r3, r3, #4
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	334d      	adds	r3, #77	@ 0x4d
 8005626:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005628:	2b09      	cmp	r3, #9
 800562a:	d170      	bne.n	800570e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800562c:	78fa      	ldrb	r2, [r7, #3]
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	334d      	adds	r3, #77	@ 0x4d
 800563c:	2202      	movs	r2, #2
 800563e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005640:	78fa      	ldrb	r2, [r7, #3]
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	3344      	adds	r3, #68	@ 0x44
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	1a9b      	subs	r3, r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4403      	add	r3, r0
 8005660:	3344      	adds	r3, #68	@ 0x44
 8005662:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	3344      	adds	r3, #68	@ 0x44
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d914      	bls.n	80056a4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800567a:	78fa      	ldrb	r2, [r7, #3]
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	4613      	mov	r3, r2
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	440b      	add	r3, r1
 8005688:	3344      	adds	r3, #68	@ 0x44
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	334c      	adds	r3, #76	@ 0x4c
 800569e:	2204      	movs	r2, #4
 80056a0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056a2:	e022      	b.n	80056ea <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056a4:	78fa      	ldrb	r2, [r7, #3]
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	1a9b      	subs	r3, r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	334c      	adds	r3, #76	@ 0x4c
 80056b4:	2202      	movs	r2, #2
 80056b6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056ce:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056d6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056e4:	461a      	mov	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056ea:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	334c      	adds	r3, #76	@ 0x4c
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f008 feb6 	bl	800e474 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005708:	e002      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800570a:	bf00      	nop
 800570c:	e000      	b.n	8005710 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800570e:	bf00      	nop
  }
}
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b08a      	sub	sp, #40	@ 0x28
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005726:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	0c5b      	lsrs	r3, r3, #17
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800574a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2b02      	cmp	r3, #2
 8005750:	d004      	beq.n	800575c <HCD_RXQLVL_IRQHandler+0x46>
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b05      	cmp	r3, #5
 8005756:	f000 80b6 	beq.w	80058c6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800575a:	e0b7      	b.n	80058cc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 80b3 	beq.w	80058ca <HCD_RXQLVL_IRQHandler+0x1b4>
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4613      	mov	r3, r2
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	440b      	add	r3, r1
 8005772:	332c      	adds	r3, #44	@ 0x2c
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80a7 	beq.w	80058ca <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4613      	mov	r3, r2
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	1a9b      	subs	r3, r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	440b      	add	r3, r1
 800578a:	3338      	adds	r3, #56	@ 0x38
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	18d1      	adds	r1, r2, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4613      	mov	r3, r2
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4403      	add	r3, r0
 80057a0:	3334      	adds	r3, #52	@ 0x34
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4299      	cmp	r1, r3
 80057a6:	f200 8083 	bhi.w	80058b0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4613      	mov	r3, r2
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	1a9b      	subs	r3, r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	332c      	adds	r3, #44	@ 0x2c
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	b292      	uxth	r2, r2
 80057c4:	4619      	mov	r1, r3
 80057c6:	f005 faff 	bl	800adc8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4613      	mov	r3, r2
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	332c      	adds	r3, #44	@ 0x2c
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	18d1      	adds	r1, r2, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4613      	mov	r3, r2
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	1a9b      	subs	r3, r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4403      	add	r3, r0
 80057ee:	332c      	adds	r3, #44	@ 0x2c
 80057f0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	3338      	adds	r3, #56	@ 0x38
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	18d1      	adds	r1, r2, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4613      	mov	r3, r2
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4403      	add	r3, r0
 8005816:	3338      	adds	r3, #56	@ 0x38
 8005818:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	0cdb      	lsrs	r3, r3, #19
 800582a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800582e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4613      	mov	r3, r2
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	3328      	adds	r3, #40	@ 0x28
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	4293      	cmp	r3, r2
 8005848:	d13f      	bne.n	80058ca <HCD_RXQLVL_IRQHandler+0x1b4>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d03c      	beq.n	80058ca <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	4413      	add	r3, r2
 8005858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005866:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800586e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800587c:	461a      	mov	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	4613      	mov	r3, r2
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	1a9b      	subs	r3, r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	440b      	add	r3, r1
 8005890:	333c      	adds	r3, #60	@ 0x3c
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	f083 0301 	eor.w	r3, r3, #1
 8005898:	b2d8      	uxtb	r0, r3
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4613      	mov	r3, r2
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	333c      	adds	r3, #60	@ 0x3c
 80058aa:	4602      	mov	r2, r0
 80058ac:	701a      	strb	r2, [r3, #0]
      break;
 80058ae:	e00c      	b.n	80058ca <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4613      	mov	r3, r2
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	334c      	adds	r3, #76	@ 0x4c
 80058c0:	2204      	movs	r2, #4
 80058c2:	701a      	strb	r2, [r3, #0]
      break;
 80058c4:	e001      	b.n	80058ca <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80058c6:	bf00      	nop
 80058c8:	e000      	b.n	80058cc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80058ca:	bf00      	nop
  }
}
 80058cc:	bf00      	nop
 80058ce:	3728      	adds	r7, #40	@ 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005900:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d10b      	bne.n	8005924 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	d102      	bne.n	800591c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f008 fd90 	bl	800e43c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f043 0302 	orr.w	r3, r3, #2
 8005922:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b08      	cmp	r3, #8
 800592c:	d132      	bne.n	8005994 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f043 0308 	orr.w	r3, r3, #8
 8005934:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b04      	cmp	r3, #4
 800593e:	d126      	bne.n	800598e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	7a5b      	ldrb	r3, [r3, #9]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d113      	bne.n	8005970 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800594e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005952:	d106      	bne.n	8005962 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2102      	movs	r1, #2
 800595a:	4618      	mov	r0, r3
 800595c:	f005 fbb8 	bl	800b0d0 <USB_InitFSLSPClkSel>
 8005960:	e011      	b.n	8005986 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2101      	movs	r1, #1
 8005968:	4618      	mov	r0, r3
 800596a:	f005 fbb1 	bl	800b0d0 <USB_InitFSLSPClkSel>
 800596e:	e00a      	b.n	8005986 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	79db      	ldrb	r3, [r3, #7]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d106      	bne.n	8005986 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800597e:	461a      	mov	r2, r3
 8005980:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005984:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f008 fd82 	bl	800e490 <HAL_HCD_PortEnabled_Callback>
 800598c:	e002      	b.n	8005994 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f008 fd8c 	bl	800e4ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b20      	cmp	r3, #32
 800599c:	d103      	bne.n	80059a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f043 0320 	orr.w	r3, r3, #32
 80059a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059ac:	461a      	mov	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6013      	str	r3, [r2, #0]
}
 80059b2:	bf00      	nop
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e12b      	b.n	8005c26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d106      	bne.n	80059e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fb fe22 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2224      	movs	r2, #36	@ 0x24
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0201 	bic.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a20:	f000 ff82 	bl	8006928 <HAL_RCC_GetPCLK1Freq>
 8005a24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	4a81      	ldr	r2, [pc, #516]	@ (8005c30 <HAL_I2C_Init+0x274>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d807      	bhi.n	8005a40 <HAL_I2C_Init+0x84>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4a80      	ldr	r2, [pc, #512]	@ (8005c34 <HAL_I2C_Init+0x278>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	bf94      	ite	ls
 8005a38:	2301      	movls	r3, #1
 8005a3a:	2300      	movhi	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e006      	b.n	8005a4e <HAL_I2C_Init+0x92>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4a7d      	ldr	r2, [pc, #500]	@ (8005c38 <HAL_I2C_Init+0x27c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	bf94      	ite	ls
 8005a48:	2301      	movls	r3, #1
 8005a4a:	2300      	movhi	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e0e7      	b.n	8005c26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4a78      	ldr	r2, [pc, #480]	@ (8005c3c <HAL_I2C_Init+0x280>)
 8005a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5e:	0c9b      	lsrs	r3, r3, #18
 8005a60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4a6a      	ldr	r2, [pc, #424]	@ (8005c30 <HAL_I2C_Init+0x274>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d802      	bhi.n	8005a90 <HAL_I2C_Init+0xd4>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	e009      	b.n	8005aa4 <HAL_I2C_Init+0xe8>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
 8005a9a:	4a69      	ldr	r2, [pc, #420]	@ (8005c40 <HAL_I2C_Init+0x284>)
 8005a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa0:	099b      	lsrs	r3, r3, #6
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005ab6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	495c      	ldr	r1, [pc, #368]	@ (8005c30 <HAL_I2C_Init+0x274>)
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	d819      	bhi.n	8005af8 <HAL_I2C_Init+0x13c>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1e59      	subs	r1, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ad2:	1c59      	adds	r1, r3, #1
 8005ad4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005ad8:	400b      	ands	r3, r1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_I2C_Init+0x138>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1e59      	subs	r1, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005aec:	3301      	adds	r3, #1
 8005aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005af2:	e051      	b.n	8005b98 <HAL_I2C_Init+0x1dc>
 8005af4:	2304      	movs	r3, #4
 8005af6:	e04f      	b.n	8005b98 <HAL_I2C_Init+0x1dc>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d111      	bne.n	8005b24 <HAL_I2C_Init+0x168>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	1e58      	subs	r0, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6859      	ldr	r1, [r3, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	440b      	add	r3, r1
 8005b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b12:	3301      	adds	r3, #1
 8005b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bf0c      	ite	eq
 8005b1c:	2301      	moveq	r3, #1
 8005b1e:	2300      	movne	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	e012      	b.n	8005b4a <HAL_I2C_Init+0x18e>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1e58      	subs	r0, r3, #1
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	440b      	add	r3, r1
 8005b32:	0099      	lsls	r1, r3, #2
 8005b34:	440b      	add	r3, r1
 8005b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf0c      	ite	eq
 8005b44:	2301      	moveq	r3, #1
 8005b46:	2300      	movne	r3, #0
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_I2C_Init+0x196>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e022      	b.n	8005b98 <HAL_I2C_Init+0x1dc>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10e      	bne.n	8005b78 <HAL_I2C_Init+0x1bc>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	1e58      	subs	r0, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6859      	ldr	r1, [r3, #4]
 8005b62:	460b      	mov	r3, r1
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	440b      	add	r3, r1
 8005b68:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b76:	e00f      	b.n	8005b98 <HAL_I2C_Init+0x1dc>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1e58      	subs	r0, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6859      	ldr	r1, [r3, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	0099      	lsls	r1, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b8e:	3301      	adds	r3, #1
 8005b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b98:	6879      	ldr	r1, [r7, #4]
 8005b9a:	6809      	ldr	r1, [r1, #0]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005bc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6911      	ldr	r1, [r2, #16]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	68d2      	ldr	r2, [r2, #12]
 8005bd2:	4311      	orrs	r1, r2
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6812      	ldr	r2, [r2, #0]
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	000186a0 	.word	0x000186a0
 8005c34:	001e847f 	.word	0x001e847f
 8005c38:	003d08ff 	.word	0x003d08ff
 8005c3c:	431bde83 	.word	0x431bde83
 8005c40:	10624dd3 	.word	0x10624dd3

08005c44 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e0bf      	b.n	8005dd6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d106      	bne.n	8005c70 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7fb fd5c 	bl	8001728 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	699a      	ldr	r2, [r3, #24]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005c86:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6999      	ldr	r1, [r3, #24]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005c9c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6899      	ldr	r1, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8005de0 <HAL_LTDC_Init+0x19c>)
 8005cb8:	400b      	ands	r3, r1
 8005cba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6899      	ldr	r1, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699a      	ldr	r2, [r3, #24]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68d9      	ldr	r1, [r3, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8005de0 <HAL_LTDC_Init+0x19c>)
 8005ce6:	400b      	ands	r3, r1
 8005ce8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	041b      	lsls	r3, r3, #16
 8005cf0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68d9      	ldr	r1, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1a      	ldr	r2, [r3, #32]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6919      	ldr	r1, [r3, #16]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4b33      	ldr	r3, [pc, #204]	@ (8005de0 <HAL_LTDC_Init+0x19c>)
 8005d14:	400b      	ands	r3, r1
 8005d16:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	041b      	lsls	r3, r3, #16
 8005d1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6919      	ldr	r1, [r3, #16]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	431a      	orrs	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6959      	ldr	r1, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	4b27      	ldr	r3, [pc, #156]	@ (8005de0 <HAL_LTDC_Init+0x19c>)
 8005d42:	400b      	ands	r3, r1
 8005d44:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6959      	ldr	r1, [r3, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005d74:	041b      	lsls	r3, r3, #16
 8005d76:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005d86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0206 	orr.w	r2, r2, #6
 8005db2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	f000f800 	.word	0xf000f800

08005de4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d023      	beq.n	8005e4e <HAL_LTDC_IRQHandler+0x6a>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01e      	beq.n	8005e4e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0204 	bic.w	r2, r2, #4
 8005e1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2204      	movs	r2, #4
 8005e26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e2e:	f043 0201 	orr.w	r2, r3, #1
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f86f 	bl	8005f2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d023      	beq.n	8005ea0 <HAL_LTDC_IRQHandler+0xbc>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d01e      	beq.n	8005ea0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0202 	bic.w	r2, r2, #2
 8005e70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2202      	movs	r2, #2
 8005e78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e80:	f043 0202 	orr.w	r2, r3, #2
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f846 	bl	8005f2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01b      	beq.n	8005ee2 <HAL_LTDC_IRQHandler+0xfe>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d016      	beq.n	8005ee2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f82f 	bl	8005f40 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <HAL_LTDC_IRQHandler+0x140>
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d016      	beq.n	8005f24 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0208 	bic.w	r2, r2, #8
 8005f04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f818 	bl	8005f54 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f68:	b5b0      	push	{r4, r5, r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_LTDC_ConfigLayer+0x1a>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e02c      	b.n	8005fdc <HAL_LTDC_ConfigLayer+0x74>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2134      	movs	r1, #52	@ 0x34
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	461d      	mov	r5, r3
 8005fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f811 	bl	8005fe4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bdb0      	pop	{r4, r5, r7, pc}

08005fe4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b089      	sub	sp, #36	@ 0x24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	0c1b      	lsrs	r3, r3, #16
 8005ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006000:	4413      	add	r3, r2
 8006002:	041b      	lsls	r3, r3, #16
 8006004:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	01db      	lsls	r3, r3, #7
 8006010:	4413      	add	r3, r2
 8006012:	3384      	adds	r3, #132	@ 0x84
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	6812      	ldr	r2, [r2, #0]
 800601a:	4611      	mov	r1, r2
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	01d2      	lsls	r2, r2, #7
 8006020:	440a      	add	r2, r1
 8006022:	3284      	adds	r2, #132	@ 0x84
 8006024:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006028:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	0c1b      	lsrs	r3, r3, #16
 8006036:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800603a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800603c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4619      	mov	r1, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	01db      	lsls	r3, r3, #7
 8006048:	440b      	add	r3, r1
 800604a:	3384      	adds	r3, #132	@ 0x84
 800604c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006052:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	68da      	ldr	r2, [r3, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006062:	4413      	add	r3, r2
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	01db      	lsls	r3, r3, #7
 8006072:	4413      	add	r3, r2
 8006074:	3384      	adds	r3, #132	@ 0x84
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	6812      	ldr	r2, [r2, #0]
 800607c:	4611      	mov	r1, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	01d2      	lsls	r2, r2, #7
 8006082:	440a      	add	r2, r1
 8006084:	3284      	adds	r2, #132	@ 0x84
 8006086:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800608a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800609a:	4413      	add	r3, r2
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4619      	mov	r1, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	01db      	lsls	r3, r3, #7
 80060a8:	440b      	add	r3, r1
 80060aa:	3384      	adds	r3, #132	@ 0x84
 80060ac:	4619      	mov	r1, r3
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	01db      	lsls	r3, r3, #7
 80060be:	4413      	add	r3, r2
 80060c0:	3384      	adds	r3, #132	@ 0x84
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	4611      	mov	r1, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	01d2      	lsls	r2, r2, #7
 80060ce:	440a      	add	r2, r1
 80060d0:	3284      	adds	r2, #132	@ 0x84
 80060d2:	f023 0307 	bic.w	r3, r3, #7
 80060d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	461a      	mov	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	01db      	lsls	r3, r3, #7
 80060e2:	4413      	add	r3, r2
 80060e4:	3384      	adds	r3, #132	@ 0x84
 80060e6:	461a      	mov	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80060fe:	041b      	lsls	r3, r3, #16
 8006100:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	061b      	lsls	r3, r3, #24
 8006108:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	01db      	lsls	r3, r3, #7
 8006114:	4413      	add	r3, r2
 8006116:	3384      	adds	r3, #132	@ 0x84
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	01db      	lsls	r3, r3, #7
 8006124:	4413      	add	r3, r2
 8006126:	3384      	adds	r3, #132	@ 0x84
 8006128:	461a      	mov	r2, r3
 800612a:	2300      	movs	r3, #0
 800612c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006134:	461a      	mov	r2, r3
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	431a      	orrs	r2, r3
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4619      	mov	r1, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	01db      	lsls	r3, r3, #7
 8006148:	440b      	add	r3, r1
 800614a:	3384      	adds	r3, #132	@ 0x84
 800614c:	4619      	mov	r1, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	01db      	lsls	r3, r3, #7
 800615e:	4413      	add	r3, r2
 8006160:	3384      	adds	r3, #132	@ 0x84
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	4611      	mov	r1, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	01d2      	lsls	r2, r2, #7
 800616e:	440a      	add	r2, r1
 8006170:	3284      	adds	r2, #132	@ 0x84
 8006172:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006176:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	461a      	mov	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	01db      	lsls	r3, r3, #7
 8006182:	4413      	add	r3, r2
 8006184:	3384      	adds	r3, #132	@ 0x84
 8006186:	461a      	mov	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	01db      	lsls	r3, r3, #7
 8006198:	4413      	add	r3, r2
 800619a:	3384      	adds	r3, #132	@ 0x84
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	4611      	mov	r1, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	01d2      	lsls	r2, r2, #7
 80061a8:	440a      	add	r2, r1
 80061aa:	3284      	adds	r2, #132	@ 0x84
 80061ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80061b0:	f023 0307 	bic.w	r3, r3, #7
 80061b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	69da      	ldr	r2, [r3, #28]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	68f9      	ldr	r1, [r7, #12]
 80061c0:	6809      	ldr	r1, [r1, #0]
 80061c2:	4608      	mov	r0, r1
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	01c9      	lsls	r1, r1, #7
 80061c8:	4401      	add	r1, r0
 80061ca:	3184      	adds	r1, #132	@ 0x84
 80061cc:	4313      	orrs	r3, r2
 80061ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	01db      	lsls	r3, r3, #7
 80061da:	4413      	add	r3, r2
 80061dc:	3384      	adds	r3, #132	@ 0x84
 80061de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	01db      	lsls	r3, r3, #7
 80061ea:	4413      	add	r3, r2
 80061ec:	3384      	adds	r3, #132	@ 0x84
 80061ee:	461a      	mov	r2, r3
 80061f0:	2300      	movs	r3, #0
 80061f2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	01db      	lsls	r3, r3, #7
 80061fe:	4413      	add	r3, r2
 8006200:	3384      	adds	r3, #132	@ 0x84
 8006202:	461a      	mov	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006212:	2304      	movs	r3, #4
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	e01b      	b.n	8006250 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d102      	bne.n	8006226 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006220:	2303      	movs	r3, #3
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	e014      	b.n	8006250 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b04      	cmp	r3, #4
 800622c:	d00b      	beq.n	8006246 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006232:	2b02      	cmp	r3, #2
 8006234:	d007      	beq.n	8006246 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800623a:	2b03      	cmp	r3, #3
 800623c:	d003      	beq.n	8006246 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006242:	2b07      	cmp	r3, #7
 8006244:	d102      	bne.n	800624c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006246:	2302      	movs	r3, #2
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	e001      	b.n	8006250 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800624c:	2301      	movs	r3, #1
 800624e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	01db      	lsls	r3, r3, #7
 800625a:	4413      	add	r3, r2
 800625c:	3384      	adds	r3, #132	@ 0x84
 800625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	4611      	mov	r1, r2
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	01d2      	lsls	r2, r2, #7
 800626a:	440a      	add	r2, r1
 800626c:	3284      	adds	r2, #132	@ 0x84
 800626e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006272:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	fb02 f303 	mul.w	r3, r2, r3
 800627e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	1acb      	subs	r3, r1, r3
 800628a:	69f9      	ldr	r1, [r7, #28]
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	6809      	ldr	r1, [r1, #0]
 8006296:	4608      	mov	r0, r1
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	01c9      	lsls	r1, r1, #7
 800629c:	4401      	add	r1, r0
 800629e:	3184      	adds	r1, #132	@ 0x84
 80062a0:	4313      	orrs	r3, r2
 80062a2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	01db      	lsls	r3, r3, #7
 80062ae:	4413      	add	r3, r2
 80062b0:	3384      	adds	r3, #132	@ 0x84
 80062b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	4611      	mov	r1, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	01d2      	lsls	r2, r2, #7
 80062be:	440a      	add	r2, r1
 80062c0:	3284      	adds	r2, #132	@ 0x84
 80062c2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80062c6:	f023 0307 	bic.w	r3, r3, #7
 80062ca:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	01db      	lsls	r3, r3, #7
 80062d6:	4413      	add	r3, r2
 80062d8:	3384      	adds	r3, #132	@ 0x84
 80062da:	461a      	mov	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	01db      	lsls	r3, r3, #7
 80062ec:	4413      	add	r3, r2
 80062ee:	3384      	adds	r3, #132	@ 0x84
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	4611      	mov	r1, r2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	01d2      	lsls	r2, r2, #7
 80062fc:	440a      	add	r2, r1
 80062fe:	3284      	adds	r2, #132	@ 0x84
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	6013      	str	r3, [r2, #0]
}
 8006306:	bf00      	nop
 8006308:	3724      	adds	r7, #36	@ 0x24
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
	...

08006314 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800631e:	2300      	movs	r3, #0
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	4b20      	ldr	r3, [pc, #128]	@ (80063a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006326:	4a1f      	ldr	r2, [pc, #124]	@ (80063a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800632c:	6413      	str	r3, [r2, #64]	@ 0x40
 800632e:	4b1d      	ldr	r3, [pc, #116]	@ (80063a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8006330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006336:	603b      	str	r3, [r7, #0]
 8006338:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800633a:	4b1b      	ldr	r3, [pc, #108]	@ (80063a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800633c:	2201      	movs	r2, #1
 800633e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006340:	f7fb ff08 	bl	8002154 <HAL_GetTick>
 8006344:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006346:	e009      	b.n	800635c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006348:	f7fb ff04 	bl	8002154 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006356:	d901      	bls.n	800635c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e01f      	b.n	800639c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800635c:	4b13      	ldr	r3, [pc, #76]	@ (80063ac <HAL_PWREx_EnableOverDrive+0x98>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006368:	d1ee      	bne.n	8006348 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800636a:	4b11      	ldr	r3, [pc, #68]	@ (80063b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800636c:	2201      	movs	r2, #1
 800636e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006370:	f7fb fef0 	bl	8002154 <HAL_GetTick>
 8006374:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006376:	e009      	b.n	800638c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006378:	f7fb feec 	bl	8002154 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006386:	d901      	bls.n	800638c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e007      	b.n	800639c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800638c:	4b07      	ldr	r3, [pc, #28]	@ (80063ac <HAL_PWREx_EnableOverDrive+0x98>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006398:	d1ee      	bne.n	8006378 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40023800 	.word	0x40023800
 80063a8:	420e0040 	.word	0x420e0040
 80063ac:	40007000 	.word	0x40007000
 80063b0:	420e0044 	.word	0x420e0044

080063b4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af02      	add	r7, sp, #8
 80063ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80063bc:	f7fb feca 	bl	8002154 <HAL_GetTick>
 80063c0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e069      	b.n	80064a0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10b      	bne.n	80063f0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fb f9c9 	bl	8001778 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80063e6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f85e 	bl	80064ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	3b01      	subs	r3, #1
 8006400:	021a      	lsls	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	2120      	movs	r1, #32
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f856 	bl	80064c8 <QSPI_WaitFlagStateUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006420:	7afb      	ldrb	r3, [r7, #11]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d137      	bne.n	8006496 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006430:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6852      	ldr	r2, [r2, #4]
 8006438:	0611      	lsls	r1, r2, #24
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	68d2      	ldr	r2, [r2, #12]
 800643e:	4311      	orrs	r1, r2
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	69d2      	ldr	r2, [r2, #28]
 8006444:	4311      	orrs	r1, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6a12      	ldr	r2, [r2, #32]
 800644a:	4311      	orrs	r1, r2
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	430b      	orrs	r3, r1
 8006452:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	4b13      	ldr	r3, [pc, #76]	@ (80064a8 <HAL_QSPI_Init+0xf4>)
 800645c:	4013      	ands	r3, r2
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6912      	ldr	r2, [r2, #16]
 8006462:	0411      	lsls	r1, r2, #16
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	6952      	ldr	r2, [r2, #20]
 8006468:	4311      	orrs	r1, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6992      	ldr	r2, [r2, #24]
 800646e:	4311      	orrs	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	430b      	orrs	r3, r1
 8006476:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f042 0201 	orr.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800649e:	7afb      	ldrb	r3, [r7, #11]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	ffe0f8fe 	.word	0xffe0f8fe

080064ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80064d8:	e01a      	b.n	8006510 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	d016      	beq.n	8006510 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e2:	f7fb fe37 	bl	8002154 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d302      	bcc.n	80064f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10b      	bne.n	8006510 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2204      	movs	r2, #4
 80064fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006504:	f043 0201 	orr.w	r2, r3, #1
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e00e      	b.n	800652e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4013      	ands	r3, r2
 800651a:	2b00      	cmp	r3, #0
 800651c:	bf14      	ite	ne
 800651e:	2301      	movne	r3, #1
 8006520:	2300      	moveq	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	429a      	cmp	r2, r3
 800652a:	d1d6      	bne.n	80064da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e0cc      	b.n	80066e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800654c:	4b68      	ldr	r3, [pc, #416]	@ (80066f0 <HAL_RCC_ClockConfig+0x1b8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d90c      	bls.n	8006574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800655a:	4b65      	ldr	r3, [pc, #404]	@ (80066f0 <HAL_RCC_ClockConfig+0x1b8>)
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006562:	4b63      	ldr	r3, [pc, #396]	@ (80066f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d001      	beq.n	8006574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e0b8      	b.n	80066e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d020      	beq.n	80065c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d005      	beq.n	8006598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800658c:	4b59      	ldr	r3, [pc, #356]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	4a58      	ldr	r2, [pc, #352]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006596:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065a4:	4b53      	ldr	r3, [pc, #332]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	4a52      	ldr	r2, [pc, #328]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065b0:	4b50      	ldr	r3, [pc, #320]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	494d      	ldr	r1, [pc, #308]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d044      	beq.n	8006658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d107      	bne.n	80065e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d6:	4b47      	ldr	r3, [pc, #284]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d119      	bne.n	8006616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e07f      	b.n	80066e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d003      	beq.n	80065f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d107      	bne.n	8006606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f6:	4b3f      	ldr	r3, [pc, #252]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d109      	bne.n	8006616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e06f      	b.n	80066e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006606:	4b3b      	ldr	r3, [pc, #236]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e067      	b.n	80066e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006616:	4b37      	ldr	r3, [pc, #220]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f023 0203 	bic.w	r2, r3, #3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	4934      	ldr	r1, [pc, #208]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006624:	4313      	orrs	r3, r2
 8006626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006628:	f7fb fd94 	bl	8002154 <HAL_GetTick>
 800662c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800662e:	e00a      	b.n	8006646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006630:	f7fb fd90 	bl	8002154 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800663e:	4293      	cmp	r3, r2
 8006640:	d901      	bls.n	8006646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e04f      	b.n	80066e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006646:	4b2b      	ldr	r3, [pc, #172]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 020c 	and.w	r2, r3, #12
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	429a      	cmp	r2, r3
 8006656:	d1eb      	bne.n	8006630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006658:	4b25      	ldr	r3, [pc, #148]	@ (80066f0 <HAL_RCC_ClockConfig+0x1b8>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d20c      	bcs.n	8006680 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006666:	4b22      	ldr	r3, [pc, #136]	@ (80066f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006668:	683a      	ldr	r2, [r7, #0]
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800666e:	4b20      	ldr	r3, [pc, #128]	@ (80066f0 <HAL_RCC_ClockConfig+0x1b8>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d001      	beq.n	8006680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e032      	b.n	80066e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d008      	beq.n	800669e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800668c:	4b19      	ldr	r3, [pc, #100]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	4916      	ldr	r1, [pc, #88]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	4313      	orrs	r3, r2
 800669c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0308 	and.w	r3, r3, #8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d009      	beq.n	80066be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066aa:	4b12      	ldr	r3, [pc, #72]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	490e      	ldr	r1, [pc, #56]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066be:	f000 f821 	bl	8006704 <HAL_RCC_GetSysClockFreq>
 80066c2:	4602      	mov	r2, r0
 80066c4:	4b0b      	ldr	r3, [pc, #44]	@ (80066f4 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	091b      	lsrs	r3, r3, #4
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	490a      	ldr	r1, [pc, #40]	@ (80066f8 <HAL_RCC_ClockConfig+0x1c0>)
 80066d0:	5ccb      	ldrb	r3, [r1, r3]
 80066d2:	fa22 f303 	lsr.w	r3, r2, r3
 80066d6:	4a09      	ldr	r2, [pc, #36]	@ (80066fc <HAL_RCC_ClockConfig+0x1c4>)
 80066d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066da:	4b09      	ldr	r3, [pc, #36]	@ (8006700 <HAL_RCC_ClockConfig+0x1c8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fb fb44 	bl	8001d6c <HAL_InitTick>

  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	40023c00 	.word	0x40023c00
 80066f4:	40023800 	.word	0x40023800
 80066f8:	0800fccc 	.word	0x0800fccc
 80066fc:	20000000 	.word	0x20000000
 8006700:	20000004 	.word	0x20000004

08006704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006708:	b094      	sub	sp, #80	@ 0x50
 800670a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800671c:	4b79      	ldr	r3, [pc, #484]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x200>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 030c 	and.w	r3, r3, #12
 8006724:	2b08      	cmp	r3, #8
 8006726:	d00d      	beq.n	8006744 <HAL_RCC_GetSysClockFreq+0x40>
 8006728:	2b08      	cmp	r3, #8
 800672a:	f200 80e1 	bhi.w	80068f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_RCC_GetSysClockFreq+0x34>
 8006732:	2b04      	cmp	r3, #4
 8006734:	d003      	beq.n	800673e <HAL_RCC_GetSysClockFreq+0x3a>
 8006736:	e0db      	b.n	80068f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006738:	4b73      	ldr	r3, [pc, #460]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x204>)
 800673a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800673c:	e0db      	b.n	80068f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800673e:	4b73      	ldr	r3, [pc, #460]	@ (800690c <HAL_RCC_GetSysClockFreq+0x208>)
 8006740:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006742:	e0d8      	b.n	80068f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006744:	4b6f      	ldr	r3, [pc, #444]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x200>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800674c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800674e:	4b6d      	ldr	r3, [pc, #436]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x200>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d063      	beq.n	8006822 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800675a:	4b6a      	ldr	r3, [pc, #424]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x200>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	099b      	lsrs	r3, r3, #6
 8006760:	2200      	movs	r2, #0
 8006762:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006764:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676c:	633b      	str	r3, [r7, #48]	@ 0x30
 800676e:	2300      	movs	r3, #0
 8006770:	637b      	str	r3, [r7, #52]	@ 0x34
 8006772:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006776:	4622      	mov	r2, r4
 8006778:	462b      	mov	r3, r5
 800677a:	f04f 0000 	mov.w	r0, #0
 800677e:	f04f 0100 	mov.w	r1, #0
 8006782:	0159      	lsls	r1, r3, #5
 8006784:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006788:	0150      	lsls	r0, r2, #5
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4621      	mov	r1, r4
 8006790:	1a51      	subs	r1, r2, r1
 8006792:	6139      	str	r1, [r7, #16]
 8006794:	4629      	mov	r1, r5
 8006796:	eb63 0301 	sbc.w	r3, r3, r1
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067a8:	4659      	mov	r1, fp
 80067aa:	018b      	lsls	r3, r1, #6
 80067ac:	4651      	mov	r1, sl
 80067ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067b2:	4651      	mov	r1, sl
 80067b4:	018a      	lsls	r2, r1, #6
 80067b6:	4651      	mov	r1, sl
 80067b8:	ebb2 0801 	subs.w	r8, r2, r1
 80067bc:	4659      	mov	r1, fp
 80067be:	eb63 0901 	sbc.w	r9, r3, r1
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	f04f 0300 	mov.w	r3, #0
 80067ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067d6:	4690      	mov	r8, r2
 80067d8:	4699      	mov	r9, r3
 80067da:	4623      	mov	r3, r4
 80067dc:	eb18 0303 	adds.w	r3, r8, r3
 80067e0:	60bb      	str	r3, [r7, #8]
 80067e2:	462b      	mov	r3, r5
 80067e4:	eb49 0303 	adc.w	r3, r9, r3
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067f6:	4629      	mov	r1, r5
 80067f8:	024b      	lsls	r3, r1, #9
 80067fa:	4621      	mov	r1, r4
 80067fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006800:	4621      	mov	r1, r4
 8006802:	024a      	lsls	r2, r1, #9
 8006804:	4610      	mov	r0, r2
 8006806:	4619      	mov	r1, r3
 8006808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800680a:	2200      	movs	r2, #0
 800680c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800680e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006810:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006814:	f7f9 fd4c 	bl	80002b0 <__aeabi_uldivmod>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4613      	mov	r3, r2
 800681e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006820:	e058      	b.n	80068d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006822:	4b38      	ldr	r3, [pc, #224]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x200>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	099b      	lsrs	r3, r3, #6
 8006828:	2200      	movs	r2, #0
 800682a:	4618      	mov	r0, r3
 800682c:	4611      	mov	r1, r2
 800682e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	2300      	movs	r3, #0
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
 8006838:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800683c:	4642      	mov	r2, r8
 800683e:	464b      	mov	r3, r9
 8006840:	f04f 0000 	mov.w	r0, #0
 8006844:	f04f 0100 	mov.w	r1, #0
 8006848:	0159      	lsls	r1, r3, #5
 800684a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800684e:	0150      	lsls	r0, r2, #5
 8006850:	4602      	mov	r2, r0
 8006852:	460b      	mov	r3, r1
 8006854:	4641      	mov	r1, r8
 8006856:	ebb2 0a01 	subs.w	sl, r2, r1
 800685a:	4649      	mov	r1, r9
 800685c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800686c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006870:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006874:	ebb2 040a 	subs.w	r4, r2, sl
 8006878:	eb63 050b 	sbc.w	r5, r3, fp
 800687c:	f04f 0200 	mov.w	r2, #0
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	00eb      	lsls	r3, r5, #3
 8006886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800688a:	00e2      	lsls	r2, r4, #3
 800688c:	4614      	mov	r4, r2
 800688e:	461d      	mov	r5, r3
 8006890:	4643      	mov	r3, r8
 8006892:	18e3      	adds	r3, r4, r3
 8006894:	603b      	str	r3, [r7, #0]
 8006896:	464b      	mov	r3, r9
 8006898:	eb45 0303 	adc.w	r3, r5, r3
 800689c:	607b      	str	r3, [r7, #4]
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068aa:	4629      	mov	r1, r5
 80068ac:	028b      	lsls	r3, r1, #10
 80068ae:	4621      	mov	r1, r4
 80068b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068b4:	4621      	mov	r1, r4
 80068b6:	028a      	lsls	r2, r1, #10
 80068b8:	4610      	mov	r0, r2
 80068ba:	4619      	mov	r1, r3
 80068bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068be:	2200      	movs	r2, #0
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	61fa      	str	r2, [r7, #28]
 80068c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c8:	f7f9 fcf2 	bl	80002b0 <__aeabi_uldivmod>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4613      	mov	r3, r2
 80068d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x200>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	0c1b      	lsrs	r3, r3, #16
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	3301      	adds	r3, #1
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ee:	e002      	b.n	80068f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068f0:	4b05      	ldr	r3, [pc, #20]	@ (8006908 <HAL_RCC_GetSysClockFreq+0x204>)
 80068f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3750      	adds	r7, #80	@ 0x50
 80068fc:	46bd      	mov	sp, r7
 80068fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006902:	bf00      	nop
 8006904:	40023800 	.word	0x40023800
 8006908:	00f42400 	.word	0x00f42400
 800690c:	007a1200 	.word	0x007a1200

08006910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006914:	4b03      	ldr	r3, [pc, #12]	@ (8006924 <HAL_RCC_GetHCLKFreq+0x14>)
 8006916:	681b      	ldr	r3, [r3, #0]
}
 8006918:	4618      	mov	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	20000000 	.word	0x20000000

08006928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800692c:	f7ff fff0 	bl	8006910 <HAL_RCC_GetHCLKFreq>
 8006930:	4602      	mov	r2, r0
 8006932:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	0a9b      	lsrs	r3, r3, #10
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	4903      	ldr	r1, [pc, #12]	@ (800694c <HAL_RCC_GetPCLK1Freq+0x24>)
 800693e:	5ccb      	ldrb	r3, [r1, r3]
 8006940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006944:	4618      	mov	r0, r3
 8006946:	bd80      	pop	{r7, pc}
 8006948:	40023800 	.word	0x40023800
 800694c:	0800fcdc 	.word	0x0800fcdc

08006950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006954:	f7ff ffdc 	bl	8006910 <HAL_RCC_GetHCLKFreq>
 8006958:	4602      	mov	r2, r0
 800695a:	4b05      	ldr	r3, [pc, #20]	@ (8006970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	0b5b      	lsrs	r3, r3, #13
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	4903      	ldr	r1, [pc, #12]	@ (8006974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006966:	5ccb      	ldrb	r3, [r1, r3]
 8006968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800696c:	4618      	mov	r0, r3
 800696e:	bd80      	pop	{r7, pc}
 8006970:	40023800 	.word	0x40023800
 8006974:	0800fcdc 	.word	0x0800fcdc

08006978 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	220f      	movs	r2, #15
 8006986:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006988:	4b12      	ldr	r3, [pc, #72]	@ (80069d4 <HAL_RCC_GetClockConfig+0x5c>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0203 	and.w	r2, r3, #3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006994:	4b0f      	ldr	r3, [pc, #60]	@ (80069d4 <HAL_RCC_GetClockConfig+0x5c>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069a0:	4b0c      	ldr	r3, [pc, #48]	@ (80069d4 <HAL_RCC_GetClockConfig+0x5c>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80069ac:	4b09      	ldr	r3, [pc, #36]	@ (80069d4 <HAL_RCC_GetClockConfig+0x5c>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	08db      	lsrs	r3, r3, #3
 80069b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069ba:	4b07      	ldr	r3, [pc, #28]	@ (80069d8 <HAL_RCC_GetClockConfig+0x60>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 020f 	and.w	r2, r3, #15
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	601a      	str	r2, [r3, #0]
}
 80069c6:	bf00      	nop
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40023800 	.word	0x40023800
 80069d8:	40023c00 	.word	0x40023c00

080069dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006a04:	4b66      	ldr	r3, [pc, #408]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a0a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a12:	4963      	ldr	r1, [pc, #396]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006a26:	4b5e      	ldr	r3, [pc, #376]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a34:	495a      	ldr	r1, [pc, #360]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d105      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d075      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a60:	4b50      	ldr	r3, [pc, #320]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a66:	f7fb fb75 	bl	8002154 <HAL_GetTick>
 8006a6a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a6e:	f7fb fb71 	bl	8002154 <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e1dc      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a80:	4b47      	ldr	r3, [pc, #284]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f0      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d009      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	019a      	lsls	r2, r3, #6
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	071b      	lsls	r3, r3, #28
 8006aa4:	493e      	ldr	r1, [pc, #248]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01f      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ab8:	4b39      	ldr	r3, [pc, #228]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006abe:	0f1b      	lsrs	r3, r3, #28
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	019a      	lsls	r2, r3, #6
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	061b      	lsls	r3, r3, #24
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	071b      	lsls	r3, r3, #28
 8006ad8:	4931      	ldr	r1, [pc, #196]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006ae2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ae6:	f023 021f 	bic.w	r2, r3, #31
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	492b      	ldr	r1, [pc, #172]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00d      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	019a      	lsls	r2, r3, #6
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	061b      	lsls	r3, r3, #24
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	071b      	lsls	r3, r3, #28
 8006b18:	4921      	ldr	r1, [pc, #132]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b20:	4b20      	ldr	r3, [pc, #128]	@ (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b26:	f7fb fb15 	bl	8002154 <HAL_GetTick>
 8006b2a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006b2e:	f7fb fb11 	bl	8002154 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e17c      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b40:	4b17      	ldr	r3, [pc, #92]	@ (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f0      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d112      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10c      	bne.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f000 80ce 	beq.w	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8006b76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b7a:	f040 80c8 	bne.w	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b84:	f7fb fae6 	bl	8002154 <HAL_GetTick>
 8006b88:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b8a:	e00f      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b8c:	f7fb fae2 	bl	8002154 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d908      	bls.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e14d      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8006b9e:	bf00      	nop
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	42470068 	.word	0x42470068
 8006ba8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bac:	4ba5      	ldr	r3, [pc, #660]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bb8:	d0e8      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02e      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006bc6:	4b9f      	ldr	r3, [pc, #636]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bcc:	0c1b      	lsrs	r3, r3, #16
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bd8:	4b9a      	ldr	r3, [pc, #616]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bde:	0f1b      	lsrs	r3, r3, #28
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	019a      	lsls	r2, r3, #6
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	041b      	lsls	r3, r3, #16
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	061b      	lsls	r3, r3, #24
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	071b      	lsls	r3, r3, #28
 8006c02:	4990      	ldr	r1, [pc, #576]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c10:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	4989      	ldr	r1, [pc, #548]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d02c      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006c30:	4b84      	ldr	r3, [pc, #528]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c36:	0c1b      	lsrs	r3, r3, #16
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c42:	4b80      	ldr	r3, [pc, #512]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c48:	0e1b      	lsrs	r3, r3, #24
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	019a      	lsls	r2, r3, #6
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	061b      	lsls	r3, r3, #24
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	071b      	lsls	r3, r3, #28
 8006c6c:	4975      	ldr	r1, [pc, #468]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c74:	4b73      	ldr	r3, [pc, #460]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c82:	4970      	ldr	r1, [pc, #448]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d024      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8006c9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c9e:	d11f      	bne.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ca0:	4b68      	ldr	r3, [pc, #416]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca6:	0e1b      	lsrs	r3, r3, #24
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006cae:	4b65      	ldr	r3, [pc, #404]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cb4:	0f1b      	lsrs	r3, r3, #28
 8006cb6:	f003 0307 	and.w	r3, r3, #7
 8006cba:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	019a      	lsls	r2, r3, #6
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	085b      	lsrs	r3, r3, #1
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	041b      	lsls	r3, r3, #16
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	061b      	lsls	r3, r3, #24
 8006cd2:	431a      	orrs	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	071b      	lsls	r3, r3, #28
 8006cd8:	495a      	ldr	r1, [pc, #360]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ce0:	4b59      	ldr	r3, [pc, #356]	@ (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ce6:	f7fb fa35 	bl	8002154 <HAL_GetTick>
 8006cea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cec:	e008      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cee:	f7fb fa31 	bl	8002154 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e09c      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d00:	4b50      	ldr	r3, [pc, #320]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d0c:	d1ef      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0320 	and.w	r3, r3, #32
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 8083 	beq.w	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60bb      	str	r3, [r7, #8]
 8006d20:	4b48      	ldr	r3, [pc, #288]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d24:	4a47      	ldr	r2, [pc, #284]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d2c:	4b45      	ldr	r3, [pc, #276]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d34:	60bb      	str	r3, [r7, #8]
 8006d36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006d38:	4b44      	ldr	r3, [pc, #272]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a43      	ldr	r2, [pc, #268]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d42:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d44:	f7fb fa06 	bl	8002154 <HAL_GetTick>
 8006d48:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d4c:	f7fb fa02 	bl	8002154 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d901      	bls.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e06d      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0f0      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d6a:	4b36      	ldr	r3, [pc, #216]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d72:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d02f      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d028      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d88:	4b2e      	ldr	r3, [pc, #184]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d90:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d92:	4b2f      	ldr	r3, [pc, #188]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d98:	4b2d      	ldr	r3, [pc, #180]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d9e:	4a29      	ldr	r2, [pc, #164]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006da4:	4b27      	ldr	r3, [pc, #156]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da8:	f003 0301 	and.w	r3, r3, #1
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d114      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006db0:	f7fb f9d0 	bl	8002154 <HAL_GetTick>
 8006db4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db6:	e00a      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db8:	f7fb f9cc 	bl	8002154 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d901      	bls.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e035      	b.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dce:	4b1d      	ldr	r3, [pc, #116]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0ee      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006de2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006de6:	d10d      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006de8:	4b16      	ldr	r3, [pc, #88]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dfc:	4911      	ldr	r1, [pc, #68]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]
 8006e02:	e005      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006e04:	4b0f      	ldr	r3, [pc, #60]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4a0e      	ldr	r2, [pc, #56]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e0a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006e0e:	6093      	str	r3, [r2, #8]
 8006e10:	4b0c      	ldr	r3, [pc, #48]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e12:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e1c:	4909      	ldr	r1, [pc, #36]	@ (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0310 	and.w	r3, r3, #16
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d004      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8006e34:	4b07      	ldr	r3, [pc, #28]	@ (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8006e36:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40023800 	.word	0x40023800
 8006e48:	42470070 	.word	0x42470070
 8006e4c:	40007000 	.word	0x40007000
 8006e50:	42470e40 	.word	0x42470e40
 8006e54:	424711e0 	.word	0x424711e0

08006e58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e273      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d075      	beq.n	8006f62 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006e76:	4b88      	ldr	r3, [pc, #544]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f003 030c 	and.w	r3, r3, #12
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d00c      	beq.n	8006e9c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e82:	4b85      	ldr	r3, [pc, #532]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 030c 	and.w	r3, r3, #12
        || \
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d112      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e8e:	4b82      	ldr	r3, [pc, #520]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e9a:	d10b      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d05b      	beq.n	8006f60 <HAL_RCC_OscConfig+0x108>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d157      	bne.n	8006f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e24e      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ebc:	d106      	bne.n	8006ecc <HAL_RCC_OscConfig+0x74>
 8006ebe:	4b76      	ldr	r3, [pc, #472]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a75      	ldr	r2, [pc, #468]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	e01d      	b.n	8006f08 <HAL_RCC_OscConfig+0xb0>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ed4:	d10c      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x98>
 8006ed6:	4b70      	ldr	r3, [pc, #448]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a6f      	ldr	r2, [pc, #444]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	e00b      	b.n	8006f08 <HAL_RCC_OscConfig+0xb0>
 8006ef0:	4b69      	ldr	r3, [pc, #420]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a68      	ldr	r2, [pc, #416]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	4b66      	ldr	r3, [pc, #408]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a65      	ldr	r2, [pc, #404]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d013      	beq.n	8006f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f10:	f7fb f920 	bl	8002154 <HAL_GetTick>
 8006f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f18:	f7fb f91c 	bl	8002154 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b64      	cmp	r3, #100	@ 0x64
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e213      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f0      	beq.n	8006f18 <HAL_RCC_OscConfig+0xc0>
 8006f36:	e014      	b.n	8006f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f38:	f7fb f90c 	bl	8002154 <HAL_GetTick>
 8006f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f40:	f7fb f908 	bl	8002154 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b64      	cmp	r3, #100	@ 0x64
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e1ff      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f52:	4b51      	ldr	r3, [pc, #324]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f0      	bne.n	8006f40 <HAL_RCC_OscConfig+0xe8>
 8006f5e:	e000      	b.n	8006f62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d063      	beq.n	8007036 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 030c 	and.w	r3, r3, #12
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00b      	beq.n	8006f92 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f7a:	4b47      	ldr	r3, [pc, #284]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 030c 	and.w	r3, r3, #12
        || \
 8006f82:	2b08      	cmp	r3, #8
 8006f84:	d11c      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f86:	4b44      	ldr	r3, [pc, #272]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d116      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f92:	4b41      	ldr	r3, [pc, #260]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d005      	beq.n	8006faa <HAL_RCC_OscConfig+0x152>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d001      	beq.n	8006faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e1d3      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006faa:	4b3b      	ldr	r3, [pc, #236]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	4937      	ldr	r1, [pc, #220]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fbe:	e03a      	b.n	8007036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d020      	beq.n	800700a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fc8:	4b34      	ldr	r3, [pc, #208]	@ (800709c <HAL_RCC_OscConfig+0x244>)
 8006fca:	2201      	movs	r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fce:	f7fb f8c1 	bl	8002154 <HAL_GetTick>
 8006fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fd6:	f7fb f8bd 	bl	8002154 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d901      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e1b4      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0f0      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff4:	4b28      	ldr	r3, [pc, #160]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4925      	ldr	r1, [pc, #148]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 8007004:	4313      	orrs	r3, r2
 8007006:	600b      	str	r3, [r1, #0]
 8007008:	e015      	b.n	8007036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800700a:	4b24      	ldr	r3, [pc, #144]	@ (800709c <HAL_RCC_OscConfig+0x244>)
 800700c:	2200      	movs	r2, #0
 800700e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007010:	f7fb f8a0 	bl	8002154 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007018:	f7fb f89c 	bl	8002154 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e193      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800702a:	4b1b      	ldr	r3, [pc, #108]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f0      	bne.n	8007018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0308 	and.w	r3, r3, #8
 800703e:	2b00      	cmp	r3, #0
 8007040:	d036      	beq.n	80070b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d016      	beq.n	8007078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800704a:	4b15      	ldr	r3, [pc, #84]	@ (80070a0 <HAL_RCC_OscConfig+0x248>)
 800704c:	2201      	movs	r2, #1
 800704e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007050:	f7fb f880 	bl	8002154 <HAL_GetTick>
 8007054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007056:	e008      	b.n	800706a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007058:	f7fb f87c 	bl	8002154 <HAL_GetTick>
 800705c:	4602      	mov	r2, r0
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b02      	cmp	r3, #2
 8007064:	d901      	bls.n	800706a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e173      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800706a:	4b0b      	ldr	r3, [pc, #44]	@ (8007098 <HAL_RCC_OscConfig+0x240>)
 800706c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0f0      	beq.n	8007058 <HAL_RCC_OscConfig+0x200>
 8007076:	e01b      	b.n	80070b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007078:	4b09      	ldr	r3, [pc, #36]	@ (80070a0 <HAL_RCC_OscConfig+0x248>)
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800707e:	f7fb f869 	bl	8002154 <HAL_GetTick>
 8007082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007084:	e00e      	b.n	80070a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007086:	f7fb f865 	bl	8002154 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	2b02      	cmp	r3, #2
 8007092:	d907      	bls.n	80070a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e15c      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
 8007098:	40023800 	.word	0x40023800
 800709c:	42470000 	.word	0x42470000
 80070a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070a4:	4b8a      	ldr	r3, [pc, #552]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80070a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1ea      	bne.n	8007086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f000 8097 	beq.w	80071ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070be:	2300      	movs	r3, #0
 80070c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070c2:	4b83      	ldr	r3, [pc, #524]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10f      	bne.n	80070ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070ce:	2300      	movs	r3, #0
 80070d0:	60bb      	str	r3, [r7, #8]
 80070d2:	4b7f      	ldr	r3, [pc, #508]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	4a7e      	ldr	r2, [pc, #504]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80070d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80070de:	4b7c      	ldr	r3, [pc, #496]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070e6:	60bb      	str	r3, [r7, #8]
 80070e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070ea:	2301      	movs	r3, #1
 80070ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ee:	4b79      	ldr	r3, [pc, #484]	@ (80072d4 <HAL_RCC_OscConfig+0x47c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d118      	bne.n	800712c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070fa:	4b76      	ldr	r3, [pc, #472]	@ (80072d4 <HAL_RCC_OscConfig+0x47c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a75      	ldr	r2, [pc, #468]	@ (80072d4 <HAL_RCC_OscConfig+0x47c>)
 8007100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007106:	f7fb f825 	bl	8002154 <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800710e:	f7fb f821 	bl	8002154 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e118      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007120:	4b6c      	ldr	r3, [pc, #432]	@ (80072d4 <HAL_RCC_OscConfig+0x47c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0f0      	beq.n	800710e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d106      	bne.n	8007142 <HAL_RCC_OscConfig+0x2ea>
 8007134:	4b66      	ldr	r3, [pc, #408]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 8007136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007138:	4a65      	ldr	r2, [pc, #404]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 800713a:	f043 0301 	orr.w	r3, r3, #1
 800713e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007140:	e01c      	b.n	800717c <HAL_RCC_OscConfig+0x324>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	2b05      	cmp	r3, #5
 8007148:	d10c      	bne.n	8007164 <HAL_RCC_OscConfig+0x30c>
 800714a:	4b61      	ldr	r3, [pc, #388]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 800714c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800714e:	4a60      	ldr	r2, [pc, #384]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 8007150:	f043 0304 	orr.w	r3, r3, #4
 8007154:	6713      	str	r3, [r2, #112]	@ 0x70
 8007156:	4b5e      	ldr	r3, [pc, #376]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 8007158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800715a:	4a5d      	ldr	r2, [pc, #372]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 800715c:	f043 0301 	orr.w	r3, r3, #1
 8007160:	6713      	str	r3, [r2, #112]	@ 0x70
 8007162:	e00b      	b.n	800717c <HAL_RCC_OscConfig+0x324>
 8007164:	4b5a      	ldr	r3, [pc, #360]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 8007166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007168:	4a59      	ldr	r2, [pc, #356]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007170:	4b57      	ldr	r3, [pc, #348]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 8007172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007174:	4a56      	ldr	r2, [pc, #344]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 8007176:	f023 0304 	bic.w	r3, r3, #4
 800717a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d015      	beq.n	80071b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007184:	f7fa ffe6 	bl	8002154 <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800718a:	e00a      	b.n	80071a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800718c:	f7fa ffe2 	bl	8002154 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e0d7      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071a2:	4b4b      	ldr	r3, [pc, #300]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80071a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071a6:	f003 0302 	and.w	r3, r3, #2
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0ee      	beq.n	800718c <HAL_RCC_OscConfig+0x334>
 80071ae:	e014      	b.n	80071da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b0:	f7fa ffd0 	bl	8002154 <HAL_GetTick>
 80071b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071b6:	e00a      	b.n	80071ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071b8:	f7fa ffcc 	bl	8002154 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e0c1      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ce:	4b40      	ldr	r3, [pc, #256]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80071d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1ee      	bne.n	80071b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071da:	7dfb      	ldrb	r3, [r7, #23]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d105      	bne.n	80071ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071e0:	4b3b      	ldr	r3, [pc, #236]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80071e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e4:	4a3a      	ldr	r2, [pc, #232]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80071e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80ad 	beq.w	8007350 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071f6:	4b36      	ldr	r3, [pc, #216]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 030c 	and.w	r3, r3, #12
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d060      	beq.n	80072c4 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d145      	bne.n	8007296 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720a:	4b33      	ldr	r3, [pc, #204]	@ (80072d8 <HAL_RCC_OscConfig+0x480>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007210:	f7fa ffa0 	bl	8002154 <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007218:	f7fa ff9c 	bl	8002154 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e093      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800722a:	4b29      	ldr	r3, [pc, #164]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1f0      	bne.n	8007218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	69da      	ldr	r2, [r3, #28]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	431a      	orrs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007244:	019b      	lsls	r3, r3, #6
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724c:	085b      	lsrs	r3, r3, #1
 800724e:	3b01      	subs	r3, #1
 8007250:	041b      	lsls	r3, r3, #16
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007258:	061b      	lsls	r3, r3, #24
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007260:	071b      	lsls	r3, r3, #28
 8007262:	491b      	ldr	r1, [pc, #108]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 8007264:	4313      	orrs	r3, r2
 8007266:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007268:	4b1b      	ldr	r3, [pc, #108]	@ (80072d8 <HAL_RCC_OscConfig+0x480>)
 800726a:	2201      	movs	r2, #1
 800726c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800726e:	f7fa ff71 	bl	8002154 <HAL_GetTick>
 8007272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007274:	e008      	b.n	8007288 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007276:	f7fa ff6d 	bl	8002154 <HAL_GetTick>
 800727a:	4602      	mov	r2, r0
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	2b02      	cmp	r3, #2
 8007282:	d901      	bls.n	8007288 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e064      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007288:	4b11      	ldr	r3, [pc, #68]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0f0      	beq.n	8007276 <HAL_RCC_OscConfig+0x41e>
 8007294:	e05c      	b.n	8007350 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007296:	4b10      	ldr	r3, [pc, #64]	@ (80072d8 <HAL_RCC_OscConfig+0x480>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729c:	f7fa ff5a 	bl	8002154 <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072a4:	f7fa ff56 	bl	8002154 <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e04d      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072b6:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <HAL_RCC_OscConfig+0x478>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1f0      	bne.n	80072a4 <HAL_RCC_OscConfig+0x44c>
 80072c2:	e045      	b.n	8007350 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d107      	bne.n	80072dc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e040      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
 80072d0:	40023800 	.word	0x40023800
 80072d4:	40007000 	.word	0x40007000
 80072d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072dc:	4b1f      	ldr	r3, [pc, #124]	@ (800735c <HAL_RCC_OscConfig+0x504>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d030      	beq.n	800734c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d129      	bne.n	800734c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007302:	429a      	cmp	r2, r3
 8007304:	d122      	bne.n	800734c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800730c:	4013      	ands	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007314:	4293      	cmp	r3, r2
 8007316:	d119      	bne.n	800734c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	3b01      	subs	r3, #1
 8007326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007328:	429a      	cmp	r2, r3
 800732a:	d10f      	bne.n	800734c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007338:	429a      	cmp	r2, r3
 800733a:	d107      	bne.n	800734c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007346:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007348:	429a      	cmp	r2, r3
 800734a:	d001      	beq.n	8007350 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3718      	adds	r7, #24
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	40023800 	.word	0x40023800

08007360 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e10c      	b.n	800759c <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d106      	bne.n	800739c <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7fa fc88 	bl	8001cac <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f903 	bl	80075b0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f938 	bl	8007620 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d030      	beq.n	800741a <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f957 	bl	800766c <SAI_GetInputClock>
 80073be:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	461a      	mov	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	025b      	lsls	r3, r3, #9
 80073d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d6:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4a72      	ldr	r2, [pc, #456]	@ (80075a4 <HAL_SAI_Init+0x244>)
 80073dc:	fba2 2303 	umull	r2, r3, r2, r3
 80073e0:	08da      	lsrs	r2, r3, #3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	4b6e      	ldr	r3, [pc, #440]	@ (80075a4 <HAL_SAI_Init+0x244>)
 80073ea:	fba3 2301 	umull	r2, r3, r3, r1
 80073ee:	08da      	lsrs	r2, r3, #3
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	005b      	lsls	r3, r3, #1
 80073f8:	1aca      	subs	r2, r1, r3
 80073fa:	2a08      	cmp	r2, #8
 80073fc:	d904      	bls.n	8007408 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800740c:	2b04      	cmp	r3, #4
 800740e:	d104      	bne.n	800741a <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007414:	085a      	lsrs	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_SAI_Init+0xca>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d109      	bne.n	800743e <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_SAI_Init+0xd6>
 8007432:	2300      	movs	r3, #0
 8007434:	e001      	b.n	800743a <HAL_SAI_Init+0xda>
 8007436:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800743a:	617b      	str	r3, [r7, #20]
 800743c:	e008      	b.n	8007450 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007442:	2b01      	cmp	r3, #1
 8007444:	d102      	bne.n	800744c <HAL_SAI_Init+0xec>
 8007446:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800744a:	e000      	b.n	800744e <HAL_SAI_Init+0xee>
 800744c:	2300      	movs	r3, #0
 800744e:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d811      	bhi.n	800747c <HAL_SAI_Init+0x11c>
 8007458:	2b02      	cmp	r3, #2
 800745a:	d20b      	bcs.n	8007474 <HAL_SAI_Init+0x114>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HAL_SAI_Init+0x106>
 8007460:	2b01      	cmp	r3, #1
 8007462:	d003      	beq.n	800746c <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007464:	e00a      	b.n	800747c <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	613b      	str	r3, [r7, #16]
    break;
 800746a:	e008      	b.n	800747e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800746c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007470:	613b      	str	r3, [r7, #16]
    break;
 8007472:	e004      	b.n	800747e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007474:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007478:	613b      	str	r3, [r7, #16]
    break;
 800747a:	e000      	b.n	800747e <HAL_SAI_Init+0x11e>
      break;
 800747c:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4b47      	ldr	r3, [pc, #284]	@ (80075a8 <HAL_SAI_Init+0x248>)
 800748a:	400b      	ands	r3, r1
 800748c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800749c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074a2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a8:	431a      	orrs	r2, r3
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 80074b6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80074c2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c8:	051b      	lsls	r3, r3, #20
 80074ca:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80074e2:	f023 030f 	bic.w	r3, r3, #15
 80074e6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6859      	ldr	r1, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f6:	431a      	orrs	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6899      	ldr	r1, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	4b26      	ldr	r3, [pc, #152]	@ (80075ac <HAL_SAI_Init+0x24c>)
 8007512:	400b      	ands	r3, r1
 8007514:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6899      	ldr	r1, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007520:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007526:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 800752c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007532:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007538:	3b01      	subs	r3, #1
 800753a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800753c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68d9      	ldr	r1, [r3, #12]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007554:	400b      	ands	r3, r1
 8007556:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68d9      	ldr	r1, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007566:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800756c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800756e:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007574:	3b01      	subs	r3, #1
 8007576:	021b      	lsls	r3, r3, #8
 8007578:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2201      	movs	r2, #1
 800758e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3718      	adds	r7, #24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	cccccccd 	.word	0xcccccccd
 80075a8:	ff05c010 	.word	0xff05c010
 80075ac:	fff88000 	.word	0xfff88000

080075b0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80075b8:	4b17      	ldr	r3, [pc, #92]	@ (8007618 <SAI_Disable+0x68>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a17      	ldr	r2, [pc, #92]	@ (800761c <SAI_Disable+0x6c>)
 80075be:	fba2 2303 	umull	r2, r3, r2, r3
 80075c2:	0b1b      	lsrs	r3, r3, #12
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80075da:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1e5a      	subs	r2, r3, #1
 80075e0:	60fa      	str	r2, [r7, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	72fb      	strb	r3, [r7, #11]
      break;
 80075fa:	e006      	b.n	800760a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e8      	bne.n	80075dc <SAI_Disable+0x2c>

  return status;
 800760a:	7afb      	ldrb	r3, [r7, #11]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	20000000 	.word	0x20000000
 800761c:	95cbec1b 	.word	0x95cbec1b

08007620 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d00c      	beq.n	800764a <SAI_BlockSynchroConfig+0x2a>
 8007630:	2b02      	cmp	r3, #2
 8007632:	d80d      	bhi.n	8007650 <SAI_BlockSynchroConfig+0x30>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <SAI_BlockSynchroConfig+0x1e>
 8007638:	2b01      	cmp	r3, #1
 800763a:	d003      	beq.n	8007644 <SAI_BlockSynchroConfig+0x24>
 800763c:	e008      	b.n	8007650 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	60fb      	str	r3, [r7, #12]
      break;
 8007642:	e008      	b.n	8007656 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007644:	2310      	movs	r3, #16
 8007646:	60fb      	str	r3, [r7, #12]
      break;
 8007648:	e005      	b.n	8007656 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800764a:	2320      	movs	r3, #32
 800764c:	60fb      	str	r3, [r7, #12]
      break;
 800764e:	e002      	b.n	8007656 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]
      break;
 8007654:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007656:	4a04      	ldr	r2, [pc, #16]	@ (8007668 <SAI_BlockSynchroConfig+0x48>)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 800765c:	bf00      	nop
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	40015800 	.word	0x40015800

0800766c <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	2300      	movs	r3, #0
 800767e:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a46      	ldr	r2, [pc, #280]	@ (80077a0 <SAI_GetInputClock+0x134>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d10b      	bne.n	80076a2 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800768a:	4b46      	ldr	r3, [pc, #280]	@ (80077a4 <SAI_GetInputClock+0x138>)
 800768c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007690:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	4942      	ldr	r1, [pc, #264]	@ (80077a4 <SAI_GetInputClock+0x138>)
 800769a:	4313      	orrs	r3, r2
 800769c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 80076a0:	e00b      	b.n	80076ba <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 80076a2:	4b40      	ldr	r3, [pc, #256]	@ (80077a4 <SAI_GetInputClock+0x138>)
 80076a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076a8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	493c      	ldr	r1, [pc, #240]	@ (80077a4 <SAI_GetInputClock+0x138>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80076ba:	4b3a      	ldr	r3, [pc, #232]	@ (80077a4 <SAI_GetInputClock+0x138>)
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d108      	bne.n	80076d8 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80076c6:	4b37      	ldr	r3, [pc, #220]	@ (80077a4 <SAI_GetInputClock+0x138>)
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076ce:	4a36      	ldr	r2, [pc, #216]	@ (80077a8 <SAI_GetInputClock+0x13c>)
 80076d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d4:	613b      	str	r3, [r7, #16]
 80076d6:	e007      	b.n	80076e8 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80076d8:	4b32      	ldr	r3, [pc, #200]	@ (80077a4 <SAI_GetInputClock+0x138>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076e0:	4a32      	ldr	r2, [pc, #200]	@ (80077ac <SAI_GetInputClock+0x140>)
 80076e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e6:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d121      	bne.n	8007734 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80076f0:	4b2c      	ldr	r3, [pc, #176]	@ (80077a4 <SAI_GetInputClock+0x138>)
 80076f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f6:	0e1b      	lsrs	r3, r3, #24
 80076f8:	f003 030f 	and.w	r3, r3, #15
 80076fc:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 80076fe:	4b29      	ldr	r3, [pc, #164]	@ (80077a4 <SAI_GetInputClock+0x138>)
 8007700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007704:	099b      	lsrs	r3, r3, #6
 8007706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	fb03 f202 	mul.w	r2, r3, r2
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	fbb2 f3f3 	udiv	r3, r2, r3
 8007716:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8007718:	4b22      	ldr	r3, [pc, #136]	@ (80077a4 <SAI_GetInputClock+0x138>)
 800771a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	f003 031f 	and.w	r3, r3, #31
 8007724:	3301      	adds	r3, #1
 8007726:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	e02d      	b.n	8007790 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800773c:	d120      	bne.n	8007780 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800773e:	4b19      	ldr	r3, [pc, #100]	@ (80077a4 <SAI_GetInputClock+0x138>)
 8007740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007744:	0e1b      	lsrs	r3, r3, #24
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 800774c:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <SAI_GetInputClock+0x138>)
 800774e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007752:	099b      	lsrs	r3, r3, #6
 8007754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007758:	693a      	ldr	r2, [r7, #16]
 800775a:	fb03 f202 	mul.w	r2, r3, r2
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	fbb2 f3f3 	udiv	r3, r2, r3
 8007764:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8007766:	4b0f      	ldr	r3, [pc, #60]	@ (80077a4 <SAI_GetInputClock+0x138>)
 8007768:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	3301      	adds	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	fbb2 f3f3 	udiv	r3, r2, r3
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	e007      	b.n	8007790 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8007780:	4b08      	ldr	r3, [pc, #32]	@ (80077a4 <SAI_GetInputClock+0x138>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	4a07      	ldr	r2, [pc, #28]	@ (80077a4 <SAI_GetInputClock+0x138>)
 8007786:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800778a:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 800778c:	4b08      	ldr	r3, [pc, #32]	@ (80077b0 <SAI_GetInputClock+0x144>)
 800778e:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8007790:	697b      	ldr	r3, [r7, #20]
}
 8007792:	4618      	mov	r0, r3
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40015804 	.word	0x40015804
 80077a4:	40023800 	.word	0x40023800
 80077a8:	00f42400 	.word	0x00f42400
 80077ac:	007a1200 	.word	0x007a1200
 80077b0:	00bb8000 	.word	0x00bb8000

080077b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e022      	b.n	800780c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d105      	bne.n	80077de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7fa f847 	bl	800186c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2203      	movs	r2, #3
 80077e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f814 	bl	8007814 <HAL_SD_InitCard>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d001      	beq.n	80077f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e00a      	b.n	800780c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007814:	b5b0      	push	{r4, r5, r7, lr}
 8007816:	b08e      	sub	sp, #56	@ 0x38
 8007818:	af04      	add	r7, sp, #16
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800781c:	2300      	movs	r3, #0
 800781e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007824:	2300      	movs	r3, #0
 8007826:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007830:	2376      	movs	r3, #118	@ 0x76
 8007832:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681d      	ldr	r5, [r3, #0]
 8007838:	466c      	mov	r4, sp
 800783a:	f107 0314 	add.w	r3, r7, #20
 800783e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007842:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007846:	f107 0308 	add.w	r3, r7, #8
 800784a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800784c:	4628      	mov	r0, r5
 800784e:	f002 fbd7 	bl	800a000 <SDIO_Init>
 8007852:	4603      	mov	r3, r0
 8007854:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8007858:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e04f      	b.n	8007904 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007864:	4b29      	ldr	r3, [pc, #164]	@ (800790c <HAL_SD_InitCard+0xf8>)
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f002 fc0f 	bl	800a092 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007874:	4b25      	ldr	r3, [pc, #148]	@ (800790c <HAL_SD_InitCard+0xf8>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800787a:	2002      	movs	r0, #2
 800787c:	f7fa fc76 	bl	800216c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 ff03 	bl	800868c <SD_PowerON>
 8007886:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800789a:	6a3b      	ldr	r3, [r7, #32]
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e02e      	b.n	8007904 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fe22 	bl	80084f0 <SD_InitCard>
 80078ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	431a      	orrs	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e01b      	b.n	8007904 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80078d4:	4618      	mov	r0, r3
 80078d6:	f002 fc6e 	bl	800a1b6 <SDMMC_CmdBlockLength>
 80078da:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00f      	beq.n	8007902 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007910 <HAL_SD_InitCard+0xfc>)
 80078e8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	431a      	orrs	r2, r3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e000      	b.n	8007904 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3728      	adds	r7, #40	@ 0x28
 8007908:	46bd      	mov	sp, r7
 800790a:	bdb0      	pop	{r4, r5, r7, pc}
 800790c:	422580a0 	.word	0x422580a0
 8007910:	004005ff 	.word	0x004005ff

08007914 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b092      	sub	sp, #72	@ 0x48
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
 8007920:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007922:	f7fa fc17 	bl	8002154 <HAL_GetTick>
 8007926:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d107      	bne.n	8007946 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e1bd      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b01      	cmp	r3, #1
 8007950:	f040 81b0 	bne.w	8007cb4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800795a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	441a      	add	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007964:	429a      	cmp	r2, r3
 8007966:	d907      	bls.n	8007978 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800796c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e1a4      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2203      	movs	r2, #3
 800797c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2200      	movs	r2, #0
 8007986:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800798c:	2b01      	cmp	r3, #1
 800798e:	d002      	beq.n	8007996 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	025b      	lsls	r3, r3, #9
 8007994:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007996:	f04f 33ff 	mov.w	r3, #4294967295
 800799a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	025b      	lsls	r3, r3, #9
 80079a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80079a2:	2390      	movs	r3, #144	@ 0x90
 80079a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80079a6:	2302      	movs	r3, #2
 80079a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80079ae:	2301      	movs	r3, #1
 80079b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f107 0214 	add.w	r2, r7, #20
 80079ba:	4611      	mov	r1, r2
 80079bc:	4618      	mov	r0, r3
 80079be:	f002 fbce 	bl	800a15e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d90a      	bls.n	80079de <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2202      	movs	r2, #2
 80079cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079d4:	4618      	mov	r0, r3
 80079d6:	f002 fc32 	bl	800a23e <SDMMC_CmdReadMultiBlock>
 80079da:	6478      	str	r0, [r7, #68]	@ 0x44
 80079dc:	e009      	b.n	80079f2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80079ea:	4618      	mov	r0, r3
 80079ec:	f002 fc05 	bl	800a1fa <SDMMC_CmdReadSingleBlock>
 80079f0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d012      	beq.n	8007a1e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a7a      	ldr	r2, [pc, #488]	@ (8007be8 <HAL_SD_ReadBlocks+0x2d4>)
 80079fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a06:	431a      	orrs	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e151      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007a22:	e061      	b.n	8007ae8 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d03c      	beq.n	8007aac <HAL_SD_ReadBlocks+0x198>
 8007a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d039      	beq.n	8007aac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a3c:	e033      	b.n	8007aa6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f002 fb07 	bl	800a056 <SDIO_ReadFIFO>
 8007a48:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a54:	3301      	adds	r3, #1
 8007a56:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a60:	0a1b      	lsrs	r3, r3, #8
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a66:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a70:	3b01      	subs	r3, #1
 8007a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a76:	0c1b      	lsrs	r3, r3, #16
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a80:	3301      	adds	r3, #1
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a86:	3b01      	subs	r3, #1
 8007a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8c:	0e1b      	lsrs	r3, r3, #24
 8007a8e:	b2da      	uxtb	r2, r3
 8007a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a92:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a96:	3301      	adds	r3, #1
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8007aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa8:	2b07      	cmp	r3, #7
 8007aaa:	d9c8      	bls.n	8007a3e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007aac:	f7fa fb52 	bl	8002154 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d902      	bls.n	8007ac2 <HAL_SD_ReadBlocks+0x1ae>
 8007abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d112      	bne.n	8007ae8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a48      	ldr	r2, [pc, #288]	@ (8007be8 <HAL_SD_ReadBlocks+0x2d4>)
 8007ac8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ace:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e0ec      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aee:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d096      	beq.n	8007a24 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d022      	beq.n	8007b4a <HAL_SD_ReadBlocks+0x236>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d91f      	bls.n	8007b4a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d01b      	beq.n	8007b4a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f002 fbf8 	bl	800a30c <SDMMC_CmdStopTransfer>
 8007b1c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d012      	beq.n	8007b4a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a2f      	ldr	r2, [pc, #188]	@ (8007be8 <HAL_SD_ReadBlocks+0x2d4>)
 8007b2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b32:	431a      	orrs	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e0bb      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b50:	f003 0308 	and.w	r3, r3, #8
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d012      	beq.n	8007b7e <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a22      	ldr	r2, [pc, #136]	@ (8007be8 <HAL_SD_ReadBlocks+0x2d4>)
 8007b5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b64:	f043 0208 	orr.w	r2, r3, #8
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e0a1      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d012      	beq.n	8007bb2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a15      	ldr	r2, [pc, #84]	@ (8007be8 <HAL_SD_ReadBlocks+0x2d4>)
 8007b92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b98:	f043 0202 	orr.w	r2, r3, #2
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e087      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d064      	beq.n	8007c8a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a08      	ldr	r2, [pc, #32]	@ (8007be8 <HAL_SD_ReadBlocks+0x2d4>)
 8007bc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bcc:	f043 0220 	orr.w	r2, r3, #32
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e06d      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>
 8007be6:	bf00      	nop
 8007be8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f002 fa30 	bl	800a056 <SDIO_ReadFIFO>
 8007bf6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c02:	3301      	adds	r3, #1
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c14:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c18:	3301      	adds	r3, #1
 8007c1a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c24:	0c1b      	lsrs	r3, r3, #16
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2e:	3301      	adds	r3, #1
 8007c30:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c34:	3b01      	subs	r3, #1
 8007c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3a:	0e1b      	lsrs	r3, r3, #24
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c44:	3301      	adds	r3, #1
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8007c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007c4e:	f7fa fa81 	bl	8002154 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d902      	bls.n	8007c64 <HAL_SD_ReadBlocks+0x350>
 8007c5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d112      	bne.n	8007c8a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a18      	ldr	r2, [pc, #96]	@ (8007ccc <HAL_SD_ReadBlocks+0x3b8>)
 8007c6a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e01b      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_SD_ReadBlocks+0x38a>
 8007c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1a6      	bne.n	8007bec <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007ca6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	e006      	b.n	8007cc2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
  }
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3748      	adds	r7, #72	@ 0x48
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	004005ff 	.word	0x004005ff

08007cd0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b092      	sub	sp, #72	@ 0x48
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cde:	f7fa fa39 	bl	8002154 <HAL_GetTick>
 8007ce2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d107      	bne.n	8007d02 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e165      	b.n	8007fce <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	f040 8158 	bne.w	8007fc0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	441a      	add	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d907      	bls.n	8007d34 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d28:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e14c      	b.n	8007fce <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2203      	movs	r2, #3
 8007d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2200      	movs	r2, #0
 8007d42:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d002      	beq.n	8007d52 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4e:	025b      	lsls	r3, r3, #9
 8007d50:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295
 8007d56:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	025b      	lsls	r3, r3, #9
 8007d5c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007d5e:	2390      	movs	r3, #144	@ 0x90
 8007d60:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007d62:	2300      	movs	r3, #0
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f107 0218 	add.w	r2, r7, #24
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f002 f9f0 	bl	800a15e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d90a      	bls.n	8007d9a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d90:	4618      	mov	r0, r3
 8007d92:	f002 fa98 	bl	800a2c6 <SDMMC_CmdWriteMultiBlock>
 8007d96:	6478      	str	r0, [r7, #68]	@ 0x44
 8007d98:	e009      	b.n	8007dae <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2210      	movs	r2, #16
 8007d9e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007da6:	4618      	mov	r0, r3
 8007da8:	f002 fa6b 	bl	800a282 <SDMMC_CmdWriteSingleBlock>
 8007dac:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d012      	beq.n	8007dda <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a87      	ldr	r2, [pc, #540]	@ (8007fd8 <HAL_SD_WriteBlocks+0x308>)
 8007dba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e0f9      	b.n	8007fce <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007dde:	e065      	b.n	8007eac <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d040      	beq.n	8007e70 <HAL_SD_WriteBlocks+0x1a0>
 8007dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d03d      	beq.n	8007e70 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007df4:	2300      	movs	r3, #0
 8007df6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007df8:	e037      	b.n	8007e6a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e02:	3301      	adds	r3, #1
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	021a      	lsls	r2, r3, #8
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e20:	3b01      	subs	r3, #1
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	041a      	lsls	r2, r3, #16
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e32:	3301      	adds	r3, #1
 8007e34:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	061a      	lsls	r2, r3, #24
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8007e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e50:	3b01      	subs	r3, #1
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f107 0214 	add.w	r2, r7, #20
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f002 f906 	bl	800a070 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007e64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e66:	3301      	adds	r3, #1
 8007e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e6c:	2b07      	cmp	r3, #7
 8007e6e:	d9c4      	bls.n	8007dfa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007e70:	f7fa f970 	bl	8002154 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d902      	bls.n	8007e86 <HAL_SD_WriteBlocks+0x1b6>
 8007e80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d112      	bne.n	8007eac <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a53      	ldr	r2, [pc, #332]	@ (8007fd8 <HAL_SD_WriteBlocks+0x308>)
 8007e8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e94:	431a      	orrs	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e090      	b.n	8007fce <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eb2:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d092      	beq.n	8007de0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d022      	beq.n	8007f0e <HAL_SD_WriteBlocks+0x23e>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d91f      	bls.n	8007f0e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d01b      	beq.n	8007f0e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f002 fa16 	bl	800a30c <SDMMC_CmdStopTransfer>
 8007ee0:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d012      	beq.n	8007f0e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a3a      	ldr	r2, [pc, #232]	@ (8007fd8 <HAL_SD_WriteBlocks+0x308>)
 8007eee:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ef4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e05f      	b.n	8007fce <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f14:	f003 0308 	and.w	r3, r3, #8
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d012      	beq.n	8007f42 <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a2d      	ldr	r2, [pc, #180]	@ (8007fd8 <HAL_SD_WriteBlocks+0x308>)
 8007f22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f28:	f043 0208 	orr.w	r2, r3, #8
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e045      	b.n	8007fce <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d012      	beq.n	8007f76 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a20      	ldr	r2, [pc, #128]	@ (8007fd8 <HAL_SD_WriteBlocks+0x308>)
 8007f56:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5c:	f043 0202 	orr.w	r2, r3, #2
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e02b      	b.n	8007fce <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7c:	f003 0310 	and.w	r3, r3, #16
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d012      	beq.n	8007faa <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a13      	ldr	r2, [pc, #76]	@ (8007fd8 <HAL_SD_WriteBlocks+0x308>)
 8007f8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f90:	f043 0210 	orr.w	r2, r3, #16
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e011      	b.n	8007fce <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007fb2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e006      	b.n	8007fce <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
  }
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3748      	adds	r7, #72	@ 0x48
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	004005ff 	.word	0x004005ff

08007fdc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fea:	0f9b      	lsrs	r3, r3, #30
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ff6:	0e9b      	lsrs	r3, r3, #26
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	f003 030f 	and.w	r3, r3, #15
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008008:	0e1b      	lsrs	r3, r3, #24
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	b2da      	uxtb	r2, r3
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800801a:	0c1b      	lsrs	r3, r3, #16
 800801c:	b2da      	uxtb	r2, r3
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008026:	0a1b      	lsrs	r3, r3, #8
 8008028:	b2da      	uxtb	r2, r3
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008032:	b2da      	uxtb	r2, r3
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800803c:	0d1b      	lsrs	r3, r3, #20
 800803e:	b29a      	uxth	r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008048:	0c1b      	lsrs	r3, r3, #16
 800804a:	b2db      	uxtb	r3, r3
 800804c:	f003 030f 	and.w	r3, r3, #15
 8008050:	b2da      	uxtb	r2, r3
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800805a:	0bdb      	lsrs	r3, r3, #15
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	b2da      	uxtb	r2, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800806c:	0b9b      	lsrs	r3, r3, #14
 800806e:	b2db      	uxtb	r3, r3
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	b2da      	uxtb	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800807e:	0b5b      	lsrs	r3, r3, #13
 8008080:	b2db      	uxtb	r3, r3
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	b2da      	uxtb	r2, r3
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008090:	0b1b      	lsrs	r3, r3, #12
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	b2da      	uxtb	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2200      	movs	r2, #0
 80080a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d163      	bne.n	8008174 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080b0:	009a      	lsls	r2, r3, #2
 80080b2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80080b6:	4013      	ands	r3, r2
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80080bc:	0f92      	lsrs	r2, r2, #30
 80080be:	431a      	orrs	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080c8:	0edb      	lsrs	r3, r3, #27
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080da:	0e1b      	lsrs	r3, r3, #24
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ec:	0d5b      	lsrs	r3, r3, #21
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080fe:	0c9b      	lsrs	r3, r3, #18
 8008100:	b2db      	uxtb	r3, r3
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	b2da      	uxtb	r2, r3
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008110:	0bdb      	lsrs	r3, r3, #15
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	b2da      	uxtb	r2, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	7e1b      	ldrb	r3, [r3, #24]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	3302      	adds	r3, #2
 8008134:	2201      	movs	r2, #1
 8008136:	fa02 f303 	lsl.w	r3, r2, r3
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800813e:	fb03 f202 	mul.w	r2, r3, r2
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	7a1b      	ldrb	r3, [r3, #8]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	2201      	movs	r2, #1
 8008152:	409a      	lsls	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008160:	0a52      	lsrs	r2, r2, #9
 8008162:	fb03 f202 	mul.w	r2, r3, r2
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008170:	661a      	str	r2, [r3, #96]	@ 0x60
 8008172:	e031      	b.n	80081d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008178:	2b01      	cmp	r3, #1
 800817a:	d11d      	bne.n	80081b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008180:	041b      	lsls	r3, r3, #16
 8008182:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800818a:	0c1b      	lsrs	r3, r3, #16
 800818c:	431a      	orrs	r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	3301      	adds	r3, #1
 8008198:	029a      	lsls	r2, r3, #10
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80081b6:	e00f      	b.n	80081d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a58      	ldr	r2, [pc, #352]	@ (8008320 <HAL_SD_GetCardCSD+0x344>)
 80081be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e09d      	b.n	8008314 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081dc:	0b9b      	lsrs	r3, r3, #14
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081ee:	09db      	lsrs	r3, r3, #7
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008206:	b2da      	uxtb	r2, r3
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008210:	0fdb      	lsrs	r3, r3, #31
 8008212:	b2da      	uxtb	r2, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821c:	0f5b      	lsrs	r3, r3, #29
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0303 	and.w	r3, r3, #3
 8008224:	b2da      	uxtb	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	0e9b      	lsrs	r3, r3, #26
 8008230:	b2db      	uxtb	r3, r3
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	b2da      	uxtb	r2, r3
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008240:	0d9b      	lsrs	r3, r3, #22
 8008242:	b2db      	uxtb	r3, r3
 8008244:	f003 030f 	and.w	r3, r3, #15
 8008248:	b2da      	uxtb	r2, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008252:	0d5b      	lsrs	r3, r3, #21
 8008254:	b2db      	uxtb	r3, r3
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	b2da      	uxtb	r2, r3
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800826e:	0c1b      	lsrs	r3, r3, #16
 8008270:	b2db      	uxtb	r3, r3
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	b2da      	uxtb	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008282:	0bdb      	lsrs	r3, r3, #15
 8008284:	b2db      	uxtb	r3, r3
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008296:	0b9b      	lsrs	r3, r3, #14
 8008298:	b2db      	uxtb	r3, r3
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082aa:	0b5b      	lsrs	r3, r3, #13
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082be:	0b1b      	lsrs	r3, r3, #12
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082d2:	0a9b      	lsrs	r3, r3, #10
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e6:	0a1b      	lsrs	r3, r3, #8
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082fa:	085b      	lsrs	r3, r3, #1
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008302:	b2da      	uxtb	r2, r3
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	004005ff 	.word	0x004005ff

08008324 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800837c:	b5b0      	push	{r4, r5, r7, lr}
 800837e:	b08e      	sub	sp, #56	@ 0x38
 8008380:	af04      	add	r7, sp, #16
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2203      	movs	r2, #3
 8008390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008398:	2b03      	cmp	r3, #3
 800839a:	d02e      	beq.n	80083fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083a2:	d106      	bne.n	80083b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80083b0:	e029      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083b8:	d10a      	bne.n	80083d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 fa1c 	bl	80087f8 <SD_WideBus_Enable>
 80083c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	431a      	orrs	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80083ce:	e01a      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d10a      	bne.n	80083ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa59 	bl	800888e <SD_WideBus_Disable>
 80083dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	431a      	orrs	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80083ea:	e00c      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80083f8:	e005      	b.n	8008406 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fe:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00b      	beq.n	8008426 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a26      	ldr	r2, [pc, #152]	@ (80084ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8008414:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008424:	e01f      	b.n	8008466 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681d      	ldr	r5, [r3, #0]
 800844c:	466c      	mov	r4, sp
 800844e:	f107 0314 	add.w	r3, r7, #20
 8008452:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008456:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800845a:	f107 0308 	add.w	r3, r7, #8
 800845e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008460:	4628      	mov	r0, r5
 8008462:	f001 fdcd 	bl	800a000 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800846e:	4618      	mov	r0, r3
 8008470:	f001 fea1 	bl	800a1b6 <SDMMC_CmdBlockLength>
 8008474:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00c      	beq.n	8008496 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a0a      	ldr	r2, [pc, #40]	@ (80084ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8008482:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800849e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3728      	adds	r7, #40	@ 0x28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bdb0      	pop	{r4, r5, r7, pc}
 80084aa:	bf00      	nop
 80084ac:	004005ff 	.word	0x004005ff

080084b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80084bc:	f107 030c 	add.w	r3, r7, #12
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f970 	bl	80087a8 <SD_SendStatus>
 80084c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	0a5b      	lsrs	r3, r3, #9
 80084e0:	f003 030f 	and.w	r3, r3, #15
 80084e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80084e6:	693b      	ldr	r3, [r7, #16]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084f0:	b5b0      	push	{r4, r5, r7, lr}
 80084f2:	b094      	sub	sp, #80	@ 0x50
 80084f4:	af04      	add	r7, sp, #16
 80084f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80084f8:	2301      	movs	r3, #1
 80084fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4618      	mov	r0, r3
 8008502:	f001 fdd4 	bl	800a0ae <SDIO_GetPowerState>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d102      	bne.n	8008512 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800850c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008510:	e0b8      	b.n	8008684 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008516:	2b03      	cmp	r3, #3
 8008518:	d02f      	beq.n	800857a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4618      	mov	r0, r3
 8008520:	f001 fffe 	bl	800a520 <SDMMC_CmdSendCID>
 8008524:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <SD_InitCard+0x40>
    {
      return errorstate;
 800852c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800852e:	e0a9      	b.n	8008684 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2100      	movs	r1, #0
 8008536:	4618      	mov	r0, r3
 8008538:	f001 fdfe 	bl	800a138 <SDIO_GetResponse>
 800853c:	4602      	mov	r2, r0
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2104      	movs	r1, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f001 fdf5 	bl	800a138 <SDIO_GetResponse>
 800854e:	4602      	mov	r2, r0
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2108      	movs	r1, #8
 800855a:	4618      	mov	r0, r3
 800855c:	f001 fdec 	bl	800a138 <SDIO_GetResponse>
 8008560:	4602      	mov	r2, r0
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	210c      	movs	r1, #12
 800856c:	4618      	mov	r0, r3
 800856e:	f001 fde3 	bl	800a138 <SDIO_GetResponse>
 8008572:	4602      	mov	r2, r0
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800857e:	2b03      	cmp	r3, #3
 8008580:	d00d      	beq.n	800859e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f107 020e 	add.w	r2, r7, #14
 800858a:	4611      	mov	r1, r2
 800858c:	4618      	mov	r0, r3
 800858e:	f002 f804 	bl	800a59a <SDMMC_CmdSetRelAdd>
 8008592:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <SD_InitCard+0xae>
    {
      return errorstate;
 800859a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800859c:	e072      	b.n	8008684 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d036      	beq.n	8008614 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80085a6:	89fb      	ldrh	r3, [r7, #14]
 80085a8:	461a      	mov	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b6:	041b      	lsls	r3, r3, #16
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f001 ffce 	bl	800a55c <SDMMC_CmdSendCSD>
 80085c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80085c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ca:	e05b      	b.n	8008684 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2100      	movs	r1, #0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 fdb0 	bl	800a138 <SDIO_GetResponse>
 80085d8:	4602      	mov	r2, r0
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2104      	movs	r1, #4
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 fda7 	bl	800a138 <SDIO_GetResponse>
 80085ea:	4602      	mov	r2, r0
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2108      	movs	r1, #8
 80085f6:	4618      	mov	r0, r3
 80085f8:	f001 fd9e 	bl	800a138 <SDIO_GetResponse>
 80085fc:	4602      	mov	r2, r0
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	210c      	movs	r1, #12
 8008608:	4618      	mov	r0, r3
 800860a:	f001 fd95 	bl	800a138 <SDIO_GetResponse>
 800860e:	4602      	mov	r2, r0
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2104      	movs	r1, #4
 800861a:	4618      	mov	r0, r3
 800861c:	f001 fd8c 	bl	800a138 <SDIO_GetResponse>
 8008620:	4603      	mov	r3, r0
 8008622:	0d1a      	lsrs	r2, r3, #20
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008628:	f107 0310 	add.w	r3, r7, #16
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff fcd4 	bl	8007fdc <HAL_SD_GetCardCSD>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800863a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800863e:	e021      	b.n	8008684 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008648:	041b      	lsls	r3, r3, #16
 800864a:	2200      	movs	r2, #0
 800864c:	461c      	mov	r4, r3
 800864e:	4615      	mov	r5, r2
 8008650:	4622      	mov	r2, r4
 8008652:	462b      	mov	r3, r5
 8008654:	4608      	mov	r0, r1
 8008656:	f001 fe7b 	bl	800a350 <SDMMC_CmdSelDesel>
 800865a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800865c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <SD_InitCard+0x176>
  {
    return errorstate;
 8008662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008664:	e00e      	b.n	8008684 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681d      	ldr	r5, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	466c      	mov	r4, sp
 800866e:	f103 0210 	add.w	r2, r3, #16
 8008672:	ca07      	ldmia	r2, {r0, r1, r2}
 8008674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008678:	3304      	adds	r3, #4
 800867a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800867c:	4628      	mov	r0, r5
 800867e:	f001 fcbf 	bl	800a000 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3740      	adds	r7, #64	@ 0x40
 8008688:	46bd      	mov	sp, r7
 800868a:	bdb0      	pop	{r4, r5, r7, pc}

0800868c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008694:	2300      	movs	r3, #0
 8008696:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	2300      	movs	r3, #0
 800869e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4618      	mov	r0, r3
 80086a6:	f001 fe76 	bl	800a396 <SDMMC_CmdGoIdleState>
 80086aa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	e072      	b.n	800879c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 fe89 	bl	800a3d2 <SDMMC_CmdOperCond>
 80086c0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00d      	beq.n	80086e4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 fe5f 	bl	800a396 <SDMMC_CmdGoIdleState>
 80086d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d004      	beq.n	80086ea <SD_PowerON+0x5e>
    {
      return errorstate;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	e05b      	b.n	800879c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d137      	bne.n	8008762 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	2100      	movs	r1, #0
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 fe89 	bl	800a410 <SDMMC_CmdAppCommand>
 80086fe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d02d      	beq.n	8008762 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008706:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800870a:	e047      	b.n	800879c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f001 fe7c 	bl	800a410 <SDMMC_CmdAppCommand>
 8008718:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <SD_PowerON+0x98>
    {
      return errorstate;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	e03b      	b.n	800879c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	491e      	ldr	r1, [pc, #120]	@ (80087a4 <SD_PowerON+0x118>)
 800872a:	4618      	mov	r0, r3
 800872c:	f001 fe92 	bl	800a454 <SDMMC_CmdAppOperCommand>
 8008730:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008738:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800873c:	e02e      	b.n	800879c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2100      	movs	r1, #0
 8008744:	4618      	mov	r0, r3
 8008746:	f001 fcf7 	bl	800a138 <SDIO_GetResponse>
 800874a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	0fdb      	lsrs	r3, r3, #31
 8008750:	2b01      	cmp	r3, #1
 8008752:	d101      	bne.n	8008758 <SD_PowerON+0xcc>
 8008754:	2301      	movs	r3, #1
 8008756:	e000      	b.n	800875a <SD_PowerON+0xce>
 8008758:	2300      	movs	r3, #0
 800875a:	613b      	str	r3, [r7, #16]

    count++;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	3301      	adds	r3, #1
 8008760:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008768:	4293      	cmp	r3, r2
 800876a:	d802      	bhi.n	8008772 <SD_PowerON+0xe6>
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0cc      	beq.n	800870c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008778:	4293      	cmp	r3, r2
 800877a:	d902      	bls.n	8008782 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800877c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008780:	e00c      	b.n	800879c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	645a      	str	r2, [r3, #68]	@ 0x44
 8008792:	e002      	b.n	800879a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	3718      	adds	r7, #24
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	c1100000 	.word	0xc1100000

080087a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80087b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80087bc:	e018      	b.n	80087f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087c6:	041b      	lsls	r3, r3, #16
 80087c8:	4619      	mov	r1, r3
 80087ca:	4610      	mov	r0, r2
 80087cc:	f001 ff06 	bl	800a5dc <SDMMC_CmdSendStatus>
 80087d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	e009      	b.n	80087f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2100      	movs	r1, #0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 fca8 	bl	800a138 <SDIO_GetResponse>
 80087e8:	4602      	mov	r2, r0
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	2300      	movs	r3, #0
 8008806:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2100      	movs	r1, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f001 fc92 	bl	800a138 <SDIO_GetResponse>
 8008814:	4603      	mov	r3, r0
 8008816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800881a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800881e:	d102      	bne.n	8008826 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008820:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008824:	e02f      	b.n	8008886 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008826:	f107 030c 	add.w	r3, r7, #12
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f000 f879 	bl	8008924 <SD_FindSCR>
 8008832:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	e023      	b.n	8008886 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008844:	2b00      	cmp	r3, #0
 8008846:	d01c      	beq.n	8008882 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008850:	041b      	lsls	r3, r3, #16
 8008852:	4619      	mov	r1, r3
 8008854:	4610      	mov	r0, r2
 8008856:	f001 fddb 	bl	800a410 <SDMMC_CmdAppCommand>
 800885a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	e00f      	b.n	8008886 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2102      	movs	r1, #2
 800886c:	4618      	mov	r0, r3
 800886e:	f001 fe14 	bl	800a49a <SDMMC_CmdBusWidth>
 8008872:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	e003      	b.n	8008886 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800887e:	2300      	movs	r3, #0
 8008880:	e001      	b.n	8008886 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008882:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b086      	sub	sp, #24
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	2300      	movs	r3, #0
 800889c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2100      	movs	r1, #0
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 fc47 	bl	800a138 <SDIO_GetResponse>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088b4:	d102      	bne.n	80088bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80088ba:	e02f      	b.n	800891c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088bc:	f107 030c 	add.w	r3, r7, #12
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f82e 	bl	8008924 <SD_FindSCR>
 80088c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	e023      	b.n	800891c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d01c      	beq.n	8008918 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e6:	041b      	lsls	r3, r3, #16
 80088e8:	4619      	mov	r1, r3
 80088ea:	4610      	mov	r0, r2
 80088ec:	f001 fd90 	bl	800a410 <SDMMC_CmdAppCommand>
 80088f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d001      	beq.n	80088fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	e00f      	b.n	800891c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2100      	movs	r1, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f001 fdc9 	bl	800a49a <SDMMC_CmdBusWidth>
 8008908:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	e003      	b.n	800891c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008914:	2300      	movs	r3, #0
 8008916:	e001      	b.n	800891c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008918:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008924:	b590      	push	{r4, r7, lr}
 8008926:	b08f      	sub	sp, #60	@ 0x3c
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800892e:	f7f9 fc11 	bl	8002154 <HAL_GetTick>
 8008932:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8008934:	2300      	movs	r3, #0
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008938:	2300      	movs	r3, #0
 800893a:	60bb      	str	r3, [r7, #8]
 800893c:	2300      	movs	r3, #0
 800893e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2108      	movs	r1, #8
 800894a:	4618      	mov	r0, r3
 800894c:	f001 fc33 	bl	800a1b6 <SDMMC_CmdBlockLength>
 8008950:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895a:	e0b2      	b.n	8008ac2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008964:	041b      	lsls	r3, r3, #16
 8008966:	4619      	mov	r1, r3
 8008968:	4610      	mov	r0, r2
 800896a:	f001 fd51 	bl	800a410 <SDMMC_CmdAppCommand>
 800896e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	e0a3      	b.n	8008ac2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800897a:	f04f 33ff 	mov.w	r3, #4294967295
 800897e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008980:	2308      	movs	r3, #8
 8008982:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008984:	2330      	movs	r3, #48	@ 0x30
 8008986:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008988:	2302      	movs	r3, #2
 800898a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800898c:	2300      	movs	r3, #0
 800898e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008990:	2301      	movs	r3, #1
 8008992:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f107 0210 	add.w	r2, r7, #16
 800899c:	4611      	mov	r1, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 fbdd 	bl	800a15e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 fd98 	bl	800a4de <SDMMC_CmdSendSCR>
 80089ae:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d02a      	beq.n	8008a0c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	e083      	b.n	8008ac2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00f      	beq.n	80089e8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6819      	ldr	r1, [r3, #0]
 80089cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	f107 0208 	add.w	r2, r7, #8
 80089d4:	18d4      	adds	r4, r2, r3
 80089d6:	4608      	mov	r0, r1
 80089d8:	f001 fb3d 	bl	800a056 <SDIO_ReadFIFO>
 80089dc:	4603      	mov	r3, r0
 80089de:	6023      	str	r3, [r4, #0]
      index++;
 80089e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e2:	3301      	adds	r3, #1
 80089e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80089e6:	e006      	b.n	80089f6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d012      	beq.n	8008a1c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80089f6:	f7f9 fbad 	bl	8002154 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d102      	bne.n	8008a0c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a06:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a0a:	e05a      	b.n	8008ac2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a12:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0cf      	beq.n	80089ba <SD_FindSCR+0x96>
 8008a1a:	e000      	b.n	8008a1e <SD_FindSCR+0xfa>
      break;
 8008a1c:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a24:	f003 0308 	and.w	r3, r3, #8
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2208      	movs	r2, #8
 8008a32:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008a34:	2308      	movs	r3, #8
 8008a36:	e044      	b.n	8008ac2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d005      	beq.n	8008a52 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e037      	b.n	8008ac2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2220      	movs	r2, #32
 8008a66:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008a68:	2320      	movs	r3, #32
 8008a6a:	e02a      	b.n	8008ac2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a74:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	061a      	lsls	r2, r3, #24
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	0a1b      	lsrs	r3, r3, #8
 8008a88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	0e1b      	lsrs	r3, r3, #24
 8008a92:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a96:	601a      	str	r2, [r3, #0]
    scr++;
 8008a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9a:	3304      	adds	r3, #4
 8008a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	061a      	lsls	r2, r3, #24
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	021b      	lsls	r3, r3, #8
 8008aa6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008aaa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	0a1b      	lsrs	r3, r3, #8
 8008ab0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ab4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	0e1b      	lsrs	r3, r3, #24
 8008aba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008abe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	373c      	adds	r7, #60	@ 0x3c
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd90      	pop	{r4, r7, pc}

08008aca <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e025      	b.n	8008b2a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d106      	bne.n	8008af8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7f9 f8d0 	bl	8001c98 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3304      	adds	r3, #4
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	f001 f9b2 	bl	8009e74 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	f001 fa07 	bl	8009f2e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e07b      	b.n	8008c3c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d108      	bne.n	8008b5e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b54:	d009      	beq.n	8008b6a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	61da      	str	r2, [r3, #28]
 8008b5c:	e005      	b.n	8008b6a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7f8 fed9 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2202      	movs	r2, #2
 8008b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ba0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	f003 0302 	and.w	r3, r3, #2
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	695b      	ldr	r3, [r3, #20]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	69db      	ldr	r3, [r3, #28]
 8008be0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008be4:	431a      	orrs	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bee:	ea42 0103 	orr.w	r1, r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	0c1b      	lsrs	r3, r3, #16
 8008c08:	f003 0104 	and.w	r1, r3, #4
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c10:	f003 0210 	and.w	r2, r3, #16
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	430a      	orrs	r2, r1
 8008c1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69da      	ldr	r2, [r3, #28]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e041      	b.n	8008cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d106      	bne.n	8008c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7f8 fece 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4619      	mov	r1, r3
 8008c82:	4610      	mov	r0, r2
 8008c84:	f000 fa7e 	bl	8009184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d001      	beq.n	8008cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e04e      	b.n	8008d9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f042 0201 	orr.w	r2, r2, #1
 8008d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a23      	ldr	r2, [pc, #140]	@ (8008da8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d022      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d26:	d01d      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008dac <HAL_TIM_Base_Start_IT+0xc8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d018      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a1e      	ldr	r2, [pc, #120]	@ (8008db0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d013      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1c      	ldr	r2, [pc, #112]	@ (8008db4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00e      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8008db8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d009      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a19      	ldr	r2, [pc, #100]	@ (8008dbc <HAL_TIM_Base_Start_IT+0xd8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d004      	beq.n	8008d64 <HAL_TIM_Base_Start_IT+0x80>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a18      	ldr	r2, [pc, #96]	@ (8008dc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d111      	bne.n	8008d88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2b06      	cmp	r3, #6
 8008d74:	d010      	beq.n	8008d98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0201 	orr.w	r2, r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d86:	e007      	b.n	8008d98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f042 0201 	orr.w	r2, r2, #1
 8008d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40010000 	.word	0x40010000
 8008dac:	40000400 	.word	0x40000400
 8008db0:	40000800 	.word	0x40000800
 8008db4:	40000c00 	.word	0x40000c00
 8008db8:	40010400 	.word	0x40010400
 8008dbc:	40014000 	.word	0x40014000
 8008dc0:	40001800 	.word	0x40001800

08008dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d020      	beq.n	8008e28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f003 0302 	and.w	r3, r3, #2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01b      	beq.n	8008e28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f06f 0202 	mvn.w	r2, #2
 8008df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	f003 0303 	and.w	r3, r3, #3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f999 	bl	8009146 <HAL_TIM_IC_CaptureCallback>
 8008e14:	e005      	b.n	8008e22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f98b 	bl	8009132 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f99c 	bl	800915a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	f003 0304 	and.w	r3, r3, #4
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d020      	beq.n	8008e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d01b      	beq.n	8008e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f06f 0204 	mvn.w	r2, #4
 8008e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f973 	bl	8009146 <HAL_TIM_IC_CaptureCallback>
 8008e60:	e005      	b.n	8008e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f965 	bl	8009132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 f976 	bl	800915a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f003 0308 	and.w	r3, r3, #8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d020      	beq.n	8008ec0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01b      	beq.n	8008ec0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f06f 0208 	mvn.w	r2, #8
 8008e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2204      	movs	r2, #4
 8008e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	69db      	ldr	r3, [r3, #28]
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f94d 	bl	8009146 <HAL_TIM_IC_CaptureCallback>
 8008eac:	e005      	b.n	8008eba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f93f 	bl	8009132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f950 	bl	800915a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f003 0310 	and.w	r3, r3, #16
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d020      	beq.n	8008f0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f003 0310 	and.w	r3, r3, #16
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d01b      	beq.n	8008f0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0210 	mvn.w	r2, #16
 8008edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2208      	movs	r2, #8
 8008ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f927 	bl	8009146 <HAL_TIM_IC_CaptureCallback>
 8008ef8:	e005      	b.n	8008f06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 f919 	bl	8009132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f92a 	bl	800915a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00c      	beq.n	8008f30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d007      	beq.n	8008f30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f06f 0201 	mvn.w	r2, #1
 8008f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7f8 faa4 	bl	8001478 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00c      	beq.n	8008f54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d007      	beq.n	8008f54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fae4 	bl	800951c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00c      	beq.n	8008f78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d007      	beq.n	8008f78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 f8fb 	bl	800916e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00c      	beq.n	8008f9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f06f 0220 	mvn.w	r2, #32
 8008f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fab6 	bl	8009508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d101      	bne.n	8008fc0 <HAL_TIM_ConfigClockSource+0x1c>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e0b4      	b.n	800912a <HAL_TIM_ConfigClockSource+0x186>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ff8:	d03e      	beq.n	8009078 <HAL_TIM_ConfigClockSource+0xd4>
 8008ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ffe:	f200 8087 	bhi.w	8009110 <HAL_TIM_ConfigClockSource+0x16c>
 8009002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009006:	f000 8086 	beq.w	8009116 <HAL_TIM_ConfigClockSource+0x172>
 800900a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800900e:	d87f      	bhi.n	8009110 <HAL_TIM_ConfigClockSource+0x16c>
 8009010:	2b70      	cmp	r3, #112	@ 0x70
 8009012:	d01a      	beq.n	800904a <HAL_TIM_ConfigClockSource+0xa6>
 8009014:	2b70      	cmp	r3, #112	@ 0x70
 8009016:	d87b      	bhi.n	8009110 <HAL_TIM_ConfigClockSource+0x16c>
 8009018:	2b60      	cmp	r3, #96	@ 0x60
 800901a:	d050      	beq.n	80090be <HAL_TIM_ConfigClockSource+0x11a>
 800901c:	2b60      	cmp	r3, #96	@ 0x60
 800901e:	d877      	bhi.n	8009110 <HAL_TIM_ConfigClockSource+0x16c>
 8009020:	2b50      	cmp	r3, #80	@ 0x50
 8009022:	d03c      	beq.n	800909e <HAL_TIM_ConfigClockSource+0xfa>
 8009024:	2b50      	cmp	r3, #80	@ 0x50
 8009026:	d873      	bhi.n	8009110 <HAL_TIM_ConfigClockSource+0x16c>
 8009028:	2b40      	cmp	r3, #64	@ 0x40
 800902a:	d058      	beq.n	80090de <HAL_TIM_ConfigClockSource+0x13a>
 800902c:	2b40      	cmp	r3, #64	@ 0x40
 800902e:	d86f      	bhi.n	8009110 <HAL_TIM_ConfigClockSource+0x16c>
 8009030:	2b30      	cmp	r3, #48	@ 0x30
 8009032:	d064      	beq.n	80090fe <HAL_TIM_ConfigClockSource+0x15a>
 8009034:	2b30      	cmp	r3, #48	@ 0x30
 8009036:	d86b      	bhi.n	8009110 <HAL_TIM_ConfigClockSource+0x16c>
 8009038:	2b20      	cmp	r3, #32
 800903a:	d060      	beq.n	80090fe <HAL_TIM_ConfigClockSource+0x15a>
 800903c:	2b20      	cmp	r3, #32
 800903e:	d867      	bhi.n	8009110 <HAL_TIM_ConfigClockSource+0x16c>
 8009040:	2b00      	cmp	r3, #0
 8009042:	d05c      	beq.n	80090fe <HAL_TIM_ConfigClockSource+0x15a>
 8009044:	2b10      	cmp	r3, #16
 8009046:	d05a      	beq.n	80090fe <HAL_TIM_ConfigClockSource+0x15a>
 8009048:	e062      	b.n	8009110 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800905a:	f000 f9b9 	bl	80093d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800906c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	609a      	str	r2, [r3, #8]
      break;
 8009076:	e04f      	b.n	8009118 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009088:	f000 f9a2 	bl	80093d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689a      	ldr	r2, [r3, #8]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800909a:	609a      	str	r2, [r3, #8]
      break;
 800909c:	e03c      	b.n	8009118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090aa:	461a      	mov	r2, r3
 80090ac:	f000 f916 	bl	80092dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2150      	movs	r1, #80	@ 0x50
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 f96f 	bl	800939a <TIM_ITRx_SetConfig>
      break;
 80090bc:	e02c      	b.n	8009118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090ca:	461a      	mov	r2, r3
 80090cc:	f000 f935 	bl	800933a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2160      	movs	r1, #96	@ 0x60
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 f95f 	bl	800939a <TIM_ITRx_SetConfig>
      break;
 80090dc:	e01c      	b.n	8009118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090ea:	461a      	mov	r2, r3
 80090ec:	f000 f8f6 	bl	80092dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2140      	movs	r1, #64	@ 0x40
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f94f 	bl	800939a <TIM_ITRx_SetConfig>
      break;
 80090fc:	e00c      	b.n	8009118 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4619      	mov	r1, r3
 8009108:	4610      	mov	r0, r2
 800910a:	f000 f946 	bl	800939a <TIM_ITRx_SetConfig>
      break;
 800910e:	e003      	b.n	8009118 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	73fb      	strb	r3, [r7, #15]
      break;
 8009114:	e000      	b.n	8009118 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800913a:	bf00      	nop
 800913c:	370c      	adds	r7, #12
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009146:	b480      	push	{r7}
 8009148:	b083      	sub	sp, #12
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009162:	bf00      	nop
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr

0800916e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
	...

08009184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	4a46      	ldr	r2, [pc, #280]	@ (80092b0 <TIM_Base_SetConfig+0x12c>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d013      	beq.n	80091c4 <TIM_Base_SetConfig+0x40>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091a2:	d00f      	beq.n	80091c4 <TIM_Base_SetConfig+0x40>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a43      	ldr	r2, [pc, #268]	@ (80092b4 <TIM_Base_SetConfig+0x130>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00b      	beq.n	80091c4 <TIM_Base_SetConfig+0x40>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a42      	ldr	r2, [pc, #264]	@ (80092b8 <TIM_Base_SetConfig+0x134>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d007      	beq.n	80091c4 <TIM_Base_SetConfig+0x40>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a41      	ldr	r2, [pc, #260]	@ (80092bc <TIM_Base_SetConfig+0x138>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d003      	beq.n	80091c4 <TIM_Base_SetConfig+0x40>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a40      	ldr	r2, [pc, #256]	@ (80092c0 <TIM_Base_SetConfig+0x13c>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d108      	bne.n	80091d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a35      	ldr	r2, [pc, #212]	@ (80092b0 <TIM_Base_SetConfig+0x12c>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d02b      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091e4:	d027      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a32      	ldr	r2, [pc, #200]	@ (80092b4 <TIM_Base_SetConfig+0x130>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d023      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a31      	ldr	r2, [pc, #196]	@ (80092b8 <TIM_Base_SetConfig+0x134>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d01f      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a30      	ldr	r2, [pc, #192]	@ (80092bc <TIM_Base_SetConfig+0x138>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d01b      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a2f      	ldr	r2, [pc, #188]	@ (80092c0 <TIM_Base_SetConfig+0x13c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d017      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a2e      	ldr	r2, [pc, #184]	@ (80092c4 <TIM_Base_SetConfig+0x140>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d013      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a2d      	ldr	r2, [pc, #180]	@ (80092c8 <TIM_Base_SetConfig+0x144>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d00f      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a2c      	ldr	r2, [pc, #176]	@ (80092cc <TIM_Base_SetConfig+0x148>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d00b      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a2b      	ldr	r2, [pc, #172]	@ (80092d0 <TIM_Base_SetConfig+0x14c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d007      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a2a      	ldr	r2, [pc, #168]	@ (80092d4 <TIM_Base_SetConfig+0x150>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d003      	beq.n	8009236 <TIM_Base_SetConfig+0xb2>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a29      	ldr	r2, [pc, #164]	@ (80092d8 <TIM_Base_SetConfig+0x154>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d108      	bne.n	8009248 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800923c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a10      	ldr	r2, [pc, #64]	@ (80092b0 <TIM_Base_SetConfig+0x12c>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d003      	beq.n	800927c <TIM_Base_SetConfig+0xf8>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a12      	ldr	r2, [pc, #72]	@ (80092c0 <TIM_Base_SetConfig+0x13c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d103      	bne.n	8009284 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	2b01      	cmp	r3, #1
 8009294:	d105      	bne.n	80092a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f023 0201 	bic.w	r2, r3, #1
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	611a      	str	r2, [r3, #16]
  }
}
 80092a2:	bf00      	nop
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	40010000 	.word	0x40010000
 80092b4:	40000400 	.word	0x40000400
 80092b8:	40000800 	.word	0x40000800
 80092bc:	40000c00 	.word	0x40000c00
 80092c0:	40010400 	.word	0x40010400
 80092c4:	40014000 	.word	0x40014000
 80092c8:	40014400 	.word	0x40014400
 80092cc:	40014800 	.word	0x40014800
 80092d0:	40001800 	.word	0x40001800
 80092d4:	40001c00 	.word	0x40001c00
 80092d8:	40002000 	.word	0x40002000

080092dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6a1b      	ldr	r3, [r3, #32]
 80092ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	f023 0201 	bic.w	r2, r3, #1
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	4313      	orrs	r3, r2
 8009310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f023 030a 	bic.w	r3, r3, #10
 8009318:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	4313      	orrs	r3, r2
 8009320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	621a      	str	r2, [r3, #32]
}
 800932e:	bf00      	nop
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800933a:	b480      	push	{r7}
 800933c:	b087      	sub	sp, #28
 800933e:	af00      	add	r7, sp, #0
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	60b9      	str	r1, [r7, #8]
 8009344:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6a1b      	ldr	r3, [r3, #32]
 8009350:	f023 0210 	bic.w	r2, r3, #16
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009364:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	031b      	lsls	r3, r3, #12
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009376:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800939a:	b480      	push	{r7}
 800939c:	b085      	sub	sp, #20
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	4313      	orrs	r3, r2
 80093b8:	f043 0307 	orr.w	r3, r3, #7
 80093bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	609a      	str	r2, [r3, #8]
}
 80093c4:	bf00      	nop
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	021a      	lsls	r2, r3, #8
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	609a      	str	r2, [r3, #8]
}
 8009404:	bf00      	nop
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009420:	2b01      	cmp	r3, #1
 8009422:	d101      	bne.n	8009428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009424:	2302      	movs	r3, #2
 8009426:	e05a      	b.n	80094de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2202      	movs	r2, #2
 8009434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800944e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a21      	ldr	r2, [pc, #132]	@ (80094ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d022      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009474:	d01d      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a1d      	ldr	r2, [pc, #116]	@ (80094f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d018      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a1b      	ldr	r2, [pc, #108]	@ (80094f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d013      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a1a      	ldr	r2, [pc, #104]	@ (80094f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00e      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a18      	ldr	r2, [pc, #96]	@ (80094fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d009      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a17      	ldr	r2, [pc, #92]	@ (8009500 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d004      	beq.n	80094b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a15      	ldr	r2, [pc, #84]	@ (8009504 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d10c      	bne.n	80094cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	40010000 	.word	0x40010000
 80094f0:	40000400 	.word	0x40000400
 80094f4:	40000800 	.word	0x40000800
 80094f8:	40000c00 	.word	0x40000c00
 80094fc:	40010400 	.word	0x40010400
 8009500:	40014000 	.word	0x40014000
 8009504:	40001800 	.word	0x40001800

08009508 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e042      	b.n	80095c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7f8 fa7a 	bl	8001a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2224      	movs	r2, #36	@ 0x24
 8009560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009572:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fa09 	bl	800998c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	691a      	ldr	r2, [r3, #16]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009588:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	695a      	ldr	r2, [r3, #20]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009598:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2220      	movs	r2, #32
 80095bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	@ 0x28
 80095d4:	af02      	add	r7, sp, #8
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	603b      	str	r3, [r7, #0]
 80095dc:	4613      	mov	r3, r2
 80095de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	2b20      	cmp	r3, #32
 80095ee:	d175      	bne.n	80096dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d002      	beq.n	80095fc <HAL_UART_Transmit+0x2c>
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d101      	bne.n	8009600 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e06e      	b.n	80096de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2221      	movs	r2, #33	@ 0x21
 800960a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800960e:	f7f8 fda1 	bl	8002154 <HAL_GetTick>
 8009612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	88fa      	ldrh	r2, [r7, #6]
 8009618:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	88fa      	ldrh	r2, [r7, #6]
 800961e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009628:	d108      	bne.n	800963c <HAL_UART_Transmit+0x6c>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d104      	bne.n	800963c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	61bb      	str	r3, [r7, #24]
 800963a:	e003      	b.n	8009644 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009640:	2300      	movs	r3, #0
 8009642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009644:	e02e      	b.n	80096a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2200      	movs	r2, #0
 800964e:	2180      	movs	r1, #128	@ 0x80
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 f8df 	bl	8009814 <UART_WaitOnFlagUntilTimeout>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2220      	movs	r2, #32
 8009660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e03a      	b.n	80096de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10b      	bne.n	8009686 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800967c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	3302      	adds	r3, #2
 8009682:	61bb      	str	r3, [r7, #24]
 8009684:	e007      	b.n	8009696 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	3301      	adds	r3, #1
 8009694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800969a:	b29b      	uxth	r3, r3
 800969c:	3b01      	subs	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1cb      	bne.n	8009646 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2200      	movs	r2, #0
 80096b6:	2140      	movs	r1, #64	@ 0x40
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 f8ab 	bl	8009814 <UART_WaitOnFlagUntilTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d005      	beq.n	80096d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2220      	movs	r2, #32
 80096c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e006      	b.n	80096de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2220      	movs	r2, #32
 80096d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	e000      	b.n	80096de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80096dc:	2302      	movs	r3, #2
  }
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3720      	adds	r7, #32
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b08a      	sub	sp, #40	@ 0x28
 80096ea:	af02      	add	r7, sp, #8
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	60b9      	str	r1, [r7, #8]
 80096f0:	603b      	str	r3, [r7, #0]
 80096f2:	4613      	mov	r3, r2
 80096f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b20      	cmp	r3, #32
 8009704:	f040 8081 	bne.w	800980a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <HAL_UART_Receive+0x2e>
 800970e:	88fb      	ldrh	r3, [r7, #6]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e079      	b.n	800980c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2222      	movs	r2, #34	@ 0x22
 8009722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800972c:	f7f8 fd12 	bl	8002154 <HAL_GetTick>
 8009730:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	88fa      	ldrh	r2, [r7, #6]
 8009736:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	88fa      	ldrh	r2, [r7, #6]
 800973c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009746:	d108      	bne.n	800975a <HAL_UART_Receive+0x74>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d104      	bne.n	800975a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8009750:	2300      	movs	r3, #0
 8009752:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	61bb      	str	r3, [r7, #24]
 8009758:	e003      	b.n	8009762 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800975e:	2300      	movs	r3, #0
 8009760:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8009762:	e047      	b.n	80097f4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2200      	movs	r2, #0
 800976c:	2120      	movs	r1, #32
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f850 	bl	8009814 <UART_WaitOnFlagUntilTimeout>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d005      	beq.n	8009786 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2220      	movs	r2, #32
 800977e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e042      	b.n	800980c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10c      	bne.n	80097a6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009798:	b29a      	uxth	r2, r3
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	3302      	adds	r3, #2
 80097a2:	61bb      	str	r3, [r7, #24]
 80097a4:	e01f      	b.n	80097e6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097ae:	d007      	beq.n	80097c0 <HAL_UART_Receive+0xda>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10a      	bne.n	80097ce <HAL_UART_Receive+0xe8>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	e008      	b.n	80097e0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	3301      	adds	r3, #1
 80097e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1b2      	bne.n	8009764 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2220      	movs	r2, #32
 8009802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	e000      	b.n	800980c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800980a:	2302      	movs	r3, #2
  }
}
 800980c:	4618      	mov	r0, r3
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	603b      	str	r3, [r7, #0]
 8009820:	4613      	mov	r3, r2
 8009822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009824:	e03b      	b.n	800989e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982c:	d037      	beq.n	800989e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800982e:	f7f8 fc91 	bl	8002154 <HAL_GetTick>
 8009832:	4602      	mov	r2, r0
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	1ad3      	subs	r3, r2, r3
 8009838:	6a3a      	ldr	r2, [r7, #32]
 800983a:	429a      	cmp	r2, r3
 800983c:	d302      	bcc.n	8009844 <UART_WaitOnFlagUntilTimeout+0x30>
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e03a      	b.n	80098be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d023      	beq.n	800989e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2b80      	cmp	r3, #128	@ 0x80
 800985a:	d020      	beq.n	800989e <UART_WaitOnFlagUntilTimeout+0x8a>
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2b40      	cmp	r3, #64	@ 0x40
 8009860:	d01d      	beq.n	800989e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0308 	and.w	r3, r3, #8
 800986c:	2b08      	cmp	r3, #8
 800986e:	d116      	bne.n	800989e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	617b      	str	r3, [r7, #20]
 8009884:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f81d 	bl	80098c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2208      	movs	r2, #8
 8009890:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e00f      	b.n	80098be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	4013      	ands	r3, r2
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	bf0c      	ite	eq
 80098ae:	2301      	moveq	r3, #1
 80098b0:	2300      	movne	r3, #0
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	461a      	mov	r2, r3
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d0b4      	beq.n	8009826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b095      	sub	sp, #84	@ 0x54
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	330c      	adds	r3, #12
 80098d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d8:	e853 3f00 	ldrex	r3, [r3]
 80098dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	330c      	adds	r3, #12
 80098ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80098f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098f6:	e841 2300 	strex	r3, r2, [r1]
 80098fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d1e5      	bne.n	80098ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3314      	adds	r3, #20
 8009908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	e853 3f00 	ldrex	r3, [r3]
 8009910:	61fb      	str	r3, [r7, #28]
   return(result);
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	f023 0301 	bic.w	r3, r3, #1
 8009918:	64bb      	str	r3, [r7, #72]	@ 0x48
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3314      	adds	r3, #20
 8009920:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009922:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009924:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009926:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009928:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800992a:	e841 2300 	strex	r3, r2, [r1]
 800992e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e5      	bne.n	8009902 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800993a:	2b01      	cmp	r3, #1
 800993c:	d119      	bne.n	8009972 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	330c      	adds	r3, #12
 8009944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	60bb      	str	r3, [r7, #8]
   return(result);
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f023 0310 	bic.w	r3, r3, #16
 8009954:	647b      	str	r3, [r7, #68]	@ 0x44
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	330c      	adds	r3, #12
 800995c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800995e:	61ba      	str	r2, [r7, #24]
 8009960:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009962:	6979      	ldr	r1, [r7, #20]
 8009964:	69ba      	ldr	r2, [r7, #24]
 8009966:	e841 2300 	strex	r3, r2, [r1]
 800996a:	613b      	str	r3, [r7, #16]
   return(result);
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1e5      	bne.n	800993e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2220      	movs	r2, #32
 8009976:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009980:	bf00      	nop
 8009982:	3754      	adds	r7, #84	@ 0x54
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800998c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009990:	b0c0      	sub	sp, #256	@ 0x100
 8009992:	af00      	add	r7, sp, #0
 8009994:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80099a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099a8:	68d9      	ldr	r1, [r3, #12]
 80099aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	ea40 0301 	orr.w	r3, r0, r1
 80099b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	431a      	orrs	r2, r3
 80099cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80099e4:	f021 010c 	bic.w	r1, r1, #12
 80099e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099f2:	430b      	orrs	r3, r1
 80099f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a06:	6999      	ldr	r1, [r3, #24]
 8009a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	ea40 0301 	orr.w	r3, r0, r1
 8009a12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	4b8f      	ldr	r3, [pc, #572]	@ (8009c58 <UART_SetConfig+0x2cc>)
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d005      	beq.n	8009a2c <UART_SetConfig+0xa0>
 8009a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	4b8d      	ldr	r3, [pc, #564]	@ (8009c5c <UART_SetConfig+0x2d0>)
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d104      	bne.n	8009a36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a2c:	f7fc ff90 	bl	8006950 <HAL_RCC_GetPCLK2Freq>
 8009a30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009a34:	e003      	b.n	8009a3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a36:	f7fc ff77 	bl	8006928 <HAL_RCC_GetPCLK1Freq>
 8009a3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a42:	69db      	ldr	r3, [r3, #28]
 8009a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a48:	f040 810c 	bne.w	8009c64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a50:	2200      	movs	r2, #0
 8009a52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009a56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009a5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009a5e:	4622      	mov	r2, r4
 8009a60:	462b      	mov	r3, r5
 8009a62:	1891      	adds	r1, r2, r2
 8009a64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009a66:	415b      	adcs	r3, r3
 8009a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009a6e:	4621      	mov	r1, r4
 8009a70:	eb12 0801 	adds.w	r8, r2, r1
 8009a74:	4629      	mov	r1, r5
 8009a76:	eb43 0901 	adc.w	r9, r3, r1
 8009a7a:	f04f 0200 	mov.w	r2, #0
 8009a7e:	f04f 0300 	mov.w	r3, #0
 8009a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a8e:	4690      	mov	r8, r2
 8009a90:	4699      	mov	r9, r3
 8009a92:	4623      	mov	r3, r4
 8009a94:	eb18 0303 	adds.w	r3, r8, r3
 8009a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009a9c:	462b      	mov	r3, r5
 8009a9e:	eb49 0303 	adc.w	r3, r9, r3
 8009aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ab2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ab6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009aba:	460b      	mov	r3, r1
 8009abc:	18db      	adds	r3, r3, r3
 8009abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	eb42 0303 	adc.w	r3, r2, r3
 8009ac6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ac8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009acc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ad0:	f7f6 fbee 	bl	80002b0 <__aeabi_uldivmod>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4b61      	ldr	r3, [pc, #388]	@ (8009c60 <UART_SetConfig+0x2d4>)
 8009ada:	fba3 2302 	umull	r2, r3, r3, r2
 8009ade:	095b      	lsrs	r3, r3, #5
 8009ae0:	011c      	lsls	r4, r3, #4
 8009ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009aec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009af0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009af4:	4642      	mov	r2, r8
 8009af6:	464b      	mov	r3, r9
 8009af8:	1891      	adds	r1, r2, r2
 8009afa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009afc:	415b      	adcs	r3, r3
 8009afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b04:	4641      	mov	r1, r8
 8009b06:	eb12 0a01 	adds.w	sl, r2, r1
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	eb43 0b01 	adc.w	fp, r3, r1
 8009b10:	f04f 0200 	mov.w	r2, #0
 8009b14:	f04f 0300 	mov.w	r3, #0
 8009b18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b24:	4692      	mov	sl, r2
 8009b26:	469b      	mov	fp, r3
 8009b28:	4643      	mov	r3, r8
 8009b2a:	eb1a 0303 	adds.w	r3, sl, r3
 8009b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b32:	464b      	mov	r3, r9
 8009b34:	eb4b 0303 	adc.w	r3, fp, r3
 8009b38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009b4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009b50:	460b      	mov	r3, r1
 8009b52:	18db      	adds	r3, r3, r3
 8009b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b56:	4613      	mov	r3, r2
 8009b58:	eb42 0303 	adc.w	r3, r2, r3
 8009b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009b62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009b66:	f7f6 fba3 	bl	80002b0 <__aeabi_uldivmod>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	4611      	mov	r1, r2
 8009b70:	4b3b      	ldr	r3, [pc, #236]	@ (8009c60 <UART_SetConfig+0x2d4>)
 8009b72:	fba3 2301 	umull	r2, r3, r3, r1
 8009b76:	095b      	lsrs	r3, r3, #5
 8009b78:	2264      	movs	r2, #100	@ 0x64
 8009b7a:	fb02 f303 	mul.w	r3, r2, r3
 8009b7e:	1acb      	subs	r3, r1, r3
 8009b80:	00db      	lsls	r3, r3, #3
 8009b82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009b86:	4b36      	ldr	r3, [pc, #216]	@ (8009c60 <UART_SetConfig+0x2d4>)
 8009b88:	fba3 2302 	umull	r2, r3, r3, r2
 8009b8c:	095b      	lsrs	r3, r3, #5
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009b94:	441c      	add	r4, r3
 8009b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ba0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009ba4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009ba8:	4642      	mov	r2, r8
 8009baa:	464b      	mov	r3, r9
 8009bac:	1891      	adds	r1, r2, r2
 8009bae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009bb0:	415b      	adcs	r3, r3
 8009bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009bb8:	4641      	mov	r1, r8
 8009bba:	1851      	adds	r1, r2, r1
 8009bbc:	6339      	str	r1, [r7, #48]	@ 0x30
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	414b      	adcs	r3, r1
 8009bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc4:	f04f 0200 	mov.w	r2, #0
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009bd0:	4659      	mov	r1, fp
 8009bd2:	00cb      	lsls	r3, r1, #3
 8009bd4:	4651      	mov	r1, sl
 8009bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bda:	4651      	mov	r1, sl
 8009bdc:	00ca      	lsls	r2, r1, #3
 8009bde:	4610      	mov	r0, r2
 8009be0:	4619      	mov	r1, r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	4642      	mov	r2, r8
 8009be6:	189b      	adds	r3, r3, r2
 8009be8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bec:	464b      	mov	r3, r9
 8009bee:	460a      	mov	r2, r1
 8009bf0:	eb42 0303 	adc.w	r3, r2, r3
 8009bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	18db      	adds	r3, r3, r3
 8009c10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c12:	4613      	mov	r3, r2
 8009c14:	eb42 0303 	adc.w	r3, r2, r3
 8009c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009c22:	f7f6 fb45 	bl	80002b0 <__aeabi_uldivmod>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c60 <UART_SetConfig+0x2d4>)
 8009c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c30:	095b      	lsrs	r3, r3, #5
 8009c32:	2164      	movs	r1, #100	@ 0x64
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	00db      	lsls	r3, r3, #3
 8009c3c:	3332      	adds	r3, #50	@ 0x32
 8009c3e:	4a08      	ldr	r2, [pc, #32]	@ (8009c60 <UART_SetConfig+0x2d4>)
 8009c40:	fba2 2303 	umull	r2, r3, r2, r3
 8009c44:	095b      	lsrs	r3, r3, #5
 8009c46:	f003 0207 	and.w	r2, r3, #7
 8009c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4422      	add	r2, r4
 8009c52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c54:	e106      	b.n	8009e64 <UART_SetConfig+0x4d8>
 8009c56:	bf00      	nop
 8009c58:	40011000 	.word	0x40011000
 8009c5c:	40011400 	.word	0x40011400
 8009c60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c68:	2200      	movs	r2, #0
 8009c6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009c6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009c72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009c76:	4642      	mov	r2, r8
 8009c78:	464b      	mov	r3, r9
 8009c7a:	1891      	adds	r1, r2, r2
 8009c7c:	6239      	str	r1, [r7, #32]
 8009c7e:	415b      	adcs	r3, r3
 8009c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c86:	4641      	mov	r1, r8
 8009c88:	1854      	adds	r4, r2, r1
 8009c8a:	4649      	mov	r1, r9
 8009c8c:	eb43 0501 	adc.w	r5, r3, r1
 8009c90:	f04f 0200 	mov.w	r2, #0
 8009c94:	f04f 0300 	mov.w	r3, #0
 8009c98:	00eb      	lsls	r3, r5, #3
 8009c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c9e:	00e2      	lsls	r2, r4, #3
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	461d      	mov	r5, r3
 8009ca4:	4643      	mov	r3, r8
 8009ca6:	18e3      	adds	r3, r4, r3
 8009ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009cac:	464b      	mov	r3, r9
 8009cae:	eb45 0303 	adc.w	r3, r5, r3
 8009cb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009cc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009cc6:	f04f 0200 	mov.w	r2, #0
 8009cca:	f04f 0300 	mov.w	r3, #0
 8009cce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	008b      	lsls	r3, r1, #2
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cdc:	4621      	mov	r1, r4
 8009cde:	008a      	lsls	r2, r1, #2
 8009ce0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009ce4:	f7f6 fae4 	bl	80002b0 <__aeabi_uldivmod>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4b60      	ldr	r3, [pc, #384]	@ (8009e70 <UART_SetConfig+0x4e4>)
 8009cee:	fba3 2302 	umull	r2, r3, r3, r2
 8009cf2:	095b      	lsrs	r3, r3, #5
 8009cf4:	011c      	lsls	r4, r3, #4
 8009cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d08:	4642      	mov	r2, r8
 8009d0a:	464b      	mov	r3, r9
 8009d0c:	1891      	adds	r1, r2, r2
 8009d0e:	61b9      	str	r1, [r7, #24]
 8009d10:	415b      	adcs	r3, r3
 8009d12:	61fb      	str	r3, [r7, #28]
 8009d14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d18:	4641      	mov	r1, r8
 8009d1a:	1851      	adds	r1, r2, r1
 8009d1c:	6139      	str	r1, [r7, #16]
 8009d1e:	4649      	mov	r1, r9
 8009d20:	414b      	adcs	r3, r1
 8009d22:	617b      	str	r3, [r7, #20]
 8009d24:	f04f 0200 	mov.w	r2, #0
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d30:	4659      	mov	r1, fp
 8009d32:	00cb      	lsls	r3, r1, #3
 8009d34:	4651      	mov	r1, sl
 8009d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d3a:	4651      	mov	r1, sl
 8009d3c:	00ca      	lsls	r2, r1, #3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	4619      	mov	r1, r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	4642      	mov	r2, r8
 8009d46:	189b      	adds	r3, r3, r2
 8009d48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009d4c:	464b      	mov	r3, r9
 8009d4e:	460a      	mov	r2, r1
 8009d50:	eb42 0303 	adc.w	r3, r2, r3
 8009d54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009d62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009d64:	f04f 0200 	mov.w	r2, #0
 8009d68:	f04f 0300 	mov.w	r3, #0
 8009d6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009d70:	4649      	mov	r1, r9
 8009d72:	008b      	lsls	r3, r1, #2
 8009d74:	4641      	mov	r1, r8
 8009d76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d7a:	4641      	mov	r1, r8
 8009d7c:	008a      	lsls	r2, r1, #2
 8009d7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009d82:	f7f6 fa95 	bl	80002b0 <__aeabi_uldivmod>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	4b38      	ldr	r3, [pc, #224]	@ (8009e70 <UART_SetConfig+0x4e4>)
 8009d8e:	fba3 2301 	umull	r2, r3, r3, r1
 8009d92:	095b      	lsrs	r3, r3, #5
 8009d94:	2264      	movs	r2, #100	@ 0x64
 8009d96:	fb02 f303 	mul.w	r3, r2, r3
 8009d9a:	1acb      	subs	r3, r1, r3
 8009d9c:	011b      	lsls	r3, r3, #4
 8009d9e:	3332      	adds	r3, #50	@ 0x32
 8009da0:	4a33      	ldr	r2, [pc, #204]	@ (8009e70 <UART_SetConfig+0x4e4>)
 8009da2:	fba2 2303 	umull	r2, r3, r2, r3
 8009da6:	095b      	lsrs	r3, r3, #5
 8009da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009dac:	441c      	add	r4, r3
 8009dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009db2:	2200      	movs	r2, #0
 8009db4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009db6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009db8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009dbc:	4642      	mov	r2, r8
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	1891      	adds	r1, r2, r2
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	415b      	adcs	r3, r3
 8009dc6:	60fb      	str	r3, [r7, #12]
 8009dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009dcc:	4641      	mov	r1, r8
 8009dce:	1851      	adds	r1, r2, r1
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	414b      	adcs	r3, r1
 8009dd6:	607b      	str	r3, [r7, #4]
 8009dd8:	f04f 0200 	mov.w	r2, #0
 8009ddc:	f04f 0300 	mov.w	r3, #0
 8009de0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009de4:	4659      	mov	r1, fp
 8009de6:	00cb      	lsls	r3, r1, #3
 8009de8:	4651      	mov	r1, sl
 8009dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dee:	4651      	mov	r1, sl
 8009df0:	00ca      	lsls	r2, r1, #3
 8009df2:	4610      	mov	r0, r2
 8009df4:	4619      	mov	r1, r3
 8009df6:	4603      	mov	r3, r0
 8009df8:	4642      	mov	r2, r8
 8009dfa:	189b      	adds	r3, r3, r2
 8009dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dfe:	464b      	mov	r3, r9
 8009e00:	460a      	mov	r2, r1
 8009e02:	eb42 0303 	adc.w	r3, r2, r3
 8009e06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e12:	667a      	str	r2, [r7, #100]	@ 0x64
 8009e14:	f04f 0200 	mov.w	r2, #0
 8009e18:	f04f 0300 	mov.w	r3, #0
 8009e1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009e20:	4649      	mov	r1, r9
 8009e22:	008b      	lsls	r3, r1, #2
 8009e24:	4641      	mov	r1, r8
 8009e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e2a:	4641      	mov	r1, r8
 8009e2c:	008a      	lsls	r2, r1, #2
 8009e2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e32:	f7f6 fa3d 	bl	80002b0 <__aeabi_uldivmod>
 8009e36:	4602      	mov	r2, r0
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e70 <UART_SetConfig+0x4e4>)
 8009e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e40:	095b      	lsrs	r3, r3, #5
 8009e42:	2164      	movs	r1, #100	@ 0x64
 8009e44:	fb01 f303 	mul.w	r3, r1, r3
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	3332      	adds	r3, #50	@ 0x32
 8009e4e:	4a08      	ldr	r2, [pc, #32]	@ (8009e70 <UART_SetConfig+0x4e4>)
 8009e50:	fba2 2303 	umull	r2, r3, r2, r3
 8009e54:	095b      	lsrs	r3, r3, #5
 8009e56:	f003 020f 	and.w	r2, r3, #15
 8009e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4422      	add	r2, r4
 8009e62:	609a      	str	r2, [r3, #8]
}
 8009e64:	bf00      	nop
 8009e66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e70:	51eb851f 	.word	0x51eb851f

08009e74 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d123      	bne.n	8009ece <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009e8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	6851      	ldr	r1, [r2, #4]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	6892      	ldr	r2, [r2, #8]
 8009e9a:	4311      	orrs	r1, r2
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	68d2      	ldr	r2, [r2, #12]
 8009ea0:	4311      	orrs	r1, r2
 8009ea2:	683a      	ldr	r2, [r7, #0]
 8009ea4:	6912      	ldr	r2, [r2, #16]
 8009ea6:	4311      	orrs	r1, r2
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	6952      	ldr	r2, [r2, #20]
 8009eac:	4311      	orrs	r1, r2
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	6992      	ldr	r2, [r2, #24]
 8009eb2:	4311      	orrs	r1, r2
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	69d2      	ldr	r2, [r2, #28]
 8009eb8:	4311      	orrs	r1, r2
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	6a12      	ldr	r2, [r2, #32]
 8009ebe:	4311      	orrs	r1, r2
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	e028      	b.n	8009f20 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	69d9      	ldr	r1, [r3, #28]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	4319      	orrs	r1, r3
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee4:	430b      	orrs	r3, r1
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009ef4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	6851      	ldr	r1, [r2, #4]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	6892      	ldr	r2, [r2, #8]
 8009f00:	4311      	orrs	r1, r2
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	68d2      	ldr	r2, [r2, #12]
 8009f06:	4311      	orrs	r1, r2
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	6912      	ldr	r2, [r2, #16]
 8009f0c:	4311      	orrs	r1, r2
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	6952      	ldr	r2, [r2, #20]
 8009f12:	4311      	orrs	r1, r2
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	6992      	ldr	r2, [r2, #24]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	60b9      	str	r1, [r7, #8]
 8009f38:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d128      	bne.n	8009f92 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	1e59      	subs	r1, r3, #1
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	4319      	orrs	r1, r3
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	4319      	orrs	r1, r3
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	031b      	lsls	r3, r3, #12
 8009f6a:	4319      	orrs	r1, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	041b      	lsls	r3, r3, #16
 8009f74:	4319      	orrs	r1, r3
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	051b      	lsls	r3, r3, #20
 8009f7e:	4319      	orrs	r1, r3
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	061b      	lsls	r3, r3, #24
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	609a      	str	r2, [r3, #8]
 8009f90:	e02f      	b.n	8009ff2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009f9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	68d2      	ldr	r2, [r2, #12]
 8009fa2:	3a01      	subs	r2, #1
 8009fa4:	0311      	lsls	r1, r2, #12
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	6952      	ldr	r2, [r2, #20]
 8009faa:	3a01      	subs	r2, #1
 8009fac:	0512      	lsls	r2, r2, #20
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	431a      	orrs	r2, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	1e59      	subs	r1, r3, #1
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	011b      	lsls	r3, r3, #4
 8009fcc:	4319      	orrs	r1, r3
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	3b01      	subs	r3, #1
 8009fd4:	021b      	lsls	r3, r3, #8
 8009fd6:	4319      	orrs	r1, r3
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	3b01      	subs	r3, #1
 8009fde:	041b      	lsls	r3, r3, #16
 8009fe0:	4319      	orrs	r1, r3
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	061b      	lsls	r3, r3, #24
 8009fea:	430b      	orrs	r3, r1
 8009fec:	431a      	orrs	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009ff2:	2300      	movs	r3, #0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a000:	b084      	sub	sp, #16
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	f107 001c 	add.w	r0, r7, #28
 800a00e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a016:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a018:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a01a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a01e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a022:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a026:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a02a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a03a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	431a      	orrs	r2, r3
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	b004      	add	sp, #16
 800a054:	4770      	bx	lr

0800a056 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a064:	4618      	mov	r0, r3
 800a066:	370c      	adds	r7, #12
 800a068:	46bd      	mov	sp, r7
 800a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06e:	4770      	bx	lr

0800a070 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2203      	movs	r2, #3
 800a09e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	370c      	adds	r7, #12
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b083      	sub	sp, #12
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0303 	and.w	r3, r3, #3
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b085      	sub	sp, #20
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a0e8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a0ee:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a0f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a104:	f023 030f 	bic.w	r3, r3, #15
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	431a      	orrs	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a11e:	b480      	push	{r7}
 800a120:	b083      	sub	sp, #12
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	b2db      	uxtb	r3, r3
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3314      	adds	r3, #20
 800a146:	461a      	mov	r2, r3
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	4413      	add	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
}  
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a15e:	b480      	push	{r7}
 800a160:	b085      	sub	sp, #20
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a184:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a18a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a190:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	4313      	orrs	r3, r2
 800a196:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a19c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	431a      	orrs	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0

}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b088      	sub	sp, #32
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a1c4:	2310      	movs	r3, #16
 800a1c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1c8:	2340      	movs	r3, #64	@ 0x40
 800a1ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1d6:	f107 0308 	add.w	r3, r7, #8
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f7ff ff74 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a1e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a1e6:	2110      	movs	r1, #16
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f000 fa19 	bl	800a620 <SDMMC_GetCmdResp1>
 800a1ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f0:	69fb      	ldr	r3, [r7, #28]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3720      	adds	r7, #32
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b088      	sub	sp, #32
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
 800a202:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a208:	2311      	movs	r3, #17
 800a20a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a20c:	2340      	movs	r3, #64	@ 0x40
 800a20e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a214:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a218:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a21a:	f107 0308 	add.w	r3, r7, #8
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f7ff ff52 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a22a:	2111      	movs	r1, #17
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f9f7 	bl	800a620 <SDMMC_GetCmdResp1>
 800a232:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a234:	69fb      	ldr	r3, [r7, #28]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3720      	adds	r7, #32
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b088      	sub	sp, #32
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a24c:	2312      	movs	r3, #18
 800a24e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a250:	2340      	movs	r3, #64	@ 0x40
 800a252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a254:	2300      	movs	r3, #0
 800a256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a25c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a25e:	f107 0308 	add.w	r3, r7, #8
 800a262:	4619      	mov	r1, r3
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f7ff ff30 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a26a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a26e:	2112      	movs	r1, #18
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f9d5 	bl	800a620 <SDMMC_GetCmdResp1>
 800a276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a278:	69fb      	ldr	r3, [r7, #28]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3720      	adds	r7, #32
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b088      	sub	sp, #32
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a290:	2318      	movs	r3, #24
 800a292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a294:	2340      	movs	r3, #64	@ 0x40
 800a296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a29c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2a2:	f107 0308 	add.w	r3, r7, #8
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7ff ff0e 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a2ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2b2:	2118      	movs	r1, #24
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f9b3 	bl	800a620 <SDMMC_GetCmdResp1>
 800a2ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2bc:	69fb      	ldr	r3, [r7, #28]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3720      	adds	r7, #32
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b088      	sub	sp, #32
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a2d4:	2319      	movs	r3, #25
 800a2d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2d8:	2340      	movs	r3, #64	@ 0x40
 800a2da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2e6:	f107 0308 	add.w	r3, r7, #8
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f7ff feec 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a2f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2f6:	2119      	movs	r1, #25
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f991 	bl	800a620 <SDMMC_GetCmdResp1>
 800a2fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a300:	69fb      	ldr	r3, [r7, #28]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3720      	adds	r7, #32
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b088      	sub	sp, #32
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a314:	2300      	movs	r3, #0
 800a316:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a318:	230c      	movs	r3, #12
 800a31a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a31c:	2340      	movs	r3, #64	@ 0x40
 800a31e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a320:	2300      	movs	r3, #0
 800a322:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a328:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a32a:	f107 0308 	add.w	r3, r7, #8
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f7ff feca 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a336:	4a05      	ldr	r2, [pc, #20]	@ (800a34c <SDMMC_CmdStopTransfer+0x40>)
 800a338:	210c      	movs	r1, #12
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f970 	bl	800a620 <SDMMC_GetCmdResp1>
 800a340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a342:	69fb      	ldr	r3, [r7, #28]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	05f5e100 	.word	0x05f5e100

0800a350 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08a      	sub	sp, #40	@ 0x28
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a360:	2307      	movs	r3, #7
 800a362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a364:	2340      	movs	r3, #64	@ 0x40
 800a366:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a368:	2300      	movs	r3, #0
 800a36a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a36c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a370:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a372:	f107 0310 	add.w	r3, r7, #16
 800a376:	4619      	mov	r1, r3
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f7ff fea6 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a37e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a382:	2107      	movs	r1, #7
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f94b 	bl	800a620 <SDMMC_GetCmdResp1>
 800a38a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3728      	adds	r7, #40	@ 0x28
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b088      	sub	sp, #32
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3b4:	f107 0308 	add.w	r3, r7, #8
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f7ff fe85 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 fb65 	bl	800aa90 <SDMMC_GetCmdError>
 800a3c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3720      	adds	r7, #32
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b088      	sub	sp, #32
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a3da:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a3de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3e4:	2340      	movs	r3, #64	@ 0x40
 800a3e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3f2:	f107 0308 	add.w	r3, r7, #8
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7ff fe66 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 faf8 	bl	800a9f4 <SDMMC_GetCmdResp7>
 800a404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a406:	69fb      	ldr	r3, [r7, #28]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3720      	adds	r7, #32
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a41e:	2337      	movs	r3, #55	@ 0x37
 800a420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a422:	2340      	movs	r3, #64	@ 0x40
 800a424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a42a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a42e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a430:	f107 0308 	add.w	r3, r7, #8
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff fe47 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a43c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a440:	2137      	movs	r1, #55	@ 0x37
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f8ec 	bl	800a620 <SDMMC_GetCmdResp1>
 800a448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a44a:	69fb      	ldr	r3, [r7, #28]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3720      	adds	r7, #32
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a464:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a46a:	2329      	movs	r3, #41	@ 0x29
 800a46c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a46e:	2340      	movs	r3, #64	@ 0x40
 800a470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a472:	2300      	movs	r3, #0
 800a474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a47a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a47c:	f107 0308 	add.w	r3, r7, #8
 800a480:	4619      	mov	r1, r3
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7ff fe21 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f9ff 	bl	800a88c <SDMMC_GetCmdResp3>
 800a48e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a490:	69fb      	ldr	r3, [r7, #28]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b088      	sub	sp, #32
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a4a8:	2306      	movs	r3, #6
 800a4aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4ac:	2340      	movs	r3, #64	@ 0x40
 800a4ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4ba:	f107 0308 	add.w	r3, r7, #8
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7ff fe02 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a4c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4ca:	2106      	movs	r1, #6
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f8a7 	bl	800a620 <SDMMC_GetCmdResp1>
 800a4d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4d4:	69fb      	ldr	r3, [r7, #28]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b088      	sub	sp, #32
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a4ea:	2333      	movs	r3, #51	@ 0x33
 800a4ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4ee:	2340      	movs	r3, #64	@ 0x40
 800a4f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4fc:	f107 0308 	add.w	r3, r7, #8
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff fde1 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a50c:	2133      	movs	r1, #51	@ 0x33
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f886 	bl	800a620 <SDMMC_GetCmdResp1>
 800a514:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a516:	69fb      	ldr	r3, [r7, #28]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3720      	adds	r7, #32
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a528:	2300      	movs	r3, #0
 800a52a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a52c:	2302      	movs	r3, #2
 800a52e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a530:	23c0      	movs	r3, #192	@ 0xc0
 800a532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a534:	2300      	movs	r3, #0
 800a536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a53c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff fdc0 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f956 	bl	800a7fc <SDMMC_GetCmdResp2>
 800a550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a552:	69fb      	ldr	r3, [r7, #28]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3720      	adds	r7, #32
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a56a:	2309      	movs	r3, #9
 800a56c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a56e:	23c0      	movs	r3, #192	@ 0xc0
 800a570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a572:	2300      	movs	r3, #0
 800a574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a57a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a57c:	f107 0308 	add.w	r3, r7, #8
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff fda1 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f937 	bl	800a7fc <SDMMC_GetCmdResp2>
 800a58e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a590:	69fb      	ldr	r3, [r7, #28]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3720      	adds	r7, #32
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b088      	sub	sp, #32
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5ac:	2340      	movs	r3, #64	@ 0x40
 800a5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5ba:	f107 0308 	add.w	r3, r7, #8
 800a5be:	4619      	mov	r1, r3
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff fd82 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	2103      	movs	r1, #3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f99c 	bl	800a908 <SDMMC_GetCmdResp6>
 800a5d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5d2:	69fb      	ldr	r3, [r7, #28]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3720      	adds	r7, #32
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a5ea:	230d      	movs	r3, #13
 800a5ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5ee:	2340      	movs	r3, #64	@ 0x40
 800a5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5fc:	f107 0308 	add.w	r3, r7, #8
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff fd61 	bl	800a0ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a60c:	210d      	movs	r1, #13
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f806 	bl	800a620 <SDMMC_GetCmdResp1>
 800a614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a616:	69fb      	ldr	r3, [r7, #28]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	460b      	mov	r3, r1
 800a62a:	607a      	str	r2, [r7, #4]
 800a62c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a62e:	4b70      	ldr	r3, [pc, #448]	@ (800a7f0 <SDMMC_GetCmdResp1+0x1d0>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a70      	ldr	r2, [pc, #448]	@ (800a7f4 <SDMMC_GetCmdResp1+0x1d4>)
 800a634:	fba2 2303 	umull	r2, r3, r2, r3
 800a638:	0a5a      	lsrs	r2, r3, #9
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	fb02 f303 	mul.w	r3, r2, r3
 800a640:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	1e5a      	subs	r2, r3, #1
 800a646:	61fa      	str	r2, [r7, #28]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d102      	bne.n	800a652 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a64c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a650:	e0c9      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a656:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0ef      	beq.n	800a642 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1ea      	bne.n	800a642 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a670:	f003 0304 	and.w	r3, r3, #4
 800a674:	2b00      	cmp	r3, #0
 800a676:	d004      	beq.n	800a682 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2204      	movs	r2, #4
 800a67c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a67e:	2304      	movs	r3, #4
 800a680:	e0b1      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d004      	beq.n	800a698 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a694:	2301      	movs	r3, #1
 800a696:	e0a6      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	22c5      	movs	r2, #197	@ 0xc5
 800a69c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7ff fd3d 	bl	800a11e <SDIO_GetCommandResponse>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	7afb      	ldrb	r3, [r7, #11]
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d001      	beq.n	800a6b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e099      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f7ff fd3f 	bl	800a138 <SDIO_GetResponse>
 800a6ba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a6bc:	697a      	ldr	r2, [r7, #20]
 800a6be:	4b4e      	ldr	r3, [pc, #312]	@ (800a7f8 <SDMMC_GetCmdResp1+0x1d8>)
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e08d      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	da02      	bge.n	800a6d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a6d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6d4:	e087      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a6e0:	2340      	movs	r3, #64	@ 0x40
 800a6e2:	e080      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a6ee:	2380      	movs	r3, #128	@ 0x80
 800a6f0:	e079      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d002      	beq.n	800a702 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a6fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a700:	e071      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a70c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a710:	e069      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a71c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a720:	e061      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a72c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a730:	e059      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d002      	beq.n	800a742 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a73c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a740:	e051      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d002      	beq.n	800a752 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a74c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a750:	e049      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a75c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a760:	e041      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a76c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a770:	e039      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d002      	beq.n	800a782 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a77c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a780:	e031      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a78c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a790:	e029      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a79c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a7a0:	e021      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a7ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a7b0:	e019      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a7bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a7c0:	e011      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a7cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a7d0:	e009      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	f003 0308 	and.w	r3, r3, #8
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a7dc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a7e0:	e001      	b.n	800a7e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a7e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3720      	adds	r7, #32
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	20000000 	.word	0x20000000
 800a7f4:	10624dd3 	.word	0x10624dd3
 800a7f8:	fdffe008 	.word	0xfdffe008

0800a7fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a804:	4b1f      	ldr	r3, [pc, #124]	@ (800a884 <SDMMC_GetCmdResp2+0x88>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a1f      	ldr	r2, [pc, #124]	@ (800a888 <SDMMC_GetCmdResp2+0x8c>)
 800a80a:	fba2 2303 	umull	r2, r3, r2, r3
 800a80e:	0a5b      	lsrs	r3, r3, #9
 800a810:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a814:	fb02 f303 	mul.w	r3, r2, r3
 800a818:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	1e5a      	subs	r2, r3, #1
 800a81e:	60fa      	str	r2, [r7, #12]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d102      	bne.n	800a82a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a824:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a828:	e026      	b.n	800a878 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a82e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a836:	2b00      	cmp	r3, #0
 800a838:	d0ef      	beq.n	800a81a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1ea      	bne.n	800a81a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a848:	f003 0304 	and.w	r3, r3, #4
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d004      	beq.n	800a85a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2204      	movs	r2, #4
 800a854:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a856:	2304      	movs	r3, #4
 800a858:	e00e      	b.n	800a878 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	2b00      	cmp	r3, #0
 800a864:	d004      	beq.n	800a870 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e003      	b.n	800a878 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	22c5      	movs	r2, #197	@ 0xc5
 800a874:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	20000000 	.word	0x20000000
 800a888:	10624dd3 	.word	0x10624dd3

0800a88c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a894:	4b1a      	ldr	r3, [pc, #104]	@ (800a900 <SDMMC_GetCmdResp3+0x74>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a1a      	ldr	r2, [pc, #104]	@ (800a904 <SDMMC_GetCmdResp3+0x78>)
 800a89a:	fba2 2303 	umull	r2, r3, r2, r3
 800a89e:	0a5b      	lsrs	r3, r3, #9
 800a8a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8a4:	fb02 f303 	mul.w	r3, r2, r3
 800a8a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	1e5a      	subs	r2, r3, #1
 800a8ae:	60fa      	str	r2, [r7, #12]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d102      	bne.n	800a8ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8b8:	e01b      	b.n	800a8f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0ef      	beq.n	800a8aa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1ea      	bne.n	800a8aa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d004      	beq.n	800a8ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2204      	movs	r2, #4
 800a8e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8e6:	2304      	movs	r3, #4
 800a8e8:	e003      	b.n	800a8f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	22c5      	movs	r2, #197	@ 0xc5
 800a8ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3714      	adds	r7, #20
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	20000000 	.word	0x20000000
 800a904:	10624dd3 	.word	0x10624dd3

0800a908 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b088      	sub	sp, #32
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	460b      	mov	r3, r1
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a916:	4b35      	ldr	r3, [pc, #212]	@ (800a9ec <SDMMC_GetCmdResp6+0xe4>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a35      	ldr	r2, [pc, #212]	@ (800a9f0 <SDMMC_GetCmdResp6+0xe8>)
 800a91c:	fba2 2303 	umull	r2, r3, r2, r3
 800a920:	0a5b      	lsrs	r3, r3, #9
 800a922:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a926:	fb02 f303 	mul.w	r3, r2, r3
 800a92a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	1e5a      	subs	r2, r3, #1
 800a930:	61fa      	str	r2, [r7, #28]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d102      	bne.n	800a93c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a936:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a93a:	e052      	b.n	800a9e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a940:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d0ef      	beq.n	800a92c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a952:	2b00      	cmp	r3, #0
 800a954:	d1ea      	bne.n	800a92c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a95a:	f003 0304 	and.w	r3, r3, #4
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2204      	movs	r2, #4
 800a966:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a968:	2304      	movs	r3, #4
 800a96a:	e03a      	b.n	800a9e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a970:	f003 0301 	and.w	r3, r3, #1
 800a974:	2b00      	cmp	r3, #0
 800a976:	d004      	beq.n	800a982 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2201      	movs	r2, #1
 800a97c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a97e:	2301      	movs	r3, #1
 800a980:	e02f      	b.n	800a9e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff fbcb 	bl	800a11e <SDIO_GetCommandResponse>
 800a988:	4603      	mov	r3, r0
 800a98a:	461a      	mov	r2, r3
 800a98c:	7afb      	ldrb	r3, [r7, #11]
 800a98e:	4293      	cmp	r3, r2
 800a990:	d001      	beq.n	800a996 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a992:	2301      	movs	r3, #1
 800a994:	e025      	b.n	800a9e2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	22c5      	movs	r2, #197	@ 0xc5
 800a99a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a99c:	2100      	movs	r1, #0
 800a99e:	68f8      	ldr	r0, [r7, #12]
 800a9a0:	f7ff fbca 	bl	800a138 <SDIO_GetResponse>
 800a9a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d106      	bne.n	800a9be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	0c1b      	lsrs	r3, r3, #16
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e011      	b.n	800a9e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a9cc:	e009      	b.n	800a9e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a9d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9dc:	e001      	b.n	800a9e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a9de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3720      	adds	r7, #32
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000000 	.word	0x20000000
 800a9f0:	10624dd3 	.word	0x10624dd3

0800a9f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9fc:	4b22      	ldr	r3, [pc, #136]	@ (800aa88 <SDMMC_GetCmdResp7+0x94>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a22      	ldr	r2, [pc, #136]	@ (800aa8c <SDMMC_GetCmdResp7+0x98>)
 800aa02:	fba2 2303 	umull	r2, r3, r2, r3
 800aa06:	0a5b      	lsrs	r3, r3, #9
 800aa08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa0c:	fb02 f303 	mul.w	r3, r2, r3
 800aa10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	1e5a      	subs	r2, r3, #1
 800aa16:	60fa      	str	r2, [r7, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d102      	bne.n	800aa22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa20:	e02c      	b.n	800aa7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d0ef      	beq.n	800aa12 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1ea      	bne.n	800aa12 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa40:	f003 0304 	and.w	r3, r3, #4
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d004      	beq.n	800aa52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2204      	movs	r2, #4
 800aa4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa4e:	2304      	movs	r3, #4
 800aa50:	e014      	b.n	800aa7c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d004      	beq.n	800aa68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e009      	b.n	800aa7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2240      	movs	r2, #64	@ 0x40
 800aa78:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aa7a:	2300      	movs	r3, #0
  
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr
 800aa88:	20000000 	.word	0x20000000
 800aa8c:	10624dd3 	.word	0x10624dd3

0800aa90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa98:	4b11      	ldr	r3, [pc, #68]	@ (800aae0 <SDMMC_GetCmdError+0x50>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a11      	ldr	r2, [pc, #68]	@ (800aae4 <SDMMC_GetCmdError+0x54>)
 800aa9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa2:	0a5b      	lsrs	r3, r3, #9
 800aaa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaa8:	fb02 f303 	mul.w	r3, r2, r3
 800aaac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	1e5a      	subs	r2, r3, #1
 800aab2:	60fa      	str	r2, [r7, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d102      	bne.n	800aabe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aab8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aabc:	e009      	b.n	800aad2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0f1      	beq.n	800aaae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	22c5      	movs	r2, #197	@ 0xc5
 800aace:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800aad0:	2300      	movs	r3, #0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3714      	adds	r7, #20
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	20000000 	.word	0x20000000
 800aae4:	10624dd3 	.word	0x10624dd3

0800aae8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aae8:	b084      	sub	sp, #16
 800aaea:	b580      	push	{r7, lr}
 800aaec:	b084      	sub	sp, #16
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	f107 001c 	add.w	r0, r7, #28
 800aaf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aafa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d123      	bne.n	800ab4a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800ab16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab1a:	687a      	ldr	r2, [r7, #4]
 800ab1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ab2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d105      	bne.n	800ab3e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f9dc 	bl	800aefc <USB_CoreReset>
 800ab44:	4603      	mov	r3, r0
 800ab46:	73fb      	strb	r3, [r7, #15]
 800ab48:	e01b      	b.n	800ab82 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 f9d0 	bl	800aefc <USB_CoreReset>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d106      	bne.n	800ab76 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	639a      	str	r2, [r3, #56]	@ 0x38
 800ab74:	e005      	b.n	800ab82 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab82:	7fbb      	ldrb	r3, [r7, #30]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d10b      	bne.n	800aba0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	f043 0206 	orr.w	r2, r3, #6
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	f043 0220 	orr.w	r2, r3, #32
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abac:	b004      	add	sp, #16
 800abae:	4770      	bx	lr

0800abb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	f043 0201 	orr.w	r2, r3, #1
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abc4:	2300      	movs	r3, #0
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	370c      	adds	r7, #12
 800abca:	46bd      	mov	sp, r7
 800abcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd0:	4770      	bx	lr

0800abd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f023 0201 	bic.w	r2, r3, #1
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d115      	bne.n	800ac42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ac22:	200a      	movs	r0, #10
 800ac24:	f7f7 faa2 	bl	800216c <HAL_Delay>
      ms += 10U;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	330a      	adds	r3, #10
 800ac2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f956 	bl	800aee0 <USB_GetMode>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d01e      	beq.n	800ac78 <USB_SetCurrentMode+0x84>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ac3e:	d9f0      	bls.n	800ac22 <USB_SetCurrentMode+0x2e>
 800ac40:	e01a      	b.n	800ac78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac42:	78fb      	ldrb	r3, [r7, #3]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d115      	bne.n	800ac74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ac54:	200a      	movs	r0, #10
 800ac56:	f7f7 fa89 	bl	800216c <HAL_Delay>
      ms += 10U;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	330a      	adds	r3, #10
 800ac5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 f93d 	bl	800aee0 <USB_GetMode>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d005      	beq.n	800ac78 <USB_SetCurrentMode+0x84>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2bc7      	cmp	r3, #199	@ 0xc7
 800ac70:	d9f0      	bls.n	800ac54 <USB_SetCurrentMode+0x60>
 800ac72:	e001      	b.n	800ac78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e005      	b.n	800ac84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2bc8      	cmp	r3, #200	@ 0xc8
 800ac7c:	d101      	bne.n	800ac82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e000      	b.n	800ac84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aca6:	d901      	bls.n	800acac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e01b      	b.n	800ace4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	daf2      	bge.n	800ac9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	019b      	lsls	r3, r3, #6
 800acbc:	f043 0220 	orr.w	r2, r3, #32
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800acd0:	d901      	bls.n	800acd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800acd2:	2303      	movs	r3, #3
 800acd4:	e006      	b.n	800ace4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	f003 0320 	and.w	r3, r3, #32
 800acde:	2b20      	cmp	r3, #32
 800ace0:	d0f0      	beq.n	800acc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3301      	adds	r3, #1
 800ad00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad08:	d901      	bls.n	800ad0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e018      	b.n	800ad40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	daf2      	bge.n	800acfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2210      	movs	r2, #16
 800ad1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3301      	adds	r3, #1
 800ad24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad2c:	d901      	bls.n	800ad32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e006      	b.n	800ad40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f003 0310 	and.w	r3, r3, #16
 800ad3a:	2b10      	cmp	r3, #16
 800ad3c:	d0f0      	beq.n	800ad20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3714      	adds	r7, #20
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b089      	sub	sp, #36	@ 0x24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	4611      	mov	r1, r2
 800ad58:	461a      	mov	r2, r3
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	71fb      	strb	r3, [r7, #7]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ad6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d123      	bne.n	800adba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ad72:	88bb      	ldrh	r3, [r7, #4]
 800ad74:	3303      	adds	r3, #3
 800ad76:	089b      	lsrs	r3, r3, #2
 800ad78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	61bb      	str	r3, [r7, #24]
 800ad7e:	e018      	b.n	800adb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ad80:	79fb      	ldrb	r3, [r7, #7]
 800ad82:	031a      	lsls	r2, r3, #12
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	3301      	adds	r3, #1
 800ad98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	3301      	adds	r3, #1
 800ada4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ada6:	69fb      	ldr	r3, [r7, #28]
 800ada8:	3301      	adds	r3, #1
 800adaa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	3301      	adds	r3, #1
 800adb0:	61bb      	str	r3, [r7, #24]
 800adb2:	69ba      	ldr	r2, [r7, #24]
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d3e2      	bcc.n	800ad80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3724      	adds	r7, #36	@ 0x24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr

0800adc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800adc8:	b480      	push	{r7}
 800adca:	b08b      	sub	sp, #44	@ 0x2c
 800adcc:	af00      	add	r7, sp, #0
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800adde:	88fb      	ldrh	r3, [r7, #6]
 800ade0:	089b      	lsrs	r3, r3, #2
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ade6:	88fb      	ldrh	r3, [r7, #6]
 800ade8:	f003 0303 	and.w	r3, r3, #3
 800adec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800adee:	2300      	movs	r3, #0
 800adf0:	623b      	str	r3, [r7, #32]
 800adf2:	e014      	b.n	800ae1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfe:	601a      	str	r2, [r3, #0]
    pDest++;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae02:	3301      	adds	r3, #1
 800ae04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ae06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae08:	3301      	adds	r3, #1
 800ae0a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	3301      	adds	r3, #1
 800ae10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ae12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae14:	3301      	adds	r3, #1
 800ae16:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	623b      	str	r3, [r7, #32]
 800ae1e:	6a3a      	ldr	r2, [r7, #32]
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d3e6      	bcc.n	800adf4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ae26:	8bfb      	ldrh	r3, [r7, #30]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d01e      	beq.n	800ae6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ae30:	69bb      	ldr	r3, [r7, #24]
 800ae32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae36:	461a      	mov	r2, r3
 800ae38:	f107 0310 	add.w	r3, r7, #16
 800ae3c:	6812      	ldr	r2, [r2, #0]
 800ae3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	00db      	lsls	r3, r3, #3
 800ae48:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae50:	701a      	strb	r2, [r3, #0]
      i++;
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	3301      	adds	r3, #1
 800ae56:	623b      	str	r3, [r7, #32]
      pDest++;
 800ae58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ae5e:	8bfb      	ldrh	r3, [r7, #30]
 800ae60:	3b01      	subs	r3, #1
 800ae62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ae64:	8bfb      	ldrh	r3, [r7, #30]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1ea      	bne.n	800ae40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ae6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	372c      	adds	r7, #44	@ 0x2c
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	695b      	ldr	r3, [r3, #20]
 800ae84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	68fa      	ldr	r2, [r7, #12]
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae90:	68fb      	ldr	r3, [r7, #12]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b085      	sub	sp, #20
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	460b      	mov	r3, r1
 800aea8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	015a      	lsls	r2, r3, #5
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800aebe:	78fb      	ldrb	r3, [r7, #3]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	68ba      	ldr	r2, [r7, #8]
 800aece:	4013      	ands	r3, r2
 800aed0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aed2:	68bb      	ldr	r3, [r7, #8]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	f003 0301 	and.w	r3, r3, #1
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af04:	2300      	movs	r3, #0
 800af06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3301      	adds	r3, #1
 800af0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af14:	d901      	bls.n	800af1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e01b      	b.n	800af52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	daf2      	bge.n	800af08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	f043 0201 	orr.w	r2, r3, #1
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3301      	adds	r3, #1
 800af36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af3e:	d901      	bls.n	800af44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e006      	b.n	800af52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d0f0      	beq.n	800af32 <USB_CoreReset+0x36>

  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr
	...

0800af60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af60:	b084      	sub	sp, #16
 800af62:	b580      	push	{r7, lr}
 800af64:	b086      	sub	sp, #24
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800af6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800af72:	2300      	movs	r3, #0
 800af74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af80:	461a      	mov	r2, r3
 800af82:	2300      	movs	r3, #0
 800af84:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af8a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d119      	bne.n	800afd2 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800af9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d10a      	bne.n	800afbc <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68fa      	ldr	r2, [r7, #12]
 800afb0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800afb4:	f043 0304 	orr.w	r3, r3, #4
 800afb8:	6013      	str	r3, [r2, #0]
 800afba:	e014      	b.n	800afe6 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800afca:	f023 0304 	bic.w	r3, r3, #4
 800afce:	6013      	str	r3, [r2, #0]
 800afd0:	e009      	b.n	800afe6 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800afe0:	f023 0304 	bic.w	r3, r3, #4
 800afe4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800afe6:	2110      	movs	r1, #16
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7ff fe4f 	bl	800ac8c <USB_FlushTxFifo>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff fe79 	bl	800acf0 <USB_FlushRxFifo>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d001      	beq.n	800b008 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b008:	2300      	movs	r3, #0
 800b00a:	613b      	str	r3, [r7, #16]
 800b00c:	e015      	b.n	800b03a <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	015a      	lsls	r2, r3, #5
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	4413      	add	r3, r2
 800b016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b01a:	461a      	mov	r2, r3
 800b01c:	f04f 33ff 	mov.w	r3, #4294967295
 800b020:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	015a      	lsls	r2, r3, #5
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	4413      	add	r3, r2
 800b02a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b02e:	461a      	mov	r2, r3
 800b030:	2300      	movs	r3, #0
 800b032:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	3301      	adds	r3, #1
 800b038:	613b      	str	r3, [r7, #16]
 800b03a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b03e:	461a      	mov	r2, r3
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	4293      	cmp	r3, r2
 800b044:	d3e3      	bcc.n	800b00e <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f04f 32ff 	mov.w	r2, #4294967295
 800b052:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a18      	ldr	r2, [pc, #96]	@ (800b0b8 <USB_HostInit+0x158>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d10b      	bne.n	800b074 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b062:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a15      	ldr	r2, [pc, #84]	@ (800b0bc <USB_HostInit+0x15c>)
 800b068:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a14      	ldr	r2, [pc, #80]	@ (800b0c0 <USB_HostInit+0x160>)
 800b06e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800b072:	e009      	b.n	800b088 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2280      	movs	r2, #128	@ 0x80
 800b078:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a11      	ldr	r2, [pc, #68]	@ (800b0c4 <USB_HostInit+0x164>)
 800b07e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a11      	ldr	r2, [pc, #68]	@ (800b0c8 <USB_HostInit+0x168>)
 800b084:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b088:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d105      	bne.n	800b09c <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	f043 0210 	orr.w	r2, r3, #16
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	699a      	ldr	r2, [r3, #24]
 800b0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b0cc <USB_HostInit+0x16c>)
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0b4:	b004      	add	sp, #16
 800b0b6:	4770      	bx	lr
 800b0b8:	40040000 	.word	0x40040000
 800b0bc:	01000200 	.word	0x01000200
 800b0c0:	00e00300 	.word	0x00e00300
 800b0c4:	00600080 	.word	0x00600080
 800b0c8:	004000e0 	.word	0x004000e0
 800b0cc:	a3200008 	.word	0xa3200008

0800b0d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b0ee:	f023 0303 	bic.w	r3, r3, #3
 800b0f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	78fb      	ldrb	r3, [r7, #3]
 800b0fe:	f003 0303 	and.w	r3, r3, #3
 800b102:	68f9      	ldr	r1, [r7, #12]
 800b104:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b108:	4313      	orrs	r3, r2
 800b10a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b10c:	78fb      	ldrb	r3, [r7, #3]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d107      	bne.n	800b122 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b118:	461a      	mov	r2, r3
 800b11a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b11e:	6053      	str	r3, [r2, #4]
 800b120:	e00c      	b.n	800b13c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b122:	78fb      	ldrb	r3, [r7, #3]
 800b124:	2b02      	cmp	r3, #2
 800b126:	d107      	bne.n	800b138 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b12e:	461a      	mov	r2, r3
 800b130:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b134:	6053      	str	r3, [r2, #4]
 800b136:	e001      	b.n	800b13c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e000      	b.n	800b13e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b156:	2300      	movs	r3, #0
 800b158:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b16a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b178:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b17a:	2064      	movs	r0, #100	@ 0x64
 800b17c:	f7f6 fff6 	bl	800216c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b18c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b18e:	200a      	movs	r0, #10
 800b190:	f7f6 ffec 	bl	800216c <HAL_Delay>

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b1c2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d109      	bne.n	800b1e2 <USB_DriveVbus+0x44>
 800b1ce:	78fb      	ldrb	r3, [r7, #3]
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d106      	bne.n	800b1e2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b1dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b1e0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1ec:	d109      	bne.n	800b202 <USB_DriveVbus+0x64>
 800b1ee:	78fb      	ldrb	r3, [r7, #3]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d106      	bne.n	800b202 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b1fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b200:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3714      	adds	r7, #20
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b21c:	2300      	movs	r3, #0
 800b21e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	0c5b      	lsrs	r3, r3, #17
 800b22e:	f003 0303 	and.w	r3, r3, #3
}
 800b232:	4618      	mov	r0, r3
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b23e:	b480      	push	{r7}
 800b240:	b085      	sub	sp, #20
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	b29b      	uxth	r3, r3
}
 800b254:	4618      	mov	r0, r3
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b088      	sub	sp, #32
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	4608      	mov	r0, r1
 800b26a:	4611      	mov	r1, r2
 800b26c:	461a      	mov	r2, r3
 800b26e:	4603      	mov	r3, r0
 800b270:	70fb      	strb	r3, [r7, #3]
 800b272:	460b      	mov	r3, r1
 800b274:	70bb      	strb	r3, [r7, #2]
 800b276:	4613      	mov	r3, r2
 800b278:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b282:	78fb      	ldrb	r3, [r7, #3]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b28e:	461a      	mov	r2, r3
 800b290:	f04f 33ff 	mov.w	r3, #4294967295
 800b294:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b296:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d87c      	bhi.n	800b398 <USB_HC_Init+0x138>
 800b29e:	a201      	add	r2, pc, #4	@ (adr r2, 800b2a4 <USB_HC_Init+0x44>)
 800b2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a4:	0800b2b5 	.word	0x0800b2b5
 800b2a8:	0800b35b 	.word	0x0800b35b
 800b2ac:	0800b2b5 	.word	0x0800b2b5
 800b2b0:	0800b31d 	.word	0x0800b31d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	015a      	lsls	r2, r3, #5
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b2c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b2c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	da10      	bge.n	800b2f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b2d0:	78fb      	ldrb	r3, [r7, #3]
 800b2d2:	015a      	lsls	r2, r3, #5
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	78fa      	ldrb	r2, [r7, #3]
 800b2e0:	0151      	lsls	r1, r2, #5
 800b2e2:	693a      	ldr	r2, [r7, #16]
 800b2e4:	440a      	add	r2, r1
 800b2e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2ee:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b2f0:	e055      	b.n	800b39e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a6f      	ldr	r2, [pc, #444]	@ (800b4b4 <USB_HC_Init+0x254>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d151      	bne.n	800b39e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b2fa:	78fb      	ldrb	r3, [r7, #3]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	4413      	add	r3, r2
 800b302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	78fa      	ldrb	r2, [r7, #3]
 800b30a:	0151      	lsls	r1, r2, #5
 800b30c:	693a      	ldr	r2, [r7, #16]
 800b30e:	440a      	add	r2, r1
 800b310:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b314:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b318:	60d3      	str	r3, [r2, #12]
      break;
 800b31a:	e040      	b.n	800b39e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b31c:	78fb      	ldrb	r3, [r7, #3]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	4413      	add	r3, r2
 800b324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b328:	461a      	mov	r2, r3
 800b32a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b32e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b330:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b334:	2b00      	cmp	r3, #0
 800b336:	da34      	bge.n	800b3a2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b338:	78fb      	ldrb	r3, [r7, #3]
 800b33a:	015a      	lsls	r2, r3, #5
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	4413      	add	r3, r2
 800b340:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	78fa      	ldrb	r2, [r7, #3]
 800b348:	0151      	lsls	r1, r2, #5
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	440a      	add	r2, r1
 800b34e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b356:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b358:	e023      	b.n	800b3a2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	015a      	lsls	r2, r3, #5
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	4413      	add	r3, r2
 800b362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b366:	461a      	mov	r2, r3
 800b368:	f240 2325 	movw	r3, #549	@ 0x225
 800b36c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b36e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b372:	2b00      	cmp	r3, #0
 800b374:	da17      	bge.n	800b3a6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b376:	78fb      	ldrb	r3, [r7, #3]
 800b378:	015a      	lsls	r2, r3, #5
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	4413      	add	r3, r2
 800b37e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	78fa      	ldrb	r2, [r7, #3]
 800b386:	0151      	lsls	r1, r2, #5
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	440a      	add	r2, r1
 800b38c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b390:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b394:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b396:	e006      	b.n	800b3a6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	77fb      	strb	r3, [r7, #31]
      break;
 800b39c:	e004      	b.n	800b3a8 <USB_HC_Init+0x148>
      break;
 800b39e:	bf00      	nop
 800b3a0:	e002      	b.n	800b3a8 <USB_HC_Init+0x148>
      break;
 800b3a2:	bf00      	nop
 800b3a4:	e000      	b.n	800b3a8 <USB_HC_Init+0x148>
      break;
 800b3a6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b3a8:	78fb      	ldrb	r3, [r7, #3]
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3b4:	461a      	mov	r2, r3
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	78fa      	ldrb	r2, [r7, #3]
 800b3ca:	0151      	lsls	r1, r2, #5
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	440a      	add	r2, r1
 800b3d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b3d4:	f043 0302 	orr.w	r3, r3, #2
 800b3d8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b3e0:	699a      	ldr	r2, [r3, #24]
 800b3e2:	78fb      	ldrb	r3, [r7, #3]
 800b3e4:	f003 030f 	and.w	r3, r3, #15
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ee:	6939      	ldr	r1, [r7, #16]
 800b3f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b404:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	da03      	bge.n	800b414 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b40c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b410:	61bb      	str	r3, [r7, #24]
 800b412:	e001      	b.n	800b418 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b414:	2300      	movs	r3, #0
 800b416:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7ff fef9 	bl	800b210 <USB_GetHostSpeed>
 800b41e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b420:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b424:	2b02      	cmp	r3, #2
 800b426:	d106      	bne.n	800b436 <USB_HC_Init+0x1d6>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d003      	beq.n	800b436 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b42e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b432:	617b      	str	r3, [r7, #20]
 800b434:	e001      	b.n	800b43a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b436:	2300      	movs	r3, #0
 800b438:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b43a:	787b      	ldrb	r3, [r7, #1]
 800b43c:	059b      	lsls	r3, r3, #22
 800b43e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b442:	78bb      	ldrb	r3, [r7, #2]
 800b444:	02db      	lsls	r3, r3, #11
 800b446:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b44a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b44c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b450:	049b      	lsls	r3, r3, #18
 800b452:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b456:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b458:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b45a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b45e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b460:	69bb      	ldr	r3, [r7, #24]
 800b462:	431a      	orrs	r2, r3
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b468:	78fa      	ldrb	r2, [r7, #3]
 800b46a:	0151      	lsls	r1, r2, #5
 800b46c:	693a      	ldr	r2, [r7, #16]
 800b46e:	440a      	add	r2, r1
 800b470:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b474:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b478:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b47a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b47e:	2b03      	cmp	r3, #3
 800b480:	d003      	beq.n	800b48a <USB_HC_Init+0x22a>
 800b482:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b486:	2b01      	cmp	r3, #1
 800b488:	d10f      	bne.n	800b4aa <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b48a:	78fb      	ldrb	r3, [r7, #3]
 800b48c:	015a      	lsls	r2, r3, #5
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	4413      	add	r3, r2
 800b492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	78fa      	ldrb	r2, [r7, #3]
 800b49a:	0151      	lsls	r1, r2, #5
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	440a      	add	r2, r1
 800b4a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b4a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b4a8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b4aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3720      	adds	r7, #32
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	40040000 	.word	0x40040000

0800b4b8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08c      	sub	sp, #48	@ 0x30
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	785b      	ldrb	r3, [r3, #1]
 800b4ce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b4d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4d4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4a5d      	ldr	r2, [pc, #372]	@ (800b650 <USB_HC_StartXfer+0x198>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d12f      	bne.n	800b53e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b4de:	79fb      	ldrb	r3, [r7, #7]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d11c      	bne.n	800b51e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	7c9b      	ldrb	r3, [r3, #18]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d003      	beq.n	800b4f4 <USB_HC_StartXfer+0x3c>
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	7c9b      	ldrb	r3, [r3, #18]
 800b4f0:	2b02      	cmp	r3, #2
 800b4f2:	d124      	bne.n	800b53e <USB_HC_StartXfer+0x86>
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	799b      	ldrb	r3, [r3, #6]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d120      	bne.n	800b53e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	015a      	lsls	r2, r3, #5
 800b500:	6a3b      	ldr	r3, [r7, #32]
 800b502:	4413      	add	r3, r2
 800b504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	69fa      	ldr	r2, [r7, #28]
 800b50c:	0151      	lsls	r1, r2, #5
 800b50e:	6a3a      	ldr	r2, [r7, #32]
 800b510:	440a      	add	r2, r1
 800b512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b51a:	60d3      	str	r3, [r2, #12]
 800b51c:	e00f      	b.n	800b53e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	791b      	ldrb	r3, [r3, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10b      	bne.n	800b53e <USB_HC_StartXfer+0x86>
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	795b      	ldrb	r3, [r3, #5]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d107      	bne.n	800b53e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	785b      	ldrb	r3, [r3, #1]
 800b532:	4619      	mov	r1, r3
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 fb6b 	bl	800bc10 <USB_DoPing>
        return HAL_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e232      	b.n	800b9a4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	799b      	ldrb	r3, [r3, #6]
 800b542:	2b01      	cmp	r3, #1
 800b544:	d158      	bne.n	800b5f8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b546:	2301      	movs	r3, #1
 800b548:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	78db      	ldrb	r3, [r3, #3]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d007      	beq.n	800b562 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b552:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	8a92      	ldrh	r2, [r2, #20]
 800b558:	fb03 f202 	mul.w	r2, r3, r2
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	61da      	str	r2, [r3, #28]
 800b560:	e07c      	b.n	800b65c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	7c9b      	ldrb	r3, [r3, #18]
 800b566:	2b01      	cmp	r3, #1
 800b568:	d130      	bne.n	800b5cc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	2bbc      	cmp	r3, #188	@ 0xbc
 800b570:	d918      	bls.n	800b5a4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	8a9b      	ldrh	r3, [r3, #20]
 800b576:	461a      	mov	r2, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	69da      	ldr	r2, [r3, #28]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d003      	beq.n	800b594 <USB_HC_StartXfer+0xdc>
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d103      	bne.n	800b59c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2202      	movs	r2, #2
 800b598:	60da      	str	r2, [r3, #12]
 800b59a:	e05f      	b.n	800b65c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	60da      	str	r2, [r3, #12]
 800b5a2:	e05b      	b.n	800b65c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	6a1a      	ldr	r2, [r3, #32]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d007      	beq.n	800b5c4 <USB_HC_StartXfer+0x10c>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d003      	beq.n	800b5c4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2204      	movs	r2, #4
 800b5c0:	60da      	str	r2, [r3, #12]
 800b5c2:	e04b      	b.n	800b65c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	2203      	movs	r2, #3
 800b5c8:	60da      	str	r2, [r3, #12]
 800b5ca:	e047      	b.n	800b65c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b5cc:	79fb      	ldrb	r3, [r7, #7]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d10d      	bne.n	800b5ee <USB_HC_StartXfer+0x136>
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	68ba      	ldr	r2, [r7, #8]
 800b5d8:	8a92      	ldrh	r2, [r2, #20]
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d907      	bls.n	800b5ee <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b5de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	8a92      	ldrh	r2, [r2, #20]
 800b5e4:	fb03 f202 	mul.w	r2, r3, r2
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	61da      	str	r2, [r3, #28]
 800b5ec:	e036      	b.n	800b65c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	6a1a      	ldr	r2, [r3, #32]
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	61da      	str	r2, [r3, #28]
 800b5f6:	e031      	b.n	800b65c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d018      	beq.n	800b632 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	8a92      	ldrh	r2, [r2, #20]
 800b608:	4413      	add	r3, r2
 800b60a:	3b01      	subs	r3, #1
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	8a92      	ldrh	r2, [r2, #20]
 800b610:	fbb3 f3f2 	udiv	r3, r3, r2
 800b614:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b616:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b618:	8b7b      	ldrh	r3, [r7, #26]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d90b      	bls.n	800b636 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b61e:	8b7b      	ldrh	r3, [r7, #26]
 800b620:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b622:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	8a92      	ldrh	r2, [r2, #20]
 800b628:	fb03 f202 	mul.w	r2, r3, r2
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	61da      	str	r2, [r3, #28]
 800b630:	e001      	b.n	800b636 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b632:	2301      	movs	r3, #1
 800b634:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	78db      	ldrb	r3, [r3, #3]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00a      	beq.n	800b654 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b63e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	8a92      	ldrh	r2, [r2, #20]
 800b644:	fb03 f202 	mul.w	r2, r3, r2
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	61da      	str	r2, [r3, #28]
 800b64c:	e006      	b.n	800b65c <USB_HC_StartXfer+0x1a4>
 800b64e:	bf00      	nop
 800b650:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	6a1a      	ldr	r2, [r3, #32]
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b664:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b666:	04d9      	lsls	r1, r3, #19
 800b668:	4ba3      	ldr	r3, [pc, #652]	@ (800b8f8 <USB_HC_StartXfer+0x440>)
 800b66a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b66c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	7d9b      	ldrb	r3, [r3, #22]
 800b672:	075b      	lsls	r3, r3, #29
 800b674:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b678:	69f9      	ldr	r1, [r7, #28]
 800b67a:	0148      	lsls	r0, r1, #5
 800b67c:	6a39      	ldr	r1, [r7, #32]
 800b67e:	4401      	add	r1, r0
 800b680:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b684:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b686:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d009      	beq.n	800b6a2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	6999      	ldr	r1, [r3, #24]
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b69e:	460a      	mov	r2, r1
 800b6a0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	f003 0301 	and.w	r3, r3, #1
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	bf0c      	ite	eq
 800b6b2:	2301      	moveq	r3, #1
 800b6b4:	2300      	movne	r3, #0
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	015a      	lsls	r2, r3, #5
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	69fa      	ldr	r2, [r7, #28]
 800b6ca:	0151      	lsls	r1, r2, #5
 800b6cc:	6a3a      	ldr	r2, [r7, #32]
 800b6ce:	440a      	add	r2, r1
 800b6d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b6d8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	015a      	lsls	r2, r3, #5
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	7e7b      	ldrb	r3, [r7, #25]
 800b6ea:	075b      	lsls	r3, r3, #29
 800b6ec:	69f9      	ldr	r1, [r7, #28]
 800b6ee:	0148      	lsls	r0, r1, #5
 800b6f0:	6a39      	ldr	r1, [r7, #32]
 800b6f2:	4401      	add	r1, r0
 800b6f4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	799b      	ldrb	r3, [r3, #6]
 800b700:	2b01      	cmp	r3, #1
 800b702:	f040 80c3 	bne.w	800b88c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	7c5b      	ldrb	r3, [r3, #17]
 800b70a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b710:	4313      	orrs	r3, r2
 800b712:	69fa      	ldr	r2, [r7, #28]
 800b714:	0151      	lsls	r1, r2, #5
 800b716:	6a3a      	ldr	r2, [r7, #32]
 800b718:	440a      	add	r2, r1
 800b71a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b71e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b722:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	015a      	lsls	r2, r3, #5
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	4413      	add	r3, r2
 800b72c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	69fa      	ldr	r2, [r7, #28]
 800b734:	0151      	lsls	r1, r2, #5
 800b736:	6a3a      	ldr	r2, [r7, #32]
 800b738:	440a      	add	r2, r1
 800b73a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b73e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b742:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	79db      	ldrb	r3, [r3, #7]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d123      	bne.n	800b794 <USB_HC_StartXfer+0x2dc>
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	78db      	ldrb	r3, [r3, #3]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d11f      	bne.n	800b794 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	4413      	add	r3, r2
 800b75c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	69fa      	ldr	r2, [r7, #28]
 800b764:	0151      	lsls	r1, r2, #5
 800b766:	6a3a      	ldr	r2, [r7, #32]
 800b768:	440a      	add	r2, r1
 800b76a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b76e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b772:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	015a      	lsls	r2, r3, #5
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	4413      	add	r3, r2
 800b77c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	69fa      	ldr	r2, [r7, #28]
 800b784:	0151      	lsls	r1, r2, #5
 800b786:	6a3a      	ldr	r2, [r7, #32]
 800b788:	440a      	add	r2, r1
 800b78a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b792:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	7c9b      	ldrb	r3, [r3, #18]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d003      	beq.n	800b7a4 <USB_HC_StartXfer+0x2ec>
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	7c9b      	ldrb	r3, [r3, #18]
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d117      	bne.n	800b7d4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d113      	bne.n	800b7d4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	78db      	ldrb	r3, [r3, #3]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d10f      	bne.n	800b7d4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	69fa      	ldr	r2, [r7, #28]
 800b7c4:	0151      	lsls	r1, r2, #5
 800b7c6:	6a3a      	ldr	r2, [r7, #32]
 800b7c8:	440a      	add	r2, r1
 800b7ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7d2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	7c9b      	ldrb	r3, [r3, #18]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d162      	bne.n	800b8a2 <USB_HC_StartXfer+0x3ea>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	78db      	ldrb	r3, [r3, #3]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d15e      	bne.n	800b8a2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d858      	bhi.n	800b8a0 <USB_HC_StartXfer+0x3e8>
 800b7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b7f4 <USB_HC_StartXfer+0x33c>)
 800b7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f4:	0800b805 	.word	0x0800b805
 800b7f8:	0800b827 	.word	0x0800b827
 800b7fc:	0800b849 	.word	0x0800b849
 800b800:	0800b86b 	.word	0x0800b86b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	015a      	lsls	r2, r3, #5
 800b808:	6a3b      	ldr	r3, [r7, #32]
 800b80a:	4413      	add	r3, r2
 800b80c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	69fa      	ldr	r2, [r7, #28]
 800b814:	0151      	lsls	r1, r2, #5
 800b816:	6a3a      	ldr	r2, [r7, #32]
 800b818:	440a      	add	r2, r1
 800b81a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b81e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b822:	6053      	str	r3, [r2, #4]
          break;
 800b824:	e03d      	b.n	800b8a2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	015a      	lsls	r2, r3, #5
 800b82a:	6a3b      	ldr	r3, [r7, #32]
 800b82c:	4413      	add	r3, r2
 800b82e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	69fa      	ldr	r2, [r7, #28]
 800b836:	0151      	lsls	r1, r2, #5
 800b838:	6a3a      	ldr	r2, [r7, #32]
 800b83a:	440a      	add	r2, r1
 800b83c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b840:	f043 030e 	orr.w	r3, r3, #14
 800b844:	6053      	str	r3, [r2, #4]
          break;
 800b846:	e02c      	b.n	800b8a2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	015a      	lsls	r2, r3, #5
 800b84c:	6a3b      	ldr	r3, [r7, #32]
 800b84e:	4413      	add	r3, r2
 800b850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b854:	685b      	ldr	r3, [r3, #4]
 800b856:	69fa      	ldr	r2, [r7, #28]
 800b858:	0151      	lsls	r1, r2, #5
 800b85a:	6a3a      	ldr	r2, [r7, #32]
 800b85c:	440a      	add	r2, r1
 800b85e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b866:	6053      	str	r3, [r2, #4]
          break;
 800b868:	e01b      	b.n	800b8a2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	4413      	add	r3, r2
 800b872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	69fa      	ldr	r2, [r7, #28]
 800b87a:	0151      	lsls	r1, r2, #5
 800b87c:	6a3a      	ldr	r2, [r7, #32]
 800b87e:	440a      	add	r2, r1
 800b880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b884:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b888:	6053      	str	r3, [r2, #4]
          break;
 800b88a:	e00a      	b.n	800b8a2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	015a      	lsls	r2, r3, #5
 800b890:	6a3b      	ldr	r3, [r7, #32]
 800b892:	4413      	add	r3, r2
 800b894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b898:	461a      	mov	r2, r3
 800b89a:	2300      	movs	r3, #0
 800b89c:	6053      	str	r3, [r2, #4]
 800b89e:	e000      	b.n	800b8a2 <USB_HC_StartXfer+0x3ea>
          break;
 800b8a0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	015a      	lsls	r2, r3, #5
 800b8a6:	6a3b      	ldr	r3, [r7, #32]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b8b8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	78db      	ldrb	r3, [r3, #3]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d004      	beq.n	800b8cc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8c8:	613b      	str	r3, [r7, #16]
 800b8ca:	e003      	b.n	800b8d4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b8d2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b8da:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	015a      	lsls	r2, r3, #5
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b8ee:	79fb      	ldrb	r3, [r7, #7]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d003      	beq.n	800b8fc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	e055      	b.n	800b9a4 <USB_HC_StartXfer+0x4ec>
 800b8f8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	78db      	ldrb	r3, [r3, #3]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d14e      	bne.n	800b9a2 <USB_HC_StartXfer+0x4ea>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	6a1b      	ldr	r3, [r3, #32]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d04a      	beq.n	800b9a2 <USB_HC_StartXfer+0x4ea>
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	79db      	ldrb	r3, [r3, #7]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d146      	bne.n	800b9a2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	7c9b      	ldrb	r3, [r3, #18]
 800b918:	2b03      	cmp	r3, #3
 800b91a:	d831      	bhi.n	800b980 <USB_HC_StartXfer+0x4c8>
 800b91c:	a201      	add	r2, pc, #4	@ (adr r2, 800b924 <USB_HC_StartXfer+0x46c>)
 800b91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b922:	bf00      	nop
 800b924:	0800b935 	.word	0x0800b935
 800b928:	0800b959 	.word	0x0800b959
 800b92c:	0800b935 	.word	0x0800b935
 800b930:	0800b959 	.word	0x0800b959
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	6a1b      	ldr	r3, [r3, #32]
 800b938:	3303      	adds	r3, #3
 800b93a:	089b      	lsrs	r3, r3, #2
 800b93c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b93e:	8afa      	ldrh	r2, [r7, #22]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b944:	b29b      	uxth	r3, r3
 800b946:	429a      	cmp	r2, r3
 800b948:	d91c      	bls.n	800b984 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	f043 0220 	orr.w	r2, r3, #32
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	619a      	str	r2, [r3, #24]
        }
        break;
 800b956:	e015      	b.n	800b984 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	6a1b      	ldr	r3, [r3, #32]
 800b95c:	3303      	adds	r3, #3
 800b95e:	089b      	lsrs	r3, r3, #2
 800b960:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b962:	8afa      	ldrh	r2, [r7, #22]
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b96a:	691b      	ldr	r3, [r3, #16]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	429a      	cmp	r2, r3
 800b970:	d90a      	bls.n	800b988 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	699b      	ldr	r3, [r3, #24]
 800b976:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b97e:	e003      	b.n	800b988 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b980:	bf00      	nop
 800b982:	e002      	b.n	800b98a <USB_HC_StartXfer+0x4d2>
        break;
 800b984:	bf00      	nop
 800b986:	e000      	b.n	800b98a <USB_HC_StartXfer+0x4d2>
        break;
 800b988:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	6999      	ldr	r1, [r3, #24]
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	785a      	ldrb	r2, [r3, #1]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	6a1b      	ldr	r3, [r3, #32]
 800b996:	b29b      	uxth	r3, r3
 800b998:	2000      	movs	r0, #0
 800b99a:	9000      	str	r0, [sp, #0]
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f7ff f9d5 	bl	800ad4c <USB_WritePacket>
  }

  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3728      	adds	r7, #40	@ 0x28
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	b29b      	uxth	r3, r3
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b089      	sub	sp, #36	@ 0x24
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	015a      	lsls	r2, r3, #5
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	0c9b      	lsrs	r3, r3, #18
 800b9f6:	f003 0303 	and.w	r3, r3, #3
 800b9fa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	015a      	lsls	r2, r3, #5
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	4413      	add	r3, r2
 800ba04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	0fdb      	lsrs	r3, r3, #31
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	015a      	lsls	r2, r3, #5
 800ba16:	69fb      	ldr	r3, [r7, #28]
 800ba18:	4413      	add	r3, r2
 800ba1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	0fdb      	lsrs	r3, r3, #31
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	f003 0320 	and.w	r3, r3, #32
 800ba30:	2b20      	cmp	r3, #32
 800ba32:	d10d      	bne.n	800ba50 <USB_HC_Halt+0x82>
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d10a      	bne.n	800ba50 <USB_HC_Halt+0x82>
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d005      	beq.n	800ba4c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d002      	beq.n	800ba4c <USB_HC_Halt+0x7e>
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d101      	bne.n	800ba50 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	e0d8      	b.n	800bc02 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <USB_HC_Halt+0x8e>
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d173      	bne.n	800bb44 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	015a      	lsls	r2, r3, #5
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	4413      	add	r3, r2
 800ba64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	69ba      	ldr	r2, [r7, #24]
 800ba6c:	0151      	lsls	r1, r2, #5
 800ba6e:	69fa      	ldr	r2, [r7, #28]
 800ba70:	440a      	add	r2, r1
 800ba72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba7a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f003 0320 	and.w	r3, r3, #32
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d14a      	bne.n	800bb1e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d133      	bne.n	800bafc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	015a      	lsls	r2, r3, #5
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	69ba      	ldr	r2, [r7, #24]
 800baa4:	0151      	lsls	r1, r2, #5
 800baa6:	69fa      	ldr	r2, [r7, #28]
 800baa8:	440a      	add	r2, r1
 800baaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800baae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bab2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	015a      	lsls	r2, r3, #5
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	4413      	add	r3, r2
 800babc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	69ba      	ldr	r2, [r7, #24]
 800bac4:	0151      	lsls	r1, r2, #5
 800bac6:	69fa      	ldr	r2, [r7, #28]
 800bac8:	440a      	add	r2, r1
 800baca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bad2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	3301      	adds	r3, #1
 800bad8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bae0:	d82e      	bhi.n	800bb40 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bae2:	69bb      	ldr	r3, [r7, #24]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800baf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800baf8:	d0ec      	beq.n	800bad4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bafa:	e081      	b.n	800bc00 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bafc:	69bb      	ldr	r3, [r7, #24]
 800bafe:	015a      	lsls	r2, r3, #5
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	4413      	add	r3, r2
 800bb04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	69ba      	ldr	r2, [r7, #24]
 800bb0c:	0151      	lsls	r1, r2, #5
 800bb0e:	69fa      	ldr	r2, [r7, #28]
 800bb10:	440a      	add	r2, r1
 800bb12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bb1a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb1c:	e070      	b.n	800bc00 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	015a      	lsls	r2, r3, #5
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	4413      	add	r3, r2
 800bb26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	69ba      	ldr	r2, [r7, #24]
 800bb2e:	0151      	lsls	r1, r2, #5
 800bb30:	69fa      	ldr	r2, [r7, #28]
 800bb32:	440a      	add	r2, r1
 800bb34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bb3c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb3e:	e05f      	b.n	800bc00 <USB_HC_Halt+0x232>
            break;
 800bb40:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800bb42:	e05d      	b.n	800bc00 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	015a      	lsls	r2, r3, #5
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	0151      	lsls	r1, r2, #5
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	440a      	add	r2, r1
 800bb5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb62:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d133      	bne.n	800bbdc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	015a      	lsls	r2, r3, #5
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	69ba      	ldr	r2, [r7, #24]
 800bb84:	0151      	lsls	r1, r2, #5
 800bb86:	69fa      	ldr	r2, [r7, #28]
 800bb88:	440a      	add	r2, r1
 800bb8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	015a      	lsls	r2, r3, #5
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	69ba      	ldr	r2, [r7, #24]
 800bba4:	0151      	lsls	r1, r2, #5
 800bba6:	69fa      	ldr	r2, [r7, #28]
 800bba8:	440a      	add	r2, r1
 800bbaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bbb2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bbc0:	d81d      	bhi.n	800bbfe <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bbd8:	d0ec      	beq.n	800bbb4 <USB_HC_Halt+0x1e6>
 800bbda:	e011      	b.n	800bc00 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	015a      	lsls	r2, r3, #5
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	69ba      	ldr	r2, [r7, #24]
 800bbec:	0151      	lsls	r1, r2, #5
 800bbee:	69fa      	ldr	r2, [r7, #28]
 800bbf0:	440a      	add	r2, r1
 800bbf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bbf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bbfa:	6013      	str	r3, [r2, #0]
 800bbfc:	e000      	b.n	800bc00 <USB_HC_Halt+0x232>
          break;
 800bbfe:	bf00      	nop
    }
  }

  return HAL_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3724      	adds	r7, #36	@ 0x24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr
	...

0800bc10 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b087      	sub	sp, #28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bc20:	78fb      	ldrb	r3, [r7, #3]
 800bc22:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bc24:	2301      	movs	r3, #1
 800bc26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	04da      	lsls	r2, r3, #19
 800bc2c:	4b15      	ldr	r3, [pc, #84]	@ (800bc84 <USB_DoPing+0x74>)
 800bc2e:	4013      	ands	r3, r2
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	0151      	lsls	r1, r2, #5
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	440a      	add	r2, r1
 800bc38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bc3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc40:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	015a      	lsls	r2, r3, #5
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	4413      	add	r3, r2
 800bc4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bc58:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc60:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	015a      	lsls	r2, r3, #5
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	4413      	add	r3, r2
 800bc6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc6e:	461a      	mov	r2, r3
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bc74:	2300      	movs	r3, #0
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	371c      	adds	r7, #28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
 800bc82:	bf00      	nop
 800bc84:	1ff80000 	.word	0x1ff80000

0800bc88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b088      	sub	sp, #32
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc90:	2300      	movs	r3, #0
 800bc92:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f7fe ff98 	bl	800abd2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bca2:	2110      	movs	r1, #16
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f7fe fff1 	bl	800ac8c <USB_FlushTxFifo>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d001      	beq.n	800bcb4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7ff f81b 	bl	800acf0 <USB_FlushRxFifo>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	61bb      	str	r3, [r7, #24]
 800bcc8:	e01f      	b.n	800bd0a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	015a      	lsls	r2, r3, #5
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bce0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bce8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bcf0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	015a      	lsls	r2, r3, #5
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bcfe:	461a      	mov	r2, r3
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	3301      	adds	r3, #1
 800bd08:	61bb      	str	r3, [r7, #24]
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	2b0f      	cmp	r3, #15
 800bd0e:	d9dc      	bls.n	800bcca <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bd10:	2300      	movs	r3, #0
 800bd12:	61bb      	str	r3, [r7, #24]
 800bd14:	e034      	b.n	800bd80 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd2c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bd34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bd3c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3301      	adds	r3, #1
 800bd54:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bd5c:	d80c      	bhi.n	800bd78 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd74:	d0ec      	beq.n	800bd50 <USB_StopHost+0xc8>
 800bd76:	e000      	b.n	800bd7a <USB_StopHost+0xf2>
        break;
 800bd78:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	61bb      	str	r3, [r7, #24]
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	2b0f      	cmp	r3, #15
 800bd84:	d9c7      	bls.n	800bd16 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd92:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7fe ff07 	bl	800abb0 <USB_EnableGlobalInt>

  return ret;
 800bda2:	7ffb      	ldrb	r3, [r7, #31]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bdb0:	4904      	ldr	r1, [pc, #16]	@ (800bdc4 <MX_FATFS_Init+0x18>)
 800bdb2:	4805      	ldr	r0, [pc, #20]	@ (800bdc8 <MX_FATFS_Init+0x1c>)
 800bdb4:	f002 fa64 	bl	800e280 <FATFS_LinkDriver>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	461a      	mov	r2, r3
 800bdbc:	4b03      	ldr	r3, [pc, #12]	@ (800bdcc <MX_FATFS_Init+0x20>)
 800bdbe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bdc0:	bf00      	nop
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	20000570 	.word	0x20000570
 800bdc8:	0800fce4 	.word	0x0800fce4
 800bdcc:	2000056c 	.word	0x2000056c

0800bdd0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bdda:	f000 f879 	bl	800bed0 <BSP_SD_IsDetected>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d001      	beq.n	800bde8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e012      	b.n	800be0e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bde8:	480b      	ldr	r0, [pc, #44]	@ (800be18 <BSP_SD_Init+0x48>)
 800bdea:	f7fb fce3 	bl	80077b4 <HAL_SD_Init>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d109      	bne.n	800be0c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800bdf8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800bdfc:	4806      	ldr	r0, [pc, #24]	@ (800be18 <BSP_SD_Init+0x48>)
 800bdfe:	f7fc fabd 	bl	800837c <HAL_SD_ConfigWideBusOperation>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800be08:	2301      	movs	r3, #1
 800be0a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800be0c:	79fb      	ldrb	r3, [r7, #7]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	2000032c 	.word	0x2000032c

0800be1c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b088      	sub	sp, #32
 800be20:	af02      	add	r7, sp, #8
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68ba      	ldr	r2, [r7, #8]
 800be36:	68f9      	ldr	r1, [r7, #12]
 800be38:	4806      	ldr	r0, [pc, #24]	@ (800be54 <BSP_SD_ReadBlocks+0x38>)
 800be3a:	f7fb fd6b 	bl	8007914 <HAL_SD_ReadBlocks>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d001      	beq.n	800be48 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	2000032c 	.word	0x2000032c

0800be58 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af02      	add	r7, sp, #8
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	68f9      	ldr	r1, [r7, #12]
 800be74:	4806      	ldr	r0, [pc, #24]	@ (800be90 <BSP_SD_WriteBlocks+0x38>)
 800be76:	f7fb ff2b 	bl	8007cd0 <HAL_SD_WriteBlocks>
 800be7a:	4603      	mov	r3, r0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800be84:	7dfb      	ldrb	r3, [r7, #23]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	2000032c 	.word	0x2000032c

0800be94 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800be98:	4805      	ldr	r0, [pc, #20]	@ (800beb0 <BSP_SD_GetCardState+0x1c>)
 800be9a:	f7fc fb09 	bl	80084b0 <HAL_SD_GetCardState>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b04      	cmp	r3, #4
 800bea2:	bf14      	ite	ne
 800bea4:	2301      	movne	r3, #1
 800bea6:	2300      	moveq	r3, #0
 800bea8:	b2db      	uxtb	r3, r3
}
 800beaa:	4618      	mov	r0, r3
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	2000032c 	.word	0x2000032c

0800beb4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bebc:	6879      	ldr	r1, [r7, #4]
 800bebe:	4803      	ldr	r0, [pc, #12]	@ (800becc <BSP_SD_GetCardInfo+0x18>)
 800bec0:	f7fc fa30 	bl	8008324 <HAL_SD_GetCardInfo>
}
 800bec4:	bf00      	nop
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}
 800becc:	2000032c 	.word	0x2000032c

0800bed0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bed6:	2301      	movs	r3, #1
 800bed8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800beda:	f000 f80b 	bl	800bef4 <BSP_PlatformIsDetected>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bee4:	2300      	movs	r3, #0
 800bee6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bee8:	79fb      	ldrb	r3, [r7, #7]
 800beea:	b2db      	uxtb	r3, r3
}
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800befa:	2301      	movs	r3, #1
 800befc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800befe:	2104      	movs	r1, #4
 800bf00:	4806      	ldr	r0, [pc, #24]	@ (800bf1c <BSP_PlatformIsDetected+0x28>)
 800bf02:	f7f7 fbf5 	bl	80036f0 <HAL_GPIO_ReadPin>
 800bf06:	4603      	mov	r3, r0
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d001      	beq.n	800bf10 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bf10:	79fb      	ldrb	r3, [r7, #7]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	40021800 	.word	0x40021800

0800bf20 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf58 <SD_CheckStatus+0x38>)
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bf30:	f7ff ffb0 	bl	800be94 <BSP_SD_GetCardState>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d107      	bne.n	800bf4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bf3a:	4b07      	ldr	r3, [pc, #28]	@ (800bf58 <SD_CheckStatus+0x38>)
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	f023 0301 	bic.w	r3, r3, #1
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	4b04      	ldr	r3, [pc, #16]	@ (800bf58 <SD_CheckStatus+0x38>)
 800bf48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bf4a:	4b03      	ldr	r3, [pc, #12]	@ (800bf58 <SD_CheckStatus+0x38>)
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	b2db      	uxtb	r3, r3
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	20000009 	.word	0x20000009

0800bf5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bf66:	4b0b      	ldr	r3, [pc, #44]	@ (800bf94 <SD_initialize+0x38>)
 800bf68:	2201      	movs	r2, #1
 800bf6a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bf6c:	f7ff ff30 	bl	800bdd0 <BSP_SD_Init>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d107      	bne.n	800bf86 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bf76:	79fb      	ldrb	r3, [r7, #7]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7ff ffd1 	bl	800bf20 <SD_CheckStatus>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	461a      	mov	r2, r3
 800bf82:	4b04      	ldr	r3, [pc, #16]	@ (800bf94 <SD_initialize+0x38>)
 800bf84:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bf86:	4b03      	ldr	r3, [pc, #12]	@ (800bf94 <SD_initialize+0x38>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	b2db      	uxtb	r3, r3
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	20000009 	.word	0x20000009

0800bf98 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7ff ffbb 	bl	800bf20 <SD_CheckStatus>
 800bfaa:	4603      	mov	r3, r0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60b9      	str	r1, [r7, #8]
 800bfbc:	607a      	str	r2, [r7, #4]
 800bfbe:	603b      	str	r3, [r7, #0]
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	6879      	ldr	r1, [r7, #4]
 800bfd0:	68b8      	ldr	r0, [r7, #8]
 800bfd2:	f7ff ff23 	bl	800be1c <BSP_SD_ReadBlocks>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d107      	bne.n	800bfec <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bfdc:	bf00      	nop
 800bfde:	f7ff ff59 	bl	800be94 <BSP_SD_GetCardState>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1fa      	bne.n	800bfde <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bfec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b086      	sub	sp, #24
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	603b      	str	r3, [r7, #0]
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c00a:	f04f 33ff 	mov.w	r3, #4294967295
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	68b8      	ldr	r0, [r7, #8]
 800c014:	f7ff ff20 	bl	800be58 <BSP_SD_WriteBlocks>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d107      	bne.n	800c02e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c01e:	bf00      	nop
 800c020:	f7ff ff38 	bl	800be94 <BSP_SD_GetCardState>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1fa      	bne.n	800c020 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b08c      	sub	sp, #48	@ 0x30
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	4603      	mov	r3, r0
 800c040:	603a      	str	r2, [r7, #0]
 800c042:	71fb      	strb	r3, [r7, #7]
 800c044:	460b      	mov	r3, r1
 800c046:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c04e:	4b25      	ldr	r3, [pc, #148]	@ (800c0e4 <SD_ioctl+0xac>)
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	b2db      	uxtb	r3, r3
 800c054:	f003 0301 	and.w	r3, r3, #1
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d001      	beq.n	800c060 <SD_ioctl+0x28>
 800c05c:	2303      	movs	r3, #3
 800c05e:	e03c      	b.n	800c0da <SD_ioctl+0xa2>

  switch (cmd)
 800c060:	79bb      	ldrb	r3, [r7, #6]
 800c062:	2b03      	cmp	r3, #3
 800c064:	d834      	bhi.n	800c0d0 <SD_ioctl+0x98>
 800c066:	a201      	add	r2, pc, #4	@ (adr r2, 800c06c <SD_ioctl+0x34>)
 800c068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06c:	0800c07d 	.word	0x0800c07d
 800c070:	0800c085 	.word	0x0800c085
 800c074:	0800c09d 	.word	0x0800c09d
 800c078:	0800c0b7 	.word	0x0800c0b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c082:	e028      	b.n	800c0d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c084:	f107 030c 	add.w	r3, r7, #12
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff ff13 	bl	800beb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c08e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c09a:	e01c      	b.n	800c0d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c09c:	f107 030c 	add.w	r3, r7, #12
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff ff07 	bl	800beb4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c0b4:	e00f      	b.n	800c0d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0b6:	f107 030c 	add.w	r3, r7, #12
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7ff fefa 	bl	800beb4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c2:	0a5a      	lsrs	r2, r3, #9
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800c0ce:	e002      	b.n	800c0d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c0d0:	2304      	movs	r3, #4
 800c0d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800c0d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3730      	adds	r7, #48	@ 0x30
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	20000009 	.word	0x20000009

0800c0e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c0e8:	b590      	push	{r4, r7, lr}
 800c0ea:	b089      	sub	sp, #36	@ 0x24
 800c0ec:	af04      	add	r7, sp, #16
 800c0ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	2102      	movs	r1, #2
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fc85 	bl	800ca06 <USBH_FindInterface>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c100:	7bfb      	ldrb	r3, [r7, #15]
 800c102:	2bff      	cmp	r3, #255	@ 0xff
 800c104:	d002      	beq.n	800c10c <USBH_CDC_InterfaceInit+0x24>
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d901      	bls.n	800c110 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c10c:	2302      	movs	r3, #2
 800c10e:	e13d      	b.n	800c38c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c110:	7bfb      	ldrb	r3, [r7, #15]
 800c112:	4619      	mov	r1, r3
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fc5a 	bl	800c9ce <USBH_SelectInterface>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c11e:	7bbb      	ldrb	r3, [r7, #14]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c124:	2302      	movs	r3, #2
 800c126:	e131      	b.n	800c38c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800c12e:	2050      	movs	r0, #80	@ 0x50
 800c130:	f002 fbc0 	bl	800e8b4 <malloc>
 800c134:	4603      	mov	r3, r0
 800c136:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c13e:	69db      	ldr	r3, [r3, #28]
 800c140:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d101      	bne.n	800c14c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c148:	2302      	movs	r3, #2
 800c14a:	e11f      	b.n	800c38c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c14c:	2250      	movs	r2, #80	@ 0x50
 800c14e:	2100      	movs	r1, #0
 800c150:	68b8      	ldr	r0, [r7, #8]
 800c152:	f002 fdb8 	bl	800ecc6 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	211a      	movs	r1, #26
 800c15c:	fb01 f303 	mul.w	r3, r1, r3
 800c160:	4413      	add	r3, r2
 800c162:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	b25b      	sxtb	r3, r3
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	da15      	bge.n	800c19a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c16e:	7bfb      	ldrb	r3, [r7, #15]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	211a      	movs	r1, #26
 800c174:	fb01 f303 	mul.w	r3, r1, r3
 800c178:	4413      	add	r3, r2
 800c17a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c17e:	781a      	ldrb	r2, [r3, #0]
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c184:	7bfb      	ldrb	r3, [r7, #15]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	211a      	movs	r1, #26
 800c18a:	fb01 f303 	mul.w	r3, r1, r3
 800c18e:	4413      	add	r3, r2
 800c190:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c194:	881a      	ldrh	r2, [r3, #0]
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	785b      	ldrb	r3, [r3, #1]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f001 ffbe 	bl	800e122 <USBH_AllocPipe>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	7819      	ldrb	r1, [r3, #0]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	7858      	ldrb	r0, [r3, #1]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	8952      	ldrh	r2, [r2, #10]
 800c1c6:	9202      	str	r2, [sp, #8]
 800c1c8:	2203      	movs	r2, #3
 800c1ca:	9201      	str	r2, [sp, #4]
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	4623      	mov	r3, r4
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f001 ff76 	bl	800e0c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f002 fae1 	bl	800e7a8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	210a      	movs	r1, #10
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fc0a 	bl	800ca06 <USBH_FindInterface>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c1f6:	7bfb      	ldrb	r3, [r7, #15]
 800c1f8:	2bff      	cmp	r3, #255	@ 0xff
 800c1fa:	d002      	beq.n	800c202 <USBH_CDC_InterfaceInit+0x11a>
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d901      	bls.n	800c206 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c202:	2302      	movs	r3, #2
 800c204:	e0c2      	b.n	800c38c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c206:	7bfb      	ldrb	r3, [r7, #15]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	211a      	movs	r1, #26
 800c20c:	fb01 f303 	mul.w	r3, r1, r3
 800c210:	4413      	add	r3, r2
 800c212:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	b25b      	sxtb	r3, r3
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	da16      	bge.n	800c24c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	211a      	movs	r1, #26
 800c224:	fb01 f303 	mul.w	r3, r1, r3
 800c228:	4413      	add	r3, r2
 800c22a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c22e:	781a      	ldrb	r2, [r3, #0]
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c234:	7bfb      	ldrb	r3, [r7, #15]
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	211a      	movs	r1, #26
 800c23a:	fb01 f303 	mul.w	r3, r1, r3
 800c23e:	4413      	add	r3, r2
 800c240:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c244:	881a      	ldrh	r2, [r3, #0]
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	835a      	strh	r2, [r3, #26]
 800c24a:	e015      	b.n	800c278 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	211a      	movs	r1, #26
 800c252:	fb01 f303 	mul.w	r3, r1, r3
 800c256:	4413      	add	r3, r2
 800c258:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800c25c:	781a      	ldrb	r2, [r3, #0]
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c262:	7bfb      	ldrb	r3, [r7, #15]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	211a      	movs	r1, #26
 800c268:	fb01 f303 	mul.w	r3, r1, r3
 800c26c:	4413      	add	r3, r2
 800c26e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800c272:	881a      	ldrh	r2, [r3, #0]
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	211a      	movs	r1, #26
 800c27e:	fb01 f303 	mul.w	r3, r1, r3
 800c282:	4413      	add	r3, r2
 800c284:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	b25b      	sxtb	r3, r3
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	da16      	bge.n	800c2be <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c290:	7bfb      	ldrb	r3, [r7, #15]
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	211a      	movs	r1, #26
 800c296:	fb01 f303 	mul.w	r3, r1, r3
 800c29a:	4413      	add	r3, r2
 800c29c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c2a0:	781a      	ldrb	r2, [r3, #0]
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c2a6:	7bfb      	ldrb	r3, [r7, #15]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	211a      	movs	r1, #26
 800c2ac:	fb01 f303 	mul.w	r3, r1, r3
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c2b6:	881a      	ldrh	r2, [r3, #0]
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	835a      	strh	r2, [r3, #26]
 800c2bc:	e015      	b.n	800c2ea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	211a      	movs	r1, #26
 800c2c4:	fb01 f303 	mul.w	r3, r1, r3
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800c2ce:	781a      	ldrb	r2, [r3, #0]
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	211a      	movs	r1, #26
 800c2da:	fb01 f303 	mul.w	r3, r1, r3
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800c2e4:	881a      	ldrh	r2, [r3, #0]
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	7b9b      	ldrb	r3, [r3, #14]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 ff16 	bl	800e122 <USBH_AllocPipe>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	7bdb      	ldrb	r3, [r3, #15]
 800c302:	4619      	mov	r1, r3
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f001 ff0c 	bl	800e122 <USBH_AllocPipe>
 800c30a:	4603      	mov	r3, r0
 800c30c:	461a      	mov	r2, r3
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	7b59      	ldrb	r1, [r3, #13]
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	7b98      	ldrb	r0, [r3, #14]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	8b12      	ldrh	r2, [r2, #24]
 800c32a:	9202      	str	r2, [sp, #8]
 800c32c:	2202      	movs	r2, #2
 800c32e:	9201      	str	r2, [sp, #4]
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	4623      	mov	r3, r4
 800c334:	4602      	mov	r2, r0
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f001 fec4 	bl	800e0c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	7b19      	ldrb	r1, [r3, #12]
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	7bd8      	ldrb	r0, [r3, #15]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	8b52      	ldrh	r2, [r2, #26]
 800c354:	9202      	str	r2, [sp, #8]
 800c356:	2202      	movs	r2, #2
 800c358:	9201      	str	r2, [sp, #4]
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	4623      	mov	r3, r4
 800c35e:	4602      	mov	r2, r0
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f001 feaf 	bl	800e0c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	7b5b      	ldrb	r3, [r3, #13]
 800c372:	2200      	movs	r2, #0
 800c374:	4619      	mov	r1, r3
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f002 fa16 	bl	800e7a8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	7b1b      	ldrb	r3, [r3, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f002 fa0f 	bl	800e7a8 <USBH_LL_SetToggle>

  return USBH_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	bd90      	pop	{r4, r7, pc}

0800c394 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c3a2:	69db      	ldr	r3, [r3, #28]
 800c3a4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00e      	beq.n	800c3cc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f001 fea4 	bl	800e102 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f001 fecf 	bl	800e164 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	7b1b      	ldrb	r3, [r3, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00e      	beq.n	800c3f2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	7b1b      	ldrb	r3, [r3, #12]
 800c3d8:	4619      	mov	r1, r3
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f001 fe91 	bl	800e102 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	7b1b      	ldrb	r3, [r3, #12]
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f001 febc 	bl	800e164 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	7b5b      	ldrb	r3, [r3, #13]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d00e      	beq.n	800c418 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	7b5b      	ldrb	r3, [r3, #13]
 800c3fe:	4619      	mov	r1, r3
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f001 fe7e 	bl	800e102 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	7b5b      	ldrb	r3, [r3, #13]
 800c40a:	4619      	mov	r1, r3
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f001 fea9 	bl	800e164 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c41e:	69db      	ldr	r3, [r3, #28]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00b      	beq.n	800c43c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c42a:	69db      	ldr	r3, [r3, #28]
 800c42c:	4618      	mov	r0, r3
 800c42e:	f002 fa49 	bl	800e8c4 <free>
    phost->pActiveClass->pData = 0U;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c438:	2200      	movs	r2, #0
 800c43a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c454:	69db      	ldr	r3, [r3, #28]
 800c456:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	3340      	adds	r3, #64	@ 0x40
 800c45c:	4619      	mov	r1, r3
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f8b1 	bl	800c5c6 <GetLineCoding>
 800c464:	4603      	mov	r3, r0
 800c466:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c468:	7afb      	ldrb	r3, [r7, #11]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d105      	bne.n	800c47a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c474:	2102      	movs	r1, #2
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c47a:	7afb      	ldrb	r3, [r7, #11]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3710      	adds	r7, #16
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c48c:	2301      	movs	r3, #1
 800c48e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c490:	2300      	movs	r3, #0
 800c492:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c49a:	69db      	ldr	r3, [r3, #28]
 800c49c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800c4a4:	2b04      	cmp	r3, #4
 800c4a6:	d877      	bhi.n	800c598 <USBH_CDC_Process+0x114>
 800c4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b0 <USBH_CDC_Process+0x2c>)
 800c4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ae:	bf00      	nop
 800c4b0:	0800c4c5 	.word	0x0800c4c5
 800c4b4:	0800c4cb 	.word	0x0800c4cb
 800c4b8:	0800c4fb 	.word	0x0800c4fb
 800c4bc:	0800c56f 	.word	0x0800c56f
 800c4c0:	0800c57d 	.word	0x0800c57d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c4c8:	e06d      	b.n	800c5a6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f897 	bl	800c604 <SetLineCoding>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c4da:	7bbb      	ldrb	r3, [r7, #14]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d104      	bne.n	800c4ea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c4e8:	e058      	b.n	800c59c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c4ea:	7bbb      	ldrb	r3, [r7, #14]
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d055      	beq.n	800c59c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	2204      	movs	r2, #4
 800c4f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c4f8:	e050      	b.n	800c59c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	3340      	adds	r3, #64	@ 0x40
 800c4fe:	4619      	mov	r1, r3
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f000 f860 	bl	800c5c6 <GetLineCoding>
 800c506:	4603      	mov	r3, r0
 800c508:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c50a:	7bbb      	ldrb	r3, [r7, #14]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d126      	bne.n	800c55e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	2200      	movs	r2, #0
 800c514:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c522:	791b      	ldrb	r3, [r3, #4]
 800c524:	429a      	cmp	r2, r3
 800c526:	d13b      	bne.n	800c5a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c532:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c534:	429a      	cmp	r2, r3
 800c536:	d133      	bne.n	800c5a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c542:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c544:	429a      	cmp	r2, r3
 800c546:	d12b      	bne.n	800c5a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c550:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c552:	429a      	cmp	r2, r3
 800c554:	d124      	bne.n	800c5a0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 f958 	bl	800c80c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c55c:	e020      	b.n	800c5a0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c55e:	7bbb      	ldrb	r3, [r7, #14]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d01d      	beq.n	800c5a0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2204      	movs	r2, #4
 800c568:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c56c:	e018      	b.n	800c5a0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f867 	bl	800c642 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f8da 	bl	800c72e <CDC_ProcessReception>
      break;
 800c57a:	e014      	b.n	800c5a6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c57c:	2100      	movs	r1, #0
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f001 f81a 	bl	800d5b8 <USBH_ClrFeature>
 800c584:	4603      	mov	r3, r0
 800c586:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c588:	7bbb      	ldrb	r3, [r7, #14]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10a      	bne.n	800c5a4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800c596:	e005      	b.n	800c5a4 <USBH_CDC_Process+0x120>

    default:
      break;
 800c598:	bf00      	nop
 800c59a:	e004      	b.n	800c5a6 <USBH_CDC_Process+0x122>
      break;
 800c59c:	bf00      	nop
 800c59e:	e002      	b.n	800c5a6 <USBH_CDC_Process+0x122>
      break;
 800c5a0:	bf00      	nop
 800c5a2:	e000      	b.n	800c5a6 <USBH_CDC_Process+0x122>
      break;
 800c5a4:	bf00      	nop

  }

  return status;
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
 800c5ce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	22a1      	movs	r2, #161	@ 0xa1
 800c5d4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2221      	movs	r2, #33	@ 0x21
 800c5da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2207      	movs	r2, #7
 800c5ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	2207      	movs	r2, #7
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f001 fb14 	bl	800dc22 <USBH_CtlReq>
 800c5fa:	4603      	mov	r3, r0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3708      	adds	r7, #8
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2221      	movs	r2, #33	@ 0x21
 800c612:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2220      	movs	r2, #32
 800c618:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2200      	movs	r2, #0
 800c624:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2207      	movs	r2, #7
 800c62a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2207      	movs	r2, #7
 800c630:	4619      	mov	r1, r3
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f001 faf5 	bl	800dc22 <USBH_CtlReq>
 800c638:	4603      	mov	r3, r0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b086      	sub	sp, #24
 800c646:	af02      	add	r7, sp, #8
 800c648:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c654:	2300      	movs	r3, #0
 800c656:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d002      	beq.n	800c668 <CDC_ProcessTransmission+0x26>
 800c662:	2b02      	cmp	r3, #2
 800c664:	d023      	beq.n	800c6ae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c666:	e05e      	b.n	800c726 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c66c:	68fa      	ldr	r2, [r7, #12]
 800c66e:	8b12      	ldrh	r2, [r2, #24]
 800c670:	4293      	cmp	r3, r2
 800c672:	d90b      	bls.n	800c68c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	69d9      	ldr	r1, [r3, #28]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	8b1a      	ldrh	r2, [r3, #24]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	7b5b      	ldrb	r3, [r3, #13]
 800c680:	2001      	movs	r0, #1
 800c682:	9000      	str	r0, [sp, #0]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f001 fcda 	bl	800e03e <USBH_BulkSendData>
 800c68a:	e00b      	b.n	800c6a4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800c694:	b29a      	uxth	r2, r3
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	7b5b      	ldrb	r3, [r3, #13]
 800c69a:	2001      	movs	r0, #1
 800c69c:	9000      	str	r0, [sp, #0]
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f001 fccd 	bl	800e03e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c6ac:	e03b      	b.n	800c726 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	7b5b      	ldrb	r3, [r3, #13]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f002 f84d 	bl	800e754 <USBH_LL_GetURBState>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c6be:	7afb      	ldrb	r3, [r7, #11]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d128      	bne.n	800c716 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	8b12      	ldrh	r2, [r2, #24]
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d90e      	bls.n	800c6ee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	8b12      	ldrh	r2, [r2, #24]
 800c6d8:	1a9a      	subs	r2, r3, r2
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	8b12      	ldrh	r2, [r2, #24]
 800c6e6:	441a      	add	r2, r3
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	61da      	str	r2, [r3, #28]
 800c6ec:	e002      	b.n	800c6f4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d004      	beq.n	800c706 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	2201      	movs	r2, #1
 800c700:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c704:	e00e      	b.n	800c724 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 f868 	bl	800c7e4 <USBH_CDC_TransmitCallback>
      break;
 800c714:	e006      	b.n	800c724 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c716:	7afb      	ldrb	r3, [r7, #11]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d103      	bne.n	800c724 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2201      	movs	r2, #1
 800c720:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c724:	bf00      	nop
  }
}
 800c726:	bf00      	nop
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c72e:	b580      	push	{r7, lr}
 800c730:	b086      	sub	sp, #24
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c73c:	69db      	ldr	r3, [r3, #28]
 800c73e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c740:	2300      	movs	r3, #0
 800c742:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800c74a:	2b03      	cmp	r3, #3
 800c74c:	d002      	beq.n	800c754 <CDC_ProcessReception+0x26>
 800c74e:	2b04      	cmp	r3, #4
 800c750:	d00e      	beq.n	800c770 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c752:	e043      	b.n	800c7dc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	6a19      	ldr	r1, [r3, #32]
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	8b5a      	ldrh	r2, [r3, #26]
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	7b1b      	ldrb	r3, [r3, #12]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f001 fc91 	bl	800e088 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	2204      	movs	r2, #4
 800c76a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c76e:	e035      	b.n	800c7dc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	7b1b      	ldrb	r3, [r3, #12]
 800c774:	4619      	mov	r1, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f001 ffec 	bl	800e754 <USBH_LL_GetURBState>
 800c77c:	4603      	mov	r3, r0
 800c77e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c780:	7cfb      	ldrb	r3, [r7, #19]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d129      	bne.n	800c7da <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	7b1b      	ldrb	r3, [r3, #12]
 800c78a:	4619      	mov	r1, r3
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f001 ff4f 	bl	800e630 <USBH_LL_GetLastXferSize>
 800c792:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d016      	beq.n	800c7cc <CDC_ProcessReception+0x9e>
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	8b5b      	ldrh	r3, [r3, #26]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d110      	bne.n	800c7cc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	1ad2      	subs	r2, r2, r3
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	6a1a      	ldr	r2, [r3, #32]
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	441a      	add	r2, r3
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2203      	movs	r2, #3
 800c7c6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c7ca:	e006      	b.n	800c7da <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f80f 	bl	800c7f8 <USBH_CDC_ReceiveCallback>
      break;
 800c7da:	bf00      	nop
  }
}
 800c7dc:	bf00      	nop
 800c7de:	3718      	adds	r7, #24
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c7ec:	bf00      	nop
 800c7ee:	370c      	adds	r7, #12
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c800:	bf00      	nop
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b083      	sub	sp, #12
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	4613      	mov	r3, r2
 800c82c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d101      	bne.n	800c838 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c834:	2302      	movs	r3, #2
 800c836:	e029      	b.n	800c88c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	79fa      	ldrb	r2, [r7, #7]
 800c83c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	2200      	movs	r2, #0
 800c844:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f000 f81f 	bl	800c894 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2200      	movs	r2, #0
 800c85a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f001 fe1f 	bl	800e4c8 <USBH_LL_Init>

  return USBH_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c89c:	2300      	movs	r3, #0
 800c89e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	60fb      	str	r3, [r7, #12]
 800c8a4:	e009      	b.n	800c8ba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	33e0      	adds	r3, #224	@ 0xe0
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	60fb      	str	r3, [r7, #12]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2b0f      	cmp	r3, #15
 800c8be:	d9f2      	bls.n	800c8a6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	60fb      	str	r3, [r7, #12]
 800c8c4:	e009      	b.n	800c8da <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8e0:	d3f1      	bcc.n	800c8c6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2240      	movs	r2, #64	@ 0x40
 800c906:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	331c      	adds	r3, #28
 800c932:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c936:	2100      	movs	r1, #0
 800c938:	4618      	mov	r0, r3
 800c93a:	f002 f9c4 	bl	800ecc6 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c948:	2100      	movs	r1, #0
 800c94a:	4618      	mov	r0, r3
 800c94c:	f002 f9bb 	bl	800ecc6 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c956:	2212      	movs	r2, #18
 800c958:	2100      	movs	r1, #0
 800c95a:	4618      	mov	r0, r3
 800c95c:	f002 f9b3 	bl	800ecc6 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c966:	223e      	movs	r2, #62	@ 0x3e
 800c968:	2100      	movs	r1, #0
 800c96a:	4618      	mov	r0, r3
 800c96c:	f002 f9ab 	bl	800ecc6 <memset>

  return USBH_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c97a:	b480      	push	{r7}
 800c97c:	b085      	sub	sp, #20
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c984:	2300      	movs	r3, #0
 800c986:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d016      	beq.n	800c9bc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c994:	2b00      	cmp	r3, #0
 800c996:	d10e      	bne.n	800c9b6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c99e:	1c59      	adds	r1, r3, #1
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	33de      	adds	r3, #222	@ 0xde
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	73fb      	strb	r3, [r7, #15]
 800c9b4:	e004      	b.n	800c9c0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c9b6:	2302      	movs	r3, #2
 800c9b8:	73fb      	strb	r3, [r7, #15]
 800c9ba:	e001      	b.n	800c9c0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c9bc:	2302      	movs	r3, #2
 800c9be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b085      	sub	sp, #20
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c9e4:	78fa      	ldrb	r2, [r7, #3]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d204      	bcs.n	800c9f4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	78fa      	ldrb	r2, [r7, #3]
 800c9ee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c9f2:	e001      	b.n	800c9f8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c9f4:	2302      	movs	r3, #2
 800c9f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr

0800ca06 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ca06:	b480      	push	{r7}
 800ca08:	b087      	sub	sp, #28
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	4608      	mov	r0, r1
 800ca10:	4611      	mov	r1, r2
 800ca12:	461a      	mov	r2, r3
 800ca14:	4603      	mov	r3, r0
 800ca16:	70fb      	strb	r3, [r7, #3]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	70bb      	strb	r3, [r7, #2]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ca24:	2300      	movs	r3, #0
 800ca26:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ca2e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ca30:	e025      	b.n	800ca7e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ca32:	7dfb      	ldrb	r3, [r7, #23]
 800ca34:	221a      	movs	r2, #26
 800ca36:	fb02 f303 	mul.w	r3, r2, r3
 800ca3a:	3308      	adds	r3, #8
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	4413      	add	r3, r2
 800ca40:	3302      	adds	r3, #2
 800ca42:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	795b      	ldrb	r3, [r3, #5]
 800ca48:	78fa      	ldrb	r2, [r7, #3]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d002      	beq.n	800ca54 <USBH_FindInterface+0x4e>
 800ca4e:	78fb      	ldrb	r3, [r7, #3]
 800ca50:	2bff      	cmp	r3, #255	@ 0xff
 800ca52:	d111      	bne.n	800ca78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ca58:	78ba      	ldrb	r2, [r7, #2]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d002      	beq.n	800ca64 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ca5e:	78bb      	ldrb	r3, [r7, #2]
 800ca60:	2bff      	cmp	r3, #255	@ 0xff
 800ca62:	d109      	bne.n	800ca78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ca68:	787a      	ldrb	r2, [r7, #1]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d002      	beq.n	800ca74 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ca6e:	787b      	ldrb	r3, [r7, #1]
 800ca70:	2bff      	cmp	r3, #255	@ 0xff
 800ca72:	d101      	bne.n	800ca78 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ca74:	7dfb      	ldrb	r3, [r7, #23]
 800ca76:	e006      	b.n	800ca86 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ca78:	7dfb      	ldrb	r3, [r7, #23]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d9d6      	bls.n	800ca32 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ca84:	23ff      	movs	r3, #255	@ 0xff
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	371c      	adds	r7, #28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr

0800ca92 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f001 fd50 	bl	800e540 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800caa0:	2101      	movs	r1, #1
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f001 fe69 	bl	800e77a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800caa8:	2300      	movs	r3, #0
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3708      	adds	r7, #8
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
	...

0800cab4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b088      	sub	sp, #32
 800cab8:	af04      	add	r7, sp, #16
 800caba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cabc:	2302      	movs	r3, #2
 800cabe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cac0:	2300      	movs	r3, #0
 800cac2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d102      	bne.n	800cad6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2203      	movs	r2, #3
 800cad4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	2b0b      	cmp	r3, #11
 800cade:	f200 81bb 	bhi.w	800ce58 <USBH_Process+0x3a4>
 800cae2:	a201      	add	r2, pc, #4	@ (adr r2, 800cae8 <USBH_Process+0x34>)
 800cae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae8:	0800cb19 	.word	0x0800cb19
 800caec:	0800cb4b 	.word	0x0800cb4b
 800caf0:	0800cbb3 	.word	0x0800cbb3
 800caf4:	0800cdf3 	.word	0x0800cdf3
 800caf8:	0800ce59 	.word	0x0800ce59
 800cafc:	0800cc53 	.word	0x0800cc53
 800cb00:	0800cd99 	.word	0x0800cd99
 800cb04:	0800cc89 	.word	0x0800cc89
 800cb08:	0800cca9 	.word	0x0800cca9
 800cb0c:	0800ccc7 	.word	0x0800ccc7
 800cb10:	0800cd0b 	.word	0x0800cd0b
 800cb14:	0800cddb 	.word	0x0800cddb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 819b 	beq.w	800ce5c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cb2c:	20c8      	movs	r0, #200	@ 0xc8
 800cb2e:	f001 fe6e 	bl	800e80e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f001 fd61 	bl	800e5fa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cb48:	e188      	b.n	800ce5c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d107      	bne.n	800cb64 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	2202      	movs	r2, #2
 800cb60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb62:	e18a      	b.n	800ce7a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800cb6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb6e:	d914      	bls.n	800cb9a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cb76:	3301      	adds	r3, #1
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	d903      	bls.n	800cb92 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	220d      	movs	r2, #13
 800cb8e:	701a      	strb	r2, [r3, #0]
      break;
 800cb90:	e173      	b.n	800ce7a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	701a      	strb	r2, [r3, #0]
      break;
 800cb98:	e16f      	b.n	800ce7a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800cba0:	f103 020a 	add.w	r2, r3, #10
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800cbaa:	200a      	movs	r0, #10
 800cbac:	f001 fe2f 	bl	800e80e <USBH_Delay>
      break;
 800cbb0:	e163      	b.n	800ce7a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d005      	beq.n	800cbc8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cbc2:	2104      	movs	r1, #4
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800cbc8:	2064      	movs	r0, #100	@ 0x64
 800cbca:	f001 fe20 	bl	800e80e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f001 fcec 	bl	800e5ac <USBH_LL_GetSpeed>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2205      	movs	r2, #5
 800cbe2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f001 fa9b 	bl	800e122 <USBH_AllocPipe>
 800cbec:	4603      	mov	r3, r0
 800cbee:	461a      	mov	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cbf4:	2180      	movs	r1, #128	@ 0x80
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f001 fa93 	bl	800e122 <USBH_AllocPipe>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	461a      	mov	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	7919      	ldrb	r1, [r3, #4]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cc18:	9202      	str	r2, [sp, #8]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	9201      	str	r2, [sp, #4]
 800cc1e:	9300      	str	r3, [sp, #0]
 800cc20:	4603      	mov	r3, r0
 800cc22:	2280      	movs	r2, #128	@ 0x80
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f001 fa4d 	bl	800e0c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	7959      	ldrb	r1, [r3, #5]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cc3e:	9202      	str	r2, [sp, #8]
 800cc40:	2200      	movs	r2, #0
 800cc42:	9201      	str	r2, [sp, #4]
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	4603      	mov	r3, r0
 800cc48:	2200      	movs	r2, #0
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 fa3a 	bl	800e0c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc50:	e113      	b.n	800ce7a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f916 	bl	800ce84 <USBH_HandleEnum>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cc5c:	7bbb      	ldrb	r3, [r7, #14]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	f040 80fd 	bne.w	800ce60 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800cc74:	2b01      	cmp	r3, #1
 800cc76:	d103      	bne.n	800cc80 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2208      	movs	r2, #8
 800cc7c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cc7e:	e0ef      	b.n	800ce60 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2207      	movs	r2, #7
 800cc84:	701a      	strb	r2, [r3, #0]
      break;
 800cc86:	e0eb      	b.n	800ce60 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 80e8 	beq.w	800ce64 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cc9a:	2101      	movs	r1, #1
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2208      	movs	r2, #8
 800cca4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cca6:	e0dd      	b.n	800ce64 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800ccae:	4619      	mov	r1, r3
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f000 fc3a 	bl	800d52a <USBH_SetCfg>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f040 80d5 	bne.w	800ce68 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2209      	movs	r2, #9
 800ccc2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ccc4:	e0d0      	b.n	800ce68 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800cccc:	f003 0320 	and.w	r3, r3, #32
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d016      	beq.n	800cd02 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ccd4:	2101      	movs	r1, #1
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 fc4a 	bl	800d570 <USBH_SetFeature>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cce0:	7bbb      	ldrb	r3, [r7, #14]
 800cce2:	b2db      	uxtb	r3, r3
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d103      	bne.n	800ccf0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	220a      	movs	r2, #10
 800ccec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ccee:	e0bd      	b.n	800ce6c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800ccf0:	7bbb      	ldrb	r3, [r7, #14]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b03      	cmp	r3, #3
 800ccf6:	f040 80b9 	bne.w	800ce6c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	220a      	movs	r2, #10
 800ccfe:	701a      	strb	r2, [r3, #0]
      break;
 800cd00:	e0b4      	b.n	800ce6c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	220a      	movs	r2, #10
 800cd06:	701a      	strb	r2, [r3, #0]
      break;
 800cd08:	e0b0      	b.n	800ce6c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f000 80ad 	beq.w	800ce70 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cd1e:	2300      	movs	r3, #0
 800cd20:	73fb      	strb	r3, [r7, #15]
 800cd22:	e016      	b.n	800cd52 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cd24:	7bfa      	ldrb	r2, [r7, #15]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	32de      	adds	r2, #222	@ 0xde
 800cd2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd2e:	791a      	ldrb	r2, [r3, #4]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d108      	bne.n	800cd4c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cd3a:	7bfa      	ldrb	r2, [r7, #15]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	32de      	adds	r2, #222	@ 0xde
 800cd40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800cd4a:	e005      	b.n	800cd58 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	73fb      	strb	r3, [r7, #15]
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d0e5      	beq.n	800cd24 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d016      	beq.n	800cd90 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	4798      	blx	r3
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d109      	bne.n	800cd88 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2206      	movs	r2, #6
 800cd78:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cd80:	2103      	movs	r1, #3
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd86:	e073      	b.n	800ce70 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	220d      	movs	r2, #13
 800cd8c:	701a      	strb	r2, [r3, #0]
      break;
 800cd8e:	e06f      	b.n	800ce70 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	220d      	movs	r2, #13
 800cd94:	701a      	strb	r2, [r3, #0]
      break;
 800cd96:	e06b      	b.n	800ce70 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d017      	beq.n	800cdd2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	4798      	blx	r3
 800cdae:	4603      	mov	r3, r0
 800cdb0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cdb2:	7bbb      	ldrb	r3, [r7, #14]
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d103      	bne.n	800cdc2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	220b      	movs	r2, #11
 800cdbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cdc0:	e058      	b.n	800ce74 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800cdc2:	7bbb      	ldrb	r3, [r7, #14]
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b02      	cmp	r3, #2
 800cdc8:	d154      	bne.n	800ce74 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	220d      	movs	r2, #13
 800cdce:	701a      	strb	r2, [r3, #0]
      break;
 800cdd0:	e050      	b.n	800ce74 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	220d      	movs	r2, #13
 800cdd6:	701a      	strb	r2, [r3, #0]
      break;
 800cdd8:	e04c      	b.n	800ce74 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d049      	beq.n	800ce78 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cdea:	695b      	ldr	r3, [r3, #20]
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	4798      	blx	r3
      }
      break;
 800cdf0:	e042      	b.n	800ce78 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7ff fd4a 	bl	800c894 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d009      	beq.n	800ce1e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d005      	beq.n	800ce34 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ce2e:	2105      	movs	r1, #5
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d107      	bne.n	800ce50 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff fe22 	bl	800ca92 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ce4e:	e014      	b.n	800ce7a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f001 fb75 	bl	800e540 <USBH_LL_Start>
      break;
 800ce56:	e010      	b.n	800ce7a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ce58:	bf00      	nop
 800ce5a:	e00e      	b.n	800ce7a <USBH_Process+0x3c6>
      break;
 800ce5c:	bf00      	nop
 800ce5e:	e00c      	b.n	800ce7a <USBH_Process+0x3c6>
      break;
 800ce60:	bf00      	nop
 800ce62:	e00a      	b.n	800ce7a <USBH_Process+0x3c6>
    break;
 800ce64:	bf00      	nop
 800ce66:	e008      	b.n	800ce7a <USBH_Process+0x3c6>
      break;
 800ce68:	bf00      	nop
 800ce6a:	e006      	b.n	800ce7a <USBH_Process+0x3c6>
      break;
 800ce6c:	bf00      	nop
 800ce6e:	e004      	b.n	800ce7a <USBH_Process+0x3c6>
      break;
 800ce70:	bf00      	nop
 800ce72:	e002      	b.n	800ce7a <USBH_Process+0x3c6>
      break;
 800ce74:	bf00      	nop
 800ce76:	e000      	b.n	800ce7a <USBH_Process+0x3c6>
      break;
 800ce78:	bf00      	nop
  }
  return USBH_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b088      	sub	sp, #32
 800ce88:	af04      	add	r7, sp, #16
 800ce8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ce90:	2301      	movs	r3, #1
 800ce92:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	785b      	ldrb	r3, [r3, #1]
 800ce98:	2b07      	cmp	r3, #7
 800ce9a:	f200 81bd 	bhi.w	800d218 <USBH_HandleEnum+0x394>
 800ce9e:	a201      	add	r2, pc, #4	@ (adr r2, 800cea4 <USBH_HandleEnum+0x20>)
 800cea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea4:	0800cec5 	.word	0x0800cec5
 800cea8:	0800cf7f 	.word	0x0800cf7f
 800ceac:	0800cfe9 	.word	0x0800cfe9
 800ceb0:	0800d073 	.word	0x0800d073
 800ceb4:	0800d0dd 	.word	0x0800d0dd
 800ceb8:	0800d14d 	.word	0x0800d14d
 800cebc:	0800d193 	.word	0x0800d193
 800cec0:	0800d1d9 	.word	0x0800d1d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cec4:	2108      	movs	r1, #8
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fa4c 	bl	800d364 <USBH_Get_DevDesc>
 800cecc:	4603      	mov	r3, r0
 800cece:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ced0:	7bbb      	ldrb	r3, [r7, #14]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d12e      	bne.n	800cf34 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	7919      	ldrb	r1, [r3, #4]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cefa:	9202      	str	r2, [sp, #8]
 800cefc:	2200      	movs	r2, #0
 800cefe:	9201      	str	r2, [sp, #4]
 800cf00:	9300      	str	r3, [sp, #0]
 800cf02:	4603      	mov	r3, r0
 800cf04:	2280      	movs	r2, #128	@ 0x80
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f001 f8dc 	bl	800e0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	7959      	ldrb	r1, [r3, #5]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf20:	9202      	str	r2, [sp, #8]
 800cf22:	2200      	movs	r2, #0
 800cf24:	9201      	str	r2, [sp, #4]
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f001 f8c9 	bl	800e0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cf32:	e173      	b.n	800d21c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf34:	7bbb      	ldrb	r3, [r7, #14]
 800cf36:	2b03      	cmp	r3, #3
 800cf38:	f040 8170 	bne.w	800d21c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cf42:	3301      	adds	r3, #1
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cf52:	2b03      	cmp	r3, #3
 800cf54:	d903      	bls.n	800cf5e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	220d      	movs	r2, #13
 800cf5a:	701a      	strb	r2, [r3, #0]
      break;
 800cf5c:	e15e      	b.n	800d21c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	795b      	ldrb	r3, [r3, #5]
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f001 f8fd 	bl	800e164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	791b      	ldrb	r3, [r3, #4]
 800cf6e:	4619      	mov	r1, r3
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f001 f8f7 	bl	800e164 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	701a      	strb	r2, [r3, #0]
      break;
 800cf7c:	e14e      	b.n	800d21c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cf7e:	2112      	movs	r1, #18
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f9ef 	bl	800d364 <USBH_Get_DevDesc>
 800cf86:	4603      	mov	r3, r0
 800cf88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf8a:	7bbb      	ldrb	r3, [r7, #14]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d103      	bne.n	800cf98 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2202      	movs	r2, #2
 800cf94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf96:	e143      	b.n	800d220 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	f040 8140 	bne.w	800d220 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cfb6:	2b03      	cmp	r3, #3
 800cfb8:	d903      	bls.n	800cfc2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	220d      	movs	r2, #13
 800cfbe:	701a      	strb	r2, [r3, #0]
      break;
 800cfc0:	e12e      	b.n	800d220 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	795b      	ldrb	r3, [r3, #5]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f001 f8cb 	bl	800e164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	791b      	ldrb	r3, [r3, #4]
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f001 f8c5 	bl	800e164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	701a      	strb	r2, [r3, #0]
      break;
 800cfe6:	e11b      	b.n	800d220 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cfe8:	2101      	movs	r1, #1
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 fa79 	bl	800d4e2 <USBH_SetAddress>
 800cff0:	4603      	mov	r3, r0
 800cff2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d130      	bne.n	800d05c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800cffa:	2002      	movs	r0, #2
 800cffc:	f001 fc07 	bl	800e80e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2203      	movs	r2, #3
 800d00c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	7919      	ldrb	r1, [r3, #4]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d022:	9202      	str	r2, [sp, #8]
 800d024:	2200      	movs	r2, #0
 800d026:	9201      	str	r2, [sp, #4]
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	4603      	mov	r3, r0
 800d02c:	2280      	movs	r2, #128	@ 0x80
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f001 f848 	bl	800e0c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	7959      	ldrb	r1, [r3, #5]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d048:	9202      	str	r2, [sp, #8]
 800d04a:	2200      	movs	r2, #0
 800d04c:	9201      	str	r2, [sp, #4]
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	4603      	mov	r3, r0
 800d052:	2200      	movs	r2, #0
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f001 f835 	bl	800e0c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d05a:	e0e3      	b.n	800d224 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d05c:	7bbb      	ldrb	r3, [r7, #14]
 800d05e:	2b03      	cmp	r3, #3
 800d060:	f040 80e0 	bne.w	800d224 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	220d      	movs	r2, #13
 800d068:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	705a      	strb	r2, [r3, #1]
      break;
 800d070:	e0d8      	b.n	800d224 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d072:	2109      	movs	r1, #9
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 f9a1 	bl	800d3bc <USBH_Get_CfgDesc>
 800d07a:	4603      	mov	r3, r0
 800d07c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d07e:	7bbb      	ldrb	r3, [r7, #14]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d103      	bne.n	800d08c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2204      	movs	r2, #4
 800d088:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d08a:	e0cd      	b.n	800d228 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d08c:	7bbb      	ldrb	r3, [r7, #14]
 800d08e:	2b03      	cmp	r3, #3
 800d090:	f040 80ca 	bne.w	800d228 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d09a:	3301      	adds	r3, #1
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d0aa:	2b03      	cmp	r3, #3
 800d0ac:	d903      	bls.n	800d0b6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	220d      	movs	r2, #13
 800d0b2:	701a      	strb	r2, [r3, #0]
      break;
 800d0b4:	e0b8      	b.n	800d228 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	795b      	ldrb	r3, [r3, #5]
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f001 f851 	bl	800e164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	791b      	ldrb	r3, [r3, #4]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f001 f84b 	bl	800e164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	701a      	strb	r2, [r3, #0]
      break;
 800d0da:	e0a5      	b.n	800d228 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f969 	bl	800d3bc <USBH_Get_CfgDesc>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d0ee:	7bbb      	ldrb	r3, [r7, #14]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d103      	bne.n	800d0fc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2205      	movs	r2, #5
 800d0f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d0fa:	e097      	b.n	800d22c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0fc:	7bbb      	ldrb	r3, [r7, #14]
 800d0fe:	2b03      	cmp	r3, #3
 800d100:	f040 8094 	bne.w	800d22c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d10a:	3301      	adds	r3, #1
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800d11a:	2b03      	cmp	r3, #3
 800d11c:	d903      	bls.n	800d126 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	220d      	movs	r2, #13
 800d122:	701a      	strb	r2, [r3, #0]
      break;
 800d124:	e082      	b.n	800d22c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	795b      	ldrb	r3, [r3, #5]
 800d12a:	4619      	mov	r1, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f001 f819 	bl	800e164 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	791b      	ldrb	r3, [r3, #4]
 800d136:	4619      	mov	r1, r3
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f001 f813 	bl	800e164 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	701a      	strb	r2, [r3, #0]
      break;
 800d14a:	e06f      	b.n	800d22c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d152:	2b00      	cmp	r3, #0
 800d154:	d019      	beq.n	800d18a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d162:	23ff      	movs	r3, #255	@ 0xff
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 f953 	bl	800d410 <USBH_Get_StringDesc>
 800d16a:	4603      	mov	r3, r0
 800d16c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d16e:	7bbb      	ldrb	r3, [r7, #14]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d103      	bne.n	800d17c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2206      	movs	r2, #6
 800d178:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d17a:	e059      	b.n	800d230 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d17c:	7bbb      	ldrb	r3, [r7, #14]
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d156      	bne.n	800d230 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2206      	movs	r2, #6
 800d186:	705a      	strb	r2, [r3, #1]
      break;
 800d188:	e052      	b.n	800d230 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2206      	movs	r2, #6
 800d18e:	705a      	strb	r2, [r3, #1]
      break;
 800d190:	e04e      	b.n	800d230 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d019      	beq.n	800d1d0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d1a8:	23ff      	movs	r3, #255	@ 0xff
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 f930 	bl	800d410 <USBH_Get_StringDesc>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d103      	bne.n	800d1c2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2207      	movs	r2, #7
 800d1be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d1c0:	e038      	b.n	800d234 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d1c2:	7bbb      	ldrb	r3, [r7, #14]
 800d1c4:	2b03      	cmp	r3, #3
 800d1c6:	d135      	bne.n	800d234 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2207      	movs	r2, #7
 800d1cc:	705a      	strb	r2, [r3, #1]
      break;
 800d1ce:	e031      	b.n	800d234 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2207      	movs	r2, #7
 800d1d4:	705a      	strb	r2, [r3, #1]
      break;
 800d1d6:	e02d      	b.n	800d234 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d017      	beq.n	800d212 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d1ee:	23ff      	movs	r3, #255	@ 0xff
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f90d 	bl	800d410 <USBH_Get_StringDesc>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d1fa:	7bbb      	ldrb	r3, [r7, #14]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d102      	bne.n	800d206 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d200:	2300      	movs	r3, #0
 800d202:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d204:	e018      	b.n	800d238 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d206:	7bbb      	ldrb	r3, [r7, #14]
 800d208:	2b03      	cmp	r3, #3
 800d20a:	d115      	bne.n	800d238 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800d20c:	2300      	movs	r3, #0
 800d20e:	73fb      	strb	r3, [r7, #15]
      break;
 800d210:	e012      	b.n	800d238 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	73fb      	strb	r3, [r7, #15]
      break;
 800d216:	e00f      	b.n	800d238 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800d218:	bf00      	nop
 800d21a:	e00e      	b.n	800d23a <USBH_HandleEnum+0x3b6>
      break;
 800d21c:	bf00      	nop
 800d21e:	e00c      	b.n	800d23a <USBH_HandleEnum+0x3b6>
      break;
 800d220:	bf00      	nop
 800d222:	e00a      	b.n	800d23a <USBH_HandleEnum+0x3b6>
      break;
 800d224:	bf00      	nop
 800d226:	e008      	b.n	800d23a <USBH_HandleEnum+0x3b6>
      break;
 800d228:	bf00      	nop
 800d22a:	e006      	b.n	800d23a <USBH_HandleEnum+0x3b6>
      break;
 800d22c:	bf00      	nop
 800d22e:	e004      	b.n	800d23a <USBH_HandleEnum+0x3b6>
      break;
 800d230:	bf00      	nop
 800d232:	e002      	b.n	800d23a <USBH_HandleEnum+0x3b6>
      break;
 800d234:	bf00      	nop
 800d236:	e000      	b.n	800d23a <USBH_HandleEnum+0x3b6>
      break;
 800d238:	bf00      	nop
  }
  return Status;
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	683a      	ldr	r2, [r7, #0]
 800d252:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800d256:	bf00      	nop
 800d258:	370c      	adds	r7, #12
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d262:	b580      	push	{r7, lr}
 800d264:	b082      	sub	sp, #8
 800d266:	af00      	add	r7, sp, #0
 800d268:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d270:	1c5a      	adds	r2, r3, #1
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f804 	bl	800d286 <USBH_HandleSof>
}
 800d27e:	bf00      	nop
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}

0800d286 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d286:	b580      	push	{r7, lr}
 800d288:	b082      	sub	sp, #8
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	b2db      	uxtb	r3, r3
 800d294:	2b0b      	cmp	r3, #11
 800d296:	d10a      	bne.n	800d2ae <USBH_HandleSof+0x28>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d005      	beq.n	800d2ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d2a8:	699b      	ldr	r3, [r3, #24]
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	4798      	blx	r3
  }
}
 800d2ae:	bf00      	nop
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d2b6:	b480      	push	{r7}
 800d2b8:	b083      	sub	sp, #12
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2201      	movs	r2, #1
 800d2c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d2c6:	bf00      	nop
}
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d2d2:	b480      	push	{r7}
 800d2d4:	b083      	sub	sp, #12
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d2e2:	bf00      	nop
}
 800d2e4:	370c      	adds	r7, #12
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr

0800d31c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f001 f91a 	bl	800e576 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	791b      	ldrb	r3, [r3, #4]
 800d346:	4619      	mov	r1, r3
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 ff0b 	bl	800e164 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	795b      	ldrb	r3, [r3, #5]
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 ff05 	bl	800e164 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d35a:	2300      	movs	r3, #0
}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af02      	add	r7, sp, #8
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	460b      	mov	r3, r1
 800d36e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d370:	887b      	ldrh	r3, [r7, #2]
 800d372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d376:	d901      	bls.n	800d37c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d378:	2303      	movs	r3, #3
 800d37a:	e01b      	b.n	800d3b4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d382:	887b      	ldrh	r3, [r7, #2]
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	4613      	mov	r3, r2
 800d388:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d38c:	2100      	movs	r1, #0
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f872 	bl	800d478 <USBH_GetDescriptor>
 800d394:	4603      	mov	r3, r0
 800d396:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d398:	7bfb      	ldrb	r3, [r7, #15]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d109      	bne.n	800d3b2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d3a4:	887a      	ldrh	r2, [r7, #2]
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f929 	bl	800d600 <USBH_ParseDevDesc>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3710      	adds	r7, #16
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af02      	add	r7, sp, #8
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	331c      	adds	r3, #28
 800d3cc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d3ce:	887b      	ldrh	r3, [r7, #2]
 800d3d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3d4:	d901      	bls.n	800d3da <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d3d6:	2303      	movs	r3, #3
 800d3d8:	e016      	b.n	800d408 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d3da:	887b      	ldrh	r3, [r7, #2]
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f846 	bl	800d478 <USBH_GetDescriptor>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d107      	bne.n	800d406 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d3f6:	887b      	ldrh	r3, [r7, #2]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	68b9      	ldr	r1, [r7, #8]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f9af 	bl	800d760 <USBH_ParseCfgDesc>
 800d402:	4603      	mov	r3, r0
 800d404:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d406:	7bfb      	ldrb	r3, [r7, #15]
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b088      	sub	sp, #32
 800d414:	af02      	add	r7, sp, #8
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	607a      	str	r2, [r7, #4]
 800d41a:	461a      	mov	r2, r3
 800d41c:	460b      	mov	r3, r1
 800d41e:	72fb      	strb	r3, [r7, #11]
 800d420:	4613      	mov	r3, r2
 800d422:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d424:	893b      	ldrh	r3, [r7, #8]
 800d426:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d42a:	d802      	bhi.n	800d432 <USBH_Get_StringDesc+0x22>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d101      	bne.n	800d436 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d432:	2303      	movs	r3, #3
 800d434:	e01c      	b.n	800d470 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d436:	7afb      	ldrb	r3, [r7, #11]
 800d438:	b29b      	uxth	r3, r3
 800d43a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d43e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d446:	893b      	ldrh	r3, [r7, #8]
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	460b      	mov	r3, r1
 800d44c:	2100      	movs	r1, #0
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f000 f812 	bl	800d478 <USBH_GetDescriptor>
 800d454:	4603      	mov	r3, r0
 800d456:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d458:	7dfb      	ldrb	r3, [r7, #23]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d107      	bne.n	800d46e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d464:	893a      	ldrh	r2, [r7, #8]
 800d466:	6879      	ldr	r1, [r7, #4]
 800d468:	4618      	mov	r0, r3
 800d46a:	f000 fb8d 	bl	800db88 <USBH_ParseStringDesc>
  }

  return status;
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3718      	adds	r7, #24
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	607b      	str	r3, [r7, #4]
 800d482:	460b      	mov	r3, r1
 800d484:	72fb      	strb	r3, [r7, #11]
 800d486:	4613      	mov	r3, r2
 800d488:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	789b      	ldrb	r3, [r3, #2]
 800d48e:	2b01      	cmp	r3, #1
 800d490:	d11c      	bne.n	800d4cc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d492:	7afb      	ldrb	r3, [r7, #11]
 800d494:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d498:	b2da      	uxtb	r2, r3
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2206      	movs	r2, #6
 800d4a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	893a      	ldrh	r2, [r7, #8]
 800d4a8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d4aa:	893b      	ldrh	r3, [r7, #8]
 800d4ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d4b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4b4:	d104      	bne.n	800d4c0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f240 4209 	movw	r2, #1033	@ 0x409
 800d4bc:	829a      	strh	r2, [r3, #20]
 800d4be:	e002      	b.n	800d4c6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	8b3a      	ldrh	r2, [r7, #24]
 800d4ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d4cc:	8b3b      	ldrh	r3, [r7, #24]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	6879      	ldr	r1, [r7, #4]
 800d4d2:	68f8      	ldr	r0, [r7, #12]
 800d4d4:	f000 fba5 	bl	800dc22 <USBH_CtlReq>
 800d4d8:	4603      	mov	r3, r0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}

0800d4e2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d4e2:	b580      	push	{r7, lr}
 800d4e4:	b082      	sub	sp, #8
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	789b      	ldrb	r3, [r3, #2]
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d10f      	bne.n	800d516 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2205      	movs	r2, #5
 800d500:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d502:	78fb      	ldrb	r3, [r7, #3]
 800d504:	b29a      	uxth	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2200      	movs	r2, #0
 800d50e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d516:	2200      	movs	r2, #0
 800d518:	2100      	movs	r1, #0
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 fb81 	bl	800dc22 <USBH_CtlReq>
 800d520:	4603      	mov	r3, r0
}
 800d522:	4618      	mov	r0, r3
 800d524:	3708      	adds	r7, #8
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b082      	sub	sp, #8
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	460b      	mov	r3, r1
 800d534:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	789b      	ldrb	r3, [r3, #2]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d10e      	bne.n	800d55c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2200      	movs	r2, #0
 800d542:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2209      	movs	r2, #9
 800d548:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	887a      	ldrh	r2, [r7, #2]
 800d54e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2200      	movs	r2, #0
 800d554:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d55c:	2200      	movs	r2, #0
 800d55e:	2100      	movs	r1, #0
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 fb5e 	bl	800dc22 <USBH_CtlReq>
 800d566:	4603      	mov	r3, r0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	789b      	ldrb	r3, [r3, #2]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d10f      	bne.n	800d5a4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2203      	movs	r2, #3
 800d58e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d590:	78fb      	ldrb	r3, [r7, #3]
 800d592:	b29a      	uxth	r2, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 fb3a 	bl	800dc22 <USBH_CtlReq>
 800d5ae:	4603      	mov	r3, r0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3708      	adds	r7, #8
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	789b      	ldrb	r3, [r3, #2]
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d10f      	bne.n	800d5ec <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2202      	movs	r2, #2
 800d5d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d5de:	78fb      	ldrb	r3, [r7, #3]
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 fb16 	bl	800dc22 <USBH_CtlReq>
 800d5f6:	4603      	mov	r3, r0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d600:	b480      	push	{r7}
 800d602:	b087      	sub	sp, #28
 800d604:	af00      	add	r7, sp, #0
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	4613      	mov	r3, r2
 800d60c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d614:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d101      	bne.n	800d624 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d620:	2302      	movs	r3, #2
 800d622:	e094      	b.n	800d74e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	781a      	ldrb	r2, [r3, #0]
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	785a      	ldrb	r2, [r3, #1]
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	3302      	adds	r3, #2
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	461a      	mov	r2, r3
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	3303      	adds	r3, #3
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	021b      	lsls	r3, r3, #8
 800d644:	b29b      	uxth	r3, r3
 800d646:	4313      	orrs	r3, r2
 800d648:	b29a      	uxth	r2, r3
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	791a      	ldrb	r2, [r3, #4]
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	795a      	ldrb	r2, [r3, #5]
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d65e:	68bb      	ldr	r3, [r7, #8]
 800d660:	799a      	ldrb	r2, [r3, #6]
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	79da      	ldrb	r2, [r3, #7]
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d674:	2b00      	cmp	r3, #0
 800d676:	d004      	beq.n	800d682 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d11b      	bne.n	800d6ba <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	79db      	ldrb	r3, [r3, #7]
 800d686:	2b20      	cmp	r3, #32
 800d688:	dc0f      	bgt.n	800d6aa <USBH_ParseDevDesc+0xaa>
 800d68a:	2b08      	cmp	r3, #8
 800d68c:	db0f      	blt.n	800d6ae <USBH_ParseDevDesc+0xae>
 800d68e:	3b08      	subs	r3, #8
 800d690:	4a32      	ldr	r2, [pc, #200]	@ (800d75c <USBH_ParseDevDesc+0x15c>)
 800d692:	fa22 f303 	lsr.w	r3, r2, r3
 800d696:	f003 0301 	and.w	r3, r3, #1
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	bf14      	ite	ne
 800d69e:	2301      	movne	r3, #1
 800d6a0:	2300      	moveq	r3, #0
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d106      	bne.n	800d6b6 <USBH_ParseDevDesc+0xb6>
 800d6a8:	e001      	b.n	800d6ae <USBH_ParseDevDesc+0xae>
 800d6aa:	2b40      	cmp	r3, #64	@ 0x40
 800d6ac:	d003      	beq.n	800d6b6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2208      	movs	r2, #8
 800d6b2:	71da      	strb	r2, [r3, #7]
        break;
 800d6b4:	e000      	b.n	800d6b8 <USBH_ParseDevDesc+0xb8>
        break;
 800d6b6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d6b8:	e00e      	b.n	800d6d8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d107      	bne.n	800d6d4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	79db      	ldrb	r3, [r3, #7]
 800d6c8:	2b08      	cmp	r3, #8
 800d6ca:	d005      	beq.n	800d6d8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	2208      	movs	r2, #8
 800d6d0:	71da      	strb	r2, [r3, #7]
 800d6d2:	e001      	b.n	800d6d8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d6d4:	2303      	movs	r3, #3
 800d6d6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d6d8:	88fb      	ldrh	r3, [r7, #6]
 800d6da:	2b08      	cmp	r3, #8
 800d6dc:	d936      	bls.n	800d74c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	3308      	adds	r3, #8
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	3309      	adds	r3, #9
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	021b      	lsls	r3, r3, #8
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	330a      	adds	r3, #10
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	330b      	adds	r3, #11
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	021b      	lsls	r3, r3, #8
 800d708:	b29b      	uxth	r3, r3
 800d70a:	4313      	orrs	r3, r2
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	330c      	adds	r3, #12
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	461a      	mov	r2, r3
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	330d      	adds	r3, #13
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	021b      	lsls	r3, r3, #8
 800d722:	b29b      	uxth	r3, r3
 800d724:	4313      	orrs	r3, r2
 800d726:	b29a      	uxth	r2, r3
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	7b9a      	ldrb	r2, [r3, #14]
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	7bda      	ldrb	r2, [r3, #15]
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	7c1a      	ldrb	r2, [r3, #16]
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d744:	68bb      	ldr	r3, [r7, #8]
 800d746:	7c5a      	ldrb	r2, [r3, #17]
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d74c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	371c      	adds	r7, #28
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	01000101 	.word	0x01000101

0800d760 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b08c      	sub	sp, #48	@ 0x30
 800d764:	af00      	add	r7, sp, #0
 800d766:	60f8      	str	r0, [r7, #12]
 800d768:	60b9      	str	r1, [r7, #8]
 800d76a:	4613      	mov	r3, r2
 800d76c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d774:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d77c:	2300      	movs	r3, #0
 800d77e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d782:	2300      	movs	r3, #0
 800d784:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d101      	bne.n	800d792 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d78e:	2302      	movs	r3, #2
 800d790:	e0da      	b.n	800d948 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b09      	cmp	r3, #9
 800d79c:	d002      	beq.n	800d7a4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a0:	2209      	movs	r2, #9
 800d7a2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	781a      	ldrb	r2, [r3, #0]
 800d7a8:	6a3b      	ldr	r3, [r7, #32]
 800d7aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	785a      	ldrb	r2, [r3, #1]
 800d7b0:	6a3b      	ldr	r3, [r7, #32]
 800d7b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	3302      	adds	r3, #2
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	3303      	adds	r3, #3
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	021b      	lsls	r3, r3, #8
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7ce:	bf28      	it	cs
 800d7d0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	6a3b      	ldr	r3, [r7, #32]
 800d7d8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	791a      	ldrb	r2, [r3, #4]
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	795a      	ldrb	r2, [r3, #5]
 800d7e6:	6a3b      	ldr	r3, [r7, #32]
 800d7e8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	799a      	ldrb	r2, [r3, #6]
 800d7ee:	6a3b      	ldr	r3, [r7, #32]
 800d7f0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	79da      	ldrb	r2, [r3, #7]
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	7a1a      	ldrb	r2, [r3, #8]
 800d7fe:	6a3b      	ldr	r3, [r7, #32]
 800d800:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d802:	88fb      	ldrh	r3, [r7, #6]
 800d804:	2b09      	cmp	r3, #9
 800d806:	f240 809d 	bls.w	800d944 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d80a:	2309      	movs	r3, #9
 800d80c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d80e:	2300      	movs	r3, #0
 800d810:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d812:	e081      	b.n	800d918 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d814:	f107 0316 	add.w	r3, r7, #22
 800d818:	4619      	mov	r1, r3
 800d81a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d81c:	f000 f9e7 	bl	800dbee <USBH_GetNextDesc>
 800d820:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d824:	785b      	ldrb	r3, [r3, #1]
 800d826:	2b04      	cmp	r3, #4
 800d828:	d176      	bne.n	800d918 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	2b09      	cmp	r3, #9
 800d830:	d002      	beq.n	800d838 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d834:	2209      	movs	r2, #9
 800d836:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d83c:	221a      	movs	r2, #26
 800d83e:	fb02 f303 	mul.w	r3, r2, r3
 800d842:	3308      	adds	r3, #8
 800d844:	6a3a      	ldr	r2, [r7, #32]
 800d846:	4413      	add	r3, r2
 800d848:	3302      	adds	r3, #2
 800d84a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d84c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d84e:	69f8      	ldr	r0, [r7, #28]
 800d850:	f000 f87e 	bl	800d950 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d854:	2300      	movs	r3, #0
 800d856:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d85a:	2300      	movs	r3, #0
 800d85c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d85e:	e043      	b.n	800d8e8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d860:	f107 0316 	add.w	r3, r7, #22
 800d864:	4619      	mov	r1, r3
 800d866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d868:	f000 f9c1 	bl	800dbee <USBH_GetNextDesc>
 800d86c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d870:	785b      	ldrb	r3, [r3, #1]
 800d872:	2b05      	cmp	r3, #5
 800d874:	d138      	bne.n	800d8e8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	795b      	ldrb	r3, [r3, #5]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d113      	bne.n	800d8a6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d882:	2b02      	cmp	r3, #2
 800d884:	d003      	beq.n	800d88e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	799b      	ldrb	r3, [r3, #6]
 800d88a:	2b03      	cmp	r3, #3
 800d88c:	d10b      	bne.n	800d8a6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	79db      	ldrb	r3, [r3, #7]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d10b      	bne.n	800d8ae <USBH_ParseCfgDesc+0x14e>
 800d896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	2b09      	cmp	r3, #9
 800d89c:	d007      	beq.n	800d8ae <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a0:	2209      	movs	r2, #9
 800d8a2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d8a4:	e003      	b.n	800d8ae <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a8:	2207      	movs	r2, #7
 800d8aa:	701a      	strb	r2, [r3, #0]
 800d8ac:	e000      	b.n	800d8b0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d8ae:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d8b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d8b8:	3201      	adds	r2, #1
 800d8ba:	00d2      	lsls	r2, r2, #3
 800d8bc:	211a      	movs	r1, #26
 800d8be:	fb01 f303 	mul.w	r3, r1, r3
 800d8c2:	4413      	add	r3, r2
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	6a3a      	ldr	r2, [r7, #32]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	3304      	adds	r3, #4
 800d8cc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d8ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8d0:	69b9      	ldr	r1, [r7, #24]
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f000 f870 	bl	800d9b8 <USBH_ParseEPDesc>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d8de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	791b      	ldrb	r3, [r3, #4]
 800d8ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d204      	bcs.n	800d8fe <USBH_ParseCfgDesc+0x19e>
 800d8f4:	6a3b      	ldr	r3, [r7, #32]
 800d8f6:	885a      	ldrh	r2, [r3, #2]
 800d8f8:	8afb      	ldrh	r3, [r7, #22]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d8b0      	bhi.n	800d860 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	791b      	ldrb	r3, [r3, #4]
 800d902:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d906:	429a      	cmp	r2, r3
 800d908:	d201      	bcs.n	800d90e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d90a:	2303      	movs	r3, #3
 800d90c:	e01c      	b.n	800d948 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d90e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d912:	3301      	adds	r3, #1
 800d914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d805      	bhi.n	800d92c <USBH_ParseCfgDesc+0x1cc>
 800d920:	6a3b      	ldr	r3, [r7, #32]
 800d922:	885a      	ldrh	r2, [r3, #2]
 800d924:	8afb      	ldrh	r3, [r7, #22]
 800d926:	429a      	cmp	r2, r3
 800d928:	f63f af74 	bhi.w	800d814 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d92c:	6a3b      	ldr	r3, [r7, #32]
 800d92e:	791b      	ldrb	r3, [r3, #4]
 800d930:	2b02      	cmp	r3, #2
 800d932:	bf28      	it	cs
 800d934:	2302      	movcs	r3, #2
 800d936:	b2db      	uxtb	r3, r3
 800d938:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d201      	bcs.n	800d944 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d940:	2303      	movs	r3, #3
 800d942:	e001      	b.n	800d948 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d944:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3730      	adds	r7, #48	@ 0x30
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	781a      	ldrb	r2, [r3, #0]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	785a      	ldrb	r2, [r3, #1]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	789a      	ldrb	r2, [r3, #2]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	78da      	ldrb	r2, [r3, #3]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	3304      	adds	r3, #4
 800d97e:	781b      	ldrb	r3, [r3, #0]
 800d980:	2b02      	cmp	r3, #2
 800d982:	bf28      	it	cs
 800d984:	2302      	movcs	r3, #2
 800d986:	b2da      	uxtb	r2, r3
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	795a      	ldrb	r2, [r3, #5]
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	799a      	ldrb	r2, [r3, #6]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	79da      	ldrb	r2, [r3, #7]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	7a1a      	ldrb	r2, [r3, #8]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	721a      	strb	r2, [r3, #8]
}
 800d9ac:	bf00      	nop
 800d9ae:	370c      	adds	r7, #12
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b087      	sub	sp, #28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	781a      	ldrb	r2, [r3, #0]
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	785a      	ldrb	r2, [r3, #1]
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	789a      	ldrb	r2, [r3, #2]
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	78da      	ldrb	r2, [r3, #3]
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	3305      	adds	r3, #5
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	021b      	lsls	r3, r3, #8
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	799a      	ldrb	r2, [r3, #6]
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	889b      	ldrh	r3, [r3, #4]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d009      	beq.n	800da26 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800da16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da1a:	d804      	bhi.n	800da26 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800da20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da24:	d901      	bls.n	800da2a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800da26:	2303      	movs	r3, #3
 800da28:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800da30:	2b00      	cmp	r3, #0
 800da32:	d136      	bne.n	800daa2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	78db      	ldrb	r3, [r3, #3]
 800da38:	f003 0303 	and.w	r3, r3, #3
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d108      	bne.n	800da52 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	889b      	ldrh	r3, [r3, #4]
 800da44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da48:	f240 8097 	bls.w	800db7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800da4c:	2303      	movs	r3, #3
 800da4e:	75fb      	strb	r3, [r7, #23]
 800da50:	e093      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	78db      	ldrb	r3, [r3, #3]
 800da56:	f003 0303 	and.w	r3, r3, #3
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d107      	bne.n	800da6e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	889b      	ldrh	r3, [r3, #4]
 800da62:	2b40      	cmp	r3, #64	@ 0x40
 800da64:	f240 8089 	bls.w	800db7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800da68:	2303      	movs	r3, #3
 800da6a:	75fb      	strb	r3, [r7, #23]
 800da6c:	e085      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	78db      	ldrb	r3, [r3, #3]
 800da72:	f003 0303 	and.w	r3, r3, #3
 800da76:	2b01      	cmp	r3, #1
 800da78:	d005      	beq.n	800da86 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	78db      	ldrb	r3, [r3, #3]
 800da7e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800da82:	2b03      	cmp	r3, #3
 800da84:	d10a      	bne.n	800da9c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	799b      	ldrb	r3, [r3, #6]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d003      	beq.n	800da96 <USBH_ParseEPDesc+0xde>
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	799b      	ldrb	r3, [r3, #6]
 800da92:	2b10      	cmp	r3, #16
 800da94:	d970      	bls.n	800db78 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800da96:	2303      	movs	r3, #3
 800da98:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800da9a:	e06d      	b.n	800db78 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800da9c:	2303      	movs	r3, #3
 800da9e:	75fb      	strb	r3, [r7, #23]
 800daa0:	e06b      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d13c      	bne.n	800db26 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	78db      	ldrb	r3, [r3, #3]
 800dab0:	f003 0303 	and.w	r3, r3, #3
 800dab4:	2b02      	cmp	r3, #2
 800dab6:	d005      	beq.n	800dac4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	78db      	ldrb	r3, [r3, #3]
 800dabc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d106      	bne.n	800dad2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	889b      	ldrh	r3, [r3, #4]
 800dac8:	2b40      	cmp	r3, #64	@ 0x40
 800daca:	d956      	bls.n	800db7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800dacc:	2303      	movs	r3, #3
 800dace:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800dad0:	e053      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	78db      	ldrb	r3, [r3, #3]
 800dad6:	f003 0303 	and.w	r3, r3, #3
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d10e      	bne.n	800dafc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	799b      	ldrb	r3, [r3, #6]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d007      	beq.n	800daf6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800daea:	2b10      	cmp	r3, #16
 800daec:	d803      	bhi.n	800daf6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800daf2:	2b40      	cmp	r3, #64	@ 0x40
 800daf4:	d941      	bls.n	800db7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800daf6:	2303      	movs	r3, #3
 800daf8:	75fb      	strb	r3, [r7, #23]
 800dafa:	e03e      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	78db      	ldrb	r3, [r3, #3]
 800db00:	f003 0303 	and.w	r3, r3, #3
 800db04:	2b03      	cmp	r3, #3
 800db06:	d10b      	bne.n	800db20 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	799b      	ldrb	r3, [r3, #6]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d004      	beq.n	800db1a <USBH_ParseEPDesc+0x162>
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	889b      	ldrh	r3, [r3, #4]
 800db14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db18:	d32f      	bcc.n	800db7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800db1a:	2303      	movs	r3, #3
 800db1c:	75fb      	strb	r3, [r7, #23]
 800db1e:	e02c      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800db20:	2303      	movs	r3, #3
 800db22:	75fb      	strb	r3, [r7, #23]
 800db24:	e029      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d120      	bne.n	800db72 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	78db      	ldrb	r3, [r3, #3]
 800db34:	f003 0303 	and.w	r3, r3, #3
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d106      	bne.n	800db4a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	889b      	ldrh	r3, [r3, #4]
 800db40:	2b08      	cmp	r3, #8
 800db42:	d01a      	beq.n	800db7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800db44:	2303      	movs	r3, #3
 800db46:	75fb      	strb	r3, [r7, #23]
 800db48:	e017      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	78db      	ldrb	r3, [r3, #3]
 800db4e:	f003 0303 	and.w	r3, r3, #3
 800db52:	2b03      	cmp	r3, #3
 800db54:	d10a      	bne.n	800db6c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	799b      	ldrb	r3, [r3, #6]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d003      	beq.n	800db66 <USBH_ParseEPDesc+0x1ae>
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	889b      	ldrh	r3, [r3, #4]
 800db62:	2b08      	cmp	r3, #8
 800db64:	d909      	bls.n	800db7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800db66:	2303      	movs	r3, #3
 800db68:	75fb      	strb	r3, [r7, #23]
 800db6a:	e006      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800db6c:	2303      	movs	r3, #3
 800db6e:	75fb      	strb	r3, [r7, #23]
 800db70:	e003      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800db72:	2303      	movs	r3, #3
 800db74:	75fb      	strb	r3, [r7, #23]
 800db76:	e000      	b.n	800db7a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800db78:	bf00      	nop
  }

  return status;
 800db7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	371c      	adds	r7, #28
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800db88:	b480      	push	{r7}
 800db8a:	b087      	sub	sp, #28
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	4613      	mov	r3, r2
 800db94:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3301      	adds	r3, #1
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	2b03      	cmp	r3, #3
 800db9e:	d120      	bne.n	800dbe2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	1e9a      	subs	r2, r3, #2
 800dba6:	88fb      	ldrh	r3, [r7, #6]
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	bf28      	it	cs
 800dbac:	4613      	movcs	r3, r2
 800dbae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3302      	adds	r3, #2
 800dbb4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	82fb      	strh	r3, [r7, #22]
 800dbba:	e00b      	b.n	800dbd4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dbbc:	8afb      	ldrh	r3, [r7, #22]
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	781a      	ldrb	r2, [r3, #0]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dbce:	8afb      	ldrh	r3, [r7, #22]
 800dbd0:	3302      	adds	r3, #2
 800dbd2:	82fb      	strh	r3, [r7, #22]
 800dbd4:	8afa      	ldrh	r2, [r7, #22]
 800dbd6:	8abb      	ldrh	r3, [r7, #20]
 800dbd8:	429a      	cmp	r2, r3
 800dbda:	d3ef      	bcc.n	800dbbc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	701a      	strb	r2, [r3, #0]
  }
}
 800dbe2:	bf00      	nop
 800dbe4:	371c      	adds	r7, #28
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b085      	sub	sp, #20
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	881b      	ldrh	r3, [r3, #0]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	7812      	ldrb	r2, [r2, #0]
 800dc00:	4413      	add	r3, r2
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4413      	add	r3, r2
 800dc12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dc14:	68fb      	ldr	r3, [r7, #12]
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3714      	adds	r7, #20
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800dc22:	b580      	push	{r7, lr}
 800dc24:	b086      	sub	sp, #24
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	60f8      	str	r0, [r7, #12]
 800dc2a:	60b9      	str	r1, [r7, #8]
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800dc30:	2301      	movs	r3, #1
 800dc32:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	789b      	ldrb	r3, [r3, #2]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d002      	beq.n	800dc42 <USBH_CtlReq+0x20>
 800dc3c:	2b02      	cmp	r3, #2
 800dc3e:	d00f      	beq.n	800dc60 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800dc40:	e027      	b.n	800dc92 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	68ba      	ldr	r2, [r7, #8]
 800dc46:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	88fa      	ldrh	r2, [r7, #6]
 800dc4c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2201      	movs	r2, #1
 800dc52:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2202      	movs	r2, #2
 800dc58:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	75fb      	strb	r3, [r7, #23]
      break;
 800dc5e:	e018      	b.n	800dc92 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f000 f81b 	bl	800dc9c <USBH_HandleControl>
 800dc66:	4603      	mov	r3, r0
 800dc68:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dc6a:	7dfb      	ldrb	r3, [r7, #23]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <USBH_CtlReq+0x54>
 800dc70:	7dfb      	ldrb	r3, [r7, #23]
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	d106      	bne.n	800dc84 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	761a      	strb	r2, [r3, #24]
      break;
 800dc82:	e005      	b.n	800dc90 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800dc84:	7dfb      	ldrb	r3, [r7, #23]
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d102      	bne.n	800dc90 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	709a      	strb	r2, [r3, #2]
      break;
 800dc90:	bf00      	nop
  }
  return status;
 800dc92:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3718      	adds	r7, #24
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b086      	sub	sp, #24
 800dca0:	af02      	add	r7, sp, #8
 800dca2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dca4:	2301      	movs	r3, #1
 800dca6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	7e1b      	ldrb	r3, [r3, #24]
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	2b0a      	cmp	r3, #10
 800dcb4:	f200 8156 	bhi.w	800df64 <USBH_HandleControl+0x2c8>
 800dcb8:	a201      	add	r2, pc, #4	@ (adr r2, 800dcc0 <USBH_HandleControl+0x24>)
 800dcba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcbe:	bf00      	nop
 800dcc0:	0800dced 	.word	0x0800dced
 800dcc4:	0800dd07 	.word	0x0800dd07
 800dcc8:	0800dd71 	.word	0x0800dd71
 800dccc:	0800dd97 	.word	0x0800dd97
 800dcd0:	0800ddcf 	.word	0x0800ddcf
 800dcd4:	0800ddf9 	.word	0x0800ddf9
 800dcd8:	0800de4b 	.word	0x0800de4b
 800dcdc:	0800de6d 	.word	0x0800de6d
 800dce0:	0800dea9 	.word	0x0800dea9
 800dce4:	0800decf 	.word	0x0800decf
 800dce8:	0800df0d 	.word	0x0800df0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f103 0110 	add.w	r1, r3, #16
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	795b      	ldrb	r3, [r3, #5]
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f943 	bl	800df84 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2202      	movs	r2, #2
 800dd02:	761a      	strb	r2, [r3, #24]
      break;
 800dd04:	e139      	b.n	800df7a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	795b      	ldrb	r3, [r3, #5]
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fd21 	bl	800e754 <USBH_LL_GetURBState>
 800dd12:	4603      	mov	r3, r0
 800dd14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dd16:	7bbb      	ldrb	r3, [r7, #14]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d11e      	bne.n	800dd5a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	7c1b      	ldrb	r3, [r3, #16]
 800dd20:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dd24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	8adb      	ldrh	r3, [r3, #22]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00a      	beq.n	800dd44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800dd2e:	7b7b      	ldrb	r3, [r7, #13]
 800dd30:	2b80      	cmp	r3, #128	@ 0x80
 800dd32:	d103      	bne.n	800dd3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2203      	movs	r2, #3
 800dd38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dd3a:	e115      	b.n	800df68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2205      	movs	r2, #5
 800dd40:	761a      	strb	r2, [r3, #24]
      break;
 800dd42:	e111      	b.n	800df68 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800dd44:	7b7b      	ldrb	r3, [r7, #13]
 800dd46:	2b80      	cmp	r3, #128	@ 0x80
 800dd48:	d103      	bne.n	800dd52 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2209      	movs	r2, #9
 800dd4e:	761a      	strb	r2, [r3, #24]
      break;
 800dd50:	e10a      	b.n	800df68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2207      	movs	r2, #7
 800dd56:	761a      	strb	r2, [r3, #24]
      break;
 800dd58:	e106      	b.n	800df68 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dd5a:	7bbb      	ldrb	r3, [r7, #14]
 800dd5c:	2b04      	cmp	r3, #4
 800dd5e:	d003      	beq.n	800dd68 <USBH_HandleControl+0xcc>
 800dd60:	7bbb      	ldrb	r3, [r7, #14]
 800dd62:	2b02      	cmp	r3, #2
 800dd64:	f040 8100 	bne.w	800df68 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	220b      	movs	r2, #11
 800dd6c:	761a      	strb	r2, [r3, #24]
      break;
 800dd6e:	e0fb      	b.n	800df68 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6899      	ldr	r1, [r3, #8]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	899a      	ldrh	r2, [r3, #12]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	791b      	ldrb	r3, [r3, #4]
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f000 f93a 	bl	800e002 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2204      	movs	r2, #4
 800dd92:	761a      	strb	r2, [r3, #24]
      break;
 800dd94:	e0f1      	b.n	800df7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	791b      	ldrb	r3, [r3, #4]
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 fcd9 	bl	800e754 <USBH_LL_GetURBState>
 800dda2:	4603      	mov	r3, r0
 800dda4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d102      	bne.n	800ddb2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2209      	movs	r2, #9
 800ddb0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ddb2:	7bbb      	ldrb	r3, [r7, #14]
 800ddb4:	2b05      	cmp	r3, #5
 800ddb6:	d102      	bne.n	800ddbe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ddb8:	2303      	movs	r3, #3
 800ddba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ddbc:	e0d6      	b.n	800df6c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ddbe:	7bbb      	ldrb	r3, [r7, #14]
 800ddc0:	2b04      	cmp	r3, #4
 800ddc2:	f040 80d3 	bne.w	800df6c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	220b      	movs	r2, #11
 800ddca:	761a      	strb	r2, [r3, #24]
      break;
 800ddcc:	e0ce      	b.n	800df6c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6899      	ldr	r1, [r3, #8]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	899a      	ldrh	r2, [r3, #12]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	795b      	ldrb	r3, [r3, #5]
 800ddda:	2001      	movs	r0, #1
 800dddc:	9000      	str	r0, [sp, #0]
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f8ea 	bl	800dfb8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2206      	movs	r2, #6
 800ddf4:	761a      	strb	r2, [r3, #24]
      break;
 800ddf6:	e0c0      	b.n	800df7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	795b      	ldrb	r3, [r3, #5]
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 fca8 	bl	800e754 <USBH_LL_GetURBState>
 800de04:	4603      	mov	r3, r0
 800de06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800de08:	7bbb      	ldrb	r3, [r7, #14]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d103      	bne.n	800de16 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2207      	movs	r2, #7
 800de12:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de14:	e0ac      	b.n	800df70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800de16:	7bbb      	ldrb	r3, [r7, #14]
 800de18:	2b05      	cmp	r3, #5
 800de1a:	d105      	bne.n	800de28 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	220c      	movs	r2, #12
 800de20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800de22:	2303      	movs	r3, #3
 800de24:	73fb      	strb	r3, [r7, #15]
      break;
 800de26:	e0a3      	b.n	800df70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800de28:	7bbb      	ldrb	r3, [r7, #14]
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	d103      	bne.n	800de36 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2205      	movs	r2, #5
 800de32:	761a      	strb	r2, [r3, #24]
      break;
 800de34:	e09c      	b.n	800df70 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800de36:	7bbb      	ldrb	r3, [r7, #14]
 800de38:	2b04      	cmp	r3, #4
 800de3a:	f040 8099 	bne.w	800df70 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	220b      	movs	r2, #11
 800de42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800de44:	2302      	movs	r3, #2
 800de46:	73fb      	strb	r3, [r7, #15]
      break;
 800de48:	e092      	b.n	800df70 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	791b      	ldrb	r3, [r3, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	2100      	movs	r1, #0
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 f8d5 	bl	800e002 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800de5e:	b29a      	uxth	r2, r3
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2208      	movs	r2, #8
 800de68:	761a      	strb	r2, [r3, #24]

      break;
 800de6a:	e086      	b.n	800df7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	791b      	ldrb	r3, [r3, #4]
 800de70:	4619      	mov	r1, r3
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f000 fc6e 	bl	800e754 <USBH_LL_GetURBState>
 800de78:	4603      	mov	r3, r0
 800de7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800de7c:	7bbb      	ldrb	r3, [r7, #14]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d105      	bne.n	800de8e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	220d      	movs	r2, #13
 800de86:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800de88:	2300      	movs	r3, #0
 800de8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de8c:	e072      	b.n	800df74 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	2b04      	cmp	r3, #4
 800de92:	d103      	bne.n	800de9c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	220b      	movs	r2, #11
 800de98:	761a      	strb	r2, [r3, #24]
      break;
 800de9a:	e06b      	b.n	800df74 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800de9c:	7bbb      	ldrb	r3, [r7, #14]
 800de9e:	2b05      	cmp	r3, #5
 800dea0:	d168      	bne.n	800df74 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800dea2:	2303      	movs	r3, #3
 800dea4:	73fb      	strb	r3, [r7, #15]
      break;
 800dea6:	e065      	b.n	800df74 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	795b      	ldrb	r3, [r3, #5]
 800deac:	2201      	movs	r2, #1
 800deae:	9200      	str	r2, [sp, #0]
 800deb0:	2200      	movs	r2, #0
 800deb2:	2100      	movs	r1, #0
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 f87f 	bl	800dfb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800dec0:	b29a      	uxth	r2, r3
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	220a      	movs	r2, #10
 800deca:	761a      	strb	r2, [r3, #24]
      break;
 800decc:	e055      	b.n	800df7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	795b      	ldrb	r3, [r3, #5]
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 fc3d 	bl	800e754 <USBH_LL_GetURBState>
 800deda:	4603      	mov	r3, r0
 800dedc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800dede:	7bbb      	ldrb	r3, [r7, #14]
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d105      	bne.n	800def0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	220d      	movs	r2, #13
 800deec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800deee:	e043      	b.n	800df78 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800def0:	7bbb      	ldrb	r3, [r7, #14]
 800def2:	2b02      	cmp	r3, #2
 800def4:	d103      	bne.n	800defe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2209      	movs	r2, #9
 800defa:	761a      	strb	r2, [r3, #24]
      break;
 800defc:	e03c      	b.n	800df78 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800defe:	7bbb      	ldrb	r3, [r7, #14]
 800df00:	2b04      	cmp	r3, #4
 800df02:	d139      	bne.n	800df78 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	220b      	movs	r2, #11
 800df08:	761a      	strb	r2, [r3, #24]
      break;
 800df0a:	e035      	b.n	800df78 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	7e5b      	ldrb	r3, [r3, #25]
 800df10:	3301      	adds	r3, #1
 800df12:	b2da      	uxtb	r2, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	765a      	strb	r2, [r3, #25]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	7e5b      	ldrb	r3, [r3, #25]
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d806      	bhi.n	800df2e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2201      	movs	r2, #1
 800df24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2201      	movs	r2, #1
 800df2a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800df2c:	e025      	b.n	800df7a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800df34:	2106      	movs	r1, #6
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2200      	movs	r2, #0
 800df3e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	795b      	ldrb	r3, [r3, #5]
 800df44:	4619      	mov	r1, r3
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 f90c 	bl	800e164 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	791b      	ldrb	r3, [r3, #4]
 800df50:	4619      	mov	r1, r3
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 f906 	bl	800e164 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800df5e:	2302      	movs	r3, #2
 800df60:	73fb      	strb	r3, [r7, #15]
      break;
 800df62:	e00a      	b.n	800df7a <USBH_HandleControl+0x2de>

    default:
      break;
 800df64:	bf00      	nop
 800df66:	e008      	b.n	800df7a <USBH_HandleControl+0x2de>
      break;
 800df68:	bf00      	nop
 800df6a:	e006      	b.n	800df7a <USBH_HandleControl+0x2de>
      break;
 800df6c:	bf00      	nop
 800df6e:	e004      	b.n	800df7a <USBH_HandleControl+0x2de>
      break;
 800df70:	bf00      	nop
 800df72:	e002      	b.n	800df7a <USBH_HandleControl+0x2de>
      break;
 800df74:	bf00      	nop
 800df76:	e000      	b.n	800df7a <USBH_HandleControl+0x2de>
      break;
 800df78:	bf00      	nop
  }

  return status;
 800df7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3710      	adds	r7, #16
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b088      	sub	sp, #32
 800df88:	af04      	add	r7, sp, #16
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	4613      	mov	r3, r2
 800df90:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df92:	79f9      	ldrb	r1, [r7, #7]
 800df94:	2300      	movs	r3, #0
 800df96:	9303      	str	r3, [sp, #12]
 800df98:	2308      	movs	r3, #8
 800df9a:	9302      	str	r3, [sp, #8]
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	9301      	str	r3, [sp, #4]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	9300      	str	r3, [sp, #0]
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f000 fba2 	bl	800e6f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b088      	sub	sp, #32
 800dfbc:	af04      	add	r7, sp, #16
 800dfbe:	60f8      	str	r0, [r7, #12]
 800dfc0:	60b9      	str	r1, [r7, #8]
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	80fb      	strh	r3, [r7, #6]
 800dfca:	4613      	mov	r3, r2
 800dfcc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dfdc:	7979      	ldrb	r1, [r7, #5]
 800dfde:	7e3b      	ldrb	r3, [r7, #24]
 800dfe0:	9303      	str	r3, [sp, #12]
 800dfe2:	88fb      	ldrh	r3, [r7, #6]
 800dfe4:	9302      	str	r3, [sp, #8]
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	9301      	str	r3, [sp, #4]
 800dfea:	2301      	movs	r3, #1
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	2300      	movs	r3, #0
 800dff0:	2200      	movs	r2, #0
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f000 fb7d 	bl	800e6f2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b088      	sub	sp, #32
 800e006:	af04      	add	r7, sp, #16
 800e008:	60f8      	str	r0, [r7, #12]
 800e00a:	60b9      	str	r1, [r7, #8]
 800e00c:	4611      	mov	r1, r2
 800e00e:	461a      	mov	r2, r3
 800e010:	460b      	mov	r3, r1
 800e012:	80fb      	strh	r3, [r7, #6]
 800e014:	4613      	mov	r3, r2
 800e016:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e018:	7979      	ldrb	r1, [r7, #5]
 800e01a:	2300      	movs	r3, #0
 800e01c:	9303      	str	r3, [sp, #12]
 800e01e:	88fb      	ldrh	r3, [r7, #6]
 800e020:	9302      	str	r3, [sp, #8]
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	9301      	str	r3, [sp, #4]
 800e026:	2301      	movs	r3, #1
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	2300      	movs	r3, #0
 800e02c:	2201      	movs	r2, #1
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f000 fb5f 	bl	800e6f2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e034:	2300      	movs	r3, #0

}
 800e036:	4618      	mov	r0, r3
 800e038:	3710      	adds	r7, #16
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}

0800e03e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e03e:	b580      	push	{r7, lr}
 800e040:	b088      	sub	sp, #32
 800e042:	af04      	add	r7, sp, #16
 800e044:	60f8      	str	r0, [r7, #12]
 800e046:	60b9      	str	r1, [r7, #8]
 800e048:	4611      	mov	r1, r2
 800e04a:	461a      	mov	r2, r3
 800e04c:	460b      	mov	r3, r1
 800e04e:	80fb      	strh	r3, [r7, #6]
 800e050:	4613      	mov	r3, r2
 800e052:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d001      	beq.n	800e062 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e05e:	2300      	movs	r3, #0
 800e060:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e062:	7979      	ldrb	r1, [r7, #5]
 800e064:	7e3b      	ldrb	r3, [r7, #24]
 800e066:	9303      	str	r3, [sp, #12]
 800e068:	88fb      	ldrh	r3, [r7, #6]
 800e06a:	9302      	str	r3, [sp, #8]
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	9301      	str	r3, [sp, #4]
 800e070:	2301      	movs	r3, #1
 800e072:	9300      	str	r3, [sp, #0]
 800e074:	2302      	movs	r3, #2
 800e076:	2200      	movs	r2, #0
 800e078:	68f8      	ldr	r0, [r7, #12]
 800e07a:	f000 fb3a 	bl	800e6f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b088      	sub	sp, #32
 800e08c:	af04      	add	r7, sp, #16
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	4611      	mov	r1, r2
 800e094:	461a      	mov	r2, r3
 800e096:	460b      	mov	r3, r1
 800e098:	80fb      	strh	r3, [r7, #6]
 800e09a:	4613      	mov	r3, r2
 800e09c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e09e:	7979      	ldrb	r1, [r7, #5]
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	9303      	str	r3, [sp, #12]
 800e0a4:	88fb      	ldrh	r3, [r7, #6]
 800e0a6:	9302      	str	r3, [sp, #8]
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	9301      	str	r3, [sp, #4]
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	9300      	str	r3, [sp, #0]
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f000 fb1c 	bl	800e6f2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e0ba:	2300      	movs	r3, #0
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	3710      	adds	r7, #16
 800e0c0:	46bd      	mov	sp, r7
 800e0c2:	bd80      	pop	{r7, pc}

0800e0c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af04      	add	r7, sp, #16
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	4608      	mov	r0, r1
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	70fb      	strb	r3, [r7, #3]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	70bb      	strb	r3, [r7, #2]
 800e0da:	4613      	mov	r3, r2
 800e0dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e0de:	7878      	ldrb	r0, [r7, #1]
 800e0e0:	78ba      	ldrb	r2, [r7, #2]
 800e0e2:	78f9      	ldrb	r1, [r7, #3]
 800e0e4:	8b3b      	ldrh	r3, [r7, #24]
 800e0e6:	9302      	str	r3, [sp, #8]
 800e0e8:	7d3b      	ldrb	r3, [r7, #20]
 800e0ea:	9301      	str	r3, [sp, #4]
 800e0ec:	7c3b      	ldrb	r3, [r7, #16]
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 faaf 	bl	800e656 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e0f8:	2300      	movs	r3, #0
}
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	3708      	adds	r7, #8
 800e0fe:	46bd      	mov	sp, r7
 800e100:	bd80      	pop	{r7, pc}

0800e102 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b082      	sub	sp, #8
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
 800e10a:	460b      	mov	r3, r1
 800e10c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e10e:	78fb      	ldrb	r3, [r7, #3]
 800e110:	4619      	mov	r1, r3
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 face 	bl	800e6b4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3708      	adds	r7, #8
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b084      	sub	sp, #16
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
 800e12a:	460b      	mov	r3, r1
 800e12c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f000 f836 	bl	800e1a0 <USBH_GetFreePipe>
 800e134:	4603      	mov	r3, r0
 800e136:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e138:	89fb      	ldrh	r3, [r7, #14]
 800e13a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e13e:	4293      	cmp	r3, r2
 800e140:	d00a      	beq.n	800e158 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e142:	78fa      	ldrb	r2, [r7, #3]
 800e144:	89fb      	ldrh	r3, [r7, #14]
 800e146:	f003 030f 	and.w	r3, r3, #15
 800e14a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e14e:	6879      	ldr	r1, [r7, #4]
 800e150:	33e0      	adds	r3, #224	@ 0xe0
 800e152:	009b      	lsls	r3, r3, #2
 800e154:	440b      	add	r3, r1
 800e156:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e158:	89fb      	ldrh	r3, [r7, #14]
 800e15a:	b2db      	uxtb	r3, r3
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e164:	b480      	push	{r7}
 800e166:	b083      	sub	sp, #12
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	460b      	mov	r3, r1
 800e16e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e170:	78fb      	ldrb	r3, [r7, #3]
 800e172:	2b0f      	cmp	r3, #15
 800e174:	d80d      	bhi.n	800e192 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e176:	78fb      	ldrb	r3, [r7, #3]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	33e0      	adds	r3, #224	@ 0xe0
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4413      	add	r3, r2
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	78fb      	ldrb	r3, [r7, #3]
 800e184:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e188:	6879      	ldr	r1, [r7, #4]
 800e18a:	33e0      	adds	r3, #224	@ 0xe0
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	440b      	add	r3, r1
 800e190:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr

0800e1a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	73fb      	strb	r3, [r7, #15]
 800e1b0:	e00f      	b.n	800e1d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	33e0      	adds	r3, #224	@ 0xe0
 800e1b8:	009b      	lsls	r3, r3, #2
 800e1ba:	4413      	add	r3, r2
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d102      	bne.n	800e1cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e1c6:	7bfb      	ldrb	r3, [r7, #15]
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	e007      	b.n	800e1dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e1cc:	7bfb      	ldrb	r3, [r7, #15]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	73fb      	strb	r3, [r7, #15]
 800e1d2:	7bfb      	ldrb	r3, [r7, #15]
 800e1d4:	2b0f      	cmp	r3, #15
 800e1d6:	d9ec      	bls.n	800e1b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e1d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3714      	adds	r7, #20
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b087      	sub	sp, #28
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e1fe:	4b1f      	ldr	r3, [pc, #124]	@ (800e27c <FATFS_LinkDriverEx+0x94>)
 800e200:	7a5b      	ldrb	r3, [r3, #9]
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b00      	cmp	r3, #0
 800e206:	d131      	bne.n	800e26c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e208:	4b1c      	ldr	r3, [pc, #112]	@ (800e27c <FATFS_LinkDriverEx+0x94>)
 800e20a:	7a5b      	ldrb	r3, [r3, #9]
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	461a      	mov	r2, r3
 800e210:	4b1a      	ldr	r3, [pc, #104]	@ (800e27c <FATFS_LinkDriverEx+0x94>)
 800e212:	2100      	movs	r1, #0
 800e214:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e216:	4b19      	ldr	r3, [pc, #100]	@ (800e27c <FATFS_LinkDriverEx+0x94>)
 800e218:	7a5b      	ldrb	r3, [r3, #9]
 800e21a:	b2db      	uxtb	r3, r3
 800e21c:	4a17      	ldr	r2, [pc, #92]	@ (800e27c <FATFS_LinkDriverEx+0x94>)
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	4413      	add	r3, r2
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e226:	4b15      	ldr	r3, [pc, #84]	@ (800e27c <FATFS_LinkDriverEx+0x94>)
 800e228:	7a5b      	ldrb	r3, [r3, #9]
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	461a      	mov	r2, r3
 800e22e:	4b13      	ldr	r3, [pc, #76]	@ (800e27c <FATFS_LinkDriverEx+0x94>)
 800e230:	4413      	add	r3, r2
 800e232:	79fa      	ldrb	r2, [r7, #7]
 800e234:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e236:	4b11      	ldr	r3, [pc, #68]	@ (800e27c <FATFS_LinkDriverEx+0x94>)
 800e238:	7a5b      	ldrb	r3, [r3, #9]
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	1c5a      	adds	r2, r3, #1
 800e23e:	b2d1      	uxtb	r1, r2
 800e240:	4a0e      	ldr	r2, [pc, #56]	@ (800e27c <FATFS_LinkDriverEx+0x94>)
 800e242:	7251      	strb	r1, [r2, #9]
 800e244:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e246:	7dbb      	ldrb	r3, [r7, #22]
 800e248:	3330      	adds	r3, #48	@ 0x30
 800e24a:	b2da      	uxtb	r2, r3
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	3301      	adds	r3, #1
 800e254:	223a      	movs	r2, #58	@ 0x3a
 800e256:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	3302      	adds	r3, #2
 800e25c:	222f      	movs	r2, #47	@ 0x2f
 800e25e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	3303      	adds	r3, #3
 800e264:	2200      	movs	r2, #0
 800e266:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e268:	2300      	movs	r3, #0
 800e26a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	371c      	adds	r7, #28
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	20000574 	.word	0x20000574

0800e280 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e28a:	2200      	movs	r2, #0
 800e28c:	6839      	ldr	r1, [r7, #0]
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f7ff ffaa 	bl	800e1e8 <FATFS_LinkDriverEx>
 800e294:	4603      	mov	r3, r0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
	...

0800e2a0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	490e      	ldr	r1, [pc, #56]	@ (800e2e0 <MX_USB_HOST_Init+0x40>)
 800e2a8:	480e      	ldr	r0, [pc, #56]	@ (800e2e4 <MX_USB_HOST_Init+0x44>)
 800e2aa:	f7fe fab9 	bl	800c820 <USBH_Init>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d001      	beq.n	800e2b8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e2b4:	f7f3 f8f2 	bl	800149c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e2b8:	490b      	ldr	r1, [pc, #44]	@ (800e2e8 <MX_USB_HOST_Init+0x48>)
 800e2ba:	480a      	ldr	r0, [pc, #40]	@ (800e2e4 <MX_USB_HOST_Init+0x44>)
 800e2bc:	f7fe fb5d 	bl	800c97a <USBH_RegisterClass>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e2c6:	f7f3 f8e9 	bl	800149c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e2ca:	4806      	ldr	r0, [pc, #24]	@ (800e2e4 <MX_USB_HOST_Init+0x44>)
 800e2cc:	f7fe fbe1 	bl	800ca92 <USBH_Start>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d001      	beq.n	800e2da <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e2d6:	f7f3 f8e1 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e2da:	bf00      	nop
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	0800e301 	.word	0x0800e301
 800e2e4:	20000580 	.word	0x20000580
 800e2e8:	2000000c 	.word	0x2000000c

0800e2ec <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e2f0:	4802      	ldr	r0, [pc, #8]	@ (800e2fc <MX_USB_HOST_Process+0x10>)
 800e2f2:	f7fe fbdf 	bl	800cab4 <USBH_Process>
}
 800e2f6:	bf00      	nop
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	20000580 	.word	0x20000580

0800e300 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	460b      	mov	r3, r1
 800e30a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e30c:	78fb      	ldrb	r3, [r7, #3]
 800e30e:	3b01      	subs	r3, #1
 800e310:	2b04      	cmp	r3, #4
 800e312:	d819      	bhi.n	800e348 <USBH_UserProcess+0x48>
 800e314:	a201      	add	r2, pc, #4	@ (adr r2, 800e31c <USBH_UserProcess+0x1c>)
 800e316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e31a:	bf00      	nop
 800e31c:	0800e349 	.word	0x0800e349
 800e320:	0800e339 	.word	0x0800e339
 800e324:	0800e349 	.word	0x0800e349
 800e328:	0800e341 	.word	0x0800e341
 800e32c:	0800e331 	.word	0x0800e331
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e330:	4b09      	ldr	r3, [pc, #36]	@ (800e358 <USBH_UserProcess+0x58>)
 800e332:	2203      	movs	r2, #3
 800e334:	701a      	strb	r2, [r3, #0]
  break;
 800e336:	e008      	b.n	800e34a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e338:	4b07      	ldr	r3, [pc, #28]	@ (800e358 <USBH_UserProcess+0x58>)
 800e33a:	2202      	movs	r2, #2
 800e33c:	701a      	strb	r2, [r3, #0]
  break;
 800e33e:	e004      	b.n	800e34a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e340:	4b05      	ldr	r3, [pc, #20]	@ (800e358 <USBH_UserProcess+0x58>)
 800e342:	2201      	movs	r2, #1
 800e344:	701a      	strb	r2, [r3, #0]
  break;
 800e346:	e000      	b.n	800e34a <USBH_UserProcess+0x4a>

  default:
  break;
 800e348:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e34a:	bf00      	nop
 800e34c:	370c      	adds	r7, #12
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr
 800e356:	bf00      	nop
 800e358:	20000958 	.word	0x20000958

0800e35c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08a      	sub	sp, #40	@ 0x28
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e364:	f107 0314 	add.w	r3, r7, #20
 800e368:	2200      	movs	r2, #0
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	605a      	str	r2, [r3, #4]
 800e36e:	609a      	str	r2, [r3, #8]
 800e370:	60da      	str	r2, [r3, #12]
 800e372:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e37c:	d147      	bne.n	800e40e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e37e:	2300      	movs	r3, #0
 800e380:	613b      	str	r3, [r7, #16]
 800e382:	4b25      	ldr	r3, [pc, #148]	@ (800e418 <HAL_HCD_MspInit+0xbc>)
 800e384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e386:	4a24      	ldr	r2, [pc, #144]	@ (800e418 <HAL_HCD_MspInit+0xbc>)
 800e388:	f043 0301 	orr.w	r3, r3, #1
 800e38c:	6313      	str	r3, [r2, #48]	@ 0x30
 800e38e:	4b22      	ldr	r3, [pc, #136]	@ (800e418 <HAL_HCD_MspInit+0xbc>)
 800e390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e392:	f003 0301 	and.w	r3, r3, #1
 800e396:	613b      	str	r3, [r7, #16]
 800e398:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800e39a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800e39e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e3a8:	2303      	movs	r3, #3
 800e3aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e3ac:	230a      	movs	r3, #10
 800e3ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3b0:	f107 0314 	add.w	r3, r7, #20
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	4819      	ldr	r0, [pc, #100]	@ (800e41c <HAL_HCD_MspInit+0xc0>)
 800e3b8:	f7f4 ffee 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 800e3bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e3c2:	2302      	movs	r3, #2
 800e3c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800e3ca:	f107 0314 	add.w	r3, r7, #20
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	4812      	ldr	r0, [pc, #72]	@ (800e41c <HAL_HCD_MspInit+0xc0>)
 800e3d2:	f7f4 ffe1 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e3d6:	4b10      	ldr	r3, [pc, #64]	@ (800e418 <HAL_HCD_MspInit+0xbc>)
 800e3d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3da:	4a0f      	ldr	r2, [pc, #60]	@ (800e418 <HAL_HCD_MspInit+0xbc>)
 800e3dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3e0:	6353      	str	r3, [r2, #52]	@ 0x34
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	60fb      	str	r3, [r7, #12]
 800e3e6:	4b0c      	ldr	r3, [pc, #48]	@ (800e418 <HAL_HCD_MspInit+0xbc>)
 800e3e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3ea:	4a0b      	ldr	r2, [pc, #44]	@ (800e418 <HAL_HCD_MspInit+0xbc>)
 800e3ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e3f0:	6453      	str	r3, [r2, #68]	@ 0x44
 800e3f2:	4b09      	ldr	r3, [pc, #36]	@ (800e418 <HAL_HCD_MspInit+0xbc>)
 800e3f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e3fa:	60fb      	str	r3, [r7, #12]
 800e3fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e3fe:	2200      	movs	r2, #0
 800e400:	2100      	movs	r1, #0
 800e402:	2043      	movs	r0, #67	@ 0x43
 800e404:	f7f3 ff8e 	bl	8002324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e408:	2043      	movs	r0, #67	@ 0x43
 800e40a:	f7f3 ffa7 	bl	800235c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e40e:	bf00      	nop
 800e410:	3728      	adds	r7, #40	@ 0x28
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	40023800 	.word	0x40023800
 800e41c:	40020000 	.word	0x40020000

0800e420 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe ff17 	bl	800d262 <USBH_LL_IncTimer>
}
 800e434:	bf00      	nop
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e44a:	4618      	mov	r0, r3
 800e44c:	f7fe ff4f 	bl	800d2ee <USBH_LL_Connect>
}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e466:	4618      	mov	r0, r3
 800e468:	f7fe ff58 	bl	800d31c <USBH_LL_Disconnect>
}
 800e46c:	bf00      	nop
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	460b      	mov	r3, r1
 800e47e:	70fb      	strb	r3, [r7, #3]
 800e480:	4613      	mov	r3, r2
 800e482:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e484:	bf00      	nop
 800e486:	370c      	adds	r7, #12
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fe ff09 	bl	800d2b6 <USBH_LL_PortEnabled>
}
 800e4a4:	bf00      	nop
 800e4a6:	3708      	adds	r7, #8
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}

0800e4ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe ff09 	bl	800d2d2 <USBH_LL_PortDisabled>
}
 800e4c0:	bf00      	nop
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d12a      	bne.n	800e530 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e4da:	4a18      	ldr	r2, [pc, #96]	@ (800e53c <USBH_LL_Init+0x74>)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4a15      	ldr	r2, [pc, #84]	@ (800e53c <USBH_LL_Init+0x74>)
 800e4e6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e4ea:	4b14      	ldr	r3, [pc, #80]	@ (800e53c <USBH_LL_Init+0x74>)
 800e4ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e4f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e4f2:	4b12      	ldr	r3, [pc, #72]	@ (800e53c <USBH_LL_Init+0x74>)
 800e4f4:	2208      	movs	r2, #8
 800e4f6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e4f8:	4b10      	ldr	r3, [pc, #64]	@ (800e53c <USBH_LL_Init+0x74>)
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e4fe:	4b0f      	ldr	r3, [pc, #60]	@ (800e53c <USBH_LL_Init+0x74>)
 800e500:	2200      	movs	r2, #0
 800e502:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e504:	4b0d      	ldr	r3, [pc, #52]	@ (800e53c <USBH_LL_Init+0x74>)
 800e506:	2202      	movs	r2, #2
 800e508:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e50a:	4b0c      	ldr	r3, [pc, #48]	@ (800e53c <USBH_LL_Init+0x74>)
 800e50c:	2200      	movs	r2, #0
 800e50e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e510:	480a      	ldr	r0, [pc, #40]	@ (800e53c <USBH_LL_Init+0x74>)
 800e512:	f7f5 f91e 	bl	8003752 <HAL_HCD_Init>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e51c:	f7f2 ffbe 	bl	800149c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e520:	4806      	ldr	r0, [pc, #24]	@ (800e53c <USBH_LL_Init+0x74>)
 800e522:	f7f5 fd7f 	bl	8004024 <HAL_HCD_GetCurrentFrame>
 800e526:	4603      	mov	r3, r0
 800e528:	4619      	mov	r1, r3
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7fe fe8a 	bl	800d244 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e530:	2300      	movs	r3, #0
}
 800e532:	4618      	mov	r0, r3
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	2000095c 	.word	0x2000095c

0800e540 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b084      	sub	sp, #16
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e548:	2300      	movs	r3, #0
 800e54a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e54c:	2300      	movs	r3, #0
 800e54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e556:	4618      	mov	r0, r3
 800e558:	f7f5 fcec 	bl	8003f34 <HAL_HCD_Start>
 800e55c:	4603      	mov	r3, r0
 800e55e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e560:	7bfb      	ldrb	r3, [r7, #15]
 800e562:	4618      	mov	r0, r3
 800e564:	f000 f95e 	bl	800e824 <USBH_Get_USB_Status>
 800e568:	4603      	mov	r3, r0
 800e56a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e56c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e56e:	4618      	mov	r0, r3
 800e570:	3710      	adds	r7, #16
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}

0800e576 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b084      	sub	sp, #16
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e57e:	2300      	movs	r3, #0
 800e580:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e582:	2300      	movs	r3, #0
 800e584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7f5 fcf4 	bl	8003f7a <HAL_HCD_Stop>
 800e592:	4603      	mov	r3, r0
 800e594:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e596:	7bfb      	ldrb	r3, [r7, #15]
 800e598:	4618      	mov	r0, r3
 800e59a:	f000 f943 	bl	800e824 <USBH_Get_USB_Status>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3710      	adds	r7, #16
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7f5 fd3e 	bl	8004040 <HAL_HCD_GetCurrentSpeed>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d00c      	beq.n	800e5e4 <USBH_LL_GetSpeed+0x38>
 800e5ca:	2b02      	cmp	r3, #2
 800e5cc:	d80d      	bhi.n	800e5ea <USBH_LL_GetSpeed+0x3e>
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d002      	beq.n	800e5d8 <USBH_LL_GetSpeed+0x2c>
 800e5d2:	2b01      	cmp	r3, #1
 800e5d4:	d003      	beq.n	800e5de <USBH_LL_GetSpeed+0x32>
 800e5d6:	e008      	b.n	800e5ea <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	73fb      	strb	r3, [r7, #15]
    break;
 800e5dc:	e008      	b.n	800e5f0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800e5e2:	e005      	b.n	800e5f0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e5e8:	e002      	b.n	800e5f0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ee:	bf00      	nop
  }
  return  speed;
 800e5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3710      	adds	r7, #16
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b084      	sub	sp, #16
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e602:	2300      	movs	r3, #0
 800e604:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e606:	2300      	movs	r3, #0
 800e608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e610:	4618      	mov	r0, r3
 800e612:	f7f5 fccf 	bl	8003fb4 <HAL_HCD_ResetPort>
 800e616:	4603      	mov	r3, r0
 800e618:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e61a:	7bfb      	ldrb	r3, [r7, #15]
 800e61c:	4618      	mov	r0, r3
 800e61e:	f000 f901 	bl	800e824 <USBH_Get_USB_Status>
 800e622:	4603      	mov	r3, r0
 800e624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e626:	7bbb      	ldrb	r3, [r7, #14]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3710      	adds	r7, #16
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	460b      	mov	r3, r1
 800e63a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e642:	78fa      	ldrb	r2, [r7, #3]
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f7f5 fcd7 	bl	8003ffa <HAL_HCD_HC_GetXferCount>
 800e64c:	4603      	mov	r3, r0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}

0800e656 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e656:	b590      	push	{r4, r7, lr}
 800e658:	b089      	sub	sp, #36	@ 0x24
 800e65a:	af04      	add	r7, sp, #16
 800e65c:	6078      	str	r0, [r7, #4]
 800e65e:	4608      	mov	r0, r1
 800e660:	4611      	mov	r1, r2
 800e662:	461a      	mov	r2, r3
 800e664:	4603      	mov	r3, r0
 800e666:	70fb      	strb	r3, [r7, #3]
 800e668:	460b      	mov	r3, r1
 800e66a:	70bb      	strb	r3, [r7, #2]
 800e66c:	4613      	mov	r3, r2
 800e66e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e670:	2300      	movs	r3, #0
 800e672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800e67e:	787c      	ldrb	r4, [r7, #1]
 800e680:	78ba      	ldrb	r2, [r7, #2]
 800e682:	78f9      	ldrb	r1, [r7, #3]
 800e684:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e686:	9302      	str	r3, [sp, #8]
 800e688:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e68c:	9301      	str	r3, [sp, #4]
 800e68e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	4623      	mov	r3, r4
 800e696:	f7f5 f8c3 	bl	8003820 <HAL_HCD_HC_Init>
 800e69a:	4603      	mov	r3, r0
 800e69c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e69e:	7bfb      	ldrb	r3, [r7, #15]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f000 f8bf 	bl	800e824 <USBH_Get_USB_Status>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3714      	adds	r7, #20
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd90      	pop	{r4, r7, pc}

0800e6b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	460b      	mov	r3, r1
 800e6be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e6ce:	78fa      	ldrb	r2, [r7, #3]
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7f5 f95c 	bl	8003990 <HAL_HCD_HC_Halt>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6dc:	7bfb      	ldrb	r3, [r7, #15]
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f000 f8a0 	bl	800e824 <USBH_Get_USB_Status>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e6f2:	b590      	push	{r4, r7, lr}
 800e6f4:	b089      	sub	sp, #36	@ 0x24
 800e6f6:	af04      	add	r7, sp, #16
 800e6f8:	6078      	str	r0, [r7, #4]
 800e6fa:	4608      	mov	r0, r1
 800e6fc:	4611      	mov	r1, r2
 800e6fe:	461a      	mov	r2, r3
 800e700:	4603      	mov	r3, r0
 800e702:	70fb      	strb	r3, [r7, #3]
 800e704:	460b      	mov	r3, r1
 800e706:	70bb      	strb	r3, [r7, #2]
 800e708:	4613      	mov	r3, r2
 800e70a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e70c:	2300      	movs	r3, #0
 800e70e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e710:	2300      	movs	r3, #0
 800e712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800e71a:	787c      	ldrb	r4, [r7, #1]
 800e71c:	78ba      	ldrb	r2, [r7, #2]
 800e71e:	78f9      	ldrb	r1, [r7, #3]
 800e720:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e724:	9303      	str	r3, [sp, #12]
 800e726:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e728:	9302      	str	r3, [sp, #8]
 800e72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e72c:	9301      	str	r3, [sp, #4]
 800e72e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e732:	9300      	str	r3, [sp, #0]
 800e734:	4623      	mov	r3, r4
 800e736:	f7f5 f94f 	bl	80039d8 <HAL_HCD_HC_SubmitRequest>
 800e73a:	4603      	mov	r3, r0
 800e73c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
 800e740:	4618      	mov	r0, r3
 800e742:	f000 f86f 	bl	800e824 <USBH_Get_USB_Status>
 800e746:	4603      	mov	r3, r0
 800e748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e74a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3714      	adds	r7, #20
 800e750:	46bd      	mov	sp, r7
 800e752:	bd90      	pop	{r4, r7, pc}

0800e754 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	460b      	mov	r3, r1
 800e75e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e766:	78fa      	ldrb	r2, [r7, #3]
 800e768:	4611      	mov	r1, r2
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7f5 fc30 	bl	8003fd0 <HAL_HCD_HC_GetURBState>
 800e770:	4603      	mov	r3, r0
}
 800e772:	4618      	mov	r0, r3
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b082      	sub	sp, #8
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
 800e782:	460b      	mov	r3, r1
 800e784:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d103      	bne.n	800e798 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e790:	78fb      	ldrb	r3, [r7, #3]
 800e792:	4618      	mov	r0, r3
 800e794:	f000 f872 	bl	800e87c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e798:	20c8      	movs	r0, #200	@ 0xc8
 800e79a:	f7f3 fce7 	bl	800216c <HAL_Delay>
  return USBH_OK;
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b085      	sub	sp, #20
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	70fb      	strb	r3, [r7, #3]
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e7be:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e7c0:	78fa      	ldrb	r2, [r7, #3]
 800e7c2:	68f9      	ldr	r1, [r7, #12]
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	011b      	lsls	r3, r3, #4
 800e7c8:	1a9b      	subs	r3, r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	440b      	add	r3, r1
 800e7ce:	3317      	adds	r3, #23
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00a      	beq.n	800e7ec <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e7d6:	78fa      	ldrb	r2, [r7, #3]
 800e7d8:	68f9      	ldr	r1, [r7, #12]
 800e7da:	4613      	mov	r3, r2
 800e7dc:	011b      	lsls	r3, r3, #4
 800e7de:	1a9b      	subs	r3, r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	440b      	add	r3, r1
 800e7e4:	333c      	adds	r3, #60	@ 0x3c
 800e7e6:	78ba      	ldrb	r2, [r7, #2]
 800e7e8:	701a      	strb	r2, [r3, #0]
 800e7ea:	e009      	b.n	800e800 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e7ec:	78fa      	ldrb	r2, [r7, #3]
 800e7ee:	68f9      	ldr	r1, [r7, #12]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	011b      	lsls	r3, r3, #4
 800e7f4:	1a9b      	subs	r3, r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	440b      	add	r3, r1
 800e7fa:	333d      	adds	r3, #61	@ 0x3d
 800e7fc:	78ba      	ldrb	r2, [r7, #2]
 800e7fe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e800:	2300      	movs	r3, #0
}
 800e802:	4618      	mov	r0, r3
 800e804:	3714      	adds	r7, #20
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr

0800e80e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e80e:	b580      	push	{r7, lr}
 800e810:	b082      	sub	sp, #8
 800e812:	af00      	add	r7, sp, #0
 800e814:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7f3 fca8 	bl	800216c <HAL_Delay>
}
 800e81c:	bf00      	nop
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e824:	b480      	push	{r7}
 800e826:	b085      	sub	sp, #20
 800e828:	af00      	add	r7, sp, #0
 800e82a:	4603      	mov	r3, r0
 800e82c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e82e:	2300      	movs	r3, #0
 800e830:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e832:	79fb      	ldrb	r3, [r7, #7]
 800e834:	2b03      	cmp	r3, #3
 800e836:	d817      	bhi.n	800e868 <USBH_Get_USB_Status+0x44>
 800e838:	a201      	add	r2, pc, #4	@ (adr r2, 800e840 <USBH_Get_USB_Status+0x1c>)
 800e83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e83e:	bf00      	nop
 800e840:	0800e851 	.word	0x0800e851
 800e844:	0800e857 	.word	0x0800e857
 800e848:	0800e85d 	.word	0x0800e85d
 800e84c:	0800e863 	.word	0x0800e863
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e850:	2300      	movs	r3, #0
 800e852:	73fb      	strb	r3, [r7, #15]
    break;
 800e854:	e00b      	b.n	800e86e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e856:	2302      	movs	r3, #2
 800e858:	73fb      	strb	r3, [r7, #15]
    break;
 800e85a:	e008      	b.n	800e86e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e85c:	2301      	movs	r3, #1
 800e85e:	73fb      	strb	r3, [r7, #15]
    break;
 800e860:	e005      	b.n	800e86e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e862:	2302      	movs	r3, #2
 800e864:	73fb      	strb	r3, [r7, #15]
    break;
 800e866:	e002      	b.n	800e86e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e868:	2302      	movs	r3, #2
 800e86a:	73fb      	strb	r3, [r7, #15]
    break;
 800e86c:	bf00      	nop
  }
  return usb_status;
 800e86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e870:	4618      	mov	r0, r3
 800e872:	3714      	adds	r7, #20
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	4603      	mov	r3, r0
 800e884:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e88a:	79fb      	ldrb	r3, [r7, #7]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d102      	bne.n	800e896 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e890:	2300      	movs	r3, #0
 800e892:	73fb      	strb	r3, [r7, #15]
 800e894:	e001      	b.n	800e89a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e896:	2301      	movs	r3, #1
 800e898:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 800e89a:	7bfb      	ldrb	r3, [r7, #15]
 800e89c:	461a      	mov	r2, r3
 800e89e:	2104      	movs	r1, #4
 800e8a0:	4803      	ldr	r0, [pc, #12]	@ (800e8b0 <MX_DriverVbusFS+0x34>)
 800e8a2:	f7f4 ff3d 	bl	8003720 <HAL_GPIO_WritePin>
}
 800e8a6:	bf00      	nop
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	40020400 	.word	0x40020400

0800e8b4 <malloc>:
 800e8b4:	4b02      	ldr	r3, [pc, #8]	@ (800e8c0 <malloc+0xc>)
 800e8b6:	4601      	mov	r1, r0
 800e8b8:	6818      	ldr	r0, [r3, #0]
 800e8ba:	f000 b82d 	b.w	800e918 <_malloc_r>
 800e8be:	bf00      	nop
 800e8c0:	20000038 	.word	0x20000038

0800e8c4 <free>:
 800e8c4:	4b02      	ldr	r3, [pc, #8]	@ (800e8d0 <free+0xc>)
 800e8c6:	4601      	mov	r1, r0
 800e8c8:	6818      	ldr	r0, [r3, #0]
 800e8ca:	f000 ba9f 	b.w	800ee0c <_free_r>
 800e8ce:	bf00      	nop
 800e8d0:	20000038 	.word	0x20000038

0800e8d4 <sbrk_aligned>:
 800e8d4:	b570      	push	{r4, r5, r6, lr}
 800e8d6:	4e0f      	ldr	r6, [pc, #60]	@ (800e914 <sbrk_aligned+0x40>)
 800e8d8:	460c      	mov	r4, r1
 800e8da:	6831      	ldr	r1, [r6, #0]
 800e8dc:	4605      	mov	r5, r0
 800e8de:	b911      	cbnz	r1, 800e8e6 <sbrk_aligned+0x12>
 800e8e0:	f000 fa44 	bl	800ed6c <_sbrk_r>
 800e8e4:	6030      	str	r0, [r6, #0]
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	f000 fa3f 	bl	800ed6c <_sbrk_r>
 800e8ee:	1c43      	adds	r3, r0, #1
 800e8f0:	d103      	bne.n	800e8fa <sbrk_aligned+0x26>
 800e8f2:	f04f 34ff 	mov.w	r4, #4294967295
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	bd70      	pop	{r4, r5, r6, pc}
 800e8fa:	1cc4      	adds	r4, r0, #3
 800e8fc:	f024 0403 	bic.w	r4, r4, #3
 800e900:	42a0      	cmp	r0, r4
 800e902:	d0f8      	beq.n	800e8f6 <sbrk_aligned+0x22>
 800e904:	1a21      	subs	r1, r4, r0
 800e906:	4628      	mov	r0, r5
 800e908:	f000 fa30 	bl	800ed6c <_sbrk_r>
 800e90c:	3001      	adds	r0, #1
 800e90e:	d1f2      	bne.n	800e8f6 <sbrk_aligned+0x22>
 800e910:	e7ef      	b.n	800e8f2 <sbrk_aligned+0x1e>
 800e912:	bf00      	nop
 800e914:	20000d3c 	.word	0x20000d3c

0800e918 <_malloc_r>:
 800e918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e91c:	1ccd      	adds	r5, r1, #3
 800e91e:	f025 0503 	bic.w	r5, r5, #3
 800e922:	3508      	adds	r5, #8
 800e924:	2d0c      	cmp	r5, #12
 800e926:	bf38      	it	cc
 800e928:	250c      	movcc	r5, #12
 800e92a:	2d00      	cmp	r5, #0
 800e92c:	4606      	mov	r6, r0
 800e92e:	db01      	blt.n	800e934 <_malloc_r+0x1c>
 800e930:	42a9      	cmp	r1, r5
 800e932:	d904      	bls.n	800e93e <_malloc_r+0x26>
 800e934:	230c      	movs	r3, #12
 800e936:	6033      	str	r3, [r6, #0]
 800e938:	2000      	movs	r0, #0
 800e93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e93e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea14 <_malloc_r+0xfc>
 800e942:	f000 f869 	bl	800ea18 <__malloc_lock>
 800e946:	f8d8 3000 	ldr.w	r3, [r8]
 800e94a:	461c      	mov	r4, r3
 800e94c:	bb44      	cbnz	r4, 800e9a0 <_malloc_r+0x88>
 800e94e:	4629      	mov	r1, r5
 800e950:	4630      	mov	r0, r6
 800e952:	f7ff ffbf 	bl	800e8d4 <sbrk_aligned>
 800e956:	1c43      	adds	r3, r0, #1
 800e958:	4604      	mov	r4, r0
 800e95a:	d158      	bne.n	800ea0e <_malloc_r+0xf6>
 800e95c:	f8d8 4000 	ldr.w	r4, [r8]
 800e960:	4627      	mov	r7, r4
 800e962:	2f00      	cmp	r7, #0
 800e964:	d143      	bne.n	800e9ee <_malloc_r+0xd6>
 800e966:	2c00      	cmp	r4, #0
 800e968:	d04b      	beq.n	800ea02 <_malloc_r+0xea>
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	4639      	mov	r1, r7
 800e96e:	4630      	mov	r0, r6
 800e970:	eb04 0903 	add.w	r9, r4, r3
 800e974:	f000 f9fa 	bl	800ed6c <_sbrk_r>
 800e978:	4581      	cmp	r9, r0
 800e97a:	d142      	bne.n	800ea02 <_malloc_r+0xea>
 800e97c:	6821      	ldr	r1, [r4, #0]
 800e97e:	1a6d      	subs	r5, r5, r1
 800e980:	4629      	mov	r1, r5
 800e982:	4630      	mov	r0, r6
 800e984:	f7ff ffa6 	bl	800e8d4 <sbrk_aligned>
 800e988:	3001      	adds	r0, #1
 800e98a:	d03a      	beq.n	800ea02 <_malloc_r+0xea>
 800e98c:	6823      	ldr	r3, [r4, #0]
 800e98e:	442b      	add	r3, r5
 800e990:	6023      	str	r3, [r4, #0]
 800e992:	f8d8 3000 	ldr.w	r3, [r8]
 800e996:	685a      	ldr	r2, [r3, #4]
 800e998:	bb62      	cbnz	r2, 800e9f4 <_malloc_r+0xdc>
 800e99a:	f8c8 7000 	str.w	r7, [r8]
 800e99e:	e00f      	b.n	800e9c0 <_malloc_r+0xa8>
 800e9a0:	6822      	ldr	r2, [r4, #0]
 800e9a2:	1b52      	subs	r2, r2, r5
 800e9a4:	d420      	bmi.n	800e9e8 <_malloc_r+0xd0>
 800e9a6:	2a0b      	cmp	r2, #11
 800e9a8:	d917      	bls.n	800e9da <_malloc_r+0xc2>
 800e9aa:	1961      	adds	r1, r4, r5
 800e9ac:	42a3      	cmp	r3, r4
 800e9ae:	6025      	str	r5, [r4, #0]
 800e9b0:	bf18      	it	ne
 800e9b2:	6059      	strne	r1, [r3, #4]
 800e9b4:	6863      	ldr	r3, [r4, #4]
 800e9b6:	bf08      	it	eq
 800e9b8:	f8c8 1000 	streq.w	r1, [r8]
 800e9bc:	5162      	str	r2, [r4, r5]
 800e9be:	604b      	str	r3, [r1, #4]
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	f000 f82f 	bl	800ea24 <__malloc_unlock>
 800e9c6:	f104 000b 	add.w	r0, r4, #11
 800e9ca:	1d23      	adds	r3, r4, #4
 800e9cc:	f020 0007 	bic.w	r0, r0, #7
 800e9d0:	1ac2      	subs	r2, r0, r3
 800e9d2:	bf1c      	itt	ne
 800e9d4:	1a1b      	subne	r3, r3, r0
 800e9d6:	50a3      	strne	r3, [r4, r2]
 800e9d8:	e7af      	b.n	800e93a <_malloc_r+0x22>
 800e9da:	6862      	ldr	r2, [r4, #4]
 800e9dc:	42a3      	cmp	r3, r4
 800e9de:	bf0c      	ite	eq
 800e9e0:	f8c8 2000 	streq.w	r2, [r8]
 800e9e4:	605a      	strne	r2, [r3, #4]
 800e9e6:	e7eb      	b.n	800e9c0 <_malloc_r+0xa8>
 800e9e8:	4623      	mov	r3, r4
 800e9ea:	6864      	ldr	r4, [r4, #4]
 800e9ec:	e7ae      	b.n	800e94c <_malloc_r+0x34>
 800e9ee:	463c      	mov	r4, r7
 800e9f0:	687f      	ldr	r7, [r7, #4]
 800e9f2:	e7b6      	b.n	800e962 <_malloc_r+0x4a>
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	42a3      	cmp	r3, r4
 800e9fa:	d1fb      	bne.n	800e9f4 <_malloc_r+0xdc>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	6053      	str	r3, [r2, #4]
 800ea00:	e7de      	b.n	800e9c0 <_malloc_r+0xa8>
 800ea02:	230c      	movs	r3, #12
 800ea04:	6033      	str	r3, [r6, #0]
 800ea06:	4630      	mov	r0, r6
 800ea08:	f000 f80c 	bl	800ea24 <__malloc_unlock>
 800ea0c:	e794      	b.n	800e938 <_malloc_r+0x20>
 800ea0e:	6005      	str	r5, [r0, #0]
 800ea10:	e7d6      	b.n	800e9c0 <_malloc_r+0xa8>
 800ea12:	bf00      	nop
 800ea14:	20000d40 	.word	0x20000d40

0800ea18 <__malloc_lock>:
 800ea18:	4801      	ldr	r0, [pc, #4]	@ (800ea20 <__malloc_lock+0x8>)
 800ea1a:	f000 b9f4 	b.w	800ee06 <__retarget_lock_acquire_recursive>
 800ea1e:	bf00      	nop
 800ea20:	20000e84 	.word	0x20000e84

0800ea24 <__malloc_unlock>:
 800ea24:	4801      	ldr	r0, [pc, #4]	@ (800ea2c <__malloc_unlock+0x8>)
 800ea26:	f000 b9ef 	b.w	800ee08 <__retarget_lock_release_recursive>
 800ea2a:	bf00      	nop
 800ea2c:	20000e84 	.word	0x20000e84

0800ea30 <std>:
 800ea30:	2300      	movs	r3, #0
 800ea32:	b510      	push	{r4, lr}
 800ea34:	4604      	mov	r4, r0
 800ea36:	e9c0 3300 	strd	r3, r3, [r0]
 800ea3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea3e:	6083      	str	r3, [r0, #8]
 800ea40:	8181      	strh	r1, [r0, #12]
 800ea42:	6643      	str	r3, [r0, #100]	@ 0x64
 800ea44:	81c2      	strh	r2, [r0, #14]
 800ea46:	6183      	str	r3, [r0, #24]
 800ea48:	4619      	mov	r1, r3
 800ea4a:	2208      	movs	r2, #8
 800ea4c:	305c      	adds	r0, #92	@ 0x5c
 800ea4e:	f000 f93a 	bl	800ecc6 <memset>
 800ea52:	4b0d      	ldr	r3, [pc, #52]	@ (800ea88 <std+0x58>)
 800ea54:	6263      	str	r3, [r4, #36]	@ 0x24
 800ea56:	4b0d      	ldr	r3, [pc, #52]	@ (800ea8c <std+0x5c>)
 800ea58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ea5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea90 <std+0x60>)
 800ea5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ea5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea94 <std+0x64>)
 800ea60:	6323      	str	r3, [r4, #48]	@ 0x30
 800ea62:	4b0d      	ldr	r3, [pc, #52]	@ (800ea98 <std+0x68>)
 800ea64:	6224      	str	r4, [r4, #32]
 800ea66:	429c      	cmp	r4, r3
 800ea68:	d006      	beq.n	800ea78 <std+0x48>
 800ea6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ea6e:	4294      	cmp	r4, r2
 800ea70:	d002      	beq.n	800ea78 <std+0x48>
 800ea72:	33d0      	adds	r3, #208	@ 0xd0
 800ea74:	429c      	cmp	r4, r3
 800ea76:	d105      	bne.n	800ea84 <std+0x54>
 800ea78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ea7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea80:	f000 b9c0 	b.w	800ee04 <__retarget_lock_init_recursive>
 800ea84:	bd10      	pop	{r4, pc}
 800ea86:	bf00      	nop
 800ea88:	0800ec41 	.word	0x0800ec41
 800ea8c:	0800ec63 	.word	0x0800ec63
 800ea90:	0800ec9b 	.word	0x0800ec9b
 800ea94:	0800ecbf 	.word	0x0800ecbf
 800ea98:	20000d44 	.word	0x20000d44

0800ea9c <stdio_exit_handler>:
 800ea9c:	4a02      	ldr	r2, [pc, #8]	@ (800eaa8 <stdio_exit_handler+0xc>)
 800ea9e:	4903      	ldr	r1, [pc, #12]	@ (800eaac <stdio_exit_handler+0x10>)
 800eaa0:	4803      	ldr	r0, [pc, #12]	@ (800eab0 <stdio_exit_handler+0x14>)
 800eaa2:	f000 b869 	b.w	800eb78 <_fwalk_sglue>
 800eaa6:	bf00      	nop
 800eaa8:	2000002c 	.word	0x2000002c
 800eaac:	0800f7f9 	.word	0x0800f7f9
 800eab0:	2000003c 	.word	0x2000003c

0800eab4 <cleanup_stdio>:
 800eab4:	6841      	ldr	r1, [r0, #4]
 800eab6:	4b0c      	ldr	r3, [pc, #48]	@ (800eae8 <cleanup_stdio+0x34>)
 800eab8:	4299      	cmp	r1, r3
 800eaba:	b510      	push	{r4, lr}
 800eabc:	4604      	mov	r4, r0
 800eabe:	d001      	beq.n	800eac4 <cleanup_stdio+0x10>
 800eac0:	f000 fe9a 	bl	800f7f8 <_fflush_r>
 800eac4:	68a1      	ldr	r1, [r4, #8]
 800eac6:	4b09      	ldr	r3, [pc, #36]	@ (800eaec <cleanup_stdio+0x38>)
 800eac8:	4299      	cmp	r1, r3
 800eaca:	d002      	beq.n	800ead2 <cleanup_stdio+0x1e>
 800eacc:	4620      	mov	r0, r4
 800eace:	f000 fe93 	bl	800f7f8 <_fflush_r>
 800ead2:	68e1      	ldr	r1, [r4, #12]
 800ead4:	4b06      	ldr	r3, [pc, #24]	@ (800eaf0 <cleanup_stdio+0x3c>)
 800ead6:	4299      	cmp	r1, r3
 800ead8:	d004      	beq.n	800eae4 <cleanup_stdio+0x30>
 800eada:	4620      	mov	r0, r4
 800eadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eae0:	f000 be8a 	b.w	800f7f8 <_fflush_r>
 800eae4:	bd10      	pop	{r4, pc}
 800eae6:	bf00      	nop
 800eae8:	20000d44 	.word	0x20000d44
 800eaec:	20000dac 	.word	0x20000dac
 800eaf0:	20000e14 	.word	0x20000e14

0800eaf4 <global_stdio_init.part.0>:
 800eaf4:	b510      	push	{r4, lr}
 800eaf6:	4b0b      	ldr	r3, [pc, #44]	@ (800eb24 <global_stdio_init.part.0+0x30>)
 800eaf8:	4c0b      	ldr	r4, [pc, #44]	@ (800eb28 <global_stdio_init.part.0+0x34>)
 800eafa:	4a0c      	ldr	r2, [pc, #48]	@ (800eb2c <global_stdio_init.part.0+0x38>)
 800eafc:	601a      	str	r2, [r3, #0]
 800eafe:	4620      	mov	r0, r4
 800eb00:	2200      	movs	r2, #0
 800eb02:	2104      	movs	r1, #4
 800eb04:	f7ff ff94 	bl	800ea30 <std>
 800eb08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	2109      	movs	r1, #9
 800eb10:	f7ff ff8e 	bl	800ea30 <std>
 800eb14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eb18:	2202      	movs	r2, #2
 800eb1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb1e:	2112      	movs	r1, #18
 800eb20:	f7ff bf86 	b.w	800ea30 <std>
 800eb24:	20000e7c 	.word	0x20000e7c
 800eb28:	20000d44 	.word	0x20000d44
 800eb2c:	0800ea9d 	.word	0x0800ea9d

0800eb30 <__sfp_lock_acquire>:
 800eb30:	4801      	ldr	r0, [pc, #4]	@ (800eb38 <__sfp_lock_acquire+0x8>)
 800eb32:	f000 b968 	b.w	800ee06 <__retarget_lock_acquire_recursive>
 800eb36:	bf00      	nop
 800eb38:	20000e85 	.word	0x20000e85

0800eb3c <__sfp_lock_release>:
 800eb3c:	4801      	ldr	r0, [pc, #4]	@ (800eb44 <__sfp_lock_release+0x8>)
 800eb3e:	f000 b963 	b.w	800ee08 <__retarget_lock_release_recursive>
 800eb42:	bf00      	nop
 800eb44:	20000e85 	.word	0x20000e85

0800eb48 <__sinit>:
 800eb48:	b510      	push	{r4, lr}
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	f7ff fff0 	bl	800eb30 <__sfp_lock_acquire>
 800eb50:	6a23      	ldr	r3, [r4, #32]
 800eb52:	b11b      	cbz	r3, 800eb5c <__sinit+0x14>
 800eb54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb58:	f7ff bff0 	b.w	800eb3c <__sfp_lock_release>
 800eb5c:	4b04      	ldr	r3, [pc, #16]	@ (800eb70 <__sinit+0x28>)
 800eb5e:	6223      	str	r3, [r4, #32]
 800eb60:	4b04      	ldr	r3, [pc, #16]	@ (800eb74 <__sinit+0x2c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d1f5      	bne.n	800eb54 <__sinit+0xc>
 800eb68:	f7ff ffc4 	bl	800eaf4 <global_stdio_init.part.0>
 800eb6c:	e7f2      	b.n	800eb54 <__sinit+0xc>
 800eb6e:	bf00      	nop
 800eb70:	0800eab5 	.word	0x0800eab5
 800eb74:	20000e7c 	.word	0x20000e7c

0800eb78 <_fwalk_sglue>:
 800eb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb7c:	4607      	mov	r7, r0
 800eb7e:	4688      	mov	r8, r1
 800eb80:	4614      	mov	r4, r2
 800eb82:	2600      	movs	r6, #0
 800eb84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb88:	f1b9 0901 	subs.w	r9, r9, #1
 800eb8c:	d505      	bpl.n	800eb9a <_fwalk_sglue+0x22>
 800eb8e:	6824      	ldr	r4, [r4, #0]
 800eb90:	2c00      	cmp	r4, #0
 800eb92:	d1f7      	bne.n	800eb84 <_fwalk_sglue+0xc>
 800eb94:	4630      	mov	r0, r6
 800eb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb9a:	89ab      	ldrh	r3, [r5, #12]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d907      	bls.n	800ebb0 <_fwalk_sglue+0x38>
 800eba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eba4:	3301      	adds	r3, #1
 800eba6:	d003      	beq.n	800ebb0 <_fwalk_sglue+0x38>
 800eba8:	4629      	mov	r1, r5
 800ebaa:	4638      	mov	r0, r7
 800ebac:	47c0      	blx	r8
 800ebae:	4306      	orrs	r6, r0
 800ebb0:	3568      	adds	r5, #104	@ 0x68
 800ebb2:	e7e9      	b.n	800eb88 <_fwalk_sglue+0x10>

0800ebb4 <iprintf>:
 800ebb4:	b40f      	push	{r0, r1, r2, r3}
 800ebb6:	b507      	push	{r0, r1, r2, lr}
 800ebb8:	4906      	ldr	r1, [pc, #24]	@ (800ebd4 <iprintf+0x20>)
 800ebba:	ab04      	add	r3, sp, #16
 800ebbc:	6808      	ldr	r0, [r1, #0]
 800ebbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebc2:	6881      	ldr	r1, [r0, #8]
 800ebc4:	9301      	str	r3, [sp, #4]
 800ebc6:	f000 faed 	bl	800f1a4 <_vfiprintf_r>
 800ebca:	b003      	add	sp, #12
 800ebcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebd0:	b004      	add	sp, #16
 800ebd2:	4770      	bx	lr
 800ebd4:	20000038 	.word	0x20000038

0800ebd8 <sniprintf>:
 800ebd8:	b40c      	push	{r2, r3}
 800ebda:	b530      	push	{r4, r5, lr}
 800ebdc:	4b17      	ldr	r3, [pc, #92]	@ (800ec3c <sniprintf+0x64>)
 800ebde:	1e0c      	subs	r4, r1, #0
 800ebe0:	681d      	ldr	r5, [r3, #0]
 800ebe2:	b09d      	sub	sp, #116	@ 0x74
 800ebe4:	da08      	bge.n	800ebf8 <sniprintf+0x20>
 800ebe6:	238b      	movs	r3, #139	@ 0x8b
 800ebe8:	602b      	str	r3, [r5, #0]
 800ebea:	f04f 30ff 	mov.w	r0, #4294967295
 800ebee:	b01d      	add	sp, #116	@ 0x74
 800ebf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebf4:	b002      	add	sp, #8
 800ebf6:	4770      	bx	lr
 800ebf8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ebfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ec00:	bf14      	ite	ne
 800ec02:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ec06:	4623      	moveq	r3, r4
 800ec08:	9304      	str	r3, [sp, #16]
 800ec0a:	9307      	str	r3, [sp, #28]
 800ec0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ec10:	9002      	str	r0, [sp, #8]
 800ec12:	9006      	str	r0, [sp, #24]
 800ec14:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ec18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ec1a:	ab21      	add	r3, sp, #132	@ 0x84
 800ec1c:	a902      	add	r1, sp, #8
 800ec1e:	4628      	mov	r0, r5
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	f000 f999 	bl	800ef58 <_svfiprintf_r>
 800ec26:	1c43      	adds	r3, r0, #1
 800ec28:	bfbc      	itt	lt
 800ec2a:	238b      	movlt	r3, #139	@ 0x8b
 800ec2c:	602b      	strlt	r3, [r5, #0]
 800ec2e:	2c00      	cmp	r4, #0
 800ec30:	d0dd      	beq.n	800ebee <sniprintf+0x16>
 800ec32:	9b02      	ldr	r3, [sp, #8]
 800ec34:	2200      	movs	r2, #0
 800ec36:	701a      	strb	r2, [r3, #0]
 800ec38:	e7d9      	b.n	800ebee <sniprintf+0x16>
 800ec3a:	bf00      	nop
 800ec3c:	20000038 	.word	0x20000038

0800ec40 <__sread>:
 800ec40:	b510      	push	{r4, lr}
 800ec42:	460c      	mov	r4, r1
 800ec44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec48:	f000 f87e 	bl	800ed48 <_read_r>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	bfab      	itete	ge
 800ec50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ec52:	89a3      	ldrhlt	r3, [r4, #12]
 800ec54:	181b      	addge	r3, r3, r0
 800ec56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ec5a:	bfac      	ite	ge
 800ec5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ec5e:	81a3      	strhlt	r3, [r4, #12]
 800ec60:	bd10      	pop	{r4, pc}

0800ec62 <__swrite>:
 800ec62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec66:	461f      	mov	r7, r3
 800ec68:	898b      	ldrh	r3, [r1, #12]
 800ec6a:	05db      	lsls	r3, r3, #23
 800ec6c:	4605      	mov	r5, r0
 800ec6e:	460c      	mov	r4, r1
 800ec70:	4616      	mov	r6, r2
 800ec72:	d505      	bpl.n	800ec80 <__swrite+0x1e>
 800ec74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec78:	2302      	movs	r3, #2
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f000 f852 	bl	800ed24 <_lseek_r>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec8a:	81a3      	strh	r3, [r4, #12]
 800ec8c:	4632      	mov	r2, r6
 800ec8e:	463b      	mov	r3, r7
 800ec90:	4628      	mov	r0, r5
 800ec92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec96:	f000 b879 	b.w	800ed8c <_write_r>

0800ec9a <__sseek>:
 800ec9a:	b510      	push	{r4, lr}
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca2:	f000 f83f 	bl	800ed24 <_lseek_r>
 800eca6:	1c43      	adds	r3, r0, #1
 800eca8:	89a3      	ldrh	r3, [r4, #12]
 800ecaa:	bf15      	itete	ne
 800ecac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ecae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ecb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ecb6:	81a3      	strheq	r3, [r4, #12]
 800ecb8:	bf18      	it	ne
 800ecba:	81a3      	strhne	r3, [r4, #12]
 800ecbc:	bd10      	pop	{r4, pc}

0800ecbe <__sclose>:
 800ecbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecc2:	f000 b81f 	b.w	800ed04 <_close_r>

0800ecc6 <memset>:
 800ecc6:	4402      	add	r2, r0
 800ecc8:	4603      	mov	r3, r0
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d100      	bne.n	800ecd0 <memset+0xa>
 800ecce:	4770      	bx	lr
 800ecd0:	f803 1b01 	strb.w	r1, [r3], #1
 800ecd4:	e7f9      	b.n	800ecca <memset+0x4>

0800ecd6 <strstr>:
 800ecd6:	780a      	ldrb	r2, [r1, #0]
 800ecd8:	b570      	push	{r4, r5, r6, lr}
 800ecda:	b96a      	cbnz	r2, 800ecf8 <strstr+0x22>
 800ecdc:	bd70      	pop	{r4, r5, r6, pc}
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d109      	bne.n	800ecf6 <strstr+0x20>
 800ece2:	460c      	mov	r4, r1
 800ece4:	4605      	mov	r5, r0
 800ece6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d0f6      	beq.n	800ecdc <strstr+0x6>
 800ecee:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ecf2:	429e      	cmp	r6, r3
 800ecf4:	d0f7      	beq.n	800ece6 <strstr+0x10>
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	7803      	ldrb	r3, [r0, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1ef      	bne.n	800ecde <strstr+0x8>
 800ecfe:	4618      	mov	r0, r3
 800ed00:	e7ec      	b.n	800ecdc <strstr+0x6>
	...

0800ed04 <_close_r>:
 800ed04:	b538      	push	{r3, r4, r5, lr}
 800ed06:	4d06      	ldr	r5, [pc, #24]	@ (800ed20 <_close_r+0x1c>)
 800ed08:	2300      	movs	r3, #0
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	4608      	mov	r0, r1
 800ed0e:	602b      	str	r3, [r5, #0]
 800ed10:	f7f3 f943 	bl	8001f9a <_close>
 800ed14:	1c43      	adds	r3, r0, #1
 800ed16:	d102      	bne.n	800ed1e <_close_r+0x1a>
 800ed18:	682b      	ldr	r3, [r5, #0]
 800ed1a:	b103      	cbz	r3, 800ed1e <_close_r+0x1a>
 800ed1c:	6023      	str	r3, [r4, #0]
 800ed1e:	bd38      	pop	{r3, r4, r5, pc}
 800ed20:	20000e80 	.word	0x20000e80

0800ed24 <_lseek_r>:
 800ed24:	b538      	push	{r3, r4, r5, lr}
 800ed26:	4d07      	ldr	r5, [pc, #28]	@ (800ed44 <_lseek_r+0x20>)
 800ed28:	4604      	mov	r4, r0
 800ed2a:	4608      	mov	r0, r1
 800ed2c:	4611      	mov	r1, r2
 800ed2e:	2200      	movs	r2, #0
 800ed30:	602a      	str	r2, [r5, #0]
 800ed32:	461a      	mov	r2, r3
 800ed34:	f7f3 f958 	bl	8001fe8 <_lseek>
 800ed38:	1c43      	adds	r3, r0, #1
 800ed3a:	d102      	bne.n	800ed42 <_lseek_r+0x1e>
 800ed3c:	682b      	ldr	r3, [r5, #0]
 800ed3e:	b103      	cbz	r3, 800ed42 <_lseek_r+0x1e>
 800ed40:	6023      	str	r3, [r4, #0]
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	20000e80 	.word	0x20000e80

0800ed48 <_read_r>:
 800ed48:	b538      	push	{r3, r4, r5, lr}
 800ed4a:	4d07      	ldr	r5, [pc, #28]	@ (800ed68 <_read_r+0x20>)
 800ed4c:	4604      	mov	r4, r0
 800ed4e:	4608      	mov	r0, r1
 800ed50:	4611      	mov	r1, r2
 800ed52:	2200      	movs	r2, #0
 800ed54:	602a      	str	r2, [r5, #0]
 800ed56:	461a      	mov	r2, r3
 800ed58:	f7f3 f8e6 	bl	8001f28 <_read>
 800ed5c:	1c43      	adds	r3, r0, #1
 800ed5e:	d102      	bne.n	800ed66 <_read_r+0x1e>
 800ed60:	682b      	ldr	r3, [r5, #0]
 800ed62:	b103      	cbz	r3, 800ed66 <_read_r+0x1e>
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	bd38      	pop	{r3, r4, r5, pc}
 800ed68:	20000e80 	.word	0x20000e80

0800ed6c <_sbrk_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	4d06      	ldr	r5, [pc, #24]	@ (800ed88 <_sbrk_r+0x1c>)
 800ed70:	2300      	movs	r3, #0
 800ed72:	4604      	mov	r4, r0
 800ed74:	4608      	mov	r0, r1
 800ed76:	602b      	str	r3, [r5, #0]
 800ed78:	f7f3 f944 	bl	8002004 <_sbrk>
 800ed7c:	1c43      	adds	r3, r0, #1
 800ed7e:	d102      	bne.n	800ed86 <_sbrk_r+0x1a>
 800ed80:	682b      	ldr	r3, [r5, #0]
 800ed82:	b103      	cbz	r3, 800ed86 <_sbrk_r+0x1a>
 800ed84:	6023      	str	r3, [r4, #0]
 800ed86:	bd38      	pop	{r3, r4, r5, pc}
 800ed88:	20000e80 	.word	0x20000e80

0800ed8c <_write_r>:
 800ed8c:	b538      	push	{r3, r4, r5, lr}
 800ed8e:	4d07      	ldr	r5, [pc, #28]	@ (800edac <_write_r+0x20>)
 800ed90:	4604      	mov	r4, r0
 800ed92:	4608      	mov	r0, r1
 800ed94:	4611      	mov	r1, r2
 800ed96:	2200      	movs	r2, #0
 800ed98:	602a      	str	r2, [r5, #0]
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	f7f3 f8e1 	bl	8001f62 <_write>
 800eda0:	1c43      	adds	r3, r0, #1
 800eda2:	d102      	bne.n	800edaa <_write_r+0x1e>
 800eda4:	682b      	ldr	r3, [r5, #0]
 800eda6:	b103      	cbz	r3, 800edaa <_write_r+0x1e>
 800eda8:	6023      	str	r3, [r4, #0]
 800edaa:	bd38      	pop	{r3, r4, r5, pc}
 800edac:	20000e80 	.word	0x20000e80

0800edb0 <__errno>:
 800edb0:	4b01      	ldr	r3, [pc, #4]	@ (800edb8 <__errno+0x8>)
 800edb2:	6818      	ldr	r0, [r3, #0]
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop
 800edb8:	20000038 	.word	0x20000038

0800edbc <__libc_init_array>:
 800edbc:	b570      	push	{r4, r5, r6, lr}
 800edbe:	4d0d      	ldr	r5, [pc, #52]	@ (800edf4 <__libc_init_array+0x38>)
 800edc0:	4c0d      	ldr	r4, [pc, #52]	@ (800edf8 <__libc_init_array+0x3c>)
 800edc2:	1b64      	subs	r4, r4, r5
 800edc4:	10a4      	asrs	r4, r4, #2
 800edc6:	2600      	movs	r6, #0
 800edc8:	42a6      	cmp	r6, r4
 800edca:	d109      	bne.n	800ede0 <__libc_init_array+0x24>
 800edcc:	4d0b      	ldr	r5, [pc, #44]	@ (800edfc <__libc_init_array+0x40>)
 800edce:	4c0c      	ldr	r4, [pc, #48]	@ (800ee00 <__libc_init_array+0x44>)
 800edd0:	f000 feb0 	bl	800fb34 <_init>
 800edd4:	1b64      	subs	r4, r4, r5
 800edd6:	10a4      	asrs	r4, r4, #2
 800edd8:	2600      	movs	r6, #0
 800edda:	42a6      	cmp	r6, r4
 800eddc:	d105      	bne.n	800edea <__libc_init_array+0x2e>
 800edde:	bd70      	pop	{r4, r5, r6, pc}
 800ede0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ede4:	4798      	blx	r3
 800ede6:	3601      	adds	r6, #1
 800ede8:	e7ee      	b.n	800edc8 <__libc_init_array+0xc>
 800edea:	f855 3b04 	ldr.w	r3, [r5], #4
 800edee:	4798      	blx	r3
 800edf0:	3601      	adds	r6, #1
 800edf2:	e7f2      	b.n	800edda <__libc_init_array+0x1e>
 800edf4:	0800fd34 	.word	0x0800fd34
 800edf8:	0800fd34 	.word	0x0800fd34
 800edfc:	0800fd34 	.word	0x0800fd34
 800ee00:	0800fd38 	.word	0x0800fd38

0800ee04 <__retarget_lock_init_recursive>:
 800ee04:	4770      	bx	lr

0800ee06 <__retarget_lock_acquire_recursive>:
 800ee06:	4770      	bx	lr

0800ee08 <__retarget_lock_release_recursive>:
 800ee08:	4770      	bx	lr
	...

0800ee0c <_free_r>:
 800ee0c:	b538      	push	{r3, r4, r5, lr}
 800ee0e:	4605      	mov	r5, r0
 800ee10:	2900      	cmp	r1, #0
 800ee12:	d041      	beq.n	800ee98 <_free_r+0x8c>
 800ee14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee18:	1f0c      	subs	r4, r1, #4
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	bfb8      	it	lt
 800ee1e:	18e4      	addlt	r4, r4, r3
 800ee20:	f7ff fdfa 	bl	800ea18 <__malloc_lock>
 800ee24:	4a1d      	ldr	r2, [pc, #116]	@ (800ee9c <_free_r+0x90>)
 800ee26:	6813      	ldr	r3, [r2, #0]
 800ee28:	b933      	cbnz	r3, 800ee38 <_free_r+0x2c>
 800ee2a:	6063      	str	r3, [r4, #4]
 800ee2c:	6014      	str	r4, [r2, #0]
 800ee2e:	4628      	mov	r0, r5
 800ee30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee34:	f7ff bdf6 	b.w	800ea24 <__malloc_unlock>
 800ee38:	42a3      	cmp	r3, r4
 800ee3a:	d908      	bls.n	800ee4e <_free_r+0x42>
 800ee3c:	6820      	ldr	r0, [r4, #0]
 800ee3e:	1821      	adds	r1, r4, r0
 800ee40:	428b      	cmp	r3, r1
 800ee42:	bf01      	itttt	eq
 800ee44:	6819      	ldreq	r1, [r3, #0]
 800ee46:	685b      	ldreq	r3, [r3, #4]
 800ee48:	1809      	addeq	r1, r1, r0
 800ee4a:	6021      	streq	r1, [r4, #0]
 800ee4c:	e7ed      	b.n	800ee2a <_free_r+0x1e>
 800ee4e:	461a      	mov	r2, r3
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	b10b      	cbz	r3, 800ee58 <_free_r+0x4c>
 800ee54:	42a3      	cmp	r3, r4
 800ee56:	d9fa      	bls.n	800ee4e <_free_r+0x42>
 800ee58:	6811      	ldr	r1, [r2, #0]
 800ee5a:	1850      	adds	r0, r2, r1
 800ee5c:	42a0      	cmp	r0, r4
 800ee5e:	d10b      	bne.n	800ee78 <_free_r+0x6c>
 800ee60:	6820      	ldr	r0, [r4, #0]
 800ee62:	4401      	add	r1, r0
 800ee64:	1850      	adds	r0, r2, r1
 800ee66:	4283      	cmp	r3, r0
 800ee68:	6011      	str	r1, [r2, #0]
 800ee6a:	d1e0      	bne.n	800ee2e <_free_r+0x22>
 800ee6c:	6818      	ldr	r0, [r3, #0]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	6053      	str	r3, [r2, #4]
 800ee72:	4408      	add	r0, r1
 800ee74:	6010      	str	r0, [r2, #0]
 800ee76:	e7da      	b.n	800ee2e <_free_r+0x22>
 800ee78:	d902      	bls.n	800ee80 <_free_r+0x74>
 800ee7a:	230c      	movs	r3, #12
 800ee7c:	602b      	str	r3, [r5, #0]
 800ee7e:	e7d6      	b.n	800ee2e <_free_r+0x22>
 800ee80:	6820      	ldr	r0, [r4, #0]
 800ee82:	1821      	adds	r1, r4, r0
 800ee84:	428b      	cmp	r3, r1
 800ee86:	bf04      	itt	eq
 800ee88:	6819      	ldreq	r1, [r3, #0]
 800ee8a:	685b      	ldreq	r3, [r3, #4]
 800ee8c:	6063      	str	r3, [r4, #4]
 800ee8e:	bf04      	itt	eq
 800ee90:	1809      	addeq	r1, r1, r0
 800ee92:	6021      	streq	r1, [r4, #0]
 800ee94:	6054      	str	r4, [r2, #4]
 800ee96:	e7ca      	b.n	800ee2e <_free_r+0x22>
 800ee98:	bd38      	pop	{r3, r4, r5, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20000d40 	.word	0x20000d40

0800eea0 <__ssputs_r>:
 800eea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eea4:	688e      	ldr	r6, [r1, #8]
 800eea6:	461f      	mov	r7, r3
 800eea8:	42be      	cmp	r6, r7
 800eeaa:	680b      	ldr	r3, [r1, #0]
 800eeac:	4682      	mov	sl, r0
 800eeae:	460c      	mov	r4, r1
 800eeb0:	4690      	mov	r8, r2
 800eeb2:	d82d      	bhi.n	800ef10 <__ssputs_r+0x70>
 800eeb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eeb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eebc:	d026      	beq.n	800ef0c <__ssputs_r+0x6c>
 800eebe:	6965      	ldr	r5, [r4, #20]
 800eec0:	6909      	ldr	r1, [r1, #16]
 800eec2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eec6:	eba3 0901 	sub.w	r9, r3, r1
 800eeca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eece:	1c7b      	adds	r3, r7, #1
 800eed0:	444b      	add	r3, r9
 800eed2:	106d      	asrs	r5, r5, #1
 800eed4:	429d      	cmp	r5, r3
 800eed6:	bf38      	it	cc
 800eed8:	461d      	movcc	r5, r3
 800eeda:	0553      	lsls	r3, r2, #21
 800eedc:	d527      	bpl.n	800ef2e <__ssputs_r+0x8e>
 800eede:	4629      	mov	r1, r5
 800eee0:	f7ff fd1a 	bl	800e918 <_malloc_r>
 800eee4:	4606      	mov	r6, r0
 800eee6:	b360      	cbz	r0, 800ef42 <__ssputs_r+0xa2>
 800eee8:	6921      	ldr	r1, [r4, #16]
 800eeea:	464a      	mov	r2, r9
 800eeec:	f000 fd5a 	bl	800f9a4 <memcpy>
 800eef0:	89a3      	ldrh	r3, [r4, #12]
 800eef2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800eef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eefa:	81a3      	strh	r3, [r4, #12]
 800eefc:	6126      	str	r6, [r4, #16]
 800eefe:	6165      	str	r5, [r4, #20]
 800ef00:	444e      	add	r6, r9
 800ef02:	eba5 0509 	sub.w	r5, r5, r9
 800ef06:	6026      	str	r6, [r4, #0]
 800ef08:	60a5      	str	r5, [r4, #8]
 800ef0a:	463e      	mov	r6, r7
 800ef0c:	42be      	cmp	r6, r7
 800ef0e:	d900      	bls.n	800ef12 <__ssputs_r+0x72>
 800ef10:	463e      	mov	r6, r7
 800ef12:	6820      	ldr	r0, [r4, #0]
 800ef14:	4632      	mov	r2, r6
 800ef16:	4641      	mov	r1, r8
 800ef18:	f000 fd2a 	bl	800f970 <memmove>
 800ef1c:	68a3      	ldr	r3, [r4, #8]
 800ef1e:	1b9b      	subs	r3, r3, r6
 800ef20:	60a3      	str	r3, [r4, #8]
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	4433      	add	r3, r6
 800ef26:	6023      	str	r3, [r4, #0]
 800ef28:	2000      	movs	r0, #0
 800ef2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef2e:	462a      	mov	r2, r5
 800ef30:	f000 fd46 	bl	800f9c0 <_realloc_r>
 800ef34:	4606      	mov	r6, r0
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d1e0      	bne.n	800eefc <__ssputs_r+0x5c>
 800ef3a:	6921      	ldr	r1, [r4, #16]
 800ef3c:	4650      	mov	r0, sl
 800ef3e:	f7ff ff65 	bl	800ee0c <_free_r>
 800ef42:	230c      	movs	r3, #12
 800ef44:	f8ca 3000 	str.w	r3, [sl]
 800ef48:	89a3      	ldrh	r3, [r4, #12]
 800ef4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef4e:	81a3      	strh	r3, [r4, #12]
 800ef50:	f04f 30ff 	mov.w	r0, #4294967295
 800ef54:	e7e9      	b.n	800ef2a <__ssputs_r+0x8a>
	...

0800ef58 <_svfiprintf_r>:
 800ef58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef5c:	4698      	mov	r8, r3
 800ef5e:	898b      	ldrh	r3, [r1, #12]
 800ef60:	061b      	lsls	r3, r3, #24
 800ef62:	b09d      	sub	sp, #116	@ 0x74
 800ef64:	4607      	mov	r7, r0
 800ef66:	460d      	mov	r5, r1
 800ef68:	4614      	mov	r4, r2
 800ef6a:	d510      	bpl.n	800ef8e <_svfiprintf_r+0x36>
 800ef6c:	690b      	ldr	r3, [r1, #16]
 800ef6e:	b973      	cbnz	r3, 800ef8e <_svfiprintf_r+0x36>
 800ef70:	2140      	movs	r1, #64	@ 0x40
 800ef72:	f7ff fcd1 	bl	800e918 <_malloc_r>
 800ef76:	6028      	str	r0, [r5, #0]
 800ef78:	6128      	str	r0, [r5, #16]
 800ef7a:	b930      	cbnz	r0, 800ef8a <_svfiprintf_r+0x32>
 800ef7c:	230c      	movs	r3, #12
 800ef7e:	603b      	str	r3, [r7, #0]
 800ef80:	f04f 30ff 	mov.w	r0, #4294967295
 800ef84:	b01d      	add	sp, #116	@ 0x74
 800ef86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef8a:	2340      	movs	r3, #64	@ 0x40
 800ef8c:	616b      	str	r3, [r5, #20]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef92:	2320      	movs	r3, #32
 800ef94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef98:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef9c:	2330      	movs	r3, #48	@ 0x30
 800ef9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f13c <_svfiprintf_r+0x1e4>
 800efa2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800efa6:	f04f 0901 	mov.w	r9, #1
 800efaa:	4623      	mov	r3, r4
 800efac:	469a      	mov	sl, r3
 800efae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efb2:	b10a      	cbz	r2, 800efb8 <_svfiprintf_r+0x60>
 800efb4:	2a25      	cmp	r2, #37	@ 0x25
 800efb6:	d1f9      	bne.n	800efac <_svfiprintf_r+0x54>
 800efb8:	ebba 0b04 	subs.w	fp, sl, r4
 800efbc:	d00b      	beq.n	800efd6 <_svfiprintf_r+0x7e>
 800efbe:	465b      	mov	r3, fp
 800efc0:	4622      	mov	r2, r4
 800efc2:	4629      	mov	r1, r5
 800efc4:	4638      	mov	r0, r7
 800efc6:	f7ff ff6b 	bl	800eea0 <__ssputs_r>
 800efca:	3001      	adds	r0, #1
 800efcc:	f000 80a7 	beq.w	800f11e <_svfiprintf_r+0x1c6>
 800efd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efd2:	445a      	add	r2, fp
 800efd4:	9209      	str	r2, [sp, #36]	@ 0x24
 800efd6:	f89a 3000 	ldrb.w	r3, [sl]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 809f 	beq.w	800f11e <_svfiprintf_r+0x1c6>
 800efe0:	2300      	movs	r3, #0
 800efe2:	f04f 32ff 	mov.w	r2, #4294967295
 800efe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efea:	f10a 0a01 	add.w	sl, sl, #1
 800efee:	9304      	str	r3, [sp, #16]
 800eff0:	9307      	str	r3, [sp, #28]
 800eff2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eff6:	931a      	str	r3, [sp, #104]	@ 0x68
 800eff8:	4654      	mov	r4, sl
 800effa:	2205      	movs	r2, #5
 800effc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f000:	484e      	ldr	r0, [pc, #312]	@ (800f13c <_svfiprintf_r+0x1e4>)
 800f002:	f7f1 f905 	bl	8000210 <memchr>
 800f006:	9a04      	ldr	r2, [sp, #16]
 800f008:	b9d8      	cbnz	r0, 800f042 <_svfiprintf_r+0xea>
 800f00a:	06d0      	lsls	r0, r2, #27
 800f00c:	bf44      	itt	mi
 800f00e:	2320      	movmi	r3, #32
 800f010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f014:	0711      	lsls	r1, r2, #28
 800f016:	bf44      	itt	mi
 800f018:	232b      	movmi	r3, #43	@ 0x2b
 800f01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f01e:	f89a 3000 	ldrb.w	r3, [sl]
 800f022:	2b2a      	cmp	r3, #42	@ 0x2a
 800f024:	d015      	beq.n	800f052 <_svfiprintf_r+0xfa>
 800f026:	9a07      	ldr	r2, [sp, #28]
 800f028:	4654      	mov	r4, sl
 800f02a:	2000      	movs	r0, #0
 800f02c:	f04f 0c0a 	mov.w	ip, #10
 800f030:	4621      	mov	r1, r4
 800f032:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f036:	3b30      	subs	r3, #48	@ 0x30
 800f038:	2b09      	cmp	r3, #9
 800f03a:	d94b      	bls.n	800f0d4 <_svfiprintf_r+0x17c>
 800f03c:	b1b0      	cbz	r0, 800f06c <_svfiprintf_r+0x114>
 800f03e:	9207      	str	r2, [sp, #28]
 800f040:	e014      	b.n	800f06c <_svfiprintf_r+0x114>
 800f042:	eba0 0308 	sub.w	r3, r0, r8
 800f046:	fa09 f303 	lsl.w	r3, r9, r3
 800f04a:	4313      	orrs	r3, r2
 800f04c:	9304      	str	r3, [sp, #16]
 800f04e:	46a2      	mov	sl, r4
 800f050:	e7d2      	b.n	800eff8 <_svfiprintf_r+0xa0>
 800f052:	9b03      	ldr	r3, [sp, #12]
 800f054:	1d19      	adds	r1, r3, #4
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	9103      	str	r1, [sp, #12]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	bfbb      	ittet	lt
 800f05e:	425b      	neglt	r3, r3
 800f060:	f042 0202 	orrlt.w	r2, r2, #2
 800f064:	9307      	strge	r3, [sp, #28]
 800f066:	9307      	strlt	r3, [sp, #28]
 800f068:	bfb8      	it	lt
 800f06a:	9204      	strlt	r2, [sp, #16]
 800f06c:	7823      	ldrb	r3, [r4, #0]
 800f06e:	2b2e      	cmp	r3, #46	@ 0x2e
 800f070:	d10a      	bne.n	800f088 <_svfiprintf_r+0x130>
 800f072:	7863      	ldrb	r3, [r4, #1]
 800f074:	2b2a      	cmp	r3, #42	@ 0x2a
 800f076:	d132      	bne.n	800f0de <_svfiprintf_r+0x186>
 800f078:	9b03      	ldr	r3, [sp, #12]
 800f07a:	1d1a      	adds	r2, r3, #4
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	9203      	str	r2, [sp, #12]
 800f080:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f084:	3402      	adds	r4, #2
 800f086:	9305      	str	r3, [sp, #20]
 800f088:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f14c <_svfiprintf_r+0x1f4>
 800f08c:	7821      	ldrb	r1, [r4, #0]
 800f08e:	2203      	movs	r2, #3
 800f090:	4650      	mov	r0, sl
 800f092:	f7f1 f8bd 	bl	8000210 <memchr>
 800f096:	b138      	cbz	r0, 800f0a8 <_svfiprintf_r+0x150>
 800f098:	9b04      	ldr	r3, [sp, #16]
 800f09a:	eba0 000a 	sub.w	r0, r0, sl
 800f09e:	2240      	movs	r2, #64	@ 0x40
 800f0a0:	4082      	lsls	r2, r0
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	3401      	adds	r4, #1
 800f0a6:	9304      	str	r3, [sp, #16]
 800f0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ac:	4824      	ldr	r0, [pc, #144]	@ (800f140 <_svfiprintf_r+0x1e8>)
 800f0ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f0b2:	2206      	movs	r2, #6
 800f0b4:	f7f1 f8ac 	bl	8000210 <memchr>
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	d036      	beq.n	800f12a <_svfiprintf_r+0x1d2>
 800f0bc:	4b21      	ldr	r3, [pc, #132]	@ (800f144 <_svfiprintf_r+0x1ec>)
 800f0be:	bb1b      	cbnz	r3, 800f108 <_svfiprintf_r+0x1b0>
 800f0c0:	9b03      	ldr	r3, [sp, #12]
 800f0c2:	3307      	adds	r3, #7
 800f0c4:	f023 0307 	bic.w	r3, r3, #7
 800f0c8:	3308      	adds	r3, #8
 800f0ca:	9303      	str	r3, [sp, #12]
 800f0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ce:	4433      	add	r3, r6
 800f0d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0d2:	e76a      	b.n	800efaa <_svfiprintf_r+0x52>
 800f0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0d8:	460c      	mov	r4, r1
 800f0da:	2001      	movs	r0, #1
 800f0dc:	e7a8      	b.n	800f030 <_svfiprintf_r+0xd8>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	3401      	adds	r4, #1
 800f0e2:	9305      	str	r3, [sp, #20]
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	f04f 0c0a 	mov.w	ip, #10
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0f0:	3a30      	subs	r2, #48	@ 0x30
 800f0f2:	2a09      	cmp	r2, #9
 800f0f4:	d903      	bls.n	800f0fe <_svfiprintf_r+0x1a6>
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d0c6      	beq.n	800f088 <_svfiprintf_r+0x130>
 800f0fa:	9105      	str	r1, [sp, #20]
 800f0fc:	e7c4      	b.n	800f088 <_svfiprintf_r+0x130>
 800f0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800f102:	4604      	mov	r4, r0
 800f104:	2301      	movs	r3, #1
 800f106:	e7f0      	b.n	800f0ea <_svfiprintf_r+0x192>
 800f108:	ab03      	add	r3, sp, #12
 800f10a:	9300      	str	r3, [sp, #0]
 800f10c:	462a      	mov	r2, r5
 800f10e:	4b0e      	ldr	r3, [pc, #56]	@ (800f148 <_svfiprintf_r+0x1f0>)
 800f110:	a904      	add	r1, sp, #16
 800f112:	4638      	mov	r0, r7
 800f114:	f3af 8000 	nop.w
 800f118:	1c42      	adds	r2, r0, #1
 800f11a:	4606      	mov	r6, r0
 800f11c:	d1d6      	bne.n	800f0cc <_svfiprintf_r+0x174>
 800f11e:	89ab      	ldrh	r3, [r5, #12]
 800f120:	065b      	lsls	r3, r3, #25
 800f122:	f53f af2d 	bmi.w	800ef80 <_svfiprintf_r+0x28>
 800f126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f128:	e72c      	b.n	800ef84 <_svfiprintf_r+0x2c>
 800f12a:	ab03      	add	r3, sp, #12
 800f12c:	9300      	str	r3, [sp, #0]
 800f12e:	462a      	mov	r2, r5
 800f130:	4b05      	ldr	r3, [pc, #20]	@ (800f148 <_svfiprintf_r+0x1f0>)
 800f132:	a904      	add	r1, sp, #16
 800f134:	4638      	mov	r0, r7
 800f136:	f000 f9bb 	bl	800f4b0 <_printf_i>
 800f13a:	e7ed      	b.n	800f118 <_svfiprintf_r+0x1c0>
 800f13c:	0800fcf8 	.word	0x0800fcf8
 800f140:	0800fd02 	.word	0x0800fd02
 800f144:	00000000 	.word	0x00000000
 800f148:	0800eea1 	.word	0x0800eea1
 800f14c:	0800fcfe 	.word	0x0800fcfe

0800f150 <__sfputc_r>:
 800f150:	6893      	ldr	r3, [r2, #8]
 800f152:	3b01      	subs	r3, #1
 800f154:	2b00      	cmp	r3, #0
 800f156:	b410      	push	{r4}
 800f158:	6093      	str	r3, [r2, #8]
 800f15a:	da08      	bge.n	800f16e <__sfputc_r+0x1e>
 800f15c:	6994      	ldr	r4, [r2, #24]
 800f15e:	42a3      	cmp	r3, r4
 800f160:	db01      	blt.n	800f166 <__sfputc_r+0x16>
 800f162:	290a      	cmp	r1, #10
 800f164:	d103      	bne.n	800f16e <__sfputc_r+0x1e>
 800f166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f16a:	f000 bb6d 	b.w	800f848 <__swbuf_r>
 800f16e:	6813      	ldr	r3, [r2, #0]
 800f170:	1c58      	adds	r0, r3, #1
 800f172:	6010      	str	r0, [r2, #0]
 800f174:	7019      	strb	r1, [r3, #0]
 800f176:	4608      	mov	r0, r1
 800f178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <__sfputs_r>:
 800f17e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f180:	4606      	mov	r6, r0
 800f182:	460f      	mov	r7, r1
 800f184:	4614      	mov	r4, r2
 800f186:	18d5      	adds	r5, r2, r3
 800f188:	42ac      	cmp	r4, r5
 800f18a:	d101      	bne.n	800f190 <__sfputs_r+0x12>
 800f18c:	2000      	movs	r0, #0
 800f18e:	e007      	b.n	800f1a0 <__sfputs_r+0x22>
 800f190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f194:	463a      	mov	r2, r7
 800f196:	4630      	mov	r0, r6
 800f198:	f7ff ffda 	bl	800f150 <__sfputc_r>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d1f3      	bne.n	800f188 <__sfputs_r+0xa>
 800f1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1a4 <_vfiprintf_r>:
 800f1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a8:	460d      	mov	r5, r1
 800f1aa:	b09d      	sub	sp, #116	@ 0x74
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	4698      	mov	r8, r3
 800f1b0:	4606      	mov	r6, r0
 800f1b2:	b118      	cbz	r0, 800f1bc <_vfiprintf_r+0x18>
 800f1b4:	6a03      	ldr	r3, [r0, #32]
 800f1b6:	b90b      	cbnz	r3, 800f1bc <_vfiprintf_r+0x18>
 800f1b8:	f7ff fcc6 	bl	800eb48 <__sinit>
 800f1bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1be:	07d9      	lsls	r1, r3, #31
 800f1c0:	d405      	bmi.n	800f1ce <_vfiprintf_r+0x2a>
 800f1c2:	89ab      	ldrh	r3, [r5, #12]
 800f1c4:	059a      	lsls	r2, r3, #22
 800f1c6:	d402      	bmi.n	800f1ce <_vfiprintf_r+0x2a>
 800f1c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1ca:	f7ff fe1c 	bl	800ee06 <__retarget_lock_acquire_recursive>
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	071b      	lsls	r3, r3, #28
 800f1d2:	d501      	bpl.n	800f1d8 <_vfiprintf_r+0x34>
 800f1d4:	692b      	ldr	r3, [r5, #16]
 800f1d6:	b99b      	cbnz	r3, 800f200 <_vfiprintf_r+0x5c>
 800f1d8:	4629      	mov	r1, r5
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f000 fb72 	bl	800f8c4 <__swsetup_r>
 800f1e0:	b170      	cbz	r0, 800f200 <_vfiprintf_r+0x5c>
 800f1e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1e4:	07dc      	lsls	r4, r3, #31
 800f1e6:	d504      	bpl.n	800f1f2 <_vfiprintf_r+0x4e>
 800f1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ec:	b01d      	add	sp, #116	@ 0x74
 800f1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f2:	89ab      	ldrh	r3, [r5, #12]
 800f1f4:	0598      	lsls	r0, r3, #22
 800f1f6:	d4f7      	bmi.n	800f1e8 <_vfiprintf_r+0x44>
 800f1f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1fa:	f7ff fe05 	bl	800ee08 <__retarget_lock_release_recursive>
 800f1fe:	e7f3      	b.n	800f1e8 <_vfiprintf_r+0x44>
 800f200:	2300      	movs	r3, #0
 800f202:	9309      	str	r3, [sp, #36]	@ 0x24
 800f204:	2320      	movs	r3, #32
 800f206:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f20a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f20e:	2330      	movs	r3, #48	@ 0x30
 800f210:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f3c0 <_vfiprintf_r+0x21c>
 800f214:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f218:	f04f 0901 	mov.w	r9, #1
 800f21c:	4623      	mov	r3, r4
 800f21e:	469a      	mov	sl, r3
 800f220:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f224:	b10a      	cbz	r2, 800f22a <_vfiprintf_r+0x86>
 800f226:	2a25      	cmp	r2, #37	@ 0x25
 800f228:	d1f9      	bne.n	800f21e <_vfiprintf_r+0x7a>
 800f22a:	ebba 0b04 	subs.w	fp, sl, r4
 800f22e:	d00b      	beq.n	800f248 <_vfiprintf_r+0xa4>
 800f230:	465b      	mov	r3, fp
 800f232:	4622      	mov	r2, r4
 800f234:	4629      	mov	r1, r5
 800f236:	4630      	mov	r0, r6
 800f238:	f7ff ffa1 	bl	800f17e <__sfputs_r>
 800f23c:	3001      	adds	r0, #1
 800f23e:	f000 80a7 	beq.w	800f390 <_vfiprintf_r+0x1ec>
 800f242:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f244:	445a      	add	r2, fp
 800f246:	9209      	str	r2, [sp, #36]	@ 0x24
 800f248:	f89a 3000 	ldrb.w	r3, [sl]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f000 809f 	beq.w	800f390 <_vfiprintf_r+0x1ec>
 800f252:	2300      	movs	r3, #0
 800f254:	f04f 32ff 	mov.w	r2, #4294967295
 800f258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f25c:	f10a 0a01 	add.w	sl, sl, #1
 800f260:	9304      	str	r3, [sp, #16]
 800f262:	9307      	str	r3, [sp, #28]
 800f264:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f268:	931a      	str	r3, [sp, #104]	@ 0x68
 800f26a:	4654      	mov	r4, sl
 800f26c:	2205      	movs	r2, #5
 800f26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f272:	4853      	ldr	r0, [pc, #332]	@ (800f3c0 <_vfiprintf_r+0x21c>)
 800f274:	f7f0 ffcc 	bl	8000210 <memchr>
 800f278:	9a04      	ldr	r2, [sp, #16]
 800f27a:	b9d8      	cbnz	r0, 800f2b4 <_vfiprintf_r+0x110>
 800f27c:	06d1      	lsls	r1, r2, #27
 800f27e:	bf44      	itt	mi
 800f280:	2320      	movmi	r3, #32
 800f282:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f286:	0713      	lsls	r3, r2, #28
 800f288:	bf44      	itt	mi
 800f28a:	232b      	movmi	r3, #43	@ 0x2b
 800f28c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f290:	f89a 3000 	ldrb.w	r3, [sl]
 800f294:	2b2a      	cmp	r3, #42	@ 0x2a
 800f296:	d015      	beq.n	800f2c4 <_vfiprintf_r+0x120>
 800f298:	9a07      	ldr	r2, [sp, #28]
 800f29a:	4654      	mov	r4, sl
 800f29c:	2000      	movs	r0, #0
 800f29e:	f04f 0c0a 	mov.w	ip, #10
 800f2a2:	4621      	mov	r1, r4
 800f2a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2a8:	3b30      	subs	r3, #48	@ 0x30
 800f2aa:	2b09      	cmp	r3, #9
 800f2ac:	d94b      	bls.n	800f346 <_vfiprintf_r+0x1a2>
 800f2ae:	b1b0      	cbz	r0, 800f2de <_vfiprintf_r+0x13a>
 800f2b0:	9207      	str	r2, [sp, #28]
 800f2b2:	e014      	b.n	800f2de <_vfiprintf_r+0x13a>
 800f2b4:	eba0 0308 	sub.w	r3, r0, r8
 800f2b8:	fa09 f303 	lsl.w	r3, r9, r3
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	9304      	str	r3, [sp, #16]
 800f2c0:	46a2      	mov	sl, r4
 800f2c2:	e7d2      	b.n	800f26a <_vfiprintf_r+0xc6>
 800f2c4:	9b03      	ldr	r3, [sp, #12]
 800f2c6:	1d19      	adds	r1, r3, #4
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	9103      	str	r1, [sp, #12]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	bfbb      	ittet	lt
 800f2d0:	425b      	neglt	r3, r3
 800f2d2:	f042 0202 	orrlt.w	r2, r2, #2
 800f2d6:	9307      	strge	r3, [sp, #28]
 800f2d8:	9307      	strlt	r3, [sp, #28]
 800f2da:	bfb8      	it	lt
 800f2dc:	9204      	strlt	r2, [sp, #16]
 800f2de:	7823      	ldrb	r3, [r4, #0]
 800f2e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f2e2:	d10a      	bne.n	800f2fa <_vfiprintf_r+0x156>
 800f2e4:	7863      	ldrb	r3, [r4, #1]
 800f2e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f2e8:	d132      	bne.n	800f350 <_vfiprintf_r+0x1ac>
 800f2ea:	9b03      	ldr	r3, [sp, #12]
 800f2ec:	1d1a      	adds	r2, r3, #4
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	9203      	str	r2, [sp, #12]
 800f2f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f2f6:	3402      	adds	r4, #2
 800f2f8:	9305      	str	r3, [sp, #20]
 800f2fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f3d0 <_vfiprintf_r+0x22c>
 800f2fe:	7821      	ldrb	r1, [r4, #0]
 800f300:	2203      	movs	r2, #3
 800f302:	4650      	mov	r0, sl
 800f304:	f7f0 ff84 	bl	8000210 <memchr>
 800f308:	b138      	cbz	r0, 800f31a <_vfiprintf_r+0x176>
 800f30a:	9b04      	ldr	r3, [sp, #16]
 800f30c:	eba0 000a 	sub.w	r0, r0, sl
 800f310:	2240      	movs	r2, #64	@ 0x40
 800f312:	4082      	lsls	r2, r0
 800f314:	4313      	orrs	r3, r2
 800f316:	3401      	adds	r4, #1
 800f318:	9304      	str	r3, [sp, #16]
 800f31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f31e:	4829      	ldr	r0, [pc, #164]	@ (800f3c4 <_vfiprintf_r+0x220>)
 800f320:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f324:	2206      	movs	r2, #6
 800f326:	f7f0 ff73 	bl	8000210 <memchr>
 800f32a:	2800      	cmp	r0, #0
 800f32c:	d03f      	beq.n	800f3ae <_vfiprintf_r+0x20a>
 800f32e:	4b26      	ldr	r3, [pc, #152]	@ (800f3c8 <_vfiprintf_r+0x224>)
 800f330:	bb1b      	cbnz	r3, 800f37a <_vfiprintf_r+0x1d6>
 800f332:	9b03      	ldr	r3, [sp, #12]
 800f334:	3307      	adds	r3, #7
 800f336:	f023 0307 	bic.w	r3, r3, #7
 800f33a:	3308      	adds	r3, #8
 800f33c:	9303      	str	r3, [sp, #12]
 800f33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f340:	443b      	add	r3, r7
 800f342:	9309      	str	r3, [sp, #36]	@ 0x24
 800f344:	e76a      	b.n	800f21c <_vfiprintf_r+0x78>
 800f346:	fb0c 3202 	mla	r2, ip, r2, r3
 800f34a:	460c      	mov	r4, r1
 800f34c:	2001      	movs	r0, #1
 800f34e:	e7a8      	b.n	800f2a2 <_vfiprintf_r+0xfe>
 800f350:	2300      	movs	r3, #0
 800f352:	3401      	adds	r4, #1
 800f354:	9305      	str	r3, [sp, #20]
 800f356:	4619      	mov	r1, r3
 800f358:	f04f 0c0a 	mov.w	ip, #10
 800f35c:	4620      	mov	r0, r4
 800f35e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f362:	3a30      	subs	r2, #48	@ 0x30
 800f364:	2a09      	cmp	r2, #9
 800f366:	d903      	bls.n	800f370 <_vfiprintf_r+0x1cc>
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d0c6      	beq.n	800f2fa <_vfiprintf_r+0x156>
 800f36c:	9105      	str	r1, [sp, #20]
 800f36e:	e7c4      	b.n	800f2fa <_vfiprintf_r+0x156>
 800f370:	fb0c 2101 	mla	r1, ip, r1, r2
 800f374:	4604      	mov	r4, r0
 800f376:	2301      	movs	r3, #1
 800f378:	e7f0      	b.n	800f35c <_vfiprintf_r+0x1b8>
 800f37a:	ab03      	add	r3, sp, #12
 800f37c:	9300      	str	r3, [sp, #0]
 800f37e:	462a      	mov	r2, r5
 800f380:	4b12      	ldr	r3, [pc, #72]	@ (800f3cc <_vfiprintf_r+0x228>)
 800f382:	a904      	add	r1, sp, #16
 800f384:	4630      	mov	r0, r6
 800f386:	f3af 8000 	nop.w
 800f38a:	4607      	mov	r7, r0
 800f38c:	1c78      	adds	r0, r7, #1
 800f38e:	d1d6      	bne.n	800f33e <_vfiprintf_r+0x19a>
 800f390:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f392:	07d9      	lsls	r1, r3, #31
 800f394:	d405      	bmi.n	800f3a2 <_vfiprintf_r+0x1fe>
 800f396:	89ab      	ldrh	r3, [r5, #12]
 800f398:	059a      	lsls	r2, r3, #22
 800f39a:	d402      	bmi.n	800f3a2 <_vfiprintf_r+0x1fe>
 800f39c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f39e:	f7ff fd33 	bl	800ee08 <__retarget_lock_release_recursive>
 800f3a2:	89ab      	ldrh	r3, [r5, #12]
 800f3a4:	065b      	lsls	r3, r3, #25
 800f3a6:	f53f af1f 	bmi.w	800f1e8 <_vfiprintf_r+0x44>
 800f3aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f3ac:	e71e      	b.n	800f1ec <_vfiprintf_r+0x48>
 800f3ae:	ab03      	add	r3, sp, #12
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	462a      	mov	r2, r5
 800f3b4:	4b05      	ldr	r3, [pc, #20]	@ (800f3cc <_vfiprintf_r+0x228>)
 800f3b6:	a904      	add	r1, sp, #16
 800f3b8:	4630      	mov	r0, r6
 800f3ba:	f000 f879 	bl	800f4b0 <_printf_i>
 800f3be:	e7e4      	b.n	800f38a <_vfiprintf_r+0x1e6>
 800f3c0:	0800fcf8 	.word	0x0800fcf8
 800f3c4:	0800fd02 	.word	0x0800fd02
 800f3c8:	00000000 	.word	0x00000000
 800f3cc:	0800f17f 	.word	0x0800f17f
 800f3d0:	0800fcfe 	.word	0x0800fcfe

0800f3d4 <_printf_common>:
 800f3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3d8:	4616      	mov	r6, r2
 800f3da:	4698      	mov	r8, r3
 800f3dc:	688a      	ldr	r2, [r1, #8]
 800f3de:	690b      	ldr	r3, [r1, #16]
 800f3e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	bfb8      	it	lt
 800f3e8:	4613      	movlt	r3, r2
 800f3ea:	6033      	str	r3, [r6, #0]
 800f3ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f3f0:	4607      	mov	r7, r0
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	b10a      	cbz	r2, 800f3fa <_printf_common+0x26>
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	6033      	str	r3, [r6, #0]
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	0699      	lsls	r1, r3, #26
 800f3fe:	bf42      	ittt	mi
 800f400:	6833      	ldrmi	r3, [r6, #0]
 800f402:	3302      	addmi	r3, #2
 800f404:	6033      	strmi	r3, [r6, #0]
 800f406:	6825      	ldr	r5, [r4, #0]
 800f408:	f015 0506 	ands.w	r5, r5, #6
 800f40c:	d106      	bne.n	800f41c <_printf_common+0x48>
 800f40e:	f104 0a19 	add.w	sl, r4, #25
 800f412:	68e3      	ldr	r3, [r4, #12]
 800f414:	6832      	ldr	r2, [r6, #0]
 800f416:	1a9b      	subs	r3, r3, r2
 800f418:	42ab      	cmp	r3, r5
 800f41a:	dc26      	bgt.n	800f46a <_printf_common+0x96>
 800f41c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f420:	6822      	ldr	r2, [r4, #0]
 800f422:	3b00      	subs	r3, #0
 800f424:	bf18      	it	ne
 800f426:	2301      	movne	r3, #1
 800f428:	0692      	lsls	r2, r2, #26
 800f42a:	d42b      	bmi.n	800f484 <_printf_common+0xb0>
 800f42c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f430:	4641      	mov	r1, r8
 800f432:	4638      	mov	r0, r7
 800f434:	47c8      	blx	r9
 800f436:	3001      	adds	r0, #1
 800f438:	d01e      	beq.n	800f478 <_printf_common+0xa4>
 800f43a:	6823      	ldr	r3, [r4, #0]
 800f43c:	6922      	ldr	r2, [r4, #16]
 800f43e:	f003 0306 	and.w	r3, r3, #6
 800f442:	2b04      	cmp	r3, #4
 800f444:	bf02      	ittt	eq
 800f446:	68e5      	ldreq	r5, [r4, #12]
 800f448:	6833      	ldreq	r3, [r6, #0]
 800f44a:	1aed      	subeq	r5, r5, r3
 800f44c:	68a3      	ldr	r3, [r4, #8]
 800f44e:	bf0c      	ite	eq
 800f450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f454:	2500      	movne	r5, #0
 800f456:	4293      	cmp	r3, r2
 800f458:	bfc4      	itt	gt
 800f45a:	1a9b      	subgt	r3, r3, r2
 800f45c:	18ed      	addgt	r5, r5, r3
 800f45e:	2600      	movs	r6, #0
 800f460:	341a      	adds	r4, #26
 800f462:	42b5      	cmp	r5, r6
 800f464:	d11a      	bne.n	800f49c <_printf_common+0xc8>
 800f466:	2000      	movs	r0, #0
 800f468:	e008      	b.n	800f47c <_printf_common+0xa8>
 800f46a:	2301      	movs	r3, #1
 800f46c:	4652      	mov	r2, sl
 800f46e:	4641      	mov	r1, r8
 800f470:	4638      	mov	r0, r7
 800f472:	47c8      	blx	r9
 800f474:	3001      	adds	r0, #1
 800f476:	d103      	bne.n	800f480 <_printf_common+0xac>
 800f478:	f04f 30ff 	mov.w	r0, #4294967295
 800f47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f480:	3501      	adds	r5, #1
 800f482:	e7c6      	b.n	800f412 <_printf_common+0x3e>
 800f484:	18e1      	adds	r1, r4, r3
 800f486:	1c5a      	adds	r2, r3, #1
 800f488:	2030      	movs	r0, #48	@ 0x30
 800f48a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f48e:	4422      	add	r2, r4
 800f490:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f494:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f498:	3302      	adds	r3, #2
 800f49a:	e7c7      	b.n	800f42c <_printf_common+0x58>
 800f49c:	2301      	movs	r3, #1
 800f49e:	4622      	mov	r2, r4
 800f4a0:	4641      	mov	r1, r8
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	47c8      	blx	r9
 800f4a6:	3001      	adds	r0, #1
 800f4a8:	d0e6      	beq.n	800f478 <_printf_common+0xa4>
 800f4aa:	3601      	adds	r6, #1
 800f4ac:	e7d9      	b.n	800f462 <_printf_common+0x8e>
	...

0800f4b0 <_printf_i>:
 800f4b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4b4:	7e0f      	ldrb	r7, [r1, #24]
 800f4b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f4b8:	2f78      	cmp	r7, #120	@ 0x78
 800f4ba:	4691      	mov	r9, r2
 800f4bc:	4680      	mov	r8, r0
 800f4be:	460c      	mov	r4, r1
 800f4c0:	469a      	mov	sl, r3
 800f4c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f4c6:	d807      	bhi.n	800f4d8 <_printf_i+0x28>
 800f4c8:	2f62      	cmp	r7, #98	@ 0x62
 800f4ca:	d80a      	bhi.n	800f4e2 <_printf_i+0x32>
 800f4cc:	2f00      	cmp	r7, #0
 800f4ce:	f000 80d2 	beq.w	800f676 <_printf_i+0x1c6>
 800f4d2:	2f58      	cmp	r7, #88	@ 0x58
 800f4d4:	f000 80b9 	beq.w	800f64a <_printf_i+0x19a>
 800f4d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f4e0:	e03a      	b.n	800f558 <_printf_i+0xa8>
 800f4e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f4e6:	2b15      	cmp	r3, #21
 800f4e8:	d8f6      	bhi.n	800f4d8 <_printf_i+0x28>
 800f4ea:	a101      	add	r1, pc, #4	@ (adr r1, 800f4f0 <_printf_i+0x40>)
 800f4ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f4f0:	0800f549 	.word	0x0800f549
 800f4f4:	0800f55d 	.word	0x0800f55d
 800f4f8:	0800f4d9 	.word	0x0800f4d9
 800f4fc:	0800f4d9 	.word	0x0800f4d9
 800f500:	0800f4d9 	.word	0x0800f4d9
 800f504:	0800f4d9 	.word	0x0800f4d9
 800f508:	0800f55d 	.word	0x0800f55d
 800f50c:	0800f4d9 	.word	0x0800f4d9
 800f510:	0800f4d9 	.word	0x0800f4d9
 800f514:	0800f4d9 	.word	0x0800f4d9
 800f518:	0800f4d9 	.word	0x0800f4d9
 800f51c:	0800f65d 	.word	0x0800f65d
 800f520:	0800f587 	.word	0x0800f587
 800f524:	0800f617 	.word	0x0800f617
 800f528:	0800f4d9 	.word	0x0800f4d9
 800f52c:	0800f4d9 	.word	0x0800f4d9
 800f530:	0800f67f 	.word	0x0800f67f
 800f534:	0800f4d9 	.word	0x0800f4d9
 800f538:	0800f587 	.word	0x0800f587
 800f53c:	0800f4d9 	.word	0x0800f4d9
 800f540:	0800f4d9 	.word	0x0800f4d9
 800f544:	0800f61f 	.word	0x0800f61f
 800f548:	6833      	ldr	r3, [r6, #0]
 800f54a:	1d1a      	adds	r2, r3, #4
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	6032      	str	r2, [r6, #0]
 800f550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f554:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f558:	2301      	movs	r3, #1
 800f55a:	e09d      	b.n	800f698 <_printf_i+0x1e8>
 800f55c:	6833      	ldr	r3, [r6, #0]
 800f55e:	6820      	ldr	r0, [r4, #0]
 800f560:	1d19      	adds	r1, r3, #4
 800f562:	6031      	str	r1, [r6, #0]
 800f564:	0606      	lsls	r6, r0, #24
 800f566:	d501      	bpl.n	800f56c <_printf_i+0xbc>
 800f568:	681d      	ldr	r5, [r3, #0]
 800f56a:	e003      	b.n	800f574 <_printf_i+0xc4>
 800f56c:	0645      	lsls	r5, r0, #25
 800f56e:	d5fb      	bpl.n	800f568 <_printf_i+0xb8>
 800f570:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f574:	2d00      	cmp	r5, #0
 800f576:	da03      	bge.n	800f580 <_printf_i+0xd0>
 800f578:	232d      	movs	r3, #45	@ 0x2d
 800f57a:	426d      	negs	r5, r5
 800f57c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f580:	4859      	ldr	r0, [pc, #356]	@ (800f6e8 <_printf_i+0x238>)
 800f582:	230a      	movs	r3, #10
 800f584:	e011      	b.n	800f5aa <_printf_i+0xfa>
 800f586:	6821      	ldr	r1, [r4, #0]
 800f588:	6833      	ldr	r3, [r6, #0]
 800f58a:	0608      	lsls	r0, r1, #24
 800f58c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f590:	d402      	bmi.n	800f598 <_printf_i+0xe8>
 800f592:	0649      	lsls	r1, r1, #25
 800f594:	bf48      	it	mi
 800f596:	b2ad      	uxthmi	r5, r5
 800f598:	2f6f      	cmp	r7, #111	@ 0x6f
 800f59a:	4853      	ldr	r0, [pc, #332]	@ (800f6e8 <_printf_i+0x238>)
 800f59c:	6033      	str	r3, [r6, #0]
 800f59e:	bf14      	ite	ne
 800f5a0:	230a      	movne	r3, #10
 800f5a2:	2308      	moveq	r3, #8
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f5aa:	6866      	ldr	r6, [r4, #4]
 800f5ac:	60a6      	str	r6, [r4, #8]
 800f5ae:	2e00      	cmp	r6, #0
 800f5b0:	bfa2      	ittt	ge
 800f5b2:	6821      	ldrge	r1, [r4, #0]
 800f5b4:	f021 0104 	bicge.w	r1, r1, #4
 800f5b8:	6021      	strge	r1, [r4, #0]
 800f5ba:	b90d      	cbnz	r5, 800f5c0 <_printf_i+0x110>
 800f5bc:	2e00      	cmp	r6, #0
 800f5be:	d04b      	beq.n	800f658 <_printf_i+0x1a8>
 800f5c0:	4616      	mov	r6, r2
 800f5c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800f5c6:	fb03 5711 	mls	r7, r3, r1, r5
 800f5ca:	5dc7      	ldrb	r7, [r0, r7]
 800f5cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f5d0:	462f      	mov	r7, r5
 800f5d2:	42bb      	cmp	r3, r7
 800f5d4:	460d      	mov	r5, r1
 800f5d6:	d9f4      	bls.n	800f5c2 <_printf_i+0x112>
 800f5d8:	2b08      	cmp	r3, #8
 800f5da:	d10b      	bne.n	800f5f4 <_printf_i+0x144>
 800f5dc:	6823      	ldr	r3, [r4, #0]
 800f5de:	07df      	lsls	r7, r3, #31
 800f5e0:	d508      	bpl.n	800f5f4 <_printf_i+0x144>
 800f5e2:	6923      	ldr	r3, [r4, #16]
 800f5e4:	6861      	ldr	r1, [r4, #4]
 800f5e6:	4299      	cmp	r1, r3
 800f5e8:	bfde      	ittt	le
 800f5ea:	2330      	movle	r3, #48	@ 0x30
 800f5ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f5f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f5f4:	1b92      	subs	r2, r2, r6
 800f5f6:	6122      	str	r2, [r4, #16]
 800f5f8:	f8cd a000 	str.w	sl, [sp]
 800f5fc:	464b      	mov	r3, r9
 800f5fe:	aa03      	add	r2, sp, #12
 800f600:	4621      	mov	r1, r4
 800f602:	4640      	mov	r0, r8
 800f604:	f7ff fee6 	bl	800f3d4 <_printf_common>
 800f608:	3001      	adds	r0, #1
 800f60a:	d14a      	bne.n	800f6a2 <_printf_i+0x1f2>
 800f60c:	f04f 30ff 	mov.w	r0, #4294967295
 800f610:	b004      	add	sp, #16
 800f612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f616:	6823      	ldr	r3, [r4, #0]
 800f618:	f043 0320 	orr.w	r3, r3, #32
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	4833      	ldr	r0, [pc, #204]	@ (800f6ec <_printf_i+0x23c>)
 800f620:	2778      	movs	r7, #120	@ 0x78
 800f622:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	6831      	ldr	r1, [r6, #0]
 800f62a:	061f      	lsls	r7, r3, #24
 800f62c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f630:	d402      	bmi.n	800f638 <_printf_i+0x188>
 800f632:	065f      	lsls	r7, r3, #25
 800f634:	bf48      	it	mi
 800f636:	b2ad      	uxthmi	r5, r5
 800f638:	6031      	str	r1, [r6, #0]
 800f63a:	07d9      	lsls	r1, r3, #31
 800f63c:	bf44      	itt	mi
 800f63e:	f043 0320 	orrmi.w	r3, r3, #32
 800f642:	6023      	strmi	r3, [r4, #0]
 800f644:	b11d      	cbz	r5, 800f64e <_printf_i+0x19e>
 800f646:	2310      	movs	r3, #16
 800f648:	e7ac      	b.n	800f5a4 <_printf_i+0xf4>
 800f64a:	4827      	ldr	r0, [pc, #156]	@ (800f6e8 <_printf_i+0x238>)
 800f64c:	e7e9      	b.n	800f622 <_printf_i+0x172>
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	f023 0320 	bic.w	r3, r3, #32
 800f654:	6023      	str	r3, [r4, #0]
 800f656:	e7f6      	b.n	800f646 <_printf_i+0x196>
 800f658:	4616      	mov	r6, r2
 800f65a:	e7bd      	b.n	800f5d8 <_printf_i+0x128>
 800f65c:	6833      	ldr	r3, [r6, #0]
 800f65e:	6825      	ldr	r5, [r4, #0]
 800f660:	6961      	ldr	r1, [r4, #20]
 800f662:	1d18      	adds	r0, r3, #4
 800f664:	6030      	str	r0, [r6, #0]
 800f666:	062e      	lsls	r6, r5, #24
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	d501      	bpl.n	800f670 <_printf_i+0x1c0>
 800f66c:	6019      	str	r1, [r3, #0]
 800f66e:	e002      	b.n	800f676 <_printf_i+0x1c6>
 800f670:	0668      	lsls	r0, r5, #25
 800f672:	d5fb      	bpl.n	800f66c <_printf_i+0x1bc>
 800f674:	8019      	strh	r1, [r3, #0]
 800f676:	2300      	movs	r3, #0
 800f678:	6123      	str	r3, [r4, #16]
 800f67a:	4616      	mov	r6, r2
 800f67c:	e7bc      	b.n	800f5f8 <_printf_i+0x148>
 800f67e:	6833      	ldr	r3, [r6, #0]
 800f680:	1d1a      	adds	r2, r3, #4
 800f682:	6032      	str	r2, [r6, #0]
 800f684:	681e      	ldr	r6, [r3, #0]
 800f686:	6862      	ldr	r2, [r4, #4]
 800f688:	2100      	movs	r1, #0
 800f68a:	4630      	mov	r0, r6
 800f68c:	f7f0 fdc0 	bl	8000210 <memchr>
 800f690:	b108      	cbz	r0, 800f696 <_printf_i+0x1e6>
 800f692:	1b80      	subs	r0, r0, r6
 800f694:	6060      	str	r0, [r4, #4]
 800f696:	6863      	ldr	r3, [r4, #4]
 800f698:	6123      	str	r3, [r4, #16]
 800f69a:	2300      	movs	r3, #0
 800f69c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6a0:	e7aa      	b.n	800f5f8 <_printf_i+0x148>
 800f6a2:	6923      	ldr	r3, [r4, #16]
 800f6a4:	4632      	mov	r2, r6
 800f6a6:	4649      	mov	r1, r9
 800f6a8:	4640      	mov	r0, r8
 800f6aa:	47d0      	blx	sl
 800f6ac:	3001      	adds	r0, #1
 800f6ae:	d0ad      	beq.n	800f60c <_printf_i+0x15c>
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	079b      	lsls	r3, r3, #30
 800f6b4:	d413      	bmi.n	800f6de <_printf_i+0x22e>
 800f6b6:	68e0      	ldr	r0, [r4, #12]
 800f6b8:	9b03      	ldr	r3, [sp, #12]
 800f6ba:	4298      	cmp	r0, r3
 800f6bc:	bfb8      	it	lt
 800f6be:	4618      	movlt	r0, r3
 800f6c0:	e7a6      	b.n	800f610 <_printf_i+0x160>
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	4632      	mov	r2, r6
 800f6c6:	4649      	mov	r1, r9
 800f6c8:	4640      	mov	r0, r8
 800f6ca:	47d0      	blx	sl
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	d09d      	beq.n	800f60c <_printf_i+0x15c>
 800f6d0:	3501      	adds	r5, #1
 800f6d2:	68e3      	ldr	r3, [r4, #12]
 800f6d4:	9903      	ldr	r1, [sp, #12]
 800f6d6:	1a5b      	subs	r3, r3, r1
 800f6d8:	42ab      	cmp	r3, r5
 800f6da:	dcf2      	bgt.n	800f6c2 <_printf_i+0x212>
 800f6dc:	e7eb      	b.n	800f6b6 <_printf_i+0x206>
 800f6de:	2500      	movs	r5, #0
 800f6e0:	f104 0619 	add.w	r6, r4, #25
 800f6e4:	e7f5      	b.n	800f6d2 <_printf_i+0x222>
 800f6e6:	bf00      	nop
 800f6e8:	0800fd09 	.word	0x0800fd09
 800f6ec:	0800fd1a 	.word	0x0800fd1a

0800f6f0 <__sflush_r>:
 800f6f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f8:	0716      	lsls	r6, r2, #28
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	460c      	mov	r4, r1
 800f6fe:	d454      	bmi.n	800f7aa <__sflush_r+0xba>
 800f700:	684b      	ldr	r3, [r1, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	dc02      	bgt.n	800f70c <__sflush_r+0x1c>
 800f706:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f708:	2b00      	cmp	r3, #0
 800f70a:	dd48      	ble.n	800f79e <__sflush_r+0xae>
 800f70c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f70e:	2e00      	cmp	r6, #0
 800f710:	d045      	beq.n	800f79e <__sflush_r+0xae>
 800f712:	2300      	movs	r3, #0
 800f714:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f718:	682f      	ldr	r7, [r5, #0]
 800f71a:	6a21      	ldr	r1, [r4, #32]
 800f71c:	602b      	str	r3, [r5, #0]
 800f71e:	d030      	beq.n	800f782 <__sflush_r+0x92>
 800f720:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f722:	89a3      	ldrh	r3, [r4, #12]
 800f724:	0759      	lsls	r1, r3, #29
 800f726:	d505      	bpl.n	800f734 <__sflush_r+0x44>
 800f728:	6863      	ldr	r3, [r4, #4]
 800f72a:	1ad2      	subs	r2, r2, r3
 800f72c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f72e:	b10b      	cbz	r3, 800f734 <__sflush_r+0x44>
 800f730:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f732:	1ad2      	subs	r2, r2, r3
 800f734:	2300      	movs	r3, #0
 800f736:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f738:	6a21      	ldr	r1, [r4, #32]
 800f73a:	4628      	mov	r0, r5
 800f73c:	47b0      	blx	r6
 800f73e:	1c43      	adds	r3, r0, #1
 800f740:	89a3      	ldrh	r3, [r4, #12]
 800f742:	d106      	bne.n	800f752 <__sflush_r+0x62>
 800f744:	6829      	ldr	r1, [r5, #0]
 800f746:	291d      	cmp	r1, #29
 800f748:	d82b      	bhi.n	800f7a2 <__sflush_r+0xb2>
 800f74a:	4a2a      	ldr	r2, [pc, #168]	@ (800f7f4 <__sflush_r+0x104>)
 800f74c:	410a      	asrs	r2, r1
 800f74e:	07d6      	lsls	r6, r2, #31
 800f750:	d427      	bmi.n	800f7a2 <__sflush_r+0xb2>
 800f752:	2200      	movs	r2, #0
 800f754:	6062      	str	r2, [r4, #4]
 800f756:	04d9      	lsls	r1, r3, #19
 800f758:	6922      	ldr	r2, [r4, #16]
 800f75a:	6022      	str	r2, [r4, #0]
 800f75c:	d504      	bpl.n	800f768 <__sflush_r+0x78>
 800f75e:	1c42      	adds	r2, r0, #1
 800f760:	d101      	bne.n	800f766 <__sflush_r+0x76>
 800f762:	682b      	ldr	r3, [r5, #0]
 800f764:	b903      	cbnz	r3, 800f768 <__sflush_r+0x78>
 800f766:	6560      	str	r0, [r4, #84]	@ 0x54
 800f768:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f76a:	602f      	str	r7, [r5, #0]
 800f76c:	b1b9      	cbz	r1, 800f79e <__sflush_r+0xae>
 800f76e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f772:	4299      	cmp	r1, r3
 800f774:	d002      	beq.n	800f77c <__sflush_r+0x8c>
 800f776:	4628      	mov	r0, r5
 800f778:	f7ff fb48 	bl	800ee0c <_free_r>
 800f77c:	2300      	movs	r3, #0
 800f77e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f780:	e00d      	b.n	800f79e <__sflush_r+0xae>
 800f782:	2301      	movs	r3, #1
 800f784:	4628      	mov	r0, r5
 800f786:	47b0      	blx	r6
 800f788:	4602      	mov	r2, r0
 800f78a:	1c50      	adds	r0, r2, #1
 800f78c:	d1c9      	bne.n	800f722 <__sflush_r+0x32>
 800f78e:	682b      	ldr	r3, [r5, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d0c6      	beq.n	800f722 <__sflush_r+0x32>
 800f794:	2b1d      	cmp	r3, #29
 800f796:	d001      	beq.n	800f79c <__sflush_r+0xac>
 800f798:	2b16      	cmp	r3, #22
 800f79a:	d11e      	bne.n	800f7da <__sflush_r+0xea>
 800f79c:	602f      	str	r7, [r5, #0]
 800f79e:	2000      	movs	r0, #0
 800f7a0:	e022      	b.n	800f7e8 <__sflush_r+0xf8>
 800f7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7a6:	b21b      	sxth	r3, r3
 800f7a8:	e01b      	b.n	800f7e2 <__sflush_r+0xf2>
 800f7aa:	690f      	ldr	r7, [r1, #16]
 800f7ac:	2f00      	cmp	r7, #0
 800f7ae:	d0f6      	beq.n	800f79e <__sflush_r+0xae>
 800f7b0:	0793      	lsls	r3, r2, #30
 800f7b2:	680e      	ldr	r6, [r1, #0]
 800f7b4:	bf08      	it	eq
 800f7b6:	694b      	ldreq	r3, [r1, #20]
 800f7b8:	600f      	str	r7, [r1, #0]
 800f7ba:	bf18      	it	ne
 800f7bc:	2300      	movne	r3, #0
 800f7be:	eba6 0807 	sub.w	r8, r6, r7
 800f7c2:	608b      	str	r3, [r1, #8]
 800f7c4:	f1b8 0f00 	cmp.w	r8, #0
 800f7c8:	dde9      	ble.n	800f79e <__sflush_r+0xae>
 800f7ca:	6a21      	ldr	r1, [r4, #32]
 800f7cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f7ce:	4643      	mov	r3, r8
 800f7d0:	463a      	mov	r2, r7
 800f7d2:	4628      	mov	r0, r5
 800f7d4:	47b0      	blx	r6
 800f7d6:	2800      	cmp	r0, #0
 800f7d8:	dc08      	bgt.n	800f7ec <__sflush_r+0xfc>
 800f7da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7e2:	81a3      	strh	r3, [r4, #12]
 800f7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7ec:	4407      	add	r7, r0
 800f7ee:	eba8 0800 	sub.w	r8, r8, r0
 800f7f2:	e7e7      	b.n	800f7c4 <__sflush_r+0xd4>
 800f7f4:	dfbffffe 	.word	0xdfbffffe

0800f7f8 <_fflush_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	690b      	ldr	r3, [r1, #16]
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	460c      	mov	r4, r1
 800f800:	b913      	cbnz	r3, 800f808 <_fflush_r+0x10>
 800f802:	2500      	movs	r5, #0
 800f804:	4628      	mov	r0, r5
 800f806:	bd38      	pop	{r3, r4, r5, pc}
 800f808:	b118      	cbz	r0, 800f812 <_fflush_r+0x1a>
 800f80a:	6a03      	ldr	r3, [r0, #32]
 800f80c:	b90b      	cbnz	r3, 800f812 <_fflush_r+0x1a>
 800f80e:	f7ff f99b 	bl	800eb48 <__sinit>
 800f812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d0f3      	beq.n	800f802 <_fflush_r+0xa>
 800f81a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f81c:	07d0      	lsls	r0, r2, #31
 800f81e:	d404      	bmi.n	800f82a <_fflush_r+0x32>
 800f820:	0599      	lsls	r1, r3, #22
 800f822:	d402      	bmi.n	800f82a <_fflush_r+0x32>
 800f824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f826:	f7ff faee 	bl	800ee06 <__retarget_lock_acquire_recursive>
 800f82a:	4628      	mov	r0, r5
 800f82c:	4621      	mov	r1, r4
 800f82e:	f7ff ff5f 	bl	800f6f0 <__sflush_r>
 800f832:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f834:	07da      	lsls	r2, r3, #31
 800f836:	4605      	mov	r5, r0
 800f838:	d4e4      	bmi.n	800f804 <_fflush_r+0xc>
 800f83a:	89a3      	ldrh	r3, [r4, #12]
 800f83c:	059b      	lsls	r3, r3, #22
 800f83e:	d4e1      	bmi.n	800f804 <_fflush_r+0xc>
 800f840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f842:	f7ff fae1 	bl	800ee08 <__retarget_lock_release_recursive>
 800f846:	e7dd      	b.n	800f804 <_fflush_r+0xc>

0800f848 <__swbuf_r>:
 800f848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f84a:	460e      	mov	r6, r1
 800f84c:	4614      	mov	r4, r2
 800f84e:	4605      	mov	r5, r0
 800f850:	b118      	cbz	r0, 800f85a <__swbuf_r+0x12>
 800f852:	6a03      	ldr	r3, [r0, #32]
 800f854:	b90b      	cbnz	r3, 800f85a <__swbuf_r+0x12>
 800f856:	f7ff f977 	bl	800eb48 <__sinit>
 800f85a:	69a3      	ldr	r3, [r4, #24]
 800f85c:	60a3      	str	r3, [r4, #8]
 800f85e:	89a3      	ldrh	r3, [r4, #12]
 800f860:	071a      	lsls	r2, r3, #28
 800f862:	d501      	bpl.n	800f868 <__swbuf_r+0x20>
 800f864:	6923      	ldr	r3, [r4, #16]
 800f866:	b943      	cbnz	r3, 800f87a <__swbuf_r+0x32>
 800f868:	4621      	mov	r1, r4
 800f86a:	4628      	mov	r0, r5
 800f86c:	f000 f82a 	bl	800f8c4 <__swsetup_r>
 800f870:	b118      	cbz	r0, 800f87a <__swbuf_r+0x32>
 800f872:	f04f 37ff 	mov.w	r7, #4294967295
 800f876:	4638      	mov	r0, r7
 800f878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f87a:	6823      	ldr	r3, [r4, #0]
 800f87c:	6922      	ldr	r2, [r4, #16]
 800f87e:	1a98      	subs	r0, r3, r2
 800f880:	6963      	ldr	r3, [r4, #20]
 800f882:	b2f6      	uxtb	r6, r6
 800f884:	4283      	cmp	r3, r0
 800f886:	4637      	mov	r7, r6
 800f888:	dc05      	bgt.n	800f896 <__swbuf_r+0x4e>
 800f88a:	4621      	mov	r1, r4
 800f88c:	4628      	mov	r0, r5
 800f88e:	f7ff ffb3 	bl	800f7f8 <_fflush_r>
 800f892:	2800      	cmp	r0, #0
 800f894:	d1ed      	bne.n	800f872 <__swbuf_r+0x2a>
 800f896:	68a3      	ldr	r3, [r4, #8]
 800f898:	3b01      	subs	r3, #1
 800f89a:	60a3      	str	r3, [r4, #8]
 800f89c:	6823      	ldr	r3, [r4, #0]
 800f89e:	1c5a      	adds	r2, r3, #1
 800f8a0:	6022      	str	r2, [r4, #0]
 800f8a2:	701e      	strb	r6, [r3, #0]
 800f8a4:	6962      	ldr	r2, [r4, #20]
 800f8a6:	1c43      	adds	r3, r0, #1
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d004      	beq.n	800f8b6 <__swbuf_r+0x6e>
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	07db      	lsls	r3, r3, #31
 800f8b0:	d5e1      	bpl.n	800f876 <__swbuf_r+0x2e>
 800f8b2:	2e0a      	cmp	r6, #10
 800f8b4:	d1df      	bne.n	800f876 <__swbuf_r+0x2e>
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	f7ff ff9d 	bl	800f7f8 <_fflush_r>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d0d9      	beq.n	800f876 <__swbuf_r+0x2e>
 800f8c2:	e7d6      	b.n	800f872 <__swbuf_r+0x2a>

0800f8c4 <__swsetup_r>:
 800f8c4:	b538      	push	{r3, r4, r5, lr}
 800f8c6:	4b29      	ldr	r3, [pc, #164]	@ (800f96c <__swsetup_r+0xa8>)
 800f8c8:	4605      	mov	r5, r0
 800f8ca:	6818      	ldr	r0, [r3, #0]
 800f8cc:	460c      	mov	r4, r1
 800f8ce:	b118      	cbz	r0, 800f8d8 <__swsetup_r+0x14>
 800f8d0:	6a03      	ldr	r3, [r0, #32]
 800f8d2:	b90b      	cbnz	r3, 800f8d8 <__swsetup_r+0x14>
 800f8d4:	f7ff f938 	bl	800eb48 <__sinit>
 800f8d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8dc:	0719      	lsls	r1, r3, #28
 800f8de:	d422      	bmi.n	800f926 <__swsetup_r+0x62>
 800f8e0:	06da      	lsls	r2, r3, #27
 800f8e2:	d407      	bmi.n	800f8f4 <__swsetup_r+0x30>
 800f8e4:	2209      	movs	r2, #9
 800f8e6:	602a      	str	r2, [r5, #0]
 800f8e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8ec:	81a3      	strh	r3, [r4, #12]
 800f8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f2:	e033      	b.n	800f95c <__swsetup_r+0x98>
 800f8f4:	0758      	lsls	r0, r3, #29
 800f8f6:	d512      	bpl.n	800f91e <__swsetup_r+0x5a>
 800f8f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8fa:	b141      	cbz	r1, 800f90e <__swsetup_r+0x4a>
 800f8fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f900:	4299      	cmp	r1, r3
 800f902:	d002      	beq.n	800f90a <__swsetup_r+0x46>
 800f904:	4628      	mov	r0, r5
 800f906:	f7ff fa81 	bl	800ee0c <_free_r>
 800f90a:	2300      	movs	r3, #0
 800f90c:	6363      	str	r3, [r4, #52]	@ 0x34
 800f90e:	89a3      	ldrh	r3, [r4, #12]
 800f910:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f914:	81a3      	strh	r3, [r4, #12]
 800f916:	2300      	movs	r3, #0
 800f918:	6063      	str	r3, [r4, #4]
 800f91a:	6923      	ldr	r3, [r4, #16]
 800f91c:	6023      	str	r3, [r4, #0]
 800f91e:	89a3      	ldrh	r3, [r4, #12]
 800f920:	f043 0308 	orr.w	r3, r3, #8
 800f924:	81a3      	strh	r3, [r4, #12]
 800f926:	6923      	ldr	r3, [r4, #16]
 800f928:	b94b      	cbnz	r3, 800f93e <__swsetup_r+0x7a>
 800f92a:	89a3      	ldrh	r3, [r4, #12]
 800f92c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f934:	d003      	beq.n	800f93e <__swsetup_r+0x7a>
 800f936:	4621      	mov	r1, r4
 800f938:	4628      	mov	r0, r5
 800f93a:	f000 f895 	bl	800fa68 <__smakebuf_r>
 800f93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f942:	f013 0201 	ands.w	r2, r3, #1
 800f946:	d00a      	beq.n	800f95e <__swsetup_r+0x9a>
 800f948:	2200      	movs	r2, #0
 800f94a:	60a2      	str	r2, [r4, #8]
 800f94c:	6962      	ldr	r2, [r4, #20]
 800f94e:	4252      	negs	r2, r2
 800f950:	61a2      	str	r2, [r4, #24]
 800f952:	6922      	ldr	r2, [r4, #16]
 800f954:	b942      	cbnz	r2, 800f968 <__swsetup_r+0xa4>
 800f956:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f95a:	d1c5      	bne.n	800f8e8 <__swsetup_r+0x24>
 800f95c:	bd38      	pop	{r3, r4, r5, pc}
 800f95e:	0799      	lsls	r1, r3, #30
 800f960:	bf58      	it	pl
 800f962:	6962      	ldrpl	r2, [r4, #20]
 800f964:	60a2      	str	r2, [r4, #8]
 800f966:	e7f4      	b.n	800f952 <__swsetup_r+0x8e>
 800f968:	2000      	movs	r0, #0
 800f96a:	e7f7      	b.n	800f95c <__swsetup_r+0x98>
 800f96c:	20000038 	.word	0x20000038

0800f970 <memmove>:
 800f970:	4288      	cmp	r0, r1
 800f972:	b510      	push	{r4, lr}
 800f974:	eb01 0402 	add.w	r4, r1, r2
 800f978:	d902      	bls.n	800f980 <memmove+0x10>
 800f97a:	4284      	cmp	r4, r0
 800f97c:	4623      	mov	r3, r4
 800f97e:	d807      	bhi.n	800f990 <memmove+0x20>
 800f980:	1e43      	subs	r3, r0, #1
 800f982:	42a1      	cmp	r1, r4
 800f984:	d008      	beq.n	800f998 <memmove+0x28>
 800f986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f98a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f98e:	e7f8      	b.n	800f982 <memmove+0x12>
 800f990:	4402      	add	r2, r0
 800f992:	4601      	mov	r1, r0
 800f994:	428a      	cmp	r2, r1
 800f996:	d100      	bne.n	800f99a <memmove+0x2a>
 800f998:	bd10      	pop	{r4, pc}
 800f99a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f99e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9a2:	e7f7      	b.n	800f994 <memmove+0x24>

0800f9a4 <memcpy>:
 800f9a4:	440a      	add	r2, r1
 800f9a6:	4291      	cmp	r1, r2
 800f9a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9ac:	d100      	bne.n	800f9b0 <memcpy+0xc>
 800f9ae:	4770      	bx	lr
 800f9b0:	b510      	push	{r4, lr}
 800f9b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9ba:	4291      	cmp	r1, r2
 800f9bc:	d1f9      	bne.n	800f9b2 <memcpy+0xe>
 800f9be:	bd10      	pop	{r4, pc}

0800f9c0 <_realloc_r>:
 800f9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9c4:	4680      	mov	r8, r0
 800f9c6:	4615      	mov	r5, r2
 800f9c8:	460c      	mov	r4, r1
 800f9ca:	b921      	cbnz	r1, 800f9d6 <_realloc_r+0x16>
 800f9cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9d0:	4611      	mov	r1, r2
 800f9d2:	f7fe bfa1 	b.w	800e918 <_malloc_r>
 800f9d6:	b92a      	cbnz	r2, 800f9e4 <_realloc_r+0x24>
 800f9d8:	f7ff fa18 	bl	800ee0c <_free_r>
 800f9dc:	2400      	movs	r4, #0
 800f9de:	4620      	mov	r0, r4
 800f9e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9e4:	f000 f89e 	bl	800fb24 <_malloc_usable_size_r>
 800f9e8:	4285      	cmp	r5, r0
 800f9ea:	4606      	mov	r6, r0
 800f9ec:	d802      	bhi.n	800f9f4 <_realloc_r+0x34>
 800f9ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f9f2:	d8f4      	bhi.n	800f9de <_realloc_r+0x1e>
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	f7fe ff8e 	bl	800e918 <_malloc_r>
 800f9fc:	4607      	mov	r7, r0
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	d0ec      	beq.n	800f9dc <_realloc_r+0x1c>
 800fa02:	42b5      	cmp	r5, r6
 800fa04:	462a      	mov	r2, r5
 800fa06:	4621      	mov	r1, r4
 800fa08:	bf28      	it	cs
 800fa0a:	4632      	movcs	r2, r6
 800fa0c:	f7ff ffca 	bl	800f9a4 <memcpy>
 800fa10:	4621      	mov	r1, r4
 800fa12:	4640      	mov	r0, r8
 800fa14:	f7ff f9fa 	bl	800ee0c <_free_r>
 800fa18:	463c      	mov	r4, r7
 800fa1a:	e7e0      	b.n	800f9de <_realloc_r+0x1e>

0800fa1c <__swhatbuf_r>:
 800fa1c:	b570      	push	{r4, r5, r6, lr}
 800fa1e:	460c      	mov	r4, r1
 800fa20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa24:	2900      	cmp	r1, #0
 800fa26:	b096      	sub	sp, #88	@ 0x58
 800fa28:	4615      	mov	r5, r2
 800fa2a:	461e      	mov	r6, r3
 800fa2c:	da0d      	bge.n	800fa4a <__swhatbuf_r+0x2e>
 800fa2e:	89a3      	ldrh	r3, [r4, #12]
 800fa30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fa34:	f04f 0100 	mov.w	r1, #0
 800fa38:	bf14      	ite	ne
 800fa3a:	2340      	movne	r3, #64	@ 0x40
 800fa3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fa40:	2000      	movs	r0, #0
 800fa42:	6031      	str	r1, [r6, #0]
 800fa44:	602b      	str	r3, [r5, #0]
 800fa46:	b016      	add	sp, #88	@ 0x58
 800fa48:	bd70      	pop	{r4, r5, r6, pc}
 800fa4a:	466a      	mov	r2, sp
 800fa4c:	f000 f848 	bl	800fae0 <_fstat_r>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	dbec      	blt.n	800fa2e <__swhatbuf_r+0x12>
 800fa54:	9901      	ldr	r1, [sp, #4]
 800fa56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fa5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fa5e:	4259      	negs	r1, r3
 800fa60:	4159      	adcs	r1, r3
 800fa62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa66:	e7eb      	b.n	800fa40 <__swhatbuf_r+0x24>

0800fa68 <__smakebuf_r>:
 800fa68:	898b      	ldrh	r3, [r1, #12]
 800fa6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa6c:	079d      	lsls	r5, r3, #30
 800fa6e:	4606      	mov	r6, r0
 800fa70:	460c      	mov	r4, r1
 800fa72:	d507      	bpl.n	800fa84 <__smakebuf_r+0x1c>
 800fa74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fa78:	6023      	str	r3, [r4, #0]
 800fa7a:	6123      	str	r3, [r4, #16]
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	6163      	str	r3, [r4, #20]
 800fa80:	b003      	add	sp, #12
 800fa82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa84:	ab01      	add	r3, sp, #4
 800fa86:	466a      	mov	r2, sp
 800fa88:	f7ff ffc8 	bl	800fa1c <__swhatbuf_r>
 800fa8c:	9f00      	ldr	r7, [sp, #0]
 800fa8e:	4605      	mov	r5, r0
 800fa90:	4639      	mov	r1, r7
 800fa92:	4630      	mov	r0, r6
 800fa94:	f7fe ff40 	bl	800e918 <_malloc_r>
 800fa98:	b948      	cbnz	r0, 800faae <__smakebuf_r+0x46>
 800fa9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa9e:	059a      	lsls	r2, r3, #22
 800faa0:	d4ee      	bmi.n	800fa80 <__smakebuf_r+0x18>
 800faa2:	f023 0303 	bic.w	r3, r3, #3
 800faa6:	f043 0302 	orr.w	r3, r3, #2
 800faaa:	81a3      	strh	r3, [r4, #12]
 800faac:	e7e2      	b.n	800fa74 <__smakebuf_r+0xc>
 800faae:	89a3      	ldrh	r3, [r4, #12]
 800fab0:	6020      	str	r0, [r4, #0]
 800fab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fab6:	81a3      	strh	r3, [r4, #12]
 800fab8:	9b01      	ldr	r3, [sp, #4]
 800faba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fabe:	b15b      	cbz	r3, 800fad8 <__smakebuf_r+0x70>
 800fac0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fac4:	4630      	mov	r0, r6
 800fac6:	f000 f81d 	bl	800fb04 <_isatty_r>
 800faca:	b128      	cbz	r0, 800fad8 <__smakebuf_r+0x70>
 800facc:	89a3      	ldrh	r3, [r4, #12]
 800face:	f023 0303 	bic.w	r3, r3, #3
 800fad2:	f043 0301 	orr.w	r3, r3, #1
 800fad6:	81a3      	strh	r3, [r4, #12]
 800fad8:	89a3      	ldrh	r3, [r4, #12]
 800fada:	431d      	orrs	r5, r3
 800fadc:	81a5      	strh	r5, [r4, #12]
 800fade:	e7cf      	b.n	800fa80 <__smakebuf_r+0x18>

0800fae0 <_fstat_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4d07      	ldr	r5, [pc, #28]	@ (800fb00 <_fstat_r+0x20>)
 800fae4:	2300      	movs	r3, #0
 800fae6:	4604      	mov	r4, r0
 800fae8:	4608      	mov	r0, r1
 800faea:	4611      	mov	r1, r2
 800faec:	602b      	str	r3, [r5, #0]
 800faee:	f7f2 fa60 	bl	8001fb2 <_fstat>
 800faf2:	1c43      	adds	r3, r0, #1
 800faf4:	d102      	bne.n	800fafc <_fstat_r+0x1c>
 800faf6:	682b      	ldr	r3, [r5, #0]
 800faf8:	b103      	cbz	r3, 800fafc <_fstat_r+0x1c>
 800fafa:	6023      	str	r3, [r4, #0]
 800fafc:	bd38      	pop	{r3, r4, r5, pc}
 800fafe:	bf00      	nop
 800fb00:	20000e80 	.word	0x20000e80

0800fb04 <_isatty_r>:
 800fb04:	b538      	push	{r3, r4, r5, lr}
 800fb06:	4d06      	ldr	r5, [pc, #24]	@ (800fb20 <_isatty_r+0x1c>)
 800fb08:	2300      	movs	r3, #0
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	4608      	mov	r0, r1
 800fb0e:	602b      	str	r3, [r5, #0]
 800fb10:	f7f2 fa5f 	bl	8001fd2 <_isatty>
 800fb14:	1c43      	adds	r3, r0, #1
 800fb16:	d102      	bne.n	800fb1e <_isatty_r+0x1a>
 800fb18:	682b      	ldr	r3, [r5, #0]
 800fb1a:	b103      	cbz	r3, 800fb1e <_isatty_r+0x1a>
 800fb1c:	6023      	str	r3, [r4, #0]
 800fb1e:	bd38      	pop	{r3, r4, r5, pc}
 800fb20:	20000e80 	.word	0x20000e80

0800fb24 <_malloc_usable_size_r>:
 800fb24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb28:	1f18      	subs	r0, r3, #4
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	bfbc      	itt	lt
 800fb2e:	580b      	ldrlt	r3, [r1, r0]
 800fb30:	18c0      	addlt	r0, r0, r3
 800fb32:	4770      	bx	lr

0800fb34 <_init>:
 800fb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb36:	bf00      	nop
 800fb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb3a:	bc08      	pop	{r3}
 800fb3c:	469e      	mov	lr, r3
 800fb3e:	4770      	bx	lr

0800fb40 <_fini>:
 800fb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb42:	bf00      	nop
 800fb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb46:	bc08      	pop	{r3}
 800fb48:	469e      	mov	lr, r3
 800fb4a:	4770      	bx	lr
