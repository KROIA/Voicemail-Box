
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010650  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08010810  08010810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109fc  080109fc  00012080  2**0
                  CONTENTS
  4 .ARM          00000008  080109fc  080109fc  000119fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a04  08010a04  00012080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a04  08010a04  00011a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010a08  08010a08  00011a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08010a0c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012080  2**0
                  CONTENTS
 10 .bss          000016c4  20000080  20000080  00012080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001744  20001744  00012080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ed0a  00000000  00000000  000120b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006477  00000000  00000000  00040dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002718  00000000  00000000  00047238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e4a  00000000  00000000  00049950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033ccf  00000000  00000000  0004b79a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035227  00000000  00000000  0007f469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00117ccb  00000000  00000000  000b4690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001cc35b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aca0  00000000  00000000  001cc3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  001d7040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080107f8 	.word	0x080107f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	080107f8 	.word	0x080107f8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <print>:
} RX_Data;
volatile RX_Data rx_data;


void print(const char *text)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	//printf(text);
	uint16_t len = strlen(text);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe29 	bl	8000200 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, text, len, 100);
 80005b2:	89fa      	ldrh	r2, [r7, #14]
 80005b4:	2364      	movs	r3, #100	@ 0x64
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <print+0x28>)
 80005ba:	f009 fc7f 	bl	8009ebc <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000448 	.word	0x20000448

080005cc <println>:
void println(const char* text)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	print(text);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff ffe3 	bl	80005a0 <print>
	print("\n\r");
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <println+0x1c>)
 80005dc:	f7ff ffe0 	bl	80005a0 <print>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08010810 	.word	0x08010810

080005ec <sendToESP>:
#define ESP_TIMEOUT 2000         // Timeout in milliseconds
#define ESP_RESPONSE_SIZE 128    // Buffer size for response

/* Function to send AT command over SPI and receive response */
int sendToESP(const char *cmd)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b0a6      	sub	sp, #152	@ 0x98
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    //char response[ESP_RESPONSE_SIZE] = {0}; // Buffer for ESP32 response
    uint8_t txBuffer[ESP_RESPONSE_SIZE] = {0};
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	227c      	movs	r2, #124	@ 0x7c
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f00f fd11 	bl	8010028 <memset>
    int index = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint32_t startTime = HAL_GetTick(); // Start timer
 800060c:	f001 fe16 	bl	800223c <HAL_GetTick>
 8000610:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    // Copy the AT command into the buffer and append "\r\n"
    snprintf((char *)txBuffer, ESP_RESPONSE_SIZE, "%s\r\n", cmd);
 8000614:	f107 000c 	add.w	r0, r7, #12
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a20      	ldr	r2, [pc, #128]	@ (800069c <sendToESP+0xb0>)
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	f00f fccf 	bl	800ffc0 <sniprintf>
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Adjust GPIO pin based on your setup

    // Send the AT command via SPI
    //HAL_SPI_Transmit(&hspi1, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart6, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY);
    HAL_StatusTypeDef result = HAL_UART_Transmit_DMA(&huart6, txBuffer, strlen((char *)txBuffer));
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fdea 	bl	8000200 <strlen>
 800062c:	4603      	mov	r3, r0
 800062e:	b29a      	uxth	r2, r3
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	4619      	mov	r1, r3
 8000636:	481a      	ldr	r0, [pc, #104]	@ (80006a0 <sendToESP+0xb4>)
 8000638:	f009 fccc 	bl	8009fd4 <HAL_UART_Transmit_DMA>
 800063c:	4603      	mov	r3, r0
 800063e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    // Small delay to allow ESP32 to process
    //HAL_Delay(10);

    // Receive response from ESP32
    while ((HAL_GetTick() - startTime) < 1000*60*5)
 8000642:	e01d      	b.n	8000680 <sendToESP+0x94>
			if (rxByte != 0xFF) // Ignore empty responses
			{
				response[index++] = rxByte;
				if (index >= ESP_RESPONSE_SIZE - 1) break; // Prevent buffer overflow
			}*/
    	if(rx_data.dataReceived)
 8000644:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <sendToESP+0xb8>)
 8000646:	791b      	ldrb	r3, [r3, #4]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d018      	beq.n	8000680 <sendToESP+0x94>
    	{
    		rx_data.dataReceived = false;
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <sendToESP+0xb8>)
 8000650:	2200      	movs	r2, #0
 8000652:	711a      	strb	r2, [r3, #4]
			// Check if response contains "OK" or "ERROR"
			if (strstr(rx_data.buff, "OK"))
 8000654:	4b13      	ldr	r3, [pc, #76]	@ (80006a4 <sendToESP+0xb8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4913      	ldr	r1, [pc, #76]	@ (80006a8 <sendToESP+0xbc>)
 800065a:	4618      	mov	r0, r3
 800065c:	f00f fcec 	bl	8010038 <strstr>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <sendToESP+0x7e>
			{
				// Pull CS high to end SPI transaction
				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
				return 1; // Success
 8000666:	2301      	movs	r3, #1
 8000668:	e014      	b.n	8000694 <sendToESP+0xa8>
			}
			else if (strstr(rx_data.buff, "ERROR"))
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <sendToESP+0xb8>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	490f      	ldr	r1, [pc, #60]	@ (80006ac <sendToESP+0xc0>)
 8000670:	4618      	mov	r0, r3
 8000672:	f00f fce1 	bl	8010038 <strstr>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <sendToESP+0x94>
			{
				// Pull CS high to end SPI transaction
			   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
				return 0; // Failure
 800067c:	2300      	movs	r3, #0
 800067e:	e009      	b.n	8000694 <sendToESP+0xa8>
    while ((HAL_GetTick() - startTime) < 1000*60*5)
 8000680:	f001 fddc 	bl	800223c <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	4a08      	ldr	r2, [pc, #32]	@ (80006b0 <sendToESP+0xc4>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d9d8      	bls.n	8000644 <sendToESP+0x58>
    	}
    }

    // Pull CS high to end SPI transaction
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
    return 0; // Timeout or no response
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	3798      	adds	r7, #152	@ 0x98
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	08010830 	.word	0x08010830
 80006a0:	20000490 	.word	0x20000490
 80006a4:	20000dcc 	.word	0x20000dcc
 80006a8:	08010838 	.word	0x08010838
 80006ac:	0801083c 	.word	0x0801083c
 80006b0:	000493df 	.word	0x000493df

080006b4 <setupESP32Hotspot>:
void setupESP32Hotspot(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
    if (sendToESP("ATE0")) {
 80006b8:	4825      	ldr	r0, [pc, #148]	@ (8000750 <setupESP32Hotspot+0x9c>)
 80006ba:	f7ff ff97 	bl	80005ec <sendToESP>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00c      	beq.n	80006de <setupESP32Hotspot+0x2a>
        println("ESP32 is responsive.");
 80006c4:	4823      	ldr	r0, [pc, #140]	@ (8000754 <setupESP32Hotspot+0xa0>)
 80006c6:	f7ff ff81 	bl	80005cc <println>
    } else {
    	println("ESP32 is not responding!");
        return;
    }
    HAL_Delay(10);
 80006ca:	200a      	movs	r0, #10
 80006cc:	f001 fdc2 	bl	8002254 <HAL_Delay>
    if (sendToESP("AT+CWMODE=2")) {
 80006d0:	4821      	ldr	r0, [pc, #132]	@ (8000758 <setupESP32Hotspot+0xa4>)
 80006d2:	f7ff ff8b 	bl	80005ec <sendToESP>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d008      	beq.n	80006ee <setupESP32Hotspot+0x3a>
 80006dc:	e003      	b.n	80006e6 <setupESP32Hotspot+0x32>
    	println("ESP32 is not responding!");
 80006de:	481f      	ldr	r0, [pc, #124]	@ (800075c <setupESP32Hotspot+0xa8>)
 80006e0:	f7ff ff74 	bl	80005cc <println>
        return;
 80006e4:	e032      	b.n	800074c <setupESP32Hotspot+0x98>
    	println("WiFi mode set to AP.");
 80006e6:	481e      	ldr	r0, [pc, #120]	@ (8000760 <setupESP32Hotspot+0xac>)
 80006e8:	f7ff ff70 	bl	80005cc <println>
 80006ec:	e002      	b.n	80006f4 <setupESP32Hotspot+0x40>
    } else {
    	println("Failed to set WiFi mode.");
 80006ee:	481d      	ldr	r0, [pc, #116]	@ (8000764 <setupESP32Hotspot+0xb0>)
 80006f0:	f7ff ff6c 	bl	80005cc <println>
    }
    HAL_Delay(10);
 80006f4:	200a      	movs	r0, #10
 80006f6:	f001 fdad 	bl	8002254 <HAL_Delay>
    if (sendToESP("AT+CWSAP=\"MyHotspot\",\"MyPassword\",5,3")) {
 80006fa:	481b      	ldr	r0, [pc, #108]	@ (8000768 <setupESP32Hotspot+0xb4>)
 80006fc:	f7ff ff76 	bl	80005ec <sendToESP>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d003      	beq.n	800070e <setupESP32Hotspot+0x5a>
    	println("Hotspot created successfully.");
 8000706:	4819      	ldr	r0, [pc, #100]	@ (800076c <setupESP32Hotspot+0xb8>)
 8000708:	f7ff ff60 	bl	80005cc <println>
 800070c:	e002      	b.n	8000714 <setupESP32Hotspot+0x60>
    } else {
    	println("Failed to create hotspot.");
 800070e:	4818      	ldr	r0, [pc, #96]	@ (8000770 <setupESP32Hotspot+0xbc>)
 8000710:	f7ff ff5c 	bl	80005cc <println>
    }
    HAL_Delay(10);
 8000714:	200a      	movs	r0, #10
 8000716:	f001 fd9d 	bl	8002254 <HAL_Delay>
    if (sendToESP("AT+CWDHCP=1,1")) {
 800071a:	4816      	ldr	r0, [pc, #88]	@ (8000774 <setupESP32Hotspot+0xc0>)
 800071c:	f7ff ff66 	bl	80005ec <sendToESP>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d003      	beq.n	800072e <setupESP32Hotspot+0x7a>
    	println("DHCP server enabled.");
 8000726:	4814      	ldr	r0, [pc, #80]	@ (8000778 <setupESP32Hotspot+0xc4>)
 8000728:	f7ff ff50 	bl	80005cc <println>
 800072c:	e002      	b.n	8000734 <setupESP32Hotspot+0x80>
    } else {
    	println("Failed to enable DHCP.");
 800072e:	4813      	ldr	r0, [pc, #76]	@ (800077c <setupESP32Hotspot+0xc8>)
 8000730:	f7ff ff4c 	bl	80005cc <println>
    }
    HAL_Delay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f001 fd8d 	bl	8002254 <HAL_Delay>
    if (sendToESP("AT+CWLIF")) {
 800073a:	4811      	ldr	r0, [pc, #68]	@ (8000780 <setupESP32Hotspot+0xcc>)
 800073c:	f7ff ff56 	bl	80005ec <sendToESP>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d002      	beq.n	800074c <setupESP32Hotspot+0x98>
    	println("Checking connected clients...");
 8000746:	480f      	ldr	r0, [pc, #60]	@ (8000784 <setupESP32Hotspot+0xd0>)
 8000748:	f7ff ff40 	bl	80005cc <println>
    }
}
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	08010844 	.word	0x08010844
 8000754:	0801084c 	.word	0x0801084c
 8000758:	08010880 	.word	0x08010880
 800075c:	08010864 	.word	0x08010864
 8000760:	0801088c 	.word	0x0801088c
 8000764:	080108a4 	.word	0x080108a4
 8000768:	080108c0 	.word	0x080108c0
 800076c:	080108e8 	.word	0x080108e8
 8000770:	08010908 	.word	0x08010908
 8000774:	08010924 	.word	0x08010924
 8000778:	08010934 	.word	0x08010934
 800077c:	0801094c 	.word	0x0801094c
 8000780:	08010964 	.word	0x08010964
 8000784:	08010970 	.word	0x08010970

08000788 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	807b      	strh	r3, [r7, #2]
	static bool buffSwitcher = true;

	uint8_t *nextBuff = RX_BUFF[buffSwitcher];
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <HAL_UARTEx_RxEventCallback+0x64>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	029b      	lsls	r3, r3, #10
 800079a:	4a15      	ldr	r2, [pc, #84]	@ (80007f0 <HAL_UARTEx_RxEventCallback+0x68>)
 800079c:	4413      	add	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
	buffSwitcher = !buffSwitcher;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <HAL_UARTEx_RxEventCallback+0x64>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf14      	ite	ne
 80007a8:	2301      	movne	r3, #1
 80007aa:	2300      	moveq	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	f083 0301 	eor.w	r3, r3, #1
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <HAL_UARTEx_RxEventCallback+0x64>)
 80007bc:	701a      	strb	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, nextBuff, sizeof(RX_BUFF[0]));
 80007be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007c2:	68f9      	ldr	r1, [r7, #12]
 80007c4:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <HAL_UARTEx_RxEventCallback+0x6c>)
 80007c6:	f009 fc75 	bl	800a0b4 <HAL_UARTEx_ReceiveToIdle_DMA>
	rx_data.buff = RX_BUFF[buffSwitcher];
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <HAL_UARTEx_RxEventCallback+0x64>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	029b      	lsls	r3, r3, #10
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_UARTEx_RxEventCallback+0x68>)
 80007d2:	4413      	add	r3, r2
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_UARTEx_RxEventCallback+0x70>)
 80007d6:	6013      	str	r3, [r2, #0]
	rx_data.size = Size;
 80007d8:	4a07      	ldr	r2, [pc, #28]	@ (80007f8 <HAL_UARTEx_RxEventCallback+0x70>)
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	80d3      	strh	r3, [r2, #6]
	rx_data.dataReceived = true;
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_UARTEx_RxEventCallback+0x70>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	711a      	strb	r2, [r3, #4]

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000000 	.word	0x20000000
 80007f0:	200005cc 	.word	0x200005cc
 80007f4:	20000490 	.word	0x20000490
 80007f8:	20000dcc 	.word	0x20000dcc

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f001 fce6 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f846 	bl	8000894 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000808:	f000 f8b6 	bl	8000978 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f000 fcfe 	bl	800120c <MX_GPIO_Init>
  MX_DMA_Init();
 8000810:	f000 fc84 	bl	800111c <MX_DMA_Init>
  MX_CRC_Init();
 8000814:	f000 f8dc 	bl	80009d0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000818:	f000 f8ee 	bl	80009f8 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800081c:	f000 f91e 	bl	8000a5c <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000820:	f000 fca4 	bl	800116c <MX_FMC_Init>
  MX_I2C1_Init();
 8000824:	f000 fa1a 	bl	8000c5c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000828:	f000 fa46 	bl	8000cb8 <MX_I2C2_Init>
  MX_LTDC_Init();
 800082c:	f000 fa72 	bl	8000d14 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000830:	f000 faee 	bl	8000e10 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000834:	f000 fb18 	bl	8000e68 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8000838:	f000 fb74 	bl	8000f24 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800083c:	f000 fbca 	bl	8000fd4 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000840:	f000 fc18 	bl	8001074 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000844:	f000 fc40 	bl	80010c8 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000848:	f00c fd78 	bl	800d33c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800084c:	f00e fff0 	bl	800f830 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 8000850:	f000 fb8a 	bl	8000f68 <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RX_BUFF[0], sizeof(RX_BUFF[0]));
 8000854:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000858:	490b      	ldr	r1, [pc, #44]	@ (8000888 <main+0x8c>)
 800085a:	480c      	ldr	r0, [pc, #48]	@ (800088c <main+0x90>)
 800085c:	f009 fc2a 	bl	800a0b4 <HAL_UARTEx_ReceiveToIdle_DMA>
  rx_data.buff = NULL;
 8000860:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <main+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
  rx_data.dataReceived = false;
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <main+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	711a      	strb	r2, [r3, #4]
  rx_data.size = 0;
 800086c:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <main+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	80da      	strh	r2, [r3, #6]
  setupESP32Hotspot();
 8000872:	f7ff ff1f 	bl	80006b4 <setupESP32Hotspot>
      if (HAL_SPI_Receive(&hspi1, spi_rx_buffer, BUFFER_SIZE, HAL_MAX_DELAY) == HAL_OK)
      {

      }*/
	  //sendTextSPI("HALLO");
      HAL_Delay(1000);
 8000876:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087a:	f001 fceb 	bl	8002254 <HAL_Delay>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800087e:	f00e fffd 	bl	800f87c <MX_USB_HOST_Process>
      HAL_Delay(1000);
 8000882:	bf00      	nop
 8000884:	e7f7      	b.n	8000876 <main+0x7a>
 8000886:	bf00      	nop
 8000888:	200005cc 	.word	0x200005cc
 800088c:	20000490 	.word	0x20000490
 8000890:	20000dcc 	.word	0x20000dcc

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	@ 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2234      	movs	r2, #52	@ 0x34
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f00f fbc0 	bl	8010028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000970 <SystemClock_Config+0xdc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000970 <SystemClock_Config+0xdc>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c8:	4b29      	ldr	r3, [pc, #164]	@ (8000970 <SystemClock_Config+0xdc>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <SystemClock_Config+0xe0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a25      	ldr	r2, [pc, #148]	@ (8000974 <SystemClock_Config+0xe0>)
 80008de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <SystemClock_Config+0xe0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000902:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000904:	2304      	movs	r3, #4
 8000906:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000908:	23b4      	movs	r3, #180	@ 0xb4
 800090a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090c:	2302      	movs	r3, #2
 800090e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000910:	2306      	movs	r3, #6
 8000912:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000914:	2306      	movs	r3, #6
 8000916:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4618      	mov	r0, r3
 800091e:	f006 ff11 	bl	8007744 <HAL_RCC_OscConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000928:	f000 fe0e 	bl	8001548 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800092c:	f006 f968 	bl	8006c00 <HAL_PWREx_EnableOverDrive>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000936:	f000 fe07 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	230f      	movs	r3, #15
 800093c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2302      	movs	r3, #2
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000946:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800094a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800094c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000950:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2105      	movs	r1, #5
 8000958:	4618      	mov	r0, r3
 800095a:	f006 fa63 	bl	8006e24 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000964:	f000 fdf0 	bl	8001548 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3750      	adds	r7, #80	@ 0x50
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40007000 	.word	0x40007000

08000978 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b090      	sub	sp, #64	@ 0x40
 800097c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	223c      	movs	r2, #60	@ 0x3c
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f00f fb4f 	bl	8010028 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 800098a:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 800098e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000990:	2390      	movs	r3, #144	@ 0x90
 8000992:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 800099c:	2306      	movs	r3, #6
 800099e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80009a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80009aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	4618      	mov	r0, r3
 80009b8:	f006 fc86 	bl	80072c8 <HAL_RCCEx_PeriphCLKConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80009c2:	f000 fdc1 	bl	8001548 <Error_Handler>
  }
}
 80009c6:	bf00      	nop
 80009c8:	3740      	adds	r7, #64	@ 0x40
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_CRC_Init+0x20>)
 80009d6:	4a07      	ldr	r2, [pc, #28]	@ (80009f4 <MX_CRC_Init+0x24>)
 80009d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_CRC_Init+0x20>)
 80009dc:	f001 fd40 	bl	8002460 <HAL_CRC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80009e6:	f000 fdaf 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	2000009c 	.word	0x2000009c
 80009f4:	40023000 	.word	0x40023000

080009f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 80009fe:	4a16      	ldr	r2, [pc, #88]	@ (8000a58 <MX_DMA2D_Init+0x60>)
 8000a00:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000a2c:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 8000a2e:	f002 f935 	bl	8002c9c <HAL_DMA2D_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000a38:	f000 fd86 	bl	8001548 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <MX_DMA2D_Init+0x5c>)
 8000a40:	f002 fa86 	bl	8002f50 <HAL_DMA2D_ConfigLayer>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000a4a:	f000 fd7d 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000a4 	.word	0x200000a4
 8000a58:	4002b000 	.word	0x4002b000

08000a5c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b0aa      	sub	sp, #168	@ 0xa8
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000a62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000a6e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a72:	2224      	movs	r2, #36	@ 0x24
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00f fad6 	bl	8010028 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000a7c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a92:	2234      	movs	r2, #52	@ 0x34
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f00f fac6 	bl	8010028 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	222c      	movs	r2, #44	@ 0x2c
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00f fac0 	bl	8010028 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000aaa:	4a6b      	ldr	r2, [pc, #428]	@ (8000c58 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000aac:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000aae:	4b69      	ldr	r3, [pc, #420]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000ab4:	4b67      	ldr	r3, [pc, #412]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000aba:	4b66      	ldr	r3, [pc, #408]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000ac0:	237d      	movs	r3, #125	@ 0x7d
 8000ac2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000ad2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	485e      	ldr	r0, [pc, #376]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000ada:	f002 facb 	bl	8003074 <HAL_DSI_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000ae4:	f000 fd30 	bl	8001548 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000b1a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000b1e:	4619      	mov	r1, r3
 8000b20:	484c      	ldr	r0, [pc, #304]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b22:	f002 ffbb 	bl	8003a9c <HAL_DSI_ConfigHostTimeouts>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000b2c:	f000 fd0c 	bl	8001548 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000b30:	231c      	movs	r3, #28
 8000b32:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000b34:	2321      	movs	r3, #33	@ 0x21
 8000b36:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000b3c:	2319      	movs	r3, #25
 8000b3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000b44:	230a      	movs	r3, #10
 8000b46:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000b48:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4841      	ldr	r0, [pc, #260]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b50:	f002 ff3a 	bl	80039c8 <HAL_DSI_ConfigPhyTimer>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000b5a:	f000 fcf5 	bl	8001548 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000b5e:	2104      	movs	r1, #4
 8000b60:	483c      	ldr	r0, [pc, #240]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b62:	f002 ff09 	bl	8003978 <HAL_DSI_ConfigFlowControl>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000b6c:	f000 fcec 	bl	8001548 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000b70:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000b74:	4837      	ldr	r0, [pc, #220]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b76:	f003 f857 	bl	8003c28 <HAL_DSI_SetLowPowerRXFilter>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000b80:	f000 fce2 	bl	8001548 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000b84:	2100      	movs	r1, #0
 8000b86:	4833      	ldr	r0, [pc, #204]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000b88:	f002 fbf4 	bl	8003374 <HAL_DSI_ConfigErrorMonitor>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000b92:	f000 fcd9 	bl	8001548 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000b96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000ba2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000ba8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bac:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000bae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000bb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb8:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000bba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000bc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000bc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000bcc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000bd0:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000bd2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000bd6:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000bd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bdc:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	481a      	ldr	r0, [pc, #104]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000bea:	f002 fe67 	bl	80038bc <HAL_DSI_ConfigCommand>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000bf4:	f000 fca8 	bl	8001548 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000c00:	23c8      	movs	r3, #200	@ 0xc8
 8000c02:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000c04:	2310      	movs	r3, #16
 8000c06:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000c1c:	2340      	movs	r3, #64	@ 0x40
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	4619      	mov	r1, r3
 8000c28:	480a      	ldr	r0, [pc, #40]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c2a:	f002 fd6f 	bl	800370c <HAL_DSI_ConfigAdaptedCommandMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000c34:	f000 fc88 	bl	8001548 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4806      	ldr	r0, [pc, #24]	@ (8000c54 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c3c:	f002 fd3e 	bl	80036bc <HAL_DSI_SetGenericVCID>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000c46:	f000 fc7f 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	37a8      	adds	r7, #168	@ 0xa8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000e4 	.word	0x200000e4
 8000c58:	40016c00 	.word	0x40016c00

08000c5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c60:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c62:	4a13      	ldr	r2, [pc, #76]	@ (8000cb0 <MX_I2C1_Init+0x54>)
 8000c64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c68:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <MX_I2C1_Init+0x58>)
 8000c6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <MX_I2C1_Init+0x50>)
 8000c9a:	f005 fb05 	bl	80062a8 <HAL_I2C_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca4:	f000 fc50 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000100 	.word	0x20000100
 8000cb0:	40005400 	.word	0x40005400
 8000cb4:	000186a0 	.word	0x000186a0

08000cb8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000cbe:	4a13      	ldr	r2, [pc, #76]	@ (8000d0c <MX_I2C2_Init+0x54>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000cc4:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <MX_I2C2_Init+0x58>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000cd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <MX_I2C2_Init+0x50>)
 8000cf6:	f005 fad7 	bl	80062a8 <HAL_I2C_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d00:	f000 fc22 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000154 	.word	0x20000154
 8000d0c:	40005800 	.word	0x40005800
 8000d10:	000186a0 	.word	0x000186a0

08000d14 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	@ 0x38
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2234      	movs	r2, #52	@ 0x34
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00f f981 	bl	8010028 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d26:	4b38      	ldr	r3, [pc, #224]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d28:	4a38      	ldr	r2, [pc, #224]	@ (8000e0c <MX_LTDC_Init+0xf8>)
 8000d2a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d2c:	4b36      	ldr	r3, [pc, #216]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d32:	4b35      	ldr	r3, [pc, #212]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000d38:	4b33      	ldr	r3, [pc, #204]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d3e:	4b32      	ldr	r3, [pc, #200]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000d44:	4b30      	ldr	r3, [pc, #192]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000d50:	4b2d      	ldr	r3, [pc, #180]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000d56:	4b2c      	ldr	r3, [pc, #176]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d5e:	22c9      	movs	r2, #201	@ 0xc9
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000d62:	4b29      	ldr	r3, [pc, #164]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d64:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000d68:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000d6a:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d6c:	22ca      	movs	r2, #202	@ 0xca
 8000d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000d70:	4b25      	ldr	r3, [pc, #148]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d72:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d78:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d80:	4b21      	ldr	r3, [pc, #132]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d90:	481d      	ldr	r0, [pc, #116]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000d92:	f005 fbcd 	bl	8006530 <HAL_LTDC_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000d9c:	f000 fbd4 	bl	8001548 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000da4:	23c8      	movs	r3, #200	@ 0xc8
 8000da6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000dac:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000db0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000db2:	2302      	movs	r3, #2
 8000db4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000db6:	23ff      	movs	r3, #255	@ 0xff
 8000db8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000dbe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dc2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000dc4:	2307      	movs	r3, #7
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000dc8:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000dce:	23c8      	movs	r3, #200	@ 0xc8
 8000dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000dd2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_LTDC_Init+0xf4>)
 8000df2:	f005 fd2f 	bl	8006854 <HAL_LTDC_ConfigLayer>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000dfc:	f000 fba4 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3738      	adds	r7, #56	@ 0x38
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200001a8 	.word	0x200001a8
 8000e0c:	40016800 	.word	0x40016800

08000e10 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e16:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <MX_QUADSPI_Init+0x54>)
 8000e18:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e28:	2210      	movs	r2, #16
 8000e2a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e2e:	2218      	movs	r2, #24
 8000e30:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e38:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000e40:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <MX_QUADSPI_Init+0x50>)
 8000e4e:	f005 ff27 	bl	8006ca0 <HAL_QSPI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000e58:	f000 fb76 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000250 	.word	0x20000250
 8000e64:	a0001000 	.word	0xa0001000

08000e68 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000e6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000f1c <MX_SAI1_Init+0xb4>)
 8000e70:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e72:	4b29      	ldr	r3, [pc, #164]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000e78:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000e7e:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000e80:	2240      	movs	r2, #64	@ 0x40
 8000e82:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e84:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e8a:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e90:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f20 <MX_SAI1_Init+0xb8>)
 8000eb2:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000eba:	4b17      	ldr	r3, [pc, #92]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ece:	2208      	movs	r2, #8
 8000ed0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_SAI1_Init+0xb0>)
 8000f04:	f006 fea2 	bl	8007c4c <HAL_SAI_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000f0e:	f000 fb1b 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000029c 	.word	0x2000029c
 8000f1c:	40015804 	.word	0x40015804
 8000f20:	0002ee00 	.word	0x0002ee00

08000f24 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000f28:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <MX_SDIO_SD_Init+0x3c>)
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <MX_SDIO_SD_Init+0x40>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <MX_SDIO_SD_Init+0x3c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <MX_SDIO_SD_Init+0x3c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <MX_SDIO_SD_Init+0x3c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000f40:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <MX_SDIO_SD_Init+0x3c>)
 8000f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f46:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f48:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <MX_SDIO_SD_Init+0x3c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000f4e:	4b04      	ldr	r3, [pc, #16]	@ (8000f60 <MX_SDIO_SD_Init+0x3c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000324 	.word	0x20000324
 8000f64:	40012c00 	.word	0x40012c00

08000f68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f6e:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <MX_SPI1_Init+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f9c:	2238      	movs	r2, #56	@ 0x38
 8000f9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fba:	f008 fa30 	bl	800941e <HAL_SPI_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fc4:	f000 fac0 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200003a8 	.word	0x200003a8
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <MX_TIM1_Init+0x98>)
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8001070 <MX_TIM1_Init+0x9c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <MX_TIM1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <MX_TIM1_Init+0x98>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001002:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <MX_TIM1_Init+0x98>)
 8001004:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001008:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <MX_TIM1_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001010:	4b16      	ldr	r3, [pc, #88]	@ (800106c <MX_TIM1_Init+0x98>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <MX_TIM1_Init+0x98>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800101c:	4813      	ldr	r0, [pc, #76]	@ (800106c <MX_TIM1_Init+0x98>)
 800101e:	f008 fa87 	bl	8009530 <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001028:	f000 fa8e 	bl	8001548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <MX_TIM1_Init+0x98>)
 800103a:	f008 fc29 	bl	8009890 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001044:	f000 fa80 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	@ (800106c <MX_TIM1_Init+0x98>)
 8001056:	f008 fe51 	bl	8009cfc <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001060:	f000 fa72 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000400 	.word	0x20000400
 8001070:	40010000 	.word	0x40010000

08001074 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <MX_USART3_UART_Init+0x4c>)
 800107a:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <MX_USART3_UART_Init+0x50>)
 800107c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <MX_USART3_UART_Init+0x4c>)
 8001080:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001084:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <MX_USART3_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_USART3_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001092:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <MX_USART3_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001098:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_USART3_UART_Init+0x4c>)
 800109a:	220c      	movs	r2, #12
 800109c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <MX_USART3_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <MX_USART3_UART_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <MX_USART3_UART_Init+0x4c>)
 80010ac:	f008 feb6 	bl	8009e1c <HAL_UART_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010b6:	f000 fa47 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000448 	.word	0x20000448
 80010c4:	40004800 	.word	0x40004800

080010c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_USART6_UART_Init+0x4c>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	@ (8001118 <MX_USART6_UART_Init+0x50>)
 80010d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010d2:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <MX_USART6_UART_Init+0x4c>)
 80010d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <MX_USART6_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_USART6_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001114 <MX_USART6_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010ec:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_USART6_UART_Init+0x4c>)
 80010ee:	220c      	movs	r2, #12
 80010f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <MX_USART6_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <MX_USART6_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_USART6_UART_Init+0x4c>)
 8001100:	f008 fe8c 	bl	8009e1c <HAL_UART_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800110a:	f000 fa1d 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000490 	.word	0x20000490
 8001118:	40011400 	.word	0x40011400

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <MX_DMA_Init+0x4c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a0f      	ldr	r2, [pc, #60]	@ (8001168 <MX_DMA_Init+0x4c>)
 800112c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <MX_DMA_Init+0x4c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2039      	movs	r0, #57	@ 0x39
 8001144:	f001 f962 	bl	800240c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001148:	2039      	movs	r0, #57	@ 0x39
 800114a:	f001 f97b 	bl	8002444 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2045      	movs	r0, #69	@ 0x45
 8001154:	f001 f95a 	bl	800240c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001158:	2045      	movs	r0, #69	@ 0x45
 800115a:	f001 f973 	bl	8002444 <HAL_NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001184:	4b1f      	ldr	r3, [pc, #124]	@ (8001204 <MX_FMC_Init+0x98>)
 8001186:	4a20      	ldr	r2, [pc, #128]	@ (8001208 <MX_FMC_Init+0x9c>)
 8001188:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800118a:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_FMC_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001190:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_FMC_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_FMC_Init+0x98>)
 8001198:	2204      	movs	r2, #4
 800119a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_FMC_Init+0x98>)
 800119e:	2220      	movs	r2, #32
 80011a0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <MX_FMC_Init+0x98>)
 80011a4:	2240      	movs	r2, #64	@ 0x40
 80011a6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <MX_FMC_Init+0x98>)
 80011aa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80011ae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_FMC_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MX_FMC_Init+0x98>)
 80011b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011bc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_FMC_Init+0x98>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_FMC_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80011d0:	2307      	movs	r3, #7
 80011d2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80011d4:	2304      	movs	r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80011d8:	2307      	movs	r3, #7
 80011da:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80011dc:	2303      	movs	r3, #3
 80011de:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_FMC_Init+0x98>)
 80011ee:	f008 f8e2 	bl	80093b6 <HAL_SDRAM_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80011f8:	f000 f9a6 	bl	8001548 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000598 	.word	0x20000598
 8001208:	a0000140 	.word	0xa0000140

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b090      	sub	sp, #64	@ 0x40
 8001210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001226:	4bae      	ldr	r3, [pc, #696]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4aad      	ldr	r2, [pc, #692]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4bab      	ldr	r3, [pc, #684]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800123c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
 8001242:	4ba7      	ldr	r3, [pc, #668]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	4aa6      	ldr	r2, [pc, #664]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	@ 0x30
 800124e:	4ba4      	ldr	r3, [pc, #656]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
 8001258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
 800125e:	4ba0      	ldr	r3, [pc, #640]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a9f      	ldr	r2, [pc, #636]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b9d      	ldr	r3, [pc, #628]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	623b      	str	r3, [r7, #32]
 8001274:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	4b99      	ldr	r3, [pc, #612]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a98      	ldr	r2, [pc, #608]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b96      	ldr	r3, [pc, #600]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	4b92      	ldr	r3, [pc, #584]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a91      	ldr	r2, [pc, #580]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 800129c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b8f      	ldr	r3, [pc, #572]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	4b8b      	ldr	r3, [pc, #556]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a8a      	ldr	r2, [pc, #552]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b88      	ldr	r3, [pc, #544]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b84      	ldr	r3, [pc, #528]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a83      	ldr	r2, [pc, #524]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b81      	ldr	r3, [pc, #516]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b7d      	ldr	r3, [pc, #500]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a7c      	ldr	r2, [pc, #496]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012f0:	f043 0320 	orr.w	r3, r3, #32
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b7a      	ldr	r3, [pc, #488]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0320 	and.w	r3, r3, #32
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b76      	ldr	r3, [pc, #472]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a75      	ldr	r2, [pc, #468]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 800130c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b73      	ldr	r3, [pc, #460]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b6f      	ldr	r3, [pc, #444]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a6e      	ldr	r2, [pc, #440]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001328:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b6c      	ldr	r3, [pc, #432]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b68      	ldr	r3, [pc, #416]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a67      	ldr	r2, [pc, #412]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 8001344:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b65      	ldr	r3, [pc, #404]	@ (80014e0 <MX_GPIO_Init+0x2d4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	210c      	movs	r1, #12
 800135a:	4862      	ldr	r0, [pc, #392]	@ (80014e4 <MX_GPIO_Init+0x2d8>)
 800135c:	f002 fe56 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2130      	movs	r1, #48	@ 0x30
 8001364:	4860      	ldr	r0, [pc, #384]	@ (80014e8 <MX_GPIO_Init+0x2dc>)
 8001366:	f002 fe51 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2108      	movs	r1, #8
 800136e:	485f      	ldr	r0, [pc, #380]	@ (80014ec <MX_GPIO_Init+0x2e0>)
 8001370:	f002 fe4c 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2140      	movs	r1, #64	@ 0x40
 8001378:	485d      	ldr	r0, [pc, #372]	@ (80014f0 <MX_GPIO_Init+0x2e4>)
 800137a:	f002 fe47 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	2105      	movs	r1, #5
 8001382:	485c      	ldr	r0, [pc, #368]	@ (80014f4 <MX_GPIO_Init+0x2e8>)
 8001384:	f002 fe42 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2180      	movs	r1, #128	@ 0x80
 800138c:	485a      	ldr	r0, [pc, #360]	@ (80014f8 <MX_GPIO_Init+0x2ec>)
 800138e:	f002 fe3d 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2108      	movs	r1, #8
 8001396:	4859      	ldr	r0, [pc, #356]	@ (80014fc <MX_GPIO_Init+0x2f0>)
 8001398:	f002 fe38 	bl	800400c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 800139c:	230c      	movs	r3, #12
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013b0:	4619      	mov	r1, r3
 80013b2:	484c      	ldr	r0, [pc, #304]	@ (80014e4 <MX_GPIO_Init+0x2d8>)
 80013b4:	f002 fc66 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 80013b8:	2308      	movs	r3, #8
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013c8:	2306      	movs	r3, #6
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013d0:	4619      	mov	r1, r3
 80013d2:	4848      	ldr	r0, [pc, #288]	@ (80014f4 <MX_GPIO_Init+0x2e8>)
 80013d4:	f002 fc56 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 80013d8:	2380      	movs	r3, #128	@ 0x80
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ea:	4619      	mov	r1, r3
 80013ec:	4841      	ldr	r0, [pc, #260]	@ (80014f4 <MX_GPIO_Init+0x2e8>)
 80013ee:	f002 fc49 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80013f2:	2330      	movs	r3, #48	@ 0x30
 80013f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013f6:	2311      	movs	r3, #17
 80013f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001406:	4619      	mov	r1, r3
 8001408:	4837      	ldr	r0, [pc, #220]	@ (80014e8 <MX_GPIO_Init+0x2dc>)
 800140a:	f002 fc3b 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 800140e:	2308      	movs	r3, #8
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001412:	2311      	movs	r3, #17
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001422:	4619      	mov	r1, r3
 8001424:	4831      	ldr	r0, [pc, #196]	@ (80014ec <MX_GPIO_Init+0x2e0>)
 8001426:	f002 fc2d 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800142a:	2340      	movs	r3, #64	@ 0x40
 800142c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800142e:	2311      	movs	r3, #17
 8001430:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800143e:	4619      	mov	r1, r3
 8001440:	482b      	ldr	r0, [pc, #172]	@ (80014f0 <MX_GPIO_Init+0x2e4>)
 8001442:	f002 fc1f 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8001446:	2305      	movs	r3, #5
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800145a:	4619      	mov	r1, r3
 800145c:	4825      	ldr	r0, [pc, #148]	@ (80014f4 <MX_GPIO_Init+0x2e8>)
 800145e:	f002 fc11 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8001462:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001474:	2302      	movs	r3, #2
 8001476:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800147c:	4619      	mov	r1, r3
 800147e:	481a      	ldr	r0, [pc, #104]	@ (80014e8 <MX_GPIO_Init+0x2dc>)
 8001480:	f002 fc00 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001484:	2304      	movs	r3, #4
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001494:	4619      	mov	r1, r3
 8001496:	4816      	ldr	r0, [pc, #88]	@ (80014f0 <MX_GPIO_Init+0x2e4>)
 8001498:	f002 fbf4 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800149c:	2320      	movs	r3, #32
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ae:	4619      	mov	r1, r3
 80014b0:	4813      	ldr	r0, [pc, #76]	@ (8001500 <MX_GPIO_Init+0x2f4>)
 80014b2:	f002 fbe7 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ca:	4619      	mov	r1, r3
 80014cc:	480a      	ldr	r0, [pc, #40]	@ (80014f8 <MX_GPIO_Init+0x2ec>)
 80014ce:	f002 fbd9 	bl	8003c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80014d2:	2308      	movs	r3, #8
 80014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	e012      	b.n	8001504 <MX_GPIO_Init+0x2f8>
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40022800 	.word	0x40022800
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40021c00 	.word	0x40021c00
 80014fc:	40020000 	.word	0x40020000
 8001500:	40022400 	.word	0x40022400
 8001504:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800150e:	4619      	mov	r1, r3
 8001510:	4803      	ldr	r0, [pc, #12]	@ (8001520 <MX_GPIO_Init+0x314>)
 8001512:	f002 fbb7 	bl	8003c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001516:	bf00      	nop
 8001518:	3740      	adds	r7, #64	@ 0x40
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40020000 	.word	0x40020000

08001524 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001536:	f000 fe6d 	bl	8002214 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40001000 	.word	0x40001000

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <Error_Handler+0x8>

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a0f      	ldr	r2, [pc, #60]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	@ 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0b      	ldr	r2, [pc, #44]	@ (80015e0 <HAL_CRC_MspInit+0x3c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10d      	bne.n	80015d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_CRC_MspInit+0x40>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a09      	ldr	r2, [pc, #36]	@ (80015e4 <HAL_CRC_MspInit+0x40>)
 80015c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <HAL_CRC_MspInit+0x40>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023000 	.word	0x40023000
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <HAL_DMA2D_MspInit+0x48>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d115      	bne.n	8001626 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_DMA2D_MspInit+0x4c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a0c      	ldr	r2, [pc, #48]	@ (8001634 <HAL_DMA2D_MspInit+0x4c>)
 8001604:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <HAL_DMA2D_MspInit+0x4c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	205a      	movs	r0, #90	@ 0x5a
 800161c:	f000 fef6 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001620:	205a      	movs	r0, #90	@ 0x5a
 8001622:	f000 ff0f 	bl	8002444 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	4002b000 	.word	0x4002b000
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1d      	ldr	r2, [pc, #116]	@ (80016cc <HAL_DSI_MspInit+0x94>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d133      	bne.n	80016c2 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <HAL_DSI_MspInit+0x98>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001662:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <HAL_DSI_MspInit+0x98>)
 8001664:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001668:	6453      	str	r3, [r2, #68]	@ 0x44
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <HAL_DSI_MspInit+0x98>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_DSI_MspInit+0x98>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <HAL_DSI_MspInit+0x98>)
 8001680:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_DSI_MspInit+0x98>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8001692:	2304      	movs	r3, #4
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80016a2:	230d      	movs	r3, #13
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4809      	ldr	r0, [pc, #36]	@ (80016d4 <HAL_DSI_MspInit+0x9c>)
 80016ae:	f002 fae9 	bl	8003c84 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	205c      	movs	r0, #92	@ 0x5c
 80016b8:	f000 fea8 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80016bc:	205c      	movs	r0, #92	@ 0x5c
 80016be:	f000 fec1 	bl	8002444 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 80016c2:	bf00      	nop
 80016c4:	3728      	adds	r7, #40	@ 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40016c00 	.word	0x40016c00
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40022400 	.word	0x40022400

080016d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 031c 	add.w	r3, r7, #28
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a32      	ldr	r2, [pc, #200]	@ (80017c0 <HAL_I2C_MspInit+0xe8>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12d      	bne.n	8001756 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
 80016fe:	4b31      	ldr	r3, [pc, #196]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a30      	ldr	r2, [pc, #192]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b2e      	ldr	r3, [pc, #184]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001716:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171c:	2312      	movs	r3, #18
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001720:	2301      	movs	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001728:	2304      	movs	r3, #4
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	4619      	mov	r1, r3
 8001732:	4825      	ldr	r0, [pc, #148]	@ (80017c8 <HAL_I2C_MspInit+0xf0>)
 8001734:	f002 faa6 	bl	8003c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	4b21      	ldr	r3, [pc, #132]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 8001742:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
 8001748:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001754:	e030      	b.n	80017b8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a1c      	ldr	r2, [pc, #112]	@ (80017cc <HAL_I2C_MspInit+0xf4>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d12b      	bne.n	80017b8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001768:	4a16      	ldr	r2, [pc, #88]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 800176a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800176e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001770:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 800177c:	2330      	movs	r3, #48	@ 0x30
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001780:	2312      	movs	r3, #18
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001784:	2301      	movs	r3, #1
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800178c:	2304      	movs	r3, #4
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	480e      	ldr	r0, [pc, #56]	@ (80017d0 <HAL_I2C_MspInit+0xf8>)
 8001798:	f002 fa74 	bl	8003c84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	4a07      	ldr	r2, [pc, #28]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 80017a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ac:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_I2C_MspInit+0xec>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3730      	adds	r7, #48	@ 0x30
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40005400 	.word	0x40005400
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40005800 	.word	0x40005800
 80017d0:	40021c00 	.word	0x40021c00

080017d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0e      	ldr	r2, [pc, #56]	@ (800181c <HAL_LTDC_MspInit+0x48>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d115      	bne.n	8001812 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001820 <HAL_LTDC_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001820 <HAL_LTDC_MspInit+0x4c>)
 80017f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80017f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <HAL_LTDC_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2058      	movs	r0, #88	@ 0x58
 8001808:	f000 fe00 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800180c:	2058      	movs	r0, #88	@ 0x58
 800180e:	f000 fe19 	bl	8002444 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40016800 	.word	0x40016800
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a31      	ldr	r2, [pc, #196]	@ (8001908 <HAL_QSPI_MspInit+0xe4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d15b      	bne.n	80018fe <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b30      	ldr	r3, [pc, #192]	@ (800190c <HAL_QSPI_MspInit+0xe8>)
 800184c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800184e:	4a2f      	ldr	r2, [pc, #188]	@ (800190c <HAL_QSPI_MspInit+0xe8>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6393      	str	r3, [r2, #56]	@ 0x38
 8001856:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <HAL_QSPI_MspInit+0xe8>)
 8001858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b29      	ldr	r3, [pc, #164]	@ (800190c <HAL_QSPI_MspInit+0xe8>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a28      	ldr	r2, [pc, #160]	@ (800190c <HAL_QSPI_MspInit+0xe8>)
 800186c:	f043 0302 	orr.w	r3, r3, #2
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b26      	ldr	r3, [pc, #152]	@ (800190c <HAL_QSPI_MspInit+0xe8>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b22      	ldr	r3, [pc, #136]	@ (800190c <HAL_QSPI_MspInit+0xe8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a21      	ldr	r2, [pc, #132]	@ (800190c <HAL_QSPI_MspInit+0xe8>)
 8001888:	f043 0320 	orr.w	r3, r3, #32
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <HAL_QSPI_MspInit+0xe8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 800189a:	2340      	movs	r3, #64	@ 0x40
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80018aa:	230a      	movs	r3, #10
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4816      	ldr	r0, [pc, #88]	@ (8001910 <HAL_QSPI_MspInit+0xec>)
 80018b6:	f002 f9e5 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 80018ba:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80018be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c0:	2302      	movs	r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80018cc:	2309      	movs	r3, #9
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	480f      	ldr	r0, [pc, #60]	@ (8001914 <HAL_QSPI_MspInit+0xf0>)
 80018d8:	f002 f9d4 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80018dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 80018ee:	230a      	movs	r3, #10
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4806      	ldr	r0, [pc, #24]	@ (8001914 <HAL_QSPI_MspInit+0xf0>)
 80018fa:	f002 f9c3 	bl	8003c84 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80018fe:	bf00      	nop
 8001900:	3728      	adds	r7, #40	@ 0x28
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	a0001000 	.word	0xa0001000
 800190c:	40023800 	.word	0x40023800
 8001910:	40020400 	.word	0x40020400
 8001914:	40021400 	.word	0x40021400

08001918 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	@ 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a28      	ldr	r2, [pc, #160]	@ (80019d8 <HAL_SD_MspInit+0xc0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d14a      	bne.n	80019d0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_SD_MspInit+0xc4>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	4a26      	ldr	r2, [pc, #152]	@ (80019dc <HAL_SD_MspInit+0xc4>)
 8001944:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001948:	6453      	str	r3, [r2, #68]	@ 0x44
 800194a:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_SD_MspInit+0xc4>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b20      	ldr	r3, [pc, #128]	@ (80019dc <HAL_SD_MspInit+0xc4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a1f      	ldr	r2, [pc, #124]	@ (80019dc <HAL_SD_MspInit+0xc4>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_SD_MspInit+0xc4>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <HAL_SD_MspInit+0xc4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <HAL_SD_MspInit+0xc4>)
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_SD_MspInit+0xc4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 800198e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001992:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019a0:	230c      	movs	r3, #12
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	@ (80019e0 <HAL_SD_MspInit+0xc8>)
 80019ac:	f002 f96a 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80019b0:	2304      	movs	r3, #4
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019c0:	230c      	movs	r3, #12
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <HAL_SD_MspInit+0xcc>)
 80019cc:	f002 f95a 	bl	8003c84 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	@ 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40012c00 	.word	0x40012c00
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020c00 	.word	0x40020c00

080019e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a28      	ldr	r2, [pc, #160]	@ (8001aa8 <HAL_SPI_MspInit+0xc0>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d149      	bne.n	8001a9e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <HAL_SPI_MspInit+0xc4>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a12:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <HAL_SPI_MspInit+0xc4>)
 8001a14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_SPI_MspInit+0xc4>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <HAL_SPI_MspInit+0xc4>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8001aac <HAL_SPI_MspInit+0xc4>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_SPI_MspInit+0xc4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_SPI_MspInit+0xc4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_SPI_MspInit+0xc4>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b16      	ldr	r3, [pc, #88]	@ (8001aac <HAL_SPI_MspInit+0xc4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001a5e:	2330      	movs	r3, #48	@ 0x30
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a6e:	2305      	movs	r3, #5
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <HAL_SPI_MspInit+0xc8>)
 8001a7a:	f002 f903 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a7e:	2320      	movs	r3, #32
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <HAL_SPI_MspInit+0xcc>)
 8001a9a:	f002 f8f3 	bl	8003c84 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	@ 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40013000 	.word	0x40013000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8001af4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_TIM_Base_MspInit+0x40>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	4a09      	ldr	r2, [pc, #36]	@ (8001af8 <HAL_TIM_Base_MspInit+0x40>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <HAL_TIM_Base_MspInit+0x40>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40023800 	.word	0x40023800

08001afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	@ 0x30
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a65      	ldr	r2, [pc, #404]	@ (8001cb0 <HAL_UART_MspInit+0x1b4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d12d      	bne.n	8001b7a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
 8001b22:	4b64      	ldr	r3, [pc, #400]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	4a63      	ldr	r2, [pc, #396]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2e:	4b61      	ldr	r3, [pc, #388]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b36:	61bb      	str	r3, [r7, #24]
 8001b38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a5c      	ldr	r2, [pc, #368]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4851      	ldr	r0, [pc, #324]	@ (8001cb8 <HAL_UART_MspInit+0x1bc>)
 8001b74:	f002 f886 	bl	8003c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b78:	e095      	b.n	8001ca6 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a4f      	ldr	r2, [pc, #316]	@ (8001cbc <HAL_UART_MspInit+0x1c0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	f040 8090 	bne.w	8001ca6 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	4a49      	ldr	r2, [pc, #292]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001b90:	f043 0320 	orr.w	r3, r3, #32
 8001b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b96:	4b47      	ldr	r3, [pc, #284]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a42      	ldr	r2, [pc, #264]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b40      	ldr	r3, [pc, #256]	@ (8001cb4 <HAL_UART_MspInit+0x1b8>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_RX_Pin|ARDUINO_USART6_TX_Pin;
 8001bbe:	23c0      	movs	r3, #192	@ 0xc0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bce:	2308      	movs	r3, #8
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4839      	ldr	r0, [pc, #228]	@ (8001cc0 <HAL_UART_MspInit+0x1c4>)
 8001bda:	f002 f853 	bl	8003c84 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001bde:	4b39      	ldr	r3, [pc, #228]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001be0:	4a39      	ldr	r2, [pc, #228]	@ (8001cc8 <HAL_UART_MspInit+0x1cc>)
 8001be2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001be4:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001be6:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001bea:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bec:	4b35      	ldr	r3, [pc, #212]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf8:	4b32      	ldr	r3, [pc, #200]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001bfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bfe:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c00:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c06:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c12:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001c1e:	4829      	ldr	r0, [pc, #164]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001c20:	f000 fc3a 	bl	8002498 <HAL_DMA_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001c2a:	f7ff fc8d 	bl	8001548 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a24      	ldr	r2, [pc, #144]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001c32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c34:	4a23      	ldr	r2, [pc, #140]	@ (8001cc4 <HAL_UART_MspInit+0x1c8>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001c3a:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c3c:	4a24      	ldr	r2, [pc, #144]	@ (8001cd0 <HAL_UART_MspInit+0x1d4>)
 8001c3e:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001c40:	4b22      	ldr	r3, [pc, #136]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c42:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001c46:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c4a:	2240      	movs	r2, #64	@ 0x40
 8001c4c:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c5a:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c6e:	4b17      	ldr	r3, [pc, #92]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001c7a:	4814      	ldr	r0, [pc, #80]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c7c:	f000 fc0c 	bl	8002498 <HAL_DMA_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8001c86:	f7ff fc5f 	bl	8001548 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c90:	4a0e      	ldr	r2, [pc, #56]	@ (8001ccc <HAL_UART_MspInit+0x1d0>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2047      	movs	r0, #71	@ 0x47
 8001c9c:	f000 fbb6 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ca0:	2047      	movs	r0, #71	@ 0x47
 8001ca2:	f000 fbcf 	bl	8002444 <HAL_NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	@ 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40004800 	.word	0x40004800
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	40011400 	.word	0x40011400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	200004d8 	.word	0x200004d8
 8001cc8:	40026428 	.word	0x40026428
 8001ccc:	20000538 	.word	0x20000538
 8001cd0:	400264a0 	.word	0x400264a0

08001cd4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ce8:	4b44      	ldr	r3, [pc, #272]	@ (8001dfc <HAL_FMC_MspInit+0x128>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f040 8081 	bne.w	8001df4 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001cf2:	4b42      	ldr	r3, [pc, #264]	@ (8001dfc <HAL_FMC_MspInit+0x128>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	4b40      	ldr	r3, [pc, #256]	@ (8001e00 <HAL_FMC_MspInit+0x12c>)
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d00:	4a3f      	ldr	r2, [pc, #252]	@ (8001e00 <HAL_FMC_MspInit+0x12c>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d08:	4b3d      	ldr	r3, [pc, #244]	@ (8001e00 <HAL_FMC_MspInit+0x12c>)
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001d14:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001d18:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d22:	2303      	movs	r3, #3
 8001d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d26:	230c      	movs	r3, #12
 8001d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4835      	ldr	r0, [pc, #212]	@ (8001e04 <HAL_FMC_MspInit+0x130>)
 8001d30:	f001 ffa8 	bl	8003c84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001d34:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001d38:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d46:	230c      	movs	r3, #12
 8001d48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	482e      	ldr	r0, [pc, #184]	@ (8001e08 <HAL_FMC_MspInit+0x134>)
 8001d50:	f001 ff98 	bl	8003c84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001d54:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001d58:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d62:	2303      	movs	r3, #3
 8001d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d66:	230c      	movs	r3, #12
 8001d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4827      	ldr	r0, [pc, #156]	@ (8001e0c <HAL_FMC_MspInit+0x138>)
 8001d70:	f001 ff88 	bl	8003c84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001d74:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001d78:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d86:	230c      	movs	r3, #12
 8001d88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4820      	ldr	r0, [pc, #128]	@ (8001e10 <HAL_FMC_MspInit+0x13c>)
 8001d90:	f001 ff78 	bl	8003c84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001d94:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001d98:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001da6:	230c      	movs	r3, #12
 8001da8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4819      	ldr	r0, [pc, #100]	@ (8001e14 <HAL_FMC_MspInit+0x140>)
 8001db0:	f001 ff68 	bl	8003c84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001db4:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8001db8:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001dc6:	230c      	movs	r3, #12
 8001dc8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4812      	ldr	r0, [pc, #72]	@ (8001e18 <HAL_FMC_MspInit+0x144>)
 8001dd0:	f001 ff58 	bl	8003c84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001de4:	230c      	movs	r3, #12
 8001de6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001de8:	1d3b      	adds	r3, r7, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <HAL_FMC_MspInit+0x148>)
 8001dee:	f001 ff49 	bl	8003c84 <HAL_GPIO_Init>
 8001df2:	e000      	b.n	8001df6 <HAL_FMC_MspInit+0x122>
    return;
 8001df4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000dd4 	.word	0x20000dd4
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021800 	.word	0x40021800
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40022000 	.word	0x40022000
 8001e14:	40021400 	.word	0x40021400
 8001e18:	40021c00 	.word	0x40021c00
 8001e1c:	40020800 	.word	0x40020800

08001e20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001e28:	f7ff ff54 	bl	8001cd4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a26      	ldr	r2, [pc, #152]	@ (8001edc <HAL_SAI_MspInit+0xa8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d146      	bne.n	8001ed4 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001e46:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <HAL_SAI_MspInit+0xac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10d      	bne.n	8001e6a <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <HAL_SAI_MspInit+0xb0>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	4a23      	ldr	r2, [pc, #140]	@ (8001ee4 <HAL_SAI_MspInit+0xb0>)
 8001e58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <HAL_SAI_MspInit+0xb0>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <HAL_SAI_MspInit+0xac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <HAL_SAI_MspInit+0xac>)
 8001e72:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8001e74:	2330      	movs	r3, #48	@ 0x30
 8001e76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001e84:	2306      	movs	r3, #6
 8001e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4816      	ldr	r0, [pc, #88]	@ (8001ee8 <HAL_SAI_MspInit+0xb4>)
 8001e90:	f001 fef8 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8001e94:	2340      	movs	r3, #64	@ 0x40
 8001e96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	4619      	mov	r1, r3
 8001eae:	480f      	ldr	r0, [pc, #60]	@ (8001eec <HAL_SAI_MspInit+0xb8>)
 8001eb0:	f001 fee8 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 030c 	add.w	r3, r7, #12
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4808      	ldr	r0, [pc, #32]	@ (8001ef0 <HAL_SAI_MspInit+0xbc>)
 8001ed0:	f001 fed8 	bl	8003c84 <HAL_GPIO_Init>

    }
}
 8001ed4:	bf00      	nop
 8001ed6:	3720      	adds	r7, #32
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40015804 	.word	0x40015804
 8001ee0:	20000dd8 	.word	0x20000dd8
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021800 	.word	0x40021800

08001ef4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08e      	sub	sp, #56	@ 0x38
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <HAL_InitTick+0xe4>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	4a32      	ldr	r2, [pc, #200]	@ (8001fd8 <HAL_InitTick+0xe4>)
 8001f0e:	f043 0310 	orr.w	r3, r3, #16
 8001f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f14:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <HAL_InitTick+0xe4>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f20:	f107 0210 	add.w	r2, r7, #16
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 f99a 	bl	8007264 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d103      	bne.n	8001f42 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f3a:	f005 f96b 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 8001f3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f40:	e004      	b.n	8001f4c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f42:	f005 f967 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 8001f46:	4603      	mov	r3, r0
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4e:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <HAL_InitTick+0xe8>)
 8001f50:	fba2 2303 	umull	r2, r3, r2, r3
 8001f54:	0c9b      	lsrs	r3, r3, #18
 8001f56:	3b01      	subs	r3, #1
 8001f58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f5a:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_InitTick+0xec>)
 8001f5c:	4a21      	ldr	r2, [pc, #132]	@ (8001fe4 <HAL_InitTick+0xf0>)
 8001f5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f60:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe0 <HAL_InitTick+0xec>)
 8001f62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f68:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe0 <HAL_InitTick+0xec>)
 8001f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <HAL_InitTick+0xec>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <HAL_InitTick+0xec>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_InitTick+0xec>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f80:	4817      	ldr	r0, [pc, #92]	@ (8001fe0 <HAL_InitTick+0xec>)
 8001f82:	f007 fad5 	bl	8009530 <HAL_TIM_Base_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d11b      	bne.n	8001fcc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f94:	4812      	ldr	r0, [pc, #72]	@ (8001fe0 <HAL_InitTick+0xec>)
 8001f96:	f007 fb1b 	bl	80095d0 <HAL_TIM_Base_Start_IT>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d111      	bne.n	8001fcc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fa8:	2036      	movs	r0, #54	@ 0x36
 8001faa:	f000 fa4b 	bl	8002444 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b0f      	cmp	r3, #15
 8001fb2:	d808      	bhi.n	8001fc6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	2036      	movs	r0, #54	@ 0x36
 8001fba:	f000 fa27 	bl	800240c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <HAL_InitTick+0xf4>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e002      	b.n	8001fcc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3738      	adds	r7, #56	@ 0x38
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	431bde83 	.word	0x431bde83
 8001fe0:	20000ddc 	.word	0x20000ddc
 8001fe4:	40001000 	.word	0x40001000
 8001fe8:	20000008 	.word	0x20000008

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <MemManage_Handler+0x4>

08002004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <UsageFault_Handler+0x4>

08002014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <TIM6_DAC_IRQHandler+0x10>)
 8002052:	f007 fb2d 	bl	80096b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000ddc 	.word	0x20000ddc

08002060 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002064:	4802      	ldr	r0, [pc, #8]	@ (8002070 <DMA2_Stream1_IRQHandler+0x10>)
 8002066:	f000 fbaf 	bl	80027c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200004d8 	.word	0x200004d8

08002074 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <OTG_FS_IRQHandler+0x10>)
 800207a:	f002 fac1 	bl	8004600 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000121c 	.word	0x2000121c

08002088 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800208c:	4802      	ldr	r0, [pc, #8]	@ (8002098 <DMA2_Stream6_IRQHandler+0x10>)
 800208e:	f000 fb9b 	bl	80027c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000538 	.word	0x20000538

0800209c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <USART6_IRQHandler+0x10>)
 80020a2:	f008 f865 	bl	800a170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000490 	.word	0x20000490

080020b0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80020b4:	4802      	ldr	r0, [pc, #8]	@ (80020c0 <LTDC_IRQHandler+0x10>)
 80020b6:	f004 fb0b 	bl	80066d0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200001a8 	.word	0x200001a8

080020c4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80020c8:	4802      	ldr	r0, [pc, #8]	@ (80020d4 <DMA2D_IRQHandler+0x10>)
 80020ca:	f000 fe30 	bl	8002d2e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200000a4 	.word	0x200000a4

080020d8 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <DSI_IRQHandler+0x10>)
 80020de:	f001 fa06 	bl	80034ee <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200000e4 	.word	0x200000e4

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	@ (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	@ (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f00d ffb2 	bl	8010084 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	@ (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20050000 	.word	0x20050000
 800214c:	00000400 	.word	0x00000400
 8002150:	20000e24 	.word	0x20000e24
 8002154:	20001748 	.word	0x20001748

08002158 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002180:	f7ff ffea 	bl	8002158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	@ (80021bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	@ (80021c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f00d ff71 	bl	8010090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7fe fb25 	bl	80007fc <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80021c0:	08010a0c 	.word	0x08010a0c
  ldr r2, =_sbss
 80021c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80021c8:	20001744 	.word	0x20001744

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002210 <HAL_Init+0x40>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <HAL_Init+0x40>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <HAL_Init+0x40>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f8fc 	bl	80023f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	200f      	movs	r0, #15
 8002200:	f7ff fe78 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7ff f9a6 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2000000c 	.word	0x2000000c
 8002238:	20000e28 	.word	0x20000e28

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000e28 	.word	0x20000e28

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffde 	bl	800223c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000000c 	.word	0x2000000c

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	@ (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	@ (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4907      	ldr	r1, [pc, #28]	@ (8002338 <__NVIC_EnableIRQ+0x38>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100

0800233c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	db0a      	blt.n	8002366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	@ (8002388 <__NVIC_SetPriority+0x4c>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	0112      	lsls	r2, r2, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	440b      	add	r3, r1
 8002360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002364:	e00a      	b.n	800237c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4908      	ldr	r1, [pc, #32]	@ (800238c <__NVIC_SetPriority+0x50>)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	3b04      	subs	r3, #4
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	440b      	add	r3, r1
 800237a:	761a      	strb	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	@ 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	4313      	orrs	r3, r2
         );
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	@ 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ff4c 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800241e:	f7ff ff61 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002422:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	6978      	ldr	r0, [r7, #20]
 800242a:	f7ff ffb1 	bl	8002390 <NVIC_EncodePriority>
 800242e:	4602      	mov	r2, r0
 8002430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff80 	bl	800233c <__NVIC_SetPriority>
}
 800243c:	bf00      	nop
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff54 	bl	8002300 <__NVIC_EnableIRQ>
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e00e      	b.n	8002490 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	795b      	ldrb	r3, [r3, #5]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff f88e 	bl	80015a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff feca 	bl	800223c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e099      	b.n	80025e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d4:	e00f      	b.n	80024f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d6:	f7ff feb1 	bl	800223c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d908      	bls.n	80024f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e078      	b.n	80025e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e8      	bne.n	80024d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4b38      	ldr	r3, [pc, #224]	@ (80025f0 <HAL_DMA_Init+0x158>)
 8002510:	4013      	ands	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	4313      	orrs	r3, r2
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0307 	bic.w	r3, r3, #7
 8002576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	2b04      	cmp	r3, #4
 8002588:	d117      	bne.n	80025ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fb01 	bl	8002ba4 <DMA_CheckFifoParam>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2240      	movs	r2, #64	@ 0x40
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025b6:	2301      	movs	r3, #1
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fab8 	bl	8002b38 <DMA_CalcBaseAndBitshift>
 80025c8:	4603      	mov	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	223f      	movs	r2, #63	@ 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	f010803f 	.word	0xf010803f

080025f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_DMA_Start_IT+0x26>
 8002616:	2302      	movs	r3, #2
 8002618:	e040      	b.n	800269c <HAL_DMA_Start_IT+0xa8>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d12f      	bne.n	800268e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2202      	movs	r2, #2
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fa4a 	bl	8002adc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800264c:	223f      	movs	r2, #63	@ 0x3f
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0216 	orr.w	r2, r2, #22
 8002662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0208 	orr.w	r2, r2, #8
 800267a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e005      	b.n	800269a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002696:	2302      	movs	r3, #2
 8002698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026b2:	f7ff fdc3 	bl	800223c <HAL_GetTick>
 80026b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d008      	beq.n	80026d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e052      	b.n	800277c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0216 	bic.w	r2, r2, #22
 80026e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d103      	bne.n	8002706 <HAL_DMA_Abort+0x62>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0208 	bic.w	r2, r2, #8
 8002714:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002726:	e013      	b.n	8002750 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002728:	f7ff fd88 	bl	800223c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b05      	cmp	r3, #5
 8002734:	d90c      	bls.n	8002750 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2203      	movs	r2, #3
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e015      	b.n	800277c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1e4      	bne.n	8002728 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	223f      	movs	r2, #63	@ 0x3f
 8002764:	409a      	lsls	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d004      	beq.n	80027a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2280      	movs	r2, #128	@ 0x80
 800279c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00c      	b.n	80027bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2205      	movs	r2, #5
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002a10 <HAL_DMA_IRQHandler+0x248>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a8e      	ldr	r2, [pc, #568]	@ (8002a14 <HAL_DMA_IRQHandler+0x24c>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0a9b      	lsrs	r3, r3, #10
 80027e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	2208      	movs	r2, #8
 80027f4:	409a      	lsls	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01a      	beq.n	8002834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002820:	2208      	movs	r2, #8
 8002822:	409a      	lsls	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002838:	2201      	movs	r2, #1
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d012      	beq.n	800286a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	f043 0202 	orr.w	r2, r3, #2
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	2204      	movs	r2, #4
 8002870:	409a      	lsls	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d012      	beq.n	80028a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	2204      	movs	r2, #4
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	f043 0204 	orr.w	r2, r3, #4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	2210      	movs	r2, #16
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d043      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03c      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	2210      	movs	r2, #16
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d018      	beq.n	800290a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d108      	bne.n	80028f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d024      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	4798      	blx	r3
 80028f6:	e01f      	b.n	8002938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	4798      	blx	r3
 8002908:	e016      	b.n	8002938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0208 	bic.w	r2, r2, #8
 8002926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	2220      	movs	r2, #32
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 808f 	beq.w	8002a68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0310 	and.w	r3, r3, #16
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8087 	beq.w	8002a68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	2220      	movs	r2, #32
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b05      	cmp	r3, #5
 8002970:	d136      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0216 	bic.w	r2, r2, #22
 8002980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	695a      	ldr	r2, [r3, #20]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d103      	bne.n	80029a2 <HAL_DMA_IRQHandler+0x1da>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0208 	bic.w	r2, r2, #8
 80029b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b6:	223f      	movs	r2, #63	@ 0x3f
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d07e      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	4798      	blx	r3
        }
        return;
 80029de:	e079      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01d      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d031      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
 8002a0c:	e02c      	b.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
 8002a0e:	bf00      	nop
 8002a10:	20000004 	.word	0x20000004
 8002a14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d023      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
 8002a28:	e01e      	b.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10f      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0210 	bic.w	r2, r2, #16
 8002a46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d032      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d022      	beq.n	8002ac2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2205      	movs	r2, #5
 8002a80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	3301      	adds	r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d307      	bcc.n	8002ab0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f2      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x2cc>
 8002aae:	e000      	b.n	8002ab2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ab0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
 8002ad2:	e000      	b.n	8002ad6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ad4:	bf00      	nop
    }
  }
}
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002af8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b40      	cmp	r3, #64	@ 0x40
 8002b08:	d108      	bne.n	8002b1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b1a:	e007      	b.n	8002b2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	3b10      	subs	r3, #16
 8002b48:	4a14      	ldr	r2, [pc, #80]	@ (8002b9c <DMA_CalcBaseAndBitshift+0x64>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	091b      	lsrs	r3, r3, #4
 8002b50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b52:	4a13      	ldr	r2, [pc, #76]	@ (8002ba0 <DMA_CalcBaseAndBitshift+0x68>)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d909      	bls.n	8002b7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b6e:	f023 0303 	bic.w	r3, r3, #3
 8002b72:	1d1a      	adds	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b78:	e007      	b.n	8002b8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002b82:	f023 0303 	bic.w	r3, r3, #3
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	aaaaaaab 	.word	0xaaaaaaab
 8002ba0:	080109ac 	.word	0x080109ac

08002ba4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d11f      	bne.n	8002bfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d856      	bhi.n	8002c72 <DMA_CheckFifoParam+0xce>
 8002bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8002bcc <DMA_CheckFifoParam+0x28>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002bdd 	.word	0x08002bdd
 8002bd0:	08002bef 	.word	0x08002bef
 8002bd4:	08002bdd 	.word	0x08002bdd
 8002bd8:	08002c73 	.word	0x08002c73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d046      	beq.n	8002c76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bec:	e043      	b.n	8002c76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002bf6:	d140      	bne.n	8002c7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bfc:	e03d      	b.n	8002c7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c06:	d121      	bne.n	8002c4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d837      	bhi.n	8002c7e <DMA_CheckFifoParam+0xda>
 8002c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <DMA_CheckFifoParam+0x70>)
 8002c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c2b 	.word	0x08002c2b
 8002c1c:	08002c25 	.word	0x08002c25
 8002c20:	08002c3d 	.word	0x08002c3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e030      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d025      	beq.n	8002c82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c3a:	e022      	b.n	8002c82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c44:	d11f      	bne.n	8002c86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c4a:	e01c      	b.n	8002c86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d903      	bls.n	8002c5a <DMA_CheckFifoParam+0xb6>
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d003      	beq.n	8002c60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c58:	e018      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c5e:	e015      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00e      	beq.n	8002c8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c70:	e00b      	b.n	8002c8a <DMA_CheckFifoParam+0xe6>
      break;
 8002c72:	bf00      	nop
 8002c74:	e00a      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e008      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e006      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e004      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c82:	bf00      	nop
 8002c84:	e002      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c86:	bf00      	nop
 8002c88:	e000      	b.n	8002c8c <DMA_CheckFifoParam+0xe8>
      break;
 8002c8a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e03b      	b.n	8002d26 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fc90 	bl	80015e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cec:	f023 0107 	bic.w	r1, r3, #7
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d06:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	68d1      	ldr	r1, [r2, #12]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	430b      	orrs	r3, r1
 8002d14:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d026      	beq.n	8002d9e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d021      	beq.n	8002d9e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d68:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2204      	movs	r2, #4
 8002d82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d026      	beq.n	8002df6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d021      	beq.n	8002df6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	f043 0202 	orr.w	r2, r3, #2
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d026      	beq.n	8002e4e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d021      	beq.n	8002e4e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e18:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2208      	movs	r2, #8
 8002e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e26:	f043 0204 	orr.w	r2, r3, #4
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2204      	movs	r2, #4
 8002e32:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00e      	beq.n	8002e80 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e70:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2204      	movs	r2, #4
 8002e78:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f853 	bl	8002f26 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d024      	beq.n	8002ed4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d01f      	beq.n	8002ed4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01f      	beq.n	8002f1e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d01a      	beq.n	8002f1e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2210      	movs	r2, #16
 8002efe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f80e 	bl	8002f3a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_DMA2D_ConfigLayer+0x20>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e079      	b.n	8003064 <HAL_DMA2D_ConfigLayer+0x114>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	3318      	adds	r3, #24
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002f9a:	4b35      	ldr	r3, [pc, #212]	@ (8003070 <HAL_DMA2D_ConfigLayer+0x120>)
 8002f9c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b0a      	cmp	r3, #10
 8002fa4:	d003      	beq.n	8002fae <HAL_DMA2D_ConfigLayer+0x5e>
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b09      	cmp	r3, #9
 8002fac:	d107      	bne.n	8002fbe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	e005      	b.n	8002fca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	061b      	lsls	r3, r3, #24
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d120      	bne.n	8003012 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	ea02 0103 	and.w	r1, r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b0a      	cmp	r3, #10
 8002ff8:	d003      	beq.n	8003002 <HAL_DMA2D_ConfigLayer+0xb2>
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b09      	cmp	r3, #9
 8003000:	d127      	bne.n	8003052 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800300e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003010:	e01f      	b.n	8003052 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	69da      	ldr	r2, [r3, #28]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43db      	mvns	r3, r3
 800301c:	ea02 0103 	and.w	r1, r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	430a      	orrs	r2, r1
 8003028:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	6812      	ldr	r2, [r2, #0]
 8003032:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b0a      	cmp	r3, #10
 800303a:	d003      	beq.n	8003044 <HAL_DMA2D_ConfigLayer+0xf4>
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b09      	cmp	r3, #9
 8003042:	d106      	bne.n	8003052 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003050:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	ff03000f 	.word	0xff03000f

08003074 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	@ 0x28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e16e      	b.n	8003366 <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	7c5b      	ldrb	r3, [r3, #17]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d102      	bne.n	8003098 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe fad0 	bl	8001638 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2203      	movs	r2, #3
 800309c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800309e:	2300      	movs	r3, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80030b2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80030be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c2:	61bb      	str	r3, [r7, #24]
 80030c4:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c6:	f7ff f8b9 	bl	800223c <HAL_GetTick>
 80030ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80030cc:	e009      	b.n	80030e2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80030ce:	f7ff f8b5 	bl	800223c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030dc:	d901      	bls.n	80030e2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e141      	b.n	8003366 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80030ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0ed      	beq.n	80030ce <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8003102:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8003106:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800311e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8003126:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	430a      	orrs	r2, r1
 800312e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800315a:	2001      	movs	r0, #1
 800315c:	f7ff f87a 	bl	8002254 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003160:	f7ff f86c 	bl	800223c <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003166:	e009      	b.n	800317c <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003168:	f7ff f868 	bl	800223c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003176:	d901      	bls.n	800317c <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e0f4      	b.n	8003366 <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ed      	beq.n	8003168 <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031bc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6899      	ldr	r1, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 0202 	orr.w	r2, r2, #2
 80031e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0204 	orr.w	r2, r2, #4
 80031f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0203 	bic.w	r2, r2, #3
 8003208:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8003222:	f7ff f80b 	bl	800223c <HAL_GetTick>
 8003226:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d123      	bne.n	8003280 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8003238:	e00c      	b.n	8003254 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800323a:	f7fe ffff 	bl	800223c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003248:	d904      	bls.n	8003254 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e088      	b.n	8003366 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800325c:	f003 0314 	and.w	r3, r3, #20
 8003260:	2b14      	cmp	r3, #20
 8003262:	d1ea      	bne.n	800323a <HAL_DSI_Init+0x1c6>
 8003264:	e014      	b.n	8003290 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003266:	f7fe ffe9 	bl	800223c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003274:	d904      	bls.n	8003280 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e072      	b.n	8003366 <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003288:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800328c:	2b94      	cmp	r3, #148	@ 0x94
 800328e:	d1ea      	bne.n	8003266 <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_DSI_Init+0x22a>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	e000      	b.n	80032a0 <HAL_DSI_Init+0x22c>
 800329e:	2301      	movs	r3, #1
 80032a0:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	4a32      	ldr	r2, [pc, #200]	@ (8003370 <HAL_DSI_Init+0x2fc>)
 80032a6:	fb03 f202 	mul.w	r2, r3, r2
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	409a      	lsls	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c4:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80032d6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0203 	bic.w	r2, r2, #3
 800333a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f042 0201 	orr.w	r2, r2, #1
 8003354:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3728      	adds	r7, #40	@ 0x28
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	003d0900 	.word	0x003d0900

08003374 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7c1b      	ldrb	r3, [r3, #16]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_DSI_ConfigErrorMonitor+0x16>
 8003386:	2302      	movs	r3, #2
 8003388:	e0ab      	b.n	80034e2 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2200      	movs	r2, #0
 8003396:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00b      	beq.n	80033cc <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 80033c4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 80033c8:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80033e6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0202 	orr.w	r2, r2, #2
 8003422:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 020c 	orr.w	r2, r2, #12
 8003440:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0210 	orr.w	r2, r2, #16
 800345e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0220 	orr.w	r2, r2, #32
 800347c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800349a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80034b8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 80034d6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00f      	beq.n	8003526 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2201      	movs	r2, #1
 800351c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8ad 	bl	8003680 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00f      	beq.n	8003556 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2202      	movs	r2, #2
 800354c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f89f 	bl	8003694 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 808c 	beq.w	8003678 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003568:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003580:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f043 0201 	orr.w	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f043 0202 	orr.w	r2, r3, #2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	f043 0204 	orr.w	r2, r3, #4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	f043 0208 	orr.w	r2, r3, #8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f003 030c 	and.w	r3, r3, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f043 0210 	orr.w	r2, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 800365a:	2b00      	cmp	r3, #0
 800365c:	d005      	beq.n	800366a <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f818 	bl	80036a8 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	7c1b      	ldrb	r3, [r3, #16]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_DSI_SetGenericVCID+0x16>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e016      	b.n	8003700 <HAL_DSI_SetGenericVCID+0x44>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0203 	bic.w	r2, r2, #3
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	7c1b      	ldrb	r3, [r3, #16]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 800371e:	2302      	movs	r3, #2
 8003720:	e0c5      	b.n	80038ae <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0203 	bic.w	r2, r2, #3
 800376e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68d9      	ldr	r1, [r3, #12]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	430a      	orrs	r2, r1
 8003780:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695a      	ldr	r2, [r3, #20]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0207 	bic.w	r2, r2, #7
 8003790:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6959      	ldr	r1, [r3, #20]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 020f 	bic.w	r2, r2, #15
 80037be:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6919      	ldr	r1, [r3, #16]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020e 	bic.w	r2, r2, #14
 80037e2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	005a      	lsls	r2, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003830:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	431a      	orrs	r2, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0202 	orr.w	r2, r2, #2
 80038a2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7c1b      	ldrb	r3, [r3, #16]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_DSI_ConfigCommand+0x16>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e049      	b.n	8003966 <HAL_DSI_ConfigCommand+0xaa>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b24      	ldr	r3, [pc, #144]	@ (8003974 <HAL_DSI_ConfigCommand+0xb8>)
 80038e4:	400b      	ands	r3, r1
 80038e6:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80038f6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80038fc:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003902:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003908:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800390e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003914:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800391a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003920:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003926:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800392c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003932:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0202 	bic.w	r2, r2, #2
 800394a:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	fef080ff 	.word	0xfef080ff

08003978 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	7c1b      	ldrb	r3, [r3, #16]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_DSI_ConfigFlowControl+0x16>
 800398a:	2302      	movs	r3, #2
 800398c:	e016      	b.n	80039bc <HAL_DSI_ConfigFlowControl+0x44>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 021f 	bic.w	r2, r2, #31
 80039a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	7c1b      	ldrb	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_DSI_ConfigPhyTimer+0x16>
 80039da:	2302      	movs	r3, #2
 80039dc:	e058      	b.n	8003a90 <HAL_DSI_ConfigPhyTimer+0xc8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	bf38      	it	cc
 80039f0:	4613      	movcc	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8003a04:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	041a      	lsls	r2, r3, #16
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8003a32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003a6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	021a      	lsls	r2, r3, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	7c1b      	ldrb	r3, [r3, #16]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e0b4      	b.n	8003c1c <HAL_DSI_ConfigHostTimeouts+0x180>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003ac6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6899      	ldr	r1, [r3, #8]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	021a      	lsls	r2, r3, #8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	b292      	uxth	r2, r2
 8003ae8:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	041a      	lsls	r2, r3, #16
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	041b      	lsls	r3, r3, #16
 8003b2e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	0c1b      	lsrs	r3, r3, #16
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	0c1b      	lsrs	r3, r3, #16
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003ba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	69da      	ldr	r2, [r3, #28]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6812      	ldr	r2, [r2, #0]
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	041b      	lsls	r3, r3, #16
 8003bfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7c1b      	ldrb	r3, [r3, #16]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e01b      	b.n	8003c76 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003c54:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	065a      	lsls	r2, r3, #25
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b089      	sub	sp, #36	@ 0x24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	e177      	b.n	8003f90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	f040 8166 	bne.w	8003f8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d005      	beq.n	8003cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d130      	bne.n	8003d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 0201 	and.w	r2, r3, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d017      	beq.n	8003d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	2203      	movs	r2, #3
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d123      	bne.n	8003dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	08da      	lsrs	r2, r3, #3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3208      	adds	r2, #8
 8003d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	220f      	movs	r2, #15
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	08da      	lsrs	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3208      	adds	r2, #8
 8003dc2:	69b9      	ldr	r1, [r7, #24]
 8003dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0203 	and.w	r2, r3, #3
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80c0 	beq.w	8003f8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	4b66      	ldr	r3, [pc, #408]	@ (8003fa8 <HAL_GPIO_Init+0x324>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	4a65      	ldr	r2, [pc, #404]	@ (8003fa8 <HAL_GPIO_Init+0x324>)
 8003e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e1a:	4b63      	ldr	r3, [pc, #396]	@ (8003fa8 <HAL_GPIO_Init+0x324>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e26:	4a61      	ldr	r2, [pc, #388]	@ (8003fac <HAL_GPIO_Init+0x328>)
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	220f      	movs	r2, #15
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a58      	ldr	r2, [pc, #352]	@ (8003fb0 <HAL_GPIO_Init+0x32c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d037      	beq.n	8003ec2 <HAL_GPIO_Init+0x23e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a57      	ldr	r2, [pc, #348]	@ (8003fb4 <HAL_GPIO_Init+0x330>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d031      	beq.n	8003ebe <HAL_GPIO_Init+0x23a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a56      	ldr	r2, [pc, #344]	@ (8003fb8 <HAL_GPIO_Init+0x334>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d02b      	beq.n	8003eba <HAL_GPIO_Init+0x236>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a55      	ldr	r2, [pc, #340]	@ (8003fbc <HAL_GPIO_Init+0x338>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d025      	beq.n	8003eb6 <HAL_GPIO_Init+0x232>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a54      	ldr	r2, [pc, #336]	@ (8003fc0 <HAL_GPIO_Init+0x33c>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01f      	beq.n	8003eb2 <HAL_GPIO_Init+0x22e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a53      	ldr	r2, [pc, #332]	@ (8003fc4 <HAL_GPIO_Init+0x340>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d019      	beq.n	8003eae <HAL_GPIO_Init+0x22a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	@ (8003fc8 <HAL_GPIO_Init+0x344>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_GPIO_Init+0x226>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a51      	ldr	r2, [pc, #324]	@ (8003fcc <HAL_GPIO_Init+0x348>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00d      	beq.n	8003ea6 <HAL_GPIO_Init+0x222>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a50      	ldr	r2, [pc, #320]	@ (8003fd0 <HAL_GPIO_Init+0x34c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <HAL_GPIO_Init+0x21e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4f      	ldr	r2, [pc, #316]	@ (8003fd4 <HAL_GPIO_Init+0x350>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_GPIO_Init+0x21a>
 8003e9a:	2309      	movs	r3, #9
 8003e9c:	e012      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003e9e:	230a      	movs	r3, #10
 8003ea0:	e010      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	e00e      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003ea6:	2307      	movs	r3, #7
 8003ea8:	e00c      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003eaa:	2306      	movs	r3, #6
 8003eac:	e00a      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003eae:	2305      	movs	r3, #5
 8003eb0:	e008      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e004      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e002      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_GPIO_Init+0x240>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	f002 0203 	and.w	r2, r2, #3
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	4093      	lsls	r3, r2
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed4:	4935      	ldr	r1, [pc, #212]	@ (8003fac <HAL_GPIO_Init+0x328>)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	3302      	adds	r3, #2
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fd8 <HAL_GPIO_Init+0x354>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	43db      	mvns	r3, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f06:	4a34      	ldr	r2, [pc, #208]	@ (8003fd8 <HAL_GPIO_Init+0x354>)
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f0c:	4b32      	ldr	r3, [pc, #200]	@ (8003fd8 <HAL_GPIO_Init+0x354>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f30:	4a29      	ldr	r2, [pc, #164]	@ (8003fd8 <HAL_GPIO_Init+0x354>)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f36:	4b28      	ldr	r3, [pc, #160]	@ (8003fd8 <HAL_GPIO_Init+0x354>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd8 <HAL_GPIO_Init+0x354>)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f60:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd8 <HAL_GPIO_Init+0x354>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f84:	4a14      	ldr	r2, [pc, #80]	@ (8003fd8 <HAL_GPIO_Init+0x354>)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b0f      	cmp	r3, #15
 8003f94:	f67f ae84 	bls.w	8003ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	3724      	adds	r7, #36	@ 0x24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40013800 	.word	0x40013800
 8003fb0:	40020000 	.word	0x40020000
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	40020800 	.word	0x40020800
 8003fbc:	40020c00 	.word	0x40020c00
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40021400 	.word	0x40021400
 8003fc8:	40021800 	.word	0x40021800
 8003fcc:	40021c00 	.word	0x40021c00
 8003fd0:	40022000 	.word	0x40022000
 8003fd4:	40022400 	.word	0x40022400
 8003fd8:	40013c00 	.word	0x40013c00

08003fdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e001      	b.n	8003ffe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	807b      	strh	r3, [r7, #2]
 8004018:	4613      	mov	r3, r2
 800401a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800401c:	787b      	ldrb	r3, [r7, #1]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004028:	e003      	b.n	8004032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	041a      	lsls	r2, r3, #16
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	619a      	str	r2, [r3, #24]
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af02      	add	r7, sp, #8
 8004044:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e059      	b.n	8004104 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f00b fc3e 	bl	800f8ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2203      	movs	r2, #3
 8004074:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800407e:	d102      	bne.n	8004086 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f008 f869 	bl	800c162 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	7c1a      	ldrb	r2, [r3, #16]
 8004098:	f88d 2000 	strb.w	r2, [sp]
 800409c:	3304      	adds	r3, #4
 800409e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a0:	f007 ffea 	bl	800c078 <USB_CoreInit>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d005      	beq.n	80040b6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e026      	b.n	8004104 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f008 f861 	bl	800c184 <USB_SetCurrentMode>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e017      	b.n	8004104 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7c1a      	ldrb	r2, [r3, #16]
 80040dc:	f88d 2000 	strb.w	r2, [sp]
 80040e0:	3304      	adds	r3, #4
 80040e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e4:	f008 fa04 	bl	800c4f0 <USB_HostInit>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e004      	b.n	8004104 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b08b      	sub	sp, #44	@ 0x2c
 8004110:	af04      	add	r7, sp, #16
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	461a      	mov	r2, r3
 800411a:	4603      	mov	r3, r0
 800411c:	70fb      	strb	r3, [r7, #3]
 800411e:	460b      	mov	r3, r1
 8004120:	70bb      	strb	r3, [r7, #2]
 8004122:	4613      	mov	r3, r2
 8004124:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8004126:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004128:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_HCD_HC_Init+0x2c>
 8004134:	2302      	movs	r3, #2
 8004136:	e09d      	b.n	8004274 <HAL_HCD_HC_Init+0x168>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3319      	adds	r3, #25
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	3314      	adds	r3, #20
 8004164:	787a      	ldrb	r2, [r7, #1]
 8004166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	3315      	adds	r3, #21
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	3326      	adds	r3, #38	@ 0x26
 800418c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004190:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004192:	78fa      	ldrb	r2, [r7, #3]
 8004194:	78bb      	ldrb	r3, [r7, #2]
 8004196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800419a:	b2d8      	uxtb	r0, r3
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	3316      	adds	r3, #22
 80041aa:	4602      	mov	r2, r0
 80041ac:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80041ae:	78fb      	ldrb	r3, [r7, #3]
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fbc8 	bl	8004948 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80041b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da0a      	bge.n	80041d6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	3317      	adds	r3, #23
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e009      	b.n	80041ea <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3317      	adds	r3, #23
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f008 fad6 	bl	800c7a0 <USB_GetHostSpeed>
 80041f4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80041f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d10b      	bne.n	8004216 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80041fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004202:	2b01      	cmp	r3, #1
 8004204:	d107      	bne.n	8004216 <HAL_HCD_HC_Init+0x10a>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2bbc      	cmp	r3, #188	@ 0xbc
 8004210:	d901      	bls.n	8004216 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8004212:	23bc      	movs	r3, #188	@ 0xbc
 8004214:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	6879      	ldr	r1, [r7, #4]
 800421a:	4613      	mov	r3, r2
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	3318      	adds	r3, #24
 8004226:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800422a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	b298      	uxth	r0, r3
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	3328      	adds	r3, #40	@ 0x28
 8004240:	4602      	mov	r2, r0
 8004242:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	b29b      	uxth	r3, r3
 800424c:	787c      	ldrb	r4, [r7, #1]
 800424e:	78ba      	ldrb	r2, [r7, #2]
 8004250:	78f9      	ldrb	r1, [r7, #3]
 8004252:	9302      	str	r3, [sp, #8]
 8004254:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	4623      	mov	r3, r4
 8004262:	f008 fac5 	bl	800c7f0 <USB_HC_Init>
 8004266:	4603      	mov	r3, r0
 8004268:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}

0800427c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_HCD_HC_Halt+0x1e>
 8004296:	2302      	movs	r3, #2
 8004298:	e00f      	b.n	80042ba <HAL_HCD_HC_Halt+0x3e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	4611      	mov	r1, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f008 fe57 	bl	800cf5e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	4608      	mov	r0, r1
 80042ce:	4611      	mov	r1, r2
 80042d0:	461a      	mov	r2, r3
 80042d2:	4603      	mov	r3, r0
 80042d4:	70fb      	strb	r3, [r7, #3]
 80042d6:	460b      	mov	r3, r1
 80042d8:	70bb      	strb	r3, [r7, #2]
 80042da:	4613      	mov	r3, r2
 80042dc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	3317      	adds	r3, #23
 80042ee:	78ba      	ldrb	r2, [r7, #2]
 80042f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80042f2:	78fa      	ldrb	r2, [r7, #3]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	1a9b      	subs	r3, r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	440b      	add	r3, r1
 8004300:	3326      	adds	r3, #38	@ 0x26
 8004302:	787a      	ldrb	r2, [r7, #1]
 8004304:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004306:	7c3b      	ldrb	r3, [r7, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d114      	bne.n	8004336 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	332a      	adds	r3, #42	@ 0x2a
 800431c:	2203      	movs	r2, #3
 800431e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	3319      	adds	r3, #25
 8004330:	7f3a      	ldrb	r2, [r7, #28]
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e009      	b.n	800434a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	332a      	adds	r3, #42	@ 0x2a
 8004346:	2202      	movs	r2, #2
 8004348:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800434a:	787b      	ldrb	r3, [r7, #1]
 800434c:	2b03      	cmp	r3, #3
 800434e:	f200 8102 	bhi.w	8004556 <HAL_HCD_HC_SubmitRequest+0x292>
 8004352:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004369 	.word	0x08004369
 800435c:	08004541 	.word	0x08004541
 8004360:	0800442d 	.word	0x0800442d
 8004364:	080044b7 	.word	0x080044b7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004368:	7c3b      	ldrb	r3, [r7, #16]
 800436a:	2b01      	cmp	r3, #1
 800436c:	f040 80f5 	bne.w	800455a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004370:	78bb      	ldrb	r3, [r7, #2]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d12d      	bne.n	80043d2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004376:	8b3b      	ldrh	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	333d      	adds	r3, #61	@ 0x3d
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	333d      	adds	r3, #61	@ 0x3d
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10a      	bne.n	80043bc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	332a      	adds	r3, #42	@ 0x2a
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80043ba:	e0ce      	b.n	800455a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043bc:	78fa      	ldrb	r2, [r7, #3]
 80043be:	6879      	ldr	r1, [r7, #4]
 80043c0:	4613      	mov	r3, r2
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	1a9b      	subs	r3, r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	332a      	adds	r3, #42	@ 0x2a
 80043cc:	2202      	movs	r2, #2
 80043ce:	701a      	strb	r2, [r3, #0]
      break;
 80043d0:	e0c3      	b.n	800455a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	331a      	adds	r3, #26
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	f040 80b8 	bne.w	800455a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	333c      	adds	r3, #60	@ 0x3c
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004400:	78fa      	ldrb	r2, [r7, #3]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	332a      	adds	r3, #42	@ 0x2a
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
      break;
 8004414:	e0a1      	b.n	800455a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004416:	78fa      	ldrb	r2, [r7, #3]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	332a      	adds	r3, #42	@ 0x2a
 8004426:	2202      	movs	r2, #2
 8004428:	701a      	strb	r2, [r3, #0]
      break;
 800442a:	e096      	b.n	800455a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800442c:	78bb      	ldrb	r3, [r7, #2]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d120      	bne.n	8004474 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	333d      	adds	r3, #61	@ 0x3d
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10a      	bne.n	800445e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004448:	78fa      	ldrb	r2, [r7, #3]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	332a      	adds	r3, #42	@ 0x2a
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800445c:	e07e      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	332a      	adds	r3, #42	@ 0x2a
 800446e:	2202      	movs	r2, #2
 8004470:	701a      	strb	r2, [r3, #0]
      break;
 8004472:	e073      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	333c      	adds	r3, #60	@ 0x3c
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	332a      	adds	r3, #42	@ 0x2a
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
      break;
 800449e:	e05d      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044a0:	78fa      	ldrb	r2, [r7, #3]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	332a      	adds	r3, #42	@ 0x2a
 80044b0:	2202      	movs	r2, #2
 80044b2:	701a      	strb	r2, [r3, #0]
      break;
 80044b4:	e052      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80044b6:	78bb      	ldrb	r3, [r7, #2]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d120      	bne.n	80044fe <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	333d      	adds	r3, #61	@ 0x3d
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	332a      	adds	r3, #42	@ 0x2a
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80044e6:	e039      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044e8:	78fa      	ldrb	r2, [r7, #3]
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	332a      	adds	r3, #42	@ 0x2a
 80044f8:	2202      	movs	r2, #2
 80044fa:	701a      	strb	r2, [r3, #0]
      break;
 80044fc:	e02e      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	1a9b      	subs	r3, r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	333c      	adds	r3, #60	@ 0x3c
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	332a      	adds	r3, #42	@ 0x2a
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
      break;
 8004528:	e018      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	332a      	adds	r3, #42	@ 0x2a
 800453a:	2202      	movs	r2, #2
 800453c:	701a      	strb	r2, [r3, #0]
      break;
 800453e:	e00d      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	332a      	adds	r3, #42	@ 0x2a
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]
      break;
 8004554:	e002      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004556:	bf00      	nop
 8004558:	e000      	b.n	800455c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800455a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	332c      	adds	r3, #44	@ 0x2c
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	8b39      	ldrh	r1, [r7, #24]
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	1a9b      	subs	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4403      	add	r3, r0
 8004580:	3334      	adds	r3, #52	@ 0x34
 8004582:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	334c      	adds	r3, #76	@ 0x4c
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3338      	adds	r3, #56	@ 0x38
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	3315      	adds	r3, #21
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	334d      	adds	r3, #77	@ 0x4d
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	4613      	mov	r3, r2
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	3310      	adds	r3, #16
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	1d19      	adds	r1, r3, #4
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	799b      	ldrb	r3, [r3, #6]
 80045ee:	461a      	mov	r2, r3
 80045f0:	f008 fa2a 	bl	800ca48 <USB_HC_StartXfer>
 80045f4:	4603      	mov	r3, r0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop

08004600 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f007 ff2a 	bl	800c470 <USB_GetMode>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	f040 80fb 	bne.w	800481a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f007 feed 	bl	800c408 <USB_ReadInterrupts>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80f1 	beq.w	8004818 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f007 fee4 	bl	800c408 <USB_ReadInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004646:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800464a:	d104      	bne.n	8004656 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004654:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f007 fed4 	bl	800c408 <USB_ReadInterrupts>
 8004660:	4603      	mov	r3, r0
 8004662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800466a:	d104      	bne.n	8004676 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004674:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f007 fec4 	bl	800c408 <USB_ReadInterrupts>
 8004680:	4603      	mov	r3, r0
 8004682:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004686:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800468a:	d104      	bne.n	8004696 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004694:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f007 feb4 	bl	800c408 <USB_ReadInterrupts>
 80046a0:	4603      	mov	r3, r0
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d103      	bne.n	80046b2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2202      	movs	r2, #2
 80046b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f007 fea6 	bl	800c408 <USB_ReadInterrupts>
 80046bc:	4603      	mov	r3, r0
 80046be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c6:	d120      	bne.n	800470a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80046d0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d113      	bne.n	800470a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80046e2:	2110      	movs	r1, #16
 80046e4:	6938      	ldr	r0, [r7, #16]
 80046e6:	f007 fd99 	bl	800c21c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80046ea:	6938      	ldr	r0, [r7, #16]
 80046ec:	f007 fdc8 	bl	800c280 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	7a5b      	ldrb	r3, [r3, #9]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d105      	bne.n	8004704 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f007 ffae 	bl	800c660 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f00b f96f 	bl	800f9e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f007 fe7a 	bl	800c408 <USB_ReadInterrupts>
 8004714:	4603      	mov	r3, r0
 8004716:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800471a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800471e:	d102      	bne.n	8004726 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 fd4d 	bl	80061c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f007 fe6c 	bl	800c408 <USB_ReadInterrupts>
 8004730:	4603      	mov	r3, r0
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b08      	cmp	r3, #8
 8004738:	d106      	bne.n	8004748 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f00b f938 	bl	800f9b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2208      	movs	r2, #8
 8004746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f007 fe5b 	bl	800c408 <USB_ReadInterrupts>
 8004752:	4603      	mov	r3, r0
 8004754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800475c:	d139      	bne.n	80047d2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f008 fbea 	bl	800cf3c <USB_HC_ReadInterrupt>
 8004768:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	e025      	b.n	80047bc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d018      	beq.n	80047b6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004796:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800479a:	d106      	bne.n	80047aa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f905 	bl	80049b2 <HCD_HC_IN_IRQHandler>
 80047a8:	e005      	b.n	80047b6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 ff67 	bl	8005684 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	3301      	adds	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	795b      	ldrb	r3, [r3, #5]
 80047c0:	461a      	mov	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d3d3      	bcc.n	8004770 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f007 fe16 	bl	800c408 <USB_ReadInterrupts>
 80047dc:	4603      	mov	r3, r0
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d101      	bne.n	80047ea <HAL_HCD_IRQHandler+0x1ea>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_HCD_IRQHandler+0x1ec>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d014      	beq.n	800481a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0210 	bic.w	r2, r2, #16
 80047fe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f001 fbfe 	bl	8006002 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0210 	orr.w	r2, r2, #16
 8004814:	619a      	str	r2, [r3, #24]
 8004816:	e000      	b.n	800481a <HAL_HCD_IRQHandler+0x21a>
      return;
 8004818:	bf00      	nop
    }
  }
}
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_HCD_Start+0x16>
 8004832:	2302      	movs	r3, #2
 8004834:	e013      	b.n	800485e <HAL_HCD_Start+0x3e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2101      	movs	r1, #1
 8004844:	4618      	mov	r0, r3
 8004846:	f007 ff72 	bl	800c72e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f007 fc76 	bl	800c140 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}

08004866 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_HCD_Stop+0x16>
 8004878:	2302      	movs	r3, #2
 800487a:	e00d      	b.n	8004898 <HAL_HCD_Stop+0x32>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f008 fcc5 	bl	800d218 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f007 ff14 	bl	800c6da <USB_ResetPort>
 80048b2:	4603      	mov	r3, r0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80048c8:	78fa      	ldrb	r2, [r7, #3]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	1a9b      	subs	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	334c      	adds	r3, #76	@ 0x4c
 80048d8:	781b      	ldrb	r3, [r3, #0]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	460b      	mov	r3, r1
 80048f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3338      	adds	r3, #56	@ 0x38
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f007 ff56 	bl	800c7ce <USB_GetCurrentFrame>
 8004922:	4603      	mov	r3, r0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f007 ff31 	bl	800c7a0 <USB_GetHostSpeed>
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004954:	78fa      	ldrb	r2, [r7, #3]
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	4613      	mov	r3, r2
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	331a      	adds	r3, #26
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	331b      	adds	r3, #27
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	3325      	adds	r3, #37	@ 0x25
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	3324      	adds	r3, #36	@ 0x24
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b086      	sub	sp, #24
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	78fa      	ldrb	r2, [r7, #3]
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f007 fd2c 	bl	800c42e <USB_ReadChInterrupts>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d11a      	bne.n	8004a16 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ec:	461a      	mov	r2, r3
 80049ee:	2304      	movs	r3, #4
 80049f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80049f2:	78fa      	ldrb	r2, [r7, #3]
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	334d      	adds	r3, #77	@ 0x4d
 8004a02:	2207      	movs	r2, #7
 8004a04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f008 faa5 	bl	800cf5e <USB_HC_Halt>
 8004a14:	e09e      	b.n	8004b54 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f007 fd05 	bl	800c42e <USB_ReadChInterrupts>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a2e:	d11b      	bne.n	8004a68 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004a44:	78fa      	ldrb	r2, [r7, #3]
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	440b      	add	r3, r1
 8004a52:	334d      	adds	r3, #77	@ 0x4d
 8004a54:	2208      	movs	r2, #8
 8004a56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f008 fa7c 	bl	800cf5e <USB_HC_Halt>
 8004a66:	e075      	b.n	8004b54 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f007 fcdc 	bl	800c42e <USB_ReadChInterrupts>
 8004a76:	4603      	mov	r3, r0
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d11a      	bne.n	8004ab6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2308      	movs	r3, #8
 8004a90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	334d      	adds	r3, #77	@ 0x4d
 8004aa2:	2206      	movs	r2, #6
 8004aa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f008 fa55 	bl	800cf5e <USB_HC_Halt>
 8004ab4:	e04e      	b.n	8004b54 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	78fa      	ldrb	r2, [r7, #3]
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f007 fcb5 	bl	800c42e <USB_ReadChInterrupts>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ace:	d11b      	bne.n	8004b08 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004ad0:	78fb      	ldrb	r3, [r7, #3]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004adc:	461a      	mov	r2, r3
 8004ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ae2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004ae4:	78fa      	ldrb	r2, [r7, #3]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	1a9b      	subs	r3, r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	334d      	adds	r3, #77	@ 0x4d
 8004af4:	2209      	movs	r2, #9
 8004af6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f008 fa2c 	bl	800cf5e <USB_HC_Halt>
 8004b06:	e025      	b.n	8004b54 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f007 fc8c 	bl	800c42e <USB_ReadChInterrupts>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1c:	2b80      	cmp	r3, #128	@ 0x80
 8004b1e:	d119      	bne.n	8004b54 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004b20:	78fb      	ldrb	r3, [r7, #3]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2380      	movs	r3, #128	@ 0x80
 8004b30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	011b      	lsls	r3, r3, #4
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	334d      	adds	r3, #77	@ 0x4d
 8004b42:	2207      	movs	r2, #7
 8004b44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f008 fa05 	bl	800cf5e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	78fa      	ldrb	r2, [r7, #3]
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f007 fc66 	bl	800c42e <USB_ReadChInterrupts>
 8004b62:	4603      	mov	r3, r0
 8004b64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b6c:	d112      	bne.n	8004b94 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f008 f9f1 	bl	800cf5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b8e:	6093      	str	r3, [r2, #8]
 8004b90:	f000 bd75 	b.w	800567e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	78fa      	ldrb	r2, [r7, #3]
 8004b9a:	4611      	mov	r1, r2
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f007 fc46 	bl	800c42e <USB_ReadChInterrupts>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	f040 8128 	bne.w	8004dfe <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bba:	461a      	mov	r2, r3
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004bc0:	78fa      	ldrb	r2, [r7, #3]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	1a9b      	subs	r3, r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	331b      	adds	r3, #27
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d119      	bne.n	8004c0a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004bd6:	78fa      	ldrb	r2, [r7, #3]
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	1a9b      	subs	r3, r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	440b      	add	r3, r1
 8004be4:	331b      	adds	r3, #27
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	0151      	lsls	r1, r2, #5
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	440a      	add	r2, r1
 8004c00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c08:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	799b      	ldrb	r3, [r3, #6]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01b      	beq.n	8004c4a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	3330      	adds	r3, #48	@ 0x30
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	1ac9      	subs	r1, r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4403      	add	r3, r0
 8004c46:	3338      	adds	r3, #56	@ 0x38
 8004c48:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	334d      	adds	r3, #77	@ 0x4d
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	3344      	adds	r3, #68	@ 0x44
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2301      	movs	r3, #1
 8004c82:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	3326      	adds	r3, #38	@ 0x26
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3326      	adds	r3, #38	@ 0x26
 8004caa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d110      	bne.n	8004cd2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	78fa      	ldrb	r2, [r7, #3]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f008 f950 	bl	800cf5e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2310      	movs	r3, #16
 8004cce:	6093      	str	r3, [r2, #8]
 8004cd0:	e03d      	b.n	8004d4e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	3326      	adds	r3, #38	@ 0x26
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d00a      	beq.n	8004cfe <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	3326      	adds	r3, #38	@ 0x26
 8004cf8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d127      	bne.n	8004d4e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	78fa      	ldrb	r2, [r7, #3]
 8004d0e:	0151      	lsls	r1, r2, #5
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	440a      	add	r2, r1
 8004d14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004d1c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	334c      	adds	r3, #76	@ 0x4c
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	334c      	adds	r3, #76	@ 0x4c
 8004d42:	781a      	ldrb	r2, [r3, #0]
 8004d44:	78fb      	ldrb	r3, [r7, #3]
 8004d46:	4619      	mov	r1, r3
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f00a fe5b 	bl	800fa04 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	799b      	ldrb	r3, [r3, #6]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d13b      	bne.n	8004dce <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004d56:	78fa      	ldrb	r2, [r7, #3]
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	3338      	adds	r3, #56	@ 0x38
 8004d66:	6819      	ldr	r1, [r3, #0]
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	1a9b      	subs	r3, r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4403      	add	r3, r0
 8004d76:	3328      	adds	r3, #40	@ 0x28
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	440b      	add	r3, r1
 8004d7c:	1e59      	subs	r1, r3, #1
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4403      	add	r3, r0
 8004d8c:	3328      	adds	r3, #40	@ 0x28
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8470 	beq.w	800567e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004d9e:	78fa      	ldrb	r2, [r7, #3]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	333c      	adds	r3, #60	@ 0x3c
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	f083 0301 	eor.w	r3, r3, #1
 8004db6:	b2d8      	uxtb	r0, r3
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	333c      	adds	r3, #60	@ 0x3c
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	701a      	strb	r2, [r3, #0]
 8004dca:	f000 bc58 	b.w	800567e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	333c      	adds	r3, #60	@ 0x3c
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	f083 0301 	eor.w	r3, r3, #1
 8004de6:	b2d8      	uxtb	r0, r3
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	333c      	adds	r3, #60	@ 0x3c
 8004df6:	4602      	mov	r2, r0
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	f000 bc40 	b.w	800567e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f007 fb11 	bl	800c42e <USB_ReadChInterrupts>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b20      	cmp	r3, #32
 8004e14:	d131      	bne.n	8004e7a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e22:	461a      	mov	r2, r3
 8004e24:	2320      	movs	r3, #32
 8004e26:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	331a      	adds	r3, #26
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	f040 841f 	bne.w	800567e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	1a9b      	subs	r3, r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	331b      	adds	r3, #27
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	334d      	adds	r3, #77	@ 0x4d
 8004e64:	2203      	movs	r2, #3
 8004e66:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	78fa      	ldrb	r2, [r7, #3]
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f008 f874 	bl	800cf5e <USB_HC_Halt>
 8004e76:	f000 bc02 	b.w	800567e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	4611      	mov	r1, r2
 8004e82:	4618      	mov	r0, r3
 8004e84:	f007 fad3 	bl	800c42e <USB_ReadChInterrupts>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	f040 8305 	bne.w	800549e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	334d      	adds	r3, #77	@ 0x4d
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d114      	bne.n	8004ee6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	334d      	adds	r3, #77	@ 0x4d
 8004ecc:	2202      	movs	r2, #2
 8004ece:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	334c      	adds	r3, #76	@ 0x4c
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	e2cc      	b.n	8005480 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ee6:	78fa      	ldrb	r2, [r7, #3]
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	4613      	mov	r3, r2
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	1a9b      	subs	r3, r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	334d      	adds	r3, #77	@ 0x4d
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b06      	cmp	r3, #6
 8004efa:	d114      	bne.n	8004f26 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004efc:	78fa      	ldrb	r2, [r7, #3]
 8004efe:	6879      	ldr	r1, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	334d      	adds	r3, #77	@ 0x4d
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	1a9b      	subs	r3, r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	334c      	adds	r3, #76	@ 0x4c
 8004f20:	2205      	movs	r2, #5
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e2ac      	b.n	8005480 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	334d      	adds	r3, #77	@ 0x4d
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b07      	cmp	r3, #7
 8004f3a:	d00b      	beq.n	8004f54 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	334d      	adds	r3, #77	@ 0x4d
 8004f4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004f4e:	2b09      	cmp	r3, #9
 8004f50:	f040 80a6 	bne.w	80050a0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	1a9b      	subs	r3, r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	334d      	adds	r3, #77	@ 0x4d
 8004f64:	2202      	movs	r2, #2
 8004f66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3344      	adds	r3, #68	@ 0x44
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	1c59      	adds	r1, r3, #1
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4403      	add	r3, r0
 8004f88:	3344      	adds	r3, #68	@ 0x44
 8004f8a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f8c:	78fa      	ldrb	r2, [r7, #3]
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	3344      	adds	r3, #68	@ 0x44
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d943      	bls.n	800502a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004fa2:	78fa      	ldrb	r2, [r7, #3]
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	1a9b      	subs	r3, r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	440b      	add	r3, r1
 8004fb0:	3344      	adds	r3, #68	@ 0x44
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	331a      	adds	r3, #26
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d123      	bne.n	8005014 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	331b      	adds	r3, #27
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	331c      	adds	r3, #28
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	78fa      	ldrb	r2, [r7, #3]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	440a      	add	r2, r1
 800500a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800500e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005012:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005014:	78fa      	ldrb	r2, [r7, #3]
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	4613      	mov	r3, r2
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	1a9b      	subs	r3, r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	334c      	adds	r3, #76	@ 0x4c
 8005024:	2204      	movs	r2, #4
 8005026:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005028:	e229      	b.n	800547e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	1a9b      	subs	r3, r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	334c      	adds	r3, #76	@ 0x4c
 800503a:	2202      	movs	r2, #2
 800503c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800503e:	78fa      	ldrb	r2, [r7, #3]
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	4613      	mov	r3, r2
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	1a9b      	subs	r3, r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	440b      	add	r3, r1
 800504c:	3326      	adds	r3, #38	@ 0x26
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00b      	beq.n	800506c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005054:	78fa      	ldrb	r2, [r7, #3]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	3326      	adds	r3, #38	@ 0x26
 8005064:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005066:	2b02      	cmp	r3, #2
 8005068:	f040 8209 	bne.w	800547e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4413      	add	r3, r2
 8005074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005082:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800508a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	4413      	add	r3, r2
 8005094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005098:	461a      	mov	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800509e:	e1ee      	b.n	800547e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80050a0:	78fa      	ldrb	r2, [r7, #3]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	334d      	adds	r3, #77	@ 0x4d
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b05      	cmp	r3, #5
 80050b4:	f040 80c8 	bne.w	8005248 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	334d      	adds	r3, #77	@ 0x4d
 80050c8:	2202      	movs	r2, #2
 80050ca:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80050cc:	78fa      	ldrb	r2, [r7, #3]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	1a9b      	subs	r3, r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	331b      	adds	r3, #27
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	f040 81ce 	bne.w	8005480 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80050e4:	78fa      	ldrb	r2, [r7, #3]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	3326      	adds	r3, #38	@ 0x26
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d16b      	bne.n	80051d2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	3348      	adds	r3, #72	@ 0x48
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	1c59      	adds	r1, r3, #1
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4403      	add	r3, r0
 800511a:	3348      	adds	r3, #72	@ 0x48
 800511c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800511e:	78fa      	ldrb	r2, [r7, #3]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	3348      	adds	r3, #72	@ 0x48
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b02      	cmp	r3, #2
 8005132:	d943      	bls.n	80051bc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8005134:	78fa      	ldrb	r2, [r7, #3]
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4613      	mov	r3, r2
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	3348      	adds	r3, #72	@ 0x48
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	331b      	adds	r3, #27
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	3344      	adds	r3, #68	@ 0x44
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d809      	bhi.n	8005186 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005172:	78fa      	ldrb	r2, [r7, #3]
 8005174:	6879      	ldr	r1, [r7, #4]
 8005176:	4613      	mov	r3, r2
 8005178:	011b      	lsls	r3, r3, #4
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	440b      	add	r3, r1
 8005180:	331c      	adds	r3, #28
 8005182:	2201      	movs	r2, #1
 8005184:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	4413      	add	r3, r2
 800518e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	78fa      	ldrb	r2, [r7, #3]
 8005196:	0151      	lsls	r1, r2, #5
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	440a      	add	r2, r1
 800519c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051a4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	334c      	adds	r3, #76	@ 0x4c
 80051b6:	2204      	movs	r2, #4
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	e014      	b.n	80051e6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	334c      	adds	r3, #76	@ 0x4c
 80051cc:	2202      	movs	r2, #2
 80051ce:	701a      	strb	r2, [r3, #0]
 80051d0:	e009      	b.n	80051e6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	334c      	adds	r3, #76	@ 0x4c
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80051e6:	78fa      	ldrb	r2, [r7, #3]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	1a9b      	subs	r3, r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	3326      	adds	r3, #38	@ 0x26
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00b      	beq.n	8005214 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	3326      	adds	r3, #38	@ 0x26
 800520c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800520e:	2b02      	cmp	r3, #2
 8005210:	f040 8136 	bne.w	8005480 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	4413      	add	r3, r2
 800521c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800522a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005232:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4413      	add	r3, r2
 800523c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005240:	461a      	mov	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e11b      	b.n	8005480 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	334d      	adds	r3, #77	@ 0x4d
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b03      	cmp	r3, #3
 800525c:	f040 8081 	bne.w	8005362 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	334d      	adds	r3, #77	@ 0x4d
 8005270:	2202      	movs	r2, #2
 8005272:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	331b      	adds	r3, #27
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b01      	cmp	r3, #1
 8005288:	f040 80fa 	bne.w	8005480 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800528c:	78fa      	ldrb	r2, [r7, #3]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	334c      	adds	r3, #76	@ 0x4c
 800529c:	2202      	movs	r2, #2
 800529e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052be:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052de:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	78fa      	ldrb	r2, [r7, #3]
 80052f0:	0151      	lsls	r1, r2, #5
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	440a      	add	r2, r1
 80052f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052fa:	f023 0320 	bic.w	r3, r3, #32
 80052fe:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	3326      	adds	r3, #38	@ 0x26
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	3326      	adds	r3, #38	@ 0x26
 8005326:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005328:	2b02      	cmp	r3, #2
 800532a:	f040 80a9 	bne.w	8005480 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4413      	add	r3, r2
 8005336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005344:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800534c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800534e:	78fb      	ldrb	r3, [r7, #3]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800535a:	461a      	mov	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6013      	str	r3, [r2, #0]
 8005360:	e08e      	b.n	8005480 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	334d      	adds	r3, #77	@ 0x4d
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d143      	bne.n	8005400 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005378:	78fa      	ldrb	r2, [r7, #3]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	1a9b      	subs	r3, r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	334d      	adds	r3, #77	@ 0x4d
 8005388:	2202      	movs	r2, #2
 800538a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	334c      	adds	r3, #76	@ 0x4c
 800539c:	2202      	movs	r2, #2
 800539e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3326      	adds	r3, #38	@ 0x26
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	3326      	adds	r3, #38	@ 0x26
 80053c6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d159      	bne.n	8005480 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053e2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053ea:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80053ec:	78fb      	ldrb	r3, [r7, #3]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f8:	461a      	mov	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e03f      	b.n	8005480 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	334d      	adds	r3, #77	@ 0x4d
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b08      	cmp	r3, #8
 8005414:	d126      	bne.n	8005464 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	334d      	adds	r3, #77	@ 0x4d
 8005426:	2202      	movs	r2, #2
 8005428:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	3344      	adds	r3, #68	@ 0x44
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	1c59      	adds	r1, r3, #1
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4403      	add	r3, r0
 800544a:	3344      	adds	r3, #68	@ 0x44
 800544c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800544e:	78fa      	ldrb	r2, [r7, #3]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	1a9b      	subs	r3, r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	334c      	adds	r3, #76	@ 0x4c
 800545e:	2204      	movs	r2, #4
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e00d      	b.n	8005480 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005464:	78fa      	ldrb	r2, [r7, #3]
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	4613      	mov	r3, r2
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	1a9b      	subs	r3, r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	334d      	adds	r3, #77	@ 0x4d
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b02      	cmp	r3, #2
 8005478:	f000 8100 	beq.w	800567c <HCD_HC_IN_IRQHandler+0xcca>
 800547c:	e000      	b.n	8005480 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800547e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	334c      	adds	r3, #76	@ 0x4c
 8005490:	781a      	ldrb	r2, [r3, #0]
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f00a fab4 	bl	800fa04 <HAL_HCD_HC_NotifyURBChange_Callback>
 800549c:	e0ef      	b.n	800567e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	4611      	mov	r1, r2
 80054a6:	4618      	mov	r0, r3
 80054a8:	f006 ffc1 	bl	800c42e <USB_ReadChInterrupts>
 80054ac:	4603      	mov	r3, r0
 80054ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	d12f      	bne.n	8005516 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054c2:	461a      	mov	r2, r3
 80054c4:	2340      	movs	r3, #64	@ 0x40
 80054c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	334d      	adds	r3, #77	@ 0x4d
 80054d8:	2205      	movs	r2, #5
 80054da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	331a      	adds	r3, #26
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	3344      	adds	r3, #68	@ 0x44
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f007 fd25 	bl	800cf5e <USB_HC_Halt>
 8005514:	e0b3      	b.n	800567e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	78fa      	ldrb	r2, [r7, #3]
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f006 ff85 	bl	800c42e <USB_ReadChInterrupts>
 8005524:	4603      	mov	r3, r0
 8005526:	f003 0310 	and.w	r3, r3, #16
 800552a:	2b10      	cmp	r3, #16
 800552c:	f040 80a7 	bne.w	800567e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	3326      	adds	r3, #38	@ 0x26
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b03      	cmp	r3, #3
 8005544:	d11b      	bne.n	800557e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005546:	78fa      	ldrb	r2, [r7, #3]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	3344      	adds	r3, #68	@ 0x44
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	334d      	adds	r3, #77	@ 0x4d
 800556a:	2204      	movs	r2, #4
 800556c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f007 fcf1 	bl	800cf5e <USB_HC_Halt>
 800557c:	e03f      	b.n	80055fe <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	3326      	adds	r3, #38	@ 0x26
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	3326      	adds	r3, #38	@ 0x26
 80055a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d129      	bne.n	80055fe <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	3344      	adds	r3, #68	@ 0x44
 80055ba:	2200      	movs	r2, #0
 80055bc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	799b      	ldrb	r3, [r3, #6]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HCD_HC_IN_IRQHandler+0xc2a>
 80055c6:	78fa      	ldrb	r2, [r7, #3]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	440b      	add	r3, r1
 80055d4:	331b      	adds	r3, #27
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d110      	bne.n	80055fe <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80055dc:	78fa      	ldrb	r2, [r7, #3]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	334d      	adds	r3, #77	@ 0x4d
 80055ec:	2204      	movs	r2, #4
 80055ee:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	4611      	mov	r1, r2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f007 fcb0 	bl	800cf5e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	331b      	adds	r3, #27
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d129      	bne.n	8005668 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	331b      	adds	r3, #27
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	440a      	add	r2, r1
 800563e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005646:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	4413      	add	r3, r2
 8005650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	78fa      	ldrb	r2, [r7, #3]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	440a      	add	r2, r1
 800565e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005662:	f043 0320 	orr.w	r3, r3, #32
 8005666:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005674:	461a      	mov	r2, r3
 8005676:	2310      	movs	r3, #16
 8005678:	6093      	str	r3, [r2, #8]
 800567a:	e000      	b.n	800567e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800567c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	78fa      	ldrb	r2, [r7, #3]
 80056a0:	4611      	mov	r1, r2
 80056a2:	4618      	mov	r0, r3
 80056a4:	f006 fec3 	bl	800c42e <USB_ReadChInterrupts>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d11b      	bne.n	80056ea <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056be:	461a      	mov	r2, r3
 80056c0:	2304      	movs	r3, #4
 80056c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	011b      	lsls	r3, r3, #4
 80056cc:	1a9b      	subs	r3, r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	334d      	adds	r3, #77	@ 0x4d
 80056d4:	2207      	movs	r2, #7
 80056d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	78fa      	ldrb	r2, [r7, #3]
 80056de:	4611      	mov	r1, r2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f007 fc3c 	bl	800cf5e <USB_HC_Halt>
 80056e6:	f000 bc89 	b.w	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	4611      	mov	r1, r2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f006 fe9b 	bl	800c42e <USB_ReadChInterrupts>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b20      	cmp	r3, #32
 8005700:	f040 8082 	bne.w	8005808 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005704:	78fb      	ldrb	r3, [r7, #3]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005710:	461a      	mov	r2, r3
 8005712:	2320      	movs	r3, #32
 8005714:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	1a9b      	subs	r3, r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	440b      	add	r3, r1
 8005724:	3319      	adds	r3, #25
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d124      	bne.n	8005776 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	3319      	adds	r3, #25
 800573c:	2200      	movs	r2, #0
 800573e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005740:	78fa      	ldrb	r2, [r7, #3]
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	1a9b      	subs	r3, r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	334c      	adds	r3, #76	@ 0x4c
 8005750:	2202      	movs	r2, #2
 8005752:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	334d      	adds	r3, #77	@ 0x4d
 8005764:	2203      	movs	r2, #3
 8005766:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	78fa      	ldrb	r2, [r7, #3]
 800576e:	4611      	mov	r1, r2
 8005770:	4618      	mov	r0, r3
 8005772:	f007 fbf4 	bl	800cf5e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	331a      	adds	r3, #26
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b01      	cmp	r3, #1
 800578a:	f040 8437 	bne.w	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	4613      	mov	r3, r2
 8005794:	011b      	lsls	r3, r3, #4
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	331b      	adds	r3, #27
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f040 842b 	bne.w	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	3326      	adds	r3, #38	@ 0x26
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d009      	beq.n	80057d0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	331b      	adds	r3, #27
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	334d      	adds	r3, #77	@ 0x4d
 80057e0:	2203      	movs	r2, #3
 80057e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	4611      	mov	r1, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f007 fbb6 	bl	800cf5e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80057f2:	78fa      	ldrb	r2, [r7, #3]
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	3344      	adds	r3, #68	@ 0x44
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e3f9      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	4611      	mov	r1, r2
 8005810:	4618      	mov	r0, r3
 8005812:	f006 fe0c 	bl	800c42e <USB_ReadChInterrupts>
 8005816:	4603      	mov	r3, r0
 8005818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800581c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005820:	d111      	bne.n	8005846 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800582e:	461a      	mov	r2, r3
 8005830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005834:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	4611      	mov	r1, r2
 800583e:	4618      	mov	r0, r3
 8005840:	f007 fb8d 	bl	800cf5e <USB_HC_Halt>
 8005844:	e3da      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	4611      	mov	r1, r2
 800584e:	4618      	mov	r0, r3
 8005850:	f006 fded 	bl	800c42e <USB_ReadChInterrupts>
 8005854:	4603      	mov	r3, r0
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	2b01      	cmp	r3, #1
 800585c:	d168      	bne.n	8005930 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	3344      	adds	r3, #68	@ 0x44
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f006 fdd7 	bl	800c42e <USB_ReadChInterrupts>
 8005880:	4603      	mov	r3, r0
 8005882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005886:	2b40      	cmp	r3, #64	@ 0x40
 8005888:	d112      	bne.n	80058b0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800588a:	78fa      	ldrb	r2, [r7, #3]
 800588c:	6879      	ldr	r1, [r7, #4]
 800588e:	4613      	mov	r3, r2
 8005890:	011b      	lsls	r3, r3, #4
 8005892:	1a9b      	subs	r3, r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	3319      	adds	r3, #25
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058aa:	461a      	mov	r2, r3
 80058ac:	2340      	movs	r3, #64	@ 0x40
 80058ae:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	331b      	adds	r3, #27
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d019      	beq.n	80058fa <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80058c6:	78fa      	ldrb	r2, [r7, #3]
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	440b      	add	r3, r1
 80058d4:	331b      	adds	r3, #27
 80058d6:	2200      	movs	r2, #0
 80058d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	78fa      	ldrb	r2, [r7, #3]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	4413      	add	r3, r2
 8005902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005906:	461a      	mov	r2, r3
 8005908:	2301      	movs	r3, #1
 800590a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	4613      	mov	r3, r2
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	334d      	adds	r3, #77	@ 0x4d
 800591c:	2201      	movs	r2, #1
 800591e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f007 fb18 	bl	800cf5e <USB_HC_Halt>
 800592e:	e365      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	78fa      	ldrb	r2, [r7, #3]
 8005936:	4611      	mov	r1, r2
 8005938:	4618      	mov	r0, r3
 800593a:	f006 fd78 	bl	800c42e <USB_ReadChInterrupts>
 800593e:	4603      	mov	r3, r0
 8005940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d139      	bne.n	80059bc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005948:	78fa      	ldrb	r2, [r7, #3]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	334d      	adds	r3, #77	@ 0x4d
 8005958:	2205      	movs	r2, #5
 800595a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800595c:	78fa      	ldrb	r2, [r7, #3]
 800595e:	6879      	ldr	r1, [r7, #4]
 8005960:	4613      	mov	r3, r2
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	331a      	adds	r3, #26
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d109      	bne.n	8005986 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	3319      	adds	r3, #25
 8005982:	2201      	movs	r2, #1
 8005984:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	1a9b      	subs	r3, r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	3344      	adds	r3, #68	@ 0x44
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	4611      	mov	r1, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f007 fadb 	bl	800cf5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059b4:	461a      	mov	r2, r3
 80059b6:	2340      	movs	r3, #64	@ 0x40
 80059b8:	6093      	str	r3, [r2, #8]
 80059ba:	e31f      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	78fa      	ldrb	r2, [r7, #3]
 80059c2:	4611      	mov	r1, r2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f006 fd32 	bl	800c42e <USB_ReadChInterrupts>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d11a      	bne.n	8005a0a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e0:	461a      	mov	r2, r3
 80059e2:	2308      	movs	r3, #8
 80059e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80059e6:	78fa      	ldrb	r2, [r7, #3]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	1a9b      	subs	r3, r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	440b      	add	r3, r1
 80059f4:	334d      	adds	r3, #77	@ 0x4d
 80059f6:	2206      	movs	r2, #6
 80059f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	78fa      	ldrb	r2, [r7, #3]
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f007 faab 	bl	800cf5e <USB_HC_Halt>
 8005a08:	e2f8      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	78fa      	ldrb	r2, [r7, #3]
 8005a10:	4611      	mov	r1, r2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f006 fd0b 	bl	800c42e <USB_ReadChInterrupts>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b10      	cmp	r3, #16
 8005a20:	d144      	bne.n	8005aac <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	1a9b      	subs	r3, r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	3344      	adds	r3, #68	@ 0x44
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	334d      	adds	r3, #77	@ 0x4d
 8005a46:	2204      	movs	r2, #4
 8005a48:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	3319      	adds	r3, #25
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d114      	bne.n	8005a8a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	3318      	adds	r3, #24
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d109      	bne.n	8005a8a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	3319      	adds	r3, #25
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	78fa      	ldrb	r2, [r7, #3]
 8005a90:	4611      	mov	r1, r2
 8005a92:	4618      	mov	r0, r3
 8005a94:	f007 fa63 	bl	800cf5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2310      	movs	r3, #16
 8005aa8:	6093      	str	r3, [r2, #8]
 8005aaa:	e2a7      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	78fa      	ldrb	r2, [r7, #3]
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f006 fcba 	bl	800c42e <USB_ReadChInterrupts>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac0:	2b80      	cmp	r3, #128	@ 0x80
 8005ac2:	f040 8083 	bne.w	8005bcc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	799b      	ldrb	r3, [r3, #6]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d111      	bne.n	8005af2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005ace:	78fa      	ldrb	r2, [r7, #3]
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	334d      	adds	r3, #77	@ 0x4d
 8005ade:	2207      	movs	r2, #7
 8005ae0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f007 fa37 	bl	800cf5e <USB_HC_Halt>
 8005af0:	e062      	b.n	8005bb8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005af2:	78fa      	ldrb	r2, [r7, #3]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	011b      	lsls	r3, r3, #4
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	3344      	adds	r3, #68	@ 0x44
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	1c59      	adds	r1, r3, #1
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	1a9b      	subs	r3, r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4403      	add	r3, r0
 8005b12:	3344      	adds	r3, #68	@ 0x44
 8005b14:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005b16:	78fa      	ldrb	r2, [r7, #3]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	3344      	adds	r3, #68	@ 0x44
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d922      	bls.n	8005b72 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005b2c:	78fa      	ldrb	r2, [r7, #3]
 8005b2e:	6879      	ldr	r1, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	440b      	add	r3, r1
 8005b3a:	3344      	adds	r3, #68	@ 0x44
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	6879      	ldr	r1, [r7, #4]
 8005b44:	4613      	mov	r3, r2
 8005b46:	011b      	lsls	r3, r3, #4
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	334c      	adds	r3, #76	@ 0x4c
 8005b50:	2204      	movs	r2, #4
 8005b52:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005b54:	78fa      	ldrb	r2, [r7, #3]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	1a9b      	subs	r3, r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	334c      	adds	r3, #76	@ 0x4c
 8005b64:	781a      	ldrb	r2, [r3, #0]
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f009 ff4a 	bl	800fa04 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b70:	e022      	b.n	8005bb8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005b72:	78fa      	ldrb	r2, [r7, #3]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	011b      	lsls	r3, r3, #4
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	334c      	adds	r3, #76	@ 0x4c
 8005b82:	2202      	movs	r2, #2
 8005b84:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b9c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ba4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ba6:	78fb      	ldrb	r3, [r7, #3]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2380      	movs	r3, #128	@ 0x80
 8005bc8:	6093      	str	r3, [r2, #8]
 8005bca:	e217      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	78fa      	ldrb	r2, [r7, #3]
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f006 fc2a 	bl	800c42e <USB_ReadChInterrupts>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be4:	d11b      	bne.n	8005c1e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005be6:	78fa      	ldrb	r2, [r7, #3]
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	1a9b      	subs	r3, r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	334d      	adds	r3, #77	@ 0x4d
 8005bf6:	2209      	movs	r2, #9
 8005bf8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f007 f9ab 	bl	800cf5e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c14:	461a      	mov	r2, r3
 8005c16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c1a:	6093      	str	r3, [r2, #8]
 8005c1c:	e1ee      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f006 fc01 	bl	800c42e <USB_ReadChInterrupts>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	f040 81df 	bne.w	8005ff6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c44:	461a      	mov	r2, r3
 8005c46:	2302      	movs	r3, #2
 8005c48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	6879      	ldr	r1, [r7, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	334d      	adds	r3, #77	@ 0x4d
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	f040 8093 	bne.w	8005d88 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005c62:	78fa      	ldrb	r2, [r7, #3]
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	1a9b      	subs	r3, r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	334d      	adds	r3, #77	@ 0x4d
 8005c72:	2202      	movs	r2, #2
 8005c74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005c76:	78fa      	ldrb	r2, [r7, #3]
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	334c      	adds	r3, #76	@ 0x4c
 8005c86:	2201      	movs	r2, #1
 8005c88:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	3326      	adds	r3, #38	@ 0x26
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d00b      	beq.n	8005cb8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005ca0:	78fa      	ldrb	r2, [r7, #3]
 8005ca2:	6879      	ldr	r1, [r7, #4]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	1a9b      	subs	r3, r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	3326      	adds	r3, #38	@ 0x26
 8005cb0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	f040 8190 	bne.w	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	799b      	ldrb	r3, [r3, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d115      	bne.n	8005cec <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005cc0:	78fa      	ldrb	r2, [r7, #3]
 8005cc2:	6879      	ldr	r1, [r7, #4]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	333d      	adds	r3, #61	@ 0x3d
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	78fa      	ldrb	r2, [r7, #3]
 8005cd4:	f083 0301 	eor.w	r3, r3, #1
 8005cd8:	b2d8      	uxtb	r0, r3
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	440b      	add	r3, r1
 8005ce6:	333d      	adds	r3, #61	@ 0x3d
 8005ce8:	4602      	mov	r2, r0
 8005cea:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	799b      	ldrb	r3, [r3, #6]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	f040 8171 	bne.w	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	011b      	lsls	r3, r3, #4
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	3334      	adds	r3, #52	@ 0x34
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8165 	beq.w	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005d0e:	78fa      	ldrb	r2, [r7, #3]
 8005d10:	6879      	ldr	r1, [r7, #4]
 8005d12:	4613      	mov	r3, r2
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	440b      	add	r3, r1
 8005d1c:	3334      	adds	r3, #52	@ 0x34
 8005d1e:	6819      	ldr	r1, [r3, #0]
 8005d20:	78fa      	ldrb	r2, [r7, #3]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	4613      	mov	r3, r2
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4403      	add	r3, r0
 8005d2e:	3328      	adds	r3, #40	@ 0x28
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	440b      	add	r3, r1
 8005d34:	1e59      	subs	r1, r3, #1
 8005d36:	78fa      	ldrb	r2, [r7, #3]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4403      	add	r3, r0
 8005d44:	3328      	adds	r3, #40	@ 0x28
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d4c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f000 813f 	beq.w	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	333d      	adds	r3, #61	@ 0x3d
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	78fa      	ldrb	r2, [r7, #3]
 8005d6e:	f083 0301 	eor.w	r3, r3, #1
 8005d72:	b2d8      	uxtb	r0, r3
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	333d      	adds	r3, #61	@ 0x3d
 8005d82:	4602      	mov	r2, r0
 8005d84:	701a      	strb	r2, [r3, #0]
 8005d86:	e127      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005d88:	78fa      	ldrb	r2, [r7, #3]
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	1a9b      	subs	r3, r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	440b      	add	r3, r1
 8005d96:	334d      	adds	r3, #77	@ 0x4d
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d120      	bne.n	8005de0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	334d      	adds	r3, #77	@ 0x4d
 8005dae:	2202      	movs	r2, #2
 8005db0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	331b      	adds	r3, #27
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	f040 8107 	bne.w	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005dca:	78fa      	ldrb	r2, [r7, #3]
 8005dcc:	6879      	ldr	r1, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	334c      	adds	r3, #76	@ 0x4c
 8005dda:	2202      	movs	r2, #2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e0fb      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005de0:	78fa      	ldrb	r2, [r7, #3]
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	011b      	lsls	r3, r3, #4
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	440b      	add	r3, r1
 8005dee:	334d      	adds	r3, #77	@ 0x4d
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d13a      	bne.n	8005e6c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	6879      	ldr	r1, [r7, #4]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	440b      	add	r3, r1
 8005e04:	334d      	adds	r3, #77	@ 0x4d
 8005e06:	2202      	movs	r2, #2
 8005e08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e0a:	78fa      	ldrb	r2, [r7, #3]
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	334c      	adds	r3, #76	@ 0x4c
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	331b      	adds	r3, #27
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f040 80d1 	bne.w	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	331b      	adds	r3, #27
 8005e46:	2200      	movs	r2, #0
 8005e48:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	78fa      	ldrb	r2, [r7, #3]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e68:	6053      	str	r3, [r2, #4]
 8005e6a:	e0b5      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	334d      	adds	r3, #77	@ 0x4d
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d114      	bne.n	8005eac <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	1a9b      	subs	r3, r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	334d      	adds	r3, #77	@ 0x4d
 8005e92:	2202      	movs	r2, #2
 8005e94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	6879      	ldr	r1, [r7, #4]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	1a9b      	subs	r3, r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	440b      	add	r3, r1
 8005ea4:	334c      	adds	r3, #76	@ 0x4c
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	701a      	strb	r2, [r3, #0]
 8005eaa:	e095      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005eac:	78fa      	ldrb	r2, [r7, #3]
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	334d      	adds	r3, #77	@ 0x4d
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b06      	cmp	r3, #6
 8005ec0:	d114      	bne.n	8005eec <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005ec2:	78fa      	ldrb	r2, [r7, #3]
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	334d      	adds	r3, #77	@ 0x4d
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	334c      	adds	r3, #76	@ 0x4c
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e075      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	334d      	adds	r3, #77	@ 0x4d
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b07      	cmp	r3, #7
 8005f00:	d00a      	beq.n	8005f18 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	334d      	adds	r3, #77	@ 0x4d
 8005f12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005f14:	2b09      	cmp	r3, #9
 8005f16:	d170      	bne.n	8005ffa <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	6879      	ldr	r1, [r7, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	334d      	adds	r3, #77	@ 0x4d
 8005f28:	2202      	movs	r2, #2
 8005f2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	3344      	adds	r3, #68	@ 0x44
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	1c59      	adds	r1, r3, #1
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4613      	mov	r3, r2
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4403      	add	r3, r0
 8005f4c:	3344      	adds	r3, #68	@ 0x44
 8005f4e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	3344      	adds	r3, #68	@ 0x44
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d914      	bls.n	8005f90 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	3344      	adds	r3, #68	@ 0x44
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005f7a:	78fa      	ldrb	r2, [r7, #3]
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	334c      	adds	r3, #76	@ 0x4c
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005f8e:	e022      	b.n	8005fd6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005f90:	78fa      	ldrb	r2, [r7, #3]
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	334c      	adds	r3, #76	@ 0x4c
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005fba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fc2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005fd6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005fd8:	78fa      	ldrb	r2, [r7, #3]
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	334c      	adds	r3, #76	@ 0x4c
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	78fb      	ldrb	r3, [r7, #3]
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f009 fd08 	bl	800fa04 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ff4:	e002      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005ffa:	bf00      	nop
  }
}
 8005ffc:	3718      	adds	r7, #24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b08a      	sub	sp, #40	@ 0x28
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	0c5b      	lsrs	r3, r3, #17
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006036:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d004      	beq.n	8006048 <HCD_RXQLVL_IRQHandler+0x46>
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b05      	cmp	r3, #5
 8006042:	f000 80b6 	beq.w	80061b2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006046:	e0b7      	b.n	80061b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80b3 	beq.w	80061b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	4613      	mov	r3, r2
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	332c      	adds	r3, #44	@ 0x2c
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 80a7 	beq.w	80061b6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4613      	mov	r3, r2
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	440b      	add	r3, r1
 8006076:	3338      	adds	r3, #56	@ 0x38
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	18d1      	adds	r1, r2, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4613      	mov	r3, r2
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	1a9b      	subs	r3, r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4403      	add	r3, r0
 800608c:	3334      	adds	r3, #52	@ 0x34
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4299      	cmp	r1, r3
 8006092:	f200 8083 	bhi.w	800619c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	4613      	mov	r3, r2
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	440b      	add	r3, r1
 80060a8:	332c      	adds	r3, #44	@ 0x2c
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	b292      	uxth	r2, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	f006 f951 	bl	800c358 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80060b6:	6879      	ldr	r1, [r7, #4]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4613      	mov	r3, r2
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	332c      	adds	r3, #44	@ 0x2c
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	18d1      	adds	r1, r2, r3
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4613      	mov	r3, r2
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4403      	add	r3, r0
 80060da:	332c      	adds	r3, #44	@ 0x2c
 80060dc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	4613      	mov	r3, r2
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	440b      	add	r3, r1
 80060ec:	3338      	adds	r3, #56	@ 0x38
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	18d1      	adds	r1, r2, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4613      	mov	r3, r2
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4403      	add	r3, r0
 8006102:	3338      	adds	r3, #56	@ 0x38
 8006104:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	0cdb      	lsrs	r3, r3, #19
 8006116:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800611a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	4613      	mov	r3, r2
 8006122:	011b      	lsls	r3, r3, #4
 8006124:	1a9b      	subs	r3, r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	440b      	add	r3, r1
 800612a:	3328      	adds	r3, #40	@ 0x28
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	4293      	cmp	r3, r2
 8006134:	d13f      	bne.n	80061b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d03c      	beq.n	80061b6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	4413      	add	r3, r2
 8006144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006152:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800615a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	4413      	add	r3, r2
 8006164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006168:	461a      	mov	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4613      	mov	r3, r2
 8006174:	011b      	lsls	r3, r3, #4
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	333c      	adds	r3, #60	@ 0x3c
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f083 0301 	eor.w	r3, r3, #1
 8006184:	b2d8      	uxtb	r0, r3
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	4613      	mov	r3, r2
 800618c:	011b      	lsls	r3, r3, #4
 800618e:	1a9b      	subs	r3, r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	440b      	add	r3, r1
 8006194:	333c      	adds	r3, #60	@ 0x3c
 8006196:	4602      	mov	r2, r0
 8006198:	701a      	strb	r2, [r3, #0]
      break;
 800619a:	e00c      	b.n	80061b6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	4613      	mov	r3, r2
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	1a9b      	subs	r3, r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	440b      	add	r3, r1
 80061aa:	334c      	adds	r3, #76	@ 0x4c
 80061ac:	2204      	movs	r2, #4
 80061ae:	701a      	strb	r2, [r3, #0]
      break;
 80061b0:	e001      	b.n	80061b6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80061b6:	bf00      	nop
  }
}
 80061b8:	bf00      	nop
 80061ba:	3728      	adds	r7, #40	@ 0x28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80061ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d10b      	bne.n	8006210 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d102      	bne.n	8006208 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f009 fbe2 	bl	800f9cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f043 0302 	orr.w	r3, r3, #2
 800620e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b08      	cmp	r3, #8
 8006218:	d132      	bne.n	8006280 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f043 0308 	orr.w	r3, r3, #8
 8006220:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b04      	cmp	r3, #4
 800622a:	d126      	bne.n	800627a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	7a5b      	ldrb	r3, [r3, #9]
 8006230:	2b02      	cmp	r3, #2
 8006232:	d113      	bne.n	800625c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800623a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800623e:	d106      	bne.n	800624e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2102      	movs	r1, #2
 8006246:	4618      	mov	r0, r3
 8006248:	f006 fa0a 	bl	800c660 <USB_InitFSLSPClkSel>
 800624c:	e011      	b.n	8006272 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2101      	movs	r1, #1
 8006254:	4618      	mov	r0, r3
 8006256:	f006 fa03 	bl	800c660 <USB_InitFSLSPClkSel>
 800625a:	e00a      	b.n	8006272 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	79db      	ldrb	r3, [r3, #7]
 8006260:	2b01      	cmp	r3, #1
 8006262:	d106      	bne.n	8006272 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800626a:	461a      	mov	r2, r3
 800626c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006270:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f009 fbd4 	bl	800fa20 <HAL_HCD_PortEnabled_Callback>
 8006278:	e002      	b.n	8006280 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f009 fbde 	bl	800fa3c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b20      	cmp	r3, #32
 8006288:	d103      	bne.n	8006292 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f043 0320 	orr.w	r3, r3, #32
 8006290:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006298:	461a      	mov	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6013      	str	r3, [r2, #0]
}
 800629e:	bf00      	nop
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e12b      	b.n	8006512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fb fa02 	bl	80016d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2224      	movs	r2, #36	@ 0x24
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800630a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800630c:	f000 ff82 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 8006310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	4a81      	ldr	r2, [pc, #516]	@ (800651c <HAL_I2C_Init+0x274>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d807      	bhi.n	800632c <HAL_I2C_Init+0x84>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a80      	ldr	r2, [pc, #512]	@ (8006520 <HAL_I2C_Init+0x278>)
 8006320:	4293      	cmp	r3, r2
 8006322:	bf94      	ite	ls
 8006324:	2301      	movls	r3, #1
 8006326:	2300      	movhi	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	e006      	b.n	800633a <HAL_I2C_Init+0x92>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4a7d      	ldr	r2, [pc, #500]	@ (8006524 <HAL_I2C_Init+0x27c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	bf94      	ite	ls
 8006334:	2301      	movls	r3, #1
 8006336:	2300      	movhi	r3, #0
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e0e7      	b.n	8006512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a78      	ldr	r2, [pc, #480]	@ (8006528 <HAL_I2C_Init+0x280>)
 8006346:	fba2 2303 	umull	r2, r3, r2, r3
 800634a:	0c9b      	lsrs	r3, r3, #18
 800634c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a6a      	ldr	r2, [pc, #424]	@ (800651c <HAL_I2C_Init+0x274>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d802      	bhi.n	800637c <HAL_I2C_Init+0xd4>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	3301      	adds	r3, #1
 800637a:	e009      	b.n	8006390 <HAL_I2C_Init+0xe8>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006382:	fb02 f303 	mul.w	r3, r2, r3
 8006386:	4a69      	ldr	r2, [pc, #420]	@ (800652c <HAL_I2C_Init+0x284>)
 8006388:	fba2 2303 	umull	r2, r3, r2, r3
 800638c:	099b      	lsrs	r3, r3, #6
 800638e:	3301      	adds	r3, #1
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	430b      	orrs	r3, r1
 8006396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80063a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	495c      	ldr	r1, [pc, #368]	@ (800651c <HAL_I2C_Init+0x274>)
 80063ac:	428b      	cmp	r3, r1
 80063ae:	d819      	bhi.n	80063e4 <HAL_I2C_Init+0x13c>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1e59      	subs	r1, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80063be:	1c59      	adds	r1, r3, #1
 80063c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80063c4:	400b      	ands	r3, r1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_I2C_Init+0x138>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	1e59      	subs	r1, r3, #1
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80063d8:	3301      	adds	r3, #1
 80063da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063de:	e051      	b.n	8006484 <HAL_I2C_Init+0x1dc>
 80063e0:	2304      	movs	r3, #4
 80063e2:	e04f      	b.n	8006484 <HAL_I2C_Init+0x1dc>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d111      	bne.n	8006410 <HAL_I2C_Init+0x168>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1e58      	subs	r0, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6859      	ldr	r1, [r3, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	440b      	add	r3, r1
 80063fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80063fe:	3301      	adds	r3, #1
 8006400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006404:	2b00      	cmp	r3, #0
 8006406:	bf0c      	ite	eq
 8006408:	2301      	moveq	r3, #1
 800640a:	2300      	movne	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	e012      	b.n	8006436 <HAL_I2C_Init+0x18e>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	1e58      	subs	r0, r3, #1
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6859      	ldr	r1, [r3, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	0099      	lsls	r1, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	fbb0 f3f3 	udiv	r3, r0, r3
 8006426:	3301      	adds	r3, #1
 8006428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800642c:	2b00      	cmp	r3, #0
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_I2C_Init+0x196>
 800643a:	2301      	movs	r3, #1
 800643c:	e022      	b.n	8006484 <HAL_I2C_Init+0x1dc>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10e      	bne.n	8006464 <HAL_I2C_Init+0x1bc>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1e58      	subs	r0, r3, #1
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6859      	ldr	r1, [r3, #4]
 800644e:	460b      	mov	r3, r1
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	440b      	add	r3, r1
 8006454:	fbb0 f3f3 	udiv	r3, r0, r3
 8006458:	3301      	adds	r3, #1
 800645a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800645e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006462:	e00f      	b.n	8006484 <HAL_I2C_Init+0x1dc>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1e58      	subs	r0, r3, #1
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6859      	ldr	r1, [r3, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	0099      	lsls	r1, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	fbb0 f3f3 	udiv	r3, r0, r3
 800647a:	3301      	adds	r3, #1
 800647c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006480:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	6809      	ldr	r1, [r1, #0]
 8006488:	4313      	orrs	r3, r2
 800648a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69da      	ldr	r2, [r3, #28]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80064b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6911      	ldr	r1, [r2, #16]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68d2      	ldr	r2, [r2, #12]
 80064be:	4311      	orrs	r1, r2
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6812      	ldr	r2, [r2, #0]
 80064c4:	430b      	orrs	r3, r1
 80064c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695a      	ldr	r2, [r3, #20]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0201 	orr.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	000186a0 	.word	0x000186a0
 8006520:	001e847f 	.word	0x001e847f
 8006524:	003d08ff 	.word	0x003d08ff
 8006528:	431bde83 	.word	0x431bde83
 800652c:	10624dd3 	.word	0x10624dd3

08006530 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e0bf      	b.n	80066c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fb f93c 	bl	80017d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006572:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6999      	ldr	r1, [r3, #24]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006588:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6899      	ldr	r1, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b4a      	ldr	r3, [pc, #296]	@ (80066cc <HAL_LTDC_Init+0x19c>)
 80065a4:	400b      	ands	r3, r1
 80065a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	041b      	lsls	r3, r3, #16
 80065ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6899      	ldr	r1, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68d9      	ldr	r1, [r3, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	4b3e      	ldr	r3, [pc, #248]	@ (80066cc <HAL_LTDC_Init+0x19c>)
 80065d2:	400b      	ands	r3, r1
 80065d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	041b      	lsls	r3, r3, #16
 80065dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68d9      	ldr	r1, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1a      	ldr	r2, [r3, #32]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6919      	ldr	r1, [r3, #16]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b33      	ldr	r3, [pc, #204]	@ (80066cc <HAL_LTDC_Init+0x19c>)
 8006600:	400b      	ands	r3, r1
 8006602:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006608:	041b      	lsls	r3, r3, #16
 800660a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6919      	ldr	r1, [r3, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6959      	ldr	r1, [r3, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	4b27      	ldr	r3, [pc, #156]	@ (80066cc <HAL_LTDC_Init+0x19c>)
 800662e:	400b      	ands	r3, r1
 8006630:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006636:	041b      	lsls	r3, r3, #16
 8006638:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6959      	ldr	r1, [r3, #20]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	431a      	orrs	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0206 	orr.w	r2, r2, #6
 800669e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	f000f800 	.word	0xf000f800

080066d0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d023      	beq.n	800673a <HAL_LTDC_IRQHandler+0x6a>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01e      	beq.n	800673a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0204 	bic.w	r2, r2, #4
 800670a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2204      	movs	r2, #4
 8006712:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800671a:	f043 0201 	orr.w	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2204      	movs	r2, #4
 8006728:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f86f 	bl	8006818 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d023      	beq.n	800678c <HAL_LTDC_IRQHandler+0xbc>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d01e      	beq.n	800678c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0202 	bic.w	r2, r2, #2
 800675c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2202      	movs	r2, #2
 8006764:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800676c:	f043 0202 	orr.w	r2, r3, #2
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2204      	movs	r2, #4
 800677a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f846 	bl	8006818 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	d01b      	beq.n	80067ce <HAL_LTDC_IRQHandler+0xfe>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d016      	beq.n	80067ce <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f022 0201 	bic.w	r2, r2, #1
 80067ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2201      	movs	r2, #1
 80067b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f82f 	bl	800682c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01b      	beq.n	8006810 <HAL_LTDC_IRQHandler+0x140>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d016      	beq.n	8006810 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0208 	bic.w	r2, r2, #8
 80067f0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2208      	movs	r2, #8
 80067f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f818 	bl	8006840 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006854:	b5b0      	push	{r4, r5, r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_LTDC_ConfigLayer+0x1a>
 800686a:	2302      	movs	r3, #2
 800686c:	e02c      	b.n	80068c8 <HAL_LTDC_ConfigLayer+0x74>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2134      	movs	r1, #52	@ 0x34
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4614      	mov	r4, r2
 8006892:	461d      	mov	r5, r3
 8006894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800689a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800689c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800689e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f811 	bl	80068d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2201      	movs	r2, #1
 80068b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bdb0      	pop	{r4, r5, r7, pc}

080068d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b089      	sub	sp, #36	@ 0x24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	0c1b      	lsrs	r3, r3, #16
 80068e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ec:	4413      	add	r3, r2
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	01db      	lsls	r3, r3, #7
 80068fc:	4413      	add	r3, r2
 80068fe:	3384      	adds	r3, #132	@ 0x84
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	4611      	mov	r1, r2
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	01d2      	lsls	r2, r2, #7
 800690c:	440a      	add	r2, r1
 800690e:	3284      	adds	r2, #132	@ 0x84
 8006910:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006914:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	0c1b      	lsrs	r3, r3, #16
 8006922:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006926:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006928:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4619      	mov	r1, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	01db      	lsls	r3, r3, #7
 8006934:	440b      	add	r3, r1
 8006936:	3384      	adds	r3, #132	@ 0x84
 8006938:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800693e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800694e:	4413      	add	r3, r2
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	461a      	mov	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	01db      	lsls	r3, r3, #7
 800695e:	4413      	add	r3, r2
 8006960:	3384      	adds	r3, #132	@ 0x84
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	4611      	mov	r1, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	01d2      	lsls	r2, r2, #7
 800696e:	440a      	add	r2, r1
 8006970:	3284      	adds	r2, #132	@ 0x84
 8006972:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006976:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006986:	4413      	add	r3, r2
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4619      	mov	r1, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	01db      	lsls	r3, r3, #7
 8006994:	440b      	add	r3, r1
 8006996:	3384      	adds	r3, #132	@ 0x84
 8006998:	4619      	mov	r1, r3
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4313      	orrs	r3, r2
 800699e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	01db      	lsls	r3, r3, #7
 80069aa:	4413      	add	r3, r2
 80069ac:	3384      	adds	r3, #132	@ 0x84
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	4611      	mov	r1, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	01d2      	lsls	r2, r2, #7
 80069ba:	440a      	add	r2, r1
 80069bc:	3284      	adds	r2, #132	@ 0x84
 80069be:	f023 0307 	bic.w	r3, r3, #7
 80069c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	01db      	lsls	r3, r3, #7
 80069ce:	4413      	add	r3, r2
 80069d0:	3384      	adds	r3, #132	@ 0x84
 80069d2:	461a      	mov	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80069ea:	041b      	lsls	r3, r3, #16
 80069ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	061b      	lsls	r3, r3, #24
 80069f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	01db      	lsls	r3, r3, #7
 8006a00:	4413      	add	r3, r2
 8006a02:	3384      	adds	r3, #132	@ 0x84
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	01db      	lsls	r3, r3, #7
 8006a10:	4413      	add	r3, r2
 8006a12:	3384      	adds	r3, #132	@ 0x84
 8006a14:	461a      	mov	r2, r3
 8006a16:	2300      	movs	r3, #0
 8006a18:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a20:	461a      	mov	r2, r3
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	431a      	orrs	r2, r3
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4619      	mov	r1, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	01db      	lsls	r3, r3, #7
 8006a34:	440b      	add	r3, r1
 8006a36:	3384      	adds	r3, #132	@ 0x84
 8006a38:	4619      	mov	r1, r3
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	01db      	lsls	r3, r3, #7
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3384      	adds	r3, #132	@ 0x84
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	4611      	mov	r1, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	01d2      	lsls	r2, r2, #7
 8006a5a:	440a      	add	r2, r1
 8006a5c:	3284      	adds	r2, #132	@ 0x84
 8006a5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006a62:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	01db      	lsls	r3, r3, #7
 8006a6e:	4413      	add	r3, r2
 8006a70:	3384      	adds	r3, #132	@ 0x84
 8006a72:	461a      	mov	r2, r3
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	01db      	lsls	r3, r3, #7
 8006a84:	4413      	add	r3, r2
 8006a86:	3384      	adds	r3, #132	@ 0x84
 8006a88:	69db      	ldr	r3, [r3, #28]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	4611      	mov	r1, r2
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	01d2      	lsls	r2, r2, #7
 8006a94:	440a      	add	r2, r1
 8006a96:	3284      	adds	r2, #132	@ 0x84
 8006a98:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006a9c:	f023 0307 	bic.w	r3, r3, #7
 8006aa0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	69da      	ldr	r2, [r3, #28]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	6809      	ldr	r1, [r1, #0]
 8006aae:	4608      	mov	r0, r1
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	01c9      	lsls	r1, r1, #7
 8006ab4:	4401      	add	r1, r0
 8006ab6:	3184      	adds	r1, #132	@ 0x84
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	01db      	lsls	r3, r3, #7
 8006ac6:	4413      	add	r3, r2
 8006ac8:	3384      	adds	r3, #132	@ 0x84
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	01db      	lsls	r3, r3, #7
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3384      	adds	r3, #132	@ 0x84
 8006ada:	461a      	mov	r2, r3
 8006adc:	2300      	movs	r3, #0
 8006ade:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	01db      	lsls	r3, r3, #7
 8006aea:	4413      	add	r3, r2
 8006aec:	3384      	adds	r3, #132	@ 0x84
 8006aee:	461a      	mov	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006afe:	2304      	movs	r3, #4
 8006b00:	61fb      	str	r3, [r7, #28]
 8006b02:	e01b      	b.n	8006b3c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d102      	bne.n	8006b12 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	e014      	b.n	8006b3c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b04      	cmp	r3, #4
 8006b18:	d00b      	beq.n	8006b32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d007      	beq.n	8006b32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d003      	beq.n	8006b32 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006b2e:	2b07      	cmp	r3, #7
 8006b30:	d102      	bne.n	8006b38 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006b32:	2302      	movs	r3, #2
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	e001      	b.n	8006b3c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	01db      	lsls	r3, r3, #7
 8006b46:	4413      	add	r3, r2
 8006b48:	3384      	adds	r3, #132	@ 0x84
 8006b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	4611      	mov	r1, r2
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	01d2      	lsls	r2, r2, #7
 8006b56:	440a      	add	r2, r1
 8006b58:	3284      	adds	r2, #132	@ 0x84
 8006b5a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006b5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b64:	69fa      	ldr	r2, [r7, #28]
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
 8006b6a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	6859      	ldr	r1, [r3, #4]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	1acb      	subs	r3, r1, r3
 8006b76:	69f9      	ldr	r1, [r7, #28]
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	6809      	ldr	r1, [r1, #0]
 8006b82:	4608      	mov	r0, r1
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	01c9      	lsls	r1, r1, #7
 8006b88:	4401      	add	r1, r0
 8006b8a:	3184      	adds	r1, #132	@ 0x84
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	01db      	lsls	r3, r3, #7
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3384      	adds	r3, #132	@ 0x84
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	01d2      	lsls	r2, r2, #7
 8006baa:	440a      	add	r2, r1
 8006bac:	3284      	adds	r2, #132	@ 0x84
 8006bae:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006bb2:	f023 0307 	bic.w	r3, r3, #7
 8006bb6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	01db      	lsls	r3, r3, #7
 8006bc2:	4413      	add	r3, r2
 8006bc4:	3384      	adds	r3, #132	@ 0x84
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bcc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	01db      	lsls	r3, r3, #7
 8006bd8:	4413      	add	r3, r2
 8006bda:	3384      	adds	r3, #132	@ 0x84
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	4611      	mov	r1, r2
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	01d2      	lsls	r2, r2, #7
 8006be8:	440a      	add	r2, r1
 8006bea:	3284      	adds	r2, #132	@ 0x84
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	6013      	str	r3, [r2, #0]
}
 8006bf2:	bf00      	nop
 8006bf4:	3724      	adds	r7, #36	@ 0x24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
	...

08006c00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	603b      	str	r3, [r7, #0]
 8006c0e:	4b20      	ldr	r3, [pc, #128]	@ (8006c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	4a1f      	ldr	r2, [pc, #124]	@ (8006c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8006c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c22:	603b      	str	r3, [r7, #0]
 8006c24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006c26:	4b1b      	ldr	r3, [pc, #108]	@ (8006c94 <HAL_PWREx_EnableOverDrive+0x94>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c2c:	f7fb fb06 	bl	800223c <HAL_GetTick>
 8006c30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c32:	e009      	b.n	8006c48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c34:	f7fb fb02 	bl	800223c <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c42:	d901      	bls.n	8006c48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e01f      	b.n	8006c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006c48:	4b13      	ldr	r3, [pc, #76]	@ (8006c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c54:	d1ee      	bne.n	8006c34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006c56:	4b11      	ldr	r3, [pc, #68]	@ (8006c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006c58:	2201      	movs	r2, #1
 8006c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006c5c:	f7fb faee 	bl	800223c <HAL_GetTick>
 8006c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c62:	e009      	b.n	8006c78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006c64:	f7fb faea 	bl	800223c <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c72:	d901      	bls.n	8006c78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e007      	b.n	8006c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006c78:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c84:	d1ee      	bne.n	8006c64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	40023800 	.word	0x40023800
 8006c94:	420e0040 	.word	0x420e0040
 8006c98:	40007000 	.word	0x40007000
 8006c9c:	420e0044 	.word	0x420e0044

08006ca0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006ca8:	f7fb fac8 	bl	800223c <HAL_GetTick>
 8006cac:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e069      	b.n	8006d8c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7fa fda9 	bl	8001824 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006cd2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f85e 	bl	8006d98 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	021a      	lsls	r2, r3, #8
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2120      	movs	r1, #32
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f856 	bl	8006db4 <QSPI_WaitFlagStateUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006d0c:	7afb      	ldrb	r3, [r7, #11]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d137      	bne.n	8006d82 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006d1c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6852      	ldr	r2, [r2, #4]
 8006d24:	0611      	lsls	r1, r2, #24
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68d2      	ldr	r2, [r2, #12]
 8006d2a:	4311      	orrs	r1, r2
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	69d2      	ldr	r2, [r2, #28]
 8006d30:	4311      	orrs	r1, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6a12      	ldr	r2, [r2, #32]
 8006d36:	4311      	orrs	r1, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	430b      	orrs	r3, r1
 8006d3e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	4b13      	ldr	r3, [pc, #76]	@ (8006d94 <HAL_QSPI_Init+0xf4>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6912      	ldr	r2, [r2, #16]
 8006d4e:	0411      	lsls	r1, r2, #16
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	6952      	ldr	r2, [r2, #20]
 8006d54:	4311      	orrs	r1, r2
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6992      	ldr	r2, [r2, #24]
 8006d5a:	4311      	orrs	r1, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0201 	orr.w	r2, r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8006d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	ffe0f8fe 	.word	0xffe0f8fe

08006d98 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006dc4:	e01a      	b.n	8006dfc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dcc:	d016      	beq.n	8006dfc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dce:	f7fb fa35 	bl	800223c <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d302      	bcc.n	8006de4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2204      	movs	r2, #4
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df0:	f043 0201 	orr.w	r2, r3, #1
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e00e      	b.n	8006e1a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4013      	ands	r3, r2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bf14      	ite	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	2300      	moveq	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d1d6      	bne.n	8006dc6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e0cc      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e38:	4b68      	ldr	r3, [pc, #416]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d90c      	bls.n	8006e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b65      	ldr	r3, [pc, #404]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4e:	4b63      	ldr	r3, [pc, #396]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d001      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e0b8      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d020      	beq.n	8006eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e78:	4b59      	ldr	r3, [pc, #356]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	4a58      	ldr	r2, [pc, #352]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e90:	4b53      	ldr	r3, [pc, #332]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	4a52      	ldr	r2, [pc, #328]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9c:	4b50      	ldr	r3, [pc, #320]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	494d      	ldr	r1, [pc, #308]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d044      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d107      	bne.n	8006ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ec2:	4b47      	ldr	r3, [pc, #284]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d119      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e07f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d107      	bne.n	8006ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e06f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e067      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f02:	4b37      	ldr	r3, [pc, #220]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f023 0203 	bic.w	r2, r3, #3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	4934      	ldr	r1, [pc, #208]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f14:	f7fb f992 	bl	800223c <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1a:	e00a      	b.n	8006f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f1c:	f7fb f98e 	bl	800223c <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e04f      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f32:	4b2b      	ldr	r3, [pc, #172]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 020c 	and.w	r2, r3, #12
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d1eb      	bne.n	8006f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f44:	4b25      	ldr	r3, [pc, #148]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 030f 	and.w	r3, r3, #15
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d20c      	bcs.n	8006f6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f52:	4b22      	ldr	r3, [pc, #136]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5a:	4b20      	ldr	r3, [pc, #128]	@ (8006fdc <HAL_RCC_ClockConfig+0x1b8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d001      	beq.n	8006f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e032      	b.n	8006fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0304 	and.w	r3, r3, #4
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f78:	4b19      	ldr	r3, [pc, #100]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4916      	ldr	r1, [pc, #88]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 0308 	and.w	r3, r3, #8
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d009      	beq.n	8006faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f96:	4b12      	ldr	r3, [pc, #72]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	490e      	ldr	r1, [pc, #56]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006faa:	f000 f821 	bl	8006ff0 <HAL_RCC_GetSysClockFreq>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	091b      	lsrs	r3, r3, #4
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	490a      	ldr	r1, [pc, #40]	@ (8006fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8006fbc:	5ccb      	ldrb	r3, [r1, r3]
 8006fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc2:	4a09      	ldr	r2, [pc, #36]	@ (8006fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006fc6:	4b09      	ldr	r3, [pc, #36]	@ (8006fec <HAL_RCC_ClockConfig+0x1c8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fa ff92 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	40023c00 	.word	0x40023c00
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	08010994 	.word	0x08010994
 8006fe8:	20000004 	.word	0x20000004
 8006fec:	20000008 	.word	0x20000008

08006ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff4:	b094      	sub	sp, #80	@ 0x50
 8006ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007008:	4b79      	ldr	r3, [pc, #484]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 030c 	and.w	r3, r3, #12
 8007010:	2b08      	cmp	r3, #8
 8007012:	d00d      	beq.n	8007030 <HAL_RCC_GetSysClockFreq+0x40>
 8007014:	2b08      	cmp	r3, #8
 8007016:	f200 80e1 	bhi.w	80071dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <HAL_RCC_GetSysClockFreq+0x34>
 800701e:	2b04      	cmp	r3, #4
 8007020:	d003      	beq.n	800702a <HAL_RCC_GetSysClockFreq+0x3a>
 8007022:	e0db      	b.n	80071dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007024:	4b73      	ldr	r3, [pc, #460]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007026:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007028:	e0db      	b.n	80071e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800702a:	4b73      	ldr	r3, [pc, #460]	@ (80071f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800702c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800702e:	e0d8      	b.n	80071e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007030:	4b6f      	ldr	r3, [pc, #444]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007038:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800703a:	4b6d      	ldr	r3, [pc, #436]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d063      	beq.n	800710e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007046:	4b6a      	ldr	r3, [pc, #424]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	099b      	lsrs	r3, r3, #6
 800704c:	2200      	movs	r2, #0
 800704e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007050:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007058:	633b      	str	r3, [r7, #48]	@ 0x30
 800705a:	2300      	movs	r3, #0
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
 800705e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007062:	4622      	mov	r2, r4
 8007064:	462b      	mov	r3, r5
 8007066:	f04f 0000 	mov.w	r0, #0
 800706a:	f04f 0100 	mov.w	r1, #0
 800706e:	0159      	lsls	r1, r3, #5
 8007070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007074:	0150      	lsls	r0, r2, #5
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4621      	mov	r1, r4
 800707c:	1a51      	subs	r1, r2, r1
 800707e:	6139      	str	r1, [r7, #16]
 8007080:	4629      	mov	r1, r5
 8007082:	eb63 0301 	sbc.w	r3, r3, r1
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007094:	4659      	mov	r1, fp
 8007096:	018b      	lsls	r3, r1, #6
 8007098:	4651      	mov	r1, sl
 800709a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800709e:	4651      	mov	r1, sl
 80070a0:	018a      	lsls	r2, r1, #6
 80070a2:	4651      	mov	r1, sl
 80070a4:	ebb2 0801 	subs.w	r8, r2, r1
 80070a8:	4659      	mov	r1, fp
 80070aa:	eb63 0901 	sbc.w	r9, r3, r1
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070c2:	4690      	mov	r8, r2
 80070c4:	4699      	mov	r9, r3
 80070c6:	4623      	mov	r3, r4
 80070c8:	eb18 0303 	adds.w	r3, r8, r3
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	462b      	mov	r3, r5
 80070d0:	eb49 0303 	adc.w	r3, r9, r3
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	f04f 0200 	mov.w	r2, #0
 80070da:	f04f 0300 	mov.w	r3, #0
 80070de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80070e2:	4629      	mov	r1, r5
 80070e4:	024b      	lsls	r3, r1, #9
 80070e6:	4621      	mov	r1, r4
 80070e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070ec:	4621      	mov	r1, r4
 80070ee:	024a      	lsls	r2, r1, #9
 80070f0:	4610      	mov	r0, r2
 80070f2:	4619      	mov	r1, r3
 80070f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070f6:	2200      	movs	r2, #0
 80070f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007100:	f7f9 f8d6 	bl	80002b0 <__aeabi_uldivmod>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4613      	mov	r3, r2
 800710a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800710c:	e058      	b.n	80071c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800710e:	4b38      	ldr	r3, [pc, #224]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	099b      	lsrs	r3, r3, #6
 8007114:	2200      	movs	r2, #0
 8007116:	4618      	mov	r0, r3
 8007118:	4611      	mov	r1, r2
 800711a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800711e:	623b      	str	r3, [r7, #32]
 8007120:	2300      	movs	r3, #0
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
 8007124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007128:	4642      	mov	r2, r8
 800712a:	464b      	mov	r3, r9
 800712c:	f04f 0000 	mov.w	r0, #0
 8007130:	f04f 0100 	mov.w	r1, #0
 8007134:	0159      	lsls	r1, r3, #5
 8007136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800713a:	0150      	lsls	r0, r2, #5
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4641      	mov	r1, r8
 8007142:	ebb2 0a01 	subs.w	sl, r2, r1
 8007146:	4649      	mov	r1, r9
 8007148:	eb63 0b01 	sbc.w	fp, r3, r1
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800715c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007160:	ebb2 040a 	subs.w	r4, r2, sl
 8007164:	eb63 050b 	sbc.w	r5, r3, fp
 8007168:	f04f 0200 	mov.w	r2, #0
 800716c:	f04f 0300 	mov.w	r3, #0
 8007170:	00eb      	lsls	r3, r5, #3
 8007172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007176:	00e2      	lsls	r2, r4, #3
 8007178:	4614      	mov	r4, r2
 800717a:	461d      	mov	r5, r3
 800717c:	4643      	mov	r3, r8
 800717e:	18e3      	adds	r3, r4, r3
 8007180:	603b      	str	r3, [r7, #0]
 8007182:	464b      	mov	r3, r9
 8007184:	eb45 0303 	adc.w	r3, r5, r3
 8007188:	607b      	str	r3, [r7, #4]
 800718a:	f04f 0200 	mov.w	r2, #0
 800718e:	f04f 0300 	mov.w	r3, #0
 8007192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007196:	4629      	mov	r1, r5
 8007198:	028b      	lsls	r3, r1, #10
 800719a:	4621      	mov	r1, r4
 800719c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071a0:	4621      	mov	r1, r4
 80071a2:	028a      	lsls	r2, r1, #10
 80071a4:	4610      	mov	r0, r2
 80071a6:	4619      	mov	r1, r3
 80071a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071aa:	2200      	movs	r2, #0
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	61fa      	str	r2, [r7, #28]
 80071b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071b4:	f7f9 f87c 	bl	80002b0 <__aeabi_uldivmod>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4613      	mov	r3, r2
 80071be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80071c0:	4b0b      	ldr	r3, [pc, #44]	@ (80071f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	0c1b      	lsrs	r3, r3, #16
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	3301      	adds	r3, #1
 80071cc:	005b      	lsls	r3, r3, #1
 80071ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80071d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80071da:	e002      	b.n	80071e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80071dc:	4b05      	ldr	r3, [pc, #20]	@ (80071f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80071de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80071e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3750      	adds	r7, #80	@ 0x50
 80071e8:	46bd      	mov	sp, r7
 80071ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071ee:	bf00      	nop
 80071f0:	40023800 	.word	0x40023800
 80071f4:	00f42400 	.word	0x00f42400
 80071f8:	007a1200 	.word	0x007a1200

080071fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071fc:	b480      	push	{r7}
 80071fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007200:	4b03      	ldr	r3, [pc, #12]	@ (8007210 <HAL_RCC_GetHCLKFreq+0x14>)
 8007202:	681b      	ldr	r3, [r3, #0]
}
 8007204:	4618      	mov	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	20000004 	.word	0x20000004

08007214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007218:	f7ff fff0 	bl	80071fc <HAL_RCC_GetHCLKFreq>
 800721c:	4602      	mov	r2, r0
 800721e:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	0a9b      	lsrs	r3, r3, #10
 8007224:	f003 0307 	and.w	r3, r3, #7
 8007228:	4903      	ldr	r1, [pc, #12]	@ (8007238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800722a:	5ccb      	ldrb	r3, [r1, r3]
 800722c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007230:	4618      	mov	r0, r3
 8007232:	bd80      	pop	{r7, pc}
 8007234:	40023800 	.word	0x40023800
 8007238:	080109a4 	.word	0x080109a4

0800723c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007240:	f7ff ffdc 	bl	80071fc <HAL_RCC_GetHCLKFreq>
 8007244:	4602      	mov	r2, r0
 8007246:	4b05      	ldr	r3, [pc, #20]	@ (800725c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	0b5b      	lsrs	r3, r3, #13
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	4903      	ldr	r1, [pc, #12]	@ (8007260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007252:	5ccb      	ldrb	r3, [r1, r3]
 8007254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007258:	4618      	mov	r0, r3
 800725a:	bd80      	pop	{r7, pc}
 800725c:	40023800 	.word	0x40023800
 8007260:	080109a4 	.word	0x080109a4

08007264 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	220f      	movs	r2, #15
 8007272:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007274:	4b12      	ldr	r3, [pc, #72]	@ (80072c0 <HAL_RCC_GetClockConfig+0x5c>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 0203 	and.w	r2, r3, #3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007280:	4b0f      	ldr	r3, [pc, #60]	@ (80072c0 <HAL_RCC_GetClockConfig+0x5c>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800728c:	4b0c      	ldr	r3, [pc, #48]	@ (80072c0 <HAL_RCC_GetClockConfig+0x5c>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007298:	4b09      	ldr	r3, [pc, #36]	@ (80072c0 <HAL_RCC_GetClockConfig+0x5c>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	08db      	lsrs	r3, r3, #3
 800729e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072a6:	4b07      	ldr	r3, [pc, #28]	@ (80072c4 <HAL_RCC_GetClockConfig+0x60>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 020f 	and.w	r2, r3, #15
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	601a      	str	r2, [r3, #0]
}
 80072b2:	bf00      	nop
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40023800 	.word	0x40023800
 80072c4:	40023c00 	.word	0x40023c00

080072c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b088      	sub	sp, #32
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072f0:	4b66      	ldr	r3, [pc, #408]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80072f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072f6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072fe:	4963      	ldr	r1, [pc, #396]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007300:	4313      	orrs	r3, r2
 8007302:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007312:	4b5e      	ldr	r3, [pc, #376]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007318:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	495a      	ldr	r1, [pc, #360]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10b      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800733c:	2b00      	cmp	r3, #0
 800733e:	d105      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007348:	2b00      	cmp	r3, #0
 800734a:	d075      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800734c:	4b50      	ldr	r3, [pc, #320]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007352:	f7fa ff73 	bl	800223c <HAL_GetTick>
 8007356:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007358:	e008      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800735a:	f7fa ff6f 	bl	800223c <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d901      	bls.n	800736c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e1dc      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800736c:	4b47      	ldr	r3, [pc, #284]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f0      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	019a      	lsls	r2, r3, #6
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	071b      	lsls	r3, r3, #28
 8007390:	493e      	ldr	r1, [pc, #248]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007392:	4313      	orrs	r3, r2
 8007394:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0302 	and.w	r3, r3, #2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d01f      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073a4:	4b39      	ldr	r3, [pc, #228]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80073a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073aa:	0f1b      	lsrs	r3, r3, #28
 80073ac:	f003 0307 	and.w	r3, r3, #7
 80073b0:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	019a      	lsls	r2, r3, #6
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	061b      	lsls	r3, r3, #24
 80073be:	431a      	orrs	r2, r3
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	071b      	lsls	r3, r3, #28
 80073c4:	4931      	ldr	r1, [pc, #196]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073cc:	4b2f      	ldr	r3, [pc, #188]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80073ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073d2:	f023 021f 	bic.w	r2, r3, #31
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	3b01      	subs	r3, #1
 80073dc:	492b      	ldr	r1, [pc, #172]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00d      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	019a      	lsls	r2, r3, #6
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	061b      	lsls	r3, r3, #24
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	071b      	lsls	r3, r3, #28
 8007404:	4921      	ldr	r1, [pc, #132]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800740c:	4b20      	ldr	r3, [pc, #128]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007412:	f7fa ff13 	bl	800223c <HAL_GetTick>
 8007416:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007418:	e008      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800741a:	f7fa ff0f 	bl	800223c <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e17c      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800742c:	4b17      	ldr	r3, [pc, #92]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b00      	cmp	r3, #0
 8007442:	d112      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10c      	bne.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80ce 	beq.w	80075fa <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007462:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007466:	f040 80c8 	bne.w	80075fa <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800746a:	4b0a      	ldr	r3, [pc, #40]	@ (8007494 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007470:	f7fa fee4 	bl	800223c <HAL_GetTick>
 8007474:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007476:	e00f      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007478:	f7fa fee0 	bl	800223c <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d908      	bls.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e14d      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800748a:	bf00      	nop
 800748c:	40023800 	.word	0x40023800
 8007490:	42470068 	.word	0x42470068
 8007494:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007498:	4ba5      	ldr	r3, [pc, #660]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074a4:	d0e8      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d02e      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80074b2:	4b9f      	ldr	r3, [pc, #636]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80074b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b8:	0c1b      	lsrs	r3, r3, #16
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	3301      	adds	r3, #1
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074c4:	4b9a      	ldr	r3, [pc, #616]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80074c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ca:	0f1b      	lsrs	r3, r3, #28
 80074cc:	f003 0307 	and.w	r3, r3, #7
 80074d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	019a      	lsls	r2, r3, #6
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	3b01      	subs	r3, #1
 80074de:	041b      	lsls	r3, r3, #16
 80074e0:	431a      	orrs	r2, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	061b      	lsls	r3, r3, #24
 80074e8:	431a      	orrs	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	071b      	lsls	r3, r3, #28
 80074ee:	4990      	ldr	r1, [pc, #576]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80074f6:	4b8e      	ldr	r3, [pc, #568]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80074f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074fc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007504:	3b01      	subs	r3, #1
 8007506:	021b      	lsls	r3, r3, #8
 8007508:	4989      	ldr	r1, [pc, #548]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d02c      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800751c:	4b84      	ldr	r3, [pc, #528]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800751e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007522:	0c1b      	lsrs	r3, r3, #16
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	3301      	adds	r3, #1
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800752e:	4b80      	ldr	r3, [pc, #512]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	019a      	lsls	r2, r3, #6
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	085b      	lsrs	r3, r3, #1
 8007546:	3b01      	subs	r3, #1
 8007548:	041b      	lsls	r3, r3, #16
 800754a:	431a      	orrs	r2, r3
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	061b      	lsls	r3, r3, #24
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	071b      	lsls	r3, r3, #28
 8007558:	4975      	ldr	r1, [pc, #468]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007560:	4b73      	ldr	r3, [pc, #460]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007562:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007566:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756e:	4970      	ldr	r1, [pc, #448]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800757e:	2b00      	cmp	r3, #0
 8007580:	d024      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8007586:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800758a:	d11f      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800758c:	4b68      	ldr	r3, [pc, #416]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800758e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007592:	0e1b      	lsrs	r3, r3, #24
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800759a:	4b65      	ldr	r3, [pc, #404]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800759c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a0:	0f1b      	lsrs	r3, r3, #28
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	019a      	lsls	r2, r3, #6
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	085b      	lsrs	r3, r3, #1
 80075b4:	3b01      	subs	r3, #1
 80075b6:	041b      	lsls	r3, r3, #16
 80075b8:	431a      	orrs	r2, r3
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	061b      	lsls	r3, r3, #24
 80075be:	431a      	orrs	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	071b      	lsls	r3, r3, #28
 80075c4:	495a      	ldr	r1, [pc, #360]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80075cc:	4b59      	ldr	r3, [pc, #356]	@ (8007734 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80075ce:	2201      	movs	r2, #1
 80075d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075d2:	f7fa fe33 	bl	800223c <HAL_GetTick>
 80075d6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075d8:	e008      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075da:	f7fa fe2f 	bl	800223c <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e09c      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075ec:	4b50      	ldr	r3, [pc, #320]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075f8:	d1ef      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0320 	and.w	r3, r3, #32
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 8083 	beq.w	800770e <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007608:	2300      	movs	r3, #0
 800760a:	60bb      	str	r3, [r7, #8]
 800760c:	4b48      	ldr	r3, [pc, #288]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007610:	4a47      	ldr	r2, [pc, #284]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007616:	6413      	str	r3, [r2, #64]	@ 0x40
 8007618:	4b45      	ldr	r3, [pc, #276]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800761a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007620:	60bb      	str	r3, [r7, #8]
 8007622:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007624:	4b44      	ldr	r3, [pc, #272]	@ (8007738 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a43      	ldr	r2, [pc, #268]	@ (8007738 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800762a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800762e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007630:	f7fa fe04 	bl	800223c <HAL_GetTick>
 8007634:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007636:	e008      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007638:	f7fa fe00 	bl	800223c <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d901      	bls.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e06d      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800764a:	4b3b      	ldr	r3, [pc, #236]	@ (8007738 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007652:	2b00      	cmp	r3, #0
 8007654:	d0f0      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007656:	4b36      	ldr	r3, [pc, #216]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800765e:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d02f      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800766e:	69ba      	ldr	r2, [r7, #24]
 8007670:	429a      	cmp	r2, r3
 8007672:	d028      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007674:	4b2e      	ldr	r3, [pc, #184]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800767c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800767e:	4b2f      	ldr	r3, [pc, #188]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007680:	2201      	movs	r2, #1
 8007682:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007684:	4b2d      	ldr	r3, [pc, #180]	@ (800773c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007686:	2200      	movs	r2, #0
 8007688:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800768a:	4a29      	ldr	r2, [pc, #164]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007690:	4b27      	ldr	r3, [pc, #156]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d114      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800769c:	f7fa fdce 	bl	800223c <HAL_GetTick>
 80076a0:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a2:	e00a      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076a4:	f7fa fdca 	bl	800223c <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d901      	bls.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e035      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d0ee      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076d2:	d10d      	bne.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80076d4:	4b16      	ldr	r3, [pc, #88]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80076e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076e8:	4911      	ldr	r1, [pc, #68]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	608b      	str	r3, [r1, #8]
 80076ee:	e005      	b.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x434>
 80076f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4a0e      	ldr	r2, [pc, #56]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076f6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80076fa:	6093      	str	r3, [r2, #8]
 80076fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076fe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007708:	4909      	ldr	r1, [pc, #36]	@ (8007730 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800770a:	4313      	orrs	r3, r2
 800770c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0310 	and.w	r3, r3, #16
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8007720:	4b07      	ldr	r3, [pc, #28]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8007722:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3720      	adds	r7, #32
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40023800 	.word	0x40023800
 8007734:	42470070 	.word	0x42470070
 8007738:	40007000 	.word	0x40007000
 800773c:	42470e40 	.word	0x42470e40
 8007740:	424711e0 	.word	0x424711e0

08007744 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e273      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d075      	beq.n	800784e <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007762:	4b88      	ldr	r3, [pc, #544]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 030c 	and.w	r3, r3, #12
 800776a:	2b04      	cmp	r3, #4
 800776c:	d00c      	beq.n	8007788 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800776e:	4b85      	ldr	r3, [pc, #532]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 030c 	and.w	r3, r3, #12
        || \
 8007776:	2b08      	cmp	r3, #8
 8007778:	d112      	bne.n	80077a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800777a:	4b82      	ldr	r3, [pc, #520]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007786:	d10b      	bne.n	80077a0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007788:	4b7e      	ldr	r3, [pc, #504]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d05b      	beq.n	800784c <HAL_RCC_OscConfig+0x108>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d157      	bne.n	800784c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e24e      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a8:	d106      	bne.n	80077b8 <HAL_RCC_OscConfig+0x74>
 80077aa:	4b76      	ldr	r3, [pc, #472]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a75      	ldr	r2, [pc, #468]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	e01d      	b.n	80077f4 <HAL_RCC_OscConfig+0xb0>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077c0:	d10c      	bne.n	80077dc <HAL_RCC_OscConfig+0x98>
 80077c2:	4b70      	ldr	r3, [pc, #448]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a6f      	ldr	r2, [pc, #444]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	4b6d      	ldr	r3, [pc, #436]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a6c      	ldr	r2, [pc, #432]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	e00b      	b.n	80077f4 <HAL_RCC_OscConfig+0xb0>
 80077dc:	4b69      	ldr	r3, [pc, #420]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a68      	ldr	r2, [pc, #416]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	4b66      	ldr	r3, [pc, #408]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a65      	ldr	r2, [pc, #404]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80077ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d013      	beq.n	8007824 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fc:	f7fa fd1e 	bl	800223c <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007804:	f7fa fd1a 	bl	800223c <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b64      	cmp	r3, #100	@ 0x64
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e213      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007816:	4b5b      	ldr	r3, [pc, #364]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0f0      	beq.n	8007804 <HAL_RCC_OscConfig+0xc0>
 8007822:	e014      	b.n	800784e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007824:	f7fa fd0a 	bl	800223c <HAL_GetTick>
 8007828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800782a:	e008      	b.n	800783e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800782c:	f7fa fd06 	bl	800223c <HAL_GetTick>
 8007830:	4602      	mov	r2, r0
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	2b64      	cmp	r3, #100	@ 0x64
 8007838:	d901      	bls.n	800783e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e1ff      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800783e:	4b51      	ldr	r3, [pc, #324]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f0      	bne.n	800782c <HAL_RCC_OscConfig+0xe8>
 800784a:	e000      	b.n	800784e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800784c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0302 	and.w	r3, r3, #2
 8007856:	2b00      	cmp	r3, #0
 8007858:	d063      	beq.n	8007922 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800785a:	4b4a      	ldr	r3, [pc, #296]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 030c 	and.w	r3, r3, #12
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007866:	4b47      	ldr	r3, [pc, #284]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 030c 	and.w	r3, r3, #12
        || \
 800786e:	2b08      	cmp	r3, #8
 8007870:	d11c      	bne.n	80078ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007872:	4b44      	ldr	r3, [pc, #272]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d116      	bne.n	80078ac <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800787e:	4b41      	ldr	r3, [pc, #260]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <HAL_RCC_OscConfig+0x152>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d001      	beq.n	8007896 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e1d3      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007896:	4b3b      	ldr	r3, [pc, #236]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	4937      	ldr	r1, [pc, #220]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078aa:	e03a      	b.n	8007922 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d020      	beq.n	80078f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078b4:	4b34      	ldr	r3, [pc, #208]	@ (8007988 <HAL_RCC_OscConfig+0x244>)
 80078b6:	2201      	movs	r2, #1
 80078b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ba:	f7fa fcbf 	bl	800223c <HAL_GetTick>
 80078be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c0:	e008      	b.n	80078d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078c2:	f7fa fcbb 	bl	800223c <HAL_GetTick>
 80078c6:	4602      	mov	r2, r0
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	1ad3      	subs	r3, r2, r3
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d901      	bls.n	80078d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e1b4      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0302 	and.w	r3, r3, #2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0f0      	beq.n	80078c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e0:	4b28      	ldr	r3, [pc, #160]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	4925      	ldr	r1, [pc, #148]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	600b      	str	r3, [r1, #0]
 80078f4:	e015      	b.n	8007922 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078f6:	4b24      	ldr	r3, [pc, #144]	@ (8007988 <HAL_RCC_OscConfig+0x244>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7fa fc9e 	bl	800223c <HAL_GetTick>
 8007900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007904:	f7fa fc9a 	bl	800223c <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e193      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007916:	4b1b      	ldr	r3, [pc, #108]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f0      	bne.n	8007904 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d036      	beq.n	800799c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d016      	beq.n	8007964 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007936:	4b15      	ldr	r3, [pc, #84]	@ (800798c <HAL_RCC_OscConfig+0x248>)
 8007938:	2201      	movs	r2, #1
 800793a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800793c:	f7fa fc7e 	bl	800223c <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007944:	f7fa fc7a 	bl	800223c <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e173      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007956:	4b0b      	ldr	r3, [pc, #44]	@ (8007984 <HAL_RCC_OscConfig+0x240>)
 8007958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0f0      	beq.n	8007944 <HAL_RCC_OscConfig+0x200>
 8007962:	e01b      	b.n	800799c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007964:	4b09      	ldr	r3, [pc, #36]	@ (800798c <HAL_RCC_OscConfig+0x248>)
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800796a:	f7fa fc67 	bl	800223c <HAL_GetTick>
 800796e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007970:	e00e      	b.n	8007990 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007972:	f7fa fc63 	bl	800223c <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d907      	bls.n	8007990 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e15c      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
 8007984:	40023800 	.word	0x40023800
 8007988:	42470000 	.word	0x42470000
 800798c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007990:	4b8a      	ldr	r3, [pc, #552]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1ea      	bne.n	8007972 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 8097 	beq.w	8007ad8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079aa:	2300      	movs	r3, #0
 80079ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079ae:	4b83      	ldr	r3, [pc, #524]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10f      	bne.n	80079da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079ba:	2300      	movs	r3, #0
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	4b7f      	ldr	r3, [pc, #508]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c2:	4a7e      	ldr	r2, [pc, #504]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 80079c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80079ca:	4b7c      	ldr	r3, [pc, #496]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079d2:	60bb      	str	r3, [r7, #8]
 80079d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079da:	4b79      	ldr	r3, [pc, #484]	@ (8007bc0 <HAL_RCC_OscConfig+0x47c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d118      	bne.n	8007a18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079e6:	4b76      	ldr	r3, [pc, #472]	@ (8007bc0 <HAL_RCC_OscConfig+0x47c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a75      	ldr	r2, [pc, #468]	@ (8007bc0 <HAL_RCC_OscConfig+0x47c>)
 80079ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079f2:	f7fa fc23 	bl	800223c <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079fa:	f7fa fc1f 	bl	800223c <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e118      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8007bc0 <HAL_RCC_OscConfig+0x47c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f0      	beq.n	80079fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d106      	bne.n	8007a2e <HAL_RCC_OscConfig+0x2ea>
 8007a20:	4b66      	ldr	r3, [pc, #408]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a24:	4a65      	ldr	r2, [pc, #404]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a2c:	e01c      	b.n	8007a68 <HAL_RCC_OscConfig+0x324>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	d10c      	bne.n	8007a50 <HAL_RCC_OscConfig+0x30c>
 8007a36:	4b61      	ldr	r3, [pc, #388]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a3a:	4a60      	ldr	r2, [pc, #384]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a3c:	f043 0304 	orr.w	r3, r3, #4
 8007a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a42:	4b5e      	ldr	r3, [pc, #376]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a46:	4a5d      	ldr	r2, [pc, #372]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a48:	f043 0301 	orr.w	r3, r3, #1
 8007a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a4e:	e00b      	b.n	8007a68 <HAL_RCC_OscConfig+0x324>
 8007a50:	4b5a      	ldr	r3, [pc, #360]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a54:	4a59      	ldr	r2, [pc, #356]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a56:	f023 0301 	bic.w	r3, r3, #1
 8007a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a5c:	4b57      	ldr	r3, [pc, #348]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a60:	4a56      	ldr	r2, [pc, #344]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a62:	f023 0304 	bic.w	r3, r3, #4
 8007a66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d015      	beq.n	8007a9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a70:	f7fa fbe4 	bl	800223c <HAL_GetTick>
 8007a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a76:	e00a      	b.n	8007a8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a78:	f7fa fbe0 	bl	800223c <HAL_GetTick>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e0d7      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a92:	f003 0302 	and.w	r3, r3, #2
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0ee      	beq.n	8007a78 <HAL_RCC_OscConfig+0x334>
 8007a9a:	e014      	b.n	8007ac6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9c:	f7fa fbce 	bl	800223c <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa2:	e00a      	b.n	8007aba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007aa4:	f7fa fbca 	bl	800223c <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e0c1      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aba:	4b40      	ldr	r3, [pc, #256]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1ee      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d105      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007acc:	4b3b      	ldr	r3, [pc, #236]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad0:	4a3a      	ldr	r2, [pc, #232]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ad6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80ad 	beq.w	8007c3c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ae2:	4b36      	ldr	r3, [pc, #216]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 030c 	and.w	r3, r3, #12
 8007aea:	2b08      	cmp	r3, #8
 8007aec:	d060      	beq.n	8007bb0 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d145      	bne.n	8007b82 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007af6:	4b33      	ldr	r3, [pc, #204]	@ (8007bc4 <HAL_RCC_OscConfig+0x480>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afc:	f7fa fb9e 	bl	800223c <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b04:	f7fa fb9a 	bl	800223c <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e093      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b16:	4b29      	ldr	r3, [pc, #164]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f0      	bne.n	8007b04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69da      	ldr	r2, [r3, #28]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b30:	019b      	lsls	r3, r3, #6
 8007b32:	431a      	orrs	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	041b      	lsls	r3, r3, #16
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b44:	061b      	lsls	r3, r3, #24
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4c:	071b      	lsls	r3, r3, #28
 8007b4e:	491b      	ldr	r1, [pc, #108]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b54:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc4 <HAL_RCC_OscConfig+0x480>)
 8007b56:	2201      	movs	r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5a:	f7fa fb6f 	bl	800223c <HAL_GetTick>
 8007b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b60:	e008      	b.n	8007b74 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b62:	f7fa fb6b 	bl	800223c <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e064      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b74:	4b11      	ldr	r3, [pc, #68]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0f0      	beq.n	8007b62 <HAL_RCC_OscConfig+0x41e>
 8007b80:	e05c      	b.n	8007c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b82:	4b10      	ldr	r3, [pc, #64]	@ (8007bc4 <HAL_RCC_OscConfig+0x480>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b88:	f7fa fb58 	bl	800223c <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b90:	f7fa fb54 	bl	800223c <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e04d      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba2:	4b06      	ldr	r3, [pc, #24]	@ (8007bbc <HAL_RCC_OscConfig+0x478>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <HAL_RCC_OscConfig+0x44c>
 8007bae:	e045      	b.n	8007c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d107      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e040      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
 8007bbc:	40023800 	.word	0x40023800
 8007bc0:	40007000 	.word	0x40007000
 8007bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007c48 <HAL_RCC_OscConfig+0x504>)
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d030      	beq.n	8007c38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d129      	bne.n	8007c38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d122      	bne.n	8007c38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bf2:	68fa      	ldr	r2, [r7, #12]
 8007bf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d119      	bne.n	8007c38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0e:	085b      	lsrs	r3, r3, #1
 8007c10:	3b01      	subs	r3, #1
 8007c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d10f      	bne.n	8007c38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d107      	bne.n	8007c38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d001      	beq.n	8007c3c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	40023800 	.word	0x40023800

08007c4c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e10c      	b.n	8007e88 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d106      	bne.n	8007c88 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7fa f8d6 	bl	8001e34 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f903 	bl	8007e9c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f938 	bl	8007f0c <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a1b      	ldr	r3, [r3, #32]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d030      	beq.n	8007d06 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f957 	bl	8007f58 <SAI_GetInputClock>
 8007caa:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	025b      	lsls	r3, r3, #9
 8007cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cc2:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a72      	ldr	r2, [pc, #456]	@ (8007e90 <HAL_SAI_Init+0x244>)
 8007cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ccc:	08da      	lsrs	r2, r3, #3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	4b6e      	ldr	r3, [pc, #440]	@ (8007e90 <HAL_SAI_Init+0x244>)
 8007cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cda:	08da      	lsrs	r2, r3, #3
 8007cdc:	4613      	mov	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4413      	add	r3, r2
 8007ce2:	005b      	lsls	r3, r3, #1
 8007ce4:	1aca      	subs	r2, r1, r3
 8007ce6:	2a08      	cmp	r2, #8
 8007ce8:	d904      	bls.n	8007cf4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf8:	2b04      	cmp	r3, #4
 8007cfa:	d104      	bne.n	8007d06 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d00:	085a      	lsrs	r2, r3, #1
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_SAI_Init+0xca>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d109      	bne.n	8007d2a <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_SAI_Init+0xd6>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e001      	b.n	8007d26 <HAL_SAI_Init+0xda>
 8007d22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	e008      	b.n	8007d3c <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d102      	bne.n	8007d38 <HAL_SAI_Init+0xec>
 8007d32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d36:	e000      	b.n	8007d3a <HAL_SAI_Init+0xee>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d811      	bhi.n	8007d68 <HAL_SAI_Init+0x11c>
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d20b      	bcs.n	8007d60 <HAL_SAI_Init+0x114>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d002      	beq.n	8007d52 <HAL_SAI_Init+0x106>
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d003      	beq.n	8007d58 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007d50:	e00a      	b.n	8007d68 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	613b      	str	r3, [r7, #16]
    break;
 8007d56:	e008      	b.n	8007d6a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d5c:	613b      	str	r3, [r7, #16]
    break;
 8007d5e:	e004      	b.n	8007d6a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007d64:	613b      	str	r3, [r7, #16]
    break;
 8007d66:	e000      	b.n	8007d6a <HAL_SAI_Init+0x11e>
      break;
 8007d68:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6819      	ldr	r1, [r3, #0]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	4b47      	ldr	r3, [pc, #284]	@ (8007e94 <HAL_SAI_Init+0x248>)
 8007d76:	400b      	ands	r3, r1
 8007d78:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6819      	ldr	r1, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d88:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007d8e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d94:	431a      	orrs	r2, r3
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007da2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007dae:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db4:	051b      	lsls	r3, r3, #20
 8007db6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007dce:	f023 030f 	bic.w	r3, r3, #15
 8007dd2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6859      	ldr	r1, [r3, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	699a      	ldr	r2, [r3, #24]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de8:	431a      	orrs	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6899      	ldr	r1, [r3, #8]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	4b26      	ldr	r3, [pc, #152]	@ (8007e98 <HAL_SAI_Init+0x24c>)
 8007dfe:	400b      	ands	r3, r1
 8007e00:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6899      	ldr	r1, [r3, #8]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e0c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e12:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8007e18:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007e1e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e24:	3b01      	subs	r3, #1
 8007e26:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007e28:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68d9      	ldr	r1, [r3, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007e40:	400b      	ands	r3, r1
 8007e42:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68d9      	ldr	r1, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e52:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e58:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007e5a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e60:	3b01      	subs	r3, #1
 8007e62:	021b      	lsls	r3, r3, #8
 8007e64:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	cccccccd 	.word	0xcccccccd
 8007e94:	ff05c010 	.word	0xff05c010
 8007e98:	fff88000 	.word	0xfff88000

08007e9c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007ea4:	4b17      	ldr	r3, [pc, #92]	@ (8007f04 <SAI_Disable+0x68>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a17      	ldr	r2, [pc, #92]	@ (8007f08 <SAI_Disable+0x6c>)
 8007eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8007eae:	0b1b      	lsrs	r3, r3, #12
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007ec6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	1e5a      	subs	r2, r3, #1
 8007ecc:	60fa      	str	r2, [r7, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10a      	bne.n	8007ee8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ed8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee6:	e006      	b.n	8007ef6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1e8      	bne.n	8007ec8 <SAI_Disable+0x2c>

  return status;
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	20000004 	.word	0x20000004
 8007f08:	95cbec1b 	.word	0x95cbec1b

08007f0c <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d00c      	beq.n	8007f36 <SAI_BlockSynchroConfig+0x2a>
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d80d      	bhi.n	8007f3c <SAI_BlockSynchroConfig+0x30>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <SAI_BlockSynchroConfig+0x1e>
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d003      	beq.n	8007f30 <SAI_BlockSynchroConfig+0x24>
 8007f28:	e008      	b.n	8007f3c <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
      break;
 8007f2e:	e008      	b.n	8007f42 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007f30:	2310      	movs	r3, #16
 8007f32:	60fb      	str	r3, [r7, #12]
      break;
 8007f34:	e005      	b.n	8007f42 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007f36:	2320      	movs	r3, #32
 8007f38:	60fb      	str	r3, [r7, #12]
      break;
 8007f3a:	e002      	b.n	8007f42 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]
      break;
 8007f40:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 8007f42:	4a04      	ldr	r2, [pc, #16]	@ (8007f54 <SAI_BlockSynchroConfig+0x48>)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 8007f48:	bf00      	nop
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	40015800 	.word	0x40015800

08007f58 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a46      	ldr	r2, [pc, #280]	@ (800808c <SAI_GetInputClock+0x134>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d10b      	bne.n	8007f8e <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 8007f76:	4b46      	ldr	r3, [pc, #280]	@ (8008090 <SAI_GetInputClock+0x138>)
 8007f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	4942      	ldr	r1, [pc, #264]	@ (8008090 <SAI_GetInputClock+0x138>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8007f8c:	e00b      	b.n	8007fa6 <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8007f8e:	4b40      	ldr	r3, [pc, #256]	@ (8008090 <SAI_GetInputClock+0x138>)
 8007f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	69db      	ldr	r3, [r3, #28]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	493c      	ldr	r1, [pc, #240]	@ (8008090 <SAI_GetInputClock+0x138>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8008090 <SAI_GetInputClock+0x138>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d108      	bne.n	8007fc4 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007fb2:	4b37      	ldr	r3, [pc, #220]	@ (8008090 <SAI_GetInputClock+0x138>)
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fba:	4a36      	ldr	r2, [pc, #216]	@ (8008094 <SAI_GetInputClock+0x13c>)
 8007fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc0:	613b      	str	r3, [r7, #16]
 8007fc2:	e007      	b.n	8007fd4 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007fc4:	4b32      	ldr	r3, [pc, #200]	@ (8008090 <SAI_GetInputClock+0x138>)
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fcc:	4a32      	ldr	r2, [pc, #200]	@ (8008098 <SAI_GetInputClock+0x140>)
 8007fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd2:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d121      	bne.n	8008020 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8007fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8008090 <SAI_GetInputClock+0x138>)
 8007fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe2:	0e1b      	lsrs	r3, r3, #24
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 8007fea:	4b29      	ldr	r3, [pc, #164]	@ (8008090 <SAI_GetInputClock+0x138>)
 8007fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ff0:	099b      	lsrs	r3, r3, #6
 8007ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	fb03 f202 	mul.w	r2, r3, r2
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008002:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8008004:	4b22      	ldr	r3, [pc, #136]	@ (8008090 <SAI_GetInputClock+0x138>)
 8008006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800800a:	0a1b      	lsrs	r3, r3, #8
 800800c:	f003 031f 	and.w	r3, r3, #31
 8008010:	3301      	adds	r3, #1
 8008012:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8008014:	697a      	ldr	r2, [r7, #20]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	fbb2 f3f3 	udiv	r3, r2, r3
 800801c:	617b      	str	r3, [r7, #20]
 800801e:	e02d      	b.n	800807c <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008028:	d120      	bne.n	800806c <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 800802a:	4b19      	ldr	r3, [pc, #100]	@ (8008090 <SAI_GetInputClock+0x138>)
 800802c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008030:	0e1b      	lsrs	r3, r3, #24
 8008032:	f003 030f 	and.w	r3, r3, #15
 8008036:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 8008038:	4b15      	ldr	r3, [pc, #84]	@ (8008090 <SAI_GetInputClock+0x138>)
 800803a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800803e:	099b      	lsrs	r3, r3, #6
 8008040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	fb03 f202 	mul.w	r2, r3, r2
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008050:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8008052:	4b0f      	ldr	r3, [pc, #60]	@ (8008090 <SAI_GetInputClock+0x138>)
 8008054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008058:	f003 031f 	and.w	r3, r3, #31
 800805c:	3301      	adds	r3, #1
 800805e:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	fbb2 f3f3 	udiv	r3, r2, r3
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	e007      	b.n	800807c <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 800806c:	4b08      	ldr	r3, [pc, #32]	@ (8008090 <SAI_GetInputClock+0x138>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	4a07      	ldr	r2, [pc, #28]	@ (8008090 <SAI_GetInputClock+0x138>)
 8008072:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008076:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8008078:	4b08      	ldr	r3, [pc, #32]	@ (800809c <SAI_GetInputClock+0x144>)
 800807a:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800807c:	697b      	ldr	r3, [r7, #20]
}
 800807e:	4618      	mov	r0, r3
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	40015804 	.word	0x40015804
 8008090:	40023800 	.word	0x40023800
 8008094:	00f42400 	.word	0x00f42400
 8008098:	007a1200 	.word	0x007a1200
 800809c:	00bb8000 	.word	0x00bb8000

080080a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e022      	b.n	80080f8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d105      	bne.n	80080ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7f9 fc27 	bl	8001918 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2203      	movs	r2, #3
 80080ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f814 	bl	8008100 <HAL_SD_InitCard>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e00a      	b.n	80080f8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008100:	b5b0      	push	{r4, r5, r7, lr}
 8008102:	b08e      	sub	sp, #56	@ 0x38
 8008104:	af04      	add	r7, sp, #16
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008108:	2300      	movs	r3, #0
 800810a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800810c:	2300      	movs	r3, #0
 800810e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008114:	2300      	movs	r3, #0
 8008116:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008118:	2300      	movs	r3, #0
 800811a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800811c:	2376      	movs	r3, #118	@ 0x76
 800811e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681d      	ldr	r5, [r3, #0]
 8008124:	466c      	mov	r4, sp
 8008126:	f107 0314 	add.w	r3, r7, #20
 800812a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800812e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008132:	f107 0308 	add.w	r3, r7, #8
 8008136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008138:	4628      	mov	r0, r5
 800813a:	f003 fa29 	bl	800b590 <SDIO_Init>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	e04f      	b.n	80081f0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008150:	4b29      	ldr	r3, [pc, #164]	@ (80081f8 <HAL_SD_InitCard+0xf8>)
 8008152:	2200      	movs	r2, #0
 8008154:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4618      	mov	r0, r3
 800815c:	f003 fa61 	bl	800b622 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008160:	4b25      	ldr	r3, [pc, #148]	@ (80081f8 <HAL_SD_InitCard+0xf8>)
 8008162:	2201      	movs	r2, #1
 8008164:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008166:	2002      	movs	r0, #2
 8008168:	f7fa f874 	bl	8002254 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 ff03 	bl	8008f78 <SD_PowerON>
 8008172:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00b      	beq.n	8008192 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e02e      	b.n	80081f0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fe22 	bl	8008ddc <SD_InitCard>
 8008198:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00b      	beq.n	80081b8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	e01b      	b.n	80081f0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80081c0:	4618      	mov	r0, r3
 80081c2:	f003 fac0 	bl	800b746 <SDMMC_CmdBlockLength>
 80081c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00f      	beq.n	80081ee <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a0a      	ldr	r2, [pc, #40]	@ (80081fc <HAL_SD_InitCard+0xfc>)
 80081d4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081da:	6a3b      	ldr	r3, [r7, #32]
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e000      	b.n	80081f0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3728      	adds	r7, #40	@ 0x28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bdb0      	pop	{r4, r5, r7, pc}
 80081f8:	422580a0 	.word	0x422580a0
 80081fc:	004005ff 	.word	0x004005ff

08008200 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b092      	sub	sp, #72	@ 0x48
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
 800820c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800820e:	f7fa f815 	bl	800223c <HAL_GetTick>
 8008212:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d107      	bne.n	8008232 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008226:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e1bd      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b01      	cmp	r3, #1
 800823c:	f040 81b0 	bne.w	80085a0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008246:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	441a      	add	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008250:	429a      	cmp	r2, r3
 8008252:	d907      	bls.n	8008264 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008258:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e1a4      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2203      	movs	r2, #3
 8008268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2200      	movs	r2, #0
 8008272:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008278:	2b01      	cmp	r3, #1
 800827a:	d002      	beq.n	8008282 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800827c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800827e:	025b      	lsls	r3, r3, #9
 8008280:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008282:	f04f 33ff 	mov.w	r3, #4294967295
 8008286:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	025b      	lsls	r3, r3, #9
 800828c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800828e:	2390      	movs	r3, #144	@ 0x90
 8008290:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008292:	2302      	movs	r3, #2
 8008294:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008296:	2300      	movs	r3, #0
 8008298:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800829a:	2301      	movs	r3, #1
 800829c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f107 0214 	add.w	r2, r7, #20
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f003 fa20 	bl	800b6ee <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d90a      	bls.n	80082ca <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2202      	movs	r2, #2
 80082b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80082c0:	4618      	mov	r0, r3
 80082c2:	f003 fa84 	bl	800b7ce <SDMMC_CmdReadMultiBlock>
 80082c6:	6478      	str	r0, [r7, #68]	@ 0x44
 80082c8:	e009      	b.n	80082de <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80082d6:	4618      	mov	r0, r3
 80082d8:	f003 fa57 	bl	800b78a <SDMMC_CmdReadSingleBlock>
 80082dc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80082de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d012      	beq.n	800830a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a7a      	ldr	r2, [pc, #488]	@ (80084d4 <HAL_SD_ReadBlocks+0x2d4>)
 80082ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082f2:	431a      	orrs	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e151      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800830e:	e061      	b.n	80083d4 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008316:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d03c      	beq.n	8008398 <HAL_SD_ReadBlocks+0x198>
 800831e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d039      	beq.n	8008398 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008324:	2300      	movs	r3, #0
 8008326:	643b      	str	r3, [r7, #64]	@ 0x40
 8008328:	e033      	b.n	8008392 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f003 f959 	bl	800b5e6 <SDIO_ReadFIFO>
 8008334:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008338:	b2da      	uxtb	r2, r3
 800833a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800833e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008340:	3301      	adds	r3, #1
 8008342:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008346:	3b01      	subs	r3, #1
 8008348:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834c:	0a1b      	lsrs	r3, r3, #8
 800834e:	b2da      	uxtb	r2, r3
 8008350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008352:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008356:	3301      	adds	r3, #1
 8008358:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800835a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800835c:	3b01      	subs	r3, #1
 800835e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008362:	0c1b      	lsrs	r3, r3, #16
 8008364:	b2da      	uxtb	r2, r3
 8008366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008368:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800836a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836c:	3301      	adds	r3, #1
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008372:	3b01      	subs	r3, #1
 8008374:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008378:	0e1b      	lsrs	r3, r3, #24
 800837a:	b2da      	uxtb	r2, r3
 800837c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800837e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008382:	3301      	adds	r3, #1
 8008384:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008388:	3b01      	subs	r3, #1
 800838a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800838c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800838e:	3301      	adds	r3, #1
 8008390:	643b      	str	r3, [r7, #64]	@ 0x40
 8008392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008394:	2b07      	cmp	r3, #7
 8008396:	d9c8      	bls.n	800832a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008398:	f7f9 ff50 	bl	800223c <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d902      	bls.n	80083ae <HAL_SD_ReadBlocks+0x1ae>
 80083a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d112      	bne.n	80083d4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a48      	ldr	r2, [pc, #288]	@ (80084d4 <HAL_SD_ReadBlocks+0x2d4>)
 80083b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e0ec      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083da:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d096      	beq.n	8008310 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d022      	beq.n	8008436 <HAL_SD_ReadBlocks+0x236>
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d91f      	bls.n	8008436 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d01b      	beq.n	8008436 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f003 fa4a 	bl	800b89c <SDMMC_CmdStopTransfer>
 8008408:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800840a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800840c:	2b00      	cmp	r3, #0
 800840e:	d012      	beq.n	8008436 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a2f      	ldr	r2, [pc, #188]	@ (80084d4 <HAL_SD_ReadBlocks+0x2d4>)
 8008416:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800841c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800841e:	431a      	orrs	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e0bb      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b00      	cmp	r3, #0
 8008442:	d012      	beq.n	800846a <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a22      	ldr	r2, [pc, #136]	@ (80084d4 <HAL_SD_ReadBlocks+0x2d4>)
 800844a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008450:	f043 0208 	orr.w	r2, r3, #8
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2200      	movs	r2, #0
 8008464:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e0a1      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008470:	f003 0302 	and.w	r3, r3, #2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d012      	beq.n	800849e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a15      	ldr	r2, [pc, #84]	@ (80084d4 <HAL_SD_ReadBlocks+0x2d4>)
 800847e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008484:	f043 0202 	orr.w	r2, r3, #2
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e087      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a4:	f003 0320 	and.w	r3, r3, #32
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d064      	beq.n	8008576 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a08      	ldr	r2, [pc, #32]	@ (80084d4 <HAL_SD_ReadBlocks+0x2d4>)
 80084b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b8:	f043 0220 	orr.w	r2, r3, #32
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e06d      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>
 80084d2:	bf00      	nop
 80084d4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f003 f882 	bl	800b5e6 <SDIO_ReadFIFO>
 80084e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80084e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80084ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ee:	3301      	adds	r3, #1
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80084f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f4:	3b01      	subs	r3, #1
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80084f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fa:	0a1b      	lsrs	r3, r3, #8
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008500:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008504:	3301      	adds	r3, #1
 8008506:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800850a:	3b01      	subs	r3, #1
 800850c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800850e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008510:	0c1b      	lsrs	r3, r3, #16
 8008512:	b2da      	uxtb	r2, r3
 8008514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008516:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800851a:	3301      	adds	r3, #1
 800851c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800851e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008520:	3b01      	subs	r3, #1
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008526:	0e1b      	lsrs	r3, r3, #24
 8008528:	b2da      	uxtb	r2, r3
 800852a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800852c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800852e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008530:	3301      	adds	r3, #1
 8008532:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008536:	3b01      	subs	r3, #1
 8008538:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800853a:	f7f9 fe7f 	bl	800223c <HAL_GetTick>
 800853e:	4602      	mov	r2, r0
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	1ad3      	subs	r3, r2, r3
 8008544:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008546:	429a      	cmp	r2, r3
 8008548:	d902      	bls.n	8008550 <HAL_SD_ReadBlocks+0x350>
 800854a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800854c:	2b00      	cmp	r3, #0
 800854e:	d112      	bne.n	8008576 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a18      	ldr	r2, [pc, #96]	@ (80085b8 <HAL_SD_ReadBlocks+0x3b8>)
 8008556:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e01b      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <HAL_SD_ReadBlocks+0x38a>
 8008584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1a6      	bne.n	80084d8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008592:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	e006      	b.n	80085ae <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3748      	adds	r7, #72	@ 0x48
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	004005ff 	.word	0x004005ff

080085bc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b092      	sub	sp, #72	@ 0x48
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80085ca:	f7f9 fe37 	bl	800223c <HAL_GetTick>
 80085ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d107      	bne.n	80085ee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e165      	b.n	80088ba <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	f040 8158 	bne.w	80088ac <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008602:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	441a      	add	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800860c:	429a      	cmp	r2, r3
 800860e:	d907      	bls.n	8008620 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008614:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e14c      	b.n	80088ba <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2203      	movs	r2, #3
 8008624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2200      	movs	r2, #0
 800862e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008634:	2b01      	cmp	r3, #1
 8008636:	d002      	beq.n	800863e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863a:	025b      	lsls	r3, r3, #9
 800863c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295
 8008642:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	025b      	lsls	r3, r3, #9
 8008648:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800864a:	2390      	movs	r3, #144	@ 0x90
 800864c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800864e:	2300      	movs	r3, #0
 8008650:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008652:	2300      	movs	r3, #0
 8008654:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008656:	2301      	movs	r3, #1
 8008658:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f107 0218 	add.w	r2, r7, #24
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f003 f842 	bl	800b6ee <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d90a      	bls.n	8008686 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2220      	movs	r2, #32
 8008674:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800867c:	4618      	mov	r0, r3
 800867e:	f003 f8ea 	bl	800b856 <SDMMC_CmdWriteMultiBlock>
 8008682:	6478      	str	r0, [r7, #68]	@ 0x44
 8008684:	e009      	b.n	800869a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2210      	movs	r2, #16
 800868a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008692:	4618      	mov	r0, r3
 8008694:	f003 f8bd 	bl	800b812 <SDMMC_CmdWriteSingleBlock>
 8008698:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800869a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800869c:	2b00      	cmp	r3, #0
 800869e:	d012      	beq.n	80086c6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a87      	ldr	r2, [pc, #540]	@ (80088c4 <HAL_SD_WriteBlocks+0x308>)
 80086a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086ae:	431a      	orrs	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e0f9      	b.n	80088ba <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80086ca:	e065      	b.n	8008798 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d040      	beq.n	800875c <HAL_SD_WriteBlocks+0x1a0>
 80086da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d03d      	beq.n	800875c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80086e0:	2300      	movs	r3, #0
 80086e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80086e4:	e037      	b.n	8008756 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80086e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ee:	3301      	adds	r3, #1
 80086f0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80086f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f4:	3b01      	subs	r3, #1
 80086f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80086f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	021a      	lsls	r2, r3, #8
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	4313      	orrs	r3, r2
 8008702:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008706:	3301      	adds	r3, #1
 8008708:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800870a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800870c:	3b01      	subs	r3, #1
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	041a      	lsls	r2, r3, #16
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800871c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871e:	3301      	adds	r3, #1
 8008720:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008724:	3b01      	subs	r3, #1
 8008726:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	061a      	lsls	r2, r3, #24
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	4313      	orrs	r3, r2
 8008732:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008736:	3301      	adds	r3, #1
 8008738:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800873a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800873c:	3b01      	subs	r3, #1
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f107 0214 	add.w	r2, r7, #20
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f002 ff58 	bl	800b600 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008752:	3301      	adds	r3, #1
 8008754:	643b      	str	r3, [r7, #64]	@ 0x40
 8008756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008758:	2b07      	cmp	r3, #7
 800875a:	d9c4      	bls.n	80086e6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800875c:	f7f9 fd6e 	bl	800223c <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008768:	429a      	cmp	r2, r3
 800876a:	d902      	bls.n	8008772 <HAL_SD_WriteBlocks+0x1b6>
 800876c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800876e:	2b00      	cmp	r3, #0
 8008770:	d112      	bne.n	8008798 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a53      	ldr	r2, [pc, #332]	@ (80088c4 <HAL_SD_WriteBlocks+0x308>)
 8008778:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800877e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008780:	431a      	orrs	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e090      	b.n	80088ba <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800879e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d092      	beq.n	80086cc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d022      	beq.n	80087fa <HAL_SD_WriteBlocks+0x23e>
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d91f      	bls.n	80087fa <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d01b      	beq.n	80087fa <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f003 f868 	bl	800b89c <SDMMC_CmdStopTransfer>
 80087cc:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80087ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d012      	beq.n	80087fa <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a3a      	ldr	r2, [pc, #232]	@ (80088c4 <HAL_SD_WriteBlocks+0x308>)
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087e2:	431a      	orrs	r2, r3
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e05f      	b.n	80088ba <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b00      	cmp	r3, #0
 8008806:	d012      	beq.n	800882e <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a2d      	ldr	r2, [pc, #180]	@ (80088c4 <HAL_SD_WriteBlocks+0x308>)
 800880e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008814:	f043 0208 	orr.w	r2, r3, #8
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e045      	b.n	80088ba <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d012      	beq.n	8008862 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a20      	ldr	r2, [pc, #128]	@ (80088c4 <HAL_SD_WriteBlocks+0x308>)
 8008842:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008848:	f043 0202 	orr.w	r2, r3, #2
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e02b      	b.n	80088ba <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008868:	f003 0310 	and.w	r3, r3, #16
 800886c:	2b00      	cmp	r3, #0
 800886e:	d012      	beq.n	8008896 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a13      	ldr	r2, [pc, #76]	@ (80088c4 <HAL_SD_WriteBlocks+0x308>)
 8008876:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887c:	f043 0210 	orr.w	r2, r3, #16
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e011      	b.n	80088ba <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800889e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	e006      	b.n	80088ba <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
  }
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3748      	adds	r7, #72	@ 0x48
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	004005ff 	.word	0x004005ff

080088c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088d6:	0f9b      	lsrs	r3, r3, #30
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088e2:	0e9b      	lsrs	r3, r3, #26
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088f4:	0e1b      	lsrs	r3, r3, #24
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	f003 0303 	and.w	r3, r3, #3
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008906:	0c1b      	lsrs	r3, r3, #16
 8008908:	b2da      	uxtb	r2, r3
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008912:	0a1b      	lsrs	r3, r3, #8
 8008914:	b2da      	uxtb	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800891e:	b2da      	uxtb	r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008928:	0d1b      	lsrs	r3, r3, #20
 800892a:	b29a      	uxth	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008934:	0c1b      	lsrs	r3, r3, #16
 8008936:	b2db      	uxtb	r3, r3
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	b2da      	uxtb	r2, r3
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008946:	0bdb      	lsrs	r3, r3, #15
 8008948:	b2db      	uxtb	r3, r3
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	b2da      	uxtb	r2, r3
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008958:	0b9b      	lsrs	r3, r3, #14
 800895a:	b2db      	uxtb	r3, r3
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	b2da      	uxtb	r2, r3
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800896a:	0b5b      	lsrs	r3, r3, #13
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	b2da      	uxtb	r2, r3
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800897c:	0b1b      	lsrs	r3, r3, #12
 800897e:	b2db      	uxtb	r3, r3
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	b2da      	uxtb	r2, r3
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2200      	movs	r2, #0
 800898e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008994:	2b00      	cmp	r3, #0
 8008996:	d163      	bne.n	8008a60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800899c:	009a      	lsls	r2, r3, #2
 800899e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80089a2:	4013      	ands	r3, r2
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80089a8:	0f92      	lsrs	r2, r2, #30
 80089aa:	431a      	orrs	r2, r3
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089b4:	0edb      	lsrs	r3, r3, #27
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	f003 0307 	and.w	r3, r3, #7
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089c6:	0e1b      	lsrs	r3, r3, #24
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	f003 0307 	and.w	r3, r3, #7
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089d8:	0d5b      	lsrs	r3, r3, #21
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	f003 0307 	and.w	r3, r3, #7
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089ea:	0c9b      	lsrs	r3, r3, #18
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	f003 0307 	and.w	r3, r3, #7
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089fc:	0bdb      	lsrs	r3, r3, #15
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	7e1b      	ldrb	r3, [r3, #24]
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	f003 0307 	and.w	r3, r3, #7
 8008a1e:	3302      	adds	r3, #2
 8008a20:	2201      	movs	r2, #1
 8008a22:	fa02 f303 	lsl.w	r3, r2, r3
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008a2a:	fb03 f202 	mul.w	r2, r3, r2
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	7a1b      	ldrb	r3, [r3, #8]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f003 030f 	and.w	r3, r3, #15
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	409a      	lsls	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008a4c:	0a52      	lsrs	r2, r2, #9
 8008a4e:	fb03 f202 	mul.w	r2, r3, r2
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a5c:	661a      	str	r2, [r3, #96]	@ 0x60
 8008a5e:	e031      	b.n	8008ac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d11d      	bne.n	8008aa4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a6c:	041b      	lsls	r3, r3, #16
 8008a6e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a76:	0c1b      	lsrs	r3, r3, #16
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	3301      	adds	r3, #1
 8008a84:	029a      	lsls	r2, r3, #10
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a98:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	661a      	str	r2, [r3, #96]	@ 0x60
 8008aa2:	e00f      	b.n	8008ac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a58      	ldr	r2, [pc, #352]	@ (8008c0c <HAL_SD_GetCardCSD+0x344>)
 8008aaa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ab0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e09d      	b.n	8008c00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ac8:	0b9b      	lsrs	r3, r3, #14
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ada:	09db      	lsrs	r3, r3, #7
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008afc:	0fdb      	lsrs	r3, r3, #31
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b08:	0f5b      	lsrs	r3, r3, #29
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	f003 0303 	and.w	r3, r3, #3
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b1a:	0e9b      	lsrs	r3, r3, #26
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	f003 0307 	and.w	r3, r3, #7
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b2c:	0d9b      	lsrs	r3, r3, #22
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b3e:	0d5b      	lsrs	r3, r3, #21
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b5a:	0c1b      	lsrs	r3, r3, #16
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b6e:	0bdb      	lsrs	r3, r3, #15
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b82:	0b9b      	lsrs	r3, r3, #14
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	b2da      	uxtb	r2, r3
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b96:	0b5b      	lsrs	r3, r3, #13
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008baa:	0b1b      	lsrs	r3, r3, #12
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bbe:	0a9b      	lsrs	r3, r3, #10
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008be6:	085b      	lsrs	r3, r3, #1
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	004005ff 	.word	0x004005ff

08008c10 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008c68:	b5b0      	push	{r4, r5, r7, lr}
 8008c6a:	b08e      	sub	sp, #56	@ 0x38
 8008c6c:	af04      	add	r7, sp, #16
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d02e      	beq.n	8008ce6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c8e:	d106      	bne.n	8008c9e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008c9c:	e029      	b.n	8008cf2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ca4:	d10a      	bne.n	8008cbc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa1c 	bl	80090e4 <SD_WideBus_Enable>
 8008cac:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	431a      	orrs	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cba:	e01a      	b.n	8008cf2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10a      	bne.n	8008cd8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa59 	bl	800917a <SD_WideBus_Disable>
 8008cc8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cd6:	e00c      	b.n	8008cf2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cdc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	639a      	str	r2, [r3, #56]	@ 0x38
 8008ce4:	e005      	b.n	8008cf2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00b      	beq.n	8008d12 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a26      	ldr	r2, [pc, #152]	@ (8008d98 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008d00:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008d10:	e01f      	b.n	8008d52 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681d      	ldr	r5, [r3, #0]
 8008d38:	466c      	mov	r4, sp
 8008d3a:	f107 0314 	add.w	r3, r7, #20
 8008d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f002 fc1f 	bl	800b590 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f002 fcf3 	bl	800b746 <SDMMC_CmdBlockLength>
 8008d60:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d98 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008d6e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	431a      	orrs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8008d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3728      	adds	r7, #40	@ 0x28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bdb0      	pop	{r4, r5, r7, pc}
 8008d96:	bf00      	nop
 8008d98:	004005ff 	.word	0x004005ff

08008d9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008da8:	f107 030c 	add.w	r3, r7, #12
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f970 	bl	8009094 <SD_SendStatus>
 8008db4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	0a5b      	lsrs	r3, r3, #9
 8008dcc:	f003 030f 	and.w	r3, r3, #15
 8008dd0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008dd2:	693b      	ldr	r3, [r7, #16]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ddc:	b5b0      	push	{r4, r5, r7, lr}
 8008dde:	b094      	sub	sp, #80	@ 0x50
 8008de0:	af04      	add	r7, sp, #16
 8008de2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008de4:	2301      	movs	r3, #1
 8008de6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f002 fc26 	bl	800b63e <SDIO_GetPowerState>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008df8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008dfc:	e0b8      	b.n	8008f70 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d02f      	beq.n	8008e66 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f002 fe50 	bl	800bab0 <SDMMC_CmdSendCID>
 8008e10:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <SD_InitCard+0x40>
    {
      return errorstate;
 8008e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e1a:	e0a9      	b.n	8008f70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2100      	movs	r1, #0
 8008e22:	4618      	mov	r0, r3
 8008e24:	f002 fc50 	bl	800b6c8 <SDIO_GetResponse>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2104      	movs	r1, #4
 8008e34:	4618      	mov	r0, r3
 8008e36:	f002 fc47 	bl	800b6c8 <SDIO_GetResponse>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2108      	movs	r1, #8
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 fc3e 	bl	800b6c8 <SDIO_GetResponse>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	210c      	movs	r1, #12
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f002 fc35 	bl	800b6c8 <SDIO_GetResponse>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d00d      	beq.n	8008e8a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f107 020e 	add.w	r2, r7, #14
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f002 fe56 	bl	800bb2a <SDMMC_CmdSetRelAdd>
 8008e7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <SD_InitCard+0xae>
    {
      return errorstate;
 8008e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e88:	e072      	b.n	8008f70 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d036      	beq.n	8008f00 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e92:	89fb      	ldrh	r3, [r7, #14]
 8008e94:	461a      	mov	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea2:	041b      	lsls	r3, r3, #16
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	f002 fe20 	bl	800baec <SDMMC_CmdSendCSD>
 8008eac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008eb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb6:	e05b      	b.n	8008f70 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f002 fc02 	bl	800b6c8 <SDIO_GetResponse>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2104      	movs	r1, #4
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f002 fbf9 	bl	800b6c8 <SDIO_GetResponse>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2108      	movs	r1, #8
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f002 fbf0 	bl	800b6c8 <SDIO_GetResponse>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	210c      	movs	r1, #12
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f002 fbe7 	bl	800b6c8 <SDIO_GetResponse>
 8008efa:	4602      	mov	r2, r0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2104      	movs	r1, #4
 8008f06:	4618      	mov	r0, r3
 8008f08:	f002 fbde 	bl	800b6c8 <SDIO_GetResponse>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	0d1a      	lsrs	r2, r3, #20
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f14:	f107 0310 	add.w	r3, r7, #16
 8008f18:	4619      	mov	r1, r3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff fcd4 	bl	80088c8 <HAL_SD_GetCardCSD>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008f2a:	e021      	b.n	8008f70 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6819      	ldr	r1, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f34:	041b      	lsls	r3, r3, #16
 8008f36:	2200      	movs	r2, #0
 8008f38:	461c      	mov	r4, r3
 8008f3a:	4615      	mov	r5, r2
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	462b      	mov	r3, r5
 8008f40:	4608      	mov	r0, r1
 8008f42:	f002 fccd 	bl	800b8e0 <SDMMC_CmdSelDesel>
 8008f46:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <SD_InitCard+0x176>
  {
    return errorstate;
 8008f4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f50:	e00e      	b.n	8008f70 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681d      	ldr	r5, [r3, #0]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	466c      	mov	r4, sp
 8008f5a:	f103 0210 	add.w	r2, r3, #16
 8008f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f64:	3304      	adds	r3, #4
 8008f66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f68:	4628      	mov	r0, r5
 8008f6a:	f002 fb11 	bl	800b590 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3740      	adds	r7, #64	@ 0x40
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bdb0      	pop	{r4, r5, r7, pc}

08008f78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f84:	2300      	movs	r3, #0
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 fcc8 	bl	800b926 <SDMMC_CmdGoIdleState>
 8008f96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	e072      	b.n	8009088 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f002 fcdb 	bl	800b962 <SDMMC_CmdOperCond>
 8008fac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00d      	beq.n	8008fd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f002 fcb1 	bl	800b926 <SDMMC_CmdGoIdleState>
 8008fc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d004      	beq.n	8008fd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	e05b      	b.n	8009088 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d137      	bne.n	800904e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f002 fcdb 	bl	800b9a0 <SDMMC_CmdAppCommand>
 8008fea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d02d      	beq.n	800904e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ff2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008ff6:	e047      	b.n	8009088 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f002 fcce 	bl	800b9a0 <SDMMC_CmdAppCommand>
 8009004:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <SD_PowerON+0x98>
    {
      return errorstate;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	e03b      	b.n	8009088 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	491e      	ldr	r1, [pc, #120]	@ (8009090 <SD_PowerON+0x118>)
 8009016:	4618      	mov	r0, r3
 8009018:	f002 fce4 	bl	800b9e4 <SDMMC_CmdAppOperCommand>
 800901c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009024:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009028:	e02e      	b.n	8009088 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2100      	movs	r1, #0
 8009030:	4618      	mov	r0, r3
 8009032:	f002 fb49 	bl	800b6c8 <SDIO_GetResponse>
 8009036:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	0fdb      	lsrs	r3, r3, #31
 800903c:	2b01      	cmp	r3, #1
 800903e:	d101      	bne.n	8009044 <SD_PowerON+0xcc>
 8009040:	2301      	movs	r3, #1
 8009042:	e000      	b.n	8009046 <SD_PowerON+0xce>
 8009044:	2300      	movs	r3, #0
 8009046:	613b      	str	r3, [r7, #16]

    count++;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	3301      	adds	r3, #1
 800904c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009054:	4293      	cmp	r3, r2
 8009056:	d802      	bhi.n	800905e <SD_PowerON+0xe6>
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0cc      	beq.n	8008ff8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009064:	4293      	cmp	r3, r2
 8009066:	d902      	bls.n	800906e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009068:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800906c:	e00c      	b.n	8009088 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d003      	beq.n	8009080 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	645a      	str	r2, [r3, #68]	@ 0x44
 800907e:	e002      	b.n	8009086 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	c1100000 	.word	0xc1100000

08009094 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80090a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80090a8:	e018      	b.n	80090dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090b2:	041b      	lsls	r3, r3, #16
 80090b4:	4619      	mov	r1, r3
 80090b6:	4610      	mov	r0, r2
 80090b8:	f002 fd58 	bl	800bb6c <SDMMC_CmdSendStatus>
 80090bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	e009      	b.n	80090dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f002 fafa 	bl	800b6c8 <SDIO_GetResponse>
 80090d4:	4602      	mov	r2, r0
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80090ec:	2300      	movs	r3, #0
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	2300      	movs	r3, #0
 80090f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2100      	movs	r1, #0
 80090fa:	4618      	mov	r0, r3
 80090fc:	f002 fae4 	bl	800b6c8 <SDIO_GetResponse>
 8009100:	4603      	mov	r3, r0
 8009102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009106:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800910a:	d102      	bne.n	8009112 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800910c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009110:	e02f      	b.n	8009172 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009112:	f107 030c 	add.w	r3, r7, #12
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f879 	bl	8009210 <SD_FindSCR>
 800911e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	e023      	b.n	8009172 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d01c      	beq.n	800916e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f002 fc2d 	bl	800b9a0 <SDMMC_CmdAppCommand>
 8009146:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	e00f      	b.n	8009172 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	2102      	movs	r1, #2
 8009158:	4618      	mov	r0, r3
 800915a:	f002 fc66 	bl	800ba2a <SDMMC_CmdBusWidth>
 800915e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	e003      	b.n	8009172 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800916a:	2300      	movs	r3, #0
 800916c:	e001      	b.n	8009172 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800916e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009172:	4618      	mov	r0, r3
 8009174:	3718      	adds	r7, #24
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b086      	sub	sp, #24
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009182:	2300      	movs	r3, #0
 8009184:	60fb      	str	r3, [r7, #12]
 8009186:	2300      	movs	r3, #0
 8009188:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2100      	movs	r1, #0
 8009190:	4618      	mov	r0, r3
 8009192:	f002 fa99 	bl	800b6c8 <SDIO_GetResponse>
 8009196:	4603      	mov	r3, r0
 8009198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800919c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091a0:	d102      	bne.n	80091a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80091a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80091a6:	e02f      	b.n	8009208 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80091a8:	f107 030c 	add.w	r3, r7, #12
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f82e 	bl	8009210 <SD_FindSCR>
 80091b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	e023      	b.n	8009208 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01c      	beq.n	8009204 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d2:	041b      	lsls	r3, r3, #16
 80091d4:	4619      	mov	r1, r3
 80091d6:	4610      	mov	r0, r2
 80091d8:	f002 fbe2 	bl	800b9a0 <SDMMC_CmdAppCommand>
 80091dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	e00f      	b.n	8009208 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f002 fc1b 	bl	800ba2a <SDMMC_CmdBusWidth>
 80091f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	e003      	b.n	8009208 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009200:	2300      	movs	r3, #0
 8009202:	e001      	b.n	8009208 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009204:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009210:	b590      	push	{r4, r7, lr}
 8009212:	b08f      	sub	sp, #60	@ 0x3c
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800921a:	f7f9 f80f 	bl	800223c <HAL_GetTick>
 800921e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009224:	2300      	movs	r3, #0
 8009226:	60bb      	str	r3, [r7, #8]
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2108      	movs	r1, #8
 8009236:	4618      	mov	r0, r3
 8009238:	f002 fa85 	bl	800b746 <SDMMC_CmdBlockLength>
 800923c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009246:	e0b2      	b.n	80093ae <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009250:	041b      	lsls	r3, r3, #16
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f002 fba3 	bl	800b9a0 <SDMMC_CmdAppCommand>
 800925a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800925c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009264:	e0a3      	b.n	80093ae <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009266:	f04f 33ff 	mov.w	r3, #4294967295
 800926a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800926c:	2308      	movs	r3, #8
 800926e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009270:	2330      	movs	r3, #48	@ 0x30
 8009272:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009274:	2302      	movs	r3, #2
 8009276:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009278:	2300      	movs	r3, #0
 800927a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800927c:	2301      	movs	r3, #1
 800927e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f107 0210 	add.w	r2, r7, #16
 8009288:	4611      	mov	r1, r2
 800928a:	4618      	mov	r0, r3
 800928c:	f002 fa2f 	bl	800b6ee <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4618      	mov	r0, r3
 8009296:	f002 fbea 	bl	800ba6e <SDMMC_CmdSendSCR>
 800929a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800929c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d02a      	beq.n	80092f8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80092a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a4:	e083      	b.n	80093ae <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00f      	beq.n	80092d4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6819      	ldr	r1, [r3, #0]
 80092b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	f107 0208 	add.w	r2, r7, #8
 80092c0:	18d4      	adds	r4, r2, r3
 80092c2:	4608      	mov	r0, r1
 80092c4:	f002 f98f 	bl	800b5e6 <SDIO_ReadFIFO>
 80092c8:	4603      	mov	r3, r0
 80092ca:	6023      	str	r3, [r4, #0]
      index++;
 80092cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ce:	3301      	adds	r3, #1
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d2:	e006      	b.n	80092e2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d012      	beq.n	8009308 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80092e2:	f7f8 ffab 	bl	800223c <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f0:	d102      	bne.n	80092f8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80092f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80092f6:	e05a      	b.n	80093ae <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092fe:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0cf      	beq.n	80092a6 <SD_FindSCR+0x96>
 8009306:	e000      	b.n	800930a <SD_FindSCR+0xfa>
      break;
 8009308:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2208      	movs	r2, #8
 800931e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009320:	2308      	movs	r3, #8
 8009322:	e044      	b.n	80093ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932a:	f003 0302 	and.w	r3, r3, #2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d005      	beq.n	800933e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2202      	movs	r2, #2
 8009338:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800933a:	2302      	movs	r3, #2
 800933c:	e037      	b.n	80093ae <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009344:	f003 0320 	and.w	r3, r3, #32
 8009348:	2b00      	cmp	r3, #0
 800934a:	d005      	beq.n	8009358 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2220      	movs	r2, #32
 8009352:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009354:	2320      	movs	r3, #32
 8009356:	e02a      	b.n	80093ae <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009360:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	061a      	lsls	r2, r3, #24
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800936e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	0a1b      	lsrs	r3, r3, #8
 8009374:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009378:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	0e1b      	lsrs	r3, r3, #24
 800937e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009382:	601a      	str	r2, [r3, #0]
    scr++;
 8009384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009386:	3304      	adds	r3, #4
 8009388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	061a      	lsls	r2, r3, #24
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009396:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	0a1b      	lsrs	r3, r3, #8
 800939c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80093a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	0e1b      	lsrs	r3, r3, #24
 80093a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80093a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093aa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	373c      	adds	r7, #60	@ 0x3c
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd90      	pop	{r4, r7, pc}

080093b6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e025      	b.n	8009416 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d106      	bne.n	80093e4 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7f8 fd1e 	bl	8001e20 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2202      	movs	r2, #2
 80093e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	3304      	adds	r3, #4
 80093f4:	4619      	mov	r1, r3
 80093f6:	4610      	mov	r0, r2
 80093f8:	f002 f804 	bl	800b404 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	461a      	mov	r2, r3
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	f002 f859 	bl	800b4be <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e07b      	b.n	8009528 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009434:	2b00      	cmp	r3, #0
 8009436:	d108      	bne.n	800944a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009440:	d009      	beq.n	8009456 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	61da      	str	r2, [r3, #28]
 8009448:	e005      	b.n	8009456 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b00      	cmp	r3, #0
 8009466:	d106      	bne.n	8009476 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7f8 fab9 	bl	80019e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2202      	movs	r2, #2
 800947a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800948c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80094a8:	431a      	orrs	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	f003 0302 	and.w	r3, r3, #2
 80094b2:	431a      	orrs	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	f003 0301 	and.w	r3, r3, #1
 80094bc:	431a      	orrs	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094c6:	431a      	orrs	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094da:	ea42 0103 	orr.w	r1, r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	430a      	orrs	r2, r1
 80094ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	f003 0104 	and.w	r1, r3, #4
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fc:	f003 0210 	and.w	r2, r3, #16
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	430a      	orrs	r2, r1
 8009506:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	69da      	ldr	r2, [r3, #28]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009516:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e041      	b.n	80095c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7f8 faae 	bl	8001ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	3304      	adds	r3, #4
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f000 fa7e 	bl	8009a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2201      	movs	r2, #1
 80095b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
	...

080095d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d001      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e04e      	b.n	8009686 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 0201 	orr.w	r2, r2, #1
 80095fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a23      	ldr	r2, [pc, #140]	@ (8009694 <HAL_TIM_Base_Start_IT+0xc4>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d022      	beq.n	8009650 <HAL_TIM_Base_Start_IT+0x80>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009612:	d01d      	beq.n	8009650 <HAL_TIM_Base_Start_IT+0x80>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a1f      	ldr	r2, [pc, #124]	@ (8009698 <HAL_TIM_Base_Start_IT+0xc8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d018      	beq.n	8009650 <HAL_TIM_Base_Start_IT+0x80>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1e      	ldr	r2, [pc, #120]	@ (800969c <HAL_TIM_Base_Start_IT+0xcc>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d013      	beq.n	8009650 <HAL_TIM_Base_Start_IT+0x80>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a1c      	ldr	r2, [pc, #112]	@ (80096a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d00e      	beq.n	8009650 <HAL_TIM_Base_Start_IT+0x80>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a1b      	ldr	r2, [pc, #108]	@ (80096a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d009      	beq.n	8009650 <HAL_TIM_Base_Start_IT+0x80>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a19      	ldr	r2, [pc, #100]	@ (80096a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d004      	beq.n	8009650 <HAL_TIM_Base_Start_IT+0x80>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a18      	ldr	r2, [pc, #96]	@ (80096ac <HAL_TIM_Base_Start_IT+0xdc>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d111      	bne.n	8009674 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f003 0307 	and.w	r3, r3, #7
 800965a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b06      	cmp	r3, #6
 8009660:	d010      	beq.n	8009684 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0201 	orr.w	r2, r2, #1
 8009670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009672:	e007      	b.n	8009684 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f042 0201 	orr.w	r2, r2, #1
 8009682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	40010000 	.word	0x40010000
 8009698:	40000400 	.word	0x40000400
 800969c:	40000800 	.word	0x40000800
 80096a0:	40000c00 	.word	0x40000c00
 80096a4:	40010400 	.word	0x40010400
 80096a8:	40014000 	.word	0x40014000
 80096ac:	40001800 	.word	0x40001800

080096b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	f003 0302 	and.w	r3, r3, #2
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d020      	beq.n	8009714 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f003 0302 	and.w	r3, r3, #2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d01b      	beq.n	8009714 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f06f 0202 	mvn.w	r2, #2
 80096e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2201      	movs	r2, #1
 80096ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d003      	beq.n	8009702 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f999 	bl	8009a32 <HAL_TIM_IC_CaptureCallback>
 8009700:	e005      	b.n	800970e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f98b 	bl	8009a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 f99c 	bl	8009a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	d020      	beq.n	8009760 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f003 0304 	and.w	r3, r3, #4
 8009724:	2b00      	cmp	r3, #0
 8009726:	d01b      	beq.n	8009760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f06f 0204 	mvn.w	r2, #4
 8009730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2202      	movs	r2, #2
 8009736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009742:	2b00      	cmp	r3, #0
 8009744:	d003      	beq.n	800974e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f973 	bl	8009a32 <HAL_TIM_IC_CaptureCallback>
 800974c:	e005      	b.n	800975a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f965 	bl	8009a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f976 	bl	8009a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f003 0308 	and.w	r3, r3, #8
 8009766:	2b00      	cmp	r3, #0
 8009768:	d020      	beq.n	80097ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01b      	beq.n	80097ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f06f 0208 	mvn.w	r2, #8
 800977c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2204      	movs	r2, #4
 8009782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f94d 	bl	8009a32 <HAL_TIM_IC_CaptureCallback>
 8009798:	e005      	b.n	80097a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f93f 	bl	8009a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f950 	bl	8009a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f003 0310 	and.w	r3, r3, #16
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d020      	beq.n	80097f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f003 0310 	and.w	r3, r3, #16
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01b      	beq.n	80097f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f06f 0210 	mvn.w	r2, #16
 80097c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2208      	movs	r2, #8
 80097ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f927 	bl	8009a32 <HAL_TIM_IC_CaptureCallback>
 80097e4:	e005      	b.n	80097f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f919 	bl	8009a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f92a 	bl	8009a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00c      	beq.n	800981c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d007      	beq.n	800981c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f06f 0201 	mvn.w	r2, #1
 8009814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7f7 fe84 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00c      	beq.n	8009840 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800982c:	2b00      	cmp	r3, #0
 800982e:	d007      	beq.n	8009840 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fae4 	bl	8009e08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00c      	beq.n	8009864 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800985c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f8fb 	bl	8009a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f003 0320 	and.w	r3, r3, #32
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00c      	beq.n	8009888 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f003 0320 	and.w	r3, r3, #32
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f06f 0220 	mvn.w	r2, #32
 8009880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fab6 	bl	8009df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d101      	bne.n	80098ac <HAL_TIM_ConfigClockSource+0x1c>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e0b4      	b.n	8009a16 <HAL_TIM_ConfigClockSource+0x186>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80098ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098e4:	d03e      	beq.n	8009964 <HAL_TIM_ConfigClockSource+0xd4>
 80098e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098ea:	f200 8087 	bhi.w	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 80098ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098f2:	f000 8086 	beq.w	8009a02 <HAL_TIM_ConfigClockSource+0x172>
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098fa:	d87f      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 80098fc:	2b70      	cmp	r3, #112	@ 0x70
 80098fe:	d01a      	beq.n	8009936 <HAL_TIM_ConfigClockSource+0xa6>
 8009900:	2b70      	cmp	r3, #112	@ 0x70
 8009902:	d87b      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 8009904:	2b60      	cmp	r3, #96	@ 0x60
 8009906:	d050      	beq.n	80099aa <HAL_TIM_ConfigClockSource+0x11a>
 8009908:	2b60      	cmp	r3, #96	@ 0x60
 800990a:	d877      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 800990c:	2b50      	cmp	r3, #80	@ 0x50
 800990e:	d03c      	beq.n	800998a <HAL_TIM_ConfigClockSource+0xfa>
 8009910:	2b50      	cmp	r3, #80	@ 0x50
 8009912:	d873      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 8009914:	2b40      	cmp	r3, #64	@ 0x40
 8009916:	d058      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0x13a>
 8009918:	2b40      	cmp	r3, #64	@ 0x40
 800991a:	d86f      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 800991c:	2b30      	cmp	r3, #48	@ 0x30
 800991e:	d064      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009920:	2b30      	cmp	r3, #48	@ 0x30
 8009922:	d86b      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 8009924:	2b20      	cmp	r3, #32
 8009926:	d060      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009928:	2b20      	cmp	r3, #32
 800992a:	d867      	bhi.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d05c      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009930:	2b10      	cmp	r3, #16
 8009932:	d05a      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x15a>
 8009934:	e062      	b.n	80099fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009946:	f000 f9b9 	bl	8009cbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	609a      	str	r2, [r3, #8]
      break;
 8009962:	e04f      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009974:	f000 f9a2 	bl	8009cbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689a      	ldr	r2, [r3, #8]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009986:	609a      	str	r2, [r3, #8]
      break;
 8009988:	e03c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009996:	461a      	mov	r2, r3
 8009998:	f000 f916 	bl	8009bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2150      	movs	r1, #80	@ 0x50
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 f96f 	bl	8009c86 <TIM_ITRx_SetConfig>
      break;
 80099a8:	e02c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099b6:	461a      	mov	r2, r3
 80099b8:	f000 f935 	bl	8009c26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2160      	movs	r1, #96	@ 0x60
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f95f 	bl	8009c86 <TIM_ITRx_SetConfig>
      break;
 80099c8:	e01c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099d6:	461a      	mov	r2, r3
 80099d8:	f000 f8f6 	bl	8009bc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2140      	movs	r1, #64	@ 0x40
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f94f 	bl	8009c86 <TIM_ITRx_SetConfig>
      break;
 80099e8:	e00c      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4619      	mov	r1, r3
 80099f4:	4610      	mov	r0, r2
 80099f6:	f000 f946 	bl	8009c86 <TIM_ITRx_SetConfig>
      break;
 80099fa:	e003      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009a00:	e000      	b.n	8009a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a26:	bf00      	nop
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a62:	bf00      	nop
 8009a64:	370c      	adds	r7, #12
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
	...

08009a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a46      	ldr	r2, [pc, #280]	@ (8009b9c <TIM_Base_SetConfig+0x12c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d013      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a8e:	d00f      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a43      	ldr	r2, [pc, #268]	@ (8009ba0 <TIM_Base_SetConfig+0x130>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d00b      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a42      	ldr	r2, [pc, #264]	@ (8009ba4 <TIM_Base_SetConfig+0x134>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d007      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a41      	ldr	r2, [pc, #260]	@ (8009ba8 <TIM_Base_SetConfig+0x138>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d003      	beq.n	8009ab0 <TIM_Base_SetConfig+0x40>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a40      	ldr	r2, [pc, #256]	@ (8009bac <TIM_Base_SetConfig+0x13c>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d108      	bne.n	8009ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a35      	ldr	r2, [pc, #212]	@ (8009b9c <TIM_Base_SetConfig+0x12c>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d02b      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ad0:	d027      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a32      	ldr	r2, [pc, #200]	@ (8009ba0 <TIM_Base_SetConfig+0x130>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d023      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a31      	ldr	r2, [pc, #196]	@ (8009ba4 <TIM_Base_SetConfig+0x134>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d01f      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a30      	ldr	r2, [pc, #192]	@ (8009ba8 <TIM_Base_SetConfig+0x138>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d01b      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a2f      	ldr	r2, [pc, #188]	@ (8009bac <TIM_Base_SetConfig+0x13c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d017      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a2e      	ldr	r2, [pc, #184]	@ (8009bb0 <TIM_Base_SetConfig+0x140>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d013      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a2d      	ldr	r2, [pc, #180]	@ (8009bb4 <TIM_Base_SetConfig+0x144>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d00f      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a2c      	ldr	r2, [pc, #176]	@ (8009bb8 <TIM_Base_SetConfig+0x148>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00b      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8009bbc <TIM_Base_SetConfig+0x14c>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d007      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a2a      	ldr	r2, [pc, #168]	@ (8009bc0 <TIM_Base_SetConfig+0x150>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d003      	beq.n	8009b22 <TIM_Base_SetConfig+0xb2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a29      	ldr	r2, [pc, #164]	@ (8009bc4 <TIM_Base_SetConfig+0x154>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d108      	bne.n	8009b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	689a      	ldr	r2, [r3, #8]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a10      	ldr	r2, [pc, #64]	@ (8009b9c <TIM_Base_SetConfig+0x12c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d003      	beq.n	8009b68 <TIM_Base_SetConfig+0xf8>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a12      	ldr	r2, [pc, #72]	@ (8009bac <TIM_Base_SetConfig+0x13c>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d103      	bne.n	8009b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	691a      	ldr	r2, [r3, #16]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d105      	bne.n	8009b8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	f023 0201 	bic.w	r2, r3, #1
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	611a      	str	r2, [r3, #16]
  }
}
 8009b8e:	bf00      	nop
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40000400 	.word	0x40000400
 8009ba4:	40000800 	.word	0x40000800
 8009ba8:	40000c00 	.word	0x40000c00
 8009bac:	40010400 	.word	0x40010400
 8009bb0:	40014000 	.word	0x40014000
 8009bb4:	40014400 	.word	0x40014400
 8009bb8:	40014800 	.word	0x40014800
 8009bbc:	40001800 	.word	0x40001800
 8009bc0:	40001c00 	.word	0x40001c00
 8009bc4:	40002000 	.word	0x40002000

08009bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6a1b      	ldr	r3, [r3, #32]
 8009bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	f023 0201 	bic.w	r2, r3, #1
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f023 030a 	bic.w	r3, r3, #10
 8009c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	621a      	str	r2, [r3, #32]
}
 8009c1a:	bf00      	nop
 8009c1c:	371c      	adds	r7, #28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b087      	sub	sp, #28
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	f023 0210 	bic.w	r2, r3, #16
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009c50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	031b      	lsls	r3, r3, #12
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009c62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	011b      	lsls	r3, r3, #4
 8009c68:	697a      	ldr	r2, [r7, #20]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	621a      	str	r2, [r3, #32]
}
 8009c7a:	bf00      	nop
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b085      	sub	sp, #20
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	f043 0307 	orr.w	r3, r3, #7
 8009ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	609a      	str	r2, [r3, #8]
}
 8009cb0:	bf00      	nop
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	021a      	lsls	r2, r3, #8
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	431a      	orrs	r2, r3
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	609a      	str	r2, [r3, #8]
}
 8009cf0:	bf00      	nop
 8009cf2:	371c      	adds	r7, #28
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d101      	bne.n	8009d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d10:	2302      	movs	r3, #2
 8009d12:	e05a      	b.n	8009dca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a21      	ldr	r2, [pc, #132]	@ (8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d022      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d60:	d01d      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a1d      	ldr	r2, [pc, #116]	@ (8009ddc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d018      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a1b      	ldr	r2, [pc, #108]	@ (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d013      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d00e      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a18      	ldr	r2, [pc, #96]	@ (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d009      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a17      	ldr	r2, [pc, #92]	@ (8009dec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d004      	beq.n	8009d9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a15      	ldr	r2, [pc, #84]	@ (8009df0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d10c      	bne.n	8009db8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	68ba      	ldr	r2, [r7, #8]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	40010000 	.word	0x40010000
 8009ddc:	40000400 	.word	0x40000400
 8009de0:	40000800 	.word	0x40000800
 8009de4:	40000c00 	.word	0x40000c00
 8009de8:	40010400 	.word	0x40010400
 8009dec:	40014000 	.word	0x40014000
 8009df0:	40001800 	.word	0x40001800

08009df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e042      	b.n	8009eb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d106      	bne.n	8009e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7f7 fe5a 	bl	8001afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2224      	movs	r2, #36	@ 0x24
 8009e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	68da      	ldr	r2, [r3, #12]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009e5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 f85b 	bl	800af1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	691a      	ldr	r2, [r3, #16]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	695a      	ldr	r2, [r3, #20]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68da      	ldr	r2, [r3, #12]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2220      	movs	r2, #32
 8009ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08a      	sub	sp, #40	@ 0x28
 8009ec0:	af02      	add	r7, sp, #8
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	603b      	str	r3, [r7, #0]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	d175      	bne.n	8009fc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <HAL_UART_Transmit+0x2c>
 8009ee2:	88fb      	ldrh	r3, [r7, #6]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d101      	bne.n	8009eec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e06e      	b.n	8009fca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2221      	movs	r2, #33	@ 0x21
 8009ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009efa:	f7f8 f99f 	bl	800223c <HAL_GetTick>
 8009efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	88fa      	ldrh	r2, [r7, #6]
 8009f04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	88fa      	ldrh	r2, [r7, #6]
 8009f0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f14:	d108      	bne.n	8009f28 <HAL_UART_Transmit+0x6c>
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d104      	bne.n	8009f28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	61bb      	str	r3, [r7, #24]
 8009f26:	e003      	b.n	8009f30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f30:	e02e      	b.n	8009f90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	2180      	movs	r1, #128	@ 0x80
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 fd34 	bl	800a9aa <UART_WaitOnFlagUntilTimeout>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2220      	movs	r2, #32
 8009f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e03a      	b.n	8009fca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10b      	bne.n	8009f72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	3302      	adds	r3, #2
 8009f6e:	61bb      	str	r3, [r7, #24]
 8009f70:	e007      	b.n	8009f82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	781a      	ldrb	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1cb      	bne.n	8009f32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2140      	movs	r1, #64	@ 0x40
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 fd00 	bl	800a9aa <UART_WaitOnFlagUntilTimeout>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d005      	beq.n	8009fbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e006      	b.n	8009fca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2220      	movs	r2, #32
 8009fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e000      	b.n	8009fca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009fc8:	2302      	movs	r3, #2
  }
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3720      	adds	r7, #32
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08c      	sub	sp, #48	@ 0x30
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b20      	cmp	r3, #32
 8009fec:	d156      	bne.n	800a09c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <HAL_UART_Transmit_DMA+0x26>
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e04f      	b.n	800a09e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	88fa      	ldrh	r2, [r7, #6]
 800a008:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	88fa      	ldrh	r2, [r7, #6]
 800a00e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2221      	movs	r2, #33	@ 0x21
 800a01a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a022:	4a21      	ldr	r2, [pc, #132]	@ (800a0a8 <HAL_UART_Transmit_DMA+0xd4>)
 800a024:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a02a:	4a20      	ldr	r2, [pc, #128]	@ (800a0ac <HAL_UART_Transmit_DMA+0xd8>)
 800a02c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a032:	4a1f      	ldr	r2, [pc, #124]	@ (800a0b0 <HAL_UART_Transmit_DMA+0xdc>)
 800a034:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a03a:	2200      	movs	r2, #0
 800a03c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a03e:	f107 0308 	add.w	r3, r7, #8
 800a042:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04a:	6819      	ldr	r1, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3304      	adds	r3, #4
 800a052:	461a      	mov	r2, r3
 800a054:	88fb      	ldrh	r3, [r7, #6]
 800a056:	f7f8 facd 	bl	80025f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a062:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3314      	adds	r3, #20
 800a06a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	e853 3f00 	ldrex	r3, [r3]
 800a072:	617b      	str	r3, [r7, #20]
   return(result);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a07a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3314      	adds	r3, #20
 800a082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a084:	627a      	str	r2, [r7, #36]	@ 0x24
 800a086:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	6a39      	ldr	r1, [r7, #32]
 800a08a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	61fb      	str	r3, [r7, #28]
   return(result);
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e5      	bne.n	800a064 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	e000      	b.n	800a09e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a09c:	2302      	movs	r3, #2
  }
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3730      	adds	r7, #48	@ 0x30
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	0800a6f9 	.word	0x0800a6f9
 800a0ac:	0800a793 	.word	0x0800a793
 800a0b0:	0800a917 	.word	0x0800a917

0800a0b4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b08c      	sub	sp, #48	@ 0x30
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d14a      	bne.n	800a164 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a0d4:	88fb      	ldrh	r3, [r7, #6]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e043      	b.n	800a166 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a0ea:	88fb      	ldrh	r3, [r7, #6]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f000 fcb3 	bl	800aa5c <UART_Start_Receive_DMA>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a0fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a100:	2b00      	cmp	r3, #0
 800a102:	d12c      	bne.n	800a15e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d125      	bne.n	800a158 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a10c:	2300      	movs	r3, #0
 800a10e:	613b      	str	r3, [r7, #16]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	613b      	str	r3, [r7, #16]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	613b      	str	r3, [r7, #16]
 800a120:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	330c      	adds	r3, #12
 800a128:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	e853 3f00 	ldrex	r3, [r3]
 800a130:	617b      	str	r3, [r7, #20]
   return(result);
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f043 0310 	orr.w	r3, r3, #16
 800a138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	330c      	adds	r3, #12
 800a140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a142:	627a      	str	r2, [r7, #36]	@ 0x24
 800a144:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a146:	6a39      	ldr	r1, [r7, #32]
 800a148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a14a:	e841 2300 	strex	r3, r2, [r1]
 800a14e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1e5      	bne.n	800a122 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800a156:	e002      	b.n	800a15e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a15e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a162:	e000      	b.n	800a166 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800a164:	2302      	movs	r3, #2
  }
}
 800a166:	4618      	mov	r0, r3
 800a168:	3730      	adds	r7, #48	@ 0x30
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b0ba      	sub	sp, #232	@ 0xe8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a196:	2300      	movs	r3, #0
 800a198:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a19c:	2300      	movs	r3, #0
 800a19e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a1ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d10f      	bne.n	800a1d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1ba:	f003 0320 	and.w	r3, r3, #32
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d009      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x66>
 800a1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c6:	f003 0320 	and.w	r3, r3, #32
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fde5 	bl	800ad9e <UART_Receive_IT>
      return;
 800a1d4:	e25b      	b.n	800a68e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a1d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 80de 	beq.w	800a39c <HAL_UART_IRQHandler+0x22c>
 800a1e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d106      	bne.n	800a1fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 80d1 	beq.w	800a39c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00b      	beq.n	800a21e <HAL_UART_IRQHandler+0xae>
 800a206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a20a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d005      	beq.n	800a21e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a216:	f043 0201 	orr.w	r2, r3, #1
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a222:	f003 0304 	and.w	r3, r3, #4
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00b      	beq.n	800a242 <HAL_UART_IRQHandler+0xd2>
 800a22a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	d005      	beq.n	800a242 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a23a:	f043 0202 	orr.w	r2, r3, #2
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00b      	beq.n	800a266 <HAL_UART_IRQHandler+0xf6>
 800a24e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a252:	f003 0301 	and.w	r3, r3, #1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a25e:	f043 0204 	orr.w	r2, r3, #4
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a26a:	f003 0308 	and.w	r3, r3, #8
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d011      	beq.n	800a296 <HAL_UART_IRQHandler+0x126>
 800a272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a276:	f003 0320 	and.w	r3, r3, #32
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d105      	bne.n	800a28a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a27e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	2b00      	cmp	r3, #0
 800a288:	d005      	beq.n	800a296 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a28e:	f043 0208 	orr.w	r2, r3, #8
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f000 81f2 	beq.w	800a684 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2a4:	f003 0320 	and.w	r3, r3, #32
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d008      	beq.n	800a2be <HAL_UART_IRQHandler+0x14e>
 800a2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2b0:	f003 0320 	and.w	r3, r3, #32
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fd70 	bl	800ad9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2c8:	2b40      	cmp	r3, #64	@ 0x40
 800a2ca:	bf0c      	ite	eq
 800a2cc:	2301      	moveq	r3, #1
 800a2ce:	2300      	movne	r3, #0
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2da:	f003 0308 	and.w	r3, r3, #8
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d103      	bne.n	800a2ea <HAL_UART_IRQHandler+0x17a>
 800a2e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d04f      	beq.n	800a38a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fc78 	bl	800abe0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2fa:	2b40      	cmp	r3, #64	@ 0x40
 800a2fc:	d141      	bne.n	800a382 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3314      	adds	r3, #20
 800a304:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a308:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a30c:	e853 3f00 	ldrex	r3, [r3]
 800a310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a314:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a31c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3314      	adds	r3, #20
 800a326:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a32a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a32e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a336:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a33a:	e841 2300 	strex	r3, r2, [r1]
 800a33e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a342:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1d9      	bne.n	800a2fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d013      	beq.n	800a37a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a356:	4a7e      	ldr	r2, [pc, #504]	@ (800a550 <HAL_UART_IRQHandler+0x3e0>)
 800a358:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a35e:	4618      	mov	r0, r3
 800a360:	f7f8 fa10 	bl	8002784 <HAL_DMA_Abort_IT>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d016      	beq.n	800a398 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a36e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a374:	4610      	mov	r0, r2
 800a376:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a378:	e00e      	b.n	800a398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f9b2 	bl	800a6e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a380:	e00a      	b.n	800a398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f9ae 	bl	800a6e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a388:	e006      	b.n	800a398 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f9aa 	bl	800a6e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a396:	e175      	b.n	800a684 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a398:	bf00      	nop
    return;
 800a39a:	e173      	b.n	800a684 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	f040 814f 	bne.w	800a644 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a3a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3aa:	f003 0310 	and.w	r3, r3, #16
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 8148 	beq.w	800a644 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3b8:	f003 0310 	and.w	r3, r3, #16
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8141 	beq.w	800a644 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60bb      	str	r3, [r7, #8]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	60bb      	str	r3, [r7, #8]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	60bb      	str	r3, [r7, #8]
 800a3d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3e2:	2b40      	cmp	r3, #64	@ 0x40
 800a3e4:	f040 80b6 	bne.w	800a554 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 8145 	beq.w	800a688 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a406:	429a      	cmp	r2, r3
 800a408:	f080 813e 	bcs.w	800a688 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a412:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a41e:	f000 8088 	beq.w	800a532 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	330c      	adds	r3, #12
 800a428:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a438:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a43c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a440:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	330c      	adds	r3, #12
 800a44a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a44e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a456:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a45a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a45e:	e841 2300 	strex	r3, r2, [r1]
 800a462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1d9      	bne.n	800a422 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3314      	adds	r3, #20
 800a474:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a476:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a478:	e853 3f00 	ldrex	r3, [r3]
 800a47c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a47e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a480:	f023 0301 	bic.w	r3, r3, #1
 800a484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	3314      	adds	r3, #20
 800a48e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a492:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a496:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a498:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a49a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a49e:	e841 2300 	strex	r3, r2, [r1]
 800a4a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a4a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d1e1      	bne.n	800a46e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3314      	adds	r3, #20
 800a4b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4b4:	e853 3f00 	ldrex	r3, [r3]
 800a4b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a4ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3314      	adds	r3, #20
 800a4ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a4ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a4d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a4d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a4dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e3      	bne.n	800a4aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2220      	movs	r2, #32
 800a4e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	330c      	adds	r3, #12
 800a4f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4fa:	e853 3f00 	ldrex	r3, [r3]
 800a4fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a502:	f023 0310 	bic.w	r3, r3, #16
 800a506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	330c      	adds	r3, #12
 800a510:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a514:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a516:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a518:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a51a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a51c:	e841 2300 	strex	r3, r2, [r1]
 800a520:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1e3      	bne.n	800a4f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7f8 f8b9 	bl	80026a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2202      	movs	r2, #2
 800a536:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a540:	b29b      	uxth	r3, r3
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	b29b      	uxth	r3, r3
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7f6 f91d 	bl	8000788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a54e:	e09b      	b.n	800a688 <HAL_UART_IRQHandler+0x518>
 800a550:	0800aca7 	.word	0x0800aca7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a568:	b29b      	uxth	r3, r3
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 808e 	beq.w	800a68c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 8089 	beq.w	800a68c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	330c      	adds	r3, #12
 800a580:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a584:	e853 3f00 	ldrex	r3, [r3]
 800a588:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a58c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a590:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	330c      	adds	r3, #12
 800a59a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a59e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a5a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5a6:	e841 2300 	strex	r3, r2, [r1]
 800a5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1e3      	bne.n	800a57a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3314      	adds	r3, #20
 800a5b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a5c2:	6a3b      	ldr	r3, [r7, #32]
 800a5c4:	f023 0301 	bic.w	r3, r3, #1
 800a5c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3314      	adds	r3, #20
 800a5d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a5d6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5de:	e841 2300 	strex	r3, r2, [r1]
 800a5e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1e3      	bne.n	800a5b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2220      	movs	r2, #32
 800a5ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	330c      	adds	r3, #12
 800a5fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	e853 3f00 	ldrex	r3, [r3]
 800a606:	60fb      	str	r3, [r7, #12]
   return(result);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f023 0310 	bic.w	r3, r3, #16
 800a60e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	330c      	adds	r3, #12
 800a618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a61c:	61fa      	str	r2, [r7, #28]
 800a61e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a620:	69b9      	ldr	r1, [r7, #24]
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	e841 2300 	strex	r3, r2, [r1]
 800a628:	617b      	str	r3, [r7, #20]
   return(result);
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e3      	bne.n	800a5f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2202      	movs	r2, #2
 800a634:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a636:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7f6 f8a3 	bl	8000788 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a642:	e023      	b.n	800a68c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d009      	beq.n	800a664 <HAL_UART_IRQHandler+0x4f4>
 800a650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fb36 	bl	800acce <UART_Transmit_IT>
    return;
 800a662:	e014      	b.n	800a68e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00e      	beq.n	800a68e <HAL_UART_IRQHandler+0x51e>
 800a670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d008      	beq.n	800a68e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fb76 	bl	800ad6e <UART_EndTransmit_IT>
    return;
 800a682:	e004      	b.n	800a68e <HAL_UART_IRQHandler+0x51e>
    return;
 800a684:	bf00      	nop
 800a686:	e002      	b.n	800a68e <HAL_UART_IRQHandler+0x51e>
      return;
 800a688:	bf00      	nop
 800a68a:	e000      	b.n	800a68e <HAL_UART_IRQHandler+0x51e>
      return;
 800a68c:	bf00      	nop
  }
}
 800a68e:	37e8      	adds	r7, #232	@ 0xe8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b090      	sub	sp, #64	@ 0x40
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a710:	2b00      	cmp	r3, #0
 800a712:	d137      	bne.n	800a784 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a716:	2200      	movs	r2, #0
 800a718:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	3314      	adds	r3, #20
 800a720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	623b      	str	r3, [r7, #32]
   return(result);
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a730:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3314      	adds	r3, #20
 800a738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a73a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a73c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e5      	bne.n	800a71a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	330c      	adds	r3, #12
 800a754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	e853 3f00 	ldrex	r3, [r3]
 800a75c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a764:	637b      	str	r3, [r7, #52]	@ 0x34
 800a766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	330c      	adds	r3, #12
 800a76c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a76e:	61fa      	str	r2, [r7, #28]
 800a770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	69b9      	ldr	r1, [r7, #24]
 800a774:	69fa      	ldr	r2, [r7, #28]
 800a776:	e841 2300 	strex	r3, r2, [r1]
 800a77a:	617b      	str	r3, [r7, #20]
   return(result);
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1e5      	bne.n	800a74e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a782:	e002      	b.n	800a78a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a784:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a786:	f7ff ff85 	bl	800a694 <HAL_UART_TxCpltCallback>
}
 800a78a:	bf00      	nop
 800a78c:	3740      	adds	r7, #64	@ 0x40
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}

0800a792 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a79e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f7ff ff81 	bl	800a6a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a7a6:	bf00      	nop
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b09c      	sub	sp, #112	@ 0x70
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d172      	bne.n	800a8b0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a7ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7da:	e853 3f00 	ldrex	r3, [r3]
 800a7de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	330c      	adds	r3, #12
 800a7ee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a7f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a7f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7f8:	e841 2300 	strex	r3, r2, [r1]
 800a7fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1e5      	bne.n	800a7d0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	3314      	adds	r3, #20
 800a80a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80e:	e853 3f00 	ldrex	r3, [r3]
 800a812:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a816:	f023 0301 	bic.w	r3, r3, #1
 800a81a:	667b      	str	r3, [r7, #100]	@ 0x64
 800a81c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3314      	adds	r3, #20
 800a822:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a824:	647a      	str	r2, [r7, #68]	@ 0x44
 800a826:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a828:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a82a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a82c:	e841 2300 	strex	r3, r2, [r1]
 800a830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1e5      	bne.n	800a804 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3314      	adds	r3, #20
 800a83e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	623b      	str	r3, [r7, #32]
   return(result);
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a84e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a850:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3314      	adds	r3, #20
 800a856:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a858:	633a      	str	r2, [r7, #48]	@ 0x30
 800a85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a85e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a860:	e841 2300 	strex	r3, r2, [r1]
 800a864:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e5      	bne.n	800a838 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a86c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a86e:	2220      	movs	r2, #32
 800a870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a874:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d119      	bne.n	800a8b0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a87c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	330c      	adds	r3, #12
 800a882:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	e853 3f00 	ldrex	r3, [r3]
 800a88a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0310 	bic.w	r3, r3, #16
 800a892:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	330c      	adds	r3, #12
 800a89a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a89c:	61fa      	str	r2, [r7, #28]
 800a89e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a0:	69b9      	ldr	r1, [r7, #24]
 800a8a2:	69fa      	ldr	r2, [r7, #28]
 800a8a4:	e841 2300 	strex	r3, r2, [r1]
 800a8a8:	617b      	str	r3, [r7, #20]
   return(result);
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d1e5      	bne.n	800a87c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a8b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d106      	bne.n	800a8cc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8c6:	f7f5 ff5f 	bl	8000788 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8ca:	e002      	b.n	800a8d2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a8cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8ce:	f7ff fef5 	bl	800a6bc <HAL_UART_RxCpltCallback>
}
 800a8d2:	bf00      	nop
 800a8d4:	3770      	adds	r7, #112	@ 0x70
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d108      	bne.n	800a908 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a8fa:	085b      	lsrs	r3, r3, #1
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	4619      	mov	r1, r3
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f7f5 ff41 	bl	8000788 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a906:	e002      	b.n	800a90e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7ff fee1 	bl	800a6d0 <HAL_UART_RxHalfCpltCallback>
}
 800a90e:	bf00      	nop
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b084      	sub	sp, #16
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a91e:	2300      	movs	r3, #0
 800a920:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a926:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a932:	2b80      	cmp	r3, #128	@ 0x80
 800a934:	bf0c      	ite	eq
 800a936:	2301      	moveq	r3, #1
 800a938:	2300      	movne	r3, #0
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b21      	cmp	r3, #33	@ 0x21
 800a948:	d108      	bne.n	800a95c <UART_DMAError+0x46>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d005      	beq.n	800a95c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	2200      	movs	r2, #0
 800a954:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a956:	68b8      	ldr	r0, [r7, #8]
 800a958:	f000 f91a 	bl	800ab90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a966:	2b40      	cmp	r3, #64	@ 0x40
 800a968:	bf0c      	ite	eq
 800a96a:	2301      	moveq	r3, #1
 800a96c:	2300      	movne	r3, #0
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b22      	cmp	r3, #34	@ 0x22
 800a97c:	d108      	bne.n	800a990 <UART_DMAError+0x7a>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d005      	beq.n	800a990 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2200      	movs	r2, #0
 800a988:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a98a:	68b8      	ldr	r0, [r7, #8]
 800a98c:	f000 f928 	bl	800abe0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a994:	f043 0210 	orr.w	r2, r3, #16
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a99c:	68b8      	ldr	r0, [r7, #8]
 800a99e:	f7ff fea1 	bl	800a6e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9a2:	bf00      	nop
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b086      	sub	sp, #24
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	60f8      	str	r0, [r7, #12]
 800a9b2:	60b9      	str	r1, [r7, #8]
 800a9b4:	603b      	str	r3, [r7, #0]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ba:	e03b      	b.n	800aa34 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c2:	d037      	beq.n	800aa34 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9c4:	f7f7 fc3a 	bl	800223c <HAL_GetTick>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	6a3a      	ldr	r2, [r7, #32]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d302      	bcc.n	800a9da <UART_WaitOnFlagUntilTimeout+0x30>
 800a9d4:	6a3b      	ldr	r3, [r7, #32]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e03a      	b.n	800aa54 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0304 	and.w	r3, r3, #4
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d023      	beq.n	800aa34 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b80      	cmp	r3, #128	@ 0x80
 800a9f0:	d020      	beq.n	800aa34 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b40      	cmp	r3, #64	@ 0x40
 800a9f6:	d01d      	beq.n	800aa34 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f003 0308 	and.w	r3, r3, #8
 800aa02:	2b08      	cmp	r3, #8
 800aa04:	d116      	bne.n	800aa34 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800aa06:	2300      	movs	r3, #0
 800aa08:	617b      	str	r3, [r7, #20]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	617b      	str	r3, [r7, #20]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	617b      	str	r3, [r7, #20]
 800aa1a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f8df 	bl	800abe0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2208      	movs	r2, #8
 800aa26:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e00f      	b.n	800aa54 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	bf0c      	ite	eq
 800aa44:	2301      	moveq	r3, #1
 800aa46:	2300      	movne	r3, #0
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	79fb      	ldrb	r3, [r7, #7]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d0b4      	beq.n	800a9bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3718      	adds	r7, #24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b098      	sub	sp, #96	@ 0x60
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	4613      	mov	r3, r2
 800aa68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	88fa      	ldrh	r2, [r7, #6]
 800aa74:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2222      	movs	r2, #34	@ 0x22
 800aa80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa88:	4a3e      	ldr	r2, [pc, #248]	@ (800ab84 <UART_Start_Receive_DMA+0x128>)
 800aa8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa90:	4a3d      	ldr	r2, [pc, #244]	@ (800ab88 <UART_Start_Receive_DMA+0x12c>)
 800aa92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa98:	4a3c      	ldr	r2, [pc, #240]	@ (800ab8c <UART_Start_Receive_DMA+0x130>)
 800aa9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800aaa4:	f107 0308 	add.w	r3, r7, #8
 800aaa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3304      	adds	r3, #4
 800aab4:	4619      	mov	r1, r3
 800aab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	88fb      	ldrh	r3, [r7, #6]
 800aabc:	f7f7 fd9a 	bl	80025f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800aac0:	2300      	movs	r3, #0
 800aac2:	613b      	str	r3, [r7, #16]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	613b      	str	r3, [r7, #16]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	613b      	str	r3, [r7, #16]
 800aad4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d019      	beq.n	800ab12 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	330c      	adds	r3, #12
 800aae4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae8:	e853 3f00 	ldrex	r3, [r3]
 800aaec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aaf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	330c      	adds	r3, #12
 800aafc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aafe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ab00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ab04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab06:	e841 2300 	strex	r3, r2, [r1]
 800ab0a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ab0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1e5      	bne.n	800aade <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3314      	adds	r3, #20
 800ab18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1c:	e853 3f00 	ldrex	r3, [r3]
 800ab20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab24:	f043 0301 	orr.w	r3, r3, #1
 800ab28:	657b      	str	r3, [r7, #84]	@ 0x54
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3314      	adds	r3, #20
 800ab30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ab32:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ab34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ab38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab3a:	e841 2300 	strex	r3, r2, [r1]
 800ab3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1e5      	bne.n	800ab12 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3314      	adds	r3, #20
 800ab4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	e853 3f00 	ldrex	r3, [r3]
 800ab54:	617b      	str	r3, [r7, #20]
   return(result);
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab5c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3314      	adds	r3, #20
 800ab64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ab66:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6a39      	ldr	r1, [r7, #32]
 800ab6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e5      	bne.n	800ab46 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3760      	adds	r7, #96	@ 0x60
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	0800a7af 	.word	0x0800a7af
 800ab88:	0800a8db 	.word	0x0800a8db
 800ab8c:	0800a917 	.word	0x0800a917

0800ab90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b089      	sub	sp, #36	@ 0x24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	330c      	adds	r3, #12
 800ab9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	e853 3f00 	ldrex	r3, [r3]
 800aba6:	60bb      	str	r3, [r7, #8]
   return(result);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800abae:	61fb      	str	r3, [r7, #28]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	330c      	adds	r3, #12
 800abb6:	69fa      	ldr	r2, [r7, #28]
 800abb8:	61ba      	str	r2, [r7, #24]
 800abba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbc:	6979      	ldr	r1, [r7, #20]
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	e841 2300 	strex	r3, r2, [r1]
 800abc4:	613b      	str	r3, [r7, #16]
   return(result);
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e5      	bne.n	800ab98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2220      	movs	r2, #32
 800abd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800abd4:	bf00      	nop
 800abd6:	3724      	adds	r7, #36	@ 0x24
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b095      	sub	sp, #84	@ 0x54
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	330c      	adds	r3, #12
 800abee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abf2:	e853 3f00 	ldrex	r3, [r3]
 800abf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800abf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	330c      	adds	r3, #12
 800ac06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ac08:	643a      	str	r2, [r7, #64]	@ 0x40
 800ac0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ac0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ac10:	e841 2300 	strex	r3, r2, [r1]
 800ac14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ac16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1e5      	bne.n	800abe8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	3314      	adds	r3, #20
 800ac22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	e853 3f00 	ldrex	r3, [r3]
 800ac2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	f023 0301 	bic.w	r3, r3, #1
 800ac32:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3314      	adds	r3, #20
 800ac3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ac3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ac44:	e841 2300 	strex	r3, r2, [r1]
 800ac48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1e5      	bne.n	800ac1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d119      	bne.n	800ac8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	330c      	adds	r3, #12
 800ac5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	e853 3f00 	ldrex	r3, [r3]
 800ac66:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	f023 0310 	bic.w	r3, r3, #16
 800ac6e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	330c      	adds	r3, #12
 800ac76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac78:	61ba      	str	r2, [r7, #24]
 800ac7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7c:	6979      	ldr	r1, [r7, #20]
 800ac7e:	69ba      	ldr	r2, [r7, #24]
 800ac80:	e841 2300 	strex	r3, r2, [r1]
 800ac84:	613b      	str	r3, [r7, #16]
   return(result);
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e5      	bne.n	800ac58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2220      	movs	r2, #32
 800ac90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ac9a:	bf00      	nop
 800ac9c:	3754      	adds	r7, #84	@ 0x54
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff fd0f 	bl	800a6e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800acce:	b480      	push	{r7}
 800acd0:	b085      	sub	sp, #20
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b21      	cmp	r3, #33	@ 0x21
 800ace0:	d13e      	bne.n	800ad60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acea:	d114      	bne.n	800ad16 <UART_Transmit_IT+0x48>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d110      	bne.n	800ad16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	1c9a      	adds	r2, r3, #2
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	621a      	str	r2, [r3, #32]
 800ad14:	e008      	b.n	800ad28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	1c59      	adds	r1, r3, #1
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	6211      	str	r1, [r2, #32]
 800ad20:	781a      	ldrb	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	4619      	mov	r1, r3
 800ad36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10f      	bne.n	800ad5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68da      	ldr	r2, [r3, #12]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	68da      	ldr	r2, [r3, #12]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	e000      	b.n	800ad62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ad60:	2302      	movs	r3, #2
  }
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68da      	ldr	r2, [r3, #12]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2220      	movs	r2, #32
 800ad8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f7ff fc80 	bl	800a694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b08c      	sub	sp, #48	@ 0x30
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b22      	cmp	r3, #34	@ 0x22
 800adb0:	f040 80ae 	bne.w	800af10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adbc:	d117      	bne.n	800adee <UART_Receive_IT+0x50>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d113      	bne.n	800adee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	b29b      	uxth	r3, r3
 800add8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800addc:	b29a      	uxth	r2, r3
 800adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ade6:	1c9a      	adds	r2, r3, #2
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	629a      	str	r2, [r3, #40]	@ 0x28
 800adec:	e026      	b.n	800ae3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800adf4:	2300      	movs	r3, #0
 800adf6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	689b      	ldr	r3, [r3, #8]
 800adfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae00:	d007      	beq.n	800ae12 <UART_Receive_IT+0x74>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10a      	bne.n	800ae20 <UART_Receive_IT+0x82>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d106      	bne.n	800ae20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1c:	701a      	strb	r2, [r3, #0]
 800ae1e:	e008      	b.n	800ae32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae2c:	b2da      	uxtb	r2, r3
 800ae2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae36:	1c5a      	adds	r2, r3, #1
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	3b01      	subs	r3, #1
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d15d      	bne.n	800af0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68da      	ldr	r2, [r3, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f022 0220 	bic.w	r2, r2, #32
 800ae5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	68da      	ldr	r2, [r3, #12]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ae6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	695a      	ldr	r2, [r3, #20]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f022 0201 	bic.w	r2, r2, #1
 800ae7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2220      	movs	r2, #32
 800ae84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d135      	bne.n	800af02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	330c      	adds	r3, #12
 800aea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	e853 3f00 	ldrex	r3, [r3]
 800aeaa:	613b      	str	r3, [r7, #16]
   return(result);
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f023 0310 	bic.w	r3, r3, #16
 800aeb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	330c      	adds	r3, #12
 800aeba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aebc:	623a      	str	r2, [r7, #32]
 800aebe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	69f9      	ldr	r1, [r7, #28]
 800aec2:	6a3a      	ldr	r2, [r7, #32]
 800aec4:	e841 2300 	strex	r3, r2, [r1]
 800aec8:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeca:	69bb      	ldr	r3, [r7, #24]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e5      	bne.n	800ae9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0310 	and.w	r3, r3, #16
 800aeda:	2b10      	cmp	r3, #16
 800aedc:	d10a      	bne.n	800aef4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	60fb      	str	r3, [r7, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7f5 fc44 	bl	8000788 <HAL_UARTEx_RxEventCallback>
 800af00:	e002      	b.n	800af08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7ff fbda 	bl	800a6bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	e002      	b.n	800af12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e000      	b.n	800af12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800af10:	2302      	movs	r3, #2
  }
}
 800af12:	4618      	mov	r0, r3
 800af14:	3730      	adds	r7, #48	@ 0x30
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af20:	b0c0      	sub	sp, #256	@ 0x100
 800af22:	af00      	add	r7, sp, #0
 800af24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800af34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af38:	68d9      	ldr	r1, [r3, #12]
 800af3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	ea40 0301 	orr.w	r3, r0, r1
 800af44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af4a:	689a      	ldr	r2, [r3, #8]
 800af4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af50:	691b      	ldr	r3, [r3, #16]
 800af52:	431a      	orrs	r2, r3
 800af54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	431a      	orrs	r2, r3
 800af5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	4313      	orrs	r3, r2
 800af64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800af74:	f021 010c 	bic.w	r1, r1, #12
 800af78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800af82:	430b      	orrs	r3, r1
 800af84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800af92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af96:	6999      	ldr	r1, [r3, #24]
 800af98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	ea40 0301 	orr.w	r3, r0, r1
 800afa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	4b8f      	ldr	r3, [pc, #572]	@ (800b1e8 <UART_SetConfig+0x2cc>)
 800afac:	429a      	cmp	r2, r3
 800afae:	d005      	beq.n	800afbc <UART_SetConfig+0xa0>
 800afb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	4b8d      	ldr	r3, [pc, #564]	@ (800b1ec <UART_SetConfig+0x2d0>)
 800afb8:	429a      	cmp	r2, r3
 800afba:	d104      	bne.n	800afc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800afbc:	f7fc f93e 	bl	800723c <HAL_RCC_GetPCLK2Freq>
 800afc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800afc4:	e003      	b.n	800afce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800afc6:	f7fc f925 	bl	8007214 <HAL_RCC_GetPCLK1Freq>
 800afca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afd2:	69db      	ldr	r3, [r3, #28]
 800afd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800afd8:	f040 810c 	bne.w	800b1f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800afe0:	2200      	movs	r2, #0
 800afe2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800afe6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800afea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800afee:	4622      	mov	r2, r4
 800aff0:	462b      	mov	r3, r5
 800aff2:	1891      	adds	r1, r2, r2
 800aff4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aff6:	415b      	adcs	r3, r3
 800aff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800affa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800affe:	4621      	mov	r1, r4
 800b000:	eb12 0801 	adds.w	r8, r2, r1
 800b004:	4629      	mov	r1, r5
 800b006:	eb43 0901 	adc.w	r9, r3, r1
 800b00a:	f04f 0200 	mov.w	r2, #0
 800b00e:	f04f 0300 	mov.w	r3, #0
 800b012:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b016:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b01a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b01e:	4690      	mov	r8, r2
 800b020:	4699      	mov	r9, r3
 800b022:	4623      	mov	r3, r4
 800b024:	eb18 0303 	adds.w	r3, r8, r3
 800b028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b02c:	462b      	mov	r3, r5
 800b02e:	eb49 0303 	adc.w	r3, r9, r3
 800b032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b042:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b046:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b04a:	460b      	mov	r3, r1
 800b04c:	18db      	adds	r3, r3, r3
 800b04e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b050:	4613      	mov	r3, r2
 800b052:	eb42 0303 	adc.w	r3, r2, r3
 800b056:	657b      	str	r3, [r7, #84]	@ 0x54
 800b058:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b05c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b060:	f7f5 f926 	bl	80002b0 <__aeabi_uldivmod>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4b61      	ldr	r3, [pc, #388]	@ (800b1f0 <UART_SetConfig+0x2d4>)
 800b06a:	fba3 2302 	umull	r2, r3, r3, r2
 800b06e:	095b      	lsrs	r3, r3, #5
 800b070:	011c      	lsls	r4, r3, #4
 800b072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b076:	2200      	movs	r2, #0
 800b078:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b07c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b080:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b084:	4642      	mov	r2, r8
 800b086:	464b      	mov	r3, r9
 800b088:	1891      	adds	r1, r2, r2
 800b08a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b08c:	415b      	adcs	r3, r3
 800b08e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b090:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b094:	4641      	mov	r1, r8
 800b096:	eb12 0a01 	adds.w	sl, r2, r1
 800b09a:	4649      	mov	r1, r9
 800b09c:	eb43 0b01 	adc.w	fp, r3, r1
 800b0a0:	f04f 0200 	mov.w	r2, #0
 800b0a4:	f04f 0300 	mov.w	r3, #0
 800b0a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0b4:	4692      	mov	sl, r2
 800b0b6:	469b      	mov	fp, r3
 800b0b8:	4643      	mov	r3, r8
 800b0ba:	eb1a 0303 	adds.w	r3, sl, r3
 800b0be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b0c2:	464b      	mov	r3, r9
 800b0c4:	eb4b 0303 	adc.w	r3, fp, r3
 800b0c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b0dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	18db      	adds	r3, r3, r3
 800b0e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	eb42 0303 	adc.w	r3, r2, r3
 800b0ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b0f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b0f6:	f7f5 f8db 	bl	80002b0 <__aeabi_uldivmod>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	4611      	mov	r1, r2
 800b100:	4b3b      	ldr	r3, [pc, #236]	@ (800b1f0 <UART_SetConfig+0x2d4>)
 800b102:	fba3 2301 	umull	r2, r3, r3, r1
 800b106:	095b      	lsrs	r3, r3, #5
 800b108:	2264      	movs	r2, #100	@ 0x64
 800b10a:	fb02 f303 	mul.w	r3, r2, r3
 800b10e:	1acb      	subs	r3, r1, r3
 800b110:	00db      	lsls	r3, r3, #3
 800b112:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b116:	4b36      	ldr	r3, [pc, #216]	@ (800b1f0 <UART_SetConfig+0x2d4>)
 800b118:	fba3 2302 	umull	r2, r3, r3, r2
 800b11c:	095b      	lsrs	r3, r3, #5
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b124:	441c      	add	r4, r3
 800b126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b12a:	2200      	movs	r2, #0
 800b12c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b130:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b134:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b138:	4642      	mov	r2, r8
 800b13a:	464b      	mov	r3, r9
 800b13c:	1891      	adds	r1, r2, r2
 800b13e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b140:	415b      	adcs	r3, r3
 800b142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b148:	4641      	mov	r1, r8
 800b14a:	1851      	adds	r1, r2, r1
 800b14c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b14e:	4649      	mov	r1, r9
 800b150:	414b      	adcs	r3, r1
 800b152:	637b      	str	r3, [r7, #52]	@ 0x34
 800b154:	f04f 0200 	mov.w	r2, #0
 800b158:	f04f 0300 	mov.w	r3, #0
 800b15c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b160:	4659      	mov	r1, fp
 800b162:	00cb      	lsls	r3, r1, #3
 800b164:	4651      	mov	r1, sl
 800b166:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b16a:	4651      	mov	r1, sl
 800b16c:	00ca      	lsls	r2, r1, #3
 800b16e:	4610      	mov	r0, r2
 800b170:	4619      	mov	r1, r3
 800b172:	4603      	mov	r3, r0
 800b174:	4642      	mov	r2, r8
 800b176:	189b      	adds	r3, r3, r2
 800b178:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b17c:	464b      	mov	r3, r9
 800b17e:	460a      	mov	r2, r1
 800b180:	eb42 0303 	adc.w	r3, r2, r3
 800b184:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b194:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b198:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b19c:	460b      	mov	r3, r1
 800b19e:	18db      	adds	r3, r3, r3
 800b1a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	eb42 0303 	adc.w	r3, r2, r3
 800b1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b1ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b1b2:	f7f5 f87d 	bl	80002b0 <__aeabi_uldivmod>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f0 <UART_SetConfig+0x2d4>)
 800b1bc:	fba3 1302 	umull	r1, r3, r3, r2
 800b1c0:	095b      	lsrs	r3, r3, #5
 800b1c2:	2164      	movs	r1, #100	@ 0x64
 800b1c4:	fb01 f303 	mul.w	r3, r1, r3
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	3332      	adds	r3, #50	@ 0x32
 800b1ce:	4a08      	ldr	r2, [pc, #32]	@ (800b1f0 <UART_SetConfig+0x2d4>)
 800b1d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1d4:	095b      	lsrs	r3, r3, #5
 800b1d6:	f003 0207 	and.w	r2, r3, #7
 800b1da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4422      	add	r2, r4
 800b1e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b1e4:	e106      	b.n	800b3f4 <UART_SetConfig+0x4d8>
 800b1e6:	bf00      	nop
 800b1e8:	40011000 	.word	0x40011000
 800b1ec:	40011400 	.word	0x40011400
 800b1f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b1f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b1fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b202:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b206:	4642      	mov	r2, r8
 800b208:	464b      	mov	r3, r9
 800b20a:	1891      	adds	r1, r2, r2
 800b20c:	6239      	str	r1, [r7, #32]
 800b20e:	415b      	adcs	r3, r3
 800b210:	627b      	str	r3, [r7, #36]	@ 0x24
 800b212:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b216:	4641      	mov	r1, r8
 800b218:	1854      	adds	r4, r2, r1
 800b21a:	4649      	mov	r1, r9
 800b21c:	eb43 0501 	adc.w	r5, r3, r1
 800b220:	f04f 0200 	mov.w	r2, #0
 800b224:	f04f 0300 	mov.w	r3, #0
 800b228:	00eb      	lsls	r3, r5, #3
 800b22a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b22e:	00e2      	lsls	r2, r4, #3
 800b230:	4614      	mov	r4, r2
 800b232:	461d      	mov	r5, r3
 800b234:	4643      	mov	r3, r8
 800b236:	18e3      	adds	r3, r4, r3
 800b238:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b23c:	464b      	mov	r3, r9
 800b23e:	eb45 0303 	adc.w	r3, r5, r3
 800b242:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b252:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b256:	f04f 0200 	mov.w	r2, #0
 800b25a:	f04f 0300 	mov.w	r3, #0
 800b25e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b262:	4629      	mov	r1, r5
 800b264:	008b      	lsls	r3, r1, #2
 800b266:	4621      	mov	r1, r4
 800b268:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b26c:	4621      	mov	r1, r4
 800b26e:	008a      	lsls	r2, r1, #2
 800b270:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b274:	f7f5 f81c 	bl	80002b0 <__aeabi_uldivmod>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4b60      	ldr	r3, [pc, #384]	@ (800b400 <UART_SetConfig+0x4e4>)
 800b27e:	fba3 2302 	umull	r2, r3, r3, r2
 800b282:	095b      	lsrs	r3, r3, #5
 800b284:	011c      	lsls	r4, r3, #4
 800b286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b28a:	2200      	movs	r2, #0
 800b28c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b290:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b294:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b298:	4642      	mov	r2, r8
 800b29a:	464b      	mov	r3, r9
 800b29c:	1891      	adds	r1, r2, r2
 800b29e:	61b9      	str	r1, [r7, #24]
 800b2a0:	415b      	adcs	r3, r3
 800b2a2:	61fb      	str	r3, [r7, #28]
 800b2a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2a8:	4641      	mov	r1, r8
 800b2aa:	1851      	adds	r1, r2, r1
 800b2ac:	6139      	str	r1, [r7, #16]
 800b2ae:	4649      	mov	r1, r9
 800b2b0:	414b      	adcs	r3, r1
 800b2b2:	617b      	str	r3, [r7, #20]
 800b2b4:	f04f 0200 	mov.w	r2, #0
 800b2b8:	f04f 0300 	mov.w	r3, #0
 800b2bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b2c0:	4659      	mov	r1, fp
 800b2c2:	00cb      	lsls	r3, r1, #3
 800b2c4:	4651      	mov	r1, sl
 800b2c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ca:	4651      	mov	r1, sl
 800b2cc:	00ca      	lsls	r2, r1, #3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	189b      	adds	r3, r3, r2
 800b2d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b2dc:	464b      	mov	r3, r9
 800b2de:	460a      	mov	r2, r1
 800b2e0:	eb42 0303 	adc.w	r3, r2, r3
 800b2e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b2e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b2f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b2f4:	f04f 0200 	mov.w	r2, #0
 800b2f8:	f04f 0300 	mov.w	r3, #0
 800b2fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b300:	4649      	mov	r1, r9
 800b302:	008b      	lsls	r3, r1, #2
 800b304:	4641      	mov	r1, r8
 800b306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b30a:	4641      	mov	r1, r8
 800b30c:	008a      	lsls	r2, r1, #2
 800b30e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b312:	f7f4 ffcd 	bl	80002b0 <__aeabi_uldivmod>
 800b316:	4602      	mov	r2, r0
 800b318:	460b      	mov	r3, r1
 800b31a:	4611      	mov	r1, r2
 800b31c:	4b38      	ldr	r3, [pc, #224]	@ (800b400 <UART_SetConfig+0x4e4>)
 800b31e:	fba3 2301 	umull	r2, r3, r3, r1
 800b322:	095b      	lsrs	r3, r3, #5
 800b324:	2264      	movs	r2, #100	@ 0x64
 800b326:	fb02 f303 	mul.w	r3, r2, r3
 800b32a:	1acb      	subs	r3, r1, r3
 800b32c:	011b      	lsls	r3, r3, #4
 800b32e:	3332      	adds	r3, #50	@ 0x32
 800b330:	4a33      	ldr	r2, [pc, #204]	@ (800b400 <UART_SetConfig+0x4e4>)
 800b332:	fba2 2303 	umull	r2, r3, r2, r3
 800b336:	095b      	lsrs	r3, r3, #5
 800b338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b33c:	441c      	add	r4, r3
 800b33e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b342:	2200      	movs	r2, #0
 800b344:	673b      	str	r3, [r7, #112]	@ 0x70
 800b346:	677a      	str	r2, [r7, #116]	@ 0x74
 800b348:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b34c:	4642      	mov	r2, r8
 800b34e:	464b      	mov	r3, r9
 800b350:	1891      	adds	r1, r2, r2
 800b352:	60b9      	str	r1, [r7, #8]
 800b354:	415b      	adcs	r3, r3
 800b356:	60fb      	str	r3, [r7, #12]
 800b358:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b35c:	4641      	mov	r1, r8
 800b35e:	1851      	adds	r1, r2, r1
 800b360:	6039      	str	r1, [r7, #0]
 800b362:	4649      	mov	r1, r9
 800b364:	414b      	adcs	r3, r1
 800b366:	607b      	str	r3, [r7, #4]
 800b368:	f04f 0200 	mov.w	r2, #0
 800b36c:	f04f 0300 	mov.w	r3, #0
 800b370:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b374:	4659      	mov	r1, fp
 800b376:	00cb      	lsls	r3, r1, #3
 800b378:	4651      	mov	r1, sl
 800b37a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b37e:	4651      	mov	r1, sl
 800b380:	00ca      	lsls	r2, r1, #3
 800b382:	4610      	mov	r0, r2
 800b384:	4619      	mov	r1, r3
 800b386:	4603      	mov	r3, r0
 800b388:	4642      	mov	r2, r8
 800b38a:	189b      	adds	r3, r3, r2
 800b38c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b38e:	464b      	mov	r3, r9
 800b390:	460a      	mov	r2, r1
 800b392:	eb42 0303 	adc.w	r3, r2, r3
 800b396:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b3a2:	667a      	str	r2, [r7, #100]	@ 0x64
 800b3a4:	f04f 0200 	mov.w	r2, #0
 800b3a8:	f04f 0300 	mov.w	r3, #0
 800b3ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	008b      	lsls	r3, r1, #2
 800b3b4:	4641      	mov	r1, r8
 800b3b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3ba:	4641      	mov	r1, r8
 800b3bc:	008a      	lsls	r2, r1, #2
 800b3be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b3c2:	f7f4 ff75 	bl	80002b0 <__aeabi_uldivmod>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b400 <UART_SetConfig+0x4e4>)
 800b3cc:	fba3 1302 	umull	r1, r3, r3, r2
 800b3d0:	095b      	lsrs	r3, r3, #5
 800b3d2:	2164      	movs	r1, #100	@ 0x64
 800b3d4:	fb01 f303 	mul.w	r3, r1, r3
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	011b      	lsls	r3, r3, #4
 800b3dc:	3332      	adds	r3, #50	@ 0x32
 800b3de:	4a08      	ldr	r2, [pc, #32]	@ (800b400 <UART_SetConfig+0x4e4>)
 800b3e0:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e4:	095b      	lsrs	r3, r3, #5
 800b3e6:	f003 020f 	and.w	r2, r3, #15
 800b3ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4422      	add	r2, r4
 800b3f2:	609a      	str	r2, [r3, #8]
}
 800b3f4:	bf00      	nop
 800b3f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b400:	51eb851f 	.word	0x51eb851f

0800b404 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d123      	bne.n	800b45e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b41e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	6851      	ldr	r1, [r2, #4]
 800b426:	683a      	ldr	r2, [r7, #0]
 800b428:	6892      	ldr	r2, [r2, #8]
 800b42a:	4311      	orrs	r1, r2
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	68d2      	ldr	r2, [r2, #12]
 800b430:	4311      	orrs	r1, r2
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	6912      	ldr	r2, [r2, #16]
 800b436:	4311      	orrs	r1, r2
 800b438:	683a      	ldr	r2, [r7, #0]
 800b43a:	6952      	ldr	r2, [r2, #20]
 800b43c:	4311      	orrs	r1, r2
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	6992      	ldr	r2, [r2, #24]
 800b442:	4311      	orrs	r1, r2
 800b444:	683a      	ldr	r2, [r7, #0]
 800b446:	69d2      	ldr	r2, [r2, #28]
 800b448:	4311      	orrs	r1, r2
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	6a12      	ldr	r2, [r2, #32]
 800b44e:	4311      	orrs	r1, r2
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b454:	430a      	orrs	r2, r1
 800b456:	431a      	orrs	r2, r3
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	e028      	b.n	800b4b0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	69d9      	ldr	r1, [r3, #28]
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	4319      	orrs	r1, r3
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b474:	430b      	orrs	r3, r1
 800b476:	431a      	orrs	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b484:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	6851      	ldr	r1, [r2, #4]
 800b48c:	683a      	ldr	r2, [r7, #0]
 800b48e:	6892      	ldr	r2, [r2, #8]
 800b490:	4311      	orrs	r1, r2
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	68d2      	ldr	r2, [r2, #12]
 800b496:	4311      	orrs	r1, r2
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	6912      	ldr	r2, [r2, #16]
 800b49c:	4311      	orrs	r1, r2
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	6952      	ldr	r2, [r2, #20]
 800b4a2:	4311      	orrs	r1, r2
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	6992      	ldr	r2, [r2, #24]
 800b4a8:	430a      	orrs	r2, r1
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b4be:	b480      	push	{r7}
 800b4c0:	b085      	sub	sp, #20
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	60f8      	str	r0, [r7, #12]
 800b4c6:	60b9      	str	r1, [r7, #8]
 800b4c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d128      	bne.n	800b522 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	1e59      	subs	r1, r3, #1
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	011b      	lsls	r3, r3, #4
 800b4e6:	4319      	orrs	r1, r3
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	4319      	orrs	r1, r3
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	031b      	lsls	r3, r3, #12
 800b4fa:	4319      	orrs	r1, r3
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	3b01      	subs	r3, #1
 800b502:	041b      	lsls	r3, r3, #16
 800b504:	4319      	orrs	r1, r3
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	3b01      	subs	r3, #1
 800b50c:	051b      	lsls	r3, r3, #20
 800b50e:	4319      	orrs	r1, r3
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	3b01      	subs	r3, #1
 800b516:	061b      	lsls	r3, r3, #24
 800b518:	430b      	orrs	r3, r1
 800b51a:	431a      	orrs	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	609a      	str	r2, [r3, #8]
 800b520:	e02f      	b.n	800b582 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b52a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	68d2      	ldr	r2, [r2, #12]
 800b532:	3a01      	subs	r2, #1
 800b534:	0311      	lsls	r1, r2, #12
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	6952      	ldr	r2, [r2, #20]
 800b53a:	3a01      	subs	r2, #1
 800b53c:	0512      	lsls	r2, r2, #20
 800b53e:	430a      	orrs	r2, r1
 800b540:	431a      	orrs	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	1e59      	subs	r1, r3, #1
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	3b01      	subs	r3, #1
 800b55a:	011b      	lsls	r3, r3, #4
 800b55c:	4319      	orrs	r1, r3
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	3b01      	subs	r3, #1
 800b564:	021b      	lsls	r3, r3, #8
 800b566:	4319      	orrs	r1, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	041b      	lsls	r3, r3, #16
 800b570:	4319      	orrs	r1, r3
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	3b01      	subs	r3, #1
 800b578:	061b      	lsls	r3, r3, #24
 800b57a:	430b      	orrs	r3, r1
 800b57c:	431a      	orrs	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b590:	b084      	sub	sp, #16
 800b592:	b480      	push	{r7}
 800b594:	b085      	sub	sp, #20
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	f107 001c 	add.w	r0, r7, #28
 800b59e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b5a6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b5a8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b5aa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800b5ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800b5b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800b5b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800b5ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800b5ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	431a      	orrs	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	b004      	add	sp, #16
 800b5e4:	4770      	bx	lr

0800b5e6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b5e6:	b480      	push	{r7}
 800b5e8:	b083      	sub	sp, #12
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	370c      	adds	r7, #12
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr

0800b622 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b622:	b480      	push	{r7}
 800b624:	b083      	sub	sp, #12
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2203      	movs	r2, #3
 800b62e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b63e:	b480      	push	{r7}
 800b640:	b083      	sub	sp, #12
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0303 	and.w	r3, r3, #3
}
 800b64e:	4618      	mov	r0, r3
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b085      	sub	sp, #20
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b664:	2300      	movs	r3, #0
 800b666:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b678:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b67e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b684:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b686:	68fa      	ldr	r2, [r7, #12]
 800b688:	4313      	orrs	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b694:	f023 030f 	bic.w	r3, r3, #15
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	431a      	orrs	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b6ae:	b480      	push	{r7}
 800b6b0:	b083      	sub	sp, #12
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	b2db      	uxtb	r3, r3
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3314      	adds	r3, #20
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	4413      	add	r3, r2
 800b6dc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
}  
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b085      	sub	sp, #20
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
 800b6f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b714:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b71a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b720:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	4313      	orrs	r3, r2
 800b726:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b72c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	431a      	orrs	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b738:	2300      	movs	r3, #0

}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b088      	sub	sp, #32
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b754:	2310      	movs	r3, #16
 800b756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b758:	2340      	movs	r3, #64	@ 0x40
 800b75a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b75c:	2300      	movs	r3, #0
 800b75e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b760:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b764:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b766:	f107 0308 	add.w	r3, r7, #8
 800b76a:	4619      	mov	r1, r3
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7ff ff74 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b772:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b776:	2110      	movs	r1, #16
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fa19 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800b77e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b780:	69fb      	ldr	r3, [r7, #28]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3720      	adds	r7, #32
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b088      	sub	sp, #32
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b798:	2311      	movs	r3, #17
 800b79a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b79c:	2340      	movs	r3, #64	@ 0x40
 800b79e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7aa:	f107 0308 	add.w	r3, r7, #8
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff ff52 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b7b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7ba:	2111      	movs	r1, #17
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 f9f7 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800b7c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7c4:	69fb      	ldr	r3, [r7, #28]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3720      	adds	r7, #32
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b088      	sub	sp, #32
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b7dc:	2312      	movs	r3, #18
 800b7de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7e0:	2340      	movs	r3, #64	@ 0x40
 800b7e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7ee:	f107 0308 	add.w	r3, r7, #8
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff ff30 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b7fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7fe:	2112      	movs	r1, #18
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f9d5 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800b806:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b808:	69fb      	ldr	r3, [r7, #28]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3720      	adds	r7, #32
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b088      	sub	sp, #32
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b820:	2318      	movs	r3, #24
 800b822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b824:	2340      	movs	r3, #64	@ 0x40
 800b826:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b828:	2300      	movs	r3, #0
 800b82a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b82c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b830:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b832:	f107 0308 	add.w	r3, r7, #8
 800b836:	4619      	mov	r1, r3
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f7ff ff0e 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b83e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b842:	2118      	movs	r1, #24
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f9b3 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800b84a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b84c:	69fb      	ldr	r3, [r7, #28]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3720      	adds	r7, #32
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b088      	sub	sp, #32
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b864:	2319      	movs	r3, #25
 800b866:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b868:	2340      	movs	r3, #64	@ 0x40
 800b86a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b86c:	2300      	movs	r3, #0
 800b86e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b874:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b876:	f107 0308 	add.w	r3, r7, #8
 800b87a:	4619      	mov	r1, r3
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f7ff feec 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b882:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b886:	2119      	movs	r1, #25
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f991 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800b88e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b890:	69fb      	ldr	r3, [r7, #28]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3720      	adds	r7, #32
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
	...

0800b89c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b8a8:	230c      	movs	r3, #12
 800b8aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8ac:	2340      	movs	r3, #64	@ 0x40
 800b8ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8ba:	f107 0308 	add.w	r3, r7, #8
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff feca 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b8c6:	4a05      	ldr	r2, [pc, #20]	@ (800b8dc <SDMMC_CmdStopTransfer+0x40>)
 800b8c8:	210c      	movs	r1, #12
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f970 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800b8d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8d2:	69fb      	ldr	r3, [r7, #28]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	05f5e100 	.word	0x05f5e100

0800b8e0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b08a      	sub	sp, #40	@ 0x28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b8f0:	2307      	movs	r3, #7
 800b8f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8f4:	2340      	movs	r3, #64	@ 0x40
 800b8f6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b900:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b902:	f107 0310 	add.w	r3, r7, #16
 800b906:	4619      	mov	r1, r3
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7ff fea6 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b90e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b912:	2107      	movs	r1, #7
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 f94b 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800b91a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800b91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3728      	adds	r7, #40	@ 0x28
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b926:	b580      	push	{r7, lr}
 800b928:	b088      	sub	sp, #32
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b92e:	2300      	movs	r3, #0
 800b930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b932:	2300      	movs	r3, #0
 800b934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b936:	2300      	movs	r3, #0
 800b938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b93a:	2300      	movs	r3, #0
 800b93c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b93e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b942:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b944:	f107 0308 	add.w	r3, r7, #8
 800b948:	4619      	mov	r1, r3
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f7ff fe85 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fb65 	bl	800c020 <SDMMC_GetCmdError>
 800b956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b958:	69fb      	ldr	r3, [r7, #28]
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3720      	adds	r7, #32
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b088      	sub	sp, #32
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b96a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800b96e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b970:	2308      	movs	r3, #8
 800b972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b974:	2340      	movs	r3, #64	@ 0x40
 800b976:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b978:	2300      	movs	r3, #0
 800b97a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b97c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b980:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b982:	f107 0308 	add.w	r3, r7, #8
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7ff fe66 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 faf8 	bl	800bf84 <SDMMC_GetCmdResp7>
 800b994:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b996:	69fb      	ldr	r3, [r7, #28]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3720      	adds	r7, #32
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b9ae:	2337      	movs	r3, #55	@ 0x37
 800b9b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9b2:	2340      	movs	r3, #64	@ 0x40
 800b9b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b9ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b9be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b9c0:	f107 0308 	add.w	r3, r7, #8
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff fe47 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b9cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9d0:	2137      	movs	r1, #55	@ 0x37
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f8ec 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800b9d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9da:	69fb      	ldr	r3, [r7, #28]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3720      	adds	r7, #32
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b9fa:	2329      	movs	r3, #41	@ 0x29
 800b9fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b9fe:	2340      	movs	r3, #64	@ 0x40
 800ba00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba0c:	f107 0308 	add.w	r3, r7, #8
 800ba10:	4619      	mov	r1, r3
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fe21 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f9ff 	bl	800be1c <SDMMC_GetCmdResp3>
 800ba1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba20:	69fb      	ldr	r3, [r7, #28]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3720      	adds	r7, #32
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}

0800ba2a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ba2a:	b580      	push	{r7, lr}
 800ba2c:	b088      	sub	sp, #32
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
 800ba32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ba38:	2306      	movs	r3, #6
 800ba3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba3c:	2340      	movs	r3, #64	@ 0x40
 800ba3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba40:	2300      	movs	r3, #0
 800ba42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba4a:	f107 0308 	add.w	r3, r7, #8
 800ba4e:	4619      	mov	r1, r3
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7ff fe02 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800ba56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba5a:	2106      	movs	r1, #6
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 f8a7 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800ba62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba64:	69fb      	ldr	r3, [r7, #28]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3720      	adds	r7, #32
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b088      	sub	sp, #32
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ba76:	2300      	movs	r3, #0
 800ba78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ba7a:	2333      	movs	r3, #51	@ 0x33
 800ba7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba7e:	2340      	movs	r3, #64	@ 0x40
 800ba80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba82:	2300      	movs	r3, #0
 800ba84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba8c:	f107 0308 	add.w	r3, r7, #8
 800ba90:	4619      	mov	r1, r3
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7ff fde1 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ba98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba9c:	2133      	movs	r1, #51	@ 0x33
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f886 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800baa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800baa6:	69fb      	ldr	r3, [r7, #28]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3720      	adds	r7, #32
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b088      	sub	sp, #32
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bab8:	2300      	movs	r3, #0
 800baba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800babc:	2302      	movs	r3, #2
 800babe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bac0:	23c0      	movs	r3, #192	@ 0xc0
 800bac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bac4:	2300      	movs	r3, #0
 800bac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bacc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bace:	f107 0308 	add.w	r3, r7, #8
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f7ff fdc0 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 f956 	bl	800bd8c <SDMMC_GetCmdResp2>
 800bae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bae2:	69fb      	ldr	r3, [r7, #28]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3720      	adds	r7, #32
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b088      	sub	sp, #32
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bafa:	2309      	movs	r3, #9
 800bafc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bafe:	23c0      	movs	r3, #192	@ 0xc0
 800bb00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb02:	2300      	movs	r3, #0
 800bb04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb0a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb0c:	f107 0308 	add.w	r3, r7, #8
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff fda1 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 f937 	bl	800bd8c <SDMMC_GetCmdResp2>
 800bb1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb20:	69fb      	ldr	r3, [r7, #28]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3720      	adds	r7, #32
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b088      	sub	sp, #32
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800bb34:	2300      	movs	r3, #0
 800bb36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb3c:	2340      	movs	r3, #64	@ 0x40
 800bb3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb40:	2300      	movs	r3, #0
 800bb42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb4a:	f107 0308 	add.w	r3, r7, #8
 800bb4e:	4619      	mov	r1, r3
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7ff fd82 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	2103      	movs	r1, #3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f99c 	bl	800be98 <SDMMC_GetCmdResp6>
 800bb60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb62:	69fb      	ldr	r3, [r7, #28]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3720      	adds	r7, #32
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}

0800bb6c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800bb7a:	230d      	movs	r3, #13
 800bb7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb7e:	2340      	movs	r3, #64	@ 0x40
 800bb80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb82:	2300      	movs	r3, #0
 800bb84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb8c:	f107 0308 	add.w	r3, r7, #8
 800bb90:	4619      	mov	r1, r3
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff fd61 	bl	800b65a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800bb98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb9c:	210d      	movs	r1, #13
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 f806 	bl	800bbb0 <SDMMC_GetCmdResp1>
 800bba4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bba6:	69fb      	ldr	r3, [r7, #28]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3720      	adds	r7, #32
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b088      	sub	sp, #32
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	607a      	str	r2, [r7, #4]
 800bbbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bbbe:	4b70      	ldr	r3, [pc, #448]	@ (800bd80 <SDMMC_GetCmdResp1+0x1d0>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a70      	ldr	r2, [pc, #448]	@ (800bd84 <SDMMC_GetCmdResp1+0x1d4>)
 800bbc4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbc8:	0a5a      	lsrs	r2, r3, #9
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	fb02 f303 	mul.w	r3, r2, r3
 800bbd0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	1e5a      	subs	r2, r3, #1
 800bbd6:	61fa      	str	r2, [r7, #28]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d102      	bne.n	800bbe2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bbe0:	e0c9      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbe6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0ef      	beq.n	800bbd2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1ea      	bne.n	800bbd2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc00:	f003 0304 	and.w	r3, r3, #4
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d004      	beq.n	800bc12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2204      	movs	r2, #4
 800bc0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc0e:	2304      	movs	r3, #4
 800bc10:	e0b1      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc16:	f003 0301 	and.w	r3, r3, #1
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d004      	beq.n	800bc28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2201      	movs	r2, #1
 800bc22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e0a6      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	22c5      	movs	r2, #197	@ 0xc5
 800bc2c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff fd3d 	bl	800b6ae <SDIO_GetCommandResponse>
 800bc34:	4603      	mov	r3, r0
 800bc36:	461a      	mov	r2, r3
 800bc38:	7afb      	ldrb	r3, [r7, #11]
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d001      	beq.n	800bc42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e099      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bc42:	2100      	movs	r1, #0
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f7ff fd3f 	bl	800b6c8 <SDIO_GetResponse>
 800bc4a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	4b4e      	ldr	r3, [pc, #312]	@ (800bd88 <SDMMC_GetCmdResp1+0x1d8>)
 800bc50:	4013      	ands	r3, r2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d101      	bne.n	800bc5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bc56:	2300      	movs	r3, #0
 800bc58:	e08d      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da02      	bge.n	800bc66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bc60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bc64:	e087      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d001      	beq.n	800bc74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bc70:	2340      	movs	r3, #64	@ 0x40
 800bc72:	e080      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bc7e:	2380      	movs	r3, #128	@ 0x80
 800bc80:	e079      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bc8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bc90:	e071      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d002      	beq.n	800bca2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bc9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bca0:	e069      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bcac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcb0:	e061      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d002      	beq.n	800bcc2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bcbc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcc0:	e059      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d002      	beq.n	800bcd2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bccc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bcd0:	e051      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d002      	beq.n	800bce2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bcdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bce0:	e049      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d002      	beq.n	800bcf2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bcec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bcf0:	e041      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d002      	beq.n	800bd02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bcfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd00:	e039      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bd0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800bd10:	e031      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bd1c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800bd20:	e029      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bd2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bd30:	e021      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d002      	beq.n	800bd42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bd3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bd40:	e019      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bd4c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800bd50:	e011      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bd5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bd60:	e009      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f003 0308 	and.w	r3, r3, #8
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bd6c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800bd70:	e001      	b.n	800bd76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bd72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3720      	adds	r7, #32
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	20000004 	.word	0x20000004
 800bd84:	10624dd3 	.word	0x10624dd3
 800bd88:	fdffe008 	.word	0xfdffe008

0800bd8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b085      	sub	sp, #20
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd94:	4b1f      	ldr	r3, [pc, #124]	@ (800be14 <SDMMC_GetCmdResp2+0x88>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a1f      	ldr	r2, [pc, #124]	@ (800be18 <SDMMC_GetCmdResp2+0x8c>)
 800bd9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd9e:	0a5b      	lsrs	r3, r3, #9
 800bda0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bda4:	fb02 f303 	mul.w	r3, r2, r3
 800bda8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	1e5a      	subs	r2, r3, #1
 800bdae:	60fa      	str	r2, [r7, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d102      	bne.n	800bdba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bdb4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bdb8:	e026      	b.n	800be08 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0ef      	beq.n	800bdaa <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1ea      	bne.n	800bdaa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d004      	beq.n	800bdea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2204      	movs	r2, #4
 800bde4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bde6:	2304      	movs	r3, #4
 800bde8:	e00e      	b.n	800be08 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d004      	beq.n	800be00 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	e003      	b.n	800be08 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	22c5      	movs	r2, #197	@ 0xc5
 800be04:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr
 800be14:	20000004 	.word	0x20000004
 800be18:	10624dd3 	.word	0x10624dd3

0800be1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800be24:	4b1a      	ldr	r3, [pc, #104]	@ (800be90 <SDMMC_GetCmdResp3+0x74>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a1a      	ldr	r2, [pc, #104]	@ (800be94 <SDMMC_GetCmdResp3+0x78>)
 800be2a:	fba2 2303 	umull	r2, r3, r2, r3
 800be2e:	0a5b      	lsrs	r3, r3, #9
 800be30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be34:	fb02 f303 	mul.w	r3, r2, r3
 800be38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	1e5a      	subs	r2, r3, #1
 800be3e:	60fa      	str	r2, [r7, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d102      	bne.n	800be4a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800be48:	e01b      	b.n	800be82 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800be56:	2b00      	cmp	r3, #0
 800be58:	d0ef      	beq.n	800be3a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800be60:	2b00      	cmp	r3, #0
 800be62:	d1ea      	bne.n	800be3a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be68:	f003 0304 	and.w	r3, r3, #4
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d004      	beq.n	800be7a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2204      	movs	r2, #4
 800be74:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be76:	2304      	movs	r3, #4
 800be78:	e003      	b.n	800be82 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	22c5      	movs	r2, #197	@ 0xc5
 800be7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	20000004 	.word	0x20000004
 800be94:	10624dd3 	.word	0x10624dd3

0800be98 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	460b      	mov	r3, r1
 800bea2:	607a      	str	r2, [r7, #4]
 800bea4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bea6:	4b35      	ldr	r3, [pc, #212]	@ (800bf7c <SDMMC_GetCmdResp6+0xe4>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a35      	ldr	r2, [pc, #212]	@ (800bf80 <SDMMC_GetCmdResp6+0xe8>)
 800beac:	fba2 2303 	umull	r2, r3, r2, r3
 800beb0:	0a5b      	lsrs	r3, r3, #9
 800beb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800beb6:	fb02 f303 	mul.w	r3, r2, r3
 800beba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	1e5a      	subs	r2, r3, #1
 800bec0:	61fa      	str	r2, [r7, #28]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bec6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800beca:	e052      	b.n	800bf72 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bed0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d0ef      	beq.n	800bebc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1ea      	bne.n	800bebc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beea:	f003 0304 	and.w	r3, r3, #4
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d004      	beq.n	800befc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	2204      	movs	r2, #4
 800bef6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bef8:	2304      	movs	r3, #4
 800befa:	e03a      	b.n	800bf72 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d004      	beq.n	800bf12 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e02f      	b.n	800bf72 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7ff fbcb 	bl	800b6ae <SDIO_GetCommandResponse>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	7afb      	ldrb	r3, [r7, #11]
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d001      	beq.n	800bf26 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e025      	b.n	800bf72 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	22c5      	movs	r2, #197	@ 0xc5
 800bf2a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7ff fbca 	bl	800b6c8 <SDIO_GetResponse>
 800bf34:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d106      	bne.n	800bf4e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	0c1b      	lsrs	r3, r3, #16
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	e011      	b.n	800bf72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d002      	beq.n	800bf5e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bf58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bf5c:	e009      	b.n	800bf72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bf6c:	e001      	b.n	800bf72 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3720      	adds	r7, #32
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20000004 	.word	0x20000004
 800bf80:	10624dd3 	.word	0x10624dd3

0800bf84 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bf8c:	4b22      	ldr	r3, [pc, #136]	@ (800c018 <SDMMC_GetCmdResp7+0x94>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a22      	ldr	r2, [pc, #136]	@ (800c01c <SDMMC_GetCmdResp7+0x98>)
 800bf92:	fba2 2303 	umull	r2, r3, r2, r3
 800bf96:	0a5b      	lsrs	r3, r3, #9
 800bf98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bf9c:	fb02 f303 	mul.w	r3, r2, r3
 800bfa0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	1e5a      	subs	r2, r3, #1
 800bfa6:	60fa      	str	r2, [r7, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d102      	bne.n	800bfb2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bfac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800bfb0:	e02c      	b.n	800c00c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfb6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0ef      	beq.n	800bfa2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1ea      	bne.n	800bfa2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d004      	beq.n	800bfe2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2204      	movs	r2, #4
 800bfdc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bfde:	2304      	movs	r3, #4
 800bfe0:	e014      	b.n	800c00c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfe6:	f003 0301 	and.w	r3, r3, #1
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d004      	beq.n	800bff8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2201      	movs	r2, #1
 800bff2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e009      	b.n	800c00c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2240      	movs	r2, #64	@ 0x40
 800c008:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c00a:	2300      	movs	r3, #0
  
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	20000004 	.word	0x20000004
 800c01c:	10624dd3 	.word	0x10624dd3

0800c020 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c028:	4b11      	ldr	r3, [pc, #68]	@ (800c070 <SDMMC_GetCmdError+0x50>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4a11      	ldr	r2, [pc, #68]	@ (800c074 <SDMMC_GetCmdError+0x54>)
 800c02e:	fba2 2303 	umull	r2, r3, r2, r3
 800c032:	0a5b      	lsrs	r3, r3, #9
 800c034:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c038:	fb02 f303 	mul.w	r3, r2, r3
 800c03c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	1e5a      	subs	r2, r3, #1
 800c042:	60fa      	str	r2, [r7, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d102      	bne.n	800c04e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c048:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c04c:	e009      	b.n	800c062 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0f1      	beq.n	800c03e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	22c5      	movs	r2, #197	@ 0xc5
 800c05e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	20000004 	.word	0x20000004
 800c074:	10624dd3 	.word	0x10624dd3

0800c078 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c078:	b084      	sub	sp, #16
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b084      	sub	sp, #16
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
 800c082:	f107 001c 	add.w	r0, r7, #28
 800c086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c08a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d123      	bne.n	800c0da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c096:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c0a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c0ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d105      	bne.n	800c0ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f9dc 	bl	800c48c <USB_CoreReset>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	73fb      	strb	r3, [r7, #15]
 800c0d8:	e01b      	b.n	800c112 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 f9d0 	bl	800c48c <USB_CoreReset>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c0f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d106      	bne.n	800c106 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	639a      	str	r2, [r3, #56]	@ 0x38
 800c104:	e005      	b.n	800c112 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c10a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c112:	7fbb      	ldrb	r3, [r7, #30]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d10b      	bne.n	800c130 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	689b      	ldr	r3, [r3, #8]
 800c11c:	f043 0206 	orr.w	r2, r3, #6
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	f043 0220 	orr.w	r2, r3, #32
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c130:	7bfb      	ldrb	r3, [r7, #15]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c13c:	b004      	add	sp, #16
 800c13e:	4770      	bx	lr

0800c140 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f043 0201 	orr.w	r2, r3, #1
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	370c      	adds	r7, #12
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c162:	b480      	push	{r7}
 800c164:	b083      	sub	sp, #12
 800c166:	af00      	add	r7, sp, #0
 800c168:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	f023 0201 	bic.w	r2, r3, #1
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c190:	2300      	movs	r3, #0
 800c192:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d115      	bne.n	800c1d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c1b2:	200a      	movs	r0, #10
 800c1b4:	f7f6 f84e 	bl	8002254 <HAL_Delay>
      ms += 10U;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	330a      	adds	r3, #10
 800c1bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f956 	bl	800c470 <USB_GetMode>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d01e      	beq.n	800c208 <USB_SetCurrentMode+0x84>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2bc7      	cmp	r3, #199	@ 0xc7
 800c1ce:	d9f0      	bls.n	800c1b2 <USB_SetCurrentMode+0x2e>
 800c1d0:	e01a      	b.n	800c208 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c1d2:	78fb      	ldrb	r3, [r7, #3]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d115      	bne.n	800c204 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c1e4:	200a      	movs	r0, #10
 800c1e6:	f7f6 f835 	bl	8002254 <HAL_Delay>
      ms += 10U;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	330a      	adds	r3, #10
 800c1ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 f93d 	bl	800c470 <USB_GetMode>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d005      	beq.n	800c208 <USB_SetCurrentMode+0x84>
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2bc7      	cmp	r3, #199	@ 0xc7
 800c200:	d9f0      	bls.n	800c1e4 <USB_SetCurrentMode+0x60>
 800c202:	e001      	b.n	800c208 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c204:	2301      	movs	r3, #1
 800c206:	e005      	b.n	800c214 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2bc8      	cmp	r3, #200	@ 0xc8
 800c20c:	d101      	bne.n	800c212 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c20e:	2301      	movs	r3, #1
 800c210:	e000      	b.n	800c214 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c226:	2300      	movs	r3, #0
 800c228:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	3301      	adds	r3, #1
 800c22e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c236:	d901      	bls.n	800c23c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	e01b      	b.n	800c274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	2b00      	cmp	r3, #0
 800c242:	daf2      	bge.n	800c22a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	019b      	lsls	r3, r3, #6
 800c24c:	f043 0220 	orr.w	r2, r3, #32
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3301      	adds	r3, #1
 800c258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c260:	d901      	bls.n	800c266 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c262:	2303      	movs	r3, #3
 800c264:	e006      	b.n	800c274 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	f003 0320 	and.w	r3, r3, #32
 800c26e:	2b20      	cmp	r3, #32
 800c270:	d0f0      	beq.n	800c254 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c288:	2300      	movs	r3, #0
 800c28a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	3301      	adds	r3, #1
 800c290:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c298:	d901      	bls.n	800c29e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c29a:	2303      	movs	r3, #3
 800c29c:	e018      	b.n	800c2d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	daf2      	bge.n	800c28c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2210      	movs	r2, #16
 800c2ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c2bc:	d901      	bls.n	800c2c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	e006      	b.n	800c2d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	f003 0310 	and.w	r3, r3, #16
 800c2ca:	2b10      	cmp	r3, #16
 800c2cc:	d0f0      	beq.n	800c2b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3714      	adds	r7, #20
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2da:	4770      	bx	lr

0800c2dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b089      	sub	sp, #36	@ 0x24
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	71fb      	strb	r3, [r7, #7]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c2fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d123      	bne.n	800c34a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c302:	88bb      	ldrh	r3, [r7, #4]
 800c304:	3303      	adds	r3, #3
 800c306:	089b      	lsrs	r3, r3, #2
 800c308:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c30a:	2300      	movs	r3, #0
 800c30c:	61bb      	str	r3, [r7, #24]
 800c30e:	e018      	b.n	800c342 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c310:	79fb      	ldrb	r3, [r7, #7]
 800c312:	031a      	lsls	r2, r3, #12
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	4413      	add	r3, r2
 800c318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c31c:	461a      	mov	r2, r3
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	3301      	adds	r3, #1
 800c328:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	3301      	adds	r3, #1
 800c32e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	3301      	adds	r3, #1
 800c334:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	3301      	adds	r3, #1
 800c33a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	3301      	adds	r3, #1
 800c340:	61bb      	str	r3, [r7, #24]
 800c342:	69ba      	ldr	r2, [r7, #24]
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	429a      	cmp	r2, r3
 800c348:	d3e2      	bcc.n	800c310 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c34a:	2300      	movs	r3, #0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3724      	adds	r7, #36	@ 0x24
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c358:	b480      	push	{r7}
 800c35a:	b08b      	sub	sp, #44	@ 0x2c
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	4613      	mov	r3, r2
 800c364:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c36e:	88fb      	ldrh	r3, [r7, #6]
 800c370:	089b      	lsrs	r3, r3, #2
 800c372:	b29b      	uxth	r3, r3
 800c374:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c376:	88fb      	ldrh	r3, [r7, #6]
 800c378:	f003 0303 	and.w	r3, r3, #3
 800c37c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c37e:	2300      	movs	r3, #0
 800c380:	623b      	str	r3, [r7, #32]
 800c382:	e014      	b.n	800c3ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	3301      	adds	r3, #1
 800c394:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c398:	3301      	adds	r3, #1
 800c39a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39e:	3301      	adds	r3, #1
 800c3a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c3a8:	6a3b      	ldr	r3, [r7, #32]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	623b      	str	r3, [r7, #32]
 800c3ae:	6a3a      	ldr	r2, [r7, #32]
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d3e6      	bcc.n	800c384 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c3b6:	8bfb      	ldrh	r3, [r7, #30]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d01e      	beq.n	800c3fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f107 0310 	add.w	r3, r7, #16
 800c3cc:	6812      	ldr	r2, [r2, #0]
 800c3ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c3d0:	693a      	ldr	r2, [r7, #16]
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c3dc:	b2da      	uxtb	r2, r3
 800c3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e0:	701a      	strb	r2, [r3, #0]
      i++;
 800c3e2:	6a3b      	ldr	r3, [r7, #32]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	623b      	str	r3, [r7, #32]
      pDest++;
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c3ee:	8bfb      	ldrh	r3, [r7, #30]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c3f4:	8bfb      	ldrh	r3, [r7, #30]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1ea      	bne.n	800c3d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	372c      	adds	r7, #44	@ 0x2c
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	699b      	ldr	r3, [r3, #24]
 800c41a:	68fa      	ldr	r2, [r7, #12]
 800c41c:	4013      	ands	r3, r2
 800c41e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c420:	68fb      	ldr	r3, [r7, #12]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3714      	adds	r7, #20
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800c42e:	b480      	push	{r7}
 800c430:	b085      	sub	sp, #20
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	460b      	mov	r3, r1
 800c438:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800c43e:	78fb      	ldrb	r3, [r7, #3]
 800c440:	015a      	lsls	r2, r3, #5
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	4413      	add	r3, r2
 800c446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800c44e:	78fb      	ldrb	r3, [r7, #3]
 800c450:	015a      	lsls	r2, r3, #5
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	4413      	add	r3, r2
 800c456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	68ba      	ldr	r2, [r7, #8]
 800c45e:	4013      	ands	r3, r2
 800c460:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c462:	68bb      	ldr	r3, [r7, #8]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	695b      	ldr	r3, [r3, #20]
 800c47c:	f003 0301 	and.w	r3, r3, #1
}
 800c480:	4618      	mov	r0, r3
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c494:	2300      	movs	r3, #0
 800c496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	3301      	adds	r3, #1
 800c49c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c4a4:	d901      	bls.n	800c4aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c4a6:	2303      	movs	r3, #3
 800c4a8:	e01b      	b.n	800c4e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	daf2      	bge.n	800c498 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	f043 0201 	orr.w	r2, r3, #1
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c4ce:	d901      	bls.n	800c4d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	e006      	b.n	800c4e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d0f0      	beq.n	800c4c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c4e0:	2300      	movs	r3, #0
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
	...

0800c4f0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b086      	sub	sp, #24
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c4fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c510:	461a      	mov	r2, r3
 800c512:	2300      	movs	r3, #0
 800c514:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c51a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	68db      	ldr	r3, [r3, #12]
 800c526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d119      	bne.n	800c562 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c52e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c532:	2b01      	cmp	r3, #1
 800c534:	d10a      	bne.n	800c54c <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c544:	f043 0304 	orr.w	r3, r3, #4
 800c548:	6013      	str	r3, [r2, #0]
 800c54a:	e014      	b.n	800c576 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c55a:	f023 0304 	bic.w	r3, r3, #4
 800c55e:	6013      	str	r3, [r2, #0]
 800c560:	e009      	b.n	800c576 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c570:	f023 0304 	bic.w	r3, r3, #4
 800c574:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c576:	2110      	movs	r1, #16
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff fe4f 	bl	800c21c <USB_FlushTxFifo>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d001      	beq.n	800c588 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7ff fe79 	bl	800c280 <USB_FlushRxFifo>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d001      	beq.n	800c598 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c598:	2300      	movs	r3, #0
 800c59a:	613b      	str	r3, [r7, #16]
 800c59c:	e015      	b.n	800c5ca <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	015a      	lsls	r2, r3, #5
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	015a      	lsls	r2, r3, #5
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c5be:	461a      	mov	r2, r3
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	613b      	str	r3, [r7, #16]
 800c5ca:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d3e3      	bcc.n	800c59e <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a18      	ldr	r2, [pc, #96]	@ (800c648 <USB_HostInit+0x158>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d10b      	bne.n	800c604 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5f2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4a15      	ldr	r2, [pc, #84]	@ (800c64c <USB_HostInit+0x15c>)
 800c5f8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a14      	ldr	r2, [pc, #80]	@ (800c650 <USB_HostInit+0x160>)
 800c5fe:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800c602:	e009      	b.n	800c618 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2280      	movs	r2, #128	@ 0x80
 800c608:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a11      	ldr	r2, [pc, #68]	@ (800c654 <USB_HostInit+0x164>)
 800c60e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a11      	ldr	r2, [pc, #68]	@ (800c658 <USB_HostInit+0x168>)
 800c614:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d105      	bne.n	800c62c <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	699b      	ldr	r3, [r3, #24]
 800c624:	f043 0210 	orr.w	r2, r3, #16
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	699a      	ldr	r2, [r3, #24]
 800c630:	4b0a      	ldr	r3, [pc, #40]	@ (800c65c <USB_HostInit+0x16c>)
 800c632:	4313      	orrs	r3, r2
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c638:	7dfb      	ldrb	r3, [r7, #23]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c644:	b004      	add	sp, #16
 800c646:	4770      	bx	lr
 800c648:	40040000 	.word	0x40040000
 800c64c:	01000200 	.word	0x01000200
 800c650:	00e00300 	.word	0x00e00300
 800c654:	00600080 	.word	0x00600080
 800c658:	004000e0 	.word	0x004000e0
 800c65c:	a3200008 	.word	0xa3200008

0800c660 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	460b      	mov	r3, r1
 800c66a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c67e:	f023 0303 	bic.w	r3, r3, #3
 800c682:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	78fb      	ldrb	r3, [r7, #3]
 800c68e:	f003 0303 	and.w	r3, r3, #3
 800c692:	68f9      	ldr	r1, [r7, #12]
 800c694:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c698:	4313      	orrs	r3, r2
 800c69a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c69c:	78fb      	ldrb	r3, [r7, #3]
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d107      	bne.n	800c6b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c6ae:	6053      	str	r3, [r2, #4]
 800c6b0:	e00c      	b.n	800c6cc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800c6b2:	78fb      	ldrb	r3, [r7, #3]
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d107      	bne.n	800c6c8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c6be:	461a      	mov	r2, r3
 800c6c0:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c6c4:	6053      	str	r3, [r2, #4]
 800c6c6:	e001      	b.n	800c6cc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e000      	b.n	800c6ce <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3714      	adds	r7, #20
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c6fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c708:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c70a:	2064      	movs	r0, #100	@ 0x64
 800c70c:	f7f5 fda2 	bl	8002254 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c718:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c71c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c71e:	200a      	movs	r0, #10
 800c720:	f7f5 fd98 	bl	8002254 <HAL_Delay>

  return HAL_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}

0800c72e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c72e:	b480      	push	{r7}
 800c730:	b085      	sub	sp, #20
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	460b      	mov	r3, r1
 800c738:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c73e:	2300      	movs	r3, #0
 800c740:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c752:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d109      	bne.n	800c772 <USB_DriveVbus+0x44>
 800c75e:	78fb      	ldrb	r3, [r7, #3]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d106      	bne.n	800c772 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	68fa      	ldr	r2, [r7, #12]
 800c768:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c76c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c770:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c77c:	d109      	bne.n	800c792 <USB_DriveVbus+0x64>
 800c77e:	78fb      	ldrb	r3, [r7, #3]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d106      	bne.n	800c792 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c78c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c790:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3714      	adds	r7, #20
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b085      	sub	sp, #20
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	0c5b      	lsrs	r3, r3, #17
 800c7be:	f003 0303 	and.w	r3, r3, #3
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b085      	sub	sp, #20
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	b29b      	uxth	r3, r3
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b088      	sub	sp, #32
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	4608      	mov	r0, r1
 800c7fa:	4611      	mov	r1, r2
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	4603      	mov	r3, r0
 800c800:	70fb      	strb	r3, [r7, #3]
 800c802:	460b      	mov	r3, r1
 800c804:	70bb      	strb	r3, [r7, #2]
 800c806:	4613      	mov	r3, r2
 800c808:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c80a:	2300      	movs	r3, #0
 800c80c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800c812:	78fb      	ldrb	r3, [r7, #3]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c81e:	461a      	mov	r2, r3
 800c820:	f04f 33ff 	mov.w	r3, #4294967295
 800c824:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c826:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c82a:	2b03      	cmp	r3, #3
 800c82c:	d87c      	bhi.n	800c928 <USB_HC_Init+0x138>
 800c82e:	a201      	add	r2, pc, #4	@ (adr r2, 800c834 <USB_HC_Init+0x44>)
 800c830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c834:	0800c845 	.word	0x0800c845
 800c838:	0800c8eb 	.word	0x0800c8eb
 800c83c:	0800c845 	.word	0x0800c845
 800c840:	0800c8ad 	.word	0x0800c8ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c844:	78fb      	ldrb	r3, [r7, #3]
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c850:	461a      	mov	r2, r3
 800c852:	f240 439d 	movw	r3, #1181	@ 0x49d
 800c856:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c858:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da10      	bge.n	800c882 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c860:	78fb      	ldrb	r3, [r7, #3]
 800c862:	015a      	lsls	r2, r3, #5
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	4413      	add	r3, r2
 800c868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	78fa      	ldrb	r2, [r7, #3]
 800c870:	0151      	lsls	r1, r2, #5
 800c872:	693a      	ldr	r2, [r7, #16]
 800c874:	440a      	add	r2, r1
 800c876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c87a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c87e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800c880:	e055      	b.n	800c92e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a6f      	ldr	r2, [pc, #444]	@ (800ca44 <USB_HC_Init+0x254>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d151      	bne.n	800c92e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	015a      	lsls	r2, r3, #5
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	4413      	add	r3, r2
 800c892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	78fa      	ldrb	r2, [r7, #3]
 800c89a:	0151      	lsls	r1, r2, #5
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	440a      	add	r2, r1
 800c8a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c8a4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c8a8:	60d3      	str	r3, [r2, #12]
      break;
 800c8aa:	e040      	b.n	800c92e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c8ac:	78fb      	ldrb	r3, [r7, #3]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	f240 639d 	movw	r3, #1693	@ 0x69d
 800c8be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c8c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	da34      	bge.n	800c932 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c8c8:	78fb      	ldrb	r3, [r7, #3]
 800c8ca:	015a      	lsls	r2, r3, #5
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8d4:	68db      	ldr	r3, [r3, #12]
 800c8d6:	78fa      	ldrb	r2, [r7, #3]
 800c8d8:	0151      	lsls	r1, r2, #5
 800c8da:	693a      	ldr	r2, [r7, #16]
 800c8dc:	440a      	add	r2, r1
 800c8de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c8e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c8e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c8e8:	e023      	b.n	800c932 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c8ea:	78fb      	ldrb	r3, [r7, #3]
 800c8ec:	015a      	lsls	r2, r3, #5
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	f240 2325 	movw	r3, #549	@ 0x225
 800c8fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c8fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c902:	2b00      	cmp	r3, #0
 800c904:	da17      	bge.n	800c936 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c906:	78fb      	ldrb	r3, [r7, #3]
 800c908:	015a      	lsls	r2, r3, #5
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	4413      	add	r3, r2
 800c90e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c912:	68db      	ldr	r3, [r3, #12]
 800c914:	78fa      	ldrb	r2, [r7, #3]
 800c916:	0151      	lsls	r1, r2, #5
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	440a      	add	r2, r1
 800c91c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c920:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800c924:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c926:	e006      	b.n	800c936 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800c928:	2301      	movs	r3, #1
 800c92a:	77fb      	strb	r3, [r7, #31]
      break;
 800c92c:	e004      	b.n	800c938 <USB_HC_Init+0x148>
      break;
 800c92e:	bf00      	nop
 800c930:	e002      	b.n	800c938 <USB_HC_Init+0x148>
      break;
 800c932:	bf00      	nop
 800c934:	e000      	b.n	800c938 <USB_HC_Init+0x148>
      break;
 800c936:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c938:	78fb      	ldrb	r3, [r7, #3]
 800c93a:	015a      	lsls	r2, r3, #5
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	4413      	add	r3, r2
 800c940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c944:	461a      	mov	r2, r3
 800c946:	2300      	movs	r3, #0
 800c948:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c94a:	78fb      	ldrb	r3, [r7, #3]
 800c94c:	015a      	lsls	r2, r3, #5
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	4413      	add	r3, r2
 800c952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	78fa      	ldrb	r2, [r7, #3]
 800c95a:	0151      	lsls	r1, r2, #5
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	440a      	add	r2, r1
 800c960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c964:	f043 0302 	orr.w	r3, r3, #2
 800c968:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c970:	699a      	ldr	r2, [r3, #24]
 800c972:	78fb      	ldrb	r3, [r7, #3]
 800c974:	f003 030f 	and.w	r3, r3, #15
 800c978:	2101      	movs	r1, #1
 800c97a:	fa01 f303 	lsl.w	r3, r1, r3
 800c97e:	6939      	ldr	r1, [r7, #16]
 800c980:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c984:	4313      	orrs	r3, r2
 800c986:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c994:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	da03      	bge.n	800c9a4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c99c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c9a0:	61bb      	str	r3, [r7, #24]
 800c9a2:	e001      	b.n	800c9a8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff fef9 	bl	800c7a0 <USB_GetHostSpeed>
 800c9ae:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c9b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	d106      	bne.n	800c9c6 <USB_HC_Init+0x1d6>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d003      	beq.n	800c9c6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c9be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c9c2:	617b      	str	r3, [r7, #20]
 800c9c4:	e001      	b.n	800c9ca <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9ca:	787b      	ldrb	r3, [r7, #1]
 800c9cc:	059b      	lsls	r3, r3, #22
 800c9ce:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c9d2:	78bb      	ldrb	r3, [r7, #2]
 800c9d4:	02db      	lsls	r3, r3, #11
 800c9d6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9da:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c9dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c9e0:	049b      	lsls	r3, r3, #18
 800c9e2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c9e6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800c9e8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c9ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c9ee:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c9f0:	69bb      	ldr	r3, [r7, #24]
 800c9f2:	431a      	orrs	r2, r3
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c9f8:	78fa      	ldrb	r2, [r7, #3]
 800c9fa:	0151      	lsls	r1, r2, #5
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	440a      	add	r2, r1
 800ca00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ca04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ca08:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ca0a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d003      	beq.n	800ca1a <USB_HC_Init+0x22a>
 800ca12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d10f      	bne.n	800ca3a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ca1a:	78fb      	ldrb	r3, [r7, #3]
 800ca1c:	015a      	lsls	r2, r3, #5
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	4413      	add	r3, r2
 800ca22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	78fa      	ldrb	r2, [r7, #3]
 800ca2a:	0151      	lsls	r1, r2, #5
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	440a      	add	r2, r1
 800ca30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ca38:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ca3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	40040000 	.word	0x40040000

0800ca48 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b08c      	sub	sp, #48	@ 0x30
 800ca4c:	af02      	add	r7, sp, #8
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	4613      	mov	r3, r2
 800ca54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	785b      	ldrb	r3, [r3, #1]
 800ca5e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800ca60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca64:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	4a5d      	ldr	r2, [pc, #372]	@ (800cbe0 <USB_HC_StartXfer+0x198>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d12f      	bne.n	800cace <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800ca6e:	79fb      	ldrb	r3, [r7, #7]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d11c      	bne.n	800caae <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	7c9b      	ldrb	r3, [r3, #18]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d003      	beq.n	800ca84 <USB_HC_StartXfer+0x3c>
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	7c9b      	ldrb	r3, [r3, #18]
 800ca80:	2b02      	cmp	r3, #2
 800ca82:	d124      	bne.n	800cace <USB_HC_StartXfer+0x86>
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	799b      	ldrb	r3, [r3, #6]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d120      	bne.n	800cace <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ca8c:	69fb      	ldr	r3, [r7, #28]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	6a3b      	ldr	r3, [r7, #32]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	69fa      	ldr	r2, [r7, #28]
 800ca9c:	0151      	lsls	r1, r2, #5
 800ca9e:	6a3a      	ldr	r2, [r7, #32]
 800caa0:	440a      	add	r2, r1
 800caa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800caa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caaa:	60d3      	str	r3, [r2, #12]
 800caac:	e00f      	b.n	800cace <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	791b      	ldrb	r3, [r3, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d10b      	bne.n	800cace <USB_HC_StartXfer+0x86>
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	795b      	ldrb	r3, [r3, #5]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d107      	bne.n	800cace <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	785b      	ldrb	r3, [r3, #1]
 800cac2:	4619      	mov	r1, r3
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f000 fb6b 	bl	800d1a0 <USB_DoPing>
        return HAL_OK;
 800caca:	2300      	movs	r3, #0
 800cacc:	e232      	b.n	800cf34 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	799b      	ldrb	r3, [r3, #6]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d158      	bne.n	800cb88 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800cad6:	2301      	movs	r3, #1
 800cad8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	78db      	ldrb	r3, [r3, #3]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d007      	beq.n	800caf2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	8a92      	ldrh	r2, [r2, #20]
 800cae8:	fb03 f202 	mul.w	r2, r3, r2
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	61da      	str	r2, [r3, #28]
 800caf0:	e07c      	b.n	800cbec <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	7c9b      	ldrb	r3, [r3, #18]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d130      	bne.n	800cb5c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	2bbc      	cmp	r3, #188	@ 0xbc
 800cb00:	d918      	bls.n	800cb34 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	8a9b      	ldrh	r3, [r3, #20]
 800cb06:	461a      	mov	r2, r3
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	69da      	ldr	r2, [r3, #28]
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	2b01      	cmp	r3, #1
 800cb1a:	d003      	beq.n	800cb24 <USB_HC_StartXfer+0xdc>
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d103      	bne.n	800cb2c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	2202      	movs	r2, #2
 800cb28:	60da      	str	r2, [r3, #12]
 800cb2a:	e05f      	b.n	800cbec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	60da      	str	r2, [r3, #12]
 800cb32:	e05b      	b.n	800cbec <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	6a1a      	ldr	r2, [r3, #32]
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d007      	beq.n	800cb54 <USB_HC_StartXfer+0x10c>
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	2b02      	cmp	r3, #2
 800cb4a:	d003      	beq.n	800cb54 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	2204      	movs	r2, #4
 800cb50:	60da      	str	r2, [r3, #12]
 800cb52:	e04b      	b.n	800cbec <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	2203      	movs	r2, #3
 800cb58:	60da      	str	r2, [r3, #12]
 800cb5a:	e047      	b.n	800cbec <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800cb5c:	79fb      	ldrb	r3, [r7, #7]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d10d      	bne.n	800cb7e <USB_HC_StartXfer+0x136>
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	6a1b      	ldr	r3, [r3, #32]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	8a92      	ldrh	r2, [r2, #20]
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d907      	bls.n	800cb7e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cb6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	8a92      	ldrh	r2, [r2, #20]
 800cb74:	fb03 f202 	mul.w	r2, r3, r2
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	61da      	str	r2, [r3, #28]
 800cb7c:	e036      	b.n	800cbec <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	6a1a      	ldr	r2, [r3, #32]
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	61da      	str	r2, [r3, #28]
 800cb86:	e031      	b.n	800cbec <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	6a1b      	ldr	r3, [r3, #32]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d018      	beq.n	800cbc2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	6a1b      	ldr	r3, [r3, #32]
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	8a92      	ldrh	r2, [r2, #20]
 800cb98:	4413      	add	r3, r2
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	8a92      	ldrh	r2, [r2, #20]
 800cba0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cba4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800cba6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800cba8:	8b7b      	ldrh	r3, [r7, #26]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d90b      	bls.n	800cbc6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800cbae:	8b7b      	ldrh	r3, [r7, #26]
 800cbb0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cbb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	8a92      	ldrh	r2, [r2, #20]
 800cbb8:	fb03 f202 	mul.w	r2, r3, r2
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	61da      	str	r2, [r3, #28]
 800cbc0:	e001      	b.n	800cbc6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	78db      	ldrb	r3, [r3, #3]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d00a      	beq.n	800cbe4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cbce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cbd0:	68ba      	ldr	r2, [r7, #8]
 800cbd2:	8a92      	ldrh	r2, [r2, #20]
 800cbd4:	fb03 f202 	mul.w	r2, r3, r2
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	61da      	str	r2, [r3, #28]
 800cbdc:	e006      	b.n	800cbec <USB_HC_StartXfer+0x1a4>
 800cbde:	bf00      	nop
 800cbe0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	6a1a      	ldr	r2, [r3, #32]
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	69db      	ldr	r3, [r3, #28]
 800cbf0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cbf4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cbf6:	04d9      	lsls	r1, r3, #19
 800cbf8:	4ba3      	ldr	r3, [pc, #652]	@ (800ce88 <USB_HC_StartXfer+0x440>)
 800cbfa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cbfc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	7d9b      	ldrb	r3, [r3, #22]
 800cc02:	075b      	lsls	r3, r3, #29
 800cc04:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cc08:	69f9      	ldr	r1, [r7, #28]
 800cc0a:	0148      	lsls	r0, r1, #5
 800cc0c:	6a39      	ldr	r1, [r7, #32]
 800cc0e:	4401      	add	r1, r0
 800cc10:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cc14:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cc16:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800cc18:	79fb      	ldrb	r3, [r7, #7]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d009      	beq.n	800cc32 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	6999      	ldr	r1, [r3, #24]
 800cc22:	69fb      	ldr	r3, [r7, #28]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	6a3b      	ldr	r3, [r7, #32]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc2e:	460a      	mov	r2, r1
 800cc30:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	bf0c      	ite	eq
 800cc42:	2301      	moveq	r3, #1
 800cc44:	2300      	movne	r3, #0
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	015a      	lsls	r2, r3, #5
 800cc4e:	6a3b      	ldr	r3, [r7, #32]
 800cc50:	4413      	add	r3, r2
 800cc52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	69fa      	ldr	r2, [r7, #28]
 800cc5a:	0151      	lsls	r1, r2, #5
 800cc5c:	6a3a      	ldr	r2, [r7, #32]
 800cc5e:	440a      	add	r2, r1
 800cc60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cc64:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cc68:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	015a      	lsls	r2, r3, #5
 800cc6e:	6a3b      	ldr	r3, [r7, #32]
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	7e7b      	ldrb	r3, [r7, #25]
 800cc7a:	075b      	lsls	r3, r3, #29
 800cc7c:	69f9      	ldr	r1, [r7, #28]
 800cc7e:	0148      	lsls	r0, r1, #5
 800cc80:	6a39      	ldr	r1, [r7, #32]
 800cc82:	4401      	add	r1, r0
 800cc84:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	799b      	ldrb	r3, [r3, #6]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	f040 80c3 	bne.w	800ce1c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	7c5b      	ldrb	r3, [r3, #17]
 800cc9a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800cca0:	4313      	orrs	r3, r2
 800cca2:	69fa      	ldr	r2, [r7, #28]
 800cca4:	0151      	lsls	r1, r2, #5
 800cca6:	6a3a      	ldr	r2, [r7, #32]
 800cca8:	440a      	add	r2, r1
 800ccaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800ccae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800ccb2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	015a      	lsls	r2, r3, #5
 800ccb8:	6a3b      	ldr	r3, [r7, #32]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	69fa      	ldr	r2, [r7, #28]
 800ccc4:	0151      	lsls	r1, r2, #5
 800ccc6:	6a3a      	ldr	r2, [r7, #32]
 800ccc8:	440a      	add	r2, r1
 800ccca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ccce:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ccd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	79db      	ldrb	r3, [r3, #7]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d123      	bne.n	800cd24 <USB_HC_StartXfer+0x2dc>
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	78db      	ldrb	r3, [r3, #3]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d11f      	bne.n	800cd24 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800cce4:	69fb      	ldr	r3, [r7, #28]
 800cce6:	015a      	lsls	r2, r3, #5
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	4413      	add	r3, r2
 800ccec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	69fa      	ldr	r2, [r7, #28]
 800ccf4:	0151      	lsls	r1, r2, #5
 800ccf6:	6a3a      	ldr	r2, [r7, #32]
 800ccf8:	440a      	add	r2, r1
 800ccfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ccfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd02:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	015a      	lsls	r2, r3, #5
 800cd08:	6a3b      	ldr	r3, [r7, #32]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	69fa      	ldr	r2, [r7, #28]
 800cd14:	0151      	lsls	r1, r2, #5
 800cd16:	6a3a      	ldr	r2, [r7, #32]
 800cd18:	440a      	add	r2, r1
 800cd1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd22:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	7c9b      	ldrb	r3, [r3, #18]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d003      	beq.n	800cd34 <USB_HC_StartXfer+0x2ec>
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	7c9b      	ldrb	r3, [r3, #18]
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d117      	bne.n	800cd64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d113      	bne.n	800cd64 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	78db      	ldrb	r3, [r3, #3]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d10f      	bne.n	800cd64 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	69fa      	ldr	r2, [r7, #28]
 800cd54:	0151      	lsls	r1, r2, #5
 800cd56:	6a3a      	ldr	r2, [r7, #32]
 800cd58:	440a      	add	r2, r1
 800cd5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd62:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	7c9b      	ldrb	r3, [r3, #18]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d162      	bne.n	800ce32 <USB_HC_StartXfer+0x3ea>
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	78db      	ldrb	r3, [r3, #3]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d15e      	bne.n	800ce32 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	2b03      	cmp	r3, #3
 800cd7c:	d858      	bhi.n	800ce30 <USB_HC_StartXfer+0x3e8>
 800cd7e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd84 <USB_HC_StartXfer+0x33c>)
 800cd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd84:	0800cd95 	.word	0x0800cd95
 800cd88:	0800cdb7 	.word	0x0800cdb7
 800cd8c:	0800cdd9 	.word	0x0800cdd9
 800cd90:	0800cdfb 	.word	0x0800cdfb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	015a      	lsls	r2, r3, #5
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	69fa      	ldr	r2, [r7, #28]
 800cda4:	0151      	lsls	r1, r2, #5
 800cda6:	6a3a      	ldr	r2, [r7, #32]
 800cda8:	440a      	add	r2, r1
 800cdaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cdae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdb2:	6053      	str	r3, [r2, #4]
          break;
 800cdb4:	e03d      	b.n	800ce32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	015a      	lsls	r2, r3, #5
 800cdba:	6a3b      	ldr	r3, [r7, #32]
 800cdbc:	4413      	add	r3, r2
 800cdbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	69fa      	ldr	r2, [r7, #28]
 800cdc6:	0151      	lsls	r1, r2, #5
 800cdc8:	6a3a      	ldr	r2, [r7, #32]
 800cdca:	440a      	add	r2, r1
 800cdcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cdd0:	f043 030e 	orr.w	r3, r3, #14
 800cdd4:	6053      	str	r3, [r2, #4]
          break;
 800cdd6:	e02c      	b.n	800ce32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	015a      	lsls	r2, r3, #5
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	4413      	add	r3, r2
 800cde0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	69fa      	ldr	r2, [r7, #28]
 800cde8:	0151      	lsls	r1, r2, #5
 800cdea:	6a3a      	ldr	r2, [r7, #32]
 800cdec:	440a      	add	r2, r1
 800cdee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cdf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cdf6:	6053      	str	r3, [r2, #4]
          break;
 800cdf8:	e01b      	b.n	800ce32 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	015a      	lsls	r2, r3, #5
 800cdfe:	6a3b      	ldr	r3, [r7, #32]
 800ce00:	4413      	add	r3, r2
 800ce02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	69fa      	ldr	r2, [r7, #28]
 800ce0a:	0151      	lsls	r1, r2, #5
 800ce0c:	6a3a      	ldr	r2, [r7, #32]
 800ce0e:	440a      	add	r2, r1
 800ce10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ce14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce18:	6053      	str	r3, [r2, #4]
          break;
 800ce1a:	e00a      	b.n	800ce32 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	015a      	lsls	r2, r3, #5
 800ce20:	6a3b      	ldr	r3, [r7, #32]
 800ce22:	4413      	add	r3, r2
 800ce24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce28:	461a      	mov	r2, r3
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	6053      	str	r3, [r2, #4]
 800ce2e:	e000      	b.n	800ce32 <USB_HC_StartXfer+0x3ea>
          break;
 800ce30:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	015a      	lsls	r2, r3, #5
 800ce36:	6a3b      	ldr	r3, [r7, #32]
 800ce38:	4413      	add	r3, r2
 800ce3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ce48:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	78db      	ldrb	r3, [r3, #3]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d004      	beq.n	800ce5c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce58:	613b      	str	r3, [r7, #16]
 800ce5a:	e003      	b.n	800ce64 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ce62:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ce6a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	015a      	lsls	r2, r3, #5
 800ce70:	6a3b      	ldr	r3, [r7, #32]
 800ce72:	4413      	add	r3, r2
 800ce74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ce78:	461a      	mov	r2, r3
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ce7e:	79fb      	ldrb	r3, [r7, #7]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	e055      	b.n	800cf34 <USB_HC_StartXfer+0x4ec>
 800ce88:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	78db      	ldrb	r3, [r3, #3]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d14e      	bne.n	800cf32 <USB_HC_StartXfer+0x4ea>
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	6a1b      	ldr	r3, [r3, #32]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d04a      	beq.n	800cf32 <USB_HC_StartXfer+0x4ea>
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	79db      	ldrb	r3, [r3, #7]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d146      	bne.n	800cf32 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	7c9b      	ldrb	r3, [r3, #18]
 800cea8:	2b03      	cmp	r3, #3
 800ceaa:	d831      	bhi.n	800cf10 <USB_HC_StartXfer+0x4c8>
 800ceac:	a201      	add	r2, pc, #4	@ (adr r2, 800ceb4 <USB_HC_StartXfer+0x46c>)
 800ceae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb2:	bf00      	nop
 800ceb4:	0800cec5 	.word	0x0800cec5
 800ceb8:	0800cee9 	.word	0x0800cee9
 800cebc:	0800cec5 	.word	0x0800cec5
 800cec0:	0800cee9 	.word	0x0800cee9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	6a1b      	ldr	r3, [r3, #32]
 800cec8:	3303      	adds	r3, #3
 800ceca:	089b      	lsrs	r3, r3, #2
 800cecc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cece:	8afa      	ldrh	r2, [r7, #22]
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ced4:	b29b      	uxth	r3, r3
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d91c      	bls.n	800cf14 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	f043 0220 	orr.w	r2, r3, #32
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	619a      	str	r2, [r3, #24]
        }
        break;
 800cee6:	e015      	b.n	800cf14 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	6a1b      	ldr	r3, [r3, #32]
 800ceec:	3303      	adds	r3, #3
 800ceee:	089b      	lsrs	r3, r3, #2
 800cef0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800cef2:	8afa      	ldrh	r2, [r7, #22]
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cefa:	691b      	ldr	r3, [r3, #16]
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d90a      	bls.n	800cf18 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	699b      	ldr	r3, [r3, #24]
 800cf06:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	619a      	str	r2, [r3, #24]
        }
        break;
 800cf0e:	e003      	b.n	800cf18 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800cf10:	bf00      	nop
 800cf12:	e002      	b.n	800cf1a <USB_HC_StartXfer+0x4d2>
        break;
 800cf14:	bf00      	nop
 800cf16:	e000      	b.n	800cf1a <USB_HC_StartXfer+0x4d2>
        break;
 800cf18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	6999      	ldr	r1, [r3, #24]
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	785a      	ldrb	r2, [r3, #1]
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	6a1b      	ldr	r3, [r3, #32]
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	2000      	movs	r0, #0
 800cf2a:	9000      	str	r0, [sp, #0]
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f7ff f9d5 	bl	800c2dc <USB_WritePacket>
  }

  return HAL_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3728      	adds	r7, #40	@ 0x28
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cf4e:	695b      	ldr	r3, [r3, #20]
 800cf50:	b29b      	uxth	r3, r3
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr

0800cf5e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800cf5e:	b480      	push	{r7}
 800cf60:	b089      	sub	sp, #36	@ 0x24
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	460b      	mov	r3, r1
 800cf68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800cf6e:	78fb      	ldrb	r3, [r7, #3]
 800cf70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800cf72:	2300      	movs	r3, #0
 800cf74:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	015a      	lsls	r2, r3, #5
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	0c9b      	lsrs	r3, r3, #18
 800cf86:	f003 0303 	and.w	r3, r3, #3
 800cf8a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	015a      	lsls	r2, r3, #5
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	4413      	add	r3, r2
 800cf94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	0fdb      	lsrs	r3, r3, #31
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	015a      	lsls	r2, r3, #5
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	0fdb      	lsrs	r3, r3, #31
 800cfb2:	f003 0301 	and.w	r3, r3, #1
 800cfb6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	f003 0320 	and.w	r3, r3, #32
 800cfc0:	2b20      	cmp	r3, #32
 800cfc2:	d10d      	bne.n	800cfe0 <USB_HC_Halt+0x82>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10a      	bne.n	800cfe0 <USB_HC_Halt+0x82>
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d005      	beq.n	800cfdc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d002      	beq.n	800cfdc <USB_HC_Halt+0x7e>
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	2b03      	cmp	r3, #3
 800cfda:	d101      	bne.n	800cfe0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	e0d8      	b.n	800d192 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d002      	beq.n	800cfec <USB_HC_Halt+0x8e>
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	2b02      	cmp	r3, #2
 800cfea:	d173      	bne.n	800d0d4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	69ba      	ldr	r2, [r7, #24]
 800cffc:	0151      	lsls	r1, r2, #5
 800cffe:	69fa      	ldr	r2, [r7, #28]
 800d000:	440a      	add	r2, r1
 800d002:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d006:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d00a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f003 0320 	and.w	r3, r3, #32
 800d014:	2b00      	cmp	r3, #0
 800d016:	d14a      	bne.n	800d0ae <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d01c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d133      	bne.n	800d08c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	015a      	lsls	r2, r3, #5
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	4413      	add	r3, r2
 800d02c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	69ba      	ldr	r2, [r7, #24]
 800d034:	0151      	lsls	r1, r2, #5
 800d036:	69fa      	ldr	r2, [r7, #28]
 800d038:	440a      	add	r2, r1
 800d03a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d03e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d042:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	015a      	lsls	r2, r3, #5
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	4413      	add	r3, r2
 800d04c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	69ba      	ldr	r2, [r7, #24]
 800d054:	0151      	lsls	r1, r2, #5
 800d056:	69fa      	ldr	r2, [r7, #28]
 800d058:	440a      	add	r2, r1
 800d05a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d05e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d062:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	3301      	adds	r3, #1
 800d068:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d070:	d82e      	bhi.n	800d0d0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	015a      	lsls	r2, r3, #5
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	4413      	add	r3, r2
 800d07a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d088:	d0ec      	beq.n	800d064 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d08a:	e081      	b.n	800d190 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	015a      	lsls	r2, r3, #5
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	4413      	add	r3, r2
 800d094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	69ba      	ldr	r2, [r7, #24]
 800d09c:	0151      	lsls	r1, r2, #5
 800d09e:	69fa      	ldr	r2, [r7, #28]
 800d0a0:	440a      	add	r2, r1
 800d0a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d0a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d0aa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d0ac:	e070      	b.n	800d190 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d0ae:	69bb      	ldr	r3, [r7, #24]
 800d0b0:	015a      	lsls	r2, r3, #5
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	4413      	add	r3, r2
 800d0b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	69ba      	ldr	r2, [r7, #24]
 800d0be:	0151      	lsls	r1, r2, #5
 800d0c0:	69fa      	ldr	r2, [r7, #28]
 800d0c2:	440a      	add	r2, r1
 800d0c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d0c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d0cc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d0ce:	e05f      	b.n	800d190 <USB_HC_Halt+0x232>
            break;
 800d0d0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d0d2:	e05d      	b.n	800d190 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	015a      	lsls	r2, r3, #5
 800d0d8:	69fb      	ldr	r3, [r7, #28]
 800d0da:	4413      	add	r3, r2
 800d0dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	69ba      	ldr	r2, [r7, #24]
 800d0e4:	0151      	lsls	r1, r2, #5
 800d0e6:	69fa      	ldr	r2, [r7, #28]
 800d0e8:	440a      	add	r2, r1
 800d0ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d0ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d0f2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d0f4:	69fb      	ldr	r3, [r7, #28]
 800d0f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d100:	2b00      	cmp	r3, #0
 800d102:	d133      	bne.n	800d16c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d104:	69bb      	ldr	r3, [r7, #24]
 800d106:	015a      	lsls	r2, r3, #5
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	4413      	add	r3, r2
 800d10c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	69ba      	ldr	r2, [r7, #24]
 800d114:	0151      	lsls	r1, r2, #5
 800d116:	69fa      	ldr	r2, [r7, #28]
 800d118:	440a      	add	r2, r1
 800d11a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d11e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d122:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	015a      	lsls	r2, r3, #5
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	4413      	add	r3, r2
 800d12c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	69ba      	ldr	r2, [r7, #24]
 800d134:	0151      	lsls	r1, r2, #5
 800d136:	69fa      	ldr	r2, [r7, #28]
 800d138:	440a      	add	r2, r1
 800d13a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d13e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d142:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	3301      	adds	r3, #1
 800d148:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d150:	d81d      	bhi.n	800d18e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	015a      	lsls	r2, r3, #5
 800d156:	69fb      	ldr	r3, [r7, #28]
 800d158:	4413      	add	r3, r2
 800d15a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d164:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d168:	d0ec      	beq.n	800d144 <USB_HC_Halt+0x1e6>
 800d16a:	e011      	b.n	800d190 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	015a      	lsls	r2, r3, #5
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	4413      	add	r3, r2
 800d174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	69ba      	ldr	r2, [r7, #24]
 800d17c:	0151      	lsls	r1, r2, #5
 800d17e:	69fa      	ldr	r2, [r7, #28]
 800d180:	440a      	add	r2, r1
 800d182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d186:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d18a:	6013      	str	r3, [r2, #0]
 800d18c:	e000      	b.n	800d190 <USB_HC_Halt+0x232>
          break;
 800d18e:	bf00      	nop
    }
  }

  return HAL_OK;
 800d190:	2300      	movs	r3, #0
}
 800d192:	4618      	mov	r0, r3
 800d194:	3724      	adds	r7, #36	@ 0x24
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
	...

0800d1a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b087      	sub	sp, #28
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	04da      	lsls	r2, r3, #19
 800d1bc:	4b15      	ldr	r3, [pc, #84]	@ (800d214 <USB_DoPing+0x74>)
 800d1be:	4013      	ands	r3, r2
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	0151      	lsls	r1, r2, #5
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	440a      	add	r2, r1
 800d1c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d1cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d1d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	015a      	lsls	r2, r3, #5
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	4413      	add	r3, r2
 800d1da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d1e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d1f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	015a      	lsls	r2, r3, #5
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d1fe:	461a      	mov	r2, r3
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	371c      	adds	r7, #28
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	1ff80000 	.word	0x1ff80000

0800d218 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b088      	sub	sp, #32
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d220:	2300      	movs	r3, #0
 800d222:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d228:	2300      	movs	r3, #0
 800d22a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7fe ff98 	bl	800c162 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d232:	2110      	movs	r1, #16
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f7fe fff1 	bl	800c21c <USB_FlushTxFifo>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff f81b 	bl	800c280 <USB_FlushRxFifo>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d250:	2301      	movs	r3, #1
 800d252:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d254:	2300      	movs	r3, #0
 800d256:	61bb      	str	r3, [r7, #24]
 800d258:	e01f      	b.n	800d29a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	015a      	lsls	r2, r3, #5
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	4413      	add	r3, r2
 800d262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d270:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d278:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d280:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	015a      	lsls	r2, r3, #5
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	4413      	add	r3, r2
 800d28a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d28e:	461a      	mov	r2, r3
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	3301      	adds	r3, #1
 800d298:	61bb      	str	r3, [r7, #24]
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	2b0f      	cmp	r3, #15
 800d29e:	d9dc      	bls.n	800d25a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	61bb      	str	r3, [r7, #24]
 800d2a4:	e034      	b.n	800d310 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d2bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d2c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d2cc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	015a      	lsls	r2, r3, #5
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d2da:	461a      	mov	r2, r3
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d2ec:	d80c      	bhi.n	800d308 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	015a      	lsls	r2, r3, #5
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d300:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d304:	d0ec      	beq.n	800d2e0 <USB_StopHost+0xc8>
 800d306:	e000      	b.n	800d30a <USB_StopHost+0xf2>
        break;
 800d308:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	3301      	adds	r3, #1
 800d30e:	61bb      	str	r3, [r7, #24]
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	2b0f      	cmp	r3, #15
 800d314:	d9c7      	bls.n	800d2a6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d31c:	461a      	mov	r2, r3
 800d31e:	f04f 33ff 	mov.w	r3, #4294967295
 800d322:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f04f 32ff 	mov.w	r2, #4294967295
 800d32a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f7fe ff07 	bl	800c140 <USB_EnableGlobalInt>

  return ret;
 800d332:	7ffb      	ldrb	r3, [r7, #31]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3720      	adds	r7, #32
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d340:	4904      	ldr	r1, [pc, #16]	@ (800d354 <MX_FATFS_Init+0x18>)
 800d342:	4805      	ldr	r0, [pc, #20]	@ (800d358 <MX_FATFS_Init+0x1c>)
 800d344:	f002 fa64 	bl	800f810 <FATFS_LinkDriver>
 800d348:	4603      	mov	r3, r0
 800d34a:	461a      	mov	r2, r3
 800d34c:	4b03      	ldr	r3, [pc, #12]	@ (800d35c <MX_FATFS_Init+0x20>)
 800d34e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d350:	bf00      	nop
 800d352:	bd80      	pop	{r7, pc}
 800d354:	20000e30 	.word	0x20000e30
 800d358:	080109b4 	.word	0x080109b4
 800d35c:	20000e2c 	.word	0x20000e2c

0800d360 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d36a:	f000 f879 	bl	800d460 <BSP_SD_IsDetected>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b01      	cmp	r3, #1
 800d372:	d001      	beq.n	800d378 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e012      	b.n	800d39e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d378:	480b      	ldr	r0, [pc, #44]	@ (800d3a8 <BSP_SD_Init+0x48>)
 800d37a:	f7fa fe91 	bl	80080a0 <HAL_SD_Init>
 800d37e:	4603      	mov	r3, r0
 800d380:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d382:	79fb      	ldrb	r3, [r7, #7]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d109      	bne.n	800d39c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d388:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d38c:	4806      	ldr	r0, [pc, #24]	@ (800d3a8 <BSP_SD_Init+0x48>)
 800d38e:	f7fb fc6b 	bl	8008c68 <HAL_SD_ConfigWideBusOperation>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d001      	beq.n	800d39c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d39c:	79fb      	ldrb	r3, [r7, #7]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	20000324 	.word	0x20000324

0800d3ac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b088      	sub	sp, #32
 800d3b0:	af02      	add	r7, sp, #8
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
 800d3b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	68f9      	ldr	r1, [r7, #12]
 800d3c8:	4806      	ldr	r0, [pc, #24]	@ (800d3e4 <BSP_SD_ReadBlocks+0x38>)
 800d3ca:	f7fa ff19 	bl	8008200 <HAL_SD_ReadBlocks>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20000324 	.word	0x20000324

0800d3e8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b088      	sub	sp, #32
 800d3ec:	af02      	add	r7, sp, #8
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
 800d3f4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	68ba      	ldr	r2, [r7, #8]
 800d402:	68f9      	ldr	r1, [r7, #12]
 800d404:	4806      	ldr	r0, [pc, #24]	@ (800d420 <BSP_SD_WriteBlocks+0x38>)
 800d406:	f7fb f8d9 	bl	80085bc <HAL_SD_WriteBlocks>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d414:	7dfb      	ldrb	r3, [r7, #23]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	20000324 	.word	0x20000324

0800d424 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d428:	4805      	ldr	r0, [pc, #20]	@ (800d440 <BSP_SD_GetCardState+0x1c>)
 800d42a:	f7fb fcb7 	bl	8008d9c <HAL_SD_GetCardState>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b04      	cmp	r3, #4
 800d432:	bf14      	ite	ne
 800d434:	2301      	movne	r3, #1
 800d436:	2300      	moveq	r3, #0
 800d438:	b2db      	uxtb	r3, r3
}
 800d43a:	4618      	mov	r0, r3
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	20000324 	.word	0x20000324

0800d444 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d44c:	6879      	ldr	r1, [r7, #4]
 800d44e:	4803      	ldr	r0, [pc, #12]	@ (800d45c <BSP_SD_GetCardInfo+0x18>)
 800d450:	f7fb fbde 	bl	8008c10 <HAL_SD_GetCardInfo>
}
 800d454:	bf00      	nop
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20000324 	.word	0x20000324

0800d460 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d466:	2301      	movs	r3, #1
 800d468:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d46a:	f000 f80b 	bl	800d484 <BSP_PlatformIsDetected>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d101      	bne.n	800d478 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d474:	2300      	movs	r3, #0
 800d476:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d478:	79fb      	ldrb	r3, [r7, #7]
 800d47a:	b2db      	uxtb	r3, r3
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d48a:	2301      	movs	r3, #1
 800d48c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d48e:	2104      	movs	r1, #4
 800d490:	4806      	ldr	r0, [pc, #24]	@ (800d4ac <BSP_PlatformIsDetected+0x28>)
 800d492:	f7f6 fda3 	bl	8003fdc <HAL_GPIO_ReadPin>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d49c:	2300      	movs	r3, #0
 800d49e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d4a0:	79fb      	ldrb	r3, [r7, #7]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	40021800 	.word	0x40021800

0800d4b0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d4e8 <SD_CheckStatus+0x38>)
 800d4bc:	2201      	movs	r2, #1
 800d4be:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d4c0:	f7ff ffb0 	bl	800d424 <BSP_SD_GetCardState>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d107      	bne.n	800d4da <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d4ca:	4b07      	ldr	r3, [pc, #28]	@ (800d4e8 <SD_CheckStatus+0x38>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	f023 0301 	bic.w	r3, r3, #1
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	4b04      	ldr	r3, [pc, #16]	@ (800d4e8 <SD_CheckStatus+0x38>)
 800d4d8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d4da:	4b03      	ldr	r3, [pc, #12]	@ (800d4e8 <SD_CheckStatus+0x38>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	b2db      	uxtb	r3, r3
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	2000000d 	.word	0x2000000d

0800d4ec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d4f6:	4b0b      	ldr	r3, [pc, #44]	@ (800d524 <SD_initialize+0x38>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d4fc:	f7ff ff30 	bl	800d360 <BSP_SD_Init>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d107      	bne.n	800d516 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d506:	79fb      	ldrb	r3, [r7, #7]
 800d508:	4618      	mov	r0, r3
 800d50a:	f7ff ffd1 	bl	800d4b0 <SD_CheckStatus>
 800d50e:	4603      	mov	r3, r0
 800d510:	461a      	mov	r2, r3
 800d512:	4b04      	ldr	r3, [pc, #16]	@ (800d524 <SD_initialize+0x38>)
 800d514:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d516:	4b03      	ldr	r3, [pc, #12]	@ (800d524 <SD_initialize+0x38>)
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	b2db      	uxtb	r3, r3
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3708      	adds	r7, #8
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	2000000d 	.word	0x2000000d

0800d528 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d532:	79fb      	ldrb	r3, [r7, #7]
 800d534:	4618      	mov	r0, r3
 800d536:	f7ff ffbb 	bl	800d4b0 <SD_CheckStatus>
 800d53a:	4603      	mov	r3, r0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60b9      	str	r1, [r7, #8]
 800d54c:	607a      	str	r2, [r7, #4]
 800d54e:	603b      	str	r3, [r7, #0]
 800d550:	4603      	mov	r3, r0
 800d552:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d558:	f04f 33ff 	mov.w	r3, #4294967295
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	6879      	ldr	r1, [r7, #4]
 800d560:	68b8      	ldr	r0, [r7, #8]
 800d562:	f7ff ff23 	bl	800d3ac <BSP_SD_ReadBlocks>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d107      	bne.n	800d57c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d56c:	bf00      	nop
 800d56e:	f7ff ff59 	bl	800d424 <BSP_SD_GetCardState>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1fa      	bne.n	800d56e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3718      	adds	r7, #24
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b086      	sub	sp, #24
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
 800d590:	603b      	str	r3, [r7, #0]
 800d592:	4603      	mov	r3, r0
 800d594:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d596:	2301      	movs	r3, #1
 800d598:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d59a:	f04f 33ff 	mov.w	r3, #4294967295
 800d59e:	683a      	ldr	r2, [r7, #0]
 800d5a0:	6879      	ldr	r1, [r7, #4]
 800d5a2:	68b8      	ldr	r0, [r7, #8]
 800d5a4:	f7ff ff20 	bl	800d3e8 <BSP_SD_WriteBlocks>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d107      	bne.n	800d5be <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d5ae:	bf00      	nop
 800d5b0:	f7ff ff38 	bl	800d424 <BSP_SD_GetCardState>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1fa      	bne.n	800d5b0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3718      	adds	r7, #24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b08c      	sub	sp, #48	@ 0x30
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	603a      	str	r2, [r7, #0]
 800d5d2:	71fb      	strb	r3, [r7, #7]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d5de:	4b25      	ldr	r3, [pc, #148]	@ (800d674 <SD_ioctl+0xac>)
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	f003 0301 	and.w	r3, r3, #1
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <SD_ioctl+0x28>
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e03c      	b.n	800d66a <SD_ioctl+0xa2>

  switch (cmd)
 800d5f0:	79bb      	ldrb	r3, [r7, #6]
 800d5f2:	2b03      	cmp	r3, #3
 800d5f4:	d834      	bhi.n	800d660 <SD_ioctl+0x98>
 800d5f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d5fc <SD_ioctl+0x34>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d60d 	.word	0x0800d60d
 800d600:	0800d615 	.word	0x0800d615
 800d604:	0800d62d 	.word	0x0800d62d
 800d608:	0800d647 	.word	0x0800d647
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d612:	e028      	b.n	800d666 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d614:	f107 030c 	add.w	r3, r7, #12
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff ff13 	bl	800d444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d624:	2300      	movs	r3, #0
 800d626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d62a:	e01c      	b.n	800d666 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d62c:	f107 030c 	add.w	r3, r7, #12
 800d630:	4618      	mov	r0, r3
 800d632:	f7ff ff07 	bl	800d444 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d638:	b29a      	uxth	r2, r3
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d644:	e00f      	b.n	800d666 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d646:	f107 030c 	add.w	r3, r7, #12
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7ff fefa 	bl	800d444 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d652:	0a5a      	lsrs	r2, r3, #9
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d65e:	e002      	b.n	800d666 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d660:	2304      	movs	r3, #4
 800d662:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d666:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3730      	adds	r7, #48	@ 0x30
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	2000000d 	.word	0x2000000d

0800d678 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b089      	sub	sp, #36	@ 0x24
 800d67c:	af04      	add	r7, sp, #16
 800d67e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d680:	2301      	movs	r3, #1
 800d682:	2202      	movs	r2, #2
 800d684:	2102      	movs	r1, #2
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 fc85 	bl	800df96 <USBH_FindInterface>
 800d68c:	4603      	mov	r3, r0
 800d68e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	2bff      	cmp	r3, #255	@ 0xff
 800d694:	d002      	beq.n	800d69c <USBH_CDC_InterfaceInit+0x24>
 800d696:	7bfb      	ldrb	r3, [r7, #15]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d901      	bls.n	800d6a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d69c:	2302      	movs	r3, #2
 800d69e:	e13d      	b.n	800d91c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d6a0:	7bfb      	ldrb	r3, [r7, #15]
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f000 fc5a 	bl	800df5e <USBH_SelectInterface>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d6ae:	7bbb      	ldrb	r3, [r7, #14]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d001      	beq.n	800d6b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	e131      	b.n	800d91c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800d6be:	2050      	movs	r0, #80	@ 0x50
 800d6c0:	f002 fbc0 	bl	800fe44 <malloc>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d6ce:	69db      	ldr	r3, [r3, #28]
 800d6d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d6d8:	2302      	movs	r3, #2
 800d6da:	e11f      	b.n	800d91c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d6dc:	2250      	movs	r2, #80	@ 0x50
 800d6de:	2100      	movs	r1, #0
 800d6e0:	68b8      	ldr	r0, [r7, #8]
 800d6e2:	f002 fca1 	bl	8010028 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d6e6:	7bfb      	ldrb	r3, [r7, #15]
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	211a      	movs	r1, #26
 800d6ec:	fb01 f303 	mul.w	r3, r1, r3
 800d6f0:	4413      	add	r3, r2
 800d6f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	b25b      	sxtb	r3, r3
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	da15      	bge.n	800d72a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	211a      	movs	r1, #26
 800d704:	fb01 f303 	mul.w	r3, r1, r3
 800d708:	4413      	add	r3, r2
 800d70a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d70e:	781a      	ldrb	r2, [r3, #0]
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	211a      	movs	r1, #26
 800d71a:	fb01 f303 	mul.w	r3, r1, r3
 800d71e:	4413      	add	r3, r2
 800d720:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d724:	881a      	ldrh	r2, [r3, #0]
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	785b      	ldrb	r3, [r3, #1]
 800d72e:	4619      	mov	r1, r3
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f001 ffbe 	bl	800f6b2 <USBH_AllocPipe>
 800d736:	4603      	mov	r3, r0
 800d738:	461a      	mov	r2, r3
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	7819      	ldrb	r1, [r3, #0]
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	7858      	ldrb	r0, [r3, #1]
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	8952      	ldrh	r2, [r2, #10]
 800d756:	9202      	str	r2, [sp, #8]
 800d758:	2203      	movs	r2, #3
 800d75a:	9201      	str	r2, [sp, #4]
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	4623      	mov	r3, r4
 800d760:	4602      	mov	r2, r0
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f001 ff76 	bl	800f654 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	2200      	movs	r2, #0
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f002 fae1 	bl	800fd38 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d776:	2300      	movs	r3, #0
 800d778:	2200      	movs	r2, #0
 800d77a:	210a      	movs	r1, #10
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 fc0a 	bl	800df96 <USBH_FindInterface>
 800d782:	4603      	mov	r3, r0
 800d784:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d786:	7bfb      	ldrb	r3, [r7, #15]
 800d788:	2bff      	cmp	r3, #255	@ 0xff
 800d78a:	d002      	beq.n	800d792 <USBH_CDC_InterfaceInit+0x11a>
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	d901      	bls.n	800d796 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d792:	2302      	movs	r3, #2
 800d794:	e0c2      	b.n	800d91c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d796:	7bfb      	ldrb	r3, [r7, #15]
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	211a      	movs	r1, #26
 800d79c:	fb01 f303 	mul.w	r3, r1, r3
 800d7a0:	4413      	add	r3, r2
 800d7a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	b25b      	sxtb	r3, r3
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	da16      	bge.n	800d7dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d7ae:	7bfb      	ldrb	r3, [r7, #15]
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	211a      	movs	r1, #26
 800d7b4:	fb01 f303 	mul.w	r3, r1, r3
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d7be:	781a      	ldrb	r2, [r3, #0]
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	211a      	movs	r1, #26
 800d7ca:	fb01 f303 	mul.w	r3, r1, r3
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d7d4:	881a      	ldrh	r2, [r3, #0]
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	835a      	strh	r2, [r3, #26]
 800d7da:	e015      	b.n	800d808 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	211a      	movs	r1, #26
 800d7e2:	fb01 f303 	mul.w	r3, r1, r3
 800d7e6:	4413      	add	r3, r2
 800d7e8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d7ec:	781a      	ldrb	r2, [r3, #0]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d7f2:	7bfb      	ldrb	r3, [r7, #15]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	211a      	movs	r1, #26
 800d7f8:	fb01 f303 	mul.w	r3, r1, r3
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d802:	881a      	ldrh	r2, [r3, #0]
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800d808:	7bfb      	ldrb	r3, [r7, #15]
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	211a      	movs	r1, #26
 800d80e:	fb01 f303 	mul.w	r3, r1, r3
 800d812:	4413      	add	r3, r2
 800d814:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	b25b      	sxtb	r3, r3
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	da16      	bge.n	800d84e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d820:	7bfb      	ldrb	r3, [r7, #15]
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	211a      	movs	r1, #26
 800d826:	fb01 f303 	mul.w	r3, r1, r3
 800d82a:	4413      	add	r3, r2
 800d82c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800d830:	781a      	ldrb	r2, [r3, #0]
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d836:	7bfb      	ldrb	r3, [r7, #15]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	211a      	movs	r1, #26
 800d83c:	fb01 f303 	mul.w	r3, r1, r3
 800d840:	4413      	add	r3, r2
 800d842:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800d846:	881a      	ldrh	r2, [r3, #0]
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	835a      	strh	r2, [r3, #26]
 800d84c:	e015      	b.n	800d87a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	687a      	ldr	r2, [r7, #4]
 800d852:	211a      	movs	r1, #26
 800d854:	fb01 f303 	mul.w	r3, r1, r3
 800d858:	4413      	add	r3, r2
 800d85a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800d85e:	781a      	ldrb	r2, [r3, #0]
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d864:	7bfb      	ldrb	r3, [r7, #15]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	211a      	movs	r1, #26
 800d86a:	fb01 f303 	mul.w	r3, r1, r3
 800d86e:	4413      	add	r3, r2
 800d870:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800d874:	881a      	ldrh	r2, [r3, #0]
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	7b9b      	ldrb	r3, [r3, #14]
 800d87e:	4619      	mov	r1, r3
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f001 ff16 	bl	800f6b2 <USBH_AllocPipe>
 800d886:	4603      	mov	r3, r0
 800d888:	461a      	mov	r2, r3
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	7bdb      	ldrb	r3, [r3, #15]
 800d892:	4619      	mov	r1, r3
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f001 ff0c 	bl	800f6b2 <USBH_AllocPipe>
 800d89a:	4603      	mov	r3, r0
 800d89c:	461a      	mov	r2, r3
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	7b59      	ldrb	r1, [r3, #13]
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	7b98      	ldrb	r0, [r3, #14]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d8b6:	68ba      	ldr	r2, [r7, #8]
 800d8b8:	8b12      	ldrh	r2, [r2, #24]
 800d8ba:	9202      	str	r2, [sp, #8]
 800d8bc:	2202      	movs	r2, #2
 800d8be:	9201      	str	r2, [sp, #4]
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	4623      	mov	r3, r4
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f001 fec4 	bl	800f654 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	7b19      	ldrb	r1, [r3, #12]
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	7bd8      	ldrb	r0, [r3, #15]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	8b52      	ldrh	r2, [r2, #26]
 800d8e4:	9202      	str	r2, [sp, #8]
 800d8e6:	2202      	movs	r2, #2
 800d8e8:	9201      	str	r2, [sp, #4]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	4623      	mov	r3, r4
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f001 feaf 	bl	800f654 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	7b5b      	ldrb	r3, [r3, #13]
 800d902:	2200      	movs	r2, #0
 800d904:	4619      	mov	r1, r3
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f002 fa16 	bl	800fd38 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	7b1b      	ldrb	r3, [r3, #12]
 800d910:	2200      	movs	r2, #0
 800d912:	4619      	mov	r1, r3
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f002 fa0f 	bl	800fd38 <USBH_LL_SetToggle>

  return USBH_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3714      	adds	r7, #20
 800d920:	46bd      	mov	sp, r7
 800d922:	bd90      	pop	{r4, r7, pc}

0800d924 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d932:	69db      	ldr	r3, [r3, #28]
 800d934:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00e      	beq.n	800d95c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	4619      	mov	r1, r3
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f001 fea4 	bl	800f692 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	4619      	mov	r1, r3
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f001 fecf 	bl	800f6f4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2200      	movs	r2, #0
 800d95a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	7b1b      	ldrb	r3, [r3, #12]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d00e      	beq.n	800d982 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	7b1b      	ldrb	r3, [r3, #12]
 800d968:	4619      	mov	r1, r3
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f001 fe91 	bl	800f692 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	7b1b      	ldrb	r3, [r3, #12]
 800d974:	4619      	mov	r1, r3
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f001 febc 	bl	800f6f4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2200      	movs	r2, #0
 800d980:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	7b5b      	ldrb	r3, [r3, #13]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00e      	beq.n	800d9a8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	7b5b      	ldrb	r3, [r3, #13]
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f001 fe7e 	bl	800f692 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	7b5b      	ldrb	r3, [r3, #13]
 800d99a:	4619      	mov	r1, r3
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f001 fea9 	bl	800f6f4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00b      	beq.n	800d9cc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d9ba:	69db      	ldr	r3, [r3, #28]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f002 fa49 	bl	800fe54 <free>
    phost->pActiveClass->pData = 0U;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b084      	sub	sp, #16
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d9e4:	69db      	ldr	r3, [r3, #28]
 800d9e6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3340      	adds	r3, #64	@ 0x40
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 f8b1 	bl	800db56 <GetLineCoding>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800d9f8:	7afb      	ldrb	r3, [r7, #11]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d105      	bne.n	800da0a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800da04:	2102      	movs	r1, #2
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800da0a:	7afb      	ldrb	r3, [r7, #11]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800da1c:	2301      	movs	r3, #1
 800da1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800da2a:	69db      	ldr	r3, [r3, #28]
 800da2c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800da34:	2b04      	cmp	r3, #4
 800da36:	d877      	bhi.n	800db28 <USBH_CDC_Process+0x114>
 800da38:	a201      	add	r2, pc, #4	@ (adr r2, 800da40 <USBH_CDC_Process+0x2c>)
 800da3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3e:	bf00      	nop
 800da40:	0800da55 	.word	0x0800da55
 800da44:	0800da5b 	.word	0x0800da5b
 800da48:	0800da8b 	.word	0x0800da8b
 800da4c:	0800daff 	.word	0x0800daff
 800da50:	0800db0d 	.word	0x0800db0d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800da54:	2300      	movs	r3, #0
 800da56:	73fb      	strb	r3, [r7, #15]
      break;
 800da58:	e06d      	b.n	800db36 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da5e:	4619      	mov	r1, r3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f897 	bl	800db94 <SetLineCoding>
 800da66:	4603      	mov	r3, r0
 800da68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800da6a:	7bbb      	ldrb	r3, [r7, #14]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d104      	bne.n	800da7a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2202      	movs	r2, #2
 800da74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800da78:	e058      	b.n	800db2c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800da7a:	7bbb      	ldrb	r3, [r7, #14]
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d055      	beq.n	800db2c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	2204      	movs	r2, #4
 800da84:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800da88:	e050      	b.n	800db2c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	3340      	adds	r3, #64	@ 0x40
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 f860 	bl	800db56 <GetLineCoding>
 800da96:	4603      	mov	r3, r0
 800da98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800da9a:	7bbb      	ldrb	r3, [r7, #14]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d126      	bne.n	800daee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	2200      	movs	r2, #0
 800daa4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dab2:	791b      	ldrb	r3, [r3, #4]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d13b      	bne.n	800db30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dac2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d133      	bne.n	800db30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dad2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d12b      	bne.n	800db30 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dae0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d124      	bne.n	800db30 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 f958 	bl	800dd9c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800daec:	e020      	b.n	800db30 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d01d      	beq.n	800db30 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2204      	movs	r2, #4
 800daf8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800dafc:	e018      	b.n	800db30 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 f867 	bl	800dbd2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f8da 	bl	800dcbe <CDC_ProcessReception>
      break;
 800db0a:	e014      	b.n	800db36 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800db0c:	2100      	movs	r1, #0
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f001 f81a 	bl	800eb48 <USBH_ClrFeature>
 800db14:	4603      	mov	r3, r0
 800db16:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800db18:	7bbb      	ldrb	r3, [r7, #14]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d10a      	bne.n	800db34 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2200      	movs	r2, #0
 800db22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800db26:	e005      	b.n	800db34 <USBH_CDC_Process+0x120>

    default:
      break;
 800db28:	bf00      	nop
 800db2a:	e004      	b.n	800db36 <USBH_CDC_Process+0x122>
      break;
 800db2c:	bf00      	nop
 800db2e:	e002      	b.n	800db36 <USBH_CDC_Process+0x122>
      break;
 800db30:	bf00      	nop
 800db32:	e000      	b.n	800db36 <USBH_CDC_Process+0x122>
      break;
 800db34:	bf00      	nop

  }

  return status;
 800db36:	7bfb      	ldrb	r3, [r7, #15]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3710      	adds	r7, #16
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800db40:	b480      	push	{r7}
 800db42:	b083      	sub	sp, #12
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b082      	sub	sp, #8
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
 800db5e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	22a1      	movs	r2, #161	@ 0xa1
 800db64:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2221      	movs	r2, #33	@ 0x21
 800db6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2200      	movs	r2, #0
 800db76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2207      	movs	r2, #7
 800db7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	2207      	movs	r2, #7
 800db82:	4619      	mov	r1, r3
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f001 fb14 	bl	800f1b2 <USBH_CtlReq>
 800db8a:	4603      	mov	r3, r0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2221      	movs	r2, #33	@ 0x21
 800dba2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2220      	movs	r2, #32
 800dba8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2207      	movs	r2, #7
 800dbba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	2207      	movs	r2, #7
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f001 faf5 	bl	800f1b2 <USBH_CtlReq>
 800dbc8:	4603      	mov	r3, r0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b086      	sub	sp, #24
 800dbd6:	af02      	add	r7, sp, #8
 800dbd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dbe0:	69db      	ldr	r3, [r3, #28]
 800dbe2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d002      	beq.n	800dbf8 <CDC_ProcessTransmission+0x26>
 800dbf2:	2b02      	cmp	r3, #2
 800dbf4:	d023      	beq.n	800dc3e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800dbf6:	e05e      	b.n	800dcb6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	8b12      	ldrh	r2, [r2, #24]
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d90b      	bls.n	800dc1c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	69d9      	ldr	r1, [r3, #28]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	8b1a      	ldrh	r2, [r3, #24]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	7b5b      	ldrb	r3, [r3, #13]
 800dc10:	2001      	movs	r0, #1
 800dc12:	9000      	str	r0, [sp, #0]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f001 fcda 	bl	800f5ce <USBH_BulkSendData>
 800dc1a:	e00b      	b.n	800dc34 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	7b5b      	ldrb	r3, [r3, #13]
 800dc2a:	2001      	movs	r0, #1
 800dc2c:	9000      	str	r0, [sp, #0]
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f001 fccd 	bl	800f5ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2202      	movs	r2, #2
 800dc38:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800dc3c:	e03b      	b.n	800dcb6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	7b5b      	ldrb	r3, [r3, #13]
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f002 f84d 	bl	800fce4 <USBH_LL_GetURBState>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800dc4e:	7afb      	ldrb	r3, [r7, #11]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d128      	bne.n	800dca6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	8b12      	ldrh	r2, [r2, #24]
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d90e      	bls.n	800dc7e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	8b12      	ldrh	r2, [r2, #24]
 800dc68:	1a9a      	subs	r2, r3, r2
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	69db      	ldr	r3, [r3, #28]
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	8b12      	ldrh	r2, [r2, #24]
 800dc76:	441a      	add	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	61da      	str	r2, [r3, #28]
 800dc7c:	e002      	b.n	800dc84 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d004      	beq.n	800dc96 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800dc94:	e00e      	b.n	800dcb4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 f868 	bl	800dd74 <USBH_CDC_TransmitCallback>
      break;
 800dca4:	e006      	b.n	800dcb4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800dca6:	7afb      	ldrb	r3, [r7, #11]
 800dca8:	2b02      	cmp	r3, #2
 800dcaa:	d103      	bne.n	800dcb4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800dcb4:	bf00      	nop
  }
}
 800dcb6:	bf00      	nop
 800dcb8:	3710      	adds	r7, #16
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b086      	sub	sp, #24
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dccc:	69db      	ldr	r3, [r3, #28]
 800dcce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800dcda:	2b03      	cmp	r3, #3
 800dcdc:	d002      	beq.n	800dce4 <CDC_ProcessReception+0x26>
 800dcde:	2b04      	cmp	r3, #4
 800dce0:	d00e      	beq.n	800dd00 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800dce2:	e043      	b.n	800dd6c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	6a19      	ldr	r1, [r3, #32]
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	8b5a      	ldrh	r2, [r3, #26]
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	7b1b      	ldrb	r3, [r3, #12]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f001 fc91 	bl	800f618 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	2204      	movs	r2, #4
 800dcfa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800dcfe:	e035      	b.n	800dd6c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	7b1b      	ldrb	r3, [r3, #12]
 800dd04:	4619      	mov	r1, r3
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f001 ffec 	bl	800fce4 <USBH_LL_GetURBState>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800dd10:	7cfb      	ldrb	r3, [r7, #19]
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d129      	bne.n	800dd6a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	7b1b      	ldrb	r3, [r3, #12]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f001 ff4f 	bl	800fbc0 <USBH_LL_GetLastXferSize>
 800dd22:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd28:	68fa      	ldr	r2, [r7, #12]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d016      	beq.n	800dd5c <CDC_ProcessReception+0x9e>
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	8b5b      	ldrh	r3, [r3, #26]
 800dd32:	461a      	mov	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d110      	bne.n	800dd5c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	1ad2      	subs	r2, r2, r3
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	6a1a      	ldr	r2, [r3, #32]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	441a      	add	r2, r3
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2203      	movs	r2, #3
 800dd56:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800dd5a:	e006      	b.n	800dd6a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 f80f 	bl	800dd88 <USBH_CDC_ReceiveCallback>
      break;
 800dd6a:	bf00      	nop
  }
}
 800dd6c:	bf00      	nop
 800dd6e:	3718      	adds	r7, #24
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b083      	sub	sp, #12
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dd7c:	bf00      	nop
 800dd7e:	370c      	adds	r7, #12
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dd90:	bf00      	nop
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dda4:	bf00      	nop
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d101      	bne.n	800ddc8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	e029      	b.n	800de1c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	79fa      	ldrb	r2, [r7, #7]
 800ddcc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f000 f81f 	bl	800de24 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	2200      	movs	r2, #0
 800de02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d003      	beq.n	800de14 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	68ba      	ldr	r2, [r7, #8]
 800de10:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800de14:	68f8      	ldr	r0, [r7, #12]
 800de16:	f001 fe1f 	bl	800fa58 <USBH_LL_Init>

  return USBH_OK;
 800de1a:	2300      	movs	r3, #0
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3710      	adds	r7, #16
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800de2c:	2300      	movs	r3, #0
 800de2e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800de30:	2300      	movs	r3, #0
 800de32:	60fb      	str	r3, [r7, #12]
 800de34:	e009      	b.n	800de4a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800de36:	687a      	ldr	r2, [r7, #4]
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	33e0      	adds	r3, #224	@ 0xe0
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	2200      	movs	r2, #0
 800de42:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	3301      	adds	r3, #1
 800de48:	60fb      	str	r3, [r7, #12]
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2b0f      	cmp	r3, #15
 800de4e:	d9f2      	bls.n	800de36 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800de50:	2300      	movs	r3, #0
 800de52:	60fb      	str	r3, [r7, #12]
 800de54:	e009      	b.n	800de6a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	4413      	add	r3, r2
 800de5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800de60:	2200      	movs	r2, #0
 800de62:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	3301      	adds	r3, #1
 800de68:	60fb      	str	r3, [r7, #12]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800de70:	d3f1      	bcc.n	800de56 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2201      	movs	r2, #1
 800de82:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2201      	movs	r2, #1
 800de90:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2240      	movs	r2, #64	@ 0x40
 800de96:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2200      	movs	r2, #0
 800de9c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2201      	movs	r2, #1
 800deaa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	331c      	adds	r3, #28
 800dec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dec6:	2100      	movs	r1, #0
 800dec8:	4618      	mov	r0, r3
 800deca:	f002 f8ad 	bl	8010028 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ded4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ded8:	2100      	movs	r1, #0
 800deda:	4618      	mov	r0, r3
 800dedc:	f002 f8a4 	bl	8010028 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800dee6:	2212      	movs	r2, #18
 800dee8:	2100      	movs	r1, #0
 800deea:	4618      	mov	r0, r3
 800deec:	f002 f89c 	bl	8010028 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800def6:	223e      	movs	r2, #62	@ 0x3e
 800def8:	2100      	movs	r1, #0
 800defa:	4618      	mov	r0, r3
 800defc:	f002 f894 	bl	8010028 <memset>

  return USBH_OK;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3710      	adds	r7, #16
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800df0a:	b480      	push	{r7}
 800df0c:	b085      	sub	sp, #20
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800df14:	2300      	movs	r3, #0
 800df16:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d016      	beq.n	800df4c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10e      	bne.n	800df46 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800df2e:	1c59      	adds	r1, r3, #1
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	33de      	adds	r3, #222	@ 0xde
 800df3a:	6839      	ldr	r1, [r7, #0]
 800df3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800df40:	2300      	movs	r3, #0
 800df42:	73fb      	strb	r3, [r7, #15]
 800df44:	e004      	b.n	800df50 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800df46:	2302      	movs	r3, #2
 800df48:	73fb      	strb	r3, [r7, #15]
 800df4a:	e001      	b.n	800df50 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800df4c:	2302      	movs	r3, #2
 800df4e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800df50:	7bfb      	ldrb	r3, [r7, #15]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3714      	adds	r7, #20
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800df5e:	b480      	push	{r7}
 800df60:	b085      	sub	sp, #20
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	460b      	mov	r3, r1
 800df68:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800df6a:	2300      	movs	r3, #0
 800df6c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800df74:	78fa      	ldrb	r2, [r7, #3]
 800df76:	429a      	cmp	r2, r3
 800df78:	d204      	bcs.n	800df84 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	78fa      	ldrb	r2, [r7, #3]
 800df7e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800df82:	e001      	b.n	800df88 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800df84:	2302      	movs	r3, #2
 800df86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800df88:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800df96:	b480      	push	{r7}
 800df98:	b087      	sub	sp, #28
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	4608      	mov	r0, r1
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	70fb      	strb	r3, [r7, #3]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	70bb      	strb	r3, [r7, #2]
 800dfac:	4613      	mov	r3, r2
 800dfae:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800dfbe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800dfc0:	e025      	b.n	800e00e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800dfc2:	7dfb      	ldrb	r3, [r7, #23]
 800dfc4:	221a      	movs	r2, #26
 800dfc6:	fb02 f303 	mul.w	r3, r2, r3
 800dfca:	3308      	adds	r3, #8
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	4413      	add	r3, r2
 800dfd0:	3302      	adds	r3, #2
 800dfd2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	795b      	ldrb	r3, [r3, #5]
 800dfd8:	78fa      	ldrb	r2, [r7, #3]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d002      	beq.n	800dfe4 <USBH_FindInterface+0x4e>
 800dfde:	78fb      	ldrb	r3, [r7, #3]
 800dfe0:	2bff      	cmp	r3, #255	@ 0xff
 800dfe2:	d111      	bne.n	800e008 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800dfe8:	78ba      	ldrb	r2, [r7, #2]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d002      	beq.n	800dff4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dfee:	78bb      	ldrb	r3, [r7, #2]
 800dff0:	2bff      	cmp	r3, #255	@ 0xff
 800dff2:	d109      	bne.n	800e008 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dff4:	693b      	ldr	r3, [r7, #16]
 800dff6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800dff8:	787a      	ldrb	r2, [r7, #1]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d002      	beq.n	800e004 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800dffe:	787b      	ldrb	r3, [r7, #1]
 800e000:	2bff      	cmp	r3, #255	@ 0xff
 800e002:	d101      	bne.n	800e008 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e004:	7dfb      	ldrb	r3, [r7, #23]
 800e006:	e006      	b.n	800e016 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e008:	7dfb      	ldrb	r3, [r7, #23]
 800e00a:	3301      	adds	r3, #1
 800e00c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d9d6      	bls.n	800dfc2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e014:	23ff      	movs	r3, #255	@ 0xff
}
 800e016:	4618      	mov	r0, r3
 800e018:	371c      	adds	r7, #28
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr

0800e022 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b082      	sub	sp, #8
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f001 fd50 	bl	800fad0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800e030:	2101      	movs	r1, #1
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f001 fe69 	bl	800fd0a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3708      	adds	r7, #8
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
	...

0800e044 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b088      	sub	sp, #32
 800e048:	af04      	add	r7, sp, #16
 800e04a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e04c:	2302      	movs	r3, #2
 800e04e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e050:	2300      	movs	r3, #0
 800e052:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d102      	bne.n	800e066 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2203      	movs	r2, #3
 800e064:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	2b0b      	cmp	r3, #11
 800e06e:	f200 81bb 	bhi.w	800e3e8 <USBH_Process+0x3a4>
 800e072:	a201      	add	r2, pc, #4	@ (adr r2, 800e078 <USBH_Process+0x34>)
 800e074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e078:	0800e0a9 	.word	0x0800e0a9
 800e07c:	0800e0db 	.word	0x0800e0db
 800e080:	0800e143 	.word	0x0800e143
 800e084:	0800e383 	.word	0x0800e383
 800e088:	0800e3e9 	.word	0x0800e3e9
 800e08c:	0800e1e3 	.word	0x0800e1e3
 800e090:	0800e329 	.word	0x0800e329
 800e094:	0800e219 	.word	0x0800e219
 800e098:	0800e239 	.word	0x0800e239
 800e09c:	0800e257 	.word	0x0800e257
 800e0a0:	0800e29b 	.word	0x0800e29b
 800e0a4:	0800e36b 	.word	0x0800e36b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f000 819b 	beq.w	800e3ec <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e0bc:	20c8      	movs	r0, #200	@ 0xc8
 800e0be:	f001 fe6e 	bl	800fd9e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f001 fd61 	bl	800fb8a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e0d8:	e188      	b.n	800e3ec <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d107      	bne.n	800e0f4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e0f2:	e18a      	b.n	800e40a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800e0fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e0fe:	d914      	bls.n	800e12a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800e106:	3301      	adds	r3, #1
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800e116:	2b03      	cmp	r3, #3
 800e118:	d903      	bls.n	800e122 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	220d      	movs	r2, #13
 800e11e:	701a      	strb	r2, [r3, #0]
      break;
 800e120:	e173      	b.n	800e40a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	701a      	strb	r2, [r3, #0]
      break;
 800e128:	e16f      	b.n	800e40a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800e130:	f103 020a 	add.w	r2, r3, #10
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800e13a:	200a      	movs	r0, #10
 800e13c:	f001 fe2f 	bl	800fd9e <USBH_Delay>
      break;
 800e140:	e163      	b.n	800e40a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d005      	beq.n	800e158 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e152:	2104      	movs	r1, #4
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e158:	2064      	movs	r0, #100	@ 0x64
 800e15a:	f001 fe20 	bl	800fd9e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f001 fcec 	bl	800fb3c <USBH_LL_GetSpeed>
 800e164:	4603      	mov	r3, r0
 800e166:	461a      	mov	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2205      	movs	r2, #5
 800e172:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e174:	2100      	movs	r1, #0
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f001 fa9b 	bl	800f6b2 <USBH_AllocPipe>
 800e17c:	4603      	mov	r3, r0
 800e17e:	461a      	mov	r2, r3
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e184:	2180      	movs	r1, #128	@ 0x80
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f001 fa93 	bl	800f6b2 <USBH_AllocPipe>
 800e18c:	4603      	mov	r3, r0
 800e18e:	461a      	mov	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	7919      	ldrb	r1, [r3, #4]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e1a4:	687a      	ldr	r2, [r7, #4]
 800e1a6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e1a8:	9202      	str	r2, [sp, #8]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	9201      	str	r2, [sp, #4]
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2280      	movs	r2, #128	@ 0x80
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f001 fa4d 	bl	800f654 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	7959      	ldrb	r1, [r3, #5]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e1ce:	9202      	str	r2, [sp, #8]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	9201      	str	r2, [sp, #4]
 800e1d4:	9300      	str	r3, [sp, #0]
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2200      	movs	r2, #0
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f001 fa3a 	bl	800f654 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e1e0:	e113      	b.n	800e40a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 f916 	bl	800e414 <USBH_HandleEnum>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e1ec:	7bbb      	ldrb	r3, [r7, #14]
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	f040 80fd 	bne.w	800e3f0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800e204:	2b01      	cmp	r3, #1
 800e206:	d103      	bne.n	800e210 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2208      	movs	r2, #8
 800e20c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e20e:	e0ef      	b.n	800e3f0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2207      	movs	r2, #7
 800e214:	701a      	strb	r2, [r3, #0]
      break;
 800e216:	e0eb      	b.n	800e3f0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e21e:	2b00      	cmp	r3, #0
 800e220:	f000 80e8 	beq.w	800e3f4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e22a:	2101      	movs	r1, #1
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2208      	movs	r2, #8
 800e234:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800e236:	e0dd      	b.n	800e3f4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800e23e:	4619      	mov	r1, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 fc3a 	bl	800eaba <USBH_SetCfg>
 800e246:	4603      	mov	r3, r0
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f040 80d5 	bne.w	800e3f8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2209      	movs	r2, #9
 800e252:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e254:	e0d0      	b.n	800e3f8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800e25c:	f003 0320 	and.w	r3, r3, #32
 800e260:	2b00      	cmp	r3, #0
 800e262:	d016      	beq.n	800e292 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e264:	2101      	movs	r1, #1
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fc4a 	bl	800eb00 <USBH_SetFeature>
 800e26c:	4603      	mov	r3, r0
 800e26e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e270:	7bbb      	ldrb	r3, [r7, #14]
 800e272:	b2db      	uxtb	r3, r3
 800e274:	2b00      	cmp	r3, #0
 800e276:	d103      	bne.n	800e280 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	220a      	movs	r2, #10
 800e27c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e27e:	e0bd      	b.n	800e3fc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800e280:	7bbb      	ldrb	r3, [r7, #14]
 800e282:	b2db      	uxtb	r3, r3
 800e284:	2b03      	cmp	r3, #3
 800e286:	f040 80b9 	bne.w	800e3fc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	220a      	movs	r2, #10
 800e28e:	701a      	strb	r2, [r3, #0]
      break;
 800e290:	e0b4      	b.n	800e3fc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	220a      	movs	r2, #10
 800e296:	701a      	strb	r2, [r3, #0]
      break;
 800e298:	e0b0      	b.n	800e3fc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f000 80ad 	beq.w	800e400 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	73fb      	strb	r3, [r7, #15]
 800e2b2:	e016      	b.n	800e2e2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e2b4:	7bfa      	ldrb	r2, [r7, #15]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	32de      	adds	r2, #222	@ 0xde
 800e2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2be:	791a      	ldrb	r2, [r3, #4]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d108      	bne.n	800e2dc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e2ca:	7bfa      	ldrb	r2, [r7, #15]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	32de      	adds	r2, #222	@ 0xde
 800e2d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800e2da:	e005      	b.n	800e2e8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	73fb      	strb	r3, [r7, #15]
 800e2e2:	7bfb      	ldrb	r3, [r7, #15]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d0e5      	beq.n	800e2b4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d016      	beq.n	800e320 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	4798      	blx	r3
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d109      	bne.n	800e318 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2206      	movs	r2, #6
 800e308:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e310:	2103      	movs	r1, #3
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e316:	e073      	b.n	800e400 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	220d      	movs	r2, #13
 800e31c:	701a      	strb	r2, [r3, #0]
      break;
 800e31e:	e06f      	b.n	800e400 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	220d      	movs	r2, #13
 800e324:	701a      	strb	r2, [r3, #0]
      break;
 800e326:	e06b      	b.n	800e400 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d017      	beq.n	800e362 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	4798      	blx	r3
 800e33e:	4603      	mov	r3, r0
 800e340:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e342:	7bbb      	ldrb	r3, [r7, #14]
 800e344:	b2db      	uxtb	r3, r3
 800e346:	2b00      	cmp	r3, #0
 800e348:	d103      	bne.n	800e352 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	220b      	movs	r2, #11
 800e34e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e350:	e058      	b.n	800e404 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800e352:	7bbb      	ldrb	r3, [r7, #14]
 800e354:	b2db      	uxtb	r3, r3
 800e356:	2b02      	cmp	r3, #2
 800e358:	d154      	bne.n	800e404 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	220d      	movs	r2, #13
 800e35e:	701a      	strb	r2, [r3, #0]
      break;
 800e360:	e050      	b.n	800e404 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	220d      	movs	r2, #13
 800e366:	701a      	strb	r2, [r3, #0]
      break;
 800e368:	e04c      	b.n	800e404 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e370:	2b00      	cmp	r3, #0
 800e372:	d049      	beq.n	800e408 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e37a:	695b      	ldr	r3, [r3, #20]
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	4798      	blx	r3
      }
      break;
 800e380:	e042      	b.n	800e408 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f7ff fd4a 	bl	800de24 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e396:	2b00      	cmp	r3, #0
 800e398:	d009      	beq.n	800e3ae <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d005      	beq.n	800e3c4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e3be:	2105      	movs	r1, #5
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b01      	cmp	r3, #1
 800e3ce:	d107      	bne.n	800e3e0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7ff fe22 	bl	800e022 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e3de:	e014      	b.n	800e40a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f001 fb75 	bl	800fad0 <USBH_LL_Start>
      break;
 800e3e6:	e010      	b.n	800e40a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e3e8:	bf00      	nop
 800e3ea:	e00e      	b.n	800e40a <USBH_Process+0x3c6>
      break;
 800e3ec:	bf00      	nop
 800e3ee:	e00c      	b.n	800e40a <USBH_Process+0x3c6>
      break;
 800e3f0:	bf00      	nop
 800e3f2:	e00a      	b.n	800e40a <USBH_Process+0x3c6>
    break;
 800e3f4:	bf00      	nop
 800e3f6:	e008      	b.n	800e40a <USBH_Process+0x3c6>
      break;
 800e3f8:	bf00      	nop
 800e3fa:	e006      	b.n	800e40a <USBH_Process+0x3c6>
      break;
 800e3fc:	bf00      	nop
 800e3fe:	e004      	b.n	800e40a <USBH_Process+0x3c6>
      break;
 800e400:	bf00      	nop
 800e402:	e002      	b.n	800e40a <USBH_Process+0x3c6>
      break;
 800e404:	bf00      	nop
 800e406:	e000      	b.n	800e40a <USBH_Process+0x3c6>
      break;
 800e408:	bf00      	nop
  }
  return USBH_OK;
 800e40a:	2300      	movs	r3, #0
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3710      	adds	r7, #16
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b088      	sub	sp, #32
 800e418:	af04      	add	r7, sp, #16
 800e41a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e41c:	2301      	movs	r3, #1
 800e41e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e420:	2301      	movs	r3, #1
 800e422:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	785b      	ldrb	r3, [r3, #1]
 800e428:	2b07      	cmp	r3, #7
 800e42a:	f200 81bd 	bhi.w	800e7a8 <USBH_HandleEnum+0x394>
 800e42e:	a201      	add	r2, pc, #4	@ (adr r2, 800e434 <USBH_HandleEnum+0x20>)
 800e430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e434:	0800e455 	.word	0x0800e455
 800e438:	0800e50f 	.word	0x0800e50f
 800e43c:	0800e579 	.word	0x0800e579
 800e440:	0800e603 	.word	0x0800e603
 800e444:	0800e66d 	.word	0x0800e66d
 800e448:	0800e6dd 	.word	0x0800e6dd
 800e44c:	0800e723 	.word	0x0800e723
 800e450:	0800e769 	.word	0x0800e769
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e454:	2108      	movs	r1, #8
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f000 fa4c 	bl	800e8f4 <USBH_Get_DevDesc>
 800e45c:	4603      	mov	r3, r0
 800e45e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e460:	7bbb      	ldrb	r3, [r7, #14]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d12e      	bne.n	800e4c4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2201      	movs	r2, #1
 800e474:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	7919      	ldrb	r1, [r3, #4]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e48a:	9202      	str	r2, [sp, #8]
 800e48c:	2200      	movs	r2, #0
 800e48e:	9201      	str	r2, [sp, #4]
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	4603      	mov	r3, r0
 800e494:	2280      	movs	r2, #128	@ 0x80
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 f8dc 	bl	800f654 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	7959      	ldrb	r1, [r3, #5]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e4b0:	9202      	str	r2, [sp, #8]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	9201      	str	r2, [sp, #4]
 800e4b6:	9300      	str	r3, [sp, #0]
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f001 f8c9 	bl	800f654 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e4c2:	e173      	b.n	800e7ac <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e4c4:	7bbb      	ldrb	r3, [r7, #14]
 800e4c6:	2b03      	cmp	r3, #3
 800e4c8:	f040 8170 	bne.w	800e7ac <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d903      	bls.n	800e4ee <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	220d      	movs	r2, #13
 800e4ea:	701a      	strb	r2, [r3, #0]
      break;
 800e4ec:	e15e      	b.n	800e7ac <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	795b      	ldrb	r3, [r3, #5]
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f001 f8fd 	bl	800f6f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	791b      	ldrb	r3, [r3, #4]
 800e4fe:	4619      	mov	r1, r3
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f001 f8f7 	bl	800f6f4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	701a      	strb	r2, [r3, #0]
      break;
 800e50c:	e14e      	b.n	800e7ac <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e50e:	2112      	movs	r1, #18
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 f9ef 	bl	800e8f4 <USBH_Get_DevDesc>
 800e516:	4603      	mov	r3, r0
 800e518:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e51a:	7bbb      	ldrb	r3, [r7, #14]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d103      	bne.n	800e528 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2202      	movs	r2, #2
 800e524:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e526:	e143      	b.n	800e7b0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e528:	7bbb      	ldrb	r3, [r7, #14]
 800e52a:	2b03      	cmp	r3, #3
 800e52c:	f040 8140 	bne.w	800e7b0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e536:	3301      	adds	r3, #1
 800e538:	b2da      	uxtb	r2, r3
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e546:	2b03      	cmp	r3, #3
 800e548:	d903      	bls.n	800e552 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	220d      	movs	r2, #13
 800e54e:	701a      	strb	r2, [r3, #0]
      break;
 800e550:	e12e      	b.n	800e7b0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	795b      	ldrb	r3, [r3, #5]
 800e556:	4619      	mov	r1, r3
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	f001 f8cb 	bl	800f6f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	791b      	ldrb	r3, [r3, #4]
 800e562:	4619      	mov	r1, r3
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f001 f8c5 	bl	800f6f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2200      	movs	r2, #0
 800e56e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	701a      	strb	r2, [r3, #0]
      break;
 800e576:	e11b      	b.n	800e7b0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e578:	2101      	movs	r1, #1
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 fa79 	bl	800ea72 <USBH_SetAddress>
 800e580:	4603      	mov	r3, r0
 800e582:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e584:	7bbb      	ldrb	r3, [r7, #14]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d130      	bne.n	800e5ec <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800e58a:	2002      	movs	r0, #2
 800e58c:	f001 fc07 	bl	800fd9e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2203      	movs	r2, #3
 800e59c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	7919      	ldrb	r1, [r3, #4]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e5b2:	9202      	str	r2, [sp, #8]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	9201      	str	r2, [sp, #4]
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	2280      	movs	r2, #128	@ 0x80
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f001 f848 	bl	800f654 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	7959      	ldrb	r1, [r3, #5]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e5d8:	9202      	str	r2, [sp, #8]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	9201      	str	r2, [sp, #4]
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f001 f835 	bl	800f654 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e5ea:	e0e3      	b.n	800e7b4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e5ec:	7bbb      	ldrb	r3, [r7, #14]
 800e5ee:	2b03      	cmp	r3, #3
 800e5f0:	f040 80e0 	bne.w	800e7b4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	220d      	movs	r2, #13
 800e5f8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	705a      	strb	r2, [r3, #1]
      break;
 800e600:	e0d8      	b.n	800e7b4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e602:	2109      	movs	r1, #9
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 f9a1 	bl	800e94c <USBH_Get_CfgDesc>
 800e60a:	4603      	mov	r3, r0
 800e60c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e60e:	7bbb      	ldrb	r3, [r7, #14]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d103      	bne.n	800e61c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2204      	movs	r2, #4
 800e618:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e61a:	e0cd      	b.n	800e7b8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e61c:	7bbb      	ldrb	r3, [r7, #14]
 800e61e:	2b03      	cmp	r3, #3
 800e620:	f040 80ca 	bne.w	800e7b8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e62a:	3301      	adds	r3, #1
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e63a:	2b03      	cmp	r3, #3
 800e63c:	d903      	bls.n	800e646 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	220d      	movs	r2, #13
 800e642:	701a      	strb	r2, [r3, #0]
      break;
 800e644:	e0b8      	b.n	800e7b8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	795b      	ldrb	r3, [r3, #5]
 800e64a:	4619      	mov	r1, r3
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f001 f851 	bl	800f6f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	791b      	ldrb	r3, [r3, #4]
 800e656:	4619      	mov	r1, r3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f001 f84b 	bl	800f6f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2200      	movs	r2, #0
 800e662:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	701a      	strb	r2, [r3, #0]
      break;
 800e66a:	e0a5      	b.n	800e7b8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800e672:	4619      	mov	r1, r3
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	f000 f969 	bl	800e94c <USBH_Get_CfgDesc>
 800e67a:	4603      	mov	r3, r0
 800e67c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e67e:	7bbb      	ldrb	r3, [r7, #14]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d103      	bne.n	800e68c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2205      	movs	r2, #5
 800e688:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e68a:	e097      	b.n	800e7bc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e68c:	7bbb      	ldrb	r3, [r7, #14]
 800e68e:	2b03      	cmp	r3, #3
 800e690:	f040 8094 	bne.w	800e7bc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e69a:	3301      	adds	r3, #1
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e6aa:	2b03      	cmp	r3, #3
 800e6ac:	d903      	bls.n	800e6b6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	220d      	movs	r2, #13
 800e6b2:	701a      	strb	r2, [r3, #0]
      break;
 800e6b4:	e082      	b.n	800e7bc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	795b      	ldrb	r3, [r3, #5]
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f001 f819 	bl	800f6f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	791b      	ldrb	r3, [r3, #4]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f001 f813 	bl	800f6f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	701a      	strb	r2, [r3, #0]
      break;
 800e6da:	e06f      	b.n	800e7bc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d019      	beq.n	800e71a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e6f2:	23ff      	movs	r3, #255	@ 0xff
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f000 f953 	bl	800e9a0 <USBH_Get_StringDesc>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e6fe:	7bbb      	ldrb	r3, [r7, #14]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d103      	bne.n	800e70c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2206      	movs	r2, #6
 800e708:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e70a:	e059      	b.n	800e7c0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e70c:	7bbb      	ldrb	r3, [r7, #14]
 800e70e:	2b03      	cmp	r3, #3
 800e710:	d156      	bne.n	800e7c0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2206      	movs	r2, #6
 800e716:	705a      	strb	r2, [r3, #1]
      break;
 800e718:	e052      	b.n	800e7c0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2206      	movs	r2, #6
 800e71e:	705a      	strb	r2, [r3, #1]
      break;
 800e720:	e04e      	b.n	800e7c0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d019      	beq.n	800e760 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e738:	23ff      	movs	r3, #255	@ 0xff
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 f930 	bl	800e9a0 <USBH_Get_StringDesc>
 800e740:	4603      	mov	r3, r0
 800e742:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e744:	7bbb      	ldrb	r3, [r7, #14]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d103      	bne.n	800e752 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2207      	movs	r2, #7
 800e74e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e750:	e038      	b.n	800e7c4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e752:	7bbb      	ldrb	r3, [r7, #14]
 800e754:	2b03      	cmp	r3, #3
 800e756:	d135      	bne.n	800e7c4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2207      	movs	r2, #7
 800e75c:	705a      	strb	r2, [r3, #1]
      break;
 800e75e:	e031      	b.n	800e7c4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2207      	movs	r2, #7
 800e764:	705a      	strb	r2, [r3, #1]
      break;
 800e766:	e02d      	b.n	800e7c4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d017      	beq.n	800e7a2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e77e:	23ff      	movs	r3, #255	@ 0xff
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 f90d 	bl	800e9a0 <USBH_Get_StringDesc>
 800e786:	4603      	mov	r3, r0
 800e788:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e78a:	7bbb      	ldrb	r3, [r7, #14]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d102      	bne.n	800e796 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e790:	2300      	movs	r3, #0
 800e792:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e794:	e018      	b.n	800e7c8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e796:	7bbb      	ldrb	r3, [r7, #14]
 800e798:	2b03      	cmp	r3, #3
 800e79a:	d115      	bne.n	800e7c8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800e79c:	2300      	movs	r3, #0
 800e79e:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a0:	e012      	b.n	800e7c8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a6:	e00f      	b.n	800e7c8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800e7a8:	bf00      	nop
 800e7aa:	e00e      	b.n	800e7ca <USBH_HandleEnum+0x3b6>
      break;
 800e7ac:	bf00      	nop
 800e7ae:	e00c      	b.n	800e7ca <USBH_HandleEnum+0x3b6>
      break;
 800e7b0:	bf00      	nop
 800e7b2:	e00a      	b.n	800e7ca <USBH_HandleEnum+0x3b6>
      break;
 800e7b4:	bf00      	nop
 800e7b6:	e008      	b.n	800e7ca <USBH_HandleEnum+0x3b6>
      break;
 800e7b8:	bf00      	nop
 800e7ba:	e006      	b.n	800e7ca <USBH_HandleEnum+0x3b6>
      break;
 800e7bc:	bf00      	nop
 800e7be:	e004      	b.n	800e7ca <USBH_HandleEnum+0x3b6>
      break;
 800e7c0:	bf00      	nop
 800e7c2:	e002      	b.n	800e7ca <USBH_HandleEnum+0x3b6>
      break;
 800e7c4:	bf00      	nop
 800e7c6:	e000      	b.n	800e7ca <USBH_HandleEnum+0x3b6>
      break;
 800e7c8:	bf00      	nop
  }
  return Status;
 800e7ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3710      	adds	r7, #16
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	683a      	ldr	r2, [r7, #0]
 800e7e2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800e7e6:	bf00      	nop
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b082      	sub	sp, #8
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 f804 	bl	800e816 <USBH_HandleSof>
}
 800e80e:	bf00      	nop
 800e810:	3708      	adds	r7, #8
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e816:	b580      	push	{r7, lr}
 800e818:	b082      	sub	sp, #8
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	b2db      	uxtb	r3, r3
 800e824:	2b0b      	cmp	r3, #11
 800e826:	d10a      	bne.n	800e83e <USBH_HandleSof+0x28>
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d005      	beq.n	800e83e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e838:	699b      	ldr	r3, [r3, #24]
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	4798      	blx	r3
  }
}
 800e83e:	bf00      	nop
 800e840:	3708      	adds	r7, #8
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e846:	b480      	push	{r7}
 800e848:	b083      	sub	sp, #12
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2201      	movs	r2, #1
 800e852:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800e856:	bf00      	nop
}
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e862:	b480      	push	{r7}
 800e864:	b083      	sub	sp, #12
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800e872:	bf00      	nop
}
 800e874:	370c      	adds	r7, #12
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e87e:	b480      	push	{r7}
 800e880:	b083      	sub	sp, #12
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2201      	movs	r2, #1
 800e88a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	370c      	adds	r7, #12
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8aa:	4770      	bx	lr

0800e8ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f001 f91a 	bl	800fb06 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	791b      	ldrb	r3, [r3, #4]
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 ff0b 	bl	800f6f4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	795b      	ldrb	r3, [r3, #5]
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 ff05 	bl	800f6f4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800e8ea:	2300      	movs	r3, #0
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b086      	sub	sp, #24
 800e8f8:	af02      	add	r7, sp, #8
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800e900:	887b      	ldrh	r3, [r7, #2]
 800e902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e906:	d901      	bls.n	800e90c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e908:	2303      	movs	r3, #3
 800e90a:	e01b      	b.n	800e944 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e912:	887b      	ldrh	r3, [r7, #2]
 800e914:	9300      	str	r3, [sp, #0]
 800e916:	4613      	mov	r3, r2
 800e918:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e91c:	2100      	movs	r1, #0
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 f872 	bl	800ea08 <USBH_GetDescriptor>
 800e924:	4603      	mov	r3, r0
 800e926:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800e928:	7bfb      	ldrb	r3, [r7, #15]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d109      	bne.n	800e942 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e934:	887a      	ldrh	r2, [r7, #2]
 800e936:	4619      	mov	r1, r3
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 f929 	bl	800eb90 <USBH_ParseDevDesc>
 800e93e:	4603      	mov	r3, r0
 800e940:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e942:	7bfb      	ldrb	r3, [r7, #15]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3710      	adds	r7, #16
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}

0800e94c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af02      	add	r7, sp, #8
 800e952:	6078      	str	r0, [r7, #4]
 800e954:	460b      	mov	r3, r1
 800e956:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	331c      	adds	r3, #28
 800e95c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800e95e:	887b      	ldrh	r3, [r7, #2]
 800e960:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e964:	d901      	bls.n	800e96a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e966:	2303      	movs	r3, #3
 800e968:	e016      	b.n	800e998 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e96a:	887b      	ldrh	r3, [r7, #2]
 800e96c:	9300      	str	r3, [sp, #0]
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e974:	2100      	movs	r1, #0
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f846 	bl	800ea08 <USBH_GetDescriptor>
 800e97c:	4603      	mov	r3, r0
 800e97e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800e980:	7bfb      	ldrb	r3, [r7, #15]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d107      	bne.n	800e996 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800e986:	887b      	ldrh	r3, [r7, #2]
 800e988:	461a      	mov	r2, r3
 800e98a:	68b9      	ldr	r1, [r7, #8]
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 f9af 	bl	800ecf0 <USBH_ParseCfgDesc>
 800e992:	4603      	mov	r3, r0
 800e994:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e996:	7bfb      	ldrb	r3, [r7, #15]
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3710      	adds	r7, #16
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b088      	sub	sp, #32
 800e9a4:	af02      	add	r7, sp, #8
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	607a      	str	r2, [r7, #4]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	72fb      	strb	r3, [r7, #11]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800e9b4:	893b      	ldrh	r3, [r7, #8]
 800e9b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e9ba:	d802      	bhi.n	800e9c2 <USBH_Get_StringDesc+0x22>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d101      	bne.n	800e9c6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800e9c2:	2303      	movs	r3, #3
 800e9c4:	e01c      	b.n	800ea00 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800e9c6:	7afb      	ldrb	r3, [r7, #11]
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800e9ce:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800e9d6:	893b      	ldrh	r3, [r7, #8]
 800e9d8:	9300      	str	r3, [sp, #0]
 800e9da:	460b      	mov	r3, r1
 800e9dc:	2100      	movs	r1, #0
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f000 f812 	bl	800ea08 <USBH_GetDescriptor>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800e9e8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d107      	bne.n	800e9fe <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e9f4:	893a      	ldrh	r2, [r7, #8]
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f000 fb8d 	bl	800f118 <USBH_ParseStringDesc>
  }

  return status;
 800e9fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3718      	adds	r7, #24
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	607b      	str	r3, [r7, #4]
 800ea12:	460b      	mov	r3, r1
 800ea14:	72fb      	strb	r3, [r7, #11]
 800ea16:	4613      	mov	r3, r2
 800ea18:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	789b      	ldrb	r3, [r3, #2]
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d11c      	bne.n	800ea5c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ea22:	7afb      	ldrb	r3, [r7, #11]
 800ea24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ea28:	b2da      	uxtb	r2, r3
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2206      	movs	r2, #6
 800ea32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	893a      	ldrh	r2, [r7, #8]
 800ea38:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ea3a:	893b      	ldrh	r3, [r7, #8]
 800ea3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ea40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ea44:	d104      	bne.n	800ea50 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	f240 4209 	movw	r2, #1033	@ 0x409
 800ea4c:	829a      	strh	r2, [r3, #20]
 800ea4e:	e002      	b.n	800ea56 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2200      	movs	r2, #0
 800ea54:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	8b3a      	ldrh	r2, [r7, #24]
 800ea5a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ea5c:	8b3b      	ldrh	r3, [r7, #24]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	6879      	ldr	r1, [r7, #4]
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	f000 fba5 	bl	800f1b2 <USBH_CtlReq>
 800ea68:	4603      	mov	r3, r0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b082      	sub	sp, #8
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	789b      	ldrb	r3, [r3, #2]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d10f      	bne.n	800eaa6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2200      	movs	r2, #0
 800ea8a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2205      	movs	r2, #5
 800ea90:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ea92:	78fb      	ldrb	r3, [r7, #3]
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 fb81 	bl	800f1b2 <USBH_CtlReq>
 800eab0:	4603      	mov	r3, r0
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b082      	sub	sp, #8
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	460b      	mov	r3, r1
 800eac4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	789b      	ldrb	r3, [r3, #2]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d10e      	bne.n	800eaec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2209      	movs	r2, #9
 800ead8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	887a      	ldrh	r2, [r7, #2]
 800eade:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800eaec:	2200      	movs	r2, #0
 800eaee:	2100      	movs	r1, #0
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fb5e 	bl	800f1b2 <USBH_CtlReq>
 800eaf6:	4603      	mov	r3, r0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	460b      	mov	r3, r1
 800eb0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	789b      	ldrb	r3, [r3, #2]
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d10f      	bne.n	800eb34 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2203      	movs	r2, #3
 800eb1e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800eb20:	78fb      	ldrb	r3, [r7, #3]
 800eb22:	b29a      	uxth	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2200      	movs	r2, #0
 800eb32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800eb34:	2200      	movs	r2, #0
 800eb36:	2100      	movs	r1, #0
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f000 fb3a 	bl	800f1b2 <USBH_CtlReq>
 800eb3e:	4603      	mov	r3, r0
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	460b      	mov	r3, r1
 800eb52:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	789b      	ldrb	r3, [r3, #2]
 800eb58:	2b01      	cmp	r3, #1
 800eb5a:	d10f      	bne.n	800eb7c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2202      	movs	r2, #2
 800eb60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	2201      	movs	r2, #1
 800eb66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800eb6e:	78fb      	ldrb	r3, [r7, #3]
 800eb70:	b29a      	uxth	r2, r3
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	2100      	movs	r1, #0
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 fb16 	bl	800f1b2 <USBH_CtlReq>
 800eb86:	4603      	mov	r3, r0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b087      	sub	sp, #28
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	60f8      	str	r0, [r7, #12]
 800eb98:	60b9      	str	r1, [r7, #8]
 800eb9a:	4613      	mov	r3, r2
 800eb9c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800eba4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800eba6:	2300      	movs	r3, #0
 800eba8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d101      	bne.n	800ebb4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800ebb0:	2302      	movs	r3, #2
 800ebb2:	e094      	b.n	800ecde <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	781a      	ldrb	r2, [r3, #0]
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	785a      	ldrb	r2, [r3, #1]
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	3302      	adds	r3, #2
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	461a      	mov	r2, r3
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	3303      	adds	r3, #3
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	021b      	lsls	r3, r3, #8
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	791a      	ldrb	r2, [r3, #4]
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	795a      	ldrb	r2, [r3, #5]
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	799a      	ldrb	r2, [r3, #6]
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	79da      	ldrb	r2, [r3, #7]
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d004      	beq.n	800ec12 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ec0e:	2b01      	cmp	r3, #1
 800ec10:	d11b      	bne.n	800ec4a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	79db      	ldrb	r3, [r3, #7]
 800ec16:	2b20      	cmp	r3, #32
 800ec18:	dc0f      	bgt.n	800ec3a <USBH_ParseDevDesc+0xaa>
 800ec1a:	2b08      	cmp	r3, #8
 800ec1c:	db0f      	blt.n	800ec3e <USBH_ParseDevDesc+0xae>
 800ec1e:	3b08      	subs	r3, #8
 800ec20:	4a32      	ldr	r2, [pc, #200]	@ (800ecec <USBH_ParseDevDesc+0x15c>)
 800ec22:	fa22 f303 	lsr.w	r3, r2, r3
 800ec26:	f003 0301 	and.w	r3, r3, #1
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	bf14      	ite	ne
 800ec2e:	2301      	movne	r3, #1
 800ec30:	2300      	moveq	r3, #0
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d106      	bne.n	800ec46 <USBH_ParseDevDesc+0xb6>
 800ec38:	e001      	b.n	800ec3e <USBH_ParseDevDesc+0xae>
 800ec3a:	2b40      	cmp	r3, #64	@ 0x40
 800ec3c:	d003      	beq.n	800ec46 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	2208      	movs	r2, #8
 800ec42:	71da      	strb	r2, [r3, #7]
        break;
 800ec44:	e000      	b.n	800ec48 <USBH_ParseDevDesc+0xb8>
        break;
 800ec46:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ec48:	e00e      	b.n	800ec68 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ec50:	2b02      	cmp	r3, #2
 800ec52:	d107      	bne.n	800ec64 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	79db      	ldrb	r3, [r3, #7]
 800ec58:	2b08      	cmp	r3, #8
 800ec5a:	d005      	beq.n	800ec68 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	2208      	movs	r2, #8
 800ec60:	71da      	strb	r2, [r3, #7]
 800ec62:	e001      	b.n	800ec68 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ec64:	2303      	movs	r3, #3
 800ec66:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ec68:	88fb      	ldrh	r3, [r7, #6]
 800ec6a:	2b08      	cmp	r3, #8
 800ec6c:	d936      	bls.n	800ecdc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	3308      	adds	r3, #8
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	461a      	mov	r2, r3
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	3309      	adds	r3, #9
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	021b      	lsls	r3, r3, #8
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	4313      	orrs	r3, r2
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	330a      	adds	r3, #10
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	330b      	adds	r3, #11
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	021b      	lsls	r3, r3, #8
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	330c      	adds	r3, #12
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	461a      	mov	r2, r3
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	330d      	adds	r3, #13
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	021b      	lsls	r3, r3, #8
 800ecb2:	b29b      	uxth	r3, r3
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	7b9a      	ldrb	r2, [r3, #14]
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	7bda      	ldrb	r2, [r3, #15]
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	7c1a      	ldrb	r2, [r3, #16]
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	7c5a      	ldrb	r2, [r3, #17]
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800ecdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	371c      	adds	r7, #28
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr
 800ecea:	bf00      	nop
 800ecec:	01000101 	.word	0x01000101

0800ecf0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b08c      	sub	sp, #48	@ 0x30
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ed04:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ed06:	2300      	movs	r3, #0
 800ed08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ed12:	2300      	movs	r3, #0
 800ed14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d101      	bne.n	800ed22 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ed1e:	2302      	movs	r3, #2
 800ed20:	e0da      	b.n	800eed8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800ed26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	2b09      	cmp	r3, #9
 800ed2c:	d002      	beq.n	800ed34 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ed2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed30:	2209      	movs	r2, #9
 800ed32:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	781a      	ldrb	r2, [r3, #0]
 800ed38:	6a3b      	ldr	r3, [r7, #32]
 800ed3a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	785a      	ldrb	r2, [r3, #1]
 800ed40:	6a3b      	ldr	r3, [r7, #32]
 800ed42:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	3302      	adds	r3, #2
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	3303      	adds	r3, #3
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	021b      	lsls	r3, r3, #8
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	4313      	orrs	r3, r2
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed5e:	bf28      	it	cs
 800ed60:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	6a3b      	ldr	r3, [r7, #32]
 800ed68:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	791a      	ldrb	r2, [r3, #4]
 800ed6e:	6a3b      	ldr	r3, [r7, #32]
 800ed70:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	795a      	ldrb	r2, [r3, #5]
 800ed76:	6a3b      	ldr	r3, [r7, #32]
 800ed78:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	799a      	ldrb	r2, [r3, #6]
 800ed7e:	6a3b      	ldr	r3, [r7, #32]
 800ed80:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	79da      	ldrb	r2, [r3, #7]
 800ed86:	6a3b      	ldr	r3, [r7, #32]
 800ed88:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	7a1a      	ldrb	r2, [r3, #8]
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ed92:	88fb      	ldrh	r3, [r7, #6]
 800ed94:	2b09      	cmp	r3, #9
 800ed96:	f240 809d 	bls.w	800eed4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800ed9a:	2309      	movs	r3, #9
 800ed9c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eda2:	e081      	b.n	800eea8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800eda4:	f107 0316 	add.w	r3, r7, #22
 800eda8:	4619      	mov	r1, r3
 800edaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edac:	f000 f9e7 	bl	800f17e <USBH_GetNextDesc>
 800edb0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800edb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb4:	785b      	ldrb	r3, [r3, #1]
 800edb6:	2b04      	cmp	r3, #4
 800edb8:	d176      	bne.n	800eea8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800edba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	2b09      	cmp	r3, #9
 800edc0:	d002      	beq.n	800edc8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800edc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc4:	2209      	movs	r2, #9
 800edc6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800edc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edcc:	221a      	movs	r2, #26
 800edce:	fb02 f303 	mul.w	r3, r2, r3
 800edd2:	3308      	adds	r3, #8
 800edd4:	6a3a      	ldr	r2, [r7, #32]
 800edd6:	4413      	add	r3, r2
 800edd8:	3302      	adds	r3, #2
 800edda:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800eddc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800edde:	69f8      	ldr	r0, [r7, #28]
 800ede0:	f000 f87e 	bl	800eee0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ede4:	2300      	movs	r3, #0
 800ede6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800edea:	2300      	movs	r3, #0
 800edec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800edee:	e043      	b.n	800ee78 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800edf0:	f107 0316 	add.w	r3, r7, #22
 800edf4:	4619      	mov	r1, r3
 800edf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800edf8:	f000 f9c1 	bl	800f17e <USBH_GetNextDesc>
 800edfc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800edfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee00:	785b      	ldrb	r3, [r3, #1]
 800ee02:	2b05      	cmp	r3, #5
 800ee04:	d138      	bne.n	800ee78 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	795b      	ldrb	r3, [r3, #5]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d113      	bne.n	800ee36 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d003      	beq.n	800ee1e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	799b      	ldrb	r3, [r3, #6]
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	d10b      	bne.n	800ee36 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	79db      	ldrb	r3, [r3, #7]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10b      	bne.n	800ee3e <USBH_ParseCfgDesc+0x14e>
 800ee26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	2b09      	cmp	r3, #9
 800ee2c:	d007      	beq.n	800ee3e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800ee2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee30:	2209      	movs	r2, #9
 800ee32:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ee34:	e003      	b.n	800ee3e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ee36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee38:	2207      	movs	r2, #7
 800ee3a:	701a      	strb	r2, [r3, #0]
 800ee3c:	e000      	b.n	800ee40 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ee3e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ee40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee44:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ee48:	3201      	adds	r2, #1
 800ee4a:	00d2      	lsls	r2, r2, #3
 800ee4c:	211a      	movs	r1, #26
 800ee4e:	fb01 f303 	mul.w	r3, r1, r3
 800ee52:	4413      	add	r3, r2
 800ee54:	3308      	adds	r3, #8
 800ee56:	6a3a      	ldr	r2, [r7, #32]
 800ee58:	4413      	add	r3, r2
 800ee5a:	3304      	adds	r3, #4
 800ee5c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ee5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee60:	69b9      	ldr	r1, [r7, #24]
 800ee62:	68f8      	ldr	r0, [r7, #12]
 800ee64:	f000 f870 	bl	800ef48 <USBH_ParseEPDesc>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ee6e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee72:	3301      	adds	r3, #1
 800ee74:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	791b      	ldrb	r3, [r3, #4]
 800ee7c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d204      	bcs.n	800ee8e <USBH_ParseCfgDesc+0x19e>
 800ee84:	6a3b      	ldr	r3, [r7, #32]
 800ee86:	885a      	ldrh	r2, [r3, #2]
 800ee88:	8afb      	ldrh	r3, [r7, #22]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d8b0      	bhi.n	800edf0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800ee8e:	69fb      	ldr	r3, [r7, #28]
 800ee90:	791b      	ldrb	r3, [r3, #4]
 800ee92:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d201      	bcs.n	800ee9e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800ee9a:	2303      	movs	r3, #3
 800ee9c:	e01c      	b.n	800eed8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800ee9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eea2:	3301      	adds	r3, #1
 800eea4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800eea8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d805      	bhi.n	800eebc <USBH_ParseCfgDesc+0x1cc>
 800eeb0:	6a3b      	ldr	r3, [r7, #32]
 800eeb2:	885a      	ldrh	r2, [r3, #2]
 800eeb4:	8afb      	ldrh	r3, [r7, #22]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	f63f af74 	bhi.w	800eda4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800eebc:	6a3b      	ldr	r3, [r7, #32]
 800eebe:	791b      	ldrb	r3, [r3, #4]
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	bf28      	it	cs
 800eec4:	2302      	movcs	r3, #2
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800eecc:	429a      	cmp	r2, r3
 800eece:	d201      	bcs.n	800eed4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800eed0:	2303      	movs	r3, #3
 800eed2:	e001      	b.n	800eed8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800eed4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3730      	adds	r7, #48	@ 0x30
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800eeea:	683b      	ldr	r3, [r7, #0]
 800eeec:	781a      	ldrb	r2, [r3, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	785a      	ldrb	r2, [r3, #1]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	789a      	ldrb	r2, [r3, #2]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	78da      	ldrb	r2, [r3, #3]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	3304      	adds	r3, #4
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	bf28      	it	cs
 800ef14:	2302      	movcs	r3, #2
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	795a      	ldrb	r2, [r3, #5]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	799a      	ldrb	r2, [r3, #6]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	79da      	ldrb	r2, [r3, #7]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	7a1a      	ldrb	r2, [r3, #8]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	721a      	strb	r2, [r3, #8]
}
 800ef3c:	bf00      	nop
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr

0800ef48 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b087      	sub	sp, #28
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ef54:	2300      	movs	r3, #0
 800ef56:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	781a      	ldrb	r2, [r3, #0]
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	785a      	ldrb	r2, [r3, #1]
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	789a      	ldrb	r2, [r3, #2]
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	78da      	ldrb	r2, [r3, #3]
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	3305      	adds	r3, #5
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	021b      	lsls	r3, r3, #8
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	b29a      	uxth	r2, r3
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	799a      	ldrb	r2, [r3, #6]
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	889b      	ldrh	r3, [r3, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d009      	beq.n	800efb6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800efa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800efaa:	d804      	bhi.n	800efb6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800efb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efb4:	d901      	bls.n	800efba <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800efb6:	2303      	movs	r3, #3
 800efb8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d136      	bne.n	800f032 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	78db      	ldrb	r3, [r3, #3]
 800efc8:	f003 0303 	and.w	r3, r3, #3
 800efcc:	2b02      	cmp	r3, #2
 800efce:	d108      	bne.n	800efe2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	889b      	ldrh	r3, [r3, #4]
 800efd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800efd8:	f240 8097 	bls.w	800f10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800efdc:	2303      	movs	r3, #3
 800efde:	75fb      	strb	r3, [r7, #23]
 800efe0:	e093      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	78db      	ldrb	r3, [r3, #3]
 800efe6:	f003 0303 	and.w	r3, r3, #3
 800efea:	2b00      	cmp	r3, #0
 800efec:	d107      	bne.n	800effe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	889b      	ldrh	r3, [r3, #4]
 800eff2:	2b40      	cmp	r3, #64	@ 0x40
 800eff4:	f240 8089 	bls.w	800f10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800eff8:	2303      	movs	r3, #3
 800effa:	75fb      	strb	r3, [r7, #23]
 800effc:	e085      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	78db      	ldrb	r3, [r3, #3]
 800f002:	f003 0303 	and.w	r3, r3, #3
 800f006:	2b01      	cmp	r3, #1
 800f008:	d005      	beq.n	800f016 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	78db      	ldrb	r3, [r3, #3]
 800f00e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f012:	2b03      	cmp	r3, #3
 800f014:	d10a      	bne.n	800f02c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	799b      	ldrb	r3, [r3, #6]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d003      	beq.n	800f026 <USBH_ParseEPDesc+0xde>
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	799b      	ldrb	r3, [r3, #6]
 800f022:	2b10      	cmp	r3, #16
 800f024:	d970      	bls.n	800f108 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800f026:	2303      	movs	r3, #3
 800f028:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f02a:	e06d      	b.n	800f108 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800f02c:	2303      	movs	r3, #3
 800f02e:	75fb      	strb	r3, [r7, #23]
 800f030:	e06b      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d13c      	bne.n	800f0b6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	78db      	ldrb	r3, [r3, #3]
 800f040:	f003 0303 	and.w	r3, r3, #3
 800f044:	2b02      	cmp	r3, #2
 800f046:	d005      	beq.n	800f054 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	78db      	ldrb	r3, [r3, #3]
 800f04c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800f050:	2b00      	cmp	r3, #0
 800f052:	d106      	bne.n	800f062 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800f054:	68bb      	ldr	r3, [r7, #8]
 800f056:	889b      	ldrh	r3, [r3, #4]
 800f058:	2b40      	cmp	r3, #64	@ 0x40
 800f05a:	d956      	bls.n	800f10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f05c:	2303      	movs	r3, #3
 800f05e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800f060:	e053      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	78db      	ldrb	r3, [r3, #3]
 800f066:	f003 0303 	and.w	r3, r3, #3
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d10e      	bne.n	800f08c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	799b      	ldrb	r3, [r3, #6]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d007      	beq.n	800f086 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800f07a:	2b10      	cmp	r3, #16
 800f07c:	d803      	bhi.n	800f086 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800f082:	2b40      	cmp	r3, #64	@ 0x40
 800f084:	d941      	bls.n	800f10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f086:	2303      	movs	r3, #3
 800f088:	75fb      	strb	r3, [r7, #23]
 800f08a:	e03e      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	78db      	ldrb	r3, [r3, #3]
 800f090:	f003 0303 	and.w	r3, r3, #3
 800f094:	2b03      	cmp	r3, #3
 800f096:	d10b      	bne.n	800f0b0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	799b      	ldrb	r3, [r3, #6]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d004      	beq.n	800f0aa <USBH_ParseEPDesc+0x162>
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	889b      	ldrh	r3, [r3, #4]
 800f0a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f0a8:	d32f      	bcc.n	800f10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f0aa:	2303      	movs	r3, #3
 800f0ac:	75fb      	strb	r3, [r7, #23]
 800f0ae:	e02c      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800f0b0:	2303      	movs	r3, #3
 800f0b2:	75fb      	strb	r3, [r7, #23]
 800f0b4:	e029      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	d120      	bne.n	800f102 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	78db      	ldrb	r3, [r3, #3]
 800f0c4:	f003 0303 	and.w	r3, r3, #3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d106      	bne.n	800f0da <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	889b      	ldrh	r3, [r3, #4]
 800f0d0:	2b08      	cmp	r3, #8
 800f0d2:	d01a      	beq.n	800f10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f0d4:	2303      	movs	r3, #3
 800f0d6:	75fb      	strb	r3, [r7, #23]
 800f0d8:	e017      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	78db      	ldrb	r3, [r3, #3]
 800f0de:	f003 0303 	and.w	r3, r3, #3
 800f0e2:	2b03      	cmp	r3, #3
 800f0e4:	d10a      	bne.n	800f0fc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	799b      	ldrb	r3, [r3, #6]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d003      	beq.n	800f0f6 <USBH_ParseEPDesc+0x1ae>
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	889b      	ldrh	r3, [r3, #4]
 800f0f2:	2b08      	cmp	r3, #8
 800f0f4:	d909      	bls.n	800f10a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f0f6:	2303      	movs	r3, #3
 800f0f8:	75fb      	strb	r3, [r7, #23]
 800f0fa:	e006      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800f0fc:	2303      	movs	r3, #3
 800f0fe:	75fb      	strb	r3, [r7, #23]
 800f100:	e003      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800f102:	2303      	movs	r3, #3
 800f104:	75fb      	strb	r3, [r7, #23]
 800f106:	e000      	b.n	800f10a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f108:	bf00      	nop
  }

  return status;
 800f10a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	371c      	adds	r7, #28
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f118:	b480      	push	{r7}
 800f11a:	b087      	sub	sp, #28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	4613      	mov	r3, r2
 800f124:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	3301      	adds	r3, #1
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	2b03      	cmp	r3, #3
 800f12e:	d120      	bne.n	800f172 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	1e9a      	subs	r2, r3, #2
 800f136:	88fb      	ldrh	r3, [r7, #6]
 800f138:	4293      	cmp	r3, r2
 800f13a:	bf28      	it	cs
 800f13c:	4613      	movcs	r3, r2
 800f13e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	3302      	adds	r3, #2
 800f144:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f146:	2300      	movs	r3, #0
 800f148:	82fb      	strh	r3, [r7, #22]
 800f14a:	e00b      	b.n	800f164 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f14c:	8afb      	ldrh	r3, [r7, #22]
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	4413      	add	r3, r2
 800f152:	781a      	ldrb	r2, [r3, #0]
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	3301      	adds	r3, #1
 800f15c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f15e:	8afb      	ldrh	r3, [r7, #22]
 800f160:	3302      	adds	r3, #2
 800f162:	82fb      	strh	r3, [r7, #22]
 800f164:	8afa      	ldrh	r2, [r7, #22]
 800f166:	8abb      	ldrh	r3, [r7, #20]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d3ef      	bcc.n	800f14c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	2200      	movs	r2, #0
 800f170:	701a      	strb	r2, [r3, #0]
  }
}
 800f172:	bf00      	nop
 800f174:	371c      	adds	r7, #28
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f17e:	b480      	push	{r7}
 800f180:	b085      	sub	sp, #20
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
 800f186:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	881b      	ldrh	r3, [r3, #0]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	7812      	ldrb	r2, [r2, #0]
 800f190:	4413      	add	r3, r2
 800f192:	b29a      	uxth	r2, r3
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4413      	add	r3, r2
 800f1a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3714      	adds	r7, #20
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f1b2:	b580      	push	{r7, lr}
 800f1b4:	b086      	sub	sp, #24
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	60f8      	str	r0, [r7, #12]
 800f1ba:	60b9      	str	r1, [r7, #8]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	789b      	ldrb	r3, [r3, #2]
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d002      	beq.n	800f1d2 <USBH_CtlReq+0x20>
 800f1cc:	2b02      	cmp	r3, #2
 800f1ce:	d00f      	beq.n	800f1f0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f1d0:	e027      	b.n	800f222 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	68ba      	ldr	r2, [r7, #8]
 800f1d6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	88fa      	ldrh	r2, [r7, #6]
 800f1dc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	75fb      	strb	r3, [r7, #23]
      break;
 800f1ee:	e018      	b.n	800f222 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	f000 f81b 	bl	800f22c <USBH_HandleControl>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f1fa:	7dfb      	ldrb	r3, [r7, #23]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d002      	beq.n	800f206 <USBH_CtlReq+0x54>
 800f200:	7dfb      	ldrb	r3, [r7, #23]
 800f202:	2b03      	cmp	r3, #3
 800f204:	d106      	bne.n	800f214 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2201      	movs	r2, #1
 800f20a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	2200      	movs	r2, #0
 800f210:	761a      	strb	r2, [r3, #24]
      break;
 800f212:	e005      	b.n	800f220 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f214:	7dfb      	ldrb	r3, [r7, #23]
 800f216:	2b02      	cmp	r3, #2
 800f218:	d102      	bne.n	800f220 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2201      	movs	r2, #1
 800f21e:	709a      	strb	r2, [r3, #2]
      break;
 800f220:	bf00      	nop
  }
  return status;
 800f222:	7dfb      	ldrb	r3, [r7, #23]
}
 800f224:	4618      	mov	r0, r3
 800f226:	3718      	adds	r7, #24
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b086      	sub	sp, #24
 800f230:	af02      	add	r7, sp, #8
 800f232:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f234:	2301      	movs	r3, #1
 800f236:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f238:	2300      	movs	r3, #0
 800f23a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	7e1b      	ldrb	r3, [r3, #24]
 800f240:	3b01      	subs	r3, #1
 800f242:	2b0a      	cmp	r3, #10
 800f244:	f200 8156 	bhi.w	800f4f4 <USBH_HandleControl+0x2c8>
 800f248:	a201      	add	r2, pc, #4	@ (adr r2, 800f250 <USBH_HandleControl+0x24>)
 800f24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f24e:	bf00      	nop
 800f250:	0800f27d 	.word	0x0800f27d
 800f254:	0800f297 	.word	0x0800f297
 800f258:	0800f301 	.word	0x0800f301
 800f25c:	0800f327 	.word	0x0800f327
 800f260:	0800f35f 	.word	0x0800f35f
 800f264:	0800f389 	.word	0x0800f389
 800f268:	0800f3db 	.word	0x0800f3db
 800f26c:	0800f3fd 	.word	0x0800f3fd
 800f270:	0800f439 	.word	0x0800f439
 800f274:	0800f45f 	.word	0x0800f45f
 800f278:	0800f49d 	.word	0x0800f49d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f103 0110 	add.w	r1, r3, #16
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	795b      	ldrb	r3, [r3, #5]
 800f286:	461a      	mov	r2, r3
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 f943 	bl	800f514 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2202      	movs	r2, #2
 800f292:	761a      	strb	r2, [r3, #24]
      break;
 800f294:	e139      	b.n	800f50a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	795b      	ldrb	r3, [r3, #5]
 800f29a:	4619      	mov	r1, r3
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f000 fd21 	bl	800fce4 <USBH_LL_GetURBState>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f2a6:	7bbb      	ldrb	r3, [r7, #14]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d11e      	bne.n	800f2ea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	7c1b      	ldrb	r3, [r3, #16]
 800f2b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f2b4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	8adb      	ldrh	r3, [r3, #22]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00a      	beq.n	800f2d4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f2be:	7b7b      	ldrb	r3, [r7, #13]
 800f2c0:	2b80      	cmp	r3, #128	@ 0x80
 800f2c2:	d103      	bne.n	800f2cc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2203      	movs	r2, #3
 800f2c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f2ca:	e115      	b.n	800f4f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2205      	movs	r2, #5
 800f2d0:	761a      	strb	r2, [r3, #24]
      break;
 800f2d2:	e111      	b.n	800f4f8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f2d4:	7b7b      	ldrb	r3, [r7, #13]
 800f2d6:	2b80      	cmp	r3, #128	@ 0x80
 800f2d8:	d103      	bne.n	800f2e2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2209      	movs	r2, #9
 800f2de:	761a      	strb	r2, [r3, #24]
      break;
 800f2e0:	e10a      	b.n	800f4f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2207      	movs	r2, #7
 800f2e6:	761a      	strb	r2, [r3, #24]
      break;
 800f2e8:	e106      	b.n	800f4f8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f2ea:	7bbb      	ldrb	r3, [r7, #14]
 800f2ec:	2b04      	cmp	r3, #4
 800f2ee:	d003      	beq.n	800f2f8 <USBH_HandleControl+0xcc>
 800f2f0:	7bbb      	ldrb	r3, [r7, #14]
 800f2f2:	2b02      	cmp	r3, #2
 800f2f4:	f040 8100 	bne.w	800f4f8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	220b      	movs	r2, #11
 800f2fc:	761a      	strb	r2, [r3, #24]
      break;
 800f2fe:	e0fb      	b.n	800f4f8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f306:	b29a      	uxth	r2, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6899      	ldr	r1, [r3, #8]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	899a      	ldrh	r2, [r3, #12]
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	791b      	ldrb	r3, [r3, #4]
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 f93a 	bl	800f592 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	2204      	movs	r2, #4
 800f322:	761a      	strb	r2, [r3, #24]
      break;
 800f324:	e0f1      	b.n	800f50a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	791b      	ldrb	r3, [r3, #4]
 800f32a:	4619      	mov	r1, r3
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 fcd9 	bl	800fce4 <USBH_LL_GetURBState>
 800f332:	4603      	mov	r3, r0
 800f334:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f336:	7bbb      	ldrb	r3, [r7, #14]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d102      	bne.n	800f342 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2209      	movs	r2, #9
 800f340:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f342:	7bbb      	ldrb	r3, [r7, #14]
 800f344:	2b05      	cmp	r3, #5
 800f346:	d102      	bne.n	800f34e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f348:	2303      	movs	r3, #3
 800f34a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f34c:	e0d6      	b.n	800f4fc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f34e:	7bbb      	ldrb	r3, [r7, #14]
 800f350:	2b04      	cmp	r3, #4
 800f352:	f040 80d3 	bne.w	800f4fc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	220b      	movs	r2, #11
 800f35a:	761a      	strb	r2, [r3, #24]
      break;
 800f35c:	e0ce      	b.n	800f4fc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6899      	ldr	r1, [r3, #8]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	899a      	ldrh	r2, [r3, #12]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	795b      	ldrb	r3, [r3, #5]
 800f36a:	2001      	movs	r0, #1
 800f36c:	9000      	str	r0, [sp, #0]
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f8ea 	bl	800f548 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2206      	movs	r2, #6
 800f384:	761a      	strb	r2, [r3, #24]
      break;
 800f386:	e0c0      	b.n	800f50a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	795b      	ldrb	r3, [r3, #5]
 800f38c:	4619      	mov	r1, r3
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 fca8 	bl	800fce4 <USBH_LL_GetURBState>
 800f394:	4603      	mov	r3, r0
 800f396:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f398:	7bbb      	ldrb	r3, [r7, #14]
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d103      	bne.n	800f3a6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2207      	movs	r2, #7
 800f3a2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f3a4:	e0ac      	b.n	800f500 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f3a6:	7bbb      	ldrb	r3, [r7, #14]
 800f3a8:	2b05      	cmp	r3, #5
 800f3aa:	d105      	bne.n	800f3b8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	220c      	movs	r2, #12
 800f3b0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f3b2:	2303      	movs	r3, #3
 800f3b4:	73fb      	strb	r3, [r7, #15]
      break;
 800f3b6:	e0a3      	b.n	800f500 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f3b8:	7bbb      	ldrb	r3, [r7, #14]
 800f3ba:	2b02      	cmp	r3, #2
 800f3bc:	d103      	bne.n	800f3c6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2205      	movs	r2, #5
 800f3c2:	761a      	strb	r2, [r3, #24]
      break;
 800f3c4:	e09c      	b.n	800f500 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f3c6:	7bbb      	ldrb	r3, [r7, #14]
 800f3c8:	2b04      	cmp	r3, #4
 800f3ca:	f040 8099 	bne.w	800f500 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	220b      	movs	r2, #11
 800f3d2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f3d4:	2302      	movs	r3, #2
 800f3d6:	73fb      	strb	r3, [r7, #15]
      break;
 800f3d8:	e092      	b.n	800f500 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	791b      	ldrb	r3, [r3, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f8d5 	bl	800f592 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2208      	movs	r2, #8
 800f3f8:	761a      	strb	r2, [r3, #24]

      break;
 800f3fa:	e086      	b.n	800f50a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	791b      	ldrb	r3, [r3, #4]
 800f400:	4619      	mov	r1, r3
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fc6e 	bl	800fce4 <USBH_LL_GetURBState>
 800f408:	4603      	mov	r3, r0
 800f40a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f40c:	7bbb      	ldrb	r3, [r7, #14]
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d105      	bne.n	800f41e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	220d      	movs	r2, #13
 800f416:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f418:	2300      	movs	r3, #0
 800f41a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f41c:	e072      	b.n	800f504 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f41e:	7bbb      	ldrb	r3, [r7, #14]
 800f420:	2b04      	cmp	r3, #4
 800f422:	d103      	bne.n	800f42c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	220b      	movs	r2, #11
 800f428:	761a      	strb	r2, [r3, #24]
      break;
 800f42a:	e06b      	b.n	800f504 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f42c:	7bbb      	ldrb	r3, [r7, #14]
 800f42e:	2b05      	cmp	r3, #5
 800f430:	d168      	bne.n	800f504 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f432:	2303      	movs	r3, #3
 800f434:	73fb      	strb	r3, [r7, #15]
      break;
 800f436:	e065      	b.n	800f504 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	795b      	ldrb	r3, [r3, #5]
 800f43c:	2201      	movs	r2, #1
 800f43e:	9200      	str	r2, [sp, #0]
 800f440:	2200      	movs	r2, #0
 800f442:	2100      	movs	r1, #0
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f87f 	bl	800f548 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f450:	b29a      	uxth	r2, r3
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	220a      	movs	r2, #10
 800f45a:	761a      	strb	r2, [r3, #24]
      break;
 800f45c:	e055      	b.n	800f50a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	795b      	ldrb	r3, [r3, #5]
 800f462:	4619      	mov	r1, r3
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 fc3d 	bl	800fce4 <USBH_LL_GetURBState>
 800f46a:	4603      	mov	r3, r0
 800f46c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f46e:	7bbb      	ldrb	r3, [r7, #14]
 800f470:	2b01      	cmp	r3, #1
 800f472:	d105      	bne.n	800f480 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f474:	2300      	movs	r3, #0
 800f476:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	220d      	movs	r2, #13
 800f47c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f47e:	e043      	b.n	800f508 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f480:	7bbb      	ldrb	r3, [r7, #14]
 800f482:	2b02      	cmp	r3, #2
 800f484:	d103      	bne.n	800f48e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2209      	movs	r2, #9
 800f48a:	761a      	strb	r2, [r3, #24]
      break;
 800f48c:	e03c      	b.n	800f508 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f48e:	7bbb      	ldrb	r3, [r7, #14]
 800f490:	2b04      	cmp	r3, #4
 800f492:	d139      	bne.n	800f508 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	220b      	movs	r2, #11
 800f498:	761a      	strb	r2, [r3, #24]
      break;
 800f49a:	e035      	b.n	800f508 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	7e5b      	ldrb	r3, [r3, #25]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	765a      	strb	r2, [r3, #25]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	7e5b      	ldrb	r3, [r3, #25]
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	d806      	bhi.n	800f4be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f4bc:	e025      	b.n	800f50a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f4c4:	2106      	movs	r1, #6
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	795b      	ldrb	r3, [r3, #5]
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 f90c 	bl	800f6f4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	791b      	ldrb	r3, [r3, #4]
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 f906 	bl	800f6f4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f4ee:	2302      	movs	r3, #2
 800f4f0:	73fb      	strb	r3, [r7, #15]
      break;
 800f4f2:	e00a      	b.n	800f50a <USBH_HandleControl+0x2de>

    default:
      break;
 800f4f4:	bf00      	nop
 800f4f6:	e008      	b.n	800f50a <USBH_HandleControl+0x2de>
      break;
 800f4f8:	bf00      	nop
 800f4fa:	e006      	b.n	800f50a <USBH_HandleControl+0x2de>
      break;
 800f4fc:	bf00      	nop
 800f4fe:	e004      	b.n	800f50a <USBH_HandleControl+0x2de>
      break;
 800f500:	bf00      	nop
 800f502:	e002      	b.n	800f50a <USBH_HandleControl+0x2de>
      break;
 800f504:	bf00      	nop
 800f506:	e000      	b.n	800f50a <USBH_HandleControl+0x2de>
      break;
 800f508:	bf00      	nop
  }

  return status;
 800f50a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f50c:	4618      	mov	r0, r3
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af04      	add	r7, sp, #16
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	4613      	mov	r3, r2
 800f520:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f522:	79f9      	ldrb	r1, [r7, #7]
 800f524:	2300      	movs	r3, #0
 800f526:	9303      	str	r3, [sp, #12]
 800f528:	2308      	movs	r3, #8
 800f52a:	9302      	str	r3, [sp, #8]
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	9301      	str	r3, [sp, #4]
 800f530:	2300      	movs	r3, #0
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	2300      	movs	r3, #0
 800f536:	2200      	movs	r2, #0
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f000 fba2 	bl	800fc82 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f53e:	2300      	movs	r3, #0
}
 800f540:	4618      	mov	r0, r3
 800f542:	3710      	adds	r7, #16
 800f544:	46bd      	mov	sp, r7
 800f546:	bd80      	pop	{r7, pc}

0800f548 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b088      	sub	sp, #32
 800f54c:	af04      	add	r7, sp, #16
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	4611      	mov	r1, r2
 800f554:	461a      	mov	r2, r3
 800f556:	460b      	mov	r3, r1
 800f558:	80fb      	strh	r3, [r7, #6]
 800f55a:	4613      	mov	r3, r2
 800f55c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f564:	2b00      	cmp	r3, #0
 800f566:	d001      	beq.n	800f56c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f568:	2300      	movs	r3, #0
 800f56a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f56c:	7979      	ldrb	r1, [r7, #5]
 800f56e:	7e3b      	ldrb	r3, [r7, #24]
 800f570:	9303      	str	r3, [sp, #12]
 800f572:	88fb      	ldrh	r3, [r7, #6]
 800f574:	9302      	str	r3, [sp, #8]
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	9301      	str	r3, [sp, #4]
 800f57a:	2301      	movs	r3, #1
 800f57c:	9300      	str	r3, [sp, #0]
 800f57e:	2300      	movs	r3, #0
 800f580:	2200      	movs	r2, #0
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f000 fb7d 	bl	800fc82 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}

0800f592 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b088      	sub	sp, #32
 800f596:	af04      	add	r7, sp, #16
 800f598:	60f8      	str	r0, [r7, #12]
 800f59a:	60b9      	str	r1, [r7, #8]
 800f59c:	4611      	mov	r1, r2
 800f59e:	461a      	mov	r2, r3
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	80fb      	strh	r3, [r7, #6]
 800f5a4:	4613      	mov	r3, r2
 800f5a6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f5a8:	7979      	ldrb	r1, [r7, #5]
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	9303      	str	r3, [sp, #12]
 800f5ae:	88fb      	ldrh	r3, [r7, #6]
 800f5b0:	9302      	str	r3, [sp, #8]
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	9301      	str	r3, [sp, #4]
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	2201      	movs	r2, #1
 800f5be:	68f8      	ldr	r0, [r7, #12]
 800f5c0:	f000 fb5f 	bl	800fc82 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f5c4:	2300      	movs	r3, #0

}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3710      	adds	r7, #16
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}

0800f5ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f5ce:	b580      	push	{r7, lr}
 800f5d0:	b088      	sub	sp, #32
 800f5d2:	af04      	add	r7, sp, #16
 800f5d4:	60f8      	str	r0, [r7, #12]
 800f5d6:	60b9      	str	r1, [r7, #8]
 800f5d8:	4611      	mov	r1, r2
 800f5da:	461a      	mov	r2, r3
 800f5dc:	460b      	mov	r3, r1
 800f5de:	80fb      	strh	r3, [r7, #6]
 800f5e0:	4613      	mov	r3, r2
 800f5e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d001      	beq.n	800f5f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f5f2:	7979      	ldrb	r1, [r7, #5]
 800f5f4:	7e3b      	ldrb	r3, [r7, #24]
 800f5f6:	9303      	str	r3, [sp, #12]
 800f5f8:	88fb      	ldrh	r3, [r7, #6]
 800f5fa:	9302      	str	r3, [sp, #8]
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	9301      	str	r3, [sp, #4]
 800f600:	2301      	movs	r3, #1
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	2302      	movs	r3, #2
 800f606:	2200      	movs	r2, #0
 800f608:	68f8      	ldr	r0, [r7, #12]
 800f60a:	f000 fb3a 	bl	800fc82 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f60e:	2300      	movs	r3, #0
}
 800f610:	4618      	mov	r0, r3
 800f612:	3710      	adds	r7, #16
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b088      	sub	sp, #32
 800f61c:	af04      	add	r7, sp, #16
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	4611      	mov	r1, r2
 800f624:	461a      	mov	r2, r3
 800f626:	460b      	mov	r3, r1
 800f628:	80fb      	strh	r3, [r7, #6]
 800f62a:	4613      	mov	r3, r2
 800f62c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f62e:	7979      	ldrb	r1, [r7, #5]
 800f630:	2300      	movs	r3, #0
 800f632:	9303      	str	r3, [sp, #12]
 800f634:	88fb      	ldrh	r3, [r7, #6]
 800f636:	9302      	str	r3, [sp, #8]
 800f638:	68bb      	ldr	r3, [r7, #8]
 800f63a:	9301      	str	r3, [sp, #4]
 800f63c:	2301      	movs	r3, #1
 800f63e:	9300      	str	r3, [sp, #0]
 800f640:	2302      	movs	r3, #2
 800f642:	2201      	movs	r2, #1
 800f644:	68f8      	ldr	r0, [r7, #12]
 800f646:	f000 fb1c 	bl	800fc82 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f64a:	2300      	movs	r3, #0
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3710      	adds	r7, #16
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}

0800f654 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b086      	sub	sp, #24
 800f658:	af04      	add	r7, sp, #16
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	4608      	mov	r0, r1
 800f65e:	4611      	mov	r1, r2
 800f660:	461a      	mov	r2, r3
 800f662:	4603      	mov	r3, r0
 800f664:	70fb      	strb	r3, [r7, #3]
 800f666:	460b      	mov	r3, r1
 800f668:	70bb      	strb	r3, [r7, #2]
 800f66a:	4613      	mov	r3, r2
 800f66c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f66e:	7878      	ldrb	r0, [r7, #1]
 800f670:	78ba      	ldrb	r2, [r7, #2]
 800f672:	78f9      	ldrb	r1, [r7, #3]
 800f674:	8b3b      	ldrh	r3, [r7, #24]
 800f676:	9302      	str	r3, [sp, #8]
 800f678:	7d3b      	ldrb	r3, [r7, #20]
 800f67a:	9301      	str	r3, [sp, #4]
 800f67c:	7c3b      	ldrb	r3, [r7, #16]
 800f67e:	9300      	str	r3, [sp, #0]
 800f680:	4603      	mov	r3, r0
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 faaf 	bl	800fbe6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3708      	adds	r7, #8
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b082      	sub	sp, #8
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
 800f69a:	460b      	mov	r3, r1
 800f69c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f69e:	78fb      	ldrb	r3, [r7, #3]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 face 	bl	800fc44 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f6a8:	2300      	movs	r3, #0
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3708      	adds	r7, #8
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b084      	sub	sp, #16
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	460b      	mov	r3, r1
 800f6bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 f836 	bl	800f730 <USBH_GetFreePipe>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f6c8:	89fb      	ldrh	r3, [r7, #14]
 800f6ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d00a      	beq.n	800f6e8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f6d2:	78fa      	ldrb	r2, [r7, #3]
 800f6d4:	89fb      	ldrh	r3, [r7, #14]
 800f6d6:	f003 030f 	and.w	r3, r3, #15
 800f6da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f6de:	6879      	ldr	r1, [r7, #4]
 800f6e0:	33e0      	adds	r3, #224	@ 0xe0
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	440b      	add	r3, r1
 800f6e6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f6e8:	89fb      	ldrh	r3, [r7, #14]
 800f6ea:	b2db      	uxtb	r3, r3
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3710      	adds	r7, #16
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	bd80      	pop	{r7, pc}

0800f6f4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f700:	78fb      	ldrb	r3, [r7, #3]
 800f702:	2b0f      	cmp	r3, #15
 800f704:	d80d      	bhi.n	800f722 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f706:	78fb      	ldrb	r3, [r7, #3]
 800f708:	687a      	ldr	r2, [r7, #4]
 800f70a:	33e0      	adds	r3, #224	@ 0xe0
 800f70c:	009b      	lsls	r3, r3, #2
 800f70e:	4413      	add	r3, r2
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	78fb      	ldrb	r3, [r7, #3]
 800f714:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f718:	6879      	ldr	r1, [r7, #4]
 800f71a:	33e0      	adds	r3, #224	@ 0xe0
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	440b      	add	r3, r1
 800f720:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f722:	2300      	movs	r3, #0
}
 800f724:	4618      	mov	r0, r3
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f730:	b480      	push	{r7}
 800f732:	b085      	sub	sp, #20
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f738:	2300      	movs	r3, #0
 800f73a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f73c:	2300      	movs	r3, #0
 800f73e:	73fb      	strb	r3, [r7, #15]
 800f740:	e00f      	b.n	800f762 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f742:	7bfb      	ldrb	r3, [r7, #15]
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	33e0      	adds	r3, #224	@ 0xe0
 800f748:	009b      	lsls	r3, r3, #2
 800f74a:	4413      	add	r3, r2
 800f74c:	685b      	ldr	r3, [r3, #4]
 800f74e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f752:	2b00      	cmp	r3, #0
 800f754:	d102      	bne.n	800f75c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f756:	7bfb      	ldrb	r3, [r7, #15]
 800f758:	b29b      	uxth	r3, r3
 800f75a:	e007      	b.n	800f76c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800f75c:	7bfb      	ldrb	r3, [r7, #15]
 800f75e:	3301      	adds	r3, #1
 800f760:	73fb      	strb	r3, [r7, #15]
 800f762:	7bfb      	ldrb	r3, [r7, #15]
 800f764:	2b0f      	cmp	r3, #15
 800f766:	d9ec      	bls.n	800f742 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f768:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3714      	adds	r7, #20
 800f770:	46bd      	mov	sp, r7
 800f772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f776:	4770      	bx	lr

0800f778 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f778:	b480      	push	{r7}
 800f77a:	b087      	sub	sp, #28
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	4613      	mov	r3, r2
 800f784:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f786:	2301      	movs	r3, #1
 800f788:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f78a:	2300      	movs	r3, #0
 800f78c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f78e:	4b1f      	ldr	r3, [pc, #124]	@ (800f80c <FATFS_LinkDriverEx+0x94>)
 800f790:	7a5b      	ldrb	r3, [r3, #9]
 800f792:	b2db      	uxtb	r3, r3
 800f794:	2b00      	cmp	r3, #0
 800f796:	d131      	bne.n	800f7fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f798:	4b1c      	ldr	r3, [pc, #112]	@ (800f80c <FATFS_LinkDriverEx+0x94>)
 800f79a:	7a5b      	ldrb	r3, [r3, #9]
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	461a      	mov	r2, r3
 800f7a0:	4b1a      	ldr	r3, [pc, #104]	@ (800f80c <FATFS_LinkDriverEx+0x94>)
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f7a6:	4b19      	ldr	r3, [pc, #100]	@ (800f80c <FATFS_LinkDriverEx+0x94>)
 800f7a8:	7a5b      	ldrb	r3, [r3, #9]
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	4a17      	ldr	r2, [pc, #92]	@ (800f80c <FATFS_LinkDriverEx+0x94>)
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	4413      	add	r3, r2
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f7b6:	4b15      	ldr	r3, [pc, #84]	@ (800f80c <FATFS_LinkDriverEx+0x94>)
 800f7b8:	7a5b      	ldrb	r3, [r3, #9]
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	461a      	mov	r2, r3
 800f7be:	4b13      	ldr	r3, [pc, #76]	@ (800f80c <FATFS_LinkDriverEx+0x94>)
 800f7c0:	4413      	add	r3, r2
 800f7c2:	79fa      	ldrb	r2, [r7, #7]
 800f7c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f7c6:	4b11      	ldr	r3, [pc, #68]	@ (800f80c <FATFS_LinkDriverEx+0x94>)
 800f7c8:	7a5b      	ldrb	r3, [r3, #9]
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	1c5a      	adds	r2, r3, #1
 800f7ce:	b2d1      	uxtb	r1, r2
 800f7d0:	4a0e      	ldr	r2, [pc, #56]	@ (800f80c <FATFS_LinkDriverEx+0x94>)
 800f7d2:	7251      	strb	r1, [r2, #9]
 800f7d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f7d6:	7dbb      	ldrb	r3, [r7, #22]
 800f7d8:	3330      	adds	r3, #48	@ 0x30
 800f7da:	b2da      	uxtb	r2, r3
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	223a      	movs	r2, #58	@ 0x3a
 800f7e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	3302      	adds	r3, #2
 800f7ec:	222f      	movs	r2, #47	@ 0x2f
 800f7ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	3303      	adds	r3, #3
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	371c      	adds	r7, #28
 800f802:	46bd      	mov	sp, r7
 800f804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop
 800f80c:	20000e34 	.word	0x20000e34

0800f810 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f81a:	2200      	movs	r2, #0
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f7ff ffaa 	bl	800f778 <FATFS_LinkDriverEx>
 800f824:	4603      	mov	r3, r0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3708      	adds	r7, #8
 800f82a:	46bd      	mov	sp, r7
 800f82c:	bd80      	pop	{r7, pc}
	...

0800f830 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f834:	2201      	movs	r2, #1
 800f836:	490e      	ldr	r1, [pc, #56]	@ (800f870 <MX_USB_HOST_Init+0x40>)
 800f838:	480e      	ldr	r0, [pc, #56]	@ (800f874 <MX_USB_HOST_Init+0x44>)
 800f83a:	f7fe fab9 	bl	800ddb0 <USBH_Init>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d001      	beq.n	800f848 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f844:	f7f1 fe80 	bl	8001548 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800f848:	490b      	ldr	r1, [pc, #44]	@ (800f878 <MX_USB_HOST_Init+0x48>)
 800f84a:	480a      	ldr	r0, [pc, #40]	@ (800f874 <MX_USB_HOST_Init+0x44>)
 800f84c:	f7fe fb5d 	bl	800df0a <USBH_RegisterClass>
 800f850:	4603      	mov	r3, r0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d001      	beq.n	800f85a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f856:	f7f1 fe77 	bl	8001548 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f85a:	4806      	ldr	r0, [pc, #24]	@ (800f874 <MX_USB_HOST_Init+0x44>)
 800f85c:	f7fe fbe1 	bl	800e022 <USBH_Start>
 800f860:	4603      	mov	r3, r0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d001      	beq.n	800f86a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f866:	f7f1 fe6f 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f86a:	bf00      	nop
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	0800f891 	.word	0x0800f891
 800f874:	20000e40 	.word	0x20000e40
 800f878:	20000010 	.word	0x20000010

0800f87c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f880:	4802      	ldr	r0, [pc, #8]	@ (800f88c <MX_USB_HOST_Process+0x10>)
 800f882:	f7fe fbdf 	bl	800e044 <USBH_Process>
}
 800f886:	bf00      	nop
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20000e40 	.word	0x20000e40

0800f890 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	3b01      	subs	r3, #1
 800f8a0:	2b04      	cmp	r3, #4
 800f8a2:	d819      	bhi.n	800f8d8 <USBH_UserProcess+0x48>
 800f8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800f8ac <USBH_UserProcess+0x1c>)
 800f8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8aa:	bf00      	nop
 800f8ac:	0800f8d9 	.word	0x0800f8d9
 800f8b0:	0800f8c9 	.word	0x0800f8c9
 800f8b4:	0800f8d9 	.word	0x0800f8d9
 800f8b8:	0800f8d1 	.word	0x0800f8d1
 800f8bc:	0800f8c1 	.word	0x0800f8c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f8c0:	4b09      	ldr	r3, [pc, #36]	@ (800f8e8 <USBH_UserProcess+0x58>)
 800f8c2:	2203      	movs	r2, #3
 800f8c4:	701a      	strb	r2, [r3, #0]
  break;
 800f8c6:	e008      	b.n	800f8da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f8c8:	4b07      	ldr	r3, [pc, #28]	@ (800f8e8 <USBH_UserProcess+0x58>)
 800f8ca:	2202      	movs	r2, #2
 800f8cc:	701a      	strb	r2, [r3, #0]
  break;
 800f8ce:	e004      	b.n	800f8da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f8d0:	4b05      	ldr	r3, [pc, #20]	@ (800f8e8 <USBH_UserProcess+0x58>)
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	701a      	strb	r2, [r3, #0]
  break;
 800f8d6:	e000      	b.n	800f8da <USBH_UserProcess+0x4a>

  default:
  break;
 800f8d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f8da:	bf00      	nop
 800f8dc:	370c      	adds	r7, #12
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	20001218 	.word	0x20001218

0800f8ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b08a      	sub	sp, #40	@ 0x28
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8f4:	f107 0314 	add.w	r3, r7, #20
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	601a      	str	r2, [r3, #0]
 800f8fc:	605a      	str	r2, [r3, #4]
 800f8fe:	609a      	str	r2, [r3, #8]
 800f900:	60da      	str	r2, [r3, #12]
 800f902:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f90c:	d147      	bne.n	800f99e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f90e:	2300      	movs	r3, #0
 800f910:	613b      	str	r3, [r7, #16]
 800f912:	4b25      	ldr	r3, [pc, #148]	@ (800f9a8 <HAL_HCD_MspInit+0xbc>)
 800f914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f916:	4a24      	ldr	r2, [pc, #144]	@ (800f9a8 <HAL_HCD_MspInit+0xbc>)
 800f918:	f043 0301 	orr.w	r3, r3, #1
 800f91c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f91e:	4b22      	ldr	r3, [pc, #136]	@ (800f9a8 <HAL_HCD_MspInit+0xbc>)
 800f920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f922:	f003 0301 	and.w	r3, r3, #1
 800f926:	613b      	str	r3, [r7, #16]
 800f928:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800f92a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800f92e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f930:	2302      	movs	r3, #2
 800f932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f934:	2300      	movs	r3, #0
 800f936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f938:	2303      	movs	r3, #3
 800f93a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f93c:	230a      	movs	r3, #10
 800f93e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f940:	f107 0314 	add.w	r3, r7, #20
 800f944:	4619      	mov	r1, r3
 800f946:	4819      	ldr	r0, [pc, #100]	@ (800f9ac <HAL_HCD_MspInit+0xc0>)
 800f948:	f7f4 f99c 	bl	8003c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 800f94c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f952:	2302      	movs	r3, #2
 800f954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f956:	2300      	movs	r3, #0
 800f958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800f95a:	f107 0314 	add.w	r3, r7, #20
 800f95e:	4619      	mov	r1, r3
 800f960:	4812      	ldr	r0, [pc, #72]	@ (800f9ac <HAL_HCD_MspInit+0xc0>)
 800f962:	f7f4 f98f 	bl	8003c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f966:	4b10      	ldr	r3, [pc, #64]	@ (800f9a8 <HAL_HCD_MspInit+0xbc>)
 800f968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f96a:	4a0f      	ldr	r2, [pc, #60]	@ (800f9a8 <HAL_HCD_MspInit+0xbc>)
 800f96c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f970:	6353      	str	r3, [r2, #52]	@ 0x34
 800f972:	2300      	movs	r3, #0
 800f974:	60fb      	str	r3, [r7, #12]
 800f976:	4b0c      	ldr	r3, [pc, #48]	@ (800f9a8 <HAL_HCD_MspInit+0xbc>)
 800f978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f97a:	4a0b      	ldr	r2, [pc, #44]	@ (800f9a8 <HAL_HCD_MspInit+0xbc>)
 800f97c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f980:	6453      	str	r3, [r2, #68]	@ 0x44
 800f982:	4b09      	ldr	r3, [pc, #36]	@ (800f9a8 <HAL_HCD_MspInit+0xbc>)
 800f984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f98a:	60fb      	str	r3, [r7, #12]
 800f98c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f98e:	2200      	movs	r2, #0
 800f990:	2100      	movs	r1, #0
 800f992:	2043      	movs	r0, #67	@ 0x43
 800f994:	f7f2 fd3a 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f998:	2043      	movs	r0, #67	@ 0x43
 800f99a:	f7f2 fd53 	bl	8002444 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f99e:	bf00      	nop
 800f9a0:	3728      	adds	r7, #40	@ 0x28
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	40023800 	.word	0x40023800
 800f9ac:	40020000 	.word	0x40020000

0800f9b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fe ff17 	bl	800e7f2 <USBH_LL_IncTimer>
}
 800f9c4:	bf00      	nop
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fe ff4f 	bl	800e87e <USBH_LL_Connect>
}
 800f9e0:	bf00      	nop
 800f9e2:	3708      	adds	r7, #8
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fe ff58 	bl	800e8ac <USBH_LL_Disconnect>
}
 800f9fc:	bf00      	nop
 800f9fe:	3708      	adds	r7, #8
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	70fb      	strb	r3, [r7, #3]
 800fa10:	4613      	mov	r3, r2
 800fa12:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fa14:	bf00      	nop
 800fa16:	370c      	adds	r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7fe ff09 	bl	800e846 <USBH_LL_PortEnabled>
}
 800fa34:	bf00      	nop
 800fa36:	3708      	adds	r7, #8
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b082      	sub	sp, #8
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fe ff09 	bl	800e862 <USBH_LL_PortDisabled>
}
 800fa50:	bf00      	nop
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d12a      	bne.n	800fac0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fa6a:	4a18      	ldr	r2, [pc, #96]	@ (800facc <USBH_LL_Init+0x74>)
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4a15      	ldr	r2, [pc, #84]	@ (800facc <USBH_LL_Init+0x74>)
 800fa76:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fa7a:	4b14      	ldr	r3, [pc, #80]	@ (800facc <USBH_LL_Init+0x74>)
 800fa7c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fa80:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fa82:	4b12      	ldr	r3, [pc, #72]	@ (800facc <USBH_LL_Init+0x74>)
 800fa84:	2208      	movs	r2, #8
 800fa86:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fa88:	4b10      	ldr	r3, [pc, #64]	@ (800facc <USBH_LL_Init+0x74>)
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fa8e:	4b0f      	ldr	r3, [pc, #60]	@ (800facc <USBH_LL_Init+0x74>)
 800fa90:	2200      	movs	r2, #0
 800fa92:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fa94:	4b0d      	ldr	r3, [pc, #52]	@ (800facc <USBH_LL_Init+0x74>)
 800fa96:	2202      	movs	r2, #2
 800fa98:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fa9a:	4b0c      	ldr	r3, [pc, #48]	@ (800facc <USBH_LL_Init+0x74>)
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800faa0:	480a      	ldr	r0, [pc, #40]	@ (800facc <USBH_LL_Init+0x74>)
 800faa2:	f7f4 facc 	bl	800403e <HAL_HCD_Init>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800faac:	f7f1 fd4c 	bl	8001548 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fab0:	4806      	ldr	r0, [pc, #24]	@ (800facc <USBH_LL_Init+0x74>)
 800fab2:	f7f4 ff2d 	bl	8004910 <HAL_HCD_GetCurrentFrame>
 800fab6:	4603      	mov	r3, r0
 800fab8:	4619      	mov	r1, r3
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f7fe fe8a 	bl	800e7d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3708      	adds	r7, #8
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	2000121c 	.word	0x2000121c

0800fad0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fad8:	2300      	movs	r3, #0
 800fada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fadc:	2300      	movs	r3, #0
 800fade:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7f4 fe9a 	bl	8004820 <HAL_HCD_Start>
 800faec:	4603      	mov	r3, r0
 800faee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800faf0:	7bfb      	ldrb	r3, [r7, #15]
 800faf2:	4618      	mov	r0, r3
 800faf4:	f000 f95e 	bl	800fdb4 <USBH_Get_USB_Status>
 800faf8:	4603      	mov	r3, r0
 800fafa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fafc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3710      	adds	r7, #16
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fb06:	b580      	push	{r7, lr}
 800fb08:	b084      	sub	sp, #16
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f4 fea2 	bl	8004866 <HAL_HCD_Stop>
 800fb22:	4603      	mov	r3, r0
 800fb24:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fb26:	7bfb      	ldrb	r3, [r7, #15]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 f943 	bl	800fdb4 <USBH_Get_USB_Status>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb32:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3710      	adds	r7, #16
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b084      	sub	sp, #16
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fb44:	2301      	movs	r3, #1
 800fb46:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7f4 feec 	bl	800492c <HAL_HCD_GetCurrentSpeed>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b02      	cmp	r3, #2
 800fb58:	d00c      	beq.n	800fb74 <USBH_LL_GetSpeed+0x38>
 800fb5a:	2b02      	cmp	r3, #2
 800fb5c:	d80d      	bhi.n	800fb7a <USBH_LL_GetSpeed+0x3e>
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d002      	beq.n	800fb68 <USBH_LL_GetSpeed+0x2c>
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d003      	beq.n	800fb6e <USBH_LL_GetSpeed+0x32>
 800fb66:	e008      	b.n	800fb7a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fb68:	2300      	movs	r3, #0
 800fb6a:	73fb      	strb	r3, [r7, #15]
    break;
 800fb6c:	e008      	b.n	800fb80 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	73fb      	strb	r3, [r7, #15]
    break;
 800fb72:	e005      	b.n	800fb80 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fb74:	2302      	movs	r3, #2
 800fb76:	73fb      	strb	r3, [r7, #15]
    break;
 800fb78:	e002      	b.n	800fb80 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	73fb      	strb	r3, [r7, #15]
    break;
 800fb7e:	bf00      	nop
  }
  return  speed;
 800fb80:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3710      	adds	r7, #16
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b084      	sub	sp, #16
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb92:	2300      	movs	r3, #0
 800fb94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fb96:	2300      	movs	r3, #0
 800fb98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7f4 fe7d 	bl	80048a0 <HAL_HCD_ResetPort>
 800fba6:	4603      	mov	r3, r0
 800fba8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fbaa:	7bfb      	ldrb	r3, [r7, #15]
 800fbac:	4618      	mov	r0, r3
 800fbae:	f000 f901 	bl	800fdb4 <USBH_Get_USB_Status>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fbb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3710      	adds	r7, #16
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	460b      	mov	r3, r1
 800fbca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fbd2:	78fa      	ldrb	r2, [r7, #3]
 800fbd4:	4611      	mov	r1, r2
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7f4 fe85 	bl	80048e6 <HAL_HCD_HC_GetXferCount>
 800fbdc:	4603      	mov	r3, r0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}

0800fbe6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800fbe6:	b590      	push	{r4, r7, lr}
 800fbe8:	b089      	sub	sp, #36	@ 0x24
 800fbea:	af04      	add	r7, sp, #16
 800fbec:	6078      	str	r0, [r7, #4]
 800fbee:	4608      	mov	r0, r1
 800fbf0:	4611      	mov	r1, r2
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	70fb      	strb	r3, [r7, #3]
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	70bb      	strb	r3, [r7, #2]
 800fbfc:	4613      	mov	r3, r2
 800fbfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc04:	2300      	movs	r3, #0
 800fc06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fc0e:	787c      	ldrb	r4, [r7, #1]
 800fc10:	78ba      	ldrb	r2, [r7, #2]
 800fc12:	78f9      	ldrb	r1, [r7, #3]
 800fc14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fc16:	9302      	str	r3, [sp, #8]
 800fc18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fc1c:	9301      	str	r3, [sp, #4]
 800fc1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc22:	9300      	str	r3, [sp, #0]
 800fc24:	4623      	mov	r3, r4
 800fc26:	f7f4 fa71 	bl	800410c <HAL_HCD_HC_Init>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc2e:	7bfb      	ldrb	r3, [r7, #15]
 800fc30:	4618      	mov	r0, r3
 800fc32:	f000 f8bf 	bl	800fdb4 <USBH_Get_USB_Status>
 800fc36:	4603      	mov	r3, r0
 800fc38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3714      	adds	r7, #20
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd90      	pop	{r4, r7, pc}

0800fc44 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b084      	sub	sp, #16
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
 800fc4c:	460b      	mov	r3, r1
 800fc4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc50:	2300      	movs	r3, #0
 800fc52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fc54:	2300      	movs	r3, #0
 800fc56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fc5e:	78fa      	ldrb	r2, [r7, #3]
 800fc60:	4611      	mov	r1, r2
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7f4 fb0a 	bl	800427c <HAL_HCD_HC_Halt>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f000 f8a0 	bl	800fdb4 <USBH_Get_USB_Status>
 800fc74:	4603      	mov	r3, r0
 800fc76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fc78:	7bbb      	ldrb	r3, [r7, #14]
}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800fc82:	b590      	push	{r4, r7, lr}
 800fc84:	b089      	sub	sp, #36	@ 0x24
 800fc86:	af04      	add	r7, sp, #16
 800fc88:	6078      	str	r0, [r7, #4]
 800fc8a:	4608      	mov	r0, r1
 800fc8c:	4611      	mov	r1, r2
 800fc8e:	461a      	mov	r2, r3
 800fc90:	4603      	mov	r3, r0
 800fc92:	70fb      	strb	r3, [r7, #3]
 800fc94:	460b      	mov	r3, r1
 800fc96:	70bb      	strb	r3, [r7, #2]
 800fc98:	4613      	mov	r3, r2
 800fc9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fca0:	2300      	movs	r3, #0
 800fca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fcaa:	787c      	ldrb	r4, [r7, #1]
 800fcac:	78ba      	ldrb	r2, [r7, #2]
 800fcae:	78f9      	ldrb	r1, [r7, #3]
 800fcb0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fcb4:	9303      	str	r3, [sp, #12]
 800fcb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fcb8:	9302      	str	r3, [sp, #8]
 800fcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcbc:	9301      	str	r3, [sp, #4]
 800fcbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	4623      	mov	r3, r4
 800fcc6:	f7f4 fafd 	bl	80042c4 <HAL_HCD_HC_SubmitRequest>
 800fcca:	4603      	mov	r3, r0
 800fccc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800fcce:	7bfb      	ldrb	r3, [r7, #15]
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f000 f86f 	bl	800fdb4 <USBH_Get_USB_Status>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fcda:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3714      	adds	r7, #20
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd90      	pop	{r4, r7, pc}

0800fce4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
 800fcec:	460b      	mov	r3, r1
 800fcee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fcf6:	78fa      	ldrb	r2, [r7, #3]
 800fcf8:	4611      	mov	r1, r2
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f4 fdde 	bl	80048bc <HAL_HCD_HC_GetURBState>
 800fd00:	4603      	mov	r3, r0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3708      	adds	r7, #8
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	b082      	sub	sp, #8
 800fd0e:	af00      	add	r7, sp, #0
 800fd10:	6078      	str	r0, [r7, #4]
 800fd12:	460b      	mov	r3, r1
 800fd14:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fd1c:	2b01      	cmp	r3, #1
 800fd1e:	d103      	bne.n	800fd28 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fd20:	78fb      	ldrb	r3, [r7, #3]
 800fd22:	4618      	mov	r0, r3
 800fd24:	f000 f872 	bl	800fe0c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fd28:	20c8      	movs	r0, #200	@ 0xc8
 800fd2a:	f7f2 fa93 	bl	8002254 <HAL_Delay>
  return USBH_OK;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3708      	adds	r7, #8
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}

0800fd38 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b085      	sub	sp, #20
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	460b      	mov	r3, r1
 800fd42:	70fb      	strb	r3, [r7, #3]
 800fd44:	4613      	mov	r3, r2
 800fd46:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fd4e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800fd50:	78fa      	ldrb	r2, [r7, #3]
 800fd52:	68f9      	ldr	r1, [r7, #12]
 800fd54:	4613      	mov	r3, r2
 800fd56:	011b      	lsls	r3, r3, #4
 800fd58:	1a9b      	subs	r3, r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	440b      	add	r3, r1
 800fd5e:	3317      	adds	r3, #23
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d00a      	beq.n	800fd7c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800fd66:	78fa      	ldrb	r2, [r7, #3]
 800fd68:	68f9      	ldr	r1, [r7, #12]
 800fd6a:	4613      	mov	r3, r2
 800fd6c:	011b      	lsls	r3, r3, #4
 800fd6e:	1a9b      	subs	r3, r3, r2
 800fd70:	009b      	lsls	r3, r3, #2
 800fd72:	440b      	add	r3, r1
 800fd74:	333c      	adds	r3, #60	@ 0x3c
 800fd76:	78ba      	ldrb	r2, [r7, #2]
 800fd78:	701a      	strb	r2, [r3, #0]
 800fd7a:	e009      	b.n	800fd90 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800fd7c:	78fa      	ldrb	r2, [r7, #3]
 800fd7e:	68f9      	ldr	r1, [r7, #12]
 800fd80:	4613      	mov	r3, r2
 800fd82:	011b      	lsls	r3, r3, #4
 800fd84:	1a9b      	subs	r3, r3, r2
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	440b      	add	r3, r1
 800fd8a:	333d      	adds	r3, #61	@ 0x3d
 800fd8c:	78ba      	ldrb	r2, [r7, #2]
 800fd8e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3714      	adds	r7, #20
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr

0800fd9e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800fd9e:	b580      	push	{r7, lr}
 800fda0:	b082      	sub	sp, #8
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f7f2 fa54 	bl	8002254 <HAL_Delay>
}
 800fdac:	bf00      	nop
 800fdae:	3708      	adds	r7, #8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	4603      	mov	r3, r0
 800fdbc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fdc2:	79fb      	ldrb	r3, [r7, #7]
 800fdc4:	2b03      	cmp	r3, #3
 800fdc6:	d817      	bhi.n	800fdf8 <USBH_Get_USB_Status+0x44>
 800fdc8:	a201      	add	r2, pc, #4	@ (adr r2, 800fdd0 <USBH_Get_USB_Status+0x1c>)
 800fdca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdce:	bf00      	nop
 800fdd0:	0800fde1 	.word	0x0800fde1
 800fdd4:	0800fde7 	.word	0x0800fde7
 800fdd8:	0800fded 	.word	0x0800fded
 800fddc:	0800fdf3 	.word	0x0800fdf3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800fde0:	2300      	movs	r3, #0
 800fde2:	73fb      	strb	r3, [r7, #15]
    break;
 800fde4:	e00b      	b.n	800fdfe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800fde6:	2302      	movs	r3, #2
 800fde8:	73fb      	strb	r3, [r7, #15]
    break;
 800fdea:	e008      	b.n	800fdfe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800fdec:	2301      	movs	r3, #1
 800fdee:	73fb      	strb	r3, [r7, #15]
    break;
 800fdf0:	e005      	b.n	800fdfe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800fdf2:	2302      	movs	r3, #2
 800fdf4:	73fb      	strb	r3, [r7, #15]
    break;
 800fdf6:	e002      	b.n	800fdfe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800fdf8:	2302      	movs	r3, #2
 800fdfa:	73fb      	strb	r3, [r7, #15]
    break;
 800fdfc:	bf00      	nop
  }
  return usb_status;
 800fdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3714      	adds	r7, #20
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	4603      	mov	r3, r0
 800fe14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800fe16:	79fb      	ldrb	r3, [r7, #7]
 800fe18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800fe1a:	79fb      	ldrb	r3, [r7, #7]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d102      	bne.n	800fe26 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800fe20:	2300      	movs	r3, #0
 800fe22:	73fb      	strb	r3, [r7, #15]
 800fe24:	e001      	b.n	800fe2a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800fe26:	2301      	movs	r3, #1
 800fe28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 800fe2a:	7bfb      	ldrb	r3, [r7, #15]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	2104      	movs	r1, #4
 800fe30:	4803      	ldr	r0, [pc, #12]	@ (800fe40 <MX_DriverVbusFS+0x34>)
 800fe32:	f7f4 f8eb 	bl	800400c <HAL_GPIO_WritePin>
}
 800fe36:	bf00      	nop
 800fe38:	3710      	adds	r7, #16
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}
 800fe3e:	bf00      	nop
 800fe40:	40020400 	.word	0x40020400

0800fe44 <malloc>:
 800fe44:	4b02      	ldr	r3, [pc, #8]	@ (800fe50 <malloc+0xc>)
 800fe46:	4601      	mov	r1, r0
 800fe48:	6818      	ldr	r0, [r3, #0]
 800fe4a:	f000 b82d 	b.w	800fea8 <_malloc_r>
 800fe4e:	bf00      	nop
 800fe50:	20000030 	.word	0x20000030

0800fe54 <free>:
 800fe54:	4b02      	ldr	r3, [pc, #8]	@ (800fe60 <free+0xc>)
 800fe56:	4601      	mov	r1, r0
 800fe58:	6818      	ldr	r0, [r3, #0]
 800fe5a:	f000 b93f 	b.w	80100dc <_free_r>
 800fe5e:	bf00      	nop
 800fe60:	20000030 	.word	0x20000030

0800fe64 <sbrk_aligned>:
 800fe64:	b570      	push	{r4, r5, r6, lr}
 800fe66:	4e0f      	ldr	r6, [pc, #60]	@ (800fea4 <sbrk_aligned+0x40>)
 800fe68:	460c      	mov	r4, r1
 800fe6a:	6831      	ldr	r1, [r6, #0]
 800fe6c:	4605      	mov	r5, r0
 800fe6e:	b911      	cbnz	r1, 800fe76 <sbrk_aligned+0x12>
 800fe70:	f000 f8f8 	bl	8010064 <_sbrk_r>
 800fe74:	6030      	str	r0, [r6, #0]
 800fe76:	4621      	mov	r1, r4
 800fe78:	4628      	mov	r0, r5
 800fe7a:	f000 f8f3 	bl	8010064 <_sbrk_r>
 800fe7e:	1c43      	adds	r3, r0, #1
 800fe80:	d103      	bne.n	800fe8a <sbrk_aligned+0x26>
 800fe82:	f04f 34ff 	mov.w	r4, #4294967295
 800fe86:	4620      	mov	r0, r4
 800fe88:	bd70      	pop	{r4, r5, r6, pc}
 800fe8a:	1cc4      	adds	r4, r0, #3
 800fe8c:	f024 0403 	bic.w	r4, r4, #3
 800fe90:	42a0      	cmp	r0, r4
 800fe92:	d0f8      	beq.n	800fe86 <sbrk_aligned+0x22>
 800fe94:	1a21      	subs	r1, r4, r0
 800fe96:	4628      	mov	r0, r5
 800fe98:	f000 f8e4 	bl	8010064 <_sbrk_r>
 800fe9c:	3001      	adds	r0, #1
 800fe9e:	d1f2      	bne.n	800fe86 <sbrk_aligned+0x22>
 800fea0:	e7ef      	b.n	800fe82 <sbrk_aligned+0x1e>
 800fea2:	bf00      	nop
 800fea4:	200015fc 	.word	0x200015fc

0800fea8 <_malloc_r>:
 800fea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feac:	1ccd      	adds	r5, r1, #3
 800feae:	f025 0503 	bic.w	r5, r5, #3
 800feb2:	3508      	adds	r5, #8
 800feb4:	2d0c      	cmp	r5, #12
 800feb6:	bf38      	it	cc
 800feb8:	250c      	movcc	r5, #12
 800feba:	2d00      	cmp	r5, #0
 800febc:	4606      	mov	r6, r0
 800febe:	db01      	blt.n	800fec4 <_malloc_r+0x1c>
 800fec0:	42a9      	cmp	r1, r5
 800fec2:	d904      	bls.n	800fece <_malloc_r+0x26>
 800fec4:	230c      	movs	r3, #12
 800fec6:	6033      	str	r3, [r6, #0]
 800fec8:	2000      	movs	r0, #0
 800feca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fece:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ffa4 <_malloc_r+0xfc>
 800fed2:	f000 f869 	bl	800ffa8 <__malloc_lock>
 800fed6:	f8d8 3000 	ldr.w	r3, [r8]
 800feda:	461c      	mov	r4, r3
 800fedc:	bb44      	cbnz	r4, 800ff30 <_malloc_r+0x88>
 800fede:	4629      	mov	r1, r5
 800fee0:	4630      	mov	r0, r6
 800fee2:	f7ff ffbf 	bl	800fe64 <sbrk_aligned>
 800fee6:	1c43      	adds	r3, r0, #1
 800fee8:	4604      	mov	r4, r0
 800feea:	d158      	bne.n	800ff9e <_malloc_r+0xf6>
 800feec:	f8d8 4000 	ldr.w	r4, [r8]
 800fef0:	4627      	mov	r7, r4
 800fef2:	2f00      	cmp	r7, #0
 800fef4:	d143      	bne.n	800ff7e <_malloc_r+0xd6>
 800fef6:	2c00      	cmp	r4, #0
 800fef8:	d04b      	beq.n	800ff92 <_malloc_r+0xea>
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	4639      	mov	r1, r7
 800fefe:	4630      	mov	r0, r6
 800ff00:	eb04 0903 	add.w	r9, r4, r3
 800ff04:	f000 f8ae 	bl	8010064 <_sbrk_r>
 800ff08:	4581      	cmp	r9, r0
 800ff0a:	d142      	bne.n	800ff92 <_malloc_r+0xea>
 800ff0c:	6821      	ldr	r1, [r4, #0]
 800ff0e:	1a6d      	subs	r5, r5, r1
 800ff10:	4629      	mov	r1, r5
 800ff12:	4630      	mov	r0, r6
 800ff14:	f7ff ffa6 	bl	800fe64 <sbrk_aligned>
 800ff18:	3001      	adds	r0, #1
 800ff1a:	d03a      	beq.n	800ff92 <_malloc_r+0xea>
 800ff1c:	6823      	ldr	r3, [r4, #0]
 800ff1e:	442b      	add	r3, r5
 800ff20:	6023      	str	r3, [r4, #0]
 800ff22:	f8d8 3000 	ldr.w	r3, [r8]
 800ff26:	685a      	ldr	r2, [r3, #4]
 800ff28:	bb62      	cbnz	r2, 800ff84 <_malloc_r+0xdc>
 800ff2a:	f8c8 7000 	str.w	r7, [r8]
 800ff2e:	e00f      	b.n	800ff50 <_malloc_r+0xa8>
 800ff30:	6822      	ldr	r2, [r4, #0]
 800ff32:	1b52      	subs	r2, r2, r5
 800ff34:	d420      	bmi.n	800ff78 <_malloc_r+0xd0>
 800ff36:	2a0b      	cmp	r2, #11
 800ff38:	d917      	bls.n	800ff6a <_malloc_r+0xc2>
 800ff3a:	1961      	adds	r1, r4, r5
 800ff3c:	42a3      	cmp	r3, r4
 800ff3e:	6025      	str	r5, [r4, #0]
 800ff40:	bf18      	it	ne
 800ff42:	6059      	strne	r1, [r3, #4]
 800ff44:	6863      	ldr	r3, [r4, #4]
 800ff46:	bf08      	it	eq
 800ff48:	f8c8 1000 	streq.w	r1, [r8]
 800ff4c:	5162      	str	r2, [r4, r5]
 800ff4e:	604b      	str	r3, [r1, #4]
 800ff50:	4630      	mov	r0, r6
 800ff52:	f000 f82f 	bl	800ffb4 <__malloc_unlock>
 800ff56:	f104 000b 	add.w	r0, r4, #11
 800ff5a:	1d23      	adds	r3, r4, #4
 800ff5c:	f020 0007 	bic.w	r0, r0, #7
 800ff60:	1ac2      	subs	r2, r0, r3
 800ff62:	bf1c      	itt	ne
 800ff64:	1a1b      	subne	r3, r3, r0
 800ff66:	50a3      	strne	r3, [r4, r2]
 800ff68:	e7af      	b.n	800feca <_malloc_r+0x22>
 800ff6a:	6862      	ldr	r2, [r4, #4]
 800ff6c:	42a3      	cmp	r3, r4
 800ff6e:	bf0c      	ite	eq
 800ff70:	f8c8 2000 	streq.w	r2, [r8]
 800ff74:	605a      	strne	r2, [r3, #4]
 800ff76:	e7eb      	b.n	800ff50 <_malloc_r+0xa8>
 800ff78:	4623      	mov	r3, r4
 800ff7a:	6864      	ldr	r4, [r4, #4]
 800ff7c:	e7ae      	b.n	800fedc <_malloc_r+0x34>
 800ff7e:	463c      	mov	r4, r7
 800ff80:	687f      	ldr	r7, [r7, #4]
 800ff82:	e7b6      	b.n	800fef2 <_malloc_r+0x4a>
 800ff84:	461a      	mov	r2, r3
 800ff86:	685b      	ldr	r3, [r3, #4]
 800ff88:	42a3      	cmp	r3, r4
 800ff8a:	d1fb      	bne.n	800ff84 <_malloc_r+0xdc>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	6053      	str	r3, [r2, #4]
 800ff90:	e7de      	b.n	800ff50 <_malloc_r+0xa8>
 800ff92:	230c      	movs	r3, #12
 800ff94:	6033      	str	r3, [r6, #0]
 800ff96:	4630      	mov	r0, r6
 800ff98:	f000 f80c 	bl	800ffb4 <__malloc_unlock>
 800ff9c:	e794      	b.n	800fec8 <_malloc_r+0x20>
 800ff9e:	6005      	str	r5, [r0, #0]
 800ffa0:	e7d6      	b.n	800ff50 <_malloc_r+0xa8>
 800ffa2:	bf00      	nop
 800ffa4:	20001600 	.word	0x20001600

0800ffa8 <__malloc_lock>:
 800ffa8:	4801      	ldr	r0, [pc, #4]	@ (800ffb0 <__malloc_lock+0x8>)
 800ffaa:	f000 b895 	b.w	80100d8 <__retarget_lock_acquire_recursive>
 800ffae:	bf00      	nop
 800ffb0:	20001740 	.word	0x20001740

0800ffb4 <__malloc_unlock>:
 800ffb4:	4801      	ldr	r0, [pc, #4]	@ (800ffbc <__malloc_unlock+0x8>)
 800ffb6:	f000 b890 	b.w	80100da <__retarget_lock_release_recursive>
 800ffba:	bf00      	nop
 800ffbc:	20001740 	.word	0x20001740

0800ffc0 <sniprintf>:
 800ffc0:	b40c      	push	{r2, r3}
 800ffc2:	b530      	push	{r4, r5, lr}
 800ffc4:	4b17      	ldr	r3, [pc, #92]	@ (8010024 <sniprintf+0x64>)
 800ffc6:	1e0c      	subs	r4, r1, #0
 800ffc8:	681d      	ldr	r5, [r3, #0]
 800ffca:	b09d      	sub	sp, #116	@ 0x74
 800ffcc:	da08      	bge.n	800ffe0 <sniprintf+0x20>
 800ffce:	238b      	movs	r3, #139	@ 0x8b
 800ffd0:	602b      	str	r3, [r5, #0]
 800ffd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd6:	b01d      	add	sp, #116	@ 0x74
 800ffd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffdc:	b002      	add	sp, #8
 800ffde:	4770      	bx	lr
 800ffe0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ffe4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ffe8:	bf14      	ite	ne
 800ffea:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ffee:	4623      	moveq	r3, r4
 800fff0:	9304      	str	r3, [sp, #16]
 800fff2:	9307      	str	r3, [sp, #28]
 800fff4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fff8:	9002      	str	r0, [sp, #8]
 800fffa:	9006      	str	r0, [sp, #24]
 800fffc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010000:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010002:	ab21      	add	r3, sp, #132	@ 0x84
 8010004:	a902      	add	r1, sp, #8
 8010006:	4628      	mov	r0, r5
 8010008:	9301      	str	r3, [sp, #4]
 801000a:	f000 f90d 	bl	8010228 <_svfiprintf_r>
 801000e:	1c43      	adds	r3, r0, #1
 8010010:	bfbc      	itt	lt
 8010012:	238b      	movlt	r3, #139	@ 0x8b
 8010014:	602b      	strlt	r3, [r5, #0]
 8010016:	2c00      	cmp	r4, #0
 8010018:	d0dd      	beq.n	800ffd6 <sniprintf+0x16>
 801001a:	9b02      	ldr	r3, [sp, #8]
 801001c:	2200      	movs	r2, #0
 801001e:	701a      	strb	r2, [r3, #0]
 8010020:	e7d9      	b.n	800ffd6 <sniprintf+0x16>
 8010022:	bf00      	nop
 8010024:	20000030 	.word	0x20000030

08010028 <memset>:
 8010028:	4402      	add	r2, r0
 801002a:	4603      	mov	r3, r0
 801002c:	4293      	cmp	r3, r2
 801002e:	d100      	bne.n	8010032 <memset+0xa>
 8010030:	4770      	bx	lr
 8010032:	f803 1b01 	strb.w	r1, [r3], #1
 8010036:	e7f9      	b.n	801002c <memset+0x4>

08010038 <strstr>:
 8010038:	780a      	ldrb	r2, [r1, #0]
 801003a:	b570      	push	{r4, r5, r6, lr}
 801003c:	b96a      	cbnz	r2, 801005a <strstr+0x22>
 801003e:	bd70      	pop	{r4, r5, r6, pc}
 8010040:	429a      	cmp	r2, r3
 8010042:	d109      	bne.n	8010058 <strstr+0x20>
 8010044:	460c      	mov	r4, r1
 8010046:	4605      	mov	r5, r0
 8010048:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801004c:	2b00      	cmp	r3, #0
 801004e:	d0f6      	beq.n	801003e <strstr+0x6>
 8010050:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010054:	429e      	cmp	r6, r3
 8010056:	d0f7      	beq.n	8010048 <strstr+0x10>
 8010058:	3001      	adds	r0, #1
 801005a:	7803      	ldrb	r3, [r0, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d1ef      	bne.n	8010040 <strstr+0x8>
 8010060:	4618      	mov	r0, r3
 8010062:	e7ec      	b.n	801003e <strstr+0x6>

08010064 <_sbrk_r>:
 8010064:	b538      	push	{r3, r4, r5, lr}
 8010066:	4d06      	ldr	r5, [pc, #24]	@ (8010080 <_sbrk_r+0x1c>)
 8010068:	2300      	movs	r3, #0
 801006a:	4604      	mov	r4, r0
 801006c:	4608      	mov	r0, r1
 801006e:	602b      	str	r3, [r5, #0]
 8010070:	f7f2 f83c 	bl	80020ec <_sbrk>
 8010074:	1c43      	adds	r3, r0, #1
 8010076:	d102      	bne.n	801007e <_sbrk_r+0x1a>
 8010078:	682b      	ldr	r3, [r5, #0]
 801007a:	b103      	cbz	r3, 801007e <_sbrk_r+0x1a>
 801007c:	6023      	str	r3, [r4, #0]
 801007e:	bd38      	pop	{r3, r4, r5, pc}
 8010080:	2000173c 	.word	0x2000173c

08010084 <__errno>:
 8010084:	4b01      	ldr	r3, [pc, #4]	@ (801008c <__errno+0x8>)
 8010086:	6818      	ldr	r0, [r3, #0]
 8010088:	4770      	bx	lr
 801008a:	bf00      	nop
 801008c:	20000030 	.word	0x20000030

08010090 <__libc_init_array>:
 8010090:	b570      	push	{r4, r5, r6, lr}
 8010092:	4d0d      	ldr	r5, [pc, #52]	@ (80100c8 <__libc_init_array+0x38>)
 8010094:	4c0d      	ldr	r4, [pc, #52]	@ (80100cc <__libc_init_array+0x3c>)
 8010096:	1b64      	subs	r4, r4, r5
 8010098:	10a4      	asrs	r4, r4, #2
 801009a:	2600      	movs	r6, #0
 801009c:	42a6      	cmp	r6, r4
 801009e:	d109      	bne.n	80100b4 <__libc_init_array+0x24>
 80100a0:	4d0b      	ldr	r5, [pc, #44]	@ (80100d0 <__libc_init_array+0x40>)
 80100a2:	4c0c      	ldr	r4, [pc, #48]	@ (80100d4 <__libc_init_array+0x44>)
 80100a4:	f000 fba8 	bl	80107f8 <_init>
 80100a8:	1b64      	subs	r4, r4, r5
 80100aa:	10a4      	asrs	r4, r4, #2
 80100ac:	2600      	movs	r6, #0
 80100ae:	42a6      	cmp	r6, r4
 80100b0:	d105      	bne.n	80100be <__libc_init_array+0x2e>
 80100b2:	bd70      	pop	{r4, r5, r6, pc}
 80100b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80100b8:	4798      	blx	r3
 80100ba:	3601      	adds	r6, #1
 80100bc:	e7ee      	b.n	801009c <__libc_init_array+0xc>
 80100be:	f855 3b04 	ldr.w	r3, [r5], #4
 80100c2:	4798      	blx	r3
 80100c4:	3601      	adds	r6, #1
 80100c6:	e7f2      	b.n	80100ae <__libc_init_array+0x1e>
 80100c8:	08010a04 	.word	0x08010a04
 80100cc:	08010a04 	.word	0x08010a04
 80100d0:	08010a04 	.word	0x08010a04
 80100d4:	08010a08 	.word	0x08010a08

080100d8 <__retarget_lock_acquire_recursive>:
 80100d8:	4770      	bx	lr

080100da <__retarget_lock_release_recursive>:
 80100da:	4770      	bx	lr

080100dc <_free_r>:
 80100dc:	b538      	push	{r3, r4, r5, lr}
 80100de:	4605      	mov	r5, r0
 80100e0:	2900      	cmp	r1, #0
 80100e2:	d041      	beq.n	8010168 <_free_r+0x8c>
 80100e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100e8:	1f0c      	subs	r4, r1, #4
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	bfb8      	it	lt
 80100ee:	18e4      	addlt	r4, r4, r3
 80100f0:	f7ff ff5a 	bl	800ffa8 <__malloc_lock>
 80100f4:	4a1d      	ldr	r2, [pc, #116]	@ (801016c <_free_r+0x90>)
 80100f6:	6813      	ldr	r3, [r2, #0]
 80100f8:	b933      	cbnz	r3, 8010108 <_free_r+0x2c>
 80100fa:	6063      	str	r3, [r4, #4]
 80100fc:	6014      	str	r4, [r2, #0]
 80100fe:	4628      	mov	r0, r5
 8010100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010104:	f7ff bf56 	b.w	800ffb4 <__malloc_unlock>
 8010108:	42a3      	cmp	r3, r4
 801010a:	d908      	bls.n	801011e <_free_r+0x42>
 801010c:	6820      	ldr	r0, [r4, #0]
 801010e:	1821      	adds	r1, r4, r0
 8010110:	428b      	cmp	r3, r1
 8010112:	bf01      	itttt	eq
 8010114:	6819      	ldreq	r1, [r3, #0]
 8010116:	685b      	ldreq	r3, [r3, #4]
 8010118:	1809      	addeq	r1, r1, r0
 801011a:	6021      	streq	r1, [r4, #0]
 801011c:	e7ed      	b.n	80100fa <_free_r+0x1e>
 801011e:	461a      	mov	r2, r3
 8010120:	685b      	ldr	r3, [r3, #4]
 8010122:	b10b      	cbz	r3, 8010128 <_free_r+0x4c>
 8010124:	42a3      	cmp	r3, r4
 8010126:	d9fa      	bls.n	801011e <_free_r+0x42>
 8010128:	6811      	ldr	r1, [r2, #0]
 801012a:	1850      	adds	r0, r2, r1
 801012c:	42a0      	cmp	r0, r4
 801012e:	d10b      	bne.n	8010148 <_free_r+0x6c>
 8010130:	6820      	ldr	r0, [r4, #0]
 8010132:	4401      	add	r1, r0
 8010134:	1850      	adds	r0, r2, r1
 8010136:	4283      	cmp	r3, r0
 8010138:	6011      	str	r1, [r2, #0]
 801013a:	d1e0      	bne.n	80100fe <_free_r+0x22>
 801013c:	6818      	ldr	r0, [r3, #0]
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	6053      	str	r3, [r2, #4]
 8010142:	4408      	add	r0, r1
 8010144:	6010      	str	r0, [r2, #0]
 8010146:	e7da      	b.n	80100fe <_free_r+0x22>
 8010148:	d902      	bls.n	8010150 <_free_r+0x74>
 801014a:	230c      	movs	r3, #12
 801014c:	602b      	str	r3, [r5, #0]
 801014e:	e7d6      	b.n	80100fe <_free_r+0x22>
 8010150:	6820      	ldr	r0, [r4, #0]
 8010152:	1821      	adds	r1, r4, r0
 8010154:	428b      	cmp	r3, r1
 8010156:	bf04      	itt	eq
 8010158:	6819      	ldreq	r1, [r3, #0]
 801015a:	685b      	ldreq	r3, [r3, #4]
 801015c:	6063      	str	r3, [r4, #4]
 801015e:	bf04      	itt	eq
 8010160:	1809      	addeq	r1, r1, r0
 8010162:	6021      	streq	r1, [r4, #0]
 8010164:	6054      	str	r4, [r2, #4]
 8010166:	e7ca      	b.n	80100fe <_free_r+0x22>
 8010168:	bd38      	pop	{r3, r4, r5, pc}
 801016a:	bf00      	nop
 801016c:	20001600 	.word	0x20001600

08010170 <__ssputs_r>:
 8010170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010174:	688e      	ldr	r6, [r1, #8]
 8010176:	461f      	mov	r7, r3
 8010178:	42be      	cmp	r6, r7
 801017a:	680b      	ldr	r3, [r1, #0]
 801017c:	4682      	mov	sl, r0
 801017e:	460c      	mov	r4, r1
 8010180:	4690      	mov	r8, r2
 8010182:	d82d      	bhi.n	80101e0 <__ssputs_r+0x70>
 8010184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010188:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801018c:	d026      	beq.n	80101dc <__ssputs_r+0x6c>
 801018e:	6965      	ldr	r5, [r4, #20]
 8010190:	6909      	ldr	r1, [r1, #16]
 8010192:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010196:	eba3 0901 	sub.w	r9, r3, r1
 801019a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801019e:	1c7b      	adds	r3, r7, #1
 80101a0:	444b      	add	r3, r9
 80101a2:	106d      	asrs	r5, r5, #1
 80101a4:	429d      	cmp	r5, r3
 80101a6:	bf38      	it	cc
 80101a8:	461d      	movcc	r5, r3
 80101aa:	0553      	lsls	r3, r2, #21
 80101ac:	d527      	bpl.n	80101fe <__ssputs_r+0x8e>
 80101ae:	4629      	mov	r1, r5
 80101b0:	f7ff fe7a 	bl	800fea8 <_malloc_r>
 80101b4:	4606      	mov	r6, r0
 80101b6:	b360      	cbz	r0, 8010212 <__ssputs_r+0xa2>
 80101b8:	6921      	ldr	r1, [r4, #16]
 80101ba:	464a      	mov	r2, r9
 80101bc:	f000 fad8 	bl	8010770 <memcpy>
 80101c0:	89a3      	ldrh	r3, [r4, #12]
 80101c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80101c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101ca:	81a3      	strh	r3, [r4, #12]
 80101cc:	6126      	str	r6, [r4, #16]
 80101ce:	6165      	str	r5, [r4, #20]
 80101d0:	444e      	add	r6, r9
 80101d2:	eba5 0509 	sub.w	r5, r5, r9
 80101d6:	6026      	str	r6, [r4, #0]
 80101d8:	60a5      	str	r5, [r4, #8]
 80101da:	463e      	mov	r6, r7
 80101dc:	42be      	cmp	r6, r7
 80101de:	d900      	bls.n	80101e2 <__ssputs_r+0x72>
 80101e0:	463e      	mov	r6, r7
 80101e2:	6820      	ldr	r0, [r4, #0]
 80101e4:	4632      	mov	r2, r6
 80101e6:	4641      	mov	r1, r8
 80101e8:	f000 faa8 	bl	801073c <memmove>
 80101ec:	68a3      	ldr	r3, [r4, #8]
 80101ee:	1b9b      	subs	r3, r3, r6
 80101f0:	60a3      	str	r3, [r4, #8]
 80101f2:	6823      	ldr	r3, [r4, #0]
 80101f4:	4433      	add	r3, r6
 80101f6:	6023      	str	r3, [r4, #0]
 80101f8:	2000      	movs	r0, #0
 80101fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80101fe:	462a      	mov	r2, r5
 8010200:	f000 fac4 	bl	801078c <_realloc_r>
 8010204:	4606      	mov	r6, r0
 8010206:	2800      	cmp	r0, #0
 8010208:	d1e0      	bne.n	80101cc <__ssputs_r+0x5c>
 801020a:	6921      	ldr	r1, [r4, #16]
 801020c:	4650      	mov	r0, sl
 801020e:	f7ff ff65 	bl	80100dc <_free_r>
 8010212:	230c      	movs	r3, #12
 8010214:	f8ca 3000 	str.w	r3, [sl]
 8010218:	89a3      	ldrh	r3, [r4, #12]
 801021a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801021e:	81a3      	strh	r3, [r4, #12]
 8010220:	f04f 30ff 	mov.w	r0, #4294967295
 8010224:	e7e9      	b.n	80101fa <__ssputs_r+0x8a>
	...

08010228 <_svfiprintf_r>:
 8010228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801022c:	4698      	mov	r8, r3
 801022e:	898b      	ldrh	r3, [r1, #12]
 8010230:	061b      	lsls	r3, r3, #24
 8010232:	b09d      	sub	sp, #116	@ 0x74
 8010234:	4607      	mov	r7, r0
 8010236:	460d      	mov	r5, r1
 8010238:	4614      	mov	r4, r2
 801023a:	d510      	bpl.n	801025e <_svfiprintf_r+0x36>
 801023c:	690b      	ldr	r3, [r1, #16]
 801023e:	b973      	cbnz	r3, 801025e <_svfiprintf_r+0x36>
 8010240:	2140      	movs	r1, #64	@ 0x40
 8010242:	f7ff fe31 	bl	800fea8 <_malloc_r>
 8010246:	6028      	str	r0, [r5, #0]
 8010248:	6128      	str	r0, [r5, #16]
 801024a:	b930      	cbnz	r0, 801025a <_svfiprintf_r+0x32>
 801024c:	230c      	movs	r3, #12
 801024e:	603b      	str	r3, [r7, #0]
 8010250:	f04f 30ff 	mov.w	r0, #4294967295
 8010254:	b01d      	add	sp, #116	@ 0x74
 8010256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801025a:	2340      	movs	r3, #64	@ 0x40
 801025c:	616b      	str	r3, [r5, #20]
 801025e:	2300      	movs	r3, #0
 8010260:	9309      	str	r3, [sp, #36]	@ 0x24
 8010262:	2320      	movs	r3, #32
 8010264:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010268:	f8cd 800c 	str.w	r8, [sp, #12]
 801026c:	2330      	movs	r3, #48	@ 0x30
 801026e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801040c <_svfiprintf_r+0x1e4>
 8010272:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010276:	f04f 0901 	mov.w	r9, #1
 801027a:	4623      	mov	r3, r4
 801027c:	469a      	mov	sl, r3
 801027e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010282:	b10a      	cbz	r2, 8010288 <_svfiprintf_r+0x60>
 8010284:	2a25      	cmp	r2, #37	@ 0x25
 8010286:	d1f9      	bne.n	801027c <_svfiprintf_r+0x54>
 8010288:	ebba 0b04 	subs.w	fp, sl, r4
 801028c:	d00b      	beq.n	80102a6 <_svfiprintf_r+0x7e>
 801028e:	465b      	mov	r3, fp
 8010290:	4622      	mov	r2, r4
 8010292:	4629      	mov	r1, r5
 8010294:	4638      	mov	r0, r7
 8010296:	f7ff ff6b 	bl	8010170 <__ssputs_r>
 801029a:	3001      	adds	r0, #1
 801029c:	f000 80a7 	beq.w	80103ee <_svfiprintf_r+0x1c6>
 80102a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80102a2:	445a      	add	r2, fp
 80102a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80102a6:	f89a 3000 	ldrb.w	r3, [sl]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f000 809f 	beq.w	80103ee <_svfiprintf_r+0x1c6>
 80102b0:	2300      	movs	r3, #0
 80102b2:	f04f 32ff 	mov.w	r2, #4294967295
 80102b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80102ba:	f10a 0a01 	add.w	sl, sl, #1
 80102be:	9304      	str	r3, [sp, #16]
 80102c0:	9307      	str	r3, [sp, #28]
 80102c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80102c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80102c8:	4654      	mov	r4, sl
 80102ca:	2205      	movs	r2, #5
 80102cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102d0:	484e      	ldr	r0, [pc, #312]	@ (801040c <_svfiprintf_r+0x1e4>)
 80102d2:	f7ef ff9d 	bl	8000210 <memchr>
 80102d6:	9a04      	ldr	r2, [sp, #16]
 80102d8:	b9d8      	cbnz	r0, 8010312 <_svfiprintf_r+0xea>
 80102da:	06d0      	lsls	r0, r2, #27
 80102dc:	bf44      	itt	mi
 80102de:	2320      	movmi	r3, #32
 80102e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102e4:	0711      	lsls	r1, r2, #28
 80102e6:	bf44      	itt	mi
 80102e8:	232b      	movmi	r3, #43	@ 0x2b
 80102ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102ee:	f89a 3000 	ldrb.w	r3, [sl]
 80102f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80102f4:	d015      	beq.n	8010322 <_svfiprintf_r+0xfa>
 80102f6:	9a07      	ldr	r2, [sp, #28]
 80102f8:	4654      	mov	r4, sl
 80102fa:	2000      	movs	r0, #0
 80102fc:	f04f 0c0a 	mov.w	ip, #10
 8010300:	4621      	mov	r1, r4
 8010302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010306:	3b30      	subs	r3, #48	@ 0x30
 8010308:	2b09      	cmp	r3, #9
 801030a:	d94b      	bls.n	80103a4 <_svfiprintf_r+0x17c>
 801030c:	b1b0      	cbz	r0, 801033c <_svfiprintf_r+0x114>
 801030e:	9207      	str	r2, [sp, #28]
 8010310:	e014      	b.n	801033c <_svfiprintf_r+0x114>
 8010312:	eba0 0308 	sub.w	r3, r0, r8
 8010316:	fa09 f303 	lsl.w	r3, r9, r3
 801031a:	4313      	orrs	r3, r2
 801031c:	9304      	str	r3, [sp, #16]
 801031e:	46a2      	mov	sl, r4
 8010320:	e7d2      	b.n	80102c8 <_svfiprintf_r+0xa0>
 8010322:	9b03      	ldr	r3, [sp, #12]
 8010324:	1d19      	adds	r1, r3, #4
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	9103      	str	r1, [sp, #12]
 801032a:	2b00      	cmp	r3, #0
 801032c:	bfbb      	ittet	lt
 801032e:	425b      	neglt	r3, r3
 8010330:	f042 0202 	orrlt.w	r2, r2, #2
 8010334:	9307      	strge	r3, [sp, #28]
 8010336:	9307      	strlt	r3, [sp, #28]
 8010338:	bfb8      	it	lt
 801033a:	9204      	strlt	r2, [sp, #16]
 801033c:	7823      	ldrb	r3, [r4, #0]
 801033e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010340:	d10a      	bne.n	8010358 <_svfiprintf_r+0x130>
 8010342:	7863      	ldrb	r3, [r4, #1]
 8010344:	2b2a      	cmp	r3, #42	@ 0x2a
 8010346:	d132      	bne.n	80103ae <_svfiprintf_r+0x186>
 8010348:	9b03      	ldr	r3, [sp, #12]
 801034a:	1d1a      	adds	r2, r3, #4
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	9203      	str	r2, [sp, #12]
 8010350:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010354:	3402      	adds	r4, #2
 8010356:	9305      	str	r3, [sp, #20]
 8010358:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801041c <_svfiprintf_r+0x1f4>
 801035c:	7821      	ldrb	r1, [r4, #0]
 801035e:	2203      	movs	r2, #3
 8010360:	4650      	mov	r0, sl
 8010362:	f7ef ff55 	bl	8000210 <memchr>
 8010366:	b138      	cbz	r0, 8010378 <_svfiprintf_r+0x150>
 8010368:	9b04      	ldr	r3, [sp, #16]
 801036a:	eba0 000a 	sub.w	r0, r0, sl
 801036e:	2240      	movs	r2, #64	@ 0x40
 8010370:	4082      	lsls	r2, r0
 8010372:	4313      	orrs	r3, r2
 8010374:	3401      	adds	r4, #1
 8010376:	9304      	str	r3, [sp, #16]
 8010378:	f814 1b01 	ldrb.w	r1, [r4], #1
 801037c:	4824      	ldr	r0, [pc, #144]	@ (8010410 <_svfiprintf_r+0x1e8>)
 801037e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010382:	2206      	movs	r2, #6
 8010384:	f7ef ff44 	bl	8000210 <memchr>
 8010388:	2800      	cmp	r0, #0
 801038a:	d036      	beq.n	80103fa <_svfiprintf_r+0x1d2>
 801038c:	4b21      	ldr	r3, [pc, #132]	@ (8010414 <_svfiprintf_r+0x1ec>)
 801038e:	bb1b      	cbnz	r3, 80103d8 <_svfiprintf_r+0x1b0>
 8010390:	9b03      	ldr	r3, [sp, #12]
 8010392:	3307      	adds	r3, #7
 8010394:	f023 0307 	bic.w	r3, r3, #7
 8010398:	3308      	adds	r3, #8
 801039a:	9303      	str	r3, [sp, #12]
 801039c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801039e:	4433      	add	r3, r6
 80103a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80103a2:	e76a      	b.n	801027a <_svfiprintf_r+0x52>
 80103a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80103a8:	460c      	mov	r4, r1
 80103aa:	2001      	movs	r0, #1
 80103ac:	e7a8      	b.n	8010300 <_svfiprintf_r+0xd8>
 80103ae:	2300      	movs	r3, #0
 80103b0:	3401      	adds	r4, #1
 80103b2:	9305      	str	r3, [sp, #20]
 80103b4:	4619      	mov	r1, r3
 80103b6:	f04f 0c0a 	mov.w	ip, #10
 80103ba:	4620      	mov	r0, r4
 80103bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80103c0:	3a30      	subs	r2, #48	@ 0x30
 80103c2:	2a09      	cmp	r2, #9
 80103c4:	d903      	bls.n	80103ce <_svfiprintf_r+0x1a6>
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d0c6      	beq.n	8010358 <_svfiprintf_r+0x130>
 80103ca:	9105      	str	r1, [sp, #20]
 80103cc:	e7c4      	b.n	8010358 <_svfiprintf_r+0x130>
 80103ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80103d2:	4604      	mov	r4, r0
 80103d4:	2301      	movs	r3, #1
 80103d6:	e7f0      	b.n	80103ba <_svfiprintf_r+0x192>
 80103d8:	ab03      	add	r3, sp, #12
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	462a      	mov	r2, r5
 80103de:	4b0e      	ldr	r3, [pc, #56]	@ (8010418 <_svfiprintf_r+0x1f0>)
 80103e0:	a904      	add	r1, sp, #16
 80103e2:	4638      	mov	r0, r7
 80103e4:	f3af 8000 	nop.w
 80103e8:	1c42      	adds	r2, r0, #1
 80103ea:	4606      	mov	r6, r0
 80103ec:	d1d6      	bne.n	801039c <_svfiprintf_r+0x174>
 80103ee:	89ab      	ldrh	r3, [r5, #12]
 80103f0:	065b      	lsls	r3, r3, #25
 80103f2:	f53f af2d 	bmi.w	8010250 <_svfiprintf_r+0x28>
 80103f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103f8:	e72c      	b.n	8010254 <_svfiprintf_r+0x2c>
 80103fa:	ab03      	add	r3, sp, #12
 80103fc:	9300      	str	r3, [sp, #0]
 80103fe:	462a      	mov	r2, r5
 8010400:	4b05      	ldr	r3, [pc, #20]	@ (8010418 <_svfiprintf_r+0x1f0>)
 8010402:	a904      	add	r1, sp, #16
 8010404:	4638      	mov	r0, r7
 8010406:	f000 f879 	bl	80104fc <_printf_i>
 801040a:	e7ed      	b.n	80103e8 <_svfiprintf_r+0x1c0>
 801040c:	080109c8 	.word	0x080109c8
 8010410:	080109d2 	.word	0x080109d2
 8010414:	00000000 	.word	0x00000000
 8010418:	08010171 	.word	0x08010171
 801041c:	080109ce 	.word	0x080109ce

08010420 <_printf_common>:
 8010420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010424:	4616      	mov	r6, r2
 8010426:	4698      	mov	r8, r3
 8010428:	688a      	ldr	r2, [r1, #8]
 801042a:	690b      	ldr	r3, [r1, #16]
 801042c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010430:	4293      	cmp	r3, r2
 8010432:	bfb8      	it	lt
 8010434:	4613      	movlt	r3, r2
 8010436:	6033      	str	r3, [r6, #0]
 8010438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801043c:	4607      	mov	r7, r0
 801043e:	460c      	mov	r4, r1
 8010440:	b10a      	cbz	r2, 8010446 <_printf_common+0x26>
 8010442:	3301      	adds	r3, #1
 8010444:	6033      	str	r3, [r6, #0]
 8010446:	6823      	ldr	r3, [r4, #0]
 8010448:	0699      	lsls	r1, r3, #26
 801044a:	bf42      	ittt	mi
 801044c:	6833      	ldrmi	r3, [r6, #0]
 801044e:	3302      	addmi	r3, #2
 8010450:	6033      	strmi	r3, [r6, #0]
 8010452:	6825      	ldr	r5, [r4, #0]
 8010454:	f015 0506 	ands.w	r5, r5, #6
 8010458:	d106      	bne.n	8010468 <_printf_common+0x48>
 801045a:	f104 0a19 	add.w	sl, r4, #25
 801045e:	68e3      	ldr	r3, [r4, #12]
 8010460:	6832      	ldr	r2, [r6, #0]
 8010462:	1a9b      	subs	r3, r3, r2
 8010464:	42ab      	cmp	r3, r5
 8010466:	dc26      	bgt.n	80104b6 <_printf_common+0x96>
 8010468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801046c:	6822      	ldr	r2, [r4, #0]
 801046e:	3b00      	subs	r3, #0
 8010470:	bf18      	it	ne
 8010472:	2301      	movne	r3, #1
 8010474:	0692      	lsls	r2, r2, #26
 8010476:	d42b      	bmi.n	80104d0 <_printf_common+0xb0>
 8010478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801047c:	4641      	mov	r1, r8
 801047e:	4638      	mov	r0, r7
 8010480:	47c8      	blx	r9
 8010482:	3001      	adds	r0, #1
 8010484:	d01e      	beq.n	80104c4 <_printf_common+0xa4>
 8010486:	6823      	ldr	r3, [r4, #0]
 8010488:	6922      	ldr	r2, [r4, #16]
 801048a:	f003 0306 	and.w	r3, r3, #6
 801048e:	2b04      	cmp	r3, #4
 8010490:	bf02      	ittt	eq
 8010492:	68e5      	ldreq	r5, [r4, #12]
 8010494:	6833      	ldreq	r3, [r6, #0]
 8010496:	1aed      	subeq	r5, r5, r3
 8010498:	68a3      	ldr	r3, [r4, #8]
 801049a:	bf0c      	ite	eq
 801049c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80104a0:	2500      	movne	r5, #0
 80104a2:	4293      	cmp	r3, r2
 80104a4:	bfc4      	itt	gt
 80104a6:	1a9b      	subgt	r3, r3, r2
 80104a8:	18ed      	addgt	r5, r5, r3
 80104aa:	2600      	movs	r6, #0
 80104ac:	341a      	adds	r4, #26
 80104ae:	42b5      	cmp	r5, r6
 80104b0:	d11a      	bne.n	80104e8 <_printf_common+0xc8>
 80104b2:	2000      	movs	r0, #0
 80104b4:	e008      	b.n	80104c8 <_printf_common+0xa8>
 80104b6:	2301      	movs	r3, #1
 80104b8:	4652      	mov	r2, sl
 80104ba:	4641      	mov	r1, r8
 80104bc:	4638      	mov	r0, r7
 80104be:	47c8      	blx	r9
 80104c0:	3001      	adds	r0, #1
 80104c2:	d103      	bne.n	80104cc <_printf_common+0xac>
 80104c4:	f04f 30ff 	mov.w	r0, #4294967295
 80104c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104cc:	3501      	adds	r5, #1
 80104ce:	e7c6      	b.n	801045e <_printf_common+0x3e>
 80104d0:	18e1      	adds	r1, r4, r3
 80104d2:	1c5a      	adds	r2, r3, #1
 80104d4:	2030      	movs	r0, #48	@ 0x30
 80104d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80104da:	4422      	add	r2, r4
 80104dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80104e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80104e4:	3302      	adds	r3, #2
 80104e6:	e7c7      	b.n	8010478 <_printf_common+0x58>
 80104e8:	2301      	movs	r3, #1
 80104ea:	4622      	mov	r2, r4
 80104ec:	4641      	mov	r1, r8
 80104ee:	4638      	mov	r0, r7
 80104f0:	47c8      	blx	r9
 80104f2:	3001      	adds	r0, #1
 80104f4:	d0e6      	beq.n	80104c4 <_printf_common+0xa4>
 80104f6:	3601      	adds	r6, #1
 80104f8:	e7d9      	b.n	80104ae <_printf_common+0x8e>
	...

080104fc <_printf_i>:
 80104fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010500:	7e0f      	ldrb	r7, [r1, #24]
 8010502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010504:	2f78      	cmp	r7, #120	@ 0x78
 8010506:	4691      	mov	r9, r2
 8010508:	4680      	mov	r8, r0
 801050a:	460c      	mov	r4, r1
 801050c:	469a      	mov	sl, r3
 801050e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010512:	d807      	bhi.n	8010524 <_printf_i+0x28>
 8010514:	2f62      	cmp	r7, #98	@ 0x62
 8010516:	d80a      	bhi.n	801052e <_printf_i+0x32>
 8010518:	2f00      	cmp	r7, #0
 801051a:	f000 80d2 	beq.w	80106c2 <_printf_i+0x1c6>
 801051e:	2f58      	cmp	r7, #88	@ 0x58
 8010520:	f000 80b9 	beq.w	8010696 <_printf_i+0x19a>
 8010524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801052c:	e03a      	b.n	80105a4 <_printf_i+0xa8>
 801052e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010532:	2b15      	cmp	r3, #21
 8010534:	d8f6      	bhi.n	8010524 <_printf_i+0x28>
 8010536:	a101      	add	r1, pc, #4	@ (adr r1, 801053c <_printf_i+0x40>)
 8010538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801053c:	08010595 	.word	0x08010595
 8010540:	080105a9 	.word	0x080105a9
 8010544:	08010525 	.word	0x08010525
 8010548:	08010525 	.word	0x08010525
 801054c:	08010525 	.word	0x08010525
 8010550:	08010525 	.word	0x08010525
 8010554:	080105a9 	.word	0x080105a9
 8010558:	08010525 	.word	0x08010525
 801055c:	08010525 	.word	0x08010525
 8010560:	08010525 	.word	0x08010525
 8010564:	08010525 	.word	0x08010525
 8010568:	080106a9 	.word	0x080106a9
 801056c:	080105d3 	.word	0x080105d3
 8010570:	08010663 	.word	0x08010663
 8010574:	08010525 	.word	0x08010525
 8010578:	08010525 	.word	0x08010525
 801057c:	080106cb 	.word	0x080106cb
 8010580:	08010525 	.word	0x08010525
 8010584:	080105d3 	.word	0x080105d3
 8010588:	08010525 	.word	0x08010525
 801058c:	08010525 	.word	0x08010525
 8010590:	0801066b 	.word	0x0801066b
 8010594:	6833      	ldr	r3, [r6, #0]
 8010596:	1d1a      	adds	r2, r3, #4
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	6032      	str	r2, [r6, #0]
 801059c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80105a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80105a4:	2301      	movs	r3, #1
 80105a6:	e09d      	b.n	80106e4 <_printf_i+0x1e8>
 80105a8:	6833      	ldr	r3, [r6, #0]
 80105aa:	6820      	ldr	r0, [r4, #0]
 80105ac:	1d19      	adds	r1, r3, #4
 80105ae:	6031      	str	r1, [r6, #0]
 80105b0:	0606      	lsls	r6, r0, #24
 80105b2:	d501      	bpl.n	80105b8 <_printf_i+0xbc>
 80105b4:	681d      	ldr	r5, [r3, #0]
 80105b6:	e003      	b.n	80105c0 <_printf_i+0xc4>
 80105b8:	0645      	lsls	r5, r0, #25
 80105ba:	d5fb      	bpl.n	80105b4 <_printf_i+0xb8>
 80105bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80105c0:	2d00      	cmp	r5, #0
 80105c2:	da03      	bge.n	80105cc <_printf_i+0xd0>
 80105c4:	232d      	movs	r3, #45	@ 0x2d
 80105c6:	426d      	negs	r5, r5
 80105c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105cc:	4859      	ldr	r0, [pc, #356]	@ (8010734 <_printf_i+0x238>)
 80105ce:	230a      	movs	r3, #10
 80105d0:	e011      	b.n	80105f6 <_printf_i+0xfa>
 80105d2:	6821      	ldr	r1, [r4, #0]
 80105d4:	6833      	ldr	r3, [r6, #0]
 80105d6:	0608      	lsls	r0, r1, #24
 80105d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80105dc:	d402      	bmi.n	80105e4 <_printf_i+0xe8>
 80105de:	0649      	lsls	r1, r1, #25
 80105e0:	bf48      	it	mi
 80105e2:	b2ad      	uxthmi	r5, r5
 80105e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80105e6:	4853      	ldr	r0, [pc, #332]	@ (8010734 <_printf_i+0x238>)
 80105e8:	6033      	str	r3, [r6, #0]
 80105ea:	bf14      	ite	ne
 80105ec:	230a      	movne	r3, #10
 80105ee:	2308      	moveq	r3, #8
 80105f0:	2100      	movs	r1, #0
 80105f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80105f6:	6866      	ldr	r6, [r4, #4]
 80105f8:	60a6      	str	r6, [r4, #8]
 80105fa:	2e00      	cmp	r6, #0
 80105fc:	bfa2      	ittt	ge
 80105fe:	6821      	ldrge	r1, [r4, #0]
 8010600:	f021 0104 	bicge.w	r1, r1, #4
 8010604:	6021      	strge	r1, [r4, #0]
 8010606:	b90d      	cbnz	r5, 801060c <_printf_i+0x110>
 8010608:	2e00      	cmp	r6, #0
 801060a:	d04b      	beq.n	80106a4 <_printf_i+0x1a8>
 801060c:	4616      	mov	r6, r2
 801060e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010612:	fb03 5711 	mls	r7, r3, r1, r5
 8010616:	5dc7      	ldrb	r7, [r0, r7]
 8010618:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801061c:	462f      	mov	r7, r5
 801061e:	42bb      	cmp	r3, r7
 8010620:	460d      	mov	r5, r1
 8010622:	d9f4      	bls.n	801060e <_printf_i+0x112>
 8010624:	2b08      	cmp	r3, #8
 8010626:	d10b      	bne.n	8010640 <_printf_i+0x144>
 8010628:	6823      	ldr	r3, [r4, #0]
 801062a:	07df      	lsls	r7, r3, #31
 801062c:	d508      	bpl.n	8010640 <_printf_i+0x144>
 801062e:	6923      	ldr	r3, [r4, #16]
 8010630:	6861      	ldr	r1, [r4, #4]
 8010632:	4299      	cmp	r1, r3
 8010634:	bfde      	ittt	le
 8010636:	2330      	movle	r3, #48	@ 0x30
 8010638:	f806 3c01 	strble.w	r3, [r6, #-1]
 801063c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010640:	1b92      	subs	r2, r2, r6
 8010642:	6122      	str	r2, [r4, #16]
 8010644:	f8cd a000 	str.w	sl, [sp]
 8010648:	464b      	mov	r3, r9
 801064a:	aa03      	add	r2, sp, #12
 801064c:	4621      	mov	r1, r4
 801064e:	4640      	mov	r0, r8
 8010650:	f7ff fee6 	bl	8010420 <_printf_common>
 8010654:	3001      	adds	r0, #1
 8010656:	d14a      	bne.n	80106ee <_printf_i+0x1f2>
 8010658:	f04f 30ff 	mov.w	r0, #4294967295
 801065c:	b004      	add	sp, #16
 801065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010662:	6823      	ldr	r3, [r4, #0]
 8010664:	f043 0320 	orr.w	r3, r3, #32
 8010668:	6023      	str	r3, [r4, #0]
 801066a:	4833      	ldr	r0, [pc, #204]	@ (8010738 <_printf_i+0x23c>)
 801066c:	2778      	movs	r7, #120	@ 0x78
 801066e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010672:	6823      	ldr	r3, [r4, #0]
 8010674:	6831      	ldr	r1, [r6, #0]
 8010676:	061f      	lsls	r7, r3, #24
 8010678:	f851 5b04 	ldr.w	r5, [r1], #4
 801067c:	d402      	bmi.n	8010684 <_printf_i+0x188>
 801067e:	065f      	lsls	r7, r3, #25
 8010680:	bf48      	it	mi
 8010682:	b2ad      	uxthmi	r5, r5
 8010684:	6031      	str	r1, [r6, #0]
 8010686:	07d9      	lsls	r1, r3, #31
 8010688:	bf44      	itt	mi
 801068a:	f043 0320 	orrmi.w	r3, r3, #32
 801068e:	6023      	strmi	r3, [r4, #0]
 8010690:	b11d      	cbz	r5, 801069a <_printf_i+0x19e>
 8010692:	2310      	movs	r3, #16
 8010694:	e7ac      	b.n	80105f0 <_printf_i+0xf4>
 8010696:	4827      	ldr	r0, [pc, #156]	@ (8010734 <_printf_i+0x238>)
 8010698:	e7e9      	b.n	801066e <_printf_i+0x172>
 801069a:	6823      	ldr	r3, [r4, #0]
 801069c:	f023 0320 	bic.w	r3, r3, #32
 80106a0:	6023      	str	r3, [r4, #0]
 80106a2:	e7f6      	b.n	8010692 <_printf_i+0x196>
 80106a4:	4616      	mov	r6, r2
 80106a6:	e7bd      	b.n	8010624 <_printf_i+0x128>
 80106a8:	6833      	ldr	r3, [r6, #0]
 80106aa:	6825      	ldr	r5, [r4, #0]
 80106ac:	6961      	ldr	r1, [r4, #20]
 80106ae:	1d18      	adds	r0, r3, #4
 80106b0:	6030      	str	r0, [r6, #0]
 80106b2:	062e      	lsls	r6, r5, #24
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	d501      	bpl.n	80106bc <_printf_i+0x1c0>
 80106b8:	6019      	str	r1, [r3, #0]
 80106ba:	e002      	b.n	80106c2 <_printf_i+0x1c6>
 80106bc:	0668      	lsls	r0, r5, #25
 80106be:	d5fb      	bpl.n	80106b8 <_printf_i+0x1bc>
 80106c0:	8019      	strh	r1, [r3, #0]
 80106c2:	2300      	movs	r3, #0
 80106c4:	6123      	str	r3, [r4, #16]
 80106c6:	4616      	mov	r6, r2
 80106c8:	e7bc      	b.n	8010644 <_printf_i+0x148>
 80106ca:	6833      	ldr	r3, [r6, #0]
 80106cc:	1d1a      	adds	r2, r3, #4
 80106ce:	6032      	str	r2, [r6, #0]
 80106d0:	681e      	ldr	r6, [r3, #0]
 80106d2:	6862      	ldr	r2, [r4, #4]
 80106d4:	2100      	movs	r1, #0
 80106d6:	4630      	mov	r0, r6
 80106d8:	f7ef fd9a 	bl	8000210 <memchr>
 80106dc:	b108      	cbz	r0, 80106e2 <_printf_i+0x1e6>
 80106de:	1b80      	subs	r0, r0, r6
 80106e0:	6060      	str	r0, [r4, #4]
 80106e2:	6863      	ldr	r3, [r4, #4]
 80106e4:	6123      	str	r3, [r4, #16]
 80106e6:	2300      	movs	r3, #0
 80106e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106ec:	e7aa      	b.n	8010644 <_printf_i+0x148>
 80106ee:	6923      	ldr	r3, [r4, #16]
 80106f0:	4632      	mov	r2, r6
 80106f2:	4649      	mov	r1, r9
 80106f4:	4640      	mov	r0, r8
 80106f6:	47d0      	blx	sl
 80106f8:	3001      	adds	r0, #1
 80106fa:	d0ad      	beq.n	8010658 <_printf_i+0x15c>
 80106fc:	6823      	ldr	r3, [r4, #0]
 80106fe:	079b      	lsls	r3, r3, #30
 8010700:	d413      	bmi.n	801072a <_printf_i+0x22e>
 8010702:	68e0      	ldr	r0, [r4, #12]
 8010704:	9b03      	ldr	r3, [sp, #12]
 8010706:	4298      	cmp	r0, r3
 8010708:	bfb8      	it	lt
 801070a:	4618      	movlt	r0, r3
 801070c:	e7a6      	b.n	801065c <_printf_i+0x160>
 801070e:	2301      	movs	r3, #1
 8010710:	4632      	mov	r2, r6
 8010712:	4649      	mov	r1, r9
 8010714:	4640      	mov	r0, r8
 8010716:	47d0      	blx	sl
 8010718:	3001      	adds	r0, #1
 801071a:	d09d      	beq.n	8010658 <_printf_i+0x15c>
 801071c:	3501      	adds	r5, #1
 801071e:	68e3      	ldr	r3, [r4, #12]
 8010720:	9903      	ldr	r1, [sp, #12]
 8010722:	1a5b      	subs	r3, r3, r1
 8010724:	42ab      	cmp	r3, r5
 8010726:	dcf2      	bgt.n	801070e <_printf_i+0x212>
 8010728:	e7eb      	b.n	8010702 <_printf_i+0x206>
 801072a:	2500      	movs	r5, #0
 801072c:	f104 0619 	add.w	r6, r4, #25
 8010730:	e7f5      	b.n	801071e <_printf_i+0x222>
 8010732:	bf00      	nop
 8010734:	080109d9 	.word	0x080109d9
 8010738:	080109ea 	.word	0x080109ea

0801073c <memmove>:
 801073c:	4288      	cmp	r0, r1
 801073e:	b510      	push	{r4, lr}
 8010740:	eb01 0402 	add.w	r4, r1, r2
 8010744:	d902      	bls.n	801074c <memmove+0x10>
 8010746:	4284      	cmp	r4, r0
 8010748:	4623      	mov	r3, r4
 801074a:	d807      	bhi.n	801075c <memmove+0x20>
 801074c:	1e43      	subs	r3, r0, #1
 801074e:	42a1      	cmp	r1, r4
 8010750:	d008      	beq.n	8010764 <memmove+0x28>
 8010752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010756:	f803 2f01 	strb.w	r2, [r3, #1]!
 801075a:	e7f8      	b.n	801074e <memmove+0x12>
 801075c:	4402      	add	r2, r0
 801075e:	4601      	mov	r1, r0
 8010760:	428a      	cmp	r2, r1
 8010762:	d100      	bne.n	8010766 <memmove+0x2a>
 8010764:	bd10      	pop	{r4, pc}
 8010766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801076a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801076e:	e7f7      	b.n	8010760 <memmove+0x24>

08010770 <memcpy>:
 8010770:	440a      	add	r2, r1
 8010772:	4291      	cmp	r1, r2
 8010774:	f100 33ff 	add.w	r3, r0, #4294967295
 8010778:	d100      	bne.n	801077c <memcpy+0xc>
 801077a:	4770      	bx	lr
 801077c:	b510      	push	{r4, lr}
 801077e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010786:	4291      	cmp	r1, r2
 8010788:	d1f9      	bne.n	801077e <memcpy+0xe>
 801078a:	bd10      	pop	{r4, pc}

0801078c <_realloc_r>:
 801078c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010790:	4680      	mov	r8, r0
 8010792:	4615      	mov	r5, r2
 8010794:	460c      	mov	r4, r1
 8010796:	b921      	cbnz	r1, 80107a2 <_realloc_r+0x16>
 8010798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801079c:	4611      	mov	r1, r2
 801079e:	f7ff bb83 	b.w	800fea8 <_malloc_r>
 80107a2:	b92a      	cbnz	r2, 80107b0 <_realloc_r+0x24>
 80107a4:	f7ff fc9a 	bl	80100dc <_free_r>
 80107a8:	2400      	movs	r4, #0
 80107aa:	4620      	mov	r0, r4
 80107ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107b0:	f000 f81a 	bl	80107e8 <_malloc_usable_size_r>
 80107b4:	4285      	cmp	r5, r0
 80107b6:	4606      	mov	r6, r0
 80107b8:	d802      	bhi.n	80107c0 <_realloc_r+0x34>
 80107ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80107be:	d8f4      	bhi.n	80107aa <_realloc_r+0x1e>
 80107c0:	4629      	mov	r1, r5
 80107c2:	4640      	mov	r0, r8
 80107c4:	f7ff fb70 	bl	800fea8 <_malloc_r>
 80107c8:	4607      	mov	r7, r0
 80107ca:	2800      	cmp	r0, #0
 80107cc:	d0ec      	beq.n	80107a8 <_realloc_r+0x1c>
 80107ce:	42b5      	cmp	r5, r6
 80107d0:	462a      	mov	r2, r5
 80107d2:	4621      	mov	r1, r4
 80107d4:	bf28      	it	cs
 80107d6:	4632      	movcs	r2, r6
 80107d8:	f7ff ffca 	bl	8010770 <memcpy>
 80107dc:	4621      	mov	r1, r4
 80107de:	4640      	mov	r0, r8
 80107e0:	f7ff fc7c 	bl	80100dc <_free_r>
 80107e4:	463c      	mov	r4, r7
 80107e6:	e7e0      	b.n	80107aa <_realloc_r+0x1e>

080107e8 <_malloc_usable_size_r>:
 80107e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107ec:	1f18      	subs	r0, r3, #4
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	bfbc      	itt	lt
 80107f2:	580b      	ldrlt	r3, [r1, r0]
 80107f4:	18c0      	addlt	r0, r0, r3
 80107f6:	4770      	bx	lr

080107f8 <_init>:
 80107f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107fa:	bf00      	nop
 80107fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107fe:	bc08      	pop	{r3}
 8010800:	469e      	mov	lr, r3
 8010802:	4770      	bx	lr

08010804 <_fini>:
 8010804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010806:	bf00      	nop
 8010808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801080a:	bc08      	pop	{r3}
 801080c:	469e      	mov	lr, r3
 801080e:	4770      	bx	lr
