
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010988  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08010b48  08010b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ed8  08010ed8  00012080  2**0
                  CONTENTS
  4 .ARM          00000008  08010ed8  08010ed8  00011ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ee0  08010ee0  00012080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ee0  08010ee0  00011ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010ee4  08010ee4  00011ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08010ee8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012080  2**0
                  CONTENTS
 10 .bss          00001728  20000080  20000080  00012080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200017a8  200017a8  00012080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ef18  00000000  00000000  000120b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000064b5  00000000  00000000  00040fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002738  00000000  00000000  00047480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e65  00000000  00000000  00049bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033cdc  00000000  00000000  0004ba1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000353e5  00000000  00000000  0007f6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00117d85  00000000  00000000  000b4ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001cc863  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000adbc  00000000  00000000  001cc8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  001d7664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08010b30 	.word	0x08010b30

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	08010b30 	.word	0x08010b30

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <print>:
#define MIN(a, b)  (((a) < (b)) ? (a) : (b))
#endif


void print(const char *text)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	//printf(text);
	uint16_t len = strlen(text);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe29 	bl	8000200 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart3, text, len, 100);
 80005b2:	89fa      	ldrh	r2, [r7, #14]
 80005b4:	2364      	movs	r3, #100	@ 0x64
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <print+0x28>)
 80005ba:	f009 fd51 	bl	800a060 <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000448 	.word	0x20000448

080005cc <println>:
void println(const char* text)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	print(text);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff ffe3 	bl	80005a0 <print>
	print("\n\r");
 80005da:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <println+0x1c>)
 80005dc:	f7ff ffe0 	bl	80005a0 <print>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	08010b48 	.word	0x08010b48

080005ec <UART3_ReadLine>:

bool UART3_ReadLine(char *destBuffer, uint16_t maxLen) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
    static char rxBuffer[UART_BUFFER_SIZE];
    static uint16_t index = 0;
    uint8_t ch;
    HAL_Delay(100);
 80005f8:	2064      	movs	r0, #100	@ 0x64
 80005fa:	f001 fefd 	bl	80023f8 <HAL_Delay>
    uint16_t len = MIN(maxLen, UART_BUFFER_SIZE);
 80005fe:	887b      	ldrh	r3, [r7, #2]
 8000600:	2b64      	cmp	r3, #100	@ 0x64
 8000602:	bf28      	it	cs
 8000604:	2364      	movcs	r3, #100	@ 0x64
 8000606:	81fb      	strh	r3, [r7, #14]


    if(HAL_UART_Receive(&huart3, &rxBuffer, len, 10) == HAL_OK)
 8000608:	89fa      	ldrh	r2, [r7, #14]
 800060a:	230a      	movs	r3, #10
 800060c:	490f      	ldr	r1, [pc, #60]	@ (800064c <UART3_ReadLine+0x60>)
 800060e:	4810      	ldr	r0, [pc, #64]	@ (8000650 <UART3_ReadLine+0x64>)
 8000610:	f009 fdb1 	bl	800a176 <HAL_UART_Receive>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d112      	bne.n	8000640 <UART3_ReadLine+0x54>
    {
    	uint16_t msgLen = strlen(rxBuffer);
 800061a:	480c      	ldr	r0, [pc, #48]	@ (800064c <UART3_ReadLine+0x60>)
 800061c:	f7ff fdf0 	bl	8000200 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	81bb      	strh	r3, [r7, #12]
    	len = MIN(len, msgLen);
 8000624:	89ba      	ldrh	r2, [r7, #12]
 8000626:	89fb      	ldrh	r3, [r7, #14]
 8000628:	4293      	cmp	r3, r2
 800062a:	bf28      	it	cs
 800062c:	4613      	movcs	r3, r2
 800062e:	81fb      	strh	r3, [r7, #14]
    	strncpy(destBuffer, rxBuffer, len);
 8000630:	89fb      	ldrh	r3, [r7, #14]
 8000632:	461a      	mov	r2, r3
 8000634:	4905      	ldr	r1, [pc, #20]	@ (800064c <UART3_ReadLine+0x60>)
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f00f fe86 	bl	8010348 <strncpy>
    	return true;
 800063c:	2301      	movs	r3, #1
 800063e:	e000      	b.n	8000642 <UART3_ReadLine+0x56>
            index = 0; // Reset index for next message
            return true;
        }
    }*/

    return false;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000dd4 	.word	0x20000dd4
 8000650:	20000448 	.word	0x20000448

08000654 <sendToESP>:
#define ESP_TIMEOUT 2000         // Timeout in milliseconds
#define ESP_RESPONSE_SIZE 128    // Buffer size for response

/* Function to send AT command over SPI and receive response */
bool sendToESP(const char *cmd)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b0a6      	sub	sp, #152	@ 0x98
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    //char response[ESP_RESPONSE_SIZE] = {0}; // Buffer for ESP32 response
    uint8_t txBuffer[ESP_RESPONSE_SIZE] = {0};
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	227c      	movs	r2, #124	@ 0x7c
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f00f fe65 	bl	8010338 <memset>
    int index = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint32_t startTime = HAL_GetTick(); // Start timer
 8000674:	f001 feb4 	bl	80023e0 <HAL_GetTick>
 8000678:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

    // Copy the AT command into the buffer and append "\r\n"
    snprintf((char *)txBuffer, ESP_RESPONSE_SIZE, "%s\r\n", cmd);
 800067c:	f107 000c 	add.w	r0, r7, #12
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a12      	ldr	r2, [pc, #72]	@ (80006cc <sendToESP+0x78>)
 8000684:	2180      	movs	r1, #128	@ 0x80
 8000686:	f00f fe03 	bl	8010290 <sniprintf>
    //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // Adjust GPIO pin based on your setup

    // Send the AT command via SPI
    //HAL_SPI_Transmit(&hspi1, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY);
    //HAL_UART_Transmit(&huart6, txBuffer, strlen((char *)txBuffer), HAL_MAX_DELAY);
    print("ESP_TRANSMIT: ");
 800068a:	4811      	ldr	r0, [pc, #68]	@ (80006d0 <sendToESP+0x7c>)
 800068c:	f7ff ff88 	bl	80005a0 <print>
    println(cmd);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f7ff ff9b 	bl	80005cc <println>
    HAL_StatusTypeDef result = HAL_UART_Transmit_DMA(&huart6, txBuffer, strlen((char *)txBuffer));
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff fdb0 	bl	8000200 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	480a      	ldr	r0, [pc, #40]	@ (80006d4 <sendToESP+0x80>)
 80006ac:	f009 fdfa 	bl	800a2a4 <HAL_UART_Transmit_DMA>
 80006b0:	4603      	mov	r3, r0
 80006b2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    //HAL_UART_GetState(&huart6);
    return result == HAL_OK; // Timeout or no response
 80006b6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	bf0c      	ite	eq
 80006be:	2301      	moveq	r3, #1
 80006c0:	2300      	movne	r3, #0
 80006c2:	b2db      	uxtb	r3, r3
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3798      	adds	r7, #152	@ 0x98
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08010b68 	.word	0x08010b68
 80006d0:	08010b70 	.word	0x08010b70
 80006d4:	20000490 	.word	0x20000490

080006d8 <waitForESP>:
bool waitForESP(const char *waiting)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	uint32_t timeout = 5000;
 80006e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80006e4:	60fb      	str	r3, [r7, #12]
	uint32_t startTime = HAL_GetTick(); // Start timer
 80006e6:	f001 fe7b 	bl	80023e0 <HAL_GetTick>
 80006ea:	60b8      	str	r0, [r7, #8]
	// Receive response from ESP32
	while ((HAL_GetTick() - startTime) < timeout)
 80006ec:	e025      	b.n	800073a <waitForESP+0x62>
	{
	 	if(rx_data.dataReceived)
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <waitForESP+0x7c>)
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d020      	beq.n	800073a <waitForESP+0x62>
	   	{
	   		rx_data.dataReceived = false;
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <waitForESP+0x7c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	711a      	strb	r2, [r3, #4]
	   		print("ESP_RESPONSE: ");
 80006fe:	4816      	ldr	r0, [pc, #88]	@ (8000758 <waitForESP+0x80>)
 8000700:	f7ff ff4e 	bl	80005a0 <print>
	   		println(rx_data.buff);
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <waitForESP+0x7c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff5f 	bl	80005cc <println>
			// Check if response contains "OK" or "ERROR"
			if (strstr(rx_data.buff, waiting))
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <waitForESP+0x7c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	4618      	mov	r0, r3
 8000716:	f00f fe2a 	bl	801036e <strstr>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <waitForESP+0x4c>
			{
				// Pull CS high to end SPI transaction
				//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
				return true; // Success
 8000720:	2301      	movs	r3, #1
 8000722:	e013      	b.n	800074c <waitForESP+0x74>
			}
			else if (strstr(rx_data.buff, "ERROR"))
 8000724:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <waitForESP+0x7c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	490c      	ldr	r1, [pc, #48]	@ (800075c <waitForESP+0x84>)
 800072a:	4618      	mov	r0, r3
 800072c:	f00f fe1f 	bl	801036e <strstr>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <waitForESP+0x62>
			{
				// Pull CS high to end SPI transaction
			   // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
				return false; // Failure
 8000736:	2300      	movs	r3, #0
 8000738:	e008      	b.n	800074c <waitForESP+0x74>
	while ((HAL_GetTick() - startTime) < timeout)
 800073a:	f001 fe51 	bl	80023e0 <HAL_GetTick>
 800073e:	4602      	mov	r2, r0
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	429a      	cmp	r2, r3
 8000748:	d8d1      	bhi.n	80006ee <waitForESP+0x16>
			}
	   	}
	}
	return false;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000dcc 	.word	0x20000dcc
 8000758:	08010b80 	.word	0x08010b80
 800075c:	08010b90 	.word	0x08010b90

08000760 <setupESP32ConnectToWifi>:
    if (sendToESP("AT+CWLIF") && waitForESP("OK")) {
    	println("Checking connected clients...");
    }
}
void setupESP32ConnectToWifi()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	//HAL_Delay(10);


	//sendToESP("AT+RST");
	//waitForESP("ready");
	if (sendToESP("ATE0") && waitForESP("OK")) {
 8000764:	4840      	ldr	r0, [pc, #256]	@ (8000868 <setupESP32ConnectToWifi+0x108>)
 8000766:	f7ff ff75 	bl	8000654 <sendToESP>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d012      	beq.n	8000796 <setupESP32ConnectToWifi+0x36>
 8000770:	483e      	ldr	r0, [pc, #248]	@ (800086c <setupESP32ConnectToWifi+0x10c>)
 8000772:	f7ff ffb1 	bl	80006d8 <waitForESP>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d00c      	beq.n	8000796 <setupESP32ConnectToWifi+0x36>
	    println("ESP32 is responsive.");
 800077c:	483c      	ldr	r0, [pc, #240]	@ (8000870 <setupESP32ConnectToWifi+0x110>)
 800077e:	f7ff ff25 	bl	80005cc <println>
	} else {
	  	println("ESP32 is not responding!");
	    return;
	}

	HAL_Delay(100);
 8000782:	2064      	movs	r0, #100	@ 0x64
 8000784:	f001 fe38 	bl	80023f8 <HAL_Delay>
	if(sendToESP("AT+CWJAP?") && waitForESP("Alex-PC"))
 8000788:	483a      	ldr	r0, [pc, #232]	@ (8000874 <setupESP32ConnectToWifi+0x114>)
 800078a:	f7ff ff63 	bl	8000654 <sendToESP>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d104      	bne.n	800079e <setupESP32ConnectToWifi+0x3e>
 8000794:	e00d      	b.n	80007b2 <setupESP32ConnectToWifi+0x52>
	  	println("ESP32 is not responding!");
 8000796:	4838      	ldr	r0, [pc, #224]	@ (8000878 <setupESP32ConnectToWifi+0x118>)
 8000798:	f7ff ff18 	bl	80005cc <println>
	    return;
 800079c:	e062      	b.n	8000864 <setupESP32ConnectToWifi+0x104>
	if(sendToESP("AT+CWJAP?") && waitForESP("Alex-PC"))
 800079e:	4837      	ldr	r0, [pc, #220]	@ (800087c <setupESP32ConnectToWifi+0x11c>)
 80007a0:	f7ff ff9a 	bl	80006d8 <waitForESP>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d003      	beq.n	80007b2 <setupESP32ConnectToWifi+0x52>
	{
		println("ESP is already connected to the WIFI");
 80007aa:	4835      	ldr	r0, [pc, #212]	@ (8000880 <setupESP32ConnectToWifi+0x120>)
 80007ac:	f7ff ff0e 	bl	80005cc <println>
		return;
 80007b0:	e058      	b.n	8000864 <setupESP32ConnectToWifi+0x104>
	}
	HAL_Delay(100);
 80007b2:	2064      	movs	r0, #100	@ 0x64
 80007b4:	f001 fe20 	bl	80023f8 <HAL_Delay>
	if(sendToESP("AT+CWMODE=1") && waitForESP("OK"))
 80007b8:	4832      	ldr	r0, [pc, #200]	@ (8000884 <setupESP32ConnectToWifi+0x124>)
 80007ba:	f7ff ff4b 	bl	8000654 <sendToESP>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d013      	beq.n	80007ec <setupESP32ConnectToWifi+0x8c>
 80007c4:	4829      	ldr	r0, [pc, #164]	@ (800086c <setupESP32ConnectToWifi+0x10c>)
 80007c6:	f7ff ff87 	bl	80006d8 <waitForESP>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d00d      	beq.n	80007ec <setupESP32ConnectToWifi+0x8c>
	{
		println("ESP set as client");
 80007d0:	482d      	ldr	r0, [pc, #180]	@ (8000888 <setupESP32ConnectToWifi+0x128>)
 80007d2:	f7ff fefb 	bl	80005cc <println>
	{
		println("Failed to set ESP as client");
		return;
	}
	//waitForESP("WIFI GOT IP");
	HAL_Delay(1000);
 80007d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007da:	f001 fe0d 	bl	80023f8 <HAL_Delay>
	if(sendToESP("AT+CWJAP=\"Alex-PC\",\"87924ikR\"") && waitForESP("OK"))
 80007de:	482b      	ldr	r0, [pc, #172]	@ (800088c <setupESP32ConnectToWifi+0x12c>)
 80007e0:	f7ff ff38 	bl	8000654 <sendToESP>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d104      	bne.n	80007f4 <setupESP32ConnectToWifi+0x94>
 80007ea:	e00d      	b.n	8000808 <setupESP32ConnectToWifi+0xa8>
		println("Failed to set ESP as client");
 80007ec:	4828      	ldr	r0, [pc, #160]	@ (8000890 <setupESP32ConnectToWifi+0x130>)
 80007ee:	f7ff feed 	bl	80005cc <println>
		return;
 80007f2:	e037      	b.n	8000864 <setupESP32ConnectToWifi+0x104>
	if(sendToESP("AT+CWJAP=\"Alex-PC\",\"87924ikR\"") && waitForESP("OK"))
 80007f4:	481d      	ldr	r0, [pc, #116]	@ (800086c <setupESP32ConnectToWifi+0x10c>)
 80007f6:	f7ff ff6f 	bl	80006d8 <waitForESP>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <setupESP32ConnectToWifi+0xa8>
	{
		println("ESP connected to the WIFI");
 8000800:	4824      	ldr	r0, [pc, #144]	@ (8000894 <setupESP32ConnectToWifi+0x134>)
 8000802:	f7ff fee3 	bl	80005cc <println>
 8000806:	e017      	b.n	8000838 <setupESP32ConnectToWifi+0xd8>
	}
	else
	{
		HAL_Delay(1000);
 8000808:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800080c:	f001 fdf4 	bl	80023f8 <HAL_Delay>
		if(sendToESP("AT+CWJAP?") && waitForESP("Alex-PC"))
 8000810:	4818      	ldr	r0, [pc, #96]	@ (8000874 <setupESP32ConnectToWifi+0x114>)
 8000812:	f7ff ff1f 	bl	8000654 <sendToESP>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d009      	beq.n	8000830 <setupESP32ConnectToWifi+0xd0>
 800081c:	4817      	ldr	r0, [pc, #92]	@ (800087c <setupESP32ConnectToWifi+0x11c>)
 800081e:	f7ff ff5b 	bl	80006d8 <waitForESP>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d003      	beq.n	8000830 <setupESP32ConnectToWifi+0xd0>
		{
			println("ESP is already connected to the WIFI");
 8000828:	4815      	ldr	r0, [pc, #84]	@ (8000880 <setupESP32ConnectToWifi+0x120>)
 800082a:	f7ff fecf 	bl	80005cc <println>
 800082e:	e003      	b.n	8000838 <setupESP32ConnectToWifi+0xd8>
		}
		else
		{
			println("Failed to connect to the WIFI");
 8000830:	4819      	ldr	r0, [pc, #100]	@ (8000898 <setupESP32ConnectToWifi+0x138>)
 8000832:	f7ff fecb 	bl	80005cc <println>
			return;
 8000836:	e015      	b.n	8000864 <setupESP32ConnectToWifi+0x104>
		}
	}


	HAL_Delay(100);
 8000838:	2064      	movs	r0, #100	@ 0x64
 800083a:	f001 fddd 	bl	80023f8 <HAL_Delay>
	if(sendToESP("AT+CIFSR") && waitForESP("OK"))
 800083e:	4817      	ldr	r0, [pc, #92]	@ (800089c <setupESP32ConnectToWifi+0x13c>)
 8000840:	f7ff ff08 	bl	8000654 <sendToESP>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d005      	beq.n	8000856 <setupESP32ConnectToWifi+0xf6>
 800084a:	4808      	ldr	r0, [pc, #32]	@ (800086c <setupESP32ConnectToWifi+0x10c>)
 800084c:	f7ff ff44 	bl	80006d8 <waitForESP>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d103      	bne.n	800085e <setupESP32ConnectToWifi+0xfe>
	{

	}
	else
	{
		println("Failed get IP address");
 8000856:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <setupESP32ConnectToWifi+0x140>)
 8000858:	f7ff feb8 	bl	80005cc <println>
		return;
 800085c:	e002      	b.n	8000864 <setupESP32ConnectToWifi+0x104>
	}

	println("setupESP32ConnectToWifi finished");
 800085e:	4811      	ldr	r0, [pc, #68]	@ (80008a4 <setupESP32ConnectToWifi+0x144>)
 8000860:	f7ff feb4 	bl	80005cc <println>
}
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	08010b98 	.word	0x08010b98
 800086c:	08010ba0 	.word	0x08010ba0
 8000870:	08010ba4 	.word	0x08010ba4
 8000874:	08010ce8 	.word	0x08010ce8
 8000878:	08010bc8 	.word	0x08010bc8
 800087c:	08010cf4 	.word	0x08010cf4
 8000880:	08010cfc 	.word	0x08010cfc
 8000884:	08010d24 	.word	0x08010d24
 8000888:	08010d30 	.word	0x08010d30
 800088c:	08010d44 	.word	0x08010d44
 8000890:	08010d64 	.word	0x08010d64
 8000894:	08010d80 	.word	0x08010d80
 8000898:	08010d9c 	.word	0x08010d9c
 800089c:	08010dbc 	.word	0x08010dbc
 80008a0:	08010dc8 	.word	0x08010dc8
 80008a4:	08010de0 	.word	0x08010de0

080008a8 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	807b      	strh	r3, [r7, #2]
	static bool buffSwitcher = true;

	uint8_t *nextBuff = RX_BUFF[buffSwitcher];
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <HAL_UARTEx_RxEventCallback+0x64>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	029b      	lsls	r3, r3, #10
 80008ba:	4a15      	ldr	r2, [pc, #84]	@ (8000910 <HAL_UARTEx_RxEventCallback+0x68>)
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
	buffSwitcher = !buffSwitcher;
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <HAL_UARTEx_RxEventCallback+0x64>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	f083 0301 	eor.w	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b0c      	ldr	r3, [pc, #48]	@ (800090c <HAL_UARTEx_RxEventCallback+0x64>)
 80008dc:	701a      	strb	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, nextBuff, sizeof(RX_BUFF[0]));
 80008de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80008e2:	68f9      	ldr	r1, [r7, #12]
 80008e4:	480b      	ldr	r0, [pc, #44]	@ (8000914 <HAL_UARTEx_RxEventCallback+0x6c>)
 80008e6:	f009 fd4d 	bl	800a384 <HAL_UARTEx_ReceiveToIdle_DMA>
	rx_data.buff = RX_BUFF[buffSwitcher];
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <HAL_UARTEx_RxEventCallback+0x64>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	029b      	lsls	r3, r3, #10
 80008f0:	4a07      	ldr	r2, [pc, #28]	@ (8000910 <HAL_UARTEx_RxEventCallback+0x68>)
 80008f2:	4413      	add	r3, r2
 80008f4:	4a08      	ldr	r2, [pc, #32]	@ (8000918 <HAL_UARTEx_RxEventCallback+0x70>)
 80008f6:	6013      	str	r3, [r2, #0]
	rx_data.size = Size;
 80008f8:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <HAL_UARTEx_RxEventCallback+0x70>)
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	80d3      	strh	r3, [r2, #6]
	rx_data.dataReceived = true;
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_UARTEx_RxEventCallback+0x70>)
 8000900:	2201      	movs	r2, #1
 8000902:	711a      	strb	r2, [r3, #4]

}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000000 	.word	0x20000000
 8000910:	200005cc 	.word	0x200005cc
 8000914:	20000490 	.word	0x20000490
 8000918:	20000dcc 	.word	0x20000dcc

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b0a2      	sub	sp, #136	@ 0x88
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f001 fd27 	bl	8002374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f887 	bl	8000a38 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800092a:	f000 f8f7 	bl	8000b1c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092e:	f000 fd3f 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000932:	f000 fcc5 	bl	80012c0 <MX_DMA_Init>
  MX_CRC_Init();
 8000936:	f000 f91d 	bl	8000b74 <MX_CRC_Init>
  MX_DMA2D_Init();
 800093a:	f000 f92f 	bl	8000b9c <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 800093e:	f000 f95f 	bl	8000c00 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000942:	f000 fce5 	bl	8001310 <MX_FMC_Init>
  MX_I2C1_Init();
 8000946:	f000 fa5b 	bl	8000e00 <MX_I2C1_Init>
  MX_I2C2_Init();
 800094a:	f000 fa87 	bl	8000e5c <MX_I2C2_Init>
  MX_LTDC_Init();
 800094e:	f000 fab3 	bl	8000eb8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000952:	f000 fb2f 	bl	8000fb4 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000956:	f000 fb59 	bl	800100c <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 800095a:	f000 fbb5 	bl	80010c8 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 800095e:	f000 fc0b 	bl	8001178 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000962:	f000 fc59 	bl	8001218 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000966:	f000 fc81 	bl	800126c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800096a:	f00c fe4f 	bl	800d60c <MX_FATFS_Init>
  MX_USB_HOST_Init();
 800096e:	f00f f8c7 	bl	800fb00 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 8000972:	f000 fbcb 	bl	800110c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RX_BUFF[0], sizeof(RX_BUFF[0]));
 8000976:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800097a:	4925      	ldr	r1, [pc, #148]	@ (8000a10 <main+0xf4>)
 800097c:	4825      	ldr	r0, [pc, #148]	@ (8000a14 <main+0xf8>)
 800097e:	f009 fd01 	bl	800a384 <HAL_UARTEx_ReceiveToIdle_DMA>
  rx_data.buff = NULL;
 8000982:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <main+0xfc>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
  rx_data.dataReceived = false;
 8000988:	4b23      	ldr	r3, [pc, #140]	@ (8000a18 <main+0xfc>)
 800098a:	2200      	movs	r2, #0
 800098c:	711a      	strb	r2, [r3, #4]
  rx_data.size = 0;
 800098e:	4b22      	ldr	r3, [pc, #136]	@ (8000a18 <main+0xfc>)
 8000990:	2200      	movs	r2, #0
 8000992:	80da      	strh	r2, [r3, #6]
  //setupESP32Hotspot();
  setupESP32ConnectToWifi();
 8000994:	f7ff fee4 	bl	8000760 <setupESP32ConnectToWifi>

  sendToESP("AT+CIPSTART=\"TCP\",\"www.github.com\",80,,,5000");
 8000998:	4820      	ldr	r0, [pc, #128]	@ (8000a1c <main+0x100>)
 800099a:	f7ff fe5b 	bl	8000654 <sendToESP>
 //sendToESP("AT+CIPSTART=\"TCP\",\"192.168.137.1\",12345,,,5000\r\n");  // Connect to server
  waitForESP("OK");  // Implement this to wait for ESP response
 800099e:	4820      	ldr	r0, [pc, #128]	@ (8000a20 <main+0x104>)
 80009a0:	f7ff fe9a 	bl	80006d8 <waitForESP>

  const char* payload = "Hello World!";
 80009a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a24 <main+0x108>)
 80009a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char sendCmd[32];
  sprintf(sendCmd, "AT+CIPSEND=%d", strlen(payload));
 80009aa:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80009ae:	f7ff fc27 	bl	8000200 <strlen>
 80009b2:	4602      	mov	r2, r0
 80009b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009b8:	491b      	ldr	r1, [pc, #108]	@ (8000a28 <main+0x10c>)
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00f fc9c 	bl	80102f8 <siprintf>
  sendToESP(sendCmd);
 80009c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe45 	bl	8000654 <sendToESP>
  waitForESP(">");  // Wait for ESP to prompt for data
 80009ca:	4818      	ldr	r0, [pc, #96]	@ (8000a2c <main+0x110>)
 80009cc:	f7ff fe84 	bl	80006d8 <waitForESP>

  sendToESP(payload);  // Send the actual data
 80009d0:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80009d4:	f7ff fe3e 	bl	8000654 <sendToESP>
  waitForESP("SEND OK");
 80009d8:	4815      	ldr	r0, [pc, #84]	@ (8000a30 <main+0x114>)
 80009da:	f7ff fe7d 	bl	80006d8 <waitForESP>

  sendToESP("AT+CIPCLOSE");
 80009de:	4815      	ldr	r0, [pc, #84]	@ (8000a34 <main+0x118>)
 80009e0:	f7ff fe38 	bl	8000654 <sendToESP>
  waitForESP("OK");
 80009e4:	480e      	ldr	r0, [pc, #56]	@ (8000a20 <main+0x104>)
 80009e6:	f7ff fe77 	bl	80006d8 <waitForESP>
      if (HAL_SPI_Receive(&hspi1, spi_rx_buffer, BUFFER_SIZE, HAL_MAX_DELAY) == HAL_OK)
      {

      }*/
	  //sendTextSPI("HALLO");
      HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	@ 0x64
 80009ec:	f001 fd04 	bl	80023f8 <HAL_Delay>
      if (UART3_ReadLine(receivedLine, sizeof(receivedLine))) {
 80009f0:	463b      	mov	r3, r7
 80009f2:	2164      	movs	r1, #100	@ 0x64
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fdf9 	bl	80005ec <UART3_ReadLine>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <main+0xec>
          // Do something with receivedLine
    	  sendToESP(receivedLine);
 8000a00:	463b      	mov	r3, r7
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fe26 	bl	8000654 <sendToESP>
      }


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a08:	f00f f8a0 	bl	800fb4c <MX_USB_HOST_Process>
      HAL_Delay(100);
 8000a0c:	e7ed      	b.n	80009ea <main+0xce>
 8000a0e:	bf00      	nop
 8000a10:	200005cc 	.word	0x200005cc
 8000a14:	20000490 	.word	0x20000490
 8000a18:	20000dcc 	.word	0x20000dcc
 8000a1c:	08010e04 	.word	0x08010e04
 8000a20:	08010ba0 	.word	0x08010ba0
 8000a24:	08010e34 	.word	0x08010e34
 8000a28:	08010e44 	.word	0x08010e44
 8000a2c:	08010e54 	.word	0x08010e54
 8000a30:	08010e58 	.word	0x08010e58
 8000a34:	08010e60 	.word	0x08010e60

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	@ 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	2234      	movs	r2, #52	@ 0x34
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00f fc76 	bl	8010338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <SystemClock_Config+0xdc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	4a2b      	ldr	r2, [pc, #172]	@ (8000b14 <SystemClock_Config+0xdc>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6c:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <SystemClock_Config+0xdc>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <SystemClock_Config+0xe0>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a25      	ldr	r2, [pc, #148]	@ (8000b18 <SystemClock_Config+0xe0>)
 8000a82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <SystemClock_Config+0xe0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000aac:	23b4      	movs	r3, #180	@ 0xb4
 8000aae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f006 ff11 	bl	80078e8 <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000acc:	f000 fe0e 	bl	80016ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ad0:	f006 f968 	bl	8006da4 <HAL_PWREx_EnableOverDrive>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ada:	f000 fe07 	bl	80016ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aea:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	2105      	movs	r1, #5
 8000afc:	4618      	mov	r0, r3
 8000afe:	f006 fa63 	bl	8006fc8 <HAL_RCC_ClockConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b08:	f000 fdf0 	bl	80016ec <Error_Handler>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	3750      	adds	r7, #80	@ 0x50
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	@ 0x40
 8000b20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	223c      	movs	r2, #60	@ 0x3c
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f00f fc05 	bl	8010338 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8000b2e:	f44f 73c6 	mov.w	r3, #396	@ 0x18c
 8000b32:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8000b34:	2390      	movs	r3, #144	@ 0x90
 8000b36:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8000b40:	2306      	movs	r3, #6
 8000b42:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000b48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8000b4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 fc86 	bl	800746c <HAL_RCCEx_PeriphCLKConfig>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000b66:	f000 fdc1 	bl	80016ec <Error_Handler>
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3740      	adds	r7, #64	@ 0x40
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_CRC_Init+0x20>)
 8000b7a:	4a07      	ldr	r2, [pc, #28]	@ (8000b98 <MX_CRC_Init+0x24>)
 8000b7c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_CRC_Init+0x20>)
 8000b80:	f001 fd40 	bl	8002604 <HAL_CRC_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000b8a:	f000 fdaf 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000009c 	.word	0x2000009c
 8000b98:	40023000 	.word	0x40023000

08000b9c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000ba2:	4a16      	ldr	r2, [pc, #88]	@ (8000bfc <MX_DMA2D_Init+0x60>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000bd0:	4809      	ldr	r0, [pc, #36]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000bd2:	f002 f935 	bl	8002e40 <HAL_DMA2D_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000bdc:	f000 fd86 	bl	80016ec <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000be0:	2101      	movs	r1, #1
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_DMA2D_Init+0x5c>)
 8000be4:	f002 fa86 	bl	80030f4 <HAL_DMA2D_ConfigLayer>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000bee:	f000 fd7d 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000a4 	.word	0x200000a4
 8000bfc:	4002b000 	.word	0x4002b000

08000c00 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0aa      	sub	sp, #168	@ 0xa8
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000c06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000c12:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000c16:	2224      	movs	r2, #36	@ 0x24
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f00f fb8c 	bl	8010338 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000c20:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
 8000c30:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000c32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c36:	2234      	movs	r2, #52	@ 0x34
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00f fb7c 	bl	8010338 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	222c      	movs	r2, #44	@ 0x2c
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f00f fb76 	bl	8010338 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000c4c:	4b6a      	ldr	r3, [pc, #424]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c4e:	4a6b      	ldr	r2, [pc, #428]	@ (8000dfc <MX_DSIHOST_DSI_Init+0x1fc>)
 8000c50:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000c52:	4b69      	ldr	r3, [pc, #420]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000c58:	4b67      	ldr	r3, [pc, #412]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000c5e:	4b66      	ldr	r3, [pc, #408]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 125;
 8000c64:	237d      	movs	r3, #125	@ 0x7d
 8000c66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000c76:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	485e      	ldr	r0, [pc, #376]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000c7e:	f002 facb 	bl	8003218 <HAL_DSI_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000c88:	f000 fd30 	bl	80016ec <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000cbe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	484c      	ldr	r0, [pc, #304]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000cc6:	f002 ffbb 	bl	8003c40 <HAL_DSI_ConfigHostTimeouts>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8000cd0:	f000 fd0c 	bl	80016ec <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000cd4:	231c      	movs	r3, #28
 8000cd6:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000cd8:	2321      	movs	r3, #33	@ 0x21
 8000cda:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8000ce0:	2319      	movs	r3, #25
 8000ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8000ce8:	230a      	movs	r3, #10
 8000cea:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000cec:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4841      	ldr	r0, [pc, #260]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000cf4:	f002 ff3a 	bl	8003b6c <HAL_DSI_ConfigPhyTimer>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8000cfe:	f000 fcf5 	bl	80016ec <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d02:	2104      	movs	r1, #4
 8000d04:	483c      	ldr	r0, [pc, #240]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d06:	f002 ff09 	bl	8003b1c <HAL_DSI_ConfigFlowControl>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8000d10:	f000 fcec 	bl	80016ec <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000d14:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d18:	4837      	ldr	r0, [pc, #220]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d1a:	f003 f857 	bl	8003dcc <HAL_DSI_SetLowPowerRXFilter>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 8000d24:	f000 fce2 	bl	80016ec <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4833      	ldr	r0, [pc, #204]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d2c:	f002 fbf4 	bl	8003518 <HAL_DSI_ConfigErrorMonitor>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 8000d36:	f000 fcd9 	bl	80016ec <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8000d3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 8000d46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d50:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 8000d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d5c:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 8000d5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d62:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000d64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d68:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 8000d6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d70:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000d74:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 8000d76:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000d7a:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d80:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	481a      	ldr	r0, [pc, #104]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000d8e:	f002 fe67 	bl	8003a60 <HAL_DSI_ConfigCommand>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 8000d98:	f000 fca8 	bl	80016ec <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 8000da0:	2305      	movs	r3, #5
 8000da2:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 200;
 8000da4:	23c8      	movs	r3, #200	@ 0xc8
 8000da6:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000da8:	2310      	movs	r3, #16
 8000daa:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 8000db0:	2304      	movs	r3, #4
 8000db2:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8000dc0:	2340      	movs	r3, #64	@ 0x40
 8000dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480a      	ldr	r0, [pc, #40]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000dce:	f002 fd6f 	bl	80038b0 <HAL_DSI_ConfigAdaptedCommandMode>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_DSIHOST_DSI_Init+0x1dc>
  {
    Error_Handler();
 8000dd8:	f000 fc88 	bl	80016ec <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4806      	ldr	r0, [pc, #24]	@ (8000df8 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000de0:	f002 fd3e 	bl	8003860 <HAL_DSI_SetGenericVCID>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_DSIHOST_DSI_Init+0x1ee>
  {
    Error_Handler();
 8000dea:	f000 fc7f 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	37a8      	adds	r7, #168	@ 0xa8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000e4 	.word	0x200000e4
 8000dfc:	40016c00 	.word	0x40016c00

08000e00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e06:	4a13      	ldr	r2, [pc, #76]	@ (8000e54 <MX_I2C1_Init+0x54>)
 8000e08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e0c:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <MX_I2C1_Init+0x58>)
 8000e0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2a:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e36:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <MX_I2C1_Init+0x50>)
 8000e3e:	f005 fb05 	bl	800644c <HAL_I2C_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e48:	f000 fc50 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000100 	.word	0x20000100
 8000e54:	40005400 	.word	0x40005400
 8000e58:	000186a0 	.word	0x000186a0

08000e5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e62:	4a13      	ldr	r2, [pc, #76]	@ (8000eb0 <MX_I2C2_Init+0x54>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000e66:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e68:	4a12      	ldr	r2, [pc, #72]	@ (8000eb4 <MX_I2C2_Init+0x58>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e7a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	@ (8000eac <MX_I2C2_Init+0x50>)
 8000e9a:	f005 fad7 	bl	800644c <HAL_I2C_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ea4:	f000 fc22 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000154 	.word	0x20000154
 8000eb0:	40005800 	.word	0x40005800
 8000eb4:	000186a0 	.word	0x000186a0

08000eb8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08e      	sub	sp, #56	@ 0x38
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2234      	movs	r2, #52	@ 0x34
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f00f fa37 	bl	8010338 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000eca:	4b38      	ldr	r3, [pc, #224]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000ecc:	4a38      	ldr	r2, [pc, #224]	@ (8000fb0 <MX_LTDC_Init+0xf8>)
 8000ece:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ed0:	4b36      	ldr	r3, [pc, #216]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ed6:	4b35      	ldr	r3, [pc, #212]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000edc:	4b33      	ldr	r3, [pc, #204]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ee2:	4b32      	ldr	r3, [pc, #200]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000ee8:	4b30      	ldr	r3, [pc, #192]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8000eee:	4b2f      	ldr	r3, [pc, #188]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 8000efa:	4b2c      	ldr	r3, [pc, #176]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 201;
 8000f00:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000f02:	22c9      	movs	r2, #201	@ 0xc9
 8000f04:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 8000f06:	4b29      	ldr	r3, [pc, #164]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000f08:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8000f0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 202;
 8000f0e:	4b27      	ldr	r3, [pc, #156]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000f10:	22ca      	movs	r2, #202	@ 0xca
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 8000f14:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000f16:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8000f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f24:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f34:	481d      	ldr	r0, [pc, #116]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000f36:	f005 fbcd 	bl	80066d4 <HAL_LTDC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000f40:	f000 fbd4 	bl	80016ec <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 8000f48:	23c8      	movs	r3, #200	@ 0xc8
 8000f4a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8000f50:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000f54:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000f56:	2302      	movs	r3, #2
 8000f58:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000f5a:	23ff      	movs	r3, #255	@ 0xff
 8000f5c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000f62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f66:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000f6c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 8000f72:	23c8      	movs	r3, #200	@ 0xc8
 8000f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 8000f76:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <MX_LTDC_Init+0xf4>)
 8000f96:	f005 fd2f 	bl	80069f8 <HAL_LTDC_ConfigLayer>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8000fa0:	f000 fba4 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	3738      	adds	r7, #56	@ 0x38
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200001a8 	.word	0x200001a8
 8000fb0:	40016800 	.word	0x40016800

08000fb4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000fba:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <MX_QUADSPI_Init+0x54>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000fcc:	2210      	movs	r2, #16
 8000fce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000fd2:	2218      	movs	r2, #24
 8000fd4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000fd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fdc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	@ (8001004 <MX_QUADSPI_Init+0x50>)
 8000ff2:	f005 ff27 	bl	8006e44 <HAL_QSPI_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000ffc:	f000 fb76 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000250 	.word	0x20000250
 8001008:	a0001000 	.word	0xa0001000

0800100c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8001010:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001012:	4a2b      	ldr	r2, [pc, #172]	@ (80010c0 <MX_SAI1_Init+0xb4>)
 8001014:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001016:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001018:	2200      	movs	r2, #0
 800101a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800101c:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <MX_SAI1_Init+0xb0>)
 800101e:	2200      	movs	r2, #0
 8001020:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001024:	2240      	movs	r2, #64	@ 0x40
 8001026:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001028:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <MX_SAI1_Init+0xb0>)
 800102a:	2200      	movs	r2, #0
 800102c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001030:	2200      	movs	r2, #0
 8001032:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001034:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <MX_SAI1_Init+0xb0>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <MX_SAI1_Init+0xb0>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001054:	4a1b      	ldr	r2, [pc, #108]	@ (80010c4 <MX_SAI1_Init+0xb8>)
 8001056:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <MX_SAI1_Init+0xb0>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800105e:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001064:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001066:	2200      	movs	r2, #0
 8001068:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_SAI1_Init+0xb0>)
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001072:	2208      	movs	r2, #8
 8001074:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001078:	2201      	movs	r2, #1
 800107a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_SAI1_Init+0xb0>)
 800107e:	2200      	movs	r2, #0
 8001080:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001084:	2200      	movs	r2, #0
 8001086:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001088:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <MX_SAI1_Init+0xb0>)
 800108a:	2200      	movs	r2, #0
 800108c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001090:	2200      	movs	r2, #0
 8001092:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_SAI1_Init+0xb0>)
 8001096:	2200      	movs	r2, #0
 8001098:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800109a:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <MX_SAI1_Init+0xb0>)
 800109c:	2201      	movs	r2, #1
 800109e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_SAI1_Init+0xb0>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	@ (80010bc <MX_SAI1_Init+0xb0>)
 80010a8:	f006 fea2 	bl	8007df0 <HAL_SAI_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 80010b2:	f000 fb1b 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	2000029c 	.word	0x2000029c
 80010c0:	40015804 	.word	0x40015804
 80010c4:	0002ee00 	.word	0x0002ee00

080010c8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <MX_SDIO_SD_Init+0x3c>)
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <MX_SDIO_SD_Init+0x40>)
 80010d0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_SDIO_SD_Init+0x3c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_SDIO_SD_Init+0x3c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_SDIO_SD_Init+0x3c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_SDIO_SD_Init+0x3c>)
 80010e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010ea:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <MX_SDIO_SD_Init+0x3c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <MX_SDIO_SD_Init+0x3c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000324 	.word	0x20000324
 8001108:	40012c00 	.word	0x40012c00

0800110c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001112:	4a18      	ldr	r2, [pc, #96]	@ (8001174 <MX_SPI1_Init+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001118:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800111c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_SPI1_Init+0x64>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800113c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001140:	2238      	movs	r2, #56	@ 0x38
 8001142:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_SPI1_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_SPI1_Init+0x64>)
 8001158:	220a      	movs	r2, #10
 800115a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_SPI1_Init+0x64>)
 800115e:	f008 fa30 	bl	80095c2 <HAL_SPI_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001168:	f000 fac0 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200003a8 	.word	0x200003a8
 8001174:	40013000 	.word	0x40013000

08001178 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	463b      	mov	r3, r7
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001194:	4b1e      	ldr	r3, [pc, #120]	@ (8001210 <MX_TIM1_Init+0x98>)
 8001196:	4a1f      	ldr	r2, [pc, #124]	@ (8001214 <MX_TIM1_Init+0x9c>)
 8001198:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800119a:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <MX_TIM1_Init+0x98>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <MX_TIM1_Init+0x98>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_TIM1_Init+0x98>)
 80011a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <MX_TIM1_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_TIM1_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <MX_TIM1_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011c0:	4813      	ldr	r0, [pc, #76]	@ (8001210 <MX_TIM1_Init+0x98>)
 80011c2:	f008 fa87 	bl	80096d4 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011cc:	f000 fa8e 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4619      	mov	r1, r3
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <MX_TIM1_Init+0x98>)
 80011de:	f008 fc29 	bl	8009a34 <HAL_TIM_ConfigClockSource>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80011e8:	f000 fa80 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_TIM1_Init+0x98>)
 80011fa:	f008 fe51 	bl	8009ea0 <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001204:	f000 fa72 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000400 	.word	0x20000400
 8001214:	40010000 	.word	0x40010000

08001218 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_USART3_UART_Init+0x4c>)
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_USART3_UART_Init+0x50>)
 8001220:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <MX_USART3_UART_Init+0x4c>)
 8001224:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001228:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_USART3_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_USART3_UART_Init+0x4c>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <MX_USART3_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_USART3_UART_Init+0x4c>)
 800123e:	220c      	movs	r2, #12
 8001240:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <MX_USART3_UART_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_USART3_UART_Init+0x4c>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_USART3_UART_Init+0x4c>)
 8001250:	f008 feb6 	bl	8009fc0 <HAL_UART_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800125a:	f000 fa47 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000448 	.word	0x20000448
 8001268:	40004800 	.word	0x40004800

0800126c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001270:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_USART6_UART_Init+0x4c>)
 8001272:	4a12      	ldr	r2, [pc, #72]	@ (80012bc <MX_USART6_UART_Init+0x50>)
 8001274:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001276:	4b10      	ldr	r3, [pc, #64]	@ (80012b8 <MX_USART6_UART_Init+0x4c>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <MX_USART6_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MX_USART6_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <MX_USART6_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <MX_USART6_UART_Init+0x4c>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <MX_USART6_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_USART6_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	@ (80012b8 <MX_USART6_UART_Init+0x4c>)
 80012a4:	f008 fe8c 	bl	8009fc0 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80012ae:	f000 fa1d 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000490 	.word	0x20000490
 80012bc:	40011400 	.word	0x40011400

080012c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_DMA_Init+0x4c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a0f      	ldr	r2, [pc, #60]	@ (800130c <MX_DMA_Init+0x4c>)
 80012d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b0d      	ldr	r3, [pc, #52]	@ (800130c <MX_DMA_Init+0x4c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2039      	movs	r0, #57	@ 0x39
 80012e8:	f001 f962 	bl	80025b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012ec:	2039      	movs	r0, #57	@ 0x39
 80012ee:	f001 f97b 	bl	80025e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2045      	movs	r0, #69	@ 0x45
 80012f8:	f001 f95a 	bl	80025b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80012fc:	2045      	movs	r0, #69	@ 0x45
 80012fe:	f001 f973 	bl	80025e8 <HAL_NVIC_EnableIRQ>

}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
 8001324:	615a      	str	r2, [r3, #20]
 8001326:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <MX_FMC_Init+0x98>)
 800132a:	4a20      	ldr	r2, [pc, #128]	@ (80013ac <MX_FMC_Init+0x9c>)
 800132c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <MX_FMC_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001334:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_FMC_Init+0x98>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800133a:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <MX_FMC_Init+0x98>)
 800133c:	2204      	movs	r2, #4
 800133e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_FMC_Init+0x98>)
 8001342:	2220      	movs	r2, #32
 8001344:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_FMC_Init+0x98>)
 8001348:	2240      	movs	r2, #64	@ 0x40
 800134a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_FMC_Init+0x98>)
 800134e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001352:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <MX_FMC_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800135a:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_FMC_Init+0x98>)
 800135c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001360:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <MX_FMC_Init+0x98>)
 8001364:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001368:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <MX_FMC_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001370:	2302      	movs	r3, #2
 8001372:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001374:	2307      	movs	r3, #7
 8001376:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001378:	2304      	movs	r3, #4
 800137a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800137c:	2307      	movs	r3, #7
 800137e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001380:	2303      	movs	r3, #3
 8001382:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001384:	2302      	movs	r3, #2
 8001386:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001388:	2302      	movs	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_FMC_Init+0x98>)
 8001392:	f008 f8e2 	bl	800955a <HAL_SDRAM_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800139c:	f000 f9a6 	bl	80016ec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80013a0:	bf00      	nop
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000598 	.word	0x20000598
 80013ac:	a0000140 	.word	0xa0000140

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b090      	sub	sp, #64	@ 0x40
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013ca:	4bae      	ldr	r3, [pc, #696]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4aad      	ldr	r2, [pc, #692]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4bab      	ldr	r3, [pc, #684]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e6:	4ba7      	ldr	r3, [pc, #668]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	4aa6      	ldr	r2, [pc, #664]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f2:	4ba4      	ldr	r3, [pc, #656]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
 8001402:	4ba0      	ldr	r3, [pc, #640]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a9f      	ldr	r2, [pc, #636]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b9d      	ldr	r3, [pc, #628]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	623b      	str	r3, [r7, #32]
 8001418:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	4b99      	ldr	r3, [pc, #612]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a98      	ldr	r2, [pc, #608]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b96      	ldr	r3, [pc, #600]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	4b92      	ldr	r3, [pc, #584]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a91      	ldr	r2, [pc, #580]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b8f      	ldr	r3, [pc, #572]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	4b8b      	ldr	r3, [pc, #556]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a8a      	ldr	r2, [pc, #552]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b88      	ldr	r3, [pc, #544]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b84      	ldr	r3, [pc, #528]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a83      	ldr	r2, [pc, #524]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b81      	ldr	r3, [pc, #516]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b7d      	ldr	r3, [pc, #500]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a7c      	ldr	r2, [pc, #496]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b7a      	ldr	r3, [pc, #488]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b76      	ldr	r3, [pc, #472]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a75      	ldr	r2, [pc, #468]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80014b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b73      	ldr	r3, [pc, #460]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b68      	ldr	r3, [pc, #416]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a67      	ldr	r2, [pc, #412]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80014e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b65      	ldr	r3, [pc, #404]	@ (8001684 <MX_GPIO_Init+0x2d4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	210c      	movs	r1, #12
 80014fe:	4862      	ldr	r0, [pc, #392]	@ (8001688 <MX_GPIO_Init+0x2d8>)
 8001500:	f002 fe56 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2130      	movs	r1, #48	@ 0x30
 8001508:	4860      	ldr	r0, [pc, #384]	@ (800168c <MX_GPIO_Init+0x2dc>)
 800150a:	f002 fe51 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2108      	movs	r1, #8
 8001512:	485f      	ldr	r0, [pc, #380]	@ (8001690 <MX_GPIO_Init+0x2e0>)
 8001514:	f002 fe4c 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	2140      	movs	r1, #64	@ 0x40
 800151c:	485d      	ldr	r0, [pc, #372]	@ (8001694 <MX_GPIO_Init+0x2e4>)
 800151e:	f002 fe47 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2105      	movs	r1, #5
 8001526:	485c      	ldr	r0, [pc, #368]	@ (8001698 <MX_GPIO_Init+0x2e8>)
 8001528:	f002 fe42 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2180      	movs	r1, #128	@ 0x80
 8001530:	485a      	ldr	r0, [pc, #360]	@ (800169c <MX_GPIO_Init+0x2ec>)
 8001532:	f002 fe3d 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001536:	2200      	movs	r2, #0
 8001538:	2108      	movs	r1, #8
 800153a:	4859      	ldr	r0, [pc, #356]	@ (80016a0 <MX_GPIO_Init+0x2f0>)
 800153c:	f002 fe38 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001540:	230c      	movs	r3, #12
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001550:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001554:	4619      	mov	r1, r3
 8001556:	484c      	ldr	r0, [pc, #304]	@ (8001688 <MX_GPIO_Init+0x2d8>)
 8001558:	f002 fc66 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 800155c:	2308      	movs	r3, #8
 800155e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001568:	2300      	movs	r3, #0
 800156a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800156c:	2306      	movs	r3, #6
 800156e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 8001570:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001574:	4619      	mov	r1, r3
 8001576:	4848      	ldr	r0, [pc, #288]	@ (8001698 <MX_GPIO_Init+0x2e8>)
 8001578:	f002 fc56 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001580:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001584:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800158e:	4619      	mov	r1, r3
 8001590:	4841      	ldr	r0, [pc, #260]	@ (8001698 <MX_GPIO_Init+0x2e8>)
 8001592:	f002 fc49 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8001596:	2330      	movs	r3, #48	@ 0x30
 8001598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800159a:	2311      	movs	r3, #17
 800159c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015aa:	4619      	mov	r1, r3
 80015ac:	4837      	ldr	r0, [pc, #220]	@ (800168c <MX_GPIO_Init+0x2dc>)
 80015ae:	f002 fc3b 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80015b2:	2308      	movs	r3, #8
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015b6:	2311      	movs	r3, #17
 80015b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80015c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015c6:	4619      	mov	r1, r3
 80015c8:	4831      	ldr	r0, [pc, #196]	@ (8001690 <MX_GPIO_Init+0x2e0>)
 80015ca:	f002 fc2d 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80015ce:	2340      	movs	r3, #64	@ 0x40
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015d2:	2311      	movs	r3, #17
 80015d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015e2:	4619      	mov	r1, r3
 80015e4:	482b      	ldr	r0, [pc, #172]	@ (8001694 <MX_GPIO_Init+0x2e4>)
 80015e6:	f002 fc1f 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80015ea:	2305      	movs	r3, #5
 80015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015fe:	4619      	mov	r1, r3
 8001600:	4825      	ldr	r0, [pc, #148]	@ (8001698 <MX_GPIO_Init+0x2e8>)
 8001602:	f002 fc11 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CK_Pin */
  GPIO_InitStruct.Pin = MIC_CK_Pin;
 8001606:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001618:	2302      	movs	r3, #2
 800161a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001620:	4619      	mov	r1, r3
 8001622:	481a      	ldr	r0, [pc, #104]	@ (800168c <MX_GPIO_Init+0x2dc>)
 8001624:	f002 fc00 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001628:	2304      	movs	r3, #4
 800162a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001638:	4619      	mov	r1, r3
 800163a:	4816      	ldr	r0, [pc, #88]	@ (8001694 <MX_GPIO_Init+0x2e4>)
 800163c:	f002 fbf4 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001640:	2320      	movs	r3, #32
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001644:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001648:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001652:	4619      	mov	r1, r3
 8001654:	4813      	ldr	r0, [pc, #76]	@ (80016a4 <MX_GPIO_Init+0x2f4>)
 8001656:	f002 fbe7 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800166a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800166e:	4619      	mov	r1, r3
 8001670:	480a      	ldr	r0, [pc, #40]	@ (800169c <MX_GPIO_Init+0x2ec>)
 8001672:	f002 fbd9 	bl	8003e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001676:	2308      	movs	r3, #8
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	e012      	b.n	80016a8 <MX_GPIO_Init+0x2f8>
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40021000 	.word	0x40021000
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40022800 	.word	0x40022800
 8001694:	40021800 	.word	0x40021800
 8001698:	40020400 	.word	0x40020400
 800169c:	40021c00 	.word	0x40021c00
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40022400 	.word	0x40022400
 80016a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b2:	4619      	mov	r1, r3
 80016b4:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <MX_GPIO_Init+0x314>)
 80016b6:	f002 fbb7 	bl	8003e28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ba:	bf00      	nop
 80016bc:	3740      	adds	r7, #64	@ 0x40
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40020000 	.word	0x40020000

080016c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a04      	ldr	r2, [pc, #16]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016da:	f000 fe6d 	bl	80023b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40001000 	.word	0x40001000

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <Error_Handler+0x8>

080016f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	4a0f      	ldr	r2, [pc, #60]	@ (8001744 <HAL_MspInit+0x4c>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800170c:	6453      	str	r3, [r2, #68]	@ 0x44
 800170e:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <HAL_MspInit+0x4c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	@ 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <HAL_CRC_MspInit+0x3c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10d      	bne.n	8001776 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <HAL_CRC_MspInit+0x40>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a09      	ldr	r2, [pc, #36]	@ (8001788 <HAL_CRC_MspInit+0x40>)
 8001764:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <HAL_CRC_MspInit+0x40>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001776:	bf00      	nop
 8001778:	3714      	adds	r7, #20
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	40023000 	.word	0x40023000
 8001788:	40023800 	.word	0x40023800

0800178c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0e      	ldr	r2, [pc, #56]	@ (80017d4 <HAL_DMA2D_MspInit+0x48>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d115      	bne.n	80017ca <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_DMA2D_MspInit+0x4c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <HAL_DMA2D_MspInit+0x4c>)
 80017a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_DMA2D_MspInit+0x4c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	205a      	movs	r0, #90	@ 0x5a
 80017c0:	f000 fef6 	bl	80025b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80017c4:	205a      	movs	r0, #90	@ 0x5a
 80017c6:	f000 ff0f 	bl	80025e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80017ca:	bf00      	nop
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	4002b000 	.word	0x4002b000
 80017d8:	40023800 	.word	0x40023800

080017dc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	@ 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_DSI_MspInit+0x94>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d133      	bne.n	8001866 <HAL_DSI_MspInit+0x8a>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_DSI_MspInit+0x98>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <HAL_DSI_MspInit+0x98>)
 8001808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_DSI_MspInit+0x98>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b15      	ldr	r3, [pc, #84]	@ (8001874 <HAL_DSI_MspInit+0x98>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <HAL_DSI_MspInit+0x98>)
 8001824:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_DSI_MspInit+0x98>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8001836:	2304      	movs	r3, #4
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001846:	230d      	movs	r3, #13
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4809      	ldr	r0, [pc, #36]	@ (8001878 <HAL_DSI_MspInit+0x9c>)
 8001852:	f002 fae9 	bl	8003e28 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	205c      	movs	r0, #92	@ 0x5c
 800185c:	f000 fea8 	bl	80025b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001860:	205c      	movs	r0, #92	@ 0x5c
 8001862:	f000 fec1 	bl	80025e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	@ 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40016c00 	.word	0x40016c00
 8001874:	40023800 	.word	0x40023800
 8001878:	40022400 	.word	0x40022400

0800187c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08c      	sub	sp, #48	@ 0x30
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a32      	ldr	r2, [pc, #200]	@ (8001964 <HAL_I2C_MspInit+0xe8>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12d      	bne.n	80018fa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	4b31      	ldr	r3, [pc, #196]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a30      	ldr	r2, [pc, #192]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	61bb      	str	r3, [r7, #24]
 80018b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80018ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018cc:	2304      	movs	r3, #4
 80018ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 031c 	add.w	r3, r7, #28
 80018d4:	4619      	mov	r1, r3
 80018d6:	4825      	ldr	r0, [pc, #148]	@ (800196c <HAL_I2C_MspInit+0xf0>)
 80018d8:	f002 faa6 	bl	8003e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	4a20      	ldr	r2, [pc, #128]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 80018e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018f8:	e030      	b.n	800195c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001970 <HAL_I2C_MspInit+0xf4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d12b      	bne.n	800195c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190c:	4a16      	ldr	r2, [pc, #88]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 800190e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001912:	6313      	str	r3, [r2, #48]	@ 0x30
 8001914:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001920:	2330      	movs	r3, #48	@ 0x30
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001924:	2312      	movs	r3, #18
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001928:	2301      	movs	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001930:	2304      	movs	r3, #4
 8001932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	480e      	ldr	r0, [pc, #56]	@ (8001974 <HAL_I2C_MspInit+0xf8>)
 800193c:	f002 fa74 	bl	8003e28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	4a07      	ldr	r2, [pc, #28]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 800194a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800194e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_I2C_MspInit+0xec>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
}
 800195c:	bf00      	nop
 800195e:	3730      	adds	r7, #48	@ 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40005400 	.word	0x40005400
 8001968:	40023800 	.word	0x40023800
 800196c:	40020400 	.word	0x40020400
 8001970:	40005800 	.word	0x40005800
 8001974:	40021c00 	.word	0x40021c00

08001978 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0e      	ldr	r2, [pc, #56]	@ (80019c0 <HAL_LTDC_MspInit+0x48>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d115      	bne.n	80019b6 <HAL_LTDC_MspInit+0x3e>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_LTDC_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	4a0c      	ldr	r2, [pc, #48]	@ (80019c4 <HAL_LTDC_MspInit+0x4c>)
 8001994:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001998:	6453      	str	r3, [r2, #68]	@ 0x44
 800199a:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <HAL_LTDC_MspInit+0x4c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2058      	movs	r0, #88	@ 0x58
 80019ac:	f000 fe00 	bl	80025b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80019b0:	2058      	movs	r0, #88	@ 0x58
 80019b2:	f000 fe19 	bl	80025e8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40016800 	.word	0x40016800
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	@ 0x28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a31      	ldr	r2, [pc, #196]	@ (8001aac <HAL_QSPI_MspInit+0xe4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d15b      	bne.n	8001aa2 <HAL_QSPI_MspInit+0xda>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b30      	ldr	r3, [pc, #192]	@ (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 80019f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6393      	str	r3, [r2, #56]	@ 0x38
 80019fa:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 80019fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a28      	ldr	r2, [pc, #160]	@ (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b26      	ldr	r3, [pc, #152]	@ (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b22      	ldr	r3, [pc, #136]	@ (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a21      	ldr	r2, [pc, #132]	@ (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a2c:	f043 0320 	orr.w	r3, r3, #32
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab0 <HAL_QSPI_MspInit+0xe8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PF8     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001a3e:	2340      	movs	r3, #64	@ 0x40
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001a4e:	230a      	movs	r3, #10
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4816      	ldr	r0, [pc, #88]	@ (8001ab4 <HAL_QSPI_MspInit+0xec>)
 8001a5a:	f002 f9e5 	bl	8003e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8001a5e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001a70:	2309      	movs	r3, #9
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480f      	ldr	r0, [pc, #60]	@ (8001ab8 <HAL_QSPI_MspInit+0xf0>)
 8001a7c:	f002 f9d4 	bl	8003e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001a80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001a92:	230a      	movs	r3, #10
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4806      	ldr	r0, [pc, #24]	@ (8001ab8 <HAL_QSPI_MspInit+0xf0>)
 8001a9e:	f002 f9c3 	bl	8003e28 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	@ 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	a0001000 	.word	0xa0001000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40021400 	.word	0x40021400

08001abc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	@ 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a28      	ldr	r2, [pc, #160]	@ (8001b7c <HAL_SD_MspInit+0xc0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d14a      	bne.n	8001b74 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b27      	ldr	r3, [pc, #156]	@ (8001b80 <HAL_SD_MspInit+0xc4>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	4a26      	ldr	r2, [pc, #152]	@ (8001b80 <HAL_SD_MspInit+0xc4>)
 8001ae8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aee:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <HAL_SD_MspInit+0xc4>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <HAL_SD_MspInit+0xc4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a1f      	ldr	r2, [pc, #124]	@ (8001b80 <HAL_SD_MspInit+0xc4>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <HAL_SD_MspInit+0xc4>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_SD_MspInit+0xc4>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a18      	ldr	r2, [pc, #96]	@ (8001b80 <HAL_SD_MspInit+0xc4>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <HAL_SD_MspInit+0xc4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PD2     ------> SDIO_CMD
    PC9     ------> SDIO_D1
    PC8     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin
 8001b32:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001b36:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b44:	230c      	movs	r3, #12
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <HAL_SD_MspInit+0xc8>)
 8001b50:	f002 f96a 	bl	8003e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001b54:	2304      	movs	r3, #4
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b60:	2303      	movs	r3, #3
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b64:	230c      	movs	r3, #12
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4806      	ldr	r0, [pc, #24]	@ (8001b88 <HAL_SD_MspInit+0xcc>)
 8001b70:	f002 f95a 	bl	8003e28 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001b74:	bf00      	nop
 8001b76:	3728      	adds	r7, #40	@ 0x28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00

08001b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	@ 0x28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a28      	ldr	r2, [pc, #160]	@ (8001c4c <HAL_SPI_MspInit+0xc0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d149      	bne.n	8001c42 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	4b27      	ldr	r3, [pc, #156]	@ (8001c50 <HAL_SPI_MspInit+0xc4>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	4a26      	ldr	r2, [pc, #152]	@ (8001c50 <HAL_SPI_MspInit+0xc4>)
 8001bb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbe:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <HAL_SPI_MspInit+0xc4>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b20      	ldr	r3, [pc, #128]	@ (8001c50 <HAL_SPI_MspInit+0xc4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c50 <HAL_SPI_MspInit+0xc4>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bda:	4b1d      	ldr	r3, [pc, #116]	@ (8001c50 <HAL_SPI_MspInit+0xc4>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	4b19      	ldr	r3, [pc, #100]	@ (8001c50 <HAL_SPI_MspInit+0xc4>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	4a18      	ldr	r2, [pc, #96]	@ (8001c50 <HAL_SPI_MspInit+0xc4>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf6:	4b16      	ldr	r3, [pc, #88]	@ (8001c50 <HAL_SPI_MspInit+0xc4>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001c02:	2330      	movs	r3, #48	@ 0x30
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c12:	2305      	movs	r3, #5
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	480d      	ldr	r0, [pc, #52]	@ (8001c54 <HAL_SPI_MspInit+0xc8>)
 8001c1e:	f002 f903 	bl	8003e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c22:	2320      	movs	r3, #32
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c32:	2305      	movs	r3, #5
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4806      	ldr	r0, [pc, #24]	@ (8001c58 <HAL_SPI_MspInit+0xcc>)
 8001c3e:	f002 f8f3 	bl	8003e28 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	@ 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40013000 	.word	0x40013000
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020000 	.word	0x40020000

08001c5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0b      	ldr	r2, [pc, #44]	@ (8001c98 <HAL_TIM_Base_MspInit+0x3c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d10d      	bne.n	8001c8a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <HAL_TIM_Base_MspInit+0x40>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_TIM_Base_MspInit+0x40>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <HAL_TIM_Base_MspInit+0x40>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40010000 	.word	0x40010000
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08c      	sub	sp, #48	@ 0x30
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 031c 	add.w	r3, r7, #28
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a65      	ldr	r2, [pc, #404]	@ (8001e54 <HAL_UART_MspInit+0x1b4>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d12d      	bne.n	8001d1e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	4b64      	ldr	r3, [pc, #400]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	4a63      	ldr	r2, [pc, #396]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd2:	4b61      	ldr	r3, [pc, #388]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b5a      	ldr	r3, [pc, #360]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001cfa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	4851      	ldr	r0, [pc, #324]	@ (8001e5c <HAL_UART_MspInit+0x1bc>)
 8001d18:	f002 f886 	bl	8003e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d1c:	e095      	b.n	8001e4a <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a4f      	ldr	r2, [pc, #316]	@ (8001e60 <HAL_UART_MspInit+0x1c0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	f040 8090 	bne.w	8001e4a <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	4a49      	ldr	r2, [pc, #292]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001d34:	f043 0320 	orr.w	r3, r3, #32
 8001d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3a:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	f003 0320 	and.w	r3, r3, #32
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b43      	ldr	r3, [pc, #268]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a42      	ldr	r2, [pc, #264]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <HAL_UART_MspInit+0x1b8>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_RX_Pin|ARDUINO_USART6_TX_Pin;
 8001d62:	23c0      	movs	r3, #192	@ 0xc0
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d72:	2308      	movs	r3, #8
 8001d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4839      	ldr	r0, [pc, #228]	@ (8001e64 <HAL_UART_MspInit+0x1c4>)
 8001d7e:	f002 f853 	bl	8003e28 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001d82:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001d84:	4a39      	ldr	r2, [pc, #228]	@ (8001e6c <HAL_UART_MspInit+0x1cc>)
 8001d86:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001d88:	4b37      	ldr	r3, [pc, #220]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001d8a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001d8e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d90:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d96:	4b34      	ldr	r3, [pc, #208]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001d9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001da2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da4:	4b30      	ldr	r3, [pc, #192]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001daa:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001db0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001db6:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001dc2:	4829      	ldr	r0, [pc, #164]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001dc4:	f000 fc3a 	bl	800263c <HAL_DMA_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001dce:	f7ff fc8d 	bl	80016ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a24      	ldr	r2, [pc, #144]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dd8:	4a23      	ldr	r2, [pc, #140]	@ (8001e68 <HAL_UART_MspInit+0x1c8>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001de0:	4a24      	ldr	r2, [pc, #144]	@ (8001e74 <HAL_UART_MspInit+0x1d4>)
 8001de2:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001de4:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001de6:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001dea:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dec:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001dee:	2240      	movs	r2, #64	@ 0x40
 8001df0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001df8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dfe:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e12:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e18:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001e1e:	4814      	ldr	r0, [pc, #80]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001e20:	f000 fc0c 	bl	800263c <HAL_DMA_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8001e2a:	f7ff fc5f 	bl	80016ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a0f      	ldr	r2, [pc, #60]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001e32:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e34:	4a0e      	ldr	r2, [pc, #56]	@ (8001e70 <HAL_UART_MspInit+0x1d0>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	2047      	movs	r0, #71	@ 0x47
 8001e40:	f000 fbb6 	bl	80025b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e44:	2047      	movs	r0, #71	@ 0x47
 8001e46:	f000 fbcf 	bl	80025e8 <HAL_NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3730      	adds	r7, #48	@ 0x30
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40004800 	.word	0x40004800
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40011400 	.word	0x40011400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	200004d8 	.word	0x200004d8
 8001e6c:	40026428 	.word	0x40026428
 8001e70:	20000538 	.word	0x20000538
 8001e74:	400264a0 	.word	0x400264a0

08001e78 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e8c:	4b44      	ldr	r3, [pc, #272]	@ (8001fa0 <HAL_FMC_MspInit+0x128>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f040 8081 	bne.w	8001f98 <HAL_FMC_MspInit+0x120>
    return;
  }
  FMC_Initialized = 1;
 8001e96:	4b42      	ldr	r3, [pc, #264]	@ (8001fa0 <HAL_FMC_MspInit+0x128>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	4b40      	ldr	r3, [pc, #256]	@ (8001fa4 <HAL_FMC_MspInit+0x12c>)
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ea4:	4a3f      	ldr	r2, [pc, #252]	@ (8001fa4 <HAL_FMC_MspInit+0x12c>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6393      	str	r3, [r2, #56]	@ 0x38
 8001eac:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <HAL_FMC_MspInit+0x12c>)
 8001eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin
 8001eb8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001ebc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D11_Pin|D4_Pin|D7_Pin
                          |D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eca:	230c      	movs	r3, #12
 8001ecc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4835      	ldr	r0, [pc, #212]	@ (8001fa8 <HAL_FMC_MspInit+0x130>)
 8001ed4:	f001 ffa8 	bl	8003e28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin
 8001ed8:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001edc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eea:	230c      	movs	r3, #12
 8001eec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	482e      	ldr	r0, [pc, #184]	@ (8001fac <HAL_FMC_MspInit+0x134>)
 8001ef4:	f001 ff98 	bl	8003e28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin
 8001ef8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001efc:	607b      	str	r3, [r7, #4]
                          |D0_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4827      	ldr	r0, [pc, #156]	@ (8001fb0 <HAL_FMC_MspInit+0x138>)
 8001f14:	f001 ff88 	bl	8003e28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001f18:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8001f1c:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4820      	ldr	r0, [pc, #128]	@ (8001fb4 <HAL_FMC_MspInit+0x13c>)
 8001f34:	f001 ff78 	bl	8003e28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001f38:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001f3c:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNMT48LC4M32B2B5_6A_RAS_RAS___Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f4a:	230c      	movs	r3, #12
 8001f4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	4619      	mov	r1, r3
 8001f52:	4819      	ldr	r0, [pc, #100]	@ (8001fb8 <HAL_FMC_MspInit+0x140>)
 8001f54:	f001 ff68 	bl	8003e28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin
 8001f58:	f64f 730c 	movw	r3, #65292	@ 0xff0c
 8001f5c:	607b      	str	r3, [r7, #4]
                          |SDCKE0_Pin|D20_Pin|D17_Pin|D19_Pin
                          |D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f6e:	1d3b      	adds	r3, r7, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4812      	ldr	r0, [pc, #72]	@ (8001fbc <HAL_FMC_MspInit+0x144>)
 8001f74:	f001 ff58 	bl	8003e28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f88:	230c      	movs	r3, #12
 8001f8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480b      	ldr	r0, [pc, #44]	@ (8001fc0 <HAL_FMC_MspInit+0x148>)
 8001f92:	f001 ff49 	bl	8003e28 <HAL_GPIO_Init>
 8001f96:	e000      	b.n	8001f9a <HAL_FMC_MspInit+0x122>
    return;
 8001f98:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000e38 	.word	0x20000e38
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40021400 	.word	0x40021400
 8001fbc:	40021c00 	.word	0x40021c00
 8001fc0:	40020800 	.word	0x40020800

08001fc4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001fcc:	f7ff ff54 	bl	8001e78 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a26      	ldr	r2, [pc, #152]	@ (8002080 <HAL_SAI_MspInit+0xa8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d146      	bne.n	8002078 <HAL_SAI_MspInit+0xa0>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001fea:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <HAL_SAI_MspInit+0xac>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10d      	bne.n	800200e <HAL_SAI_MspInit+0x36>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b24      	ldr	r3, [pc, #144]	@ (8002088 <HAL_SAI_MspInit+0xb0>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <HAL_SAI_MspInit+0xb0>)
 8001ffc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002000:	6453      	str	r3, [r2, #68]	@ 0x44
 8002002:	4b21      	ldr	r3, [pc, #132]	@ (8002088 <HAL_SAI_MspInit+0xb0>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_SAI_MspInit+0xac>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	4a1b      	ldr	r2, [pc, #108]	@ (8002084 <HAL_SAI_MspInit+0xac>)
 8002016:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 8002018:	2330      	movs	r3, #48	@ 0x30
 800201a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201c:	2302      	movs	r3, #2
 800201e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002028:	2306      	movs	r3, #6
 800202a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4619      	mov	r1, r3
 8002032:	4816      	ldr	r0, [pc, #88]	@ (800208c <HAL_SAI_MspInit+0xb4>)
 8002034:	f001 fef8 	bl	8003e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 8002038:	2340      	movs	r3, #64	@ 0x40
 800203a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002048:	2306      	movs	r3, #6
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	480f      	ldr	r0, [pc, #60]	@ (8002090 <HAL_SAI_MspInit+0xb8>)
 8002054:	f001 fee8 	bl	8003e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002068:	2306      	movs	r3, #6
 800206a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	4619      	mov	r1, r3
 8002072:	4808      	ldr	r0, [pc, #32]	@ (8002094 <HAL_SAI_MspInit+0xbc>)
 8002074:	f001 fed8 	bl	8003e28 <HAL_GPIO_Init>

    }
}
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40015804 	.word	0x40015804
 8002084:	20000e3c 	.word	0x20000e3c
 8002088:	40023800 	.word	0x40023800
 800208c:	40021000 	.word	0x40021000
 8002090:	40020c00 	.word	0x40020c00
 8002094:	40021800 	.word	0x40021800

08002098 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08e      	sub	sp, #56	@ 0x38
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	4b33      	ldr	r3, [pc, #204]	@ (800217c <HAL_InitTick+0xe4>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b0:	4a32      	ldr	r2, [pc, #200]	@ (800217c <HAL_InitTick+0xe4>)
 80020b2:	f043 0310 	orr.w	r3, r3, #16
 80020b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b8:	4b30      	ldr	r3, [pc, #192]	@ (800217c <HAL_InitTick+0xe4>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c4:	f107 0210 	add.w	r2, r7, #16
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f005 f99a 	bl	8007408 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020de:	f005 f96b 	bl	80073b8 <HAL_RCC_GetPCLK1Freq>
 80020e2:	6378      	str	r0, [r7, #52]	@ 0x34
 80020e4:	e004      	b.n	80020f0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020e6:	f005 f967 	bl	80073b8 <HAL_RCC_GetPCLK1Freq>
 80020ea:	4603      	mov	r3, r0
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f2:	4a23      	ldr	r2, [pc, #140]	@ (8002180 <HAL_InitTick+0xe8>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	0c9b      	lsrs	r3, r3, #18
 80020fa:	3b01      	subs	r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020fe:	4b21      	ldr	r3, [pc, #132]	@ (8002184 <HAL_InitTick+0xec>)
 8002100:	4a21      	ldr	r2, [pc, #132]	@ (8002188 <HAL_InitTick+0xf0>)
 8002102:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002104:	4b1f      	ldr	r3, [pc, #124]	@ (8002184 <HAL_InitTick+0xec>)
 8002106:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800210a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800210c:	4a1d      	ldr	r2, [pc, #116]	@ (8002184 <HAL_InitTick+0xec>)
 800210e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002110:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002112:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <HAL_InitTick+0xec>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <HAL_InitTick+0xec>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211e:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_InitTick+0xec>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002124:	4817      	ldr	r0, [pc, #92]	@ (8002184 <HAL_InitTick+0xec>)
 8002126:	f007 fad5 	bl	80096d4 <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002130:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11b      	bne.n	8002170 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002138:	4812      	ldr	r0, [pc, #72]	@ (8002184 <HAL_InitTick+0xec>)
 800213a:	f007 fb1b 	bl	8009774 <HAL_TIM_Base_Start_IT>
 800213e:	4603      	mov	r3, r0
 8002140:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002144:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002148:	2b00      	cmp	r3, #0
 800214a:	d111      	bne.n	8002170 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800214c:	2036      	movs	r0, #54	@ 0x36
 800214e:	f000 fa4b 	bl	80025e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b0f      	cmp	r3, #15
 8002156:	d808      	bhi.n	800216a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002158:	2200      	movs	r2, #0
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	2036      	movs	r0, #54	@ 0x36
 800215e:	f000 fa27 	bl	80025b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002162:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_InitTick+0xf4>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	e002      	b.n	8002170 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002170:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002174:	4618      	mov	r0, r3
 8002176:	3738      	adds	r7, #56	@ 0x38
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	431bde83 	.word	0x431bde83
 8002184:	20000e40 	.word	0x20000e40
 8002188:	40001000 	.word	0x40001000
 800218c:	20000008 	.word	0x20000008

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <NMI_Handler+0x4>

08002198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <MemManage_Handler+0x4>

080021a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021f4:	4802      	ldr	r0, [pc, #8]	@ (8002200 <TIM6_DAC_IRQHandler+0x10>)
 80021f6:	f007 fb2d 	bl	8009854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20000e40 	.word	0x20000e40

08002204 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002208:	4802      	ldr	r0, [pc, #8]	@ (8002214 <DMA2_Stream1_IRQHandler+0x10>)
 800220a:	f000 fbaf 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200004d8 	.word	0x200004d8

08002218 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <OTG_FS_IRQHandler+0x10>)
 800221e:	f002 fac1 	bl	80047a4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20001280 	.word	0x20001280

0800222c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002230:	4802      	ldr	r0, [pc, #8]	@ (800223c <DMA2_Stream6_IRQHandler+0x10>)
 8002232:	f000 fb9b 	bl	800296c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000538 	.word	0x20000538

08002240 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002244:	4802      	ldr	r0, [pc, #8]	@ (8002250 <USART6_IRQHandler+0x10>)
 8002246:	f008 f8fb 	bl	800a440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000490 	.word	0x20000490

08002254 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <LTDC_IRQHandler+0x10>)
 800225a:	f004 fb0b 	bl	8006874 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	200001a8 	.word	0x200001a8

08002268 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <DMA2D_IRQHandler+0x10>)
 800226e:	f000 fe30 	bl	8002ed2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200000a4 	.word	0x200000a4

0800227c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <DSI_IRQHandler+0x10>)
 8002282:	f001 fa06 	bl	8003692 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200000e4 	.word	0x200000e4

08002290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002298:	4a14      	ldr	r2, [pc, #80]	@ (80022ec <_sbrk+0x5c>)
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <_sbrk+0x60>)
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022a4:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <_sbrk+0x64>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <_sbrk+0x64>)
 80022ae:	4a12      	ldr	r2, [pc, #72]	@ (80022f8 <_sbrk+0x68>)
 80022b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022b2:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <_sbrk+0x64>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4413      	add	r3, r2
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d207      	bcs.n	80022d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c0:	f00e f87c 	bl	80103bc <__errno>
 80022c4:	4603      	mov	r3, r0
 80022c6:	220c      	movs	r2, #12
 80022c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	e009      	b.n	80022e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d0:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <_sbrk+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022d6:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	4a05      	ldr	r2, [pc, #20]	@ (80022f4 <_sbrk+0x64>)
 80022e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022e2:	68fb      	ldr	r3, [r7, #12]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20050000 	.word	0x20050000
 80022f0:	00000400 	.word	0x00000400
 80022f4:	20000e88 	.word	0x20000e88
 80022f8:	200017a8 	.word	0x200017a8

080022fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <SystemInit+0x20>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002306:	4a05      	ldr	r2, [pc, #20]	@ (800231c <SystemInit+0x20>)
 8002308:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800230c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002320:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002358 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002324:	f7ff ffea 	bl	80022fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002328:	480c      	ldr	r0, [pc, #48]	@ (800235c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800232a:	490d      	ldr	r1, [pc, #52]	@ (8002360 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800232c:	4a0d      	ldr	r2, [pc, #52]	@ (8002364 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002330:	e002      	b.n	8002338 <LoopCopyDataInit>

08002332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002336:	3304      	adds	r3, #4

08002338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800233c:	d3f9      	bcc.n	8002332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233e:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002340:	4c0a      	ldr	r4, [pc, #40]	@ (800236c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002344:	e001      	b.n	800234a <LoopFillZerobss>

08002346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002348:	3204      	adds	r2, #4

0800234a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800234c:	d3fb      	bcc.n	8002346 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800234e:	f00e f83b 	bl	80103c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002352:	f7fe fae3 	bl	800091c <main>
  bx  lr    
 8002356:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002358:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800235c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002360:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002364:	08010ee8 	.word	0x08010ee8
  ldr r2, =_sbss
 8002368:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800236c:	200017a8 	.word	0x200017a8

08002370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <ADC_IRQHandler>
	...

08002374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002378:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0d      	ldr	r2, [pc, #52]	@ (80023b4 <HAL_Init+0x40>)
 800237e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002384:	4b0b      	ldr	r3, [pc, #44]	@ (80023b4 <HAL_Init+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_Init+0x40>)
 800238a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800238e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002390:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <HAL_Init+0x40>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a07      	ldr	r2, [pc, #28]	@ (80023b4 <HAL_Init+0x40>)
 8002396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800239c:	2003      	movs	r0, #3
 800239e:	f000 f8fc 	bl	800259a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023a2:	200f      	movs	r0, #15
 80023a4:	f7ff fe78 	bl	8002098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a8:	f7ff f9a6 	bl	80016f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023c00 	.word	0x40023c00

080023b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_IncTick+0x20>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_IncTick+0x24>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <HAL_IncTick+0x24>)
 80023ca:	6013      	str	r3, [r2, #0]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	2000000c 	.word	0x2000000c
 80023dc:	20000e8c 	.word	0x20000e8c

080023e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return uwTick;
 80023e4:	4b03      	ldr	r3, [pc, #12]	@ (80023f4 <HAL_GetTick+0x14>)
 80023e6:	681b      	ldr	r3, [r3, #0]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	20000e8c 	.word	0x20000e8c

080023f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff ffee 	bl	80023e0 <HAL_GetTick>
 8002404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d005      	beq.n	800241e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002412:	4b0a      	ldr	r3, [pc, #40]	@ (800243c <HAL_Delay+0x44>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4413      	add	r3, r2
 800241c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800241e:	bf00      	nop
 8002420:	f7ff ffde 	bl	80023e0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	429a      	cmp	r2, r3
 800242e:	d8f7      	bhi.n	8002420 <HAL_Delay+0x28>
  {
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000000c 	.word	0x2000000c

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002468:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800246c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002472:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	60d3      	str	r3, [r2, #12]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	@ (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	@ (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	@ (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	@ 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	@ 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff4c 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c2:	f7ff ff61 	bl	8002488 <__NVIC_GetPriorityGrouping>
 80025c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	68b9      	ldr	r1, [r7, #8]
 80025cc:	6978      	ldr	r0, [r7, #20]
 80025ce:	f7ff ffb1 	bl	8002534 <NVIC_EncodePriority>
 80025d2:	4602      	mov	r2, r0
 80025d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff80 	bl	80024e0 <__NVIC_SetPriority>
}
 80025e0:	bf00      	nop
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff ff54 	bl	80024a4 <__NVIC_EnableIRQ>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e00e      	b.n	8002634 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	795b      	ldrb	r3, [r3, #5]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d105      	bne.n	800262c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff f88e 	bl	8001748 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff feca 	bl	80023e0 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e099      	b.n	800278c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0201 	bic.w	r2, r2, #1
 8002676:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002678:	e00f      	b.n	800269a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800267a:	f7ff feb1 	bl	80023e0 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b05      	cmp	r3, #5
 8002686:	d908      	bls.n	800269a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2203      	movs	r2, #3
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e078      	b.n	800278c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1e8      	bne.n	800267a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4b38      	ldr	r3, [pc, #224]	@ (8002794 <HAL_DMA_Init+0x158>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d107      	bne.n	8002704 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fc:	4313      	orrs	r3, r2
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f023 0307 	bic.w	r3, r3, #7
 800271a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272a:	2b04      	cmp	r3, #4
 800272c:	d117      	bne.n	800275e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00e      	beq.n	800275e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fb01 	bl	8002d48 <DMA_CheckFifoParam>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2240      	movs	r2, #64	@ 0x40
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800275a:	2301      	movs	r3, #1
 800275c:	e016      	b.n	800278c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 fab8 	bl	8002cdc <DMA_CalcBaseAndBitshift>
 800276c:	4603      	mov	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	223f      	movs	r2, #63	@ 0x3f
 8002776:	409a      	lsls	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	f010803f 	.word	0xf010803f

08002798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_DMA_Start_IT+0x26>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e040      	b.n	8002840 <HAL_DMA_Start_IT+0xa8>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d12f      	bne.n	8002832 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2202      	movs	r2, #2
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa4a 	bl	8002c80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f0:	223f      	movs	r2, #63	@ 0x3f
 80027f2:	409a      	lsls	r2, r3
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0216 	orr.w	r2, r2, #22
 8002806:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d007      	beq.n	8002820 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0208 	orr.w	r2, r2, #8
 800281e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e005      	b.n	800283e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800283a:	2302      	movs	r3, #2
 800283c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800283e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002856:	f7ff fdc3 	bl	80023e0 <HAL_GetTick>
 800285a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d008      	beq.n	800287a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2280      	movs	r2, #128	@ 0x80
 800286c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e052      	b.n	8002920 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0216 	bic.w	r2, r2, #22
 8002888:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002898:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <HAL_DMA_Abort+0x62>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0208 	bic.w	r2, r2, #8
 80028b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0201 	bic.w	r2, r2, #1
 80028c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ca:	e013      	b.n	80028f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028cc:	f7ff fd88 	bl	80023e0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d90c      	bls.n	80028f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2220      	movs	r2, #32
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2203      	movs	r2, #3
 80028e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e015      	b.n	8002920 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e4      	bne.n	80028cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	223f      	movs	r2, #63	@ 0x3f
 8002908:	409a      	lsls	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d004      	beq.n	8002946 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2280      	movs	r2, #128	@ 0x80
 8002940:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00c      	b.n	8002960 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2205      	movs	r2, #5
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0201 	bic.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002978:	4b8e      	ldr	r3, [pc, #568]	@ (8002bb4 <HAL_DMA_IRQHandler+0x248>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a8e      	ldr	r2, [pc, #568]	@ (8002bb8 <HAL_DMA_IRQHandler+0x24c>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	0a9b      	lsrs	r3, r3, #10
 8002984:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002996:	2208      	movs	r2, #8
 8002998:	409a      	lsls	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d01a      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d013      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0204 	bic.w	r2, r2, #4
 80029be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c4:	2208      	movs	r2, #8
 80029c6:	409a      	lsls	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	2201      	movs	r2, #1
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d012      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fa:	2201      	movs	r2, #1
 80029fc:	409a      	lsls	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	f043 0202 	orr.w	r2, r3, #2
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a12:	2204      	movs	r2, #4
 8002a14:	409a      	lsls	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d012      	beq.n	8002a44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	2204      	movs	r2, #4
 8002a32:	409a      	lsls	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3c:	f043 0204 	orr.w	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a48:	2210      	movs	r2, #16
 8002a4a:	409a      	lsls	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d043      	beq.n	8002adc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d03c      	beq.n	8002adc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a66:	2210      	movs	r2, #16
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d018      	beq.n	8002aae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d108      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d024      	beq.n	8002adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	4798      	blx	r3
 8002a9a:	e01f      	b.n	8002adc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01b      	beq.n	8002adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
 8002aac:	e016      	b.n	8002adc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d107      	bne.n	8002acc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0208 	bic.w	r2, r2, #8
 8002aca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 808f 	beq.w	8002c0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8087 	beq.w	8002c0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b02:	2220      	movs	r2, #32
 8002b04:	409a      	lsls	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d136      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0216 	bic.w	r2, r2, #22
 8002b24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d103      	bne.n	8002b46 <HAL_DMA_IRQHandler+0x1da>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0208 	bic.w	r2, r2, #8
 8002b54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	223f      	movs	r2, #63	@ 0x3f
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d07e      	beq.n	8002c78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
        }
        return;
 8002b82:	e079      	b.n	8002c78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01d      	beq.n	8002bce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10d      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d031      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
 8002bb0:	e02c      	b.n	8002c0c <HAL_DMA_IRQHandler+0x2a0>
 8002bb2:	bf00      	nop
 8002bb4:	20000004 	.word	0x20000004
 8002bb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d023      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
 8002bcc:	e01e      	b.n	8002c0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10f      	bne.n	8002bfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0210 	bic.w	r2, r2, #16
 8002bea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d032      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d022      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2205      	movs	r2, #5
 8002c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d307      	bcc.n	8002c54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f2      	bne.n	8002c38 <HAL_DMA_IRQHandler+0x2cc>
 8002c52:	e000      	b.n	8002c56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
 8002c76:	e000      	b.n	8002c7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c78:	bf00      	nop
    }
  }
}
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	607a      	str	r2, [r7, #4]
 8002c8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b40      	cmp	r3, #64	@ 0x40
 8002cac:	d108      	bne.n	8002cc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cbe:	e007      	b.n	8002cd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	60da      	str	r2, [r3, #12]
}
 8002cd0:	bf00      	nop
 8002cd2:	3714      	adds	r7, #20
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	3b10      	subs	r3, #16
 8002cec:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <DMA_CalcBaseAndBitshift+0x64>)
 8002cee:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cf6:	4a13      	ldr	r2, [pc, #76]	@ (8002d44 <DMA_CalcBaseAndBitshift+0x68>)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d909      	bls.n	8002d1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	1d1a      	adds	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d1c:	e007      	b.n	8002d2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002d26:	f023 0303 	bic.w	r3, r3, #3
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	aaaaaaab 	.word	0xaaaaaaab
 8002d44:	08010e88 	.word	0x08010e88

08002d48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b085      	sub	sp, #20
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d11f      	bne.n	8002da2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b03      	cmp	r3, #3
 8002d66:	d856      	bhi.n	8002e16 <DMA_CheckFifoParam+0xce>
 8002d68:	a201      	add	r2, pc, #4	@ (adr r2, 8002d70 <DMA_CheckFifoParam+0x28>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d81 	.word	0x08002d81
 8002d74:	08002d93 	.word	0x08002d93
 8002d78:	08002d81 	.word	0x08002d81
 8002d7c:	08002e17 	.word	0x08002e17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d046      	beq.n	8002e1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d90:	e043      	b.n	8002e1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d9a:	d140      	bne.n	8002e1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da0:	e03d      	b.n	8002e1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002daa:	d121      	bne.n	8002df0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d837      	bhi.n	8002e22 <DMA_CheckFifoParam+0xda>
 8002db2:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <DMA_CheckFifoParam+0x70>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002dc9 	.word	0x08002dc9
 8002dbc:	08002dcf 	.word	0x08002dcf
 8002dc0:	08002dc9 	.word	0x08002dc9
 8002dc4:	08002de1 	.word	0x08002de1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      break;
 8002dcc:	e030      	b.n	8002e30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d025      	beq.n	8002e26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dde:	e022      	b.n	8002e26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002de8:	d11f      	bne.n	8002e2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dee:	e01c      	b.n	8002e2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d903      	bls.n	8002dfe <DMA_CheckFifoParam+0xb6>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d003      	beq.n	8002e04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dfc:	e018      	b.n	8002e30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
      break;
 8002e02:	e015      	b.n	8002e30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
      break;
 8002e14:	e00b      	b.n	8002e2e <DMA_CheckFifoParam+0xe6>
      break;
 8002e16:	bf00      	nop
 8002e18:	e00a      	b.n	8002e30 <DMA_CheckFifoParam+0xe8>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e008      	b.n	8002e30 <DMA_CheckFifoParam+0xe8>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e006      	b.n	8002e30 <DMA_CheckFifoParam+0xe8>
      break;
 8002e22:	bf00      	nop
 8002e24:	e004      	b.n	8002e30 <DMA_CheckFifoParam+0xe8>
      break;
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <DMA_CheckFifoParam+0xe8>
      break;
 8002e2e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop

08002e40 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e03b      	b.n	8002eca <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe fc90 	bl	800178c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e90:	f023 0107 	bic.w	r1, r3, #7
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002eaa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68d1      	ldr	r1, [r2, #12]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d026      	beq.n	8002f42 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d021      	beq.n	8002f42 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d026      	beq.n	8002f9a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d021      	beq.n	8002f9a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f72:	f043 0202 	orr.w	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d026      	beq.n	8002ff2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d021      	beq.n	8002ff2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00e      	beq.n	8003024 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003014:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2204      	movs	r2, #4
 800301c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f853 	bl	80030ca <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d024      	beq.n	8003078 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01f      	beq.n	8003078 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003046:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2202      	movs	r2, #2
 800304e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01f      	beq.n	80030c2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01a      	beq.n	80030c2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800309a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2210      	movs	r2, #16
 80030a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f80e 	bl	80030de <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_DMA2D_ConfigLayer+0x20>
 8003110:	2302      	movs	r3, #2
 8003112:	e079      	b.n	8003208 <HAL_DMA2D_ConfigLayer+0x114>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	3318      	adds	r3, #24
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800313e:	4b35      	ldr	r3, [pc, #212]	@ (8003214 <HAL_DMA2D_ConfigLayer+0x120>)
 8003140:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b0a      	cmp	r3, #10
 8003148:	d003      	beq.n	8003152 <HAL_DMA2D_ConfigLayer+0x5e>
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b09      	cmp	r3, #9
 8003150:	d107      	bne.n	8003162 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e005      	b.n	800316e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d120      	bne.n	80031b6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43db      	mvns	r3, r3
 800317e:	ea02 0103 	and.w	r1, r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	430a      	orrs	r2, r1
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b0a      	cmp	r3, #10
 800319c:	d003      	beq.n	80031a6 <HAL_DMA2D_ConfigLayer+0xb2>
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	d127      	bne.n	80031f6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80031b4:	e01f      	b.n	80031f6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	43db      	mvns	r3, r3
 80031c0:	ea02 0103 	and.w	r1, r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b0a      	cmp	r3, #10
 80031de:	d003      	beq.n	80031e8 <HAL_DMA2D_ConfigLayer+0xf4>
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b09      	cmp	r3, #9
 80031e6:	d106      	bne.n	80031f6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80031f4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	371c      	adds	r7, #28
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	ff03000f 	.word	0xff03000f

08003218 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	@ 0x28
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e16e      	b.n	800350a <HAL_DSI_Init+0x2f2>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7c5b      	ldrb	r3, [r3, #17]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d102      	bne.n	800323c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe fad0 	bl	80017dc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2203      	movs	r2, #3
 8003240:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8003242:	2300      	movs	r3, #0
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003256:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8003262:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800326a:	f7ff f8b9 	bl	80023e0 <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003270:	e009      	b.n	8003286 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003272:	f7ff f8b5 	bl	80023e0 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003280:	d901      	bls.n	8003286 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e141      	b.n	800350a <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800328e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0ed      	beq.n	8003272 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 80032a6:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 80032aa:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80032c2:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80032ca:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80032fe:	2001      	movs	r0, #1
 8003300:	f7ff f87a 	bl	80023f8 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8003304:	f7ff f86c 	bl	80023e0 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800330a:	e009      	b.n	8003320 <HAL_DSI_Init+0x108>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800330c:	f7ff f868 	bl	80023e0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800331a:	d901      	bls.n	8003320 <HAL_DSI_Init+0x108>
    {
      return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0f4      	b.n	800350a <HAL_DSI_Init+0x2f2>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8003328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ed      	beq.n	800330c <HAL_DSI_Init+0xf4>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003360:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6899      	ldr	r1, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0202 	orr.w	r2, r2, #2
 8003384:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0204 	orr.w	r2, r2, #4
 8003398:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0203 	bic.w	r2, r2, #3
 80033ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 80033c6:	f7ff f80b 	bl	80023e0 <HAL_GetTick>
 80033ca:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d123      	bne.n	8003424 <HAL_DSI_Init+0x20c>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80033dc:	e00c      	b.n	80033f8 <HAL_DSI_Init+0x1e0>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80033de:	f7fe ffff 	bl	80023e0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033ec:	d904      	bls.n	80033f8 <HAL_DSI_Init+0x1e0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e088      	b.n	800350a <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003400:	f003 0314 	and.w	r3, r3, #20
 8003404:	2b14      	cmp	r3, #20
 8003406:	d1ea      	bne.n	80033de <HAL_DSI_Init+0x1c6>
 8003408:	e014      	b.n	8003434 <HAL_DSI_Init+0x21c>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800340a:	f7fe ffe9 	bl	80023e0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003418:	d904      	bls.n	8003424 <HAL_DSI_Init+0x20c>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e072      	b.n	800350a <HAL_DSI_Init+0x2f2>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800342c:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8003430:	2b94      	cmp	r3, #148	@ 0x94
 8003432:	d1ea      	bne.n	800340a <HAL_DSI_Init+0x1f2>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_DSI_Init+0x22a>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	e000      	b.n	8003444 <HAL_DSI_Init+0x22c>
 8003442:	2301      	movs	r3, #1
 8003444:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	4a32      	ldr	r2, [pc, #200]	@ (8003514 <HAL_DSI_Init+0x2fc>)
 800344a:	fb03 f202 	mul.w	r2, r3, r2
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	409a      	lsls	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800347a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	430a      	orrs	r2, r1
 800348e:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0203 	bic.w	r2, r2, #3
 80034de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3728      	adds	r7, #40	@ 0x28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	003d0900 	.word	0x003d0900

08003518 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	7c1b      	ldrb	r3, [r3, #16]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_DSI_ConfigErrorMonitor+0x16>
 800352a:	2302      	movs	r3, #2
 800352c:	e0ab      	b.n	8003686 <HAL_DSI_ConfigErrorMonitor+0x16e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2200      	movs	r2, #0
 800353a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8003568:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 800356c:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_DSI_ConfigErrorMonitor+0x76>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 800358a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <HAL_DSI_ConfigErrorMonitor+0x94>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_DSI_ConfigErrorMonitor+0xb2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0202 	orr.w	r2, r2, #2
 80035c6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f003 0310 	and.w	r3, r3, #16
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <HAL_DSI_ConfigErrorMonitor+0xd0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 020c 	orr.w	r2, r2, #12
 80035e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_DSI_ConfigErrorMonitor+0xee>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f042 0210 	orr.w	r2, r2, #16
 8003602:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d009      	beq.n	8003624 <HAL_DSI_ConfigErrorMonitor+0x10c>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0220 	orr.w	r2, r2, #32
 8003620:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <HAL_DSI_ConfigErrorMonitor+0x12a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800363e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d009      	beq.n	8003660 <HAL_DSI_ConfigErrorMonitor+0x148>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800365c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_DSI_ConfigErrorMonitor+0x166>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 800367a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00f      	beq.n	80036ca <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2201      	movs	r2, #1
 80036c0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f8ad 	bl	8003824 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00f      	beq.n	80036fa <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f89f 	bl	8003838 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 808c 	beq.w	800381c <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800370c:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003724:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f043 0202 	orr.w	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f043 0204 	orr.w	r2, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d005      	beq.n	800378a <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f043 0208 	orr.w	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f043 0210 	orr.w	r2, r3, #16
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f818 	bl	800384c <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	7c1b      	ldrb	r3, [r3, #16]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_DSI_SetGenericVCID+0x16>
 8003872:	2302      	movs	r3, #2
 8003874:	e016      	b.n	80038a4 <HAL_DSI_SetGenericVCID+0x44>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0203 	bic.w	r2, r2, #3
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	7c1b      	ldrb	r3, [r3, #16]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e0c5      	b.n	8003a52 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0203 	bic.w	r2, r2, #3
 8003912:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68d9      	ldr	r1, [r3, #12]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0207 	bic.w	r2, r2, #7
 8003934:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6959      	ldr	r1, [r3, #20]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	431a      	orrs	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020f 	bic.w	r2, r2, #15
 8003962:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6919      	ldr	r1, [r3, #16]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f022 020e 	bic.w	r2, r2, #14
 8003986:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	005a      	lsls	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	0c1b      	lsrs	r3, r3, #16
 80039ae:	041b      	lsls	r3, r3, #16
 80039b0:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	689a      	ldr	r2, [r3, #8]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80039d4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ee:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 0201 	orr.w	r2, r2, #1
 8003a32:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0202 	orr.w	r2, r2, #2
 8003a46:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7c1b      	ldrb	r3, [r3, #16]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_DSI_ConfigCommand+0x16>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e049      	b.n	8003b0a <HAL_DSI_ConfigCommand+0xaa>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b24      	ldr	r3, [pc, #144]	@ (8003b18 <HAL_DSI_ConfigCommand+0xb8>)
 8003a88:	400b      	ands	r3, r1
 8003a8a:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003a9a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003aa0:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8003aa6:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003aac:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003ab2:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8003ab8:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003abe:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003ac4:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8003aca:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003ad0:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8003ad6:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0202 	bic.w	r2, r2, #2
 8003aee:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	fef080ff 	.word	0xfef080ff

08003b1c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	7c1b      	ldrb	r3, [r3, #16]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_DSI_ConfigFlowControl+0x16>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e016      	b.n	8003b60 <HAL_DSI_ConfigFlowControl+0x44>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 021f 	bic.w	r2, r2, #31
 8003b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	7c1b      	ldrb	r3, [r3, #16]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_DSI_ConfigPhyTimer+0x16>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e058      	b.n	8003c34 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	4293      	cmp	r3, r2
 8003b92:	bf38      	it	cc
 8003b94:	4613      	movcc	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8003ba8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	041a      	lsls	r2, r3, #16
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8003bd6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003c10:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	021a      	lsls	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	7c1b      	ldrb	r3, [r3, #16]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d101      	bne.n	8003c56 <HAL_DSI_ConfigHostTimeouts+0x16>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e0b4      	b.n	8003dc0 <HAL_DSI_ConfigHostTimeouts+0x180>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003c6a:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	b292      	uxth	r2, r2
 8003c8c:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6812      	ldr	r2, [r2, #0]
 8003cf2:	0c1b      	lsrs	r3, r3, #16
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	0c1b      	lsrs	r3, r3, #16
 8003d1e:	041b      	lsls	r3, r3, #16
 8003d20:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8003d4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	0c1b      	lsrs	r3, r3, #16
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7c1b      	ldrb	r3, [r3, #16]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_DSI_SetLowPowerRXFilter+0x16>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e01b      	b.n	8003e1a <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8003df8:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	065a      	lsls	r2, r3, #25
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b089      	sub	sp, #36	@ 0x24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61fb      	str	r3, [r7, #28]
 8003e42:	e177      	b.n	8004134 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e44:	2201      	movs	r2, #1
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	f040 8166 	bne.w	800412e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d005      	beq.n	8003e7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d130      	bne.n	8003edc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	2203      	movs	r2, #3
 8003e86:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 0201 	and.w	r2, r3, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d017      	beq.n	8003f18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d123      	bne.n	8003f6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	08da      	lsrs	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3208      	adds	r2, #8
 8003f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	220f      	movs	r2, #15
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	08da      	lsrs	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3208      	adds	r2, #8
 8003f66:	69b9      	ldr	r1, [r7, #24]
 8003f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0203 	and.w	r2, r3, #3
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80c0 	beq.w	800412e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	4b66      	ldr	r3, [pc, #408]	@ (800414c <HAL_GPIO_Init+0x324>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	4a65      	ldr	r2, [pc, #404]	@ (800414c <HAL_GPIO_Init+0x324>)
 8003fb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003fbe:	4b63      	ldr	r3, [pc, #396]	@ (800414c <HAL_GPIO_Init+0x324>)
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fca:	4a61      	ldr	r2, [pc, #388]	@ (8004150 <HAL_GPIO_Init+0x328>)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	220f      	movs	r2, #15
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a58      	ldr	r2, [pc, #352]	@ (8004154 <HAL_GPIO_Init+0x32c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d037      	beq.n	8004066 <HAL_GPIO_Init+0x23e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a57      	ldr	r2, [pc, #348]	@ (8004158 <HAL_GPIO_Init+0x330>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d031      	beq.n	8004062 <HAL_GPIO_Init+0x23a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a56      	ldr	r2, [pc, #344]	@ (800415c <HAL_GPIO_Init+0x334>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d02b      	beq.n	800405e <HAL_GPIO_Init+0x236>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a55      	ldr	r2, [pc, #340]	@ (8004160 <HAL_GPIO_Init+0x338>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d025      	beq.n	800405a <HAL_GPIO_Init+0x232>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a54      	ldr	r2, [pc, #336]	@ (8004164 <HAL_GPIO_Init+0x33c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01f      	beq.n	8004056 <HAL_GPIO_Init+0x22e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a53      	ldr	r2, [pc, #332]	@ (8004168 <HAL_GPIO_Init+0x340>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d019      	beq.n	8004052 <HAL_GPIO_Init+0x22a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a52      	ldr	r2, [pc, #328]	@ (800416c <HAL_GPIO_Init+0x344>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_GPIO_Init+0x226>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a51      	ldr	r2, [pc, #324]	@ (8004170 <HAL_GPIO_Init+0x348>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00d      	beq.n	800404a <HAL_GPIO_Init+0x222>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a50      	ldr	r2, [pc, #320]	@ (8004174 <HAL_GPIO_Init+0x34c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <HAL_GPIO_Init+0x21e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a4f      	ldr	r2, [pc, #316]	@ (8004178 <HAL_GPIO_Init+0x350>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d101      	bne.n	8004042 <HAL_GPIO_Init+0x21a>
 800403e:	2309      	movs	r3, #9
 8004040:	e012      	b.n	8004068 <HAL_GPIO_Init+0x240>
 8004042:	230a      	movs	r3, #10
 8004044:	e010      	b.n	8004068 <HAL_GPIO_Init+0x240>
 8004046:	2308      	movs	r3, #8
 8004048:	e00e      	b.n	8004068 <HAL_GPIO_Init+0x240>
 800404a:	2307      	movs	r3, #7
 800404c:	e00c      	b.n	8004068 <HAL_GPIO_Init+0x240>
 800404e:	2306      	movs	r3, #6
 8004050:	e00a      	b.n	8004068 <HAL_GPIO_Init+0x240>
 8004052:	2305      	movs	r3, #5
 8004054:	e008      	b.n	8004068 <HAL_GPIO_Init+0x240>
 8004056:	2304      	movs	r3, #4
 8004058:	e006      	b.n	8004068 <HAL_GPIO_Init+0x240>
 800405a:	2303      	movs	r3, #3
 800405c:	e004      	b.n	8004068 <HAL_GPIO_Init+0x240>
 800405e:	2302      	movs	r3, #2
 8004060:	e002      	b.n	8004068 <HAL_GPIO_Init+0x240>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x240>
 8004066:	2300      	movs	r3, #0
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	f002 0203 	and.w	r2, r2, #3
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	4093      	lsls	r3, r2
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4313      	orrs	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004078:	4935      	ldr	r1, [pc, #212]	@ (8004150 <HAL_GPIO_Init+0x328>)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004086:	4b3d      	ldr	r3, [pc, #244]	@ (800417c <HAL_GPIO_Init+0x354>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040aa:	4a34      	ldr	r2, [pc, #208]	@ (800417c <HAL_GPIO_Init+0x354>)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b0:	4b32      	ldr	r3, [pc, #200]	@ (800417c <HAL_GPIO_Init+0x354>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	43db      	mvns	r3, r3
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	4013      	ands	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d4:	4a29      	ldr	r2, [pc, #164]	@ (800417c <HAL_GPIO_Init+0x354>)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040da:	4b28      	ldr	r3, [pc, #160]	@ (800417c <HAL_GPIO_Init+0x354>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040fe:	4a1f      	ldr	r2, [pc, #124]	@ (800417c <HAL_GPIO_Init+0x354>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004104:	4b1d      	ldr	r3, [pc, #116]	@ (800417c <HAL_GPIO_Init+0x354>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004128:	4a14      	ldr	r2, [pc, #80]	@ (800417c <HAL_GPIO_Init+0x354>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	3301      	adds	r3, #1
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	f67f ae84 	bls.w	8003e44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3724      	adds	r7, #36	@ 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800
 8004150:	40013800 	.word	0x40013800
 8004154:	40020000 	.word	0x40020000
 8004158:	40020400 	.word	0x40020400
 800415c:	40020800 	.word	0x40020800
 8004160:	40020c00 	.word	0x40020c00
 8004164:	40021000 	.word	0x40021000
 8004168:	40021400 	.word	0x40021400
 800416c:	40021800 	.word	0x40021800
 8004170:	40021c00 	.word	0x40021c00
 8004174:	40022000 	.word	0x40022000
 8004178:	40022400 	.word	0x40022400
 800417c:	40013c00 	.word	0x40013c00

08004180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	887b      	ldrh	r3, [r7, #2]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
 800419c:	e001      	b.n	80041a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
 80041bc:	4613      	mov	r3, r2
 80041be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c0:	787b      	ldrb	r3, [r7, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041cc:	e003      	b.n	80041d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ce:	887b      	ldrh	r3, [r7, #2]
 80041d0:	041a      	lsls	r2, r3, #16
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	619a      	str	r2, [r3, #24]
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af02      	add	r7, sp, #8
 80041e8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e059      	b.n	80042a8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f00b fcd4 	bl	800fbbc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2203      	movs	r2, #3
 8004218:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004222:	d102      	bne.n	800422a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f008 f8ff 	bl	800c432 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7c1a      	ldrb	r2, [r3, #16]
 800423c:	f88d 2000 	strb.w	r2, [sp]
 8004240:	3304      	adds	r3, #4
 8004242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004244:	f008 f880 	bl	800c348 <USB_CoreInit>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e026      	b.n	80042a8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f008 f8f7 	bl	800c454 <USB_SetCurrentMode>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e017      	b.n	80042a8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	7c1a      	ldrb	r2, [r3, #16]
 8004280:	f88d 2000 	strb.w	r2, [sp]
 8004284:	3304      	adds	r3, #4
 8004286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004288:	f008 fa9a 	bl	800c7c0 <USB_HostInit>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e004      	b.n	80042a8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b08b      	sub	sp, #44	@ 0x2c
 80042b4:	af04      	add	r7, sp, #16
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	4608      	mov	r0, r1
 80042ba:	4611      	mov	r1, r2
 80042bc:	461a      	mov	r2, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	70fb      	strb	r3, [r7, #3]
 80042c2:	460b      	mov	r3, r1
 80042c4:	70bb      	strb	r3, [r7, #2]
 80042c6:	4613      	mov	r3, r2
 80042c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80042ca:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80042cc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_HCD_HC_Init+0x2c>
 80042d8:	2302      	movs	r3, #2
 80042da:	e09d      	b.n	8004418 <HAL_HCD_HC_Init+0x168>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	3319      	adds	r3, #25
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	3314      	adds	r3, #20
 8004308:	787a      	ldrb	r2, [r7, #1]
 800430a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	3315      	adds	r3, #21
 800431c:	78fa      	ldrb	r2, [r7, #3]
 800431e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	3326      	adds	r3, #38	@ 0x26
 8004330:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004334:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	78bb      	ldrb	r3, [r7, #2]
 800433a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433e:	b2d8      	uxtb	r0, r3
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	3316      	adds	r3, #22
 800434e:	4602      	mov	r2, r0
 8004350:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004352:	78fb      	ldrb	r3, [r7, #3]
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fbc8 	bl	8004aec <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800435c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004360:	2b00      	cmp	r3, #0
 8004362:	da0a      	bge.n	800437a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	3317      	adds	r3, #23
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e009      	b.n	800438e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800437a:	78fa      	ldrb	r2, [r7, #3]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	1a9b      	subs	r3, r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	3317      	adds	r3, #23
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f008 fb6c 	bl	800ca70 <USB_GetHostSpeed>
 8004398:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800439a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10b      	bne.n	80043ba <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80043a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d107      	bne.n	80043ba <HAL_HCD_HC_Init+0x10a>
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d104      	bne.n	80043ba <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2bbc      	cmp	r3, #188	@ 0xbc
 80043b4:	d901      	bls.n	80043ba <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80043b6:	23bc      	movs	r3, #188	@ 0xbc
 80043b8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	3318      	adds	r3, #24
 80043ca:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80043ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	b298      	uxth	r0, r3
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	3328      	adds	r3, #40	@ 0x28
 80043e4:	4602      	mov	r2, r0
 80043e6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	787c      	ldrb	r4, [r7, #1]
 80043f2:	78ba      	ldrb	r2, [r7, #2]
 80043f4:	78f9      	ldrb	r1, [r7, #3]
 80043f6:	9302      	str	r3, [sp, #8]
 80043f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	4623      	mov	r3, r4
 8004406:	f008 fb5b 	bl	800cac0 <USB_HC_Init>
 800440a:	4603      	mov	r3, r0
 800440c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd90      	pop	{r4, r7, pc}

08004420 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_HCD_HC_Halt+0x1e>
 800443a:	2302      	movs	r3, #2
 800443c:	e00f      	b.n	800445e <HAL_HCD_HC_Halt+0x3e>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f008 feed 	bl	800d22e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	70fb      	strb	r3, [r7, #3]
 800447a:	460b      	mov	r3, r1
 800447c:	70bb      	strb	r3, [r7, #2]
 800447e:	4613      	mov	r3, r2
 8004480:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004482:	78fa      	ldrb	r2, [r7, #3]
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	3317      	adds	r3, #23
 8004492:	78ba      	ldrb	r2, [r7, #2]
 8004494:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	3326      	adds	r3, #38	@ 0x26
 80044a6:	787a      	ldrb	r2, [r7, #1]
 80044a8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80044aa:	7c3b      	ldrb	r3, [r7, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d114      	bne.n	80044da <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	332a      	adds	r3, #42	@ 0x2a
 80044c0:	2203      	movs	r2, #3
 80044c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	3319      	adds	r3, #25
 80044d4:	7f3a      	ldrb	r2, [r7, #28]
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	e009      	b.n	80044ee <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	332a      	adds	r3, #42	@ 0x2a
 80044ea:	2202      	movs	r2, #2
 80044ec:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80044ee:	787b      	ldrb	r3, [r7, #1]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	f200 8102 	bhi.w	80046fa <HAL_HCD_HC_SubmitRequest+0x292>
 80044f6:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <HAL_HCD_HC_SubmitRequest+0x94>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	080046e5 	.word	0x080046e5
 8004504:	080045d1 	.word	0x080045d1
 8004508:	0800465b 	.word	0x0800465b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800450c:	7c3b      	ldrb	r3, [r7, #16]
 800450e:	2b01      	cmp	r3, #1
 8004510:	f040 80f5 	bne.w	80046fe <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004514:	78bb      	ldrb	r3, [r7, #2]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d12d      	bne.n	8004576 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800451a:	8b3b      	ldrh	r3, [r7, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d109      	bne.n	8004534 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	333d      	adds	r3, #61	@ 0x3d
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	333d      	adds	r3, #61	@ 0x3d
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	6879      	ldr	r1, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	332a      	adds	r3, #42	@ 0x2a
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800455e:	e0ce      	b.n	80046fe <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004560:	78fa      	ldrb	r2, [r7, #3]
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	4613      	mov	r3, r2
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	1a9b      	subs	r3, r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	440b      	add	r3, r1
 800456e:	332a      	adds	r3, #42	@ 0x2a
 8004570:	2202      	movs	r2, #2
 8004572:	701a      	strb	r2, [r3, #0]
      break;
 8004574:	e0c3      	b.n	80046fe <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8004576:	78fa      	ldrb	r2, [r7, #3]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	1a9b      	subs	r3, r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	331a      	adds	r3, #26
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	f040 80b8 	bne.w	80046fe <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	333c      	adds	r3, #60	@ 0x3c
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	4613      	mov	r3, r2
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	440b      	add	r3, r1
 80045b2:	332a      	adds	r3, #42	@ 0x2a
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
      break;
 80045b8:	e0a1      	b.n	80046fe <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	332a      	adds	r3, #42	@ 0x2a
 80045ca:	2202      	movs	r2, #2
 80045cc:	701a      	strb	r2, [r3, #0]
      break;
 80045ce:	e096      	b.n	80046fe <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80045d0:	78bb      	ldrb	r3, [r7, #2]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d120      	bne.n	8004618 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	333d      	adds	r3, #61	@ 0x3d
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	332a      	adds	r3, #42	@ 0x2a
 80045fc:	2200      	movs	r2, #0
 80045fe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004600:	e07e      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	332a      	adds	r3, #42	@ 0x2a
 8004612:	2202      	movs	r2, #2
 8004614:	701a      	strb	r2, [r3, #0]
      break;
 8004616:	e073      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004618:	78fa      	ldrb	r2, [r7, #3]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	333c      	adds	r3, #60	@ 0x3c
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10a      	bne.n	8004644 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	332a      	adds	r3, #42	@ 0x2a
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
      break;
 8004642:	e05d      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	332a      	adds	r3, #42	@ 0x2a
 8004654:	2202      	movs	r2, #2
 8004656:	701a      	strb	r2, [r3, #0]
      break;
 8004658:	e052      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800465a:	78bb      	ldrb	r3, [r7, #2]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d120      	bne.n	80046a2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	333d      	adds	r3, #61	@ 0x3d
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10a      	bne.n	800468c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004676:	78fa      	ldrb	r2, [r7, #3]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	1a9b      	subs	r3, r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	332a      	adds	r3, #42	@ 0x2a
 8004686:	2200      	movs	r2, #0
 8004688:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800468a:	e039      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800468c:	78fa      	ldrb	r2, [r7, #3]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	332a      	adds	r3, #42	@ 0x2a
 800469c:	2202      	movs	r2, #2
 800469e:	701a      	strb	r2, [r3, #0]
      break;
 80046a0:	e02e      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	333c      	adds	r3, #60	@ 0x3c
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	332a      	adds	r3, #42	@ 0x2a
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
      break;
 80046cc:	e018      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	332a      	adds	r3, #42	@ 0x2a
 80046de:	2202      	movs	r2, #2
 80046e0:	701a      	strb	r2, [r3, #0]
      break;
 80046e2:	e00d      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046e4:	78fa      	ldrb	r2, [r7, #3]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	4613      	mov	r3, r2
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	332a      	adds	r3, #42	@ 0x2a
 80046f4:	2200      	movs	r2, #0
 80046f6:	701a      	strb	r2, [r3, #0]
      break;
 80046f8:	e002      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80046fa:	bf00      	nop
 80046fc:	e000      	b.n	8004700 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80046fe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	332c      	adds	r3, #44	@ 0x2c
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	8b39      	ldrh	r1, [r7, #24]
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4403      	add	r3, r0
 8004724:	3334      	adds	r3, #52	@ 0x34
 8004726:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334c      	adds	r3, #76	@ 0x4c
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	3338      	adds	r3, #56	@ 0x38
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	3315      	adds	r3, #21
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	334d      	adds	r3, #77	@ 0x4d
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	3310      	adds	r3, #16
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4413      	add	r3, r2
 800478c:	1d19      	adds	r1, r3, #4
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	799b      	ldrb	r3, [r3, #6]
 8004792:	461a      	mov	r2, r3
 8004794:	f008 fac0 	bl	800cd18 <USB_HC_StartXfer>
 8004798:	4603      	mov	r3, r0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop

080047a4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f007 ffc0 	bl	800c740 <USB_GetMode>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	f040 80fb 	bne.w	80049be <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f007 ff83 	bl	800c6d8 <USB_ReadInterrupts>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80f1 	beq.w	80049bc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f007 ff7a 	bl	800c6d8 <USB_ReadInterrupts>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ee:	d104      	bne.n	80047fa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80047f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f007 ff6a 	bl	800c6d8 <USB_ReadInterrupts>
 8004804:	4603      	mov	r3, r0
 8004806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800480a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800480e:	d104      	bne.n	800481a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004818:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f007 ff5a 	bl	800c6d8 <USB_ReadInterrupts>
 8004824:	4603      	mov	r3, r0
 8004826:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800482a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800482e:	d104      	bne.n	800483a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004838:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f007 ff4a 	bl	800c6d8 <USB_ReadInterrupts>
 8004844:	4603      	mov	r3, r0
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d103      	bne.n	8004856 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2202      	movs	r2, #2
 8004854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f007 ff3c 	bl	800c6d8 <USB_ReadInterrupts>
 8004860:	4603      	mov	r3, r0
 8004862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800486a:	d120      	bne.n	80048ae <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004874:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d113      	bne.n	80048ae <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004886:	2110      	movs	r1, #16
 8004888:	6938      	ldr	r0, [r7, #16]
 800488a:	f007 fe2f 	bl	800c4ec <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800488e:	6938      	ldr	r0, [r7, #16]
 8004890:	f007 fe5e 	bl	800c550 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7a5b      	ldrb	r3, [r3, #9]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d105      	bne.n	80048a8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2101      	movs	r1, #1
 80048a2:	4618      	mov	r0, r3
 80048a4:	f008 f844 	bl	800c930 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f00b fa05 	bl	800fcb8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f007 ff10 	bl	800c6d8 <USB_ReadInterrupts>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048c2:	d102      	bne.n	80048ca <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 fd4d 	bl	8006364 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f007 ff02 	bl	800c6d8 <USB_ReadInterrupts>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b08      	cmp	r3, #8
 80048dc:	d106      	bne.n	80048ec <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f00b f9ce 	bl	800fc80 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2208      	movs	r2, #8
 80048ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f007 fef1 	bl	800c6d8 <USB_ReadInterrupts>
 80048f6:	4603      	mov	r3, r0
 80048f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004900:	d139      	bne.n	8004976 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f008 fc80 	bl	800d20c <USB_HC_ReadInterrupt>
 800490c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e025      	b.n	8004960 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d018      	beq.n	800495a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800493a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800493e:	d106      	bne.n	800494e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f905 	bl	8004b56 <HCD_HC_IN_IRQHandler>
 800494c:	e005      	b.n	800495a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 ff67 	bl	8005828 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	3301      	adds	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	795b      	ldrb	r3, [r3, #5]
 8004964:	461a      	mov	r2, r3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4293      	cmp	r3, r2
 800496a:	d3d3      	bcc.n	8004914 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f007 feac 	bl	800c6d8 <USB_ReadInterrupts>
 8004980:	4603      	mov	r3, r0
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b10      	cmp	r3, #16
 8004988:	d101      	bne.n	800498e <HAL_HCD_IRQHandler+0x1ea>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <HAL_HCD_IRQHandler+0x1ec>
 800498e:	2300      	movs	r3, #0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d014      	beq.n	80049be <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0210 	bic.w	r2, r2, #16
 80049a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f001 fbfe 	bl	80061a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699a      	ldr	r2, [r3, #24]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0210 	orr.w	r2, r2, #16
 80049b8:	619a      	str	r2, [r3, #24]
 80049ba:	e000      	b.n	80049be <HAL_HCD_IRQHandler+0x21a>
      return;
 80049bc:	bf00      	nop
    }
  }
}
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_HCD_Start+0x16>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e013      	b.n	8004a02 <HAL_HCD_Start+0x3e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2101      	movs	r1, #1
 80049e8:	4618      	mov	r0, r3
 80049ea:	f008 f808 	bl	800c9fe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f007 fd0c 	bl	800c410 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_HCD_Stop+0x16>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e00d      	b.n	8004a3c <HAL_HCD_Stop+0x32>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f008 fd5b 	bl	800d4e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f007 ffaa 	bl	800c9aa <USB_ResetPort>
 8004a56:	4603      	mov	r3, r0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	334c      	adds	r3, #76	@ 0x4c
 8004a7c:	781b      	ldrb	r3, [r3, #0]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	460b      	mov	r3, r1
 8004a94:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3338      	adds	r3, #56	@ 0x38
 8004aa6:	681b      	ldr	r3, [r3, #0]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f007 ffec 	bl	800ca9e <USB_GetCurrentFrame>
 8004ac6:	4603      	mov	r3, r0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f007 ffc7 	bl	800ca70 <USB_GetHostSpeed>
 8004ae2:	4603      	mov	r3, r0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	460b      	mov	r3, r1
 8004af6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	4613      	mov	r3, r2
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	331a      	adds	r3, #26
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004b0c:	78fa      	ldrb	r2, [r7, #3]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	1a9b      	subs	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	331b      	adds	r3, #27
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	3325      	adds	r3, #37	@ 0x25
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	3324      	adds	r3, #36	@ 0x24
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	78fa      	ldrb	r2, [r7, #3]
 8004b72:	4611      	mov	r1, r2
 8004b74:	4618      	mov	r0, r3
 8004b76:	f007 fdc2 	bl	800c6fe <USB_ReadChInterrupts>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d11a      	bne.n	8004bba <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b90:	461a      	mov	r2, r3
 8004b92:	2304      	movs	r3, #4
 8004b94:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004b96:	78fa      	ldrb	r2, [r7, #3]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	334d      	adds	r3, #77	@ 0x4d
 8004ba6:	2207      	movs	r2, #7
 8004ba8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f008 fb3b 	bl	800d22e <USB_HC_Halt>
 8004bb8:	e09e      	b.n	8004cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f007 fd9b 	bl	800c6fe <USB_ReadChInterrupts>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bd2:	d11b      	bne.n	8004c0c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be0:	461a      	mov	r2, r3
 8004be2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004be6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	334d      	adds	r3, #77	@ 0x4d
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	4611      	mov	r1, r2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f008 fb12 	bl	800d22e <USB_HC_Halt>
 8004c0a:	e075      	b.n	8004cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	78fa      	ldrb	r2, [r7, #3]
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f007 fd72 	bl	800c6fe <USB_ReadChInterrupts>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d11a      	bne.n	8004c5a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c30:	461a      	mov	r2, r3
 8004c32:	2308      	movs	r3, #8
 8004c34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	334d      	adds	r3, #77	@ 0x4d
 8004c46:	2206      	movs	r2, #6
 8004c48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	4611      	mov	r1, r2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f008 faeb 	bl	800d22e <USB_HC_Halt>
 8004c58:	e04e      	b.n	8004cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f007 fd4b 	bl	800c6fe <USB_ReadChInterrupts>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c72:	d11b      	bne.n	8004cac <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c80:	461a      	mov	r2, r3
 8004c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	334d      	adds	r3, #77	@ 0x4d
 8004c98:	2209      	movs	r2, #9
 8004c9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f008 fac2 	bl	800d22e <USB_HC_Halt>
 8004caa:	e025      	b.n	8004cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f007 fd22 	bl	800c6fe <USB_ReadChInterrupts>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc0:	2b80      	cmp	r3, #128	@ 0x80
 8004cc2:	d119      	bne.n	8004cf8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	2380      	movs	r3, #128	@ 0x80
 8004cd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	334d      	adds	r3, #77	@ 0x4d
 8004ce6:	2207      	movs	r2, #7
 8004ce8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f008 fa9b 	bl	800d22e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f007 fcfc 	bl	800c6fe <USB_ReadChInterrupts>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d10:	d112      	bne.n	8004d38 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	78fa      	ldrb	r2, [r7, #3]
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f008 fa87 	bl	800d22e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d32:	6093      	str	r3, [r2, #8]
 8004d34:	f000 bd75 	b.w	8005822 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f007 fcdc 	bl	800c6fe <USB_ReadChInterrupts>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	f040 8128 	bne.w	8004fa2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2320      	movs	r3, #32
 8004d62:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	331b      	adds	r3, #27
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d119      	bne.n	8004dae <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	331b      	adds	r3, #27
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dac:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	799b      	ldrb	r3, [r3, #6]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d01b      	beq.n	8004dee <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	3330      	adds	r3, #48	@ 0x30
 8004dc6:	6819      	ldr	r1, [r3, #0]
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	1ac9      	subs	r1, r1, r3
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	1a9b      	subs	r3, r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4403      	add	r3, r0
 8004dea:	3338      	adds	r3, #56	@ 0x38
 8004dec:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004dee:	78fa      	ldrb	r2, [r7, #3]
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	4613      	mov	r3, r2
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	1a9b      	subs	r3, r3, r2
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	440b      	add	r3, r1
 8004dfc:	334d      	adds	r3, #77	@ 0x4d
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	6879      	ldr	r1, [r7, #4]
 8004e06:	4613      	mov	r3, r2
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	440b      	add	r3, r1
 8004e10:	3344      	adds	r3, #68	@ 0x44
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e22:	461a      	mov	r2, r3
 8004e24:	2301      	movs	r3, #1
 8004e26:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	1a9b      	subs	r3, r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3326      	adds	r3, #38	@ 0x26
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004e3e:	78fa      	ldrb	r2, [r7, #3]
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	1a9b      	subs	r3, r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3326      	adds	r3, #38	@ 0x26
 8004e4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d110      	bne.n	8004e76 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f008 f9e6 	bl	800d22e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e6e:	461a      	mov	r2, r3
 8004e70:	2310      	movs	r3, #16
 8004e72:	6093      	str	r3, [r2, #8]
 8004e74:	e03d      	b.n	8004ef2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004e76:	78fa      	ldrb	r2, [r7, #3]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3326      	adds	r3, #38	@ 0x26
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d00a      	beq.n	8004ea2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	1a9b      	subs	r3, r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	3326      	adds	r3, #38	@ 0x26
 8004e9c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d127      	bne.n	8004ef2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ebc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ec0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	334c      	adds	r3, #76	@ 0x4c
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	334c      	adds	r3, #76	@ 0x4c
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	4619      	mov	r1, r3
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f00a fef1 	bl	800fcd4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	799b      	ldrb	r3, [r3, #6]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d13b      	bne.n	8004f72 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004efa:	78fa      	ldrb	r2, [r7, #3]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	011b      	lsls	r3, r3, #4
 8004f02:	1a9b      	subs	r3, r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	3338      	adds	r3, #56	@ 0x38
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4403      	add	r3, r0
 8004f1a:	3328      	adds	r3, #40	@ 0x28
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	440b      	add	r3, r1
 8004f20:	1e59      	subs	r1, r3, #1
 8004f22:	78fa      	ldrb	r2, [r7, #3]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	1a9b      	subs	r3, r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4403      	add	r3, r0
 8004f30:	3328      	adds	r3, #40	@ 0x28
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 8470 	beq.w	8005822 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004f42:	78fa      	ldrb	r2, [r7, #3]
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	333c      	adds	r3, #60	@ 0x3c
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	78fa      	ldrb	r2, [r7, #3]
 8004f56:	f083 0301 	eor.w	r3, r3, #1
 8004f5a:	b2d8      	uxtb	r0, r3
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	333c      	adds	r3, #60	@ 0x3c
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	f000 bc58 	b.w	8005822 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	333c      	adds	r3, #60	@ 0x3c
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2d8      	uxtb	r0, r3
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	333c      	adds	r3, #60	@ 0x3c
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	f000 bc40 	b.w	8005822 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	78fa      	ldrb	r2, [r7, #3]
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f007 fba7 	bl	800c6fe <USB_ReadChInterrupts>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d131      	bne.n	800501e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	2320      	movs	r3, #32
 8004fca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004fcc:	78fa      	ldrb	r2, [r7, #3]
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	331a      	adds	r3, #26
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	f040 841f 	bne.w	8005822 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	331b      	adds	r3, #27
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	334d      	adds	r3, #77	@ 0x4d
 8005008:	2203      	movs	r2, #3
 800500a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f008 f90a 	bl	800d22e <USB_HC_Halt>
 800501a:	f000 bc02 	b.w	8005822 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	4611      	mov	r1, r2
 8005026:	4618      	mov	r0, r3
 8005028:	f007 fb69 	bl	800c6fe <USB_ReadChInterrupts>
 800502c:	4603      	mov	r3, r0
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b02      	cmp	r3, #2
 8005034:	f040 8305 	bne.w	8005642 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005044:	461a      	mov	r2, r3
 8005046:	2302      	movs	r3, #2
 8005048:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800504a:	78fa      	ldrb	r2, [r7, #3]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	1a9b      	subs	r3, r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	334d      	adds	r3, #77	@ 0x4d
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d114      	bne.n	800508a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	1a9b      	subs	r3, r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	334d      	adds	r3, #77	@ 0x4d
 8005070:	2202      	movs	r2, #2
 8005072:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	440b      	add	r3, r1
 8005082:	334c      	adds	r3, #76	@ 0x4c
 8005084:	2201      	movs	r2, #1
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e2cc      	b.n	8005624 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800508a:	78fa      	ldrb	r2, [r7, #3]
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	334d      	adds	r3, #77	@ 0x4d
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b06      	cmp	r3, #6
 800509e:	d114      	bne.n	80050ca <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050a0:	78fa      	ldrb	r2, [r7, #3]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	1a9b      	subs	r3, r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	334d      	adds	r3, #77	@ 0x4d
 80050b0:	2202      	movs	r2, #2
 80050b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80050b4:	78fa      	ldrb	r2, [r7, #3]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	334c      	adds	r3, #76	@ 0x4c
 80050c4:	2205      	movs	r2, #5
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	e2ac      	b.n	8005624 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	334d      	adds	r3, #77	@ 0x4d
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b07      	cmp	r3, #7
 80050de:	d00b      	beq.n	80050f8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	334d      	adds	r3, #77	@ 0x4d
 80050f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80050f2:	2b09      	cmp	r3, #9
 80050f4:	f040 80a6 	bne.w	8005244 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	334d      	adds	r3, #77	@ 0x4d
 8005108:	2202      	movs	r2, #2
 800510a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800510c:	78fa      	ldrb	r2, [r7, #3]
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	3344      	adds	r3, #68	@ 0x44
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	1c59      	adds	r1, r3, #1
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4403      	add	r3, r0
 800512c:	3344      	adds	r3, #68	@ 0x44
 800512e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005130:	78fa      	ldrb	r2, [r7, #3]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	3344      	adds	r3, #68	@ 0x44
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d943      	bls.n	80051ce <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	440b      	add	r3, r1
 8005154:	3344      	adds	r3, #68	@ 0x44
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800515a:	78fa      	ldrb	r2, [r7, #3]
 800515c:	6879      	ldr	r1, [r7, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	440b      	add	r3, r1
 8005168:	331a      	adds	r3, #26
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d123      	bne.n	80051b8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005170:	78fa      	ldrb	r2, [r7, #3]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	331b      	adds	r3, #27
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005184:	78fa      	ldrb	r2, [r7, #3]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	331c      	adds	r3, #28
 8005194:	2200      	movs	r2, #0
 8005196:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	1a9b      	subs	r3, r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	440b      	add	r3, r1
 80051c6:	334c      	adds	r3, #76	@ 0x4c
 80051c8:	2204      	movs	r2, #4
 80051ca:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051cc:	e229      	b.n	8005622 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	334c      	adds	r3, #76	@ 0x4c
 80051de:	2202      	movs	r2, #2
 80051e0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	1a9b      	subs	r3, r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	3326      	adds	r3, #38	@ 0x26
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00b      	beq.n	8005210 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	3326      	adds	r3, #38	@ 0x26
 8005208:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800520a:	2b02      	cmp	r3, #2
 800520c:	f040 8209 	bne.w	8005622 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4413      	add	r3, r2
 8005218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005226:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800522e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	4413      	add	r3, r2
 8005238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800523c:	461a      	mov	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005242:	e1ee      	b.n	8005622 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	334d      	adds	r3, #77	@ 0x4d
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b05      	cmp	r3, #5
 8005258:	f040 80c8 	bne.w	80053ec <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	1a9b      	subs	r3, r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	334d      	adds	r3, #77	@ 0x4d
 800526c:	2202      	movs	r2, #2
 800526e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005270:	78fa      	ldrb	r2, [r7, #3]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	1a9b      	subs	r3, r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	331b      	adds	r3, #27
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b01      	cmp	r3, #1
 8005284:	f040 81ce 	bne.w	8005624 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	3326      	adds	r3, #38	@ 0x26
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b03      	cmp	r3, #3
 800529c:	d16b      	bne.n	8005376 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	3348      	adds	r3, #72	@ 0x48
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	1c59      	adds	r1, r3, #1
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4403      	add	r3, r0
 80052be:	3348      	adds	r3, #72	@ 0x48
 80052c0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	3348      	adds	r3, #72	@ 0x48
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d943      	bls.n	8005360 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80052d8:	78fa      	ldrb	r2, [r7, #3]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4613      	mov	r3, r2
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	1a9b      	subs	r3, r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	3348      	adds	r3, #72	@ 0x48
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	331b      	adds	r3, #27
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	4613      	mov	r3, r2
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	1a9b      	subs	r3, r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	3344      	adds	r3, #68	@ 0x44
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d809      	bhi.n	800532a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	6879      	ldr	r1, [r7, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	331c      	adds	r3, #28
 8005326:	2201      	movs	r2, #1
 8005328:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800532a:	78fb      	ldrb	r3, [r7, #3]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	4413      	add	r3, r2
 8005332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	440a      	add	r2, r1
 8005340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005348:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800534a:	78fa      	ldrb	r2, [r7, #3]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	1a9b      	subs	r3, r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	334c      	adds	r3, #76	@ 0x4c
 800535a:	2204      	movs	r2, #4
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e014      	b.n	800538a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005360:	78fa      	ldrb	r2, [r7, #3]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	334c      	adds	r3, #76	@ 0x4c
 8005370:	2202      	movs	r2, #2
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e009      	b.n	800538a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	334c      	adds	r3, #76	@ 0x4c
 8005386:	2202      	movs	r2, #2
 8005388:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	3326      	adds	r3, #38	@ 0x26
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3326      	adds	r3, #38	@ 0x26
 80053b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	f040 8136 	bne.w	8005624 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e4:	461a      	mov	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e11b      	b.n	8005624 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	334d      	adds	r3, #77	@ 0x4d
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	f040 8081 	bne.w	8005506 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005404:	78fa      	ldrb	r2, [r7, #3]
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	440b      	add	r3, r1
 8005412:	334d      	adds	r3, #77	@ 0x4d
 8005414:	2202      	movs	r2, #2
 8005416:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	6879      	ldr	r1, [r7, #4]
 800541c:	4613      	mov	r3, r2
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	1a9b      	subs	r3, r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	440b      	add	r3, r1
 8005426:	331b      	adds	r3, #27
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b01      	cmp	r3, #1
 800542c:	f040 80fa 	bne.w	8005624 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	334c      	adds	r3, #76	@ 0x4c
 8005440:	2202      	movs	r2, #2
 8005442:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	0151      	lsls	r1, r2, #5
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	440a      	add	r2, r1
 800545a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800545e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005462:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	0151      	lsls	r1, r2, #5
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	440a      	add	r2, r1
 800547a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800547e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005482:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4413      	add	r3, r2
 800548c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	78fa      	ldrb	r2, [r7, #3]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	440a      	add	r2, r1
 800549a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800549e:	f023 0320 	bic.w	r3, r3, #32
 80054a2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80054a4:	78fa      	ldrb	r2, [r7, #3]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	3326      	adds	r3, #38	@ 0x26
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80054ba:	78fa      	ldrb	r2, [r7, #3]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	3326      	adds	r3, #38	@ 0x26
 80054ca:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	f040 80a9 	bne.w	8005624 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	015a      	lsls	r2, r3, #5
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	4413      	add	r3, r2
 80054da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054e8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054f0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80054f2:	78fb      	ldrb	r3, [r7, #3]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054fe:	461a      	mov	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	e08e      	b.n	8005624 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005506:	78fa      	ldrb	r2, [r7, #3]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	1a9b      	subs	r3, r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	440b      	add	r3, r1
 8005514:	334d      	adds	r3, #77	@ 0x4d
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b04      	cmp	r3, #4
 800551a:	d143      	bne.n	80055a4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800551c:	78fa      	ldrb	r2, [r7, #3]
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	334d      	adds	r3, #77	@ 0x4d
 800552c:	2202      	movs	r2, #2
 800552e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005530:	78fa      	ldrb	r2, [r7, #3]
 8005532:	6879      	ldr	r1, [r7, #4]
 8005534:	4613      	mov	r3, r2
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	1a9b      	subs	r3, r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	334c      	adds	r3, #76	@ 0x4c
 8005540:	2202      	movs	r2, #2
 8005542:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	3326      	adds	r3, #38	@ 0x26
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00a      	beq.n	8005570 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	1a9b      	subs	r3, r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	3326      	adds	r3, #38	@ 0x26
 800556a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800556c:	2b02      	cmp	r3, #2
 800556e:	d159      	bne.n	8005624 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005570:	78fb      	ldrb	r3, [r7, #3]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005586:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800558e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800559c:	461a      	mov	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e03f      	b.n	8005624 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80055a4:	78fa      	ldrb	r2, [r7, #3]
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	334d      	adds	r3, #77	@ 0x4d
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d126      	bne.n	8005608 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055ba:	78fa      	ldrb	r2, [r7, #3]
 80055bc:	6879      	ldr	r1, [r7, #4]
 80055be:	4613      	mov	r3, r2
 80055c0:	011b      	lsls	r3, r3, #4
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	440b      	add	r3, r1
 80055c8:	334d      	adds	r3, #77	@ 0x4d
 80055ca:	2202      	movs	r2, #2
 80055cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	3344      	adds	r3, #68	@ 0x44
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	1c59      	adds	r1, r3, #1
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	1a9b      	subs	r3, r3, r2
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4403      	add	r3, r0
 80055ee:	3344      	adds	r3, #68	@ 0x44
 80055f0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80055f2:	78fa      	ldrb	r2, [r7, #3]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	440b      	add	r3, r1
 8005600:	334c      	adds	r3, #76	@ 0x4c
 8005602:	2204      	movs	r2, #4
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e00d      	b.n	8005624 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	334d      	adds	r3, #77	@ 0x4d
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b02      	cmp	r3, #2
 800561c:	f000 8100 	beq.w	8005820 <HCD_HC_IN_IRQHandler+0xcca>
 8005620:	e000      	b.n	8005624 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005622:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	334c      	adds	r3, #76	@ 0x4c
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f00a fb4a 	bl	800fcd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005640:	e0ef      	b.n	8005822 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	4611      	mov	r1, r2
 800564a:	4618      	mov	r0, r3
 800564c:	f007 f857 	bl	800c6fe <USB_ReadChInterrupts>
 8005650:	4603      	mov	r3, r0
 8005652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005656:	2b40      	cmp	r3, #64	@ 0x40
 8005658:	d12f      	bne.n	80056ba <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005666:	461a      	mov	r2, r3
 8005668:	2340      	movs	r3, #64	@ 0x40
 800566a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	6879      	ldr	r1, [r7, #4]
 8005670:	4613      	mov	r3, r2
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	334d      	adds	r3, #77	@ 0x4d
 800567c:	2205      	movs	r2, #5
 800567e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005680:	78fa      	ldrb	r2, [r7, #3]
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	331a      	adds	r3, #26
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	1a9b      	subs	r3, r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	3344      	adds	r3, #68	@ 0x44
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	4611      	mov	r1, r2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f007 fdbb 	bl	800d22e <USB_HC_Halt>
 80056b8:	e0b3      	b.n	8005822 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	4611      	mov	r1, r2
 80056c2:	4618      	mov	r0, r3
 80056c4:	f007 f81b 	bl	800c6fe <USB_ReadChInterrupts>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	f040 80a7 	bne.w	8005822 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	3326      	adds	r3, #38	@ 0x26
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d11b      	bne.n	8005722 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	440b      	add	r3, r1
 80056f8:	3344      	adds	r3, #68	@ 0x44
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	334d      	adds	r3, #77	@ 0x4d
 800570e:	2204      	movs	r2, #4
 8005710:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f007 fd87 	bl	800d22e <USB_HC_Halt>
 8005720:	e03f      	b.n	80057a2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005722:	78fa      	ldrb	r2, [r7, #3]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	3326      	adds	r3, #38	@ 0x26
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	3326      	adds	r3, #38	@ 0x26
 8005748:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800574a:	2b02      	cmp	r3, #2
 800574c:	d129      	bne.n	80057a2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800574e:	78fa      	ldrb	r2, [r7, #3]
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	1a9b      	subs	r3, r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	3344      	adds	r3, #68	@ 0x44
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	799b      	ldrb	r3, [r3, #6]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HCD_HC_IN_IRQHandler+0xc2a>
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	331b      	adds	r3, #27
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d110      	bne.n	80057a2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	334d      	adds	r3, #77	@ 0x4d
 8005790:	2204      	movs	r2, #4
 8005792:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	4611      	mov	r1, r2
 800579c:	4618      	mov	r0, r3
 800579e:	f007 fd46 	bl	800d22e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	331b      	adds	r3, #27
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d129      	bne.n	800580c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80057b8:	78fa      	ldrb	r2, [r7, #3]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	331b      	adds	r3, #27
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80057cc:	78fb      	ldrb	r3, [r7, #3]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ea:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	78fa      	ldrb	r2, [r7, #3]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	440a      	add	r2, r1
 8005802:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005806:	f043 0320 	orr.w	r3, r3, #32
 800580a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	4413      	add	r3, r2
 8005814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005818:	461a      	mov	r2, r3
 800581a:	2310      	movs	r3, #16
 800581c:	6093      	str	r3, [r2, #8]
 800581e:	e000      	b.n	8005822 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005820:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	78fa      	ldrb	r2, [r7, #3]
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f006 ff59 	bl	800c6fe <USB_ReadChInterrupts>
 800584c:	4603      	mov	r3, r0
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b04      	cmp	r3, #4
 8005854:	d11b      	bne.n	800588e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005856:	78fb      	ldrb	r3, [r7, #3]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	4413      	add	r3, r2
 800585e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005862:	461a      	mov	r2, r3
 8005864:	2304      	movs	r3, #4
 8005866:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005868:	78fa      	ldrb	r2, [r7, #3]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	440b      	add	r3, r1
 8005876:	334d      	adds	r3, #77	@ 0x4d
 8005878:	2207      	movs	r2, #7
 800587a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	4611      	mov	r1, r2
 8005884:	4618      	mov	r0, r3
 8005886:	f007 fcd2 	bl	800d22e <USB_HC_Halt>
 800588a:	f000 bc89 	b.w	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f006 ff31 	bl	800c6fe <USB_ReadChInterrupts>
 800589c:	4603      	mov	r3, r0
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	f040 8082 	bne.w	80059ac <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b4:	461a      	mov	r2, r3
 80058b6:	2320      	movs	r3, #32
 80058b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80058ba:	78fa      	ldrb	r2, [r7, #3]
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3319      	adds	r3, #25
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d124      	bne.n	800591a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80058d0:	78fa      	ldrb	r2, [r7, #3]
 80058d2:	6879      	ldr	r1, [r7, #4]
 80058d4:	4613      	mov	r3, r2
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	3319      	adds	r3, #25
 80058e0:	2200      	movs	r2, #0
 80058e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	1a9b      	subs	r3, r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	334c      	adds	r3, #76	@ 0x4c
 80058f4:	2202      	movs	r2, #2
 80058f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80058f8:	78fa      	ldrb	r2, [r7, #3]
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	1a9b      	subs	r3, r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	440b      	add	r3, r1
 8005906:	334d      	adds	r3, #77	@ 0x4d
 8005908:	2203      	movs	r2, #3
 800590a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f007 fc8a 	bl	800d22e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	331a      	adds	r3, #26
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b01      	cmp	r3, #1
 800592e:	f040 8437 	bne.w	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
 8005932:	78fa      	ldrb	r2, [r7, #3]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	331b      	adds	r3, #27
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f040 842b 	bne.w	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800594a:	78fa      	ldrb	r2, [r7, #3]
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	1a9b      	subs	r3, r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	3326      	adds	r3, #38	@ 0x26
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d009      	beq.n	8005974 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	6879      	ldr	r1, [r7, #4]
 8005964:	4613      	mov	r3, r2
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	440b      	add	r3, r1
 800596e:	331b      	adds	r3, #27
 8005970:	2201      	movs	r2, #1
 8005972:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	334d      	adds	r3, #77	@ 0x4d
 8005984:	2203      	movs	r2, #3
 8005986:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	78fa      	ldrb	r2, [r7, #3]
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f007 fc4c 	bl	800d22e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005996:	78fa      	ldrb	r2, [r7, #3]
 8005998:	6879      	ldr	r1, [r7, #4]
 800599a:	4613      	mov	r3, r2
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	440b      	add	r3, r1
 80059a4:	3344      	adds	r3, #68	@ 0x44
 80059a6:	2200      	movs	r2, #0
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e3f9      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	78fa      	ldrb	r2, [r7, #3]
 80059b2:	4611      	mov	r1, r2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f006 fea2 	bl	800c6fe <USB_ReadChInterrupts>
 80059ba:	4603      	mov	r3, r0
 80059bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059c4:	d111      	bne.n	80059ea <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059d2:	461a      	mov	r2, r3
 80059d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	78fa      	ldrb	r2, [r7, #3]
 80059e0:	4611      	mov	r1, r2
 80059e2:	4618      	mov	r0, r3
 80059e4:	f007 fc23 	bl	800d22e <USB_HC_Halt>
 80059e8:	e3da      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	78fa      	ldrb	r2, [r7, #3]
 80059f0:	4611      	mov	r1, r2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f006 fe83 	bl	800c6fe <USB_ReadChInterrupts>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d168      	bne.n	8005ad4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005a02:	78fa      	ldrb	r2, [r7, #3]
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	011b      	lsls	r3, r3, #4
 8005a0a:	1a9b      	subs	r3, r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	3344      	adds	r3, #68	@ 0x44
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	78fa      	ldrb	r2, [r7, #3]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f006 fe6d 	bl	800c6fe <USB_ReadChInterrupts>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b40      	cmp	r3, #64	@ 0x40
 8005a2c:	d112      	bne.n	8005a54 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3319      	adds	r3, #25
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005a42:	78fb      	ldrb	r3, [r7, #3]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2340      	movs	r3, #64	@ 0x40
 8005a52:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	331b      	adds	r3, #27
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d019      	beq.n	8005a9e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	331b      	adds	r3, #27
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005a7e:	78fb      	ldrb	r3, [r7, #3]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a9c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aaa:	461a      	mov	r2, r3
 8005aac:	2301      	movs	r3, #1
 8005aae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005ab0:	78fa      	ldrb	r2, [r7, #3]
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	1a9b      	subs	r3, r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	440b      	add	r3, r1
 8005abe:	334d      	adds	r3, #77	@ 0x4d
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f007 fbae 	bl	800d22e <USB_HC_Halt>
 8005ad2:	e365      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	78fa      	ldrb	r2, [r7, #3]
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f006 fe0e 	bl	800c6fe <USB_ReadChInterrupts>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae8:	2b40      	cmp	r3, #64	@ 0x40
 8005aea:	d139      	bne.n	8005b60 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	4613      	mov	r3, r2
 8005af2:	011b      	lsls	r3, r3, #4
 8005af4:	1a9b      	subs	r3, r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	334d      	adds	r3, #77	@ 0x4d
 8005afc:	2205      	movs	r2, #5
 8005afe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4613      	mov	r3, r2
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	440b      	add	r3, r1
 8005b0e:	331a      	adds	r3, #26
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005b16:	78fa      	ldrb	r2, [r7, #3]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	3319      	adds	r3, #25
 8005b26:	2201      	movs	r2, #1
 8005b28:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005b2a:	78fa      	ldrb	r2, [r7, #3]
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	3344      	adds	r3, #68	@ 0x44
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	78fa      	ldrb	r2, [r7, #3]
 8005b44:	4611      	mov	r1, r2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f007 fb71 	bl	800d22e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2340      	movs	r3, #64	@ 0x40
 8005b5c:	6093      	str	r3, [r2, #8]
 8005b5e:	e31f      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	4611      	mov	r1, r2
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f006 fdc8 	bl	800c6fe <USB_ReadChInterrupts>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d11a      	bne.n	8005bae <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b84:	461a      	mov	r2, r3
 8005b86:	2308      	movs	r3, #8
 8005b88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005b8a:	78fa      	ldrb	r2, [r7, #3]
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	440b      	add	r3, r1
 8005b98:	334d      	adds	r3, #77	@ 0x4d
 8005b9a:	2206      	movs	r2, #6
 8005b9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	78fa      	ldrb	r2, [r7, #3]
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f007 fb41 	bl	800d22e <USB_HC_Halt>
 8005bac:	e2f8      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	4611      	mov	r1, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f006 fda1 	bl	800c6fe <USB_ReadChInterrupts>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d144      	bne.n	8005c50 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005bc6:	78fa      	ldrb	r2, [r7, #3]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	3344      	adds	r3, #68	@ 0x44
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	4613      	mov	r3, r2
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	440b      	add	r3, r1
 8005be8:	334d      	adds	r3, #77	@ 0x4d
 8005bea:	2204      	movs	r2, #4
 8005bec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005bee:	78fa      	ldrb	r2, [r7, #3]
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	1a9b      	subs	r3, r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	440b      	add	r3, r1
 8005bfc:	3319      	adds	r3, #25
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d114      	bne.n	8005c2e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005c04:	78fa      	ldrb	r2, [r7, #3]
 8005c06:	6879      	ldr	r1, [r7, #4]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	1a9b      	subs	r3, r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	3318      	adds	r3, #24
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	6879      	ldr	r1, [r7, #4]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	011b      	lsls	r3, r3, #4
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	440b      	add	r3, r1
 8005c28:	3319      	adds	r3, #25
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	78fa      	ldrb	r2, [r7, #3]
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f007 faf9 	bl	800d22e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2310      	movs	r3, #16
 8005c4c:	6093      	str	r3, [r2, #8]
 8005c4e:	e2a7      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f006 fd50 	bl	800c6fe <USB_ReadChInterrupts>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c64:	2b80      	cmp	r3, #128	@ 0x80
 8005c66:	f040 8083 	bne.w	8005d70 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	799b      	ldrb	r3, [r3, #6]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d111      	bne.n	8005c96 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	4613      	mov	r3, r2
 8005c78:	011b      	lsls	r3, r3, #4
 8005c7a:	1a9b      	subs	r3, r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	440b      	add	r3, r1
 8005c80:	334d      	adds	r3, #77	@ 0x4d
 8005c82:	2207      	movs	r2, #7
 8005c84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f007 facd 	bl	800d22e <USB_HC_Halt>
 8005c94:	e062      	b.n	8005d5c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	6879      	ldr	r1, [r7, #4]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	440b      	add	r3, r1
 8005ca4:	3344      	adds	r3, #68	@ 0x44
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	1c59      	adds	r1, r3, #1
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	1a9b      	subs	r3, r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4403      	add	r3, r0
 8005cb6:	3344      	adds	r3, #68	@ 0x44
 8005cb8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	3344      	adds	r3, #68	@ 0x44
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d922      	bls.n	8005d16 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005cd0:	78fa      	ldrb	r2, [r7, #3]
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	1a9b      	subs	r3, r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	440b      	add	r3, r1
 8005cde:	3344      	adds	r3, #68	@ 0x44
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	1a9b      	subs	r3, r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	440b      	add	r3, r1
 8005cf2:	334c      	adds	r3, #76	@ 0x4c
 8005cf4:	2204      	movs	r2, #4
 8005cf6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005cf8:	78fa      	ldrb	r2, [r7, #3]
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	1a9b      	subs	r3, r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	334c      	adds	r3, #76	@ 0x4c
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f009 ffe0 	bl	800fcd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005d14:	e022      	b.n	8005d5c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	334c      	adds	r3, #76	@ 0x4c
 8005d26:	2202      	movs	r2, #2
 8005d28:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d40:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d48:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d56:	461a      	mov	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2380      	movs	r3, #128	@ 0x80
 8005d6c:	6093      	str	r3, [r2, #8]
 8005d6e:	e217      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	78fa      	ldrb	r2, [r7, #3]
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f006 fcc0 	bl	800c6fe <USB_ReadChInterrupts>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d88:	d11b      	bne.n	8005dc2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005d8a:	78fa      	ldrb	r2, [r7, #3]
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	334d      	adds	r3, #77	@ 0x4d
 8005d9a:	2209      	movs	r2, #9
 8005d9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	4611      	mov	r1, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f007 fa41 	bl	800d22e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db8:	461a      	mov	r2, r3
 8005dba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dbe:	6093      	str	r3, [r2, #8]
 8005dc0:	e1ee      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	78fa      	ldrb	r2, [r7, #3]
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f006 fc97 	bl	800c6fe <USB_ReadChInterrupts>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	f040 81df 	bne.w	800619a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de8:	461a      	mov	r2, r3
 8005dea:	2302      	movs	r3, #2
 8005dec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	1a9b      	subs	r3, r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	334d      	adds	r3, #77	@ 0x4d
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	f040 8093 	bne.w	8005f2c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	6879      	ldr	r1, [r7, #4]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	011b      	lsls	r3, r3, #4
 8005e0e:	1a9b      	subs	r3, r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	440b      	add	r3, r1
 8005e14:	334d      	adds	r3, #77	@ 0x4d
 8005e16:	2202      	movs	r2, #2
 8005e18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005e1a:	78fa      	ldrb	r2, [r7, #3]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	334c      	adds	r3, #76	@ 0x4c
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005e2e:	78fa      	ldrb	r2, [r7, #3]
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	4613      	mov	r3, r2
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	1a9b      	subs	r3, r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	440b      	add	r3, r1
 8005e3c:	3326      	adds	r3, #38	@ 0x26
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d00b      	beq.n	8005e5c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	1a9b      	subs	r3, r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	440b      	add	r3, r1
 8005e52:	3326      	adds	r3, #38	@ 0x26
 8005e54:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	f040 8190 	bne.w	800617c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	799b      	ldrb	r3, [r3, #6]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d115      	bne.n	8005e90 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	333d      	adds	r3, #61	@ 0x3d
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	f083 0301 	eor.w	r3, r3, #1
 8005e7c:	b2d8      	uxtb	r0, r3
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	4613      	mov	r3, r2
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	1a9b      	subs	r3, r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	440b      	add	r3, r1
 8005e8a:	333d      	adds	r3, #61	@ 0x3d
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	799b      	ldrb	r3, [r3, #6]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	f040 8171 	bne.w	800617c <HCD_HC_OUT_IRQHandler+0x954>
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	3334      	adds	r3, #52	@ 0x34
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8165 	beq.w	800617c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	011b      	lsls	r3, r3, #4
 8005eba:	1a9b      	subs	r3, r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	3334      	adds	r3, #52	@ 0x34
 8005ec2:	6819      	ldr	r1, [r3, #0]
 8005ec4:	78fa      	ldrb	r2, [r7, #3]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	011b      	lsls	r3, r3, #4
 8005ecc:	1a9b      	subs	r3, r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4403      	add	r3, r0
 8005ed2:	3328      	adds	r3, #40	@ 0x28
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	440b      	add	r3, r1
 8005ed8:	1e59      	subs	r1, r3, #1
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4403      	add	r3, r0
 8005ee8:	3328      	adds	r3, #40	@ 0x28
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ef0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 813f 	beq.w	800617c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	1a9b      	subs	r3, r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	333d      	adds	r3, #61	@ 0x3d
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	78fa      	ldrb	r2, [r7, #3]
 8005f12:	f083 0301 	eor.w	r3, r3, #1
 8005f16:	b2d8      	uxtb	r0, r3
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	333d      	adds	r3, #61	@ 0x3d
 8005f26:	4602      	mov	r2, r0
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	e127      	b.n	800617c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	4613      	mov	r3, r2
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	1a9b      	subs	r3, r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	334d      	adds	r3, #77	@ 0x4d
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d120      	bne.n	8005f84 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	334d      	adds	r3, #77	@ 0x4d
 8005f52:	2202      	movs	r2, #2
 8005f54:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005f56:	78fa      	ldrb	r2, [r7, #3]
 8005f58:	6879      	ldr	r1, [r7, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	331b      	adds	r3, #27
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	f040 8107 	bne.w	800617c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	334c      	adds	r3, #76	@ 0x4c
 8005f7e:	2202      	movs	r2, #2
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e0fb      	b.n	800617c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005f84:	78fa      	ldrb	r2, [r7, #3]
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	1a9b      	subs	r3, r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	334d      	adds	r3, #77	@ 0x4d
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d13a      	bne.n	8006010 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	334d      	adds	r3, #77	@ 0x4d
 8005faa:	2202      	movs	r2, #2
 8005fac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005fae:	78fa      	ldrb	r2, [r7, #3]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	334c      	adds	r3, #76	@ 0x4c
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005fc2:	78fa      	ldrb	r2, [r7, #3]
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	1a9b      	subs	r3, r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	331b      	adds	r3, #27
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	f040 80d1 	bne.w	800617c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005fda:	78fa      	ldrb	r2, [r7, #3]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	331b      	adds	r3, #27
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	78fa      	ldrb	r2, [r7, #3]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	440a      	add	r2, r1
 8006004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006008:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800600c:	6053      	str	r3, [r2, #4]
 800600e:	e0b5      	b.n	800617c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	334d      	adds	r3, #77	@ 0x4d
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b05      	cmp	r3, #5
 8006024:	d114      	bne.n	8006050 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006026:	78fa      	ldrb	r2, [r7, #3]
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	4613      	mov	r3, r2
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	440b      	add	r3, r1
 8006034:	334d      	adds	r3, #77	@ 0x4d
 8006036:	2202      	movs	r2, #2
 8006038:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800603a:	78fa      	ldrb	r2, [r7, #3]
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	4613      	mov	r3, r2
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	440b      	add	r3, r1
 8006048:	334c      	adds	r3, #76	@ 0x4c
 800604a:	2202      	movs	r2, #2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e095      	b.n	800617c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006050:	78fa      	ldrb	r2, [r7, #3]
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	4613      	mov	r3, r2
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	440b      	add	r3, r1
 800605e:	334d      	adds	r3, #77	@ 0x4d
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b06      	cmp	r3, #6
 8006064:	d114      	bne.n	8006090 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006066:	78fa      	ldrb	r2, [r7, #3]
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4613      	mov	r3, r2
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	334d      	adds	r3, #77	@ 0x4d
 8006076:	2202      	movs	r2, #2
 8006078:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800607a:	78fa      	ldrb	r2, [r7, #3]
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	334c      	adds	r3, #76	@ 0x4c
 800608a:	2205      	movs	r2, #5
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e075      	b.n	800617c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006090:	78fa      	ldrb	r2, [r7, #3]
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	1a9b      	subs	r3, r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	440b      	add	r3, r1
 800609e:	334d      	adds	r3, #77	@ 0x4d
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b07      	cmp	r3, #7
 80060a4:	d00a      	beq.n	80060bc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	4613      	mov	r3, r2
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	334d      	adds	r3, #77	@ 0x4d
 80060b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80060b8:	2b09      	cmp	r3, #9
 80060ba:	d170      	bne.n	800619e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060bc:	78fa      	ldrb	r2, [r7, #3]
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	334d      	adds	r3, #77	@ 0x4d
 80060cc:	2202      	movs	r2, #2
 80060ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80060d0:	78fa      	ldrb	r2, [r7, #3]
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	4613      	mov	r3, r2
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	3344      	adds	r3, #68	@ 0x44
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	1a9b      	subs	r3, r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4403      	add	r3, r0
 80060f0:	3344      	adds	r3, #68	@ 0x44
 80060f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80060f4:	78fa      	ldrb	r2, [r7, #3]
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	4613      	mov	r3, r2
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	1a9b      	subs	r3, r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	440b      	add	r3, r1
 8006102:	3344      	adds	r3, #68	@ 0x44
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d914      	bls.n	8006134 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	3344      	adds	r3, #68	@ 0x44
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800611e:	78fa      	ldrb	r2, [r7, #3]
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	011b      	lsls	r3, r3, #4
 8006126:	1a9b      	subs	r3, r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	334c      	adds	r3, #76	@ 0x4c
 800612e:	2204      	movs	r2, #4
 8006130:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006132:	e022      	b.n	800617a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006134:	78fa      	ldrb	r2, [r7, #3]
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	011b      	lsls	r3, r3, #4
 800613c:	1a9b      	subs	r3, r3, r2
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	440b      	add	r3, r1
 8006142:	334c      	adds	r3, #76	@ 0x4c
 8006144:	2202      	movs	r2, #2
 8006146:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800615e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006166:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006174:	461a      	mov	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800617a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800617c:	78fa      	ldrb	r2, [r7, #3]
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	4613      	mov	r3, r2
 8006182:	011b      	lsls	r3, r3, #4
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	440b      	add	r3, r1
 800618a:	334c      	adds	r3, #76	@ 0x4c
 800618c:	781a      	ldrb	r2, [r3, #0]
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f009 fd9e 	bl	800fcd4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006198:	e002      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800619e:	bf00      	nop
  }
}
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b08a      	sub	sp, #40	@ 0x28
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	f003 030f 	and.w	r3, r3, #15
 80061c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	0c5b      	lsrs	r3, r3, #17
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	091b      	lsrs	r3, r3, #4
 80061d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d004      	beq.n	80061ec <HCD_RXQLVL_IRQHandler+0x46>
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b05      	cmp	r3, #5
 80061e6:	f000 80b6 	beq.w	8006356 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80061ea:	e0b7      	b.n	800635c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 80b3 	beq.w	800635a <HCD_RXQLVL_IRQHandler+0x1b4>
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	4613      	mov	r3, r2
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	332c      	adds	r3, #44	@ 0x2c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 80a7 	beq.w	800635a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4613      	mov	r3, r2
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	3338      	adds	r3, #56	@ 0x38
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	18d1      	adds	r1, r2, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	69ba      	ldr	r2, [r7, #24]
 8006226:	4613      	mov	r3, r2
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4403      	add	r3, r0
 8006230:	3334      	adds	r3, #52	@ 0x34
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4299      	cmp	r1, r3
 8006236:	f200 8083 	bhi.w	8006340 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	4613      	mov	r3, r2
 8006244:	011b      	lsls	r3, r3, #4
 8006246:	1a9b      	subs	r3, r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	332c      	adds	r3, #44	@ 0x2c
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	b292      	uxth	r2, r2
 8006254:	4619      	mov	r1, r3
 8006256:	f006 f9e7 	bl	800c628 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	4613      	mov	r3, r2
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	440b      	add	r3, r1
 8006268:	332c      	adds	r3, #44	@ 0x2c
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	18d1      	adds	r1, r2, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4613      	mov	r3, r2
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4403      	add	r3, r0
 800627e:	332c      	adds	r3, #44	@ 0x2c
 8006280:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	4613      	mov	r3, r2
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	440b      	add	r3, r1
 8006290:	3338      	adds	r3, #56	@ 0x38
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	18d1      	adds	r1, r2, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4613      	mov	r3, r2
 800629e:	011b      	lsls	r3, r3, #4
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4403      	add	r3, r0
 80062a6:	3338      	adds	r3, #56	@ 0x38
 80062a8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	0cdb      	lsrs	r3, r3, #19
 80062ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	4613      	mov	r3, r2
 80062c6:	011b      	lsls	r3, r3, #4
 80062c8:	1a9b      	subs	r3, r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	3328      	adds	r3, #40	@ 0x28
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d13f      	bne.n	800635a <HCD_RXQLVL_IRQHandler+0x1b4>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d03c      	beq.n	800635a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062f6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062fe:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	4413      	add	r3, r2
 8006308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800630c:	461a      	mov	r2, r3
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4613      	mov	r3, r2
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	440b      	add	r3, r1
 8006320:	333c      	adds	r3, #60	@ 0x3c
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f083 0301 	eor.w	r3, r3, #1
 8006328:	b2d8      	uxtb	r0, r3
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	69ba      	ldr	r2, [r7, #24]
 800632e:	4613      	mov	r3, r2
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	1a9b      	subs	r3, r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	333c      	adds	r3, #60	@ 0x3c
 800633a:	4602      	mov	r2, r0
 800633c:	701a      	strb	r2, [r3, #0]
      break;
 800633e:	e00c      	b.n	800635a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4613      	mov	r3, r2
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	1a9b      	subs	r3, r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	440b      	add	r3, r1
 800634e:	334c      	adds	r3, #76	@ 0x4c
 8006350:	2204      	movs	r2, #4
 8006352:	701a      	strb	r2, [r3, #0]
      break;
 8006354:	e001      	b.n	800635a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8006356:	bf00      	nop
 8006358:	e000      	b.n	800635c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800635a:	bf00      	nop
  }
}
 800635c:	bf00      	nop
 800635e:	3728      	adds	r7, #40	@ 0x28
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006390:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	d10b      	bne.n	80063b4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d102      	bne.n	80063ac <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f009 fc78 	bl	800fc9c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f043 0302 	orr.w	r3, r3, #2
 80063b2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d132      	bne.n	8006424 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f043 0308 	orr.w	r3, r3, #8
 80063c4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b04      	cmp	r3, #4
 80063ce:	d126      	bne.n	800641e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	7a5b      	ldrb	r3, [r3, #9]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d113      	bne.n	8006400 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80063de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063e2:	d106      	bne.n	80063f2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2102      	movs	r1, #2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f006 faa0 	bl	800c930 <USB_InitFSLSPClkSel>
 80063f0:	e011      	b.n	8006416 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2101      	movs	r1, #1
 80063f8:	4618      	mov	r0, r3
 80063fa:	f006 fa99 	bl	800c930 <USB_InitFSLSPClkSel>
 80063fe:	e00a      	b.n	8006416 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	79db      	ldrb	r3, [r3, #7]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d106      	bne.n	8006416 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800640e:	461a      	mov	r2, r3
 8006410:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006414:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f009 fc6a 	bl	800fcf0 <HAL_HCD_PortEnabled_Callback>
 800641c:	e002      	b.n	8006424 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f009 fc74 	bl	800fd0c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b20      	cmp	r3, #32
 800642c:	d103      	bne.n	8006436 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f043 0320 	orr.w	r3, r3, #32
 8006434:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800643c:	461a      	mov	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6013      	str	r3, [r2, #0]
}
 8006442:	bf00      	nop
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
	...

0800644c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e12b      	b.n	80066b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7fb fa02 	bl	800187c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2224      	movs	r2, #36	@ 0x24
 800647c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0201 	bic.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800649e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064b0:	f000 ff82 	bl	80073b8 <HAL_RCC_GetPCLK1Freq>
 80064b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	4a81      	ldr	r2, [pc, #516]	@ (80066c0 <HAL_I2C_Init+0x274>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d807      	bhi.n	80064d0 <HAL_I2C_Init+0x84>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4a80      	ldr	r2, [pc, #512]	@ (80066c4 <HAL_I2C_Init+0x278>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	bf94      	ite	ls
 80064c8:	2301      	movls	r3, #1
 80064ca:	2300      	movhi	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	e006      	b.n	80064de <HAL_I2C_Init+0x92>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4a7d      	ldr	r2, [pc, #500]	@ (80066c8 <HAL_I2C_Init+0x27c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	bf94      	ite	ls
 80064d8:	2301      	movls	r3, #1
 80064da:	2300      	movhi	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e0e7      	b.n	80066b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a78      	ldr	r2, [pc, #480]	@ (80066cc <HAL_I2C_Init+0x280>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	0c9b      	lsrs	r3, r3, #18
 80064f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4a6a      	ldr	r2, [pc, #424]	@ (80066c0 <HAL_I2C_Init+0x274>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d802      	bhi.n	8006520 <HAL_I2C_Init+0xd4>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	3301      	adds	r3, #1
 800651e:	e009      	b.n	8006534 <HAL_I2C_Init+0xe8>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006526:	fb02 f303 	mul.w	r3, r2, r3
 800652a:	4a69      	ldr	r2, [pc, #420]	@ (80066d0 <HAL_I2C_Init+0x284>)
 800652c:	fba2 2303 	umull	r2, r3, r2, r3
 8006530:	099b      	lsrs	r3, r3, #6
 8006532:	3301      	adds	r3, #1
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	430b      	orrs	r3, r1
 800653a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006546:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	495c      	ldr	r1, [pc, #368]	@ (80066c0 <HAL_I2C_Init+0x274>)
 8006550:	428b      	cmp	r3, r1
 8006552:	d819      	bhi.n	8006588 <HAL_I2C_Init+0x13c>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	1e59      	subs	r1, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006562:	1c59      	adds	r1, r3, #1
 8006564:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006568:	400b      	ands	r3, r1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00a      	beq.n	8006584 <HAL_I2C_Init+0x138>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	1e59      	subs	r1, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	fbb1 f3f3 	udiv	r3, r1, r3
 800657c:	3301      	adds	r3, #1
 800657e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006582:	e051      	b.n	8006628 <HAL_I2C_Init+0x1dc>
 8006584:	2304      	movs	r3, #4
 8006586:	e04f      	b.n	8006628 <HAL_I2C_Init+0x1dc>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d111      	bne.n	80065b4 <HAL_I2C_Init+0x168>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	1e58      	subs	r0, r3, #1
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6859      	ldr	r1, [r3, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	440b      	add	r3, r1
 800659e:	fbb0 f3f3 	udiv	r3, r0, r3
 80065a2:	3301      	adds	r3, #1
 80065a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bf0c      	ite	eq
 80065ac:	2301      	moveq	r3, #1
 80065ae:	2300      	movne	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	e012      	b.n	80065da <HAL_I2C_Init+0x18e>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	1e58      	subs	r0, r3, #1
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6859      	ldr	r1, [r3, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	0099      	lsls	r1, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80065ca:	3301      	adds	r3, #1
 80065cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bf0c      	ite	eq
 80065d4:	2301      	moveq	r3, #1
 80065d6:	2300      	movne	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_I2C_Init+0x196>
 80065de:	2301      	movs	r3, #1
 80065e0:	e022      	b.n	8006628 <HAL_I2C_Init+0x1dc>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10e      	bne.n	8006608 <HAL_I2C_Init+0x1bc>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	1e58      	subs	r0, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6859      	ldr	r1, [r3, #4]
 80065f2:	460b      	mov	r3, r1
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	440b      	add	r3, r1
 80065f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80065fc:	3301      	adds	r3, #1
 80065fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006602:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006606:	e00f      	b.n	8006628 <HAL_I2C_Init+0x1dc>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1e58      	subs	r0, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6859      	ldr	r1, [r3, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	440b      	add	r3, r1
 8006616:	0099      	lsls	r1, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	fbb0 f3f3 	udiv	r3, r0, r3
 800661e:	3301      	adds	r3, #1
 8006620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006624:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	6809      	ldr	r1, [r1, #0]
 800662c:	4313      	orrs	r3, r2
 800662e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69da      	ldr	r2, [r3, #28]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006656:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6911      	ldr	r1, [r2, #16]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	68d2      	ldr	r2, [r2, #12]
 8006662:	4311      	orrs	r1, r2
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6812      	ldr	r2, [r2, #0]
 8006668:	430b      	orrs	r3, r1
 800666a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	695a      	ldr	r2, [r3, #20]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	000186a0 	.word	0x000186a0
 80066c4:	001e847f 	.word	0x001e847f
 80066c8:	003d08ff 	.word	0x003d08ff
 80066cc:	431bde83 	.word	0x431bde83
 80066d0:	10624dd3 	.word	0x10624dd3

080066d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e0bf      	b.n	8006866 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fb f93c 	bl	8001978 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006716:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6999      	ldr	r1, [r3, #24]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800672c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6899      	ldr	r1, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4b4a      	ldr	r3, [pc, #296]	@ (8006870 <HAL_LTDC_Init+0x19c>)
 8006748:	400b      	ands	r3, r1
 800674a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	041b      	lsls	r3, r3, #16
 8006752:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6899      	ldr	r1, [r3, #8]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68d9      	ldr	r1, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	4b3e      	ldr	r3, [pc, #248]	@ (8006870 <HAL_LTDC_Init+0x19c>)
 8006776:	400b      	ands	r3, r1
 8006778:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	041b      	lsls	r3, r3, #16
 8006780:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68d9      	ldr	r1, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1a      	ldr	r2, [r3, #32]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6919      	ldr	r1, [r3, #16]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	4b33      	ldr	r3, [pc, #204]	@ (8006870 <HAL_LTDC_Init+0x19c>)
 80067a4:	400b      	ands	r3, r1
 80067a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6919      	ldr	r1, [r3, #16]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	431a      	orrs	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	6959      	ldr	r1, [r3, #20]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	4b27      	ldr	r3, [pc, #156]	@ (8006870 <HAL_LTDC_Init+0x19c>)
 80067d2:	400b      	ands	r3, r1
 80067d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067da:	041b      	lsls	r3, r3, #16
 80067dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6959      	ldr	r1, [r3, #20]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006804:	041b      	lsls	r3, r3, #16
 8006806:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006816:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0206 	orr.w	r2, r2, #6
 8006842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	f000f800 	.word	0xf000f800

08006874 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006882:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800688a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d023      	beq.n	80068de <HAL_LTDC_IRQHandler+0x6a>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01e      	beq.n	80068de <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0204 	bic.w	r2, r2, #4
 80068ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2204      	movs	r2, #4
 80068b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80068be:	f043 0201 	orr.w	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2204      	movs	r2, #4
 80068cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f86f 	bl	80069bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d023      	beq.n	8006930 <HAL_LTDC_IRQHandler+0xbc>
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01e      	beq.n	8006930 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0202 	bic.w	r2, r2, #2
 8006900:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2202      	movs	r2, #2
 8006908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006910:	f043 0202 	orr.w	r2, r3, #2
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2204      	movs	r2, #4
 800691e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f846 	bl	80069bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01b      	beq.n	8006972 <HAL_LTDC_IRQHandler+0xfe>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d016      	beq.n	8006972 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0201 	bic.w	r2, r2, #1
 8006952:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2201      	movs	r2, #1
 800695a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f82f 	bl	80069d0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01b      	beq.n	80069b4 <HAL_LTDC_IRQHandler+0x140>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d016      	beq.n	80069b4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0208 	bic.w	r2, r2, #8
 8006994:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2208      	movs	r2, #8
 800699c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f818 	bl	80069e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80069b4:	bf00      	nop
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069f8:	b5b0      	push	{r4, r5, r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_LTDC_ConfigLayer+0x1a>
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e02c      	b.n	8006a6c <HAL_LTDC_ConfigLayer+0x74>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2134      	movs	r1, #52	@ 0x34
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	4614      	mov	r4, r2
 8006a36:	461d      	mov	r5, r3
 8006a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a44:	682b      	ldr	r3, [r5, #0]
 8006a46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f811 	bl	8006a74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2201      	movs	r2, #1
 8006a58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bdb0      	pop	{r4, r5, r7, pc}

08006a74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b089      	sub	sp, #36	@ 0x24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	0c1b      	lsrs	r3, r3, #16
 8006a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a90:	4413      	add	r3, r2
 8006a92:	041b      	lsls	r3, r3, #16
 8006a94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	01db      	lsls	r3, r3, #7
 8006aa0:	4413      	add	r3, r2
 8006aa2:	3384      	adds	r3, #132	@ 0x84
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	4611      	mov	r1, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	01d2      	lsls	r2, r2, #7
 8006ab0:	440a      	add	r2, r1
 8006ab2:	3284      	adds	r2, #132	@ 0x84
 8006ab4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006ab8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	0c1b      	lsrs	r3, r3, #16
 8006ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006aca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006acc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	01db      	lsls	r3, r3, #7
 8006ad8:	440b      	add	r3, r1
 8006ada:	3384      	adds	r3, #132	@ 0x84
 8006adc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006ae2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006af2:	4413      	add	r3, r2
 8006af4:	041b      	lsls	r3, r3, #16
 8006af6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	01db      	lsls	r3, r3, #7
 8006b02:	4413      	add	r3, r2
 8006b04:	3384      	adds	r3, #132	@ 0x84
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	01d2      	lsls	r2, r2, #7
 8006b12:	440a      	add	r2, r1
 8006b14:	3284      	adds	r2, #132	@ 0x84
 8006b16:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006b1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b2a:	4413      	add	r3, r2
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	01db      	lsls	r3, r3, #7
 8006b38:	440b      	add	r3, r1
 8006b3a:	3384      	adds	r3, #132	@ 0x84
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	01db      	lsls	r3, r3, #7
 8006b4e:	4413      	add	r3, r2
 8006b50:	3384      	adds	r3, #132	@ 0x84
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	6812      	ldr	r2, [r2, #0]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	01d2      	lsls	r2, r2, #7
 8006b5e:	440a      	add	r2, r1
 8006b60:	3284      	adds	r2, #132	@ 0x84
 8006b62:	f023 0307 	bic.w	r3, r3, #7
 8006b66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	01db      	lsls	r3, r3, #7
 8006b72:	4413      	add	r3, r2
 8006b74:	3384      	adds	r3, #132	@ 0x84
 8006b76:	461a      	mov	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	01db      	lsls	r3, r3, #7
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3384      	adds	r3, #132	@ 0x84
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	01db      	lsls	r3, r3, #7
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3384      	adds	r3, #132	@ 0x84
 8006bb8:	461a      	mov	r2, r3
 8006bba:	2300      	movs	r3, #0
 8006bbc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	01db      	lsls	r3, r3, #7
 8006bd8:	440b      	add	r3, r1
 8006bda:	3384      	adds	r3, #132	@ 0x84
 8006bdc:	4619      	mov	r1, r3
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	461a      	mov	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	01db      	lsls	r3, r3, #7
 8006bee:	4413      	add	r3, r2
 8006bf0:	3384      	adds	r3, #132	@ 0x84
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	01d2      	lsls	r2, r2, #7
 8006bfe:	440a      	add	r2, r1
 8006c00:	3284      	adds	r2, #132	@ 0x84
 8006c02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006c06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	01db      	lsls	r3, r3, #7
 8006c12:	4413      	add	r3, r2
 8006c14:	3384      	adds	r3, #132	@ 0x84
 8006c16:	461a      	mov	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	461a      	mov	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	01db      	lsls	r3, r3, #7
 8006c28:	4413      	add	r3, r2
 8006c2a:	3384      	adds	r3, #132	@ 0x84
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	4611      	mov	r1, r2
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	01d2      	lsls	r2, r2, #7
 8006c38:	440a      	add	r2, r1
 8006c3a:	3284      	adds	r2, #132	@ 0x84
 8006c3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006c40:	f023 0307 	bic.w	r3, r3, #7
 8006c44:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	69da      	ldr	r2, [r3, #28]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	6809      	ldr	r1, [r1, #0]
 8006c52:	4608      	mov	r0, r1
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	01c9      	lsls	r1, r1, #7
 8006c58:	4401      	add	r1, r0
 8006c5a:	3184      	adds	r1, #132	@ 0x84
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	01db      	lsls	r3, r3, #7
 8006c6a:	4413      	add	r3, r2
 8006c6c:	3384      	adds	r3, #132	@ 0x84
 8006c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	461a      	mov	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	01db      	lsls	r3, r3, #7
 8006c7a:	4413      	add	r3, r2
 8006c7c:	3384      	adds	r3, #132	@ 0x84
 8006c7e:	461a      	mov	r2, r3
 8006c80:	2300      	movs	r3, #0
 8006c82:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	01db      	lsls	r3, r3, #7
 8006c8e:	4413      	add	r3, r2
 8006c90:	3384      	adds	r3, #132	@ 0x84
 8006c92:	461a      	mov	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c98:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d102      	bne.n	8006ca8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006ca2:	2304      	movs	r3, #4
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	e01b      	b.n	8006ce0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d102      	bne.n	8006cb6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	e014      	b.n	8006ce0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d00b      	beq.n	8006cd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d007      	beq.n	8006cd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d003      	beq.n	8006cd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006cd2:	2b07      	cmp	r3, #7
 8006cd4:	d102      	bne.n	8006cdc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	e001      	b.n	8006ce0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	01db      	lsls	r3, r3, #7
 8006cea:	4413      	add	r3, r2
 8006cec:	3384      	adds	r3, #132	@ 0x84
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	6812      	ldr	r2, [r2, #0]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	01d2      	lsls	r2, r2, #7
 8006cfa:	440a      	add	r2, r1
 8006cfc:	3284      	adds	r2, #132	@ 0x84
 8006cfe:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006d02:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	fb02 f303 	mul.w	r3, r2, r3
 8006d0e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	6859      	ldr	r1, [r3, #4]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	1acb      	subs	r3, r1, r3
 8006d1a:	69f9      	ldr	r1, [r7, #28]
 8006d1c:	fb01 f303 	mul.w	r3, r1, r3
 8006d20:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006d22:	68f9      	ldr	r1, [r7, #12]
 8006d24:	6809      	ldr	r1, [r1, #0]
 8006d26:	4608      	mov	r0, r1
 8006d28:	6879      	ldr	r1, [r7, #4]
 8006d2a:	01c9      	lsls	r1, r1, #7
 8006d2c:	4401      	add	r1, r0
 8006d2e:	3184      	adds	r1, #132	@ 0x84
 8006d30:	4313      	orrs	r3, r2
 8006d32:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	01db      	lsls	r3, r3, #7
 8006d3e:	4413      	add	r3, r2
 8006d40:	3384      	adds	r3, #132	@ 0x84
 8006d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	01d2      	lsls	r2, r2, #7
 8006d4e:	440a      	add	r2, r1
 8006d50:	3284      	adds	r2, #132	@ 0x84
 8006d52:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	01db      	lsls	r3, r3, #7
 8006d66:	4413      	add	r3, r2
 8006d68:	3384      	adds	r3, #132	@ 0x84
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	01db      	lsls	r3, r3, #7
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3384      	adds	r3, #132	@ 0x84
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	6812      	ldr	r2, [r2, #0]
 8006d86:	4611      	mov	r1, r2
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	01d2      	lsls	r2, r2, #7
 8006d8c:	440a      	add	r2, r1
 8006d8e:	3284      	adds	r2, #132	@ 0x84
 8006d90:	f043 0301 	orr.w	r3, r3, #1
 8006d94:	6013      	str	r3, [r2, #0]
}
 8006d96:	bf00      	nop
 8006d98:	3724      	adds	r7, #36	@ 0x24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006dae:	2300      	movs	r3, #0
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	4b20      	ldr	r3, [pc, #128]	@ (8006e34 <HAL_PWREx_EnableOverDrive+0x90>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db6:	4a1f      	ldr	r2, [pc, #124]	@ (8006e34 <HAL_PWREx_EnableOverDrive+0x90>)
 8006db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8006e34 <HAL_PWREx_EnableOverDrive+0x90>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006dca:	4b1b      	ldr	r3, [pc, #108]	@ (8006e38 <HAL_PWREx_EnableOverDrive+0x94>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dd0:	f7fb fb06 	bl	80023e0 <HAL_GetTick>
 8006dd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006dd6:	e009      	b.n	8006dec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006dd8:	f7fb fb02 	bl	80023e0 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006de6:	d901      	bls.n	8006dec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e01f      	b.n	8006e2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006dec:	4b13      	ldr	r3, [pc, #76]	@ (8006e3c <HAL_PWREx_EnableOverDrive+0x98>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006df8:	d1ee      	bne.n	8006dd8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006dfa:	4b11      	ldr	r3, [pc, #68]	@ (8006e40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e00:	f7fb faee 	bl	80023e0 <HAL_GetTick>
 8006e04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e06:	e009      	b.n	8006e1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006e08:	f7fb faea 	bl	80023e0 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e16:	d901      	bls.n	8006e1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e007      	b.n	8006e2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006e1c:	4b07      	ldr	r3, [pc, #28]	@ (8006e3c <HAL_PWREx_EnableOverDrive+0x98>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e28:	d1ee      	bne.n	8006e08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40023800 	.word	0x40023800
 8006e38:	420e0040 	.word	0x420e0040
 8006e3c:	40007000 	.word	0x40007000
 8006e40:	420e0044 	.word	0x420e0044

08006e44 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af02      	add	r7, sp, #8
 8006e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006e4c:	f7fb fac8 	bl	80023e0 <HAL_GetTick>
 8006e50:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e069      	b.n	8006f30 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10b      	bne.n	8006e80 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7fa fda9 	bl	80019c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006e76:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f85e 	bl	8006f3c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	021a      	lsls	r2, r3, #8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	2120      	movs	r1, #32
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f856 	bl	8006f58 <QSPI_WaitFlagStateUntilTimeout>
 8006eac:	4603      	mov	r3, r0
 8006eae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d137      	bne.n	8006f26 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006ec0:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6852      	ldr	r2, [r2, #4]
 8006ec8:	0611      	lsls	r1, r2, #24
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68d2      	ldr	r2, [r2, #12]
 8006ece:	4311      	orrs	r1, r2
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	69d2      	ldr	r2, [r2, #28]
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6a12      	ldr	r2, [r2, #32]
 8006eda:	4311      	orrs	r1, r2
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6812      	ldr	r2, [r2, #0]
 8006ee0:	430b      	orrs	r3, r1
 8006ee2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	4b13      	ldr	r3, [pc, #76]	@ (8006f38 <HAL_QSPI_Init+0xf4>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6912      	ldr	r2, [r2, #16]
 8006ef2:	0411      	lsls	r1, r2, #16
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6952      	ldr	r2, [r2, #20]
 8006ef8:	4311      	orrs	r1, r2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6992      	ldr	r2, [r2, #24]
 8006efe:	4311      	orrs	r1, r2
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	430b      	orrs	r3, r1
 8006f06:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	ffe0f8fe 	.word	0xffe0f8fe

08006f3c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	4613      	mov	r3, r2
 8006f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f68:	e01a      	b.n	8006fa0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d016      	beq.n	8006fa0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f72:	f7fb fa35 	bl	80023e0 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d302      	bcc.n	8006f88 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10b      	bne.n	8006fa0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f94:	f043 0201 	orr.w	r2, r3, #1
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e00e      	b.n	8006fbe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	bf14      	ite	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	2300      	moveq	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d1d6      	bne.n	8006f6a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0cc      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fdc:	4b68      	ldr	r3, [pc, #416]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d90c      	bls.n	8007004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fea:	4b65      	ldr	r3, [pc, #404]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff2:	4b63      	ldr	r3, [pc, #396]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d001      	beq.n	8007004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e0b8      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d020      	beq.n	8007052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800701c:	4b59      	ldr	r3, [pc, #356]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4a58      	ldr	r2, [pc, #352]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007034:	4b53      	ldr	r3, [pc, #332]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	4a52      	ldr	r2, [pc, #328]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800703e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007040:	4b50      	ldr	r3, [pc, #320]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	494d      	ldr	r1, [pc, #308]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d044      	beq.n	80070e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d107      	bne.n	8007076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007066:	4b47      	ldr	r3, [pc, #284]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d119      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e07f      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d003      	beq.n	8007086 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007082:	2b03      	cmp	r3, #3
 8007084:	d107      	bne.n	8007096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007086:	4b3f      	ldr	r3, [pc, #252]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e06f      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007096:	4b3b      	ldr	r3, [pc, #236]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e067      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070a6:	4b37      	ldr	r3, [pc, #220]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f023 0203 	bic.w	r2, r3, #3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	4934      	ldr	r1, [pc, #208]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070b8:	f7fb f992 	bl	80023e0 <HAL_GetTick>
 80070bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070be:	e00a      	b.n	80070d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c0:	f7fb f98e 	bl	80023e0 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d901      	bls.n	80070d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e04f      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 020c 	and.w	r2, r3, #12
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d1eb      	bne.n	80070c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070e8:	4b25      	ldr	r3, [pc, #148]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 030f 	and.w	r3, r3, #15
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d20c      	bcs.n	8007110 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f6:	4b22      	ldr	r3, [pc, #136]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fe:	4b20      	ldr	r3, [pc, #128]	@ (8007180 <HAL_RCC_ClockConfig+0x1b8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	429a      	cmp	r2, r3
 800710a:	d001      	beq.n	8007110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e032      	b.n	8007176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800711c:	4b19      	ldr	r3, [pc, #100]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	4916      	ldr	r1, [pc, #88]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	4313      	orrs	r3, r2
 800712c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0308 	and.w	r3, r3, #8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800713a:	4b12      	ldr	r3, [pc, #72]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	490e      	ldr	r1, [pc, #56]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 800714a:	4313      	orrs	r3, r2
 800714c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800714e:	f000 f821 	bl	8007194 <HAL_RCC_GetSysClockFreq>
 8007152:	4602      	mov	r2, r0
 8007154:	4b0b      	ldr	r3, [pc, #44]	@ (8007184 <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	091b      	lsrs	r3, r3, #4
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	490a      	ldr	r1, [pc, #40]	@ (8007188 <HAL_RCC_ClockConfig+0x1c0>)
 8007160:	5ccb      	ldrb	r3, [r1, r3]
 8007162:	fa22 f303 	lsr.w	r3, r2, r3
 8007166:	4a09      	ldr	r2, [pc, #36]	@ (800718c <HAL_RCC_ClockConfig+0x1c4>)
 8007168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800716a:	4b09      	ldr	r3, [pc, #36]	@ (8007190 <HAL_RCC_ClockConfig+0x1c8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f7fa ff92 	bl	8002098 <HAL_InitTick>

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	40023c00 	.word	0x40023c00
 8007184:	40023800 	.word	0x40023800
 8007188:	08010e70 	.word	0x08010e70
 800718c:	20000004 	.word	0x20000004
 8007190:	20000008 	.word	0x20000008

08007194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007198:	b094      	sub	sp, #80	@ 0x50
 800719a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071ac:	4b79      	ldr	r3, [pc, #484]	@ (8007394 <HAL_RCC_GetSysClockFreq+0x200>)
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f003 030c 	and.w	r3, r3, #12
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d00d      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0x40>
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	f200 80e1 	bhi.w	8007380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <HAL_RCC_GetSysClockFreq+0x34>
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d003      	beq.n	80071ce <HAL_RCC_GetSysClockFreq+0x3a>
 80071c6:	e0db      	b.n	8007380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071c8:	4b73      	ldr	r3, [pc, #460]	@ (8007398 <HAL_RCC_GetSysClockFreq+0x204>)
 80071ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80071cc:	e0db      	b.n	8007386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071ce:	4b73      	ldr	r3, [pc, #460]	@ (800739c <HAL_RCC_GetSysClockFreq+0x208>)
 80071d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80071d2:	e0d8      	b.n	8007386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071d4:	4b6f      	ldr	r3, [pc, #444]	@ (8007394 <HAL_RCC_GetSysClockFreq+0x200>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071de:	4b6d      	ldr	r3, [pc, #436]	@ (8007394 <HAL_RCC_GetSysClockFreq+0x200>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d063      	beq.n	80072b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007394 <HAL_RCC_GetSysClockFreq+0x200>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	099b      	lsrs	r3, r3, #6
 80071f0:	2200      	movs	r2, #0
 80071f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80071f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80071f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fe:	2300      	movs	r3, #0
 8007200:	637b      	str	r3, [r7, #52]	@ 0x34
 8007202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	f04f 0000 	mov.w	r0, #0
 800720e:	f04f 0100 	mov.w	r1, #0
 8007212:	0159      	lsls	r1, r3, #5
 8007214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007218:	0150      	lsls	r0, r2, #5
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4621      	mov	r1, r4
 8007220:	1a51      	subs	r1, r2, r1
 8007222:	6139      	str	r1, [r7, #16]
 8007224:	4629      	mov	r1, r5
 8007226:	eb63 0301 	sbc.w	r3, r3, r1
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007238:	4659      	mov	r1, fp
 800723a:	018b      	lsls	r3, r1, #6
 800723c:	4651      	mov	r1, sl
 800723e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007242:	4651      	mov	r1, sl
 8007244:	018a      	lsls	r2, r1, #6
 8007246:	4651      	mov	r1, sl
 8007248:	ebb2 0801 	subs.w	r8, r2, r1
 800724c:	4659      	mov	r1, fp
 800724e:	eb63 0901 	sbc.w	r9, r3, r1
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800725e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007266:	4690      	mov	r8, r2
 8007268:	4699      	mov	r9, r3
 800726a:	4623      	mov	r3, r4
 800726c:	eb18 0303 	adds.w	r3, r8, r3
 8007270:	60bb      	str	r3, [r7, #8]
 8007272:	462b      	mov	r3, r5
 8007274:	eb49 0303 	adc.w	r3, r9, r3
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	f04f 0300 	mov.w	r3, #0
 8007282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007286:	4629      	mov	r1, r5
 8007288:	024b      	lsls	r3, r1, #9
 800728a:	4621      	mov	r1, r4
 800728c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007290:	4621      	mov	r1, r4
 8007292:	024a      	lsls	r2, r1, #9
 8007294:	4610      	mov	r0, r2
 8007296:	4619      	mov	r1, r3
 8007298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800729a:	2200      	movs	r2, #0
 800729c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800729e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80072a4:	f7f9 f804 	bl	80002b0 <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4613      	mov	r3, r2
 80072ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072b0:	e058      	b.n	8007364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b2:	4b38      	ldr	r3, [pc, #224]	@ (8007394 <HAL_RCC_GetSysClockFreq+0x200>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	099b      	lsrs	r3, r3, #6
 80072b8:	2200      	movs	r2, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	4611      	mov	r1, r2
 80072be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80072c2:	623b      	str	r3, [r7, #32]
 80072c4:	2300      	movs	r3, #0
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80072cc:	4642      	mov	r2, r8
 80072ce:	464b      	mov	r3, r9
 80072d0:	f04f 0000 	mov.w	r0, #0
 80072d4:	f04f 0100 	mov.w	r1, #0
 80072d8:	0159      	lsls	r1, r3, #5
 80072da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072de:	0150      	lsls	r0, r2, #5
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4641      	mov	r1, r8
 80072e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80072ea:	4649      	mov	r1, r9
 80072ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80072fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007304:	ebb2 040a 	subs.w	r4, r2, sl
 8007308:	eb63 050b 	sbc.w	r5, r3, fp
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	00eb      	lsls	r3, r5, #3
 8007316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800731a:	00e2      	lsls	r2, r4, #3
 800731c:	4614      	mov	r4, r2
 800731e:	461d      	mov	r5, r3
 8007320:	4643      	mov	r3, r8
 8007322:	18e3      	adds	r3, r4, r3
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	464b      	mov	r3, r9
 8007328:	eb45 0303 	adc.w	r3, r5, r3
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	f04f 0200 	mov.w	r2, #0
 8007332:	f04f 0300 	mov.w	r3, #0
 8007336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800733a:	4629      	mov	r1, r5
 800733c:	028b      	lsls	r3, r1, #10
 800733e:	4621      	mov	r1, r4
 8007340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007344:	4621      	mov	r1, r4
 8007346:	028a      	lsls	r2, r1, #10
 8007348:	4610      	mov	r0, r2
 800734a:	4619      	mov	r1, r3
 800734c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800734e:	2200      	movs	r2, #0
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	61fa      	str	r2, [r7, #28]
 8007354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007358:	f7f8 ffaa 	bl	80002b0 <__aeabi_uldivmod>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4613      	mov	r3, r2
 8007362:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007364:	4b0b      	ldr	r3, [pc, #44]	@ (8007394 <HAL_RCC_GetSysClockFreq+0x200>)
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	0c1b      	lsrs	r3, r3, #16
 800736a:	f003 0303 	and.w	r3, r3, #3
 800736e:	3301      	adds	r3, #1
 8007370:	005b      	lsls	r3, r3, #1
 8007372:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007374:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007378:	fbb2 f3f3 	udiv	r3, r2, r3
 800737c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800737e:	e002      	b.n	8007386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007380:	4b05      	ldr	r3, [pc, #20]	@ (8007398 <HAL_RCC_GetSysClockFreq+0x204>)
 8007382:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007388:	4618      	mov	r0, r3
 800738a:	3750      	adds	r7, #80	@ 0x50
 800738c:	46bd      	mov	sp, r7
 800738e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007392:	bf00      	nop
 8007394:	40023800 	.word	0x40023800
 8007398:	00f42400 	.word	0x00f42400
 800739c:	007a1200 	.word	0x007a1200

080073a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073a4:	4b03      	ldr	r3, [pc, #12]	@ (80073b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80073a6:	681b      	ldr	r3, [r3, #0]
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000004 	.word	0x20000004

080073b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073bc:	f7ff fff0 	bl	80073a0 <HAL_RCC_GetHCLKFreq>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b05      	ldr	r3, [pc, #20]	@ (80073d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	0a9b      	lsrs	r3, r3, #10
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4903      	ldr	r1, [pc, #12]	@ (80073dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80073ce:	5ccb      	ldrb	r3, [r1, r3]
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	40023800 	.word	0x40023800
 80073dc:	08010e80 	.word	0x08010e80

080073e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073e4:	f7ff ffdc 	bl	80073a0 <HAL_RCC_GetHCLKFreq>
 80073e8:	4602      	mov	r2, r0
 80073ea:	4b05      	ldr	r3, [pc, #20]	@ (8007400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	0b5b      	lsrs	r3, r3, #13
 80073f0:	f003 0307 	and.w	r3, r3, #7
 80073f4:	4903      	ldr	r1, [pc, #12]	@ (8007404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073f6:	5ccb      	ldrb	r3, [r1, r3]
 80073f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40023800 	.word	0x40023800
 8007404:	08010e80 	.word	0x08010e80

08007408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	220f      	movs	r2, #15
 8007416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007418:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <HAL_RCC_GetClockConfig+0x5c>)
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f003 0203 	and.w	r2, r3, #3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007424:	4b0f      	ldr	r3, [pc, #60]	@ (8007464 <HAL_RCC_GetClockConfig+0x5c>)
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007430:	4b0c      	ldr	r3, [pc, #48]	@ (8007464 <HAL_RCC_GetClockConfig+0x5c>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800743c:	4b09      	ldr	r3, [pc, #36]	@ (8007464 <HAL_RCC_GetClockConfig+0x5c>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	08db      	lsrs	r3, r3, #3
 8007442:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800744a:	4b07      	ldr	r3, [pc, #28]	@ (8007468 <HAL_RCC_GetClockConfig+0x60>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 020f 	and.w	r2, r3, #15
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	601a      	str	r2, [r3, #0]
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	40023800 	.word	0x40023800
 8007468:	40023c00 	.word	0x40023c00

0800746c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00a      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007494:	4b66      	ldr	r3, [pc, #408]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007496:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800749a:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a2:	4963      	ldr	r1, [pc, #396]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80074b6:	4b5e      	ldr	r3, [pc, #376]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80074b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c4:	495a      	ldr	r1, [pc, #360]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d105      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d075      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074f0:	4b50      	ldr	r3, [pc, #320]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074f6:	f7fa ff73 	bl	80023e0 <HAL_GetTick>
 80074fa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074fc:	e008      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074fe:	f7fa ff6f 	bl	80023e0 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d901      	bls.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e1dc      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007510:	4b47      	ldr	r3, [pc, #284]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1f0      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	019a      	lsls	r2, r3, #6
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	071b      	lsls	r3, r3, #28
 8007534:	493e      	ldr	r1, [pc, #248]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01f      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007548:	4b39      	ldr	r3, [pc, #228]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800754a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800754e:	0f1b      	lsrs	r3, r3, #28
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	019a      	lsls	r2, r3, #6
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	061b      	lsls	r3, r3, #24
 8007562:	431a      	orrs	r2, r3
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	071b      	lsls	r3, r3, #28
 8007568:	4931      	ldr	r1, [pc, #196]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800756a:	4313      	orrs	r3, r2
 800756c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007570:	4b2f      	ldr	r3, [pc, #188]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007576:	f023 021f 	bic.w	r2, r3, #31
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	3b01      	subs	r3, #1
 8007580:	492b      	ldr	r1, [pc, #172]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00d      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	019a      	lsls	r2, r3, #6
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	061b      	lsls	r3, r3, #24
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	071b      	lsls	r3, r3, #28
 80075a8:	4921      	ldr	r1, [pc, #132]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075b0:	4b20      	ldr	r3, [pc, #128]	@ (8007634 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80075b2:	2201      	movs	r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80075b6:	f7fa ff13 	bl	80023e0 <HAL_GetTick>
 80075ba:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075bc:	e008      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075be:	f7fa ff0f 	bl	80023e0 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d901      	bls.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e17c      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075d0:	4b17      	ldr	r3, [pc, #92]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0f0      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d112      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10c      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f000 80ce 	beq.w	800779e <HAL_RCCEx_PeriphCLKConfig+0x332>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8007606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800760a:	f040 80c8 	bne.w	800779e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800760e:	4b0a      	ldr	r3, [pc, #40]	@ (8007638 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007610:	2200      	movs	r2, #0
 8007612:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007614:	f7fa fee4 	bl	80023e0 <HAL_GetTick>
 8007618:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800761a:	e00f      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800761c:	f7fa fee0 	bl	80023e0 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	2b02      	cmp	r3, #2
 8007628:	d908      	bls.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e14d      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800762e:	bf00      	nop
 8007630:	40023800 	.word	0x40023800
 8007634:	42470068 	.word	0x42470068
 8007638:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800763c:	4ba5      	ldr	r3, [pc, #660]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007648:	d0e8      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d02e      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007656:	4b9f      	ldr	r3, [pc, #636]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	3301      	adds	r3, #1
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007668:	4b9a      	ldr	r3, [pc, #616]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766e:	0f1b      	lsrs	r3, r3, #28
 8007670:	f003 0307 	and.w	r3, r3, #7
 8007674:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	019a      	lsls	r2, r3, #6
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	085b      	lsrs	r3, r3, #1
 8007680:	3b01      	subs	r3, #1
 8007682:	041b      	lsls	r3, r3, #16
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	061b      	lsls	r3, r3, #24
 800768c:	431a      	orrs	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	071b      	lsls	r3, r3, #28
 8007692:	4990      	ldr	r1, [pc, #576]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800769a:	4b8e      	ldr	r3, [pc, #568]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800769c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076a0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a8:	3b01      	subs	r3, #1
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	4989      	ldr	r1, [pc, #548]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d02c      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80076c0:	4b84      	ldr	r3, [pc, #528]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c6:	0c1b      	lsrs	r3, r3, #16
 80076c8:	f003 0303 	and.w	r3, r3, #3
 80076cc:	3301      	adds	r3, #1
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076d2:	4b80      	ldr	r3, [pc, #512]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076d8:	0e1b      	lsrs	r3, r3, #24
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	019a      	lsls	r2, r3, #6
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	085b      	lsrs	r3, r3, #1
 80076ea:	3b01      	subs	r3, #1
 80076ec:	041b      	lsls	r3, r3, #16
 80076ee:	431a      	orrs	r2, r3
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	061b      	lsls	r3, r3, #24
 80076f4:	431a      	orrs	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	071b      	lsls	r3, r3, #28
 80076fc:	4975      	ldr	r1, [pc, #468]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007704:	4b73      	ldr	r3, [pc, #460]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800770a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007712:	4970      	ldr	r1, [pc, #448]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007714:	4313      	orrs	r3, r2
 8007716:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007722:	2b00      	cmp	r3, #0
 8007724:	d024      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x304>
        (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800772a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800772e:	d11f      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007730:	4b68      	ldr	r3, [pc, #416]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007736:	0e1b      	lsrs	r3, r3, #24
 8007738:	f003 030f 	and.w	r3, r3, #15
 800773c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800773e:	4b65      	ldr	r3, [pc, #404]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007744:	0f1b      	lsrs	r3, r3, #28
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	019a      	lsls	r2, r3, #6
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	3b01      	subs	r3, #1
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	431a      	orrs	r2, r3
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	061b      	lsls	r3, r3, #24
 8007762:	431a      	orrs	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	071b      	lsls	r3, r3, #28
 8007768:	495a      	ldr	r1, [pc, #360]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800776a:	4313      	orrs	r3, r2
 800776c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007770:	4b59      	ldr	r3, [pc, #356]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8007772:	2201      	movs	r2, #1
 8007774:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007776:	f7fa fe33 	bl	80023e0 <HAL_GetTick>
 800777a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800777c:	e008      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800777e:	f7fa fe2f 	bl	80023e0 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e09c      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007790:	4b50      	ldr	r3, [pc, #320]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800779c:	d1ef      	bne.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 8083 	beq.w	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077ac:	2300      	movs	r3, #0
 80077ae:	60bb      	str	r3, [r7, #8]
 80077b0:	4b48      	ldr	r3, [pc, #288]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	4a47      	ldr	r2, [pc, #284]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80077bc:	4b45      	ldr	r3, [pc, #276]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077c8:	4b44      	ldr	r3, [pc, #272]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a43      	ldr	r2, [pc, #268]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80077ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077d4:	f7fa fe04 	bl	80023e0 <HAL_GetTick>
 80077d8:	61f8      	str	r0, [r7, #28]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80077da:	e008      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077dc:	f7fa fe00 	bl	80023e0 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	d901      	bls.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e06d      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80077ee:	4b3b      	ldr	r3, [pc, #236]	@ (80078dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0f0      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077fa:	4b36      	ldr	r3, [pc, #216]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80077fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007802:	61bb      	str	r3, [r7, #24]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d02f      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800780e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	429a      	cmp	r2, r3
 8007816:	d028      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007818:	4b2e      	ldr	r3, [pc, #184]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800781a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800781c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007820:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007822:	4b2f      	ldr	r3, [pc, #188]	@ (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007824:	2201      	movs	r2, #1
 8007826:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007828:	4b2d      	ldr	r3, [pc, #180]	@ (80078e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800782e:	4a29      	ldr	r2, [pc, #164]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007834:	4b27      	ldr	r3, [pc, #156]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b01      	cmp	r3, #1
 800783e:	d114      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007840:	f7fa fdce 	bl	80023e0 <HAL_GetTick>
 8007844:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007846:	e00a      	b.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007848:	f7fa fdca 	bl	80023e0 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007856:	4293      	cmp	r3, r2
 8007858:	d901      	bls.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e035      	b.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800785e:	4b1d      	ldr	r3, [pc, #116]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0ee      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007872:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007876:	d10d      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8007878:	4b16      	ldr	r3, [pc, #88]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007884:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007888:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800788c:	4911      	ldr	r1, [pc, #68]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800788e:	4313      	orrs	r3, r2
 8007890:	608b      	str	r3, [r1, #8]
 8007892:	e005      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007894:	4b0f      	ldr	r3, [pc, #60]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	4a0e      	ldr	r2, [pc, #56]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800789a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800789e:	6093      	str	r3, [r2, #8]
 80078a0:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80078a2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078ac:	4909      	ldr	r1, [pc, #36]	@ (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d004      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80078c4:	4b07      	ldr	r3, [pc, #28]	@ (80078e4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80078c6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3720      	adds	r7, #32
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	40023800 	.word	0x40023800
 80078d8:	42470070 	.word	0x42470070
 80078dc:	40007000 	.word	0x40007000
 80078e0:	42470e40 	.word	0x42470e40
 80078e4:	424711e0 	.word	0x424711e0

080078e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e273      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	d075      	beq.n	80079f2 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007906:	4b88      	ldr	r3, [pc, #544]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 030c 	and.w	r3, r3, #12
 800790e:	2b04      	cmp	r3, #4
 8007910:	d00c      	beq.n	800792c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007912:	4b85      	ldr	r3, [pc, #532]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 030c 	and.w	r3, r3, #12
        || \
 800791a:	2b08      	cmp	r3, #8
 800791c:	d112      	bne.n	8007944 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800791e:	4b82      	ldr	r3, [pc, #520]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800792a:	d10b      	bne.n	8007944 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800792c:	4b7e      	ldr	r3, [pc, #504]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d05b      	beq.n	80079f0 <HAL_RCC_OscConfig+0x108>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d157      	bne.n	80079f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e24e      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800794c:	d106      	bne.n	800795c <HAL_RCC_OscConfig+0x74>
 800794e:	4b76      	ldr	r3, [pc, #472]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a75      	ldr	r2, [pc, #468]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	e01d      	b.n	8007998 <HAL_RCC_OscConfig+0xb0>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007964:	d10c      	bne.n	8007980 <HAL_RCC_OscConfig+0x98>
 8007966:	4b70      	ldr	r3, [pc, #448]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a6f      	ldr	r2, [pc, #444]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 800796c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	4b6d      	ldr	r3, [pc, #436]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a6c      	ldr	r2, [pc, #432]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	e00b      	b.n	8007998 <HAL_RCC_OscConfig+0xb0>
 8007980:	4b69      	ldr	r3, [pc, #420]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a68      	ldr	r2, [pc, #416]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	4b66      	ldr	r3, [pc, #408]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a65      	ldr	r2, [pc, #404]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007992:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d013      	beq.n	80079c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a0:	f7fa fd1e 	bl	80023e0 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079a8:	f7fa fd1a 	bl	80023e0 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b64      	cmp	r3, #100	@ 0x64
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e213      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ba:	4b5b      	ldr	r3, [pc, #364]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f0      	beq.n	80079a8 <HAL_RCC_OscConfig+0xc0>
 80079c6:	e014      	b.n	80079f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079c8:	f7fa fd0a 	bl	80023e0 <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ce:	e008      	b.n	80079e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d0:	f7fa fd06 	bl	80023e0 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b64      	cmp	r3, #100	@ 0x64
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e1ff      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079e2:	4b51      	ldr	r3, [pc, #324]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1f0      	bne.n	80079d0 <HAL_RCC_OscConfig+0xe8>
 80079ee:	e000      	b.n	80079f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d063      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80079fe:	4b4a      	ldr	r3, [pc, #296]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	f003 030c 	and.w	r3, r3, #12
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a0a:	4b47      	ldr	r3, [pc, #284]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8007a12:	2b08      	cmp	r3, #8
 8007a14:	d11c      	bne.n	8007a50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a16:	4b44      	ldr	r3, [pc, #272]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d116      	bne.n	8007a50 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a22:	4b41      	ldr	r3, [pc, #260]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d005      	beq.n	8007a3a <HAL_RCC_OscConfig+0x152>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d001      	beq.n	8007a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e1d3      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	00db      	lsls	r3, r3, #3
 8007a48:	4937      	ldr	r1, [pc, #220]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a4e:	e03a      	b.n	8007ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d020      	beq.n	8007a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a58:	4b34      	ldr	r3, [pc, #208]	@ (8007b2c <HAL_RCC_OscConfig+0x244>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a5e:	f7fa fcbf 	bl	80023e0 <HAL_GetTick>
 8007a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a64:	e008      	b.n	8007a78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a66:	f7fa fcbb 	bl	80023e0 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e1b4      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a78:	4b2b      	ldr	r3, [pc, #172]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0302 	and.w	r3, r3, #2
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a84:	4b28      	ldr	r3, [pc, #160]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	00db      	lsls	r3, r3, #3
 8007a92:	4925      	ldr	r1, [pc, #148]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	600b      	str	r3, [r1, #0]
 8007a98:	e015      	b.n	8007ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a9a:	4b24      	ldr	r3, [pc, #144]	@ (8007b2c <HAL_RCC_OscConfig+0x244>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa0:	f7fa fc9e 	bl	80023e0 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aa8:	f7fa fc9a 	bl	80023e0 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e193      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aba:	4b1b      	ldr	r3, [pc, #108]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1f0      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0308 	and.w	r3, r3, #8
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d036      	beq.n	8007b40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d016      	beq.n	8007b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ada:	4b15      	ldr	r3, [pc, #84]	@ (8007b30 <HAL_RCC_OscConfig+0x248>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae0:	f7fa fc7e 	bl	80023e0 <HAL_GetTick>
 8007ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ae8:	f7fa fc7a 	bl	80023e0 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e173      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007afa:	4b0b      	ldr	r3, [pc, #44]	@ (8007b28 <HAL_RCC_OscConfig+0x240>)
 8007afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0f0      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x200>
 8007b06:	e01b      	b.n	8007b40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b08:	4b09      	ldr	r3, [pc, #36]	@ (8007b30 <HAL_RCC_OscConfig+0x248>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b0e:	f7fa fc67 	bl	80023e0 <HAL_GetTick>
 8007b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b14:	e00e      	b.n	8007b34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b16:	f7fa fc63 	bl	80023e0 <HAL_GetTick>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d907      	bls.n	8007b34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e15c      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
 8007b28:	40023800 	.word	0x40023800
 8007b2c:	42470000 	.word	0x42470000
 8007b30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b34:	4b8a      	ldr	r3, [pc, #552]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1ea      	bne.n	8007b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f003 0304 	and.w	r3, r3, #4
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 8097 	beq.w	8007c7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b52:	4b83      	ldr	r3, [pc, #524]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10f      	bne.n	8007b7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b5e:	2300      	movs	r3, #0
 8007b60:	60bb      	str	r3, [r7, #8]
 8007b62:	4b7f      	ldr	r3, [pc, #508]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b66:	4a7e      	ldr	r2, [pc, #504]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b6e:	4b7c      	ldr	r3, [pc, #496]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b76:	60bb      	str	r3, [r7, #8]
 8007b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b7e:	4b79      	ldr	r3, [pc, #484]	@ (8007d64 <HAL_RCC_OscConfig+0x47c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d118      	bne.n	8007bbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b8a:	4b76      	ldr	r3, [pc, #472]	@ (8007d64 <HAL_RCC_OscConfig+0x47c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a75      	ldr	r2, [pc, #468]	@ (8007d64 <HAL_RCC_OscConfig+0x47c>)
 8007b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b96:	f7fa fc23 	bl	80023e0 <HAL_GetTick>
 8007b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b9c:	e008      	b.n	8007bb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b9e:	f7fa fc1f 	bl	80023e0 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e118      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bb0:	4b6c      	ldr	r3, [pc, #432]	@ (8007d64 <HAL_RCC_OscConfig+0x47c>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0f0      	beq.n	8007b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d106      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x2ea>
 8007bc4:	4b66      	ldr	r3, [pc, #408]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bc8:	4a65      	ldr	r2, [pc, #404]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bd0:	e01c      	b.n	8007c0c <HAL_RCC_OscConfig+0x324>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	2b05      	cmp	r3, #5
 8007bd8:	d10c      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x30c>
 8007bda:	4b61      	ldr	r3, [pc, #388]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bde:	4a60      	ldr	r2, [pc, #384]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007be0:	f043 0304 	orr.w	r3, r3, #4
 8007be4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007be6:	4b5e      	ldr	r3, [pc, #376]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bea:	4a5d      	ldr	r2, [pc, #372]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007bec:	f043 0301 	orr.w	r3, r3, #1
 8007bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bf2:	e00b      	b.n	8007c0c <HAL_RCC_OscConfig+0x324>
 8007bf4:	4b5a      	ldr	r3, [pc, #360]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf8:	4a59      	ldr	r2, [pc, #356]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007bfa:	f023 0301 	bic.w	r3, r3, #1
 8007bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c00:	4b57      	ldr	r3, [pc, #348]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c04:	4a56      	ldr	r2, [pc, #344]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007c06:	f023 0304 	bic.w	r3, r3, #4
 8007c0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d015      	beq.n	8007c40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c14:	f7fa fbe4 	bl	80023e0 <HAL_GetTick>
 8007c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c1a:	e00a      	b.n	8007c32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c1c:	f7fa fbe0 	bl	80023e0 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e0d7      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c32:	4b4b      	ldr	r3, [pc, #300]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0ee      	beq.n	8007c1c <HAL_RCC_OscConfig+0x334>
 8007c3e:	e014      	b.n	8007c6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c40:	f7fa fbce 	bl	80023e0 <HAL_GetTick>
 8007c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c46:	e00a      	b.n	8007c5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c48:	f7fa fbca 	bl	80023e0 <HAL_GetTick>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d901      	bls.n	8007c5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c5a:	2303      	movs	r3, #3
 8007c5c:	e0c1      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c5e:	4b40      	ldr	r3, [pc, #256]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1ee      	bne.n	8007c48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d105      	bne.n	8007c7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c70:	4b3b      	ldr	r3, [pc, #236]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c74:	4a3a      	ldr	r2, [pc, #232]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80ad 	beq.w	8007de0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c86:	4b36      	ldr	r3, [pc, #216]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f003 030c 	and.w	r3, r3, #12
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d060      	beq.n	8007d54 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d145      	bne.n	8007d26 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c9a:	4b33      	ldr	r3, [pc, #204]	@ (8007d68 <HAL_RCC_OscConfig+0x480>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca0:	f7fa fb9e 	bl	80023e0 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ca8:	f7fa fb9a 	bl	80023e0 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e093      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cba:	4b29      	ldr	r3, [pc, #164]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1f0      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69da      	ldr	r2, [r3, #28]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	019b      	lsls	r3, r3, #6
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cdc:	085b      	lsrs	r3, r3, #1
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	041b      	lsls	r3, r3, #16
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce8:	061b      	lsls	r3, r3, #24
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cf0:	071b      	lsls	r3, r3, #28
 8007cf2:	491b      	ldr	r1, [pc, #108]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d68 <HAL_RCC_OscConfig+0x480>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfe:	f7fa fb6f 	bl	80023e0 <HAL_GetTick>
 8007d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d04:	e008      	b.n	8007d18 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d06:	f7fa fb6b 	bl	80023e0 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e064      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d18:	4b11      	ldr	r3, [pc, #68]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0f0      	beq.n	8007d06 <HAL_RCC_OscConfig+0x41e>
 8007d24:	e05c      	b.n	8007de0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d26:	4b10      	ldr	r3, [pc, #64]	@ (8007d68 <HAL_RCC_OscConfig+0x480>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d2c:	f7fa fb58 	bl	80023e0 <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d34:	f7fa fb54 	bl	80023e0 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e04d      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d46:	4b06      	ldr	r3, [pc, #24]	@ (8007d60 <HAL_RCC_OscConfig+0x478>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1f0      	bne.n	8007d34 <HAL_RCC_OscConfig+0x44c>
 8007d52:	e045      	b.n	8007de0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d107      	bne.n	8007d6c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e040      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
 8007d60:	40023800 	.word	0x40023800
 8007d64:	40007000 	.word	0x40007000
 8007d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8007dec <HAL_RCC_OscConfig+0x504>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d030      	beq.n	8007ddc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d129      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d122      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d119      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db2:	085b      	lsrs	r3, r3, #1
 8007db4:	3b01      	subs	r3, #1
 8007db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d10f      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d107      	bne.n	8007ddc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d001      	beq.n	8007de0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e000      	b.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40023800 	.word	0x40023800

08007df0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e10c      	b.n	800802c <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d106      	bne.n	8007e2c <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7fa f8d6 	bl	8001fd8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f903 	bl	8008040 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f938 	bl	80080b0 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d030      	beq.n	8007eaa <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f957 	bl	80080fc <SAI_GetInputClock>
 8007e4e:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8007e50:	68ba      	ldr	r2, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4413      	add	r3, r2
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	025b      	lsls	r3, r3, #9
 8007e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e66:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4a72      	ldr	r2, [pc, #456]	@ (8008034 <HAL_SAI_Init+0x244>)
 8007e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e70:	08da      	lsrs	r2, r3, #3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8007e76:	68f9      	ldr	r1, [r7, #12]
 8007e78:	4b6e      	ldr	r3, [pc, #440]	@ (8008034 <HAL_SAI_Init+0x244>)
 8007e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007e7e:	08da      	lsrs	r2, r3, #3
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	1aca      	subs	r2, r1, r3
 8007e8a:	2a08      	cmp	r2, #8
 8007e8c:	d904      	bls.n	8007e98 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d104      	bne.n	8007eaa <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	085a      	lsrs	r2, r3, #1
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <HAL_SAI_Init+0xca>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d109      	bne.n	8007ece <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_SAI_Init+0xd6>
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e001      	b.n	8007eca <HAL_SAI_Init+0xda>
 8007ec6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e008      	b.n	8007ee0 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d102      	bne.n	8007edc <HAL_SAI_Init+0xec>
 8007ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007eda:	e000      	b.n	8007ede <HAL_SAI_Init+0xee>
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b03      	cmp	r3, #3
 8007ee6:	d811      	bhi.n	8007f0c <HAL_SAI_Init+0x11c>
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d20b      	bcs.n	8007f04 <HAL_SAI_Init+0x114>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <HAL_SAI_Init+0x106>
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d003      	beq.n	8007efc <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8007ef4:	e00a      	b.n	8007f0c <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	613b      	str	r3, [r7, #16]
    break;
 8007efa:	e008      	b.n	8007f0e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007efc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f00:	613b      	str	r3, [r7, #16]
    break;
 8007f02:	e004      	b.n	8007f0e <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007f04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007f08:	613b      	str	r3, [r7, #16]
    break;
 8007f0a:	e000      	b.n	8007f0e <HAL_SAI_Init+0x11e>
      break;
 8007f0c:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6819      	ldr	r1, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	4b47      	ldr	r3, [pc, #284]	@ (8008038 <HAL_SAI_Init+0x248>)
 8007f1a:	400b      	ands	r3, r1
 8007f1c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6819      	ldr	r1, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f32:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8007f46:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007f52:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f58:	051b      	lsls	r3, r3, #20
 8007f5a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8007f72:	f023 030f 	bic.w	r3, r3, #15
 8007f76:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6859      	ldr	r1, [r3, #4]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f86:	431a      	orrs	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6899      	ldr	r1, [r3, #8]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	4b26      	ldr	r3, [pc, #152]	@ (800803c <HAL_SAI_Init+0x24c>)
 8007fa2:	400b      	ands	r3, r1
 8007fa4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6899      	ldr	r1, [r3, #8]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007fb6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSOffset     |
 8007fbc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                           hsai->FrameInit.FSDefinition |
 8007fc2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007fcc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68d9      	ldr	r1, [r3, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8007fe4:	400b      	ands	r3, r1
 8007fe6:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68d9      	ldr	r1, [r3, #12]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ff6:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ffc:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8007ffe:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008004:	3b01      	subs	r3, #1
 8008006:	021b      	lsls	r3, r3, #8
 8008008:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3718      	adds	r7, #24
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	cccccccd 	.word	0xcccccccd
 8008038:	ff05c010 	.word	0xff05c010
 800803c:	fff88000 	.word	0xfff88000

08008040 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008048:	4b17      	ldr	r3, [pc, #92]	@ (80080a8 <SAI_Disable+0x68>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a17      	ldr	r2, [pc, #92]	@ (80080ac <SAI_Disable+0x6c>)
 800804e:	fba2 2303 	umull	r2, r3, r2, r3
 8008052:	0b1b      	lsrs	r3, r3, #12
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800806a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	1e5a      	subs	r2, r3, #1
 8008070:	60fa      	str	r2, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10a      	bne.n	800808c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800807c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      status = HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	72fb      	strb	r3, [r7, #11]
      break;
 800808a:	e006      	b.n	800809a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e8      	bne.n	800806c <SAI_Disable+0x2c>

  return status;
 800809a:	7afb      	ldrb	r3, [r7, #11]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	20000004 	.word	0x20000004
 80080ac:	95cbec1b 	.word	0x95cbec1b

080080b0 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(const SAI_HandleTypeDef *hsai)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d00c      	beq.n	80080da <SAI_BlockSynchroConfig+0x2a>
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d80d      	bhi.n	80080e0 <SAI_BlockSynchroConfig+0x30>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <SAI_BlockSynchroConfig+0x1e>
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d003      	beq.n	80080d4 <SAI_BlockSynchroConfig+0x24>
 80080cc:	e008      	b.n	80080e0 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
      break;
 80080d2:	e008      	b.n	80080e6 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80080d4:	2310      	movs	r3, #16
 80080d6:	60fb      	str	r3, [r7, #12]
      break;
 80080d8:	e005      	b.n	80080e6 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80080da:	2320      	movs	r3, #32
 80080dc:	60fb      	str	r3, [r7, #12]
      break;
 80080de:	e002      	b.n	80080e6 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
      break;
 80080e4:	bf00      	nop
  }
  SAI1->GCR = tmpregisterGCR;
 80080e6:	4a04      	ldr	r2, [pc, #16]	@ (80080f8 <SAI_BlockSynchroConfig+0x48>)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6013      	str	r3, [r2, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80080ec:	bf00      	nop
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	40015800 	.word	0x40015800

080080fc <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(const SAI_HandleTypeDef *hsai)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
  defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t vcoinput = 0U, tmpreg = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	613b      	str	r3, [r7, #16]
 800810c:	2300      	movs	r3, #0
 800810e:	60fb      	str	r3, [r7, #12]

  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));

  /* SAI Block clock source selection */
  if (hsai->Instance == SAI1_Block_A)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a46      	ldr	r2, [pc, #280]	@ (8008230 <SAI_GetInputClock+0x134>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d10b      	bne.n	8008132 <SAI_GetInputClock+0x36>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 800811a:	4b46      	ldr	r3, [pc, #280]	@ (8008234 <SAI_GetInputClock+0x138>)
 800811c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008120:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	4942      	ldr	r1, [pc, #264]	@ (8008234 <SAI_GetInputClock+0x138>)
 800812a:	4313      	orrs	r3, r2
 800812c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8008130:	e00b      	b.n	800814a <SAI_GetInputClock+0x4e>
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8008132:	4b40      	ldr	r3, [pc, #256]	@ (8008234 <SAI_GetInputClock+0x138>)
 8008134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008138:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	493c      	ldr	r1, [pc, #240]	@ (8008234 <SAI_GetInputClock+0x138>)
 8008144:	4313      	orrs	r3, r2
 8008146:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /* VCO Input Clock value calculation */
  if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800814a:	4b3a      	ldr	r3, [pc, #232]	@ (8008234 <SAI_GetInputClock+0x138>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <SAI_GetInputClock+0x6c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008156:	4b37      	ldr	r3, [pc, #220]	@ (8008234 <SAI_GetInputClock+0x138>)
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800815e:	4a36      	ldr	r2, [pc, #216]	@ (8008238 <SAI_GetInputClock+0x13c>)
 8008160:	fbb2 f3f3 	udiv	r3, r2, r3
 8008164:	613b      	str	r3, [r7, #16]
 8008166:	e007      	b.n	8008178 <SAI_GetInputClock+0x7c>
  }
  else
  {
    /* In Case the PLL Source is HSE (External Clock) */
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008168:	4b32      	ldr	r3, [pc, #200]	@ (8008234 <SAI_GetInputClock+0x138>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008170:	4a32      	ldr	r2, [pc, #200]	@ (800823c <SAI_GetInputClock+0x140>)
 8008172:	fbb2 f3f3 	udiv	r3, r2, r3
 8008176:	613b      	str	r3, [r7, #16]
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d121      	bne.n	80081c4 <SAI_GetInputClock+0xc8>
  {
    /* Configure the PLLI2S division factor */
    /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
    /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8008180:	4b2c      	ldr	r3, [pc, #176]	@ (8008234 <SAI_GetInputClock+0x138>)
 8008182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008186:	0e1b      	lsrs	r3, r3, #24
 8008188:	f003 030f 	and.w	r3, r3, #15
 800818c:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U)) / (tmpreg);
 800818e:	4b29      	ldr	r3, [pc, #164]	@ (8008234 <SAI_GetInputClock+0x138>)
 8008190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008194:	099b      	lsrs	r3, r3, #6
 8008196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	fb03 f202 	mul.w	r2, r3, r2
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a6:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80081a8:	4b22      	ldr	r3, [pc, #136]	@ (8008234 <SAI_GetInputClock+0x138>)
 80081aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081ae:	0a1b      	lsrs	r3, r3, #8
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	3301      	adds	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c0:	617b      	str	r3, [r7, #20]
 80081c2:	e02d      	b.n	8008220 <SAI_GetInputClock+0x124>

  }
  else if (hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081cc:	d120      	bne.n	8008210 <SAI_GetInputClock+0x114>
  {
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80081ce:	4b19      	ldr	r3, [pc, #100]	@ (8008234 <SAI_GetInputClock+0x138>)
 80081d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081d4:	0e1b      	lsrs	r3, r3, #24
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	60fb      	str	r3, [r7, #12]
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U)) / (tmpreg);
 80081dc:	4b15      	ldr	r3, [pc, #84]	@ (8008234 <SAI_GetInputClock+0x138>)
 80081de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081e2:	099b      	lsrs	r3, r3, #6
 80081e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	fb03 f202 	mul.w	r2, r3, r2
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	617b      	str	r3, [r7, #20]

    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80081f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008234 <SAI_GetInputClock+0x138>)
 80081f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081fc:	f003 031f 	and.w	r3, r3, #31
 8008200:	3301      	adds	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]
    saiclocksource = saiclocksource / (tmpreg);
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	e007      	b.n	8008220 <SAI_GetInputClock+0x124>
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8008210:	4b08      	ldr	r3, [pc, #32]	@ (8008234 <SAI_GetInputClock+0x138>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	4a07      	ldr	r2, [pc, #28]	@ (8008234 <SAI_GetInputClock+0x138>)
 8008216:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800821a:	6093      	str	r3, [r2, #8]

    saiclocksource = EXTERNAL_CLOCK_VALUE;
 800821c:	4b08      	ldr	r3, [pc, #32]	@ (8008240 <SAI_GetInputClock+0x144>)
 800821e:	617b      	str	r3, [r7, #20]
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8008220:	697b      	ldr	r3, [r7, #20]
}
 8008222:	4618      	mov	r0, r3
 8008224:	371c      	adds	r7, #28
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	40015804 	.word	0x40015804
 8008234:	40023800 	.word	0x40023800
 8008238:	00f42400 	.word	0x00f42400
 800823c:	007a1200 	.word	0x007a1200
 8008240:	00bb8000 	.word	0x00bb8000

08008244 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e022      	b.n	800829c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d105      	bne.n	800826e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7f9 fc27 	bl	8001abc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2203      	movs	r2, #3
 8008272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f814 	bl	80082a4 <HAL_SD_InitCard>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e00a      	b.n	800829c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082a4:	b5b0      	push	{r4, r5, r7, lr}
 80082a6:	b08e      	sub	sp, #56	@ 0x38
 80082a8:	af04      	add	r7, sp, #16
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80082b8:	2300      	movs	r3, #0
 80082ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80082bc:	2300      	movs	r3, #0
 80082be:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80082c0:	2376      	movs	r3, #118	@ 0x76
 80082c2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681d      	ldr	r5, [r3, #0]
 80082c8:	466c      	mov	r4, sp
 80082ca:	f107 0314 	add.w	r3, r7, #20
 80082ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082d6:	f107 0308 	add.w	r3, r7, #8
 80082da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082dc:	4628      	mov	r0, r5
 80082de:	f003 fabf 	bl	800b860 <SDIO_Init>
 80082e2:	4603      	mov	r3, r0
 80082e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80082e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d001      	beq.n	80082f4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e04f      	b.n	8008394 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80082f4:	4b29      	ldr	r3, [pc, #164]	@ (800839c <HAL_SD_InitCard+0xf8>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4618      	mov	r0, r3
 8008300:	f003 faf7 	bl	800b8f2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008304:	4b25      	ldr	r3, [pc, #148]	@ (800839c <HAL_SD_InitCard+0xf8>)
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800830a:	2002      	movs	r0, #2
 800830c:	f7fa f874 	bl	80023f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 ff03 	bl	800911c <SD_PowerON>
 8008316:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00b      	beq.n	8008336 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	431a      	orrs	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e02e      	b.n	8008394 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fe22 	bl	8008f80 <SD_InitCard>
 800833c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e01b      	b.n	8008394 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008364:	4618      	mov	r0, r3
 8008366:	f003 fb56 	bl	800ba16 <SDMMC_CmdBlockLength>
 800836a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800836c:	6a3b      	ldr	r3, [r7, #32]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00f      	beq.n	8008392 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a0a      	ldr	r2, [pc, #40]	@ (80083a0 <HAL_SD_InitCard+0xfc>)
 8008378:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	431a      	orrs	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e000      	b.n	8008394 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3728      	adds	r7, #40	@ 0x28
 8008398:	46bd      	mov	sp, r7
 800839a:	bdb0      	pop	{r4, r5, r7, pc}
 800839c:	422580a0 	.word	0x422580a0
 80083a0:	004005ff 	.word	0x004005ff

080083a4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b092      	sub	sp, #72	@ 0x48
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80083b2:	f7fa f815 	bl	80023e0 <HAL_GetTick>
 80083b6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d107      	bne.n	80083d6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ca:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e1bd      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b01      	cmp	r3, #1
 80083e0:	f040 81b0 	bne.w	8008744 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	441a      	add	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d907      	bls.n	8008408 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083fc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e1a4      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2203      	movs	r2, #3
 800840c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2200      	movs	r2, #0
 8008416:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800841c:	2b01      	cmp	r3, #1
 800841e:	d002      	beq.n	8008426 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008422:	025b      	lsls	r3, r3, #9
 8008424:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008426:	f04f 33ff 	mov.w	r3, #4294967295
 800842a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	025b      	lsls	r3, r3, #9
 8008430:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008432:	2390      	movs	r3, #144	@ 0x90
 8008434:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008436:	2302      	movs	r3, #2
 8008438:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800843a:	2300      	movs	r3, #0
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800843e:	2301      	movs	r3, #1
 8008440:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f107 0214 	add.w	r2, r7, #20
 800844a:	4611      	mov	r1, r2
 800844c:	4618      	mov	r0, r3
 800844e:	f003 fab6 	bl	800b9be <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d90a      	bls.n	800846e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2202      	movs	r2, #2
 800845c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008464:	4618      	mov	r0, r3
 8008466:	f003 fb1a 	bl	800ba9e <SDMMC_CmdReadMultiBlock>
 800846a:	6478      	str	r0, [r7, #68]	@ 0x44
 800846c:	e009      	b.n	8008482 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2201      	movs	r2, #1
 8008472:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800847a:	4618      	mov	r0, r3
 800847c:	f003 faed 	bl	800ba5a <SDMMC_CmdReadSingleBlock>
 8008480:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008484:	2b00      	cmp	r3, #0
 8008486:	d012      	beq.n	80084ae <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a7a      	ldr	r2, [pc, #488]	@ (8008678 <HAL_SD_ReadBlocks+0x2d4>)
 800848e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008496:	431a      	orrs	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e151      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80084b2:	e061      	b.n	8008578 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d03c      	beq.n	800853c <HAL_SD_ReadBlocks+0x198>
 80084c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d039      	beq.n	800853c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80084c8:	2300      	movs	r3, #0
 80084ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80084cc:	e033      	b.n	8008536 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f003 f9ef 	bl	800b8b6 <SDIO_ReadFIFO>
 80084d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80084da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e4:	3301      	adds	r3, #1
 80084e6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80084e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ea:	3b01      	subs	r3, #1
 80084ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80084ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f0:	0a1b      	lsrs	r3, r3, #8
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084fa:	3301      	adds	r3, #1
 80084fc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80084fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008500:	3b01      	subs	r3, #1
 8008502:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008506:	0c1b      	lsrs	r3, r3, #16
 8008508:	b2da      	uxtb	r2, r3
 800850a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800850e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008510:	3301      	adds	r3, #1
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008516:	3b01      	subs	r3, #1
 8008518:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800851a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851c:	0e1b      	lsrs	r3, r3, #24
 800851e:	b2da      	uxtb	r2, r3
 8008520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008522:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008526:	3301      	adds	r3, #1
 8008528:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800852a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800852c:	3b01      	subs	r3, #1
 800852e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8008530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008532:	3301      	adds	r3, #1
 8008534:	643b      	str	r3, [r7, #64]	@ 0x40
 8008536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008538:	2b07      	cmp	r3, #7
 800853a:	d9c8      	bls.n	80084ce <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800853c:	f7f9 ff50 	bl	80023e0 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008548:	429a      	cmp	r2, r3
 800854a:	d902      	bls.n	8008552 <HAL_SD_ReadBlocks+0x1ae>
 800854c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800854e:	2b00      	cmp	r3, #0
 8008550:	d112      	bne.n	8008578 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a48      	ldr	r2, [pc, #288]	@ (8008678 <HAL_SD_ReadBlocks+0x2d4>)
 8008558:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800855e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e0ec      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8008582:	2b00      	cmp	r3, #0
 8008584:	d096      	beq.n	80084b4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800858c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008590:	2b00      	cmp	r3, #0
 8008592:	d022      	beq.n	80085da <HAL_SD_ReadBlocks+0x236>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d91f      	bls.n	80085da <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d01b      	beq.n	80085da <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f003 fae0 	bl	800bb6c <SDMMC_CmdStopTransfer>
 80085ac:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80085ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d012      	beq.n	80085da <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a2f      	ldr	r2, [pc, #188]	@ (8008678 <HAL_SD_ReadBlocks+0x2d4>)
 80085ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c2:	431a      	orrs	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e0bb      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e0:	f003 0308 	and.w	r3, r3, #8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <HAL_SD_ReadBlocks+0x26a>
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a22      	ldr	r2, [pc, #136]	@ (8008678 <HAL_SD_ReadBlocks+0x2d4>)
 80085ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f4:	f043 0208 	orr.w	r2, r3, #8
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e0a1      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008614:	f003 0302 	and.w	r3, r3, #2
 8008618:	2b00      	cmp	r3, #0
 800861a:	d012      	beq.n	8008642 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a15      	ldr	r2, [pc, #84]	@ (8008678 <HAL_SD_ReadBlocks+0x2d4>)
 8008622:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008628:	f043 0202 	orr.w	r2, r3, #2
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e087      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d064      	beq.n	800871a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a08      	ldr	r2, [pc, #32]	@ (8008678 <HAL_SD_ReadBlocks+0x2d4>)
 8008656:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865c:	f043 0220 	orr.w	r2, r3, #32
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e06d      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>
 8008676:	bf00      	nop
 8008678:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	f003 f918 	bl	800b8b6 <SDIO_ReadFIFO>
 8008686:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868a:	b2da      	uxtb	r2, r3
 800868c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008692:	3301      	adds	r3, #1
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008698:	3b01      	subs	r3, #1
 800869a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	0a1b      	lsrs	r3, r3, #8
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	3301      	adds	r3, #1
 80086aa:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80086ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ae:	3b01      	subs	r3, #1
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80086b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b4:	0c1b      	lsrs	r3, r3, #16
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80086bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086be:	3301      	adds	r3, #1
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80086c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c4:	3b01      	subs	r3, #1
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	0e1b      	lsrs	r3, r3, #24
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80086d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d4:	3301      	adds	r3, #1
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80086d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086da:	3b01      	subs	r3, #1
 80086dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80086de:	f7f9 fe7f 	bl	80023e0 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d902      	bls.n	80086f4 <HAL_SD_ReadBlocks+0x350>
 80086ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d112      	bne.n	800871a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a18      	ldr	r2, [pc, #96]	@ (800875c <HAL_SD_ReadBlocks+0x3b8>)
 80086fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008700:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e01b      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_SD_ReadBlocks+0x38a>
 8008728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1a6      	bne.n	800867c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008736:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	e006      	b.n	8008752 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	3748      	adds	r7, #72	@ 0x48
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	004005ff 	.word	0x004005ff

08008760 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b092      	sub	sp, #72	@ 0x48
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800876e:	f7f9 fe37 	bl	80023e0 <HAL_GetTick>
 8008772:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d107      	bne.n	8008792 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008786:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e165      	b.n	8008a5e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b01      	cmp	r3, #1
 800879c:	f040 8158 	bne.w	8008a50 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	441a      	add	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d907      	bls.n	80087c4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e14c      	b.n	8008a5e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2203      	movs	r2, #3
 80087c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2200      	movs	r2, #0
 80087d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d002      	beq.n	80087e2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80087dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087de:	025b      	lsls	r3, r3, #9
 80087e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295
 80087e6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	025b      	lsls	r3, r3, #9
 80087ec:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80087ee:	2390      	movs	r3, #144	@ 0x90
 80087f0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80087f2:	2300      	movs	r3, #0
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80087fa:	2301      	movs	r3, #1
 80087fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f107 0218 	add.w	r2, r7, #24
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f003 f8d8 	bl	800b9be <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d90a      	bls.n	800882a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008820:	4618      	mov	r0, r3
 8008822:	f003 f980 	bl	800bb26 <SDMMC_CmdWriteMultiBlock>
 8008826:	6478      	str	r0, [r7, #68]	@ 0x44
 8008828:	e009      	b.n	800883e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2210      	movs	r2, #16
 800882e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008836:	4618      	mov	r0, r3
 8008838:	f003 f953 	bl	800bae2 <SDMMC_CmdWriteSingleBlock>
 800883c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800883e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008840:	2b00      	cmp	r3, #0
 8008842:	d012      	beq.n	800886a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a87      	ldr	r2, [pc, #540]	@ (8008a68 <HAL_SD_WriteBlocks+0x308>)
 800884a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008852:	431a      	orrs	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e0f9      	b.n	8008a5e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800886e:	e065      	b.n	800893c <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d040      	beq.n	8008900 <HAL_SD_WriteBlocks+0x1a0>
 800887e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d03d      	beq.n	8008900 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008884:	2300      	movs	r3, #0
 8008886:	643b      	str	r3, [r7, #64]	@ 0x40
 8008888:	e037      	b.n	80088fa <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800888a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008892:	3301      	adds	r3, #1
 8008894:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008898:	3b01      	subs	r3, #1
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800889c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	021a      	lsls	r2, r3, #8
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088aa:	3301      	adds	r3, #1
 80088ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80088ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b0:	3b01      	subs	r3, #1
 80088b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80088b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	041a      	lsls	r2, r3, #16
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c2:	3301      	adds	r3, #1
 80088c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80088c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c8:	3b01      	subs	r3, #1
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80088cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	061a      	lsls	r2, r3, #24
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088da:	3301      	adds	r3, #1
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80088de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e0:	3b01      	subs	r3, #1
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f107 0214 	add.w	r2, r7, #20
 80088ec:	4611      	mov	r1, r2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f002 ffee 	bl	800b8d0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80088f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088f6:	3301      	adds	r3, #1
 80088f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80088fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088fc:	2b07      	cmp	r3, #7
 80088fe:	d9c4      	bls.n	800888a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008900:	f7f9 fd6e 	bl	80023e0 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800890c:	429a      	cmp	r2, r3
 800890e:	d902      	bls.n	8008916 <HAL_SD_WriteBlocks+0x1b6>
 8008910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008912:	2b00      	cmp	r3, #0
 8008914:	d112      	bne.n	800893c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a53      	ldr	r2, [pc, #332]	@ (8008a68 <HAL_SD_WriteBlocks+0x308>)
 800891c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008924:	431a      	orrs	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e090      	b.n	8008a5e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008942:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8008946:	2b00      	cmp	r3, #0
 8008948:	d092      	beq.n	8008870 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008954:	2b00      	cmp	r3, #0
 8008956:	d022      	beq.n	800899e <HAL_SD_WriteBlocks+0x23e>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d91f      	bls.n	800899e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008962:	2b03      	cmp	r3, #3
 8008964:	d01b      	beq.n	800899e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f003 f8fe 	bl	800bb6c <SDMMC_CmdStopTransfer>
 8008970:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008974:	2b00      	cmp	r3, #0
 8008976:	d012      	beq.n	800899e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a3a      	ldr	r2, [pc, #232]	@ (8008a68 <HAL_SD_WriteBlocks+0x308>)
 800897e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008986:	431a      	orrs	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e05f      	b.n	8008a5e <HAL_SD_WriteBlocks+0x2fe>

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d012      	beq.n	80089d2 <HAL_SD_WriteBlocks+0x272>
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a68 <HAL_SD_WriteBlocks+0x308>)
 80089b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b8:	f043 0208 	orr.w	r2, r3, #8
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e045      	b.n	8008a5e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d012      	beq.n	8008a06 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a20      	ldr	r2, [pc, #128]	@ (8008a68 <HAL_SD_WriteBlocks+0x308>)
 80089e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ec:	f043 0202 	orr.w	r2, r3, #2
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e02b      	b.n	8008a5e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a0c:	f003 0310 	and.w	r3, r3, #16
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d012      	beq.n	8008a3a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a13      	ldr	r2, [pc, #76]	@ (8008a68 <HAL_SD_WriteBlocks+0x308>)
 8008a1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a20:	f043 0210 	orr.w	r2, r3, #16
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e011      	b.n	8008a5e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a42:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	e006      	b.n	8008a5e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
  }
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3748      	adds	r7, #72	@ 0x48
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	004005ff 	.word	0x004005ff

08008a6c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a7a:	0f9b      	lsrs	r3, r3, #30
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a86:	0e9b      	lsrs	r3, r3, #26
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	f003 030f 	and.w	r3, r3, #15
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a98:	0e1b      	lsrs	r3, r3, #24
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008aaa:	0c1b      	lsrs	r3, r3, #16
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ab6:	0a1b      	lsrs	r3, r3, #8
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008acc:	0d1b      	lsrs	r3, r3, #20
 8008ace:	b29a      	uxth	r2, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ad8:	0c1b      	lsrs	r3, r3, #16
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	f003 030f 	and.w	r3, r3, #15
 8008ae0:	b2da      	uxtb	r2, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008aea:	0bdb      	lsrs	r3, r3, #15
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008afc:	0b9b      	lsrs	r3, r3, #14
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b0e:	0b5b      	lsrs	r3, r3, #13
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b20:	0b1b      	lsrs	r3, r3, #12
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	f003 0301 	and.w	r3, r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2200      	movs	r2, #0
 8008b32:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d163      	bne.n	8008c04 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b40:	009a      	lsls	r2, r3, #2
 8008b42:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008b46:	4013      	ands	r3, r2
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008b4c:	0f92      	lsrs	r2, r2, #30
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b58:	0edb      	lsrs	r3, r3, #27
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b6a:	0e1b      	lsrs	r3, r3, #24
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	b2da      	uxtb	r2, r3
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b7c:	0d5b      	lsrs	r3, r3, #21
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b8e:	0c9b      	lsrs	r3, r3, #18
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	f003 0307 	and.w	r3, r3, #7
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ba0:	0bdb      	lsrs	r3, r3, #15
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	f003 0307 	and.w	r3, r3, #7
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	7e1b      	ldrb	r3, [r3, #24]
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	f003 0307 	and.w	r3, r3, #7
 8008bc2:	3302      	adds	r3, #2
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008bce:	fb03 f202 	mul.w	r2, r3, r2
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	7a1b      	ldrb	r3, [r3, #8]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	2201      	movs	r2, #1
 8008be2:	409a      	lsls	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008bf0:	0a52      	lsrs	r2, r2, #9
 8008bf2:	fb03 f202 	mul.w	r2, r3, r2
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c00:	661a      	str	r2, [r3, #96]	@ 0x60
 8008c02:	e031      	b.n	8008c68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d11d      	bne.n	8008c48 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c10:	041b      	lsls	r3, r3, #16
 8008c12:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c1a:	0c1b      	lsrs	r3, r3, #16
 8008c1c:	431a      	orrs	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	3301      	adds	r3, #1
 8008c28:	029a      	lsls	r2, r3, #10
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c3c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	661a      	str	r2, [r3, #96]	@ 0x60
 8008c46:	e00f      	b.n	8008c68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a58      	ldr	r2, [pc, #352]	@ (8008db0 <HAL_SD_GetCardCSD+0x344>)
 8008c4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e09d      	b.n	8008da4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c6c:	0b9b      	lsrs	r3, r3, #14
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c7e:	09db      	lsrs	r3, r3, #7
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c86:	b2da      	uxtb	r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ca0:	0fdb      	lsrs	r3, r3, #31
 8008ca2:	b2da      	uxtb	r2, r3
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cac:	0f5b      	lsrs	r3, r3, #29
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	b2da      	uxtb	r2, r3
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cbe:	0e9b      	lsrs	r3, r3, #26
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cd0:	0d9b      	lsrs	r3, r3, #22
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	f003 030f 	and.w	r3, r3, #15
 8008cd8:	b2da      	uxtb	r2, r3
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ce2:	0d5b      	lsrs	r3, r3, #21
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cfe:	0c1b      	lsrs	r3, r3, #16
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d12:	0bdb      	lsrs	r3, r3, #15
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d26:	0b9b      	lsrs	r3, r3, #14
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d3a:	0b5b      	lsrs	r3, r3, #13
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d4e:	0b1b      	lsrs	r3, r3, #12
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d62:	0a9b      	lsrs	r3, r3, #10
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d76:	0a1b      	lsrs	r3, r3, #8
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d8a:	085b      	lsrs	r3, r3, #1
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d92:	b2da      	uxtb	r2, r3
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008da2:	2300      	movs	r3, #0
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	004005ff 	.word	0x004005ff

08008db4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008e0c:	b5b0      	push	{r4, r5, r7, lr}
 8008e0e:	b08e      	sub	sp, #56	@ 0x38
 8008e10:	af04      	add	r7, sp, #16
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2203      	movs	r2, #3
 8008e20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d02e      	beq.n	8008e8a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e32:	d106      	bne.n	8008e42 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e40:	e029      	b.n	8008e96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e48:	d10a      	bne.n	8008e60 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa1c 	bl	8009288 <SD_WideBus_Enable>
 8008e50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	431a      	orrs	r2, r3
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e5e:	e01a      	b.n	8008e96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa59 	bl	800931e <SD_WideBus_Disable>
 8008e6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	431a      	orrs	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e7a:	e00c      	b.n	8008e96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e80:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e88:	e005      	b.n	8008e96 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a26      	ldr	r2, [pc, #152]	@ (8008f3c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008ea4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008eb4:	e01f      	b.n	8008ef6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681d      	ldr	r5, [r3, #0]
 8008edc:	466c      	mov	r4, sp
 8008ede:	f107 0314 	add.w	r3, r7, #20
 8008ee2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008eea:	f107 0308 	add.w	r3, r7, #8
 8008eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f002 fcb5 	bl	800b860 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008efe:	4618      	mov	r0, r3
 8008f00:	f002 fd89 	bl	800ba16 <SDMMC_CmdBlockLength>
 8008f04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00c      	beq.n	8008f26 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a0a      	ldr	r2, [pc, #40]	@ (8008f3c <HAL_SD_ConfigWideBusOperation+0x130>)
 8008f12:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8008f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3728      	adds	r7, #40	@ 0x28
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bdb0      	pop	{r4, r5, r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	004005ff 	.word	0x004005ff

08008f40 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008f4c:	f107 030c 	add.w	r3, r7, #12
 8008f50:	4619      	mov	r1, r3
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f970 	bl	8009238 <SD_SendStatus>
 8008f58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d005      	beq.n	8008f6c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	0a5b      	lsrs	r3, r3, #9
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f76:	693b      	ldr	r3, [r7, #16]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008f80:	b5b0      	push	{r4, r5, r7, lr}
 8008f82:	b094      	sub	sp, #80	@ 0x50
 8008f84:	af04      	add	r7, sp, #16
 8008f86:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 fcbc 	bl	800b90e <SDIO_GetPowerState>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d102      	bne.n	8008fa2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008f9c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8008fa0:	e0b8      	b.n	8009114 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d02f      	beq.n	800900a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f002 fee6 	bl	800bd80 <SDMMC_CmdSendCID>
 8008fb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <SD_InitCard+0x40>
    {
      return errorstate;
 8008fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fbe:	e0a9      	b.n	8009114 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f002 fce6 	bl	800b998 <SDIO_GetResponse>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2104      	movs	r1, #4
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f002 fcdd 	bl	800b998 <SDIO_GetResponse>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2108      	movs	r1, #8
 8008fea:	4618      	mov	r0, r3
 8008fec:	f002 fcd4 	bl	800b998 <SDIO_GetResponse>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	210c      	movs	r1, #12
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f002 fccb 	bl	800b998 <SDIO_GetResponse>
 8009002:	4602      	mov	r2, r0
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800900e:	2b03      	cmp	r3, #3
 8009010:	d00d      	beq.n	800902e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f107 020e 	add.w	r2, r7, #14
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f002 feec 	bl	800bdfa <SDMMC_CmdSetRelAdd>
 8009022:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <SD_InitCard+0xae>
    {
      return errorstate;
 800902a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902c:	e072      	b.n	8009114 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009032:	2b03      	cmp	r3, #3
 8009034:	d036      	beq.n	80090a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009036:	89fb      	ldrh	r3, [r7, #14]
 8009038:	461a      	mov	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009046:	041b      	lsls	r3, r3, #16
 8009048:	4619      	mov	r1, r3
 800904a:	4610      	mov	r0, r2
 800904c:	f002 feb6 	bl	800bdbc <SDMMC_CmdSendCSD>
 8009050:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d001      	beq.n	800905c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800905a:	e05b      	b.n	8009114 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f002 fc98 	bl	800b998 <SDIO_GetResponse>
 8009068:	4602      	mov	r2, r0
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2104      	movs	r1, #4
 8009074:	4618      	mov	r0, r3
 8009076:	f002 fc8f 	bl	800b998 <SDIO_GetResponse>
 800907a:	4602      	mov	r2, r0
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2108      	movs	r1, #8
 8009086:	4618      	mov	r0, r3
 8009088:	f002 fc86 	bl	800b998 <SDIO_GetResponse>
 800908c:	4602      	mov	r2, r0
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	210c      	movs	r1, #12
 8009098:	4618      	mov	r0, r3
 800909a:	f002 fc7d 	bl	800b998 <SDIO_GetResponse>
 800909e:	4602      	mov	r2, r0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2104      	movs	r1, #4
 80090aa:	4618      	mov	r0, r3
 80090ac:	f002 fc74 	bl	800b998 <SDIO_GetResponse>
 80090b0:	4603      	mov	r3, r0
 80090b2:	0d1a      	lsrs	r2, r3, #20
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80090b8:	f107 0310 	add.w	r3, r7, #16
 80090bc:	4619      	mov	r1, r3
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff fcd4 	bl	8008a6c <HAL_SD_GetCardCSD>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80090ce:	e021      	b.n	8009114 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6819      	ldr	r1, [r3, #0]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d8:	041b      	lsls	r3, r3, #16
 80090da:	2200      	movs	r2, #0
 80090dc:	461c      	mov	r4, r3
 80090de:	4615      	mov	r5, r2
 80090e0:	4622      	mov	r2, r4
 80090e2:	462b      	mov	r3, r5
 80090e4:	4608      	mov	r0, r1
 80090e6:	f002 fd63 	bl	800bbb0 <SDMMC_CmdSelDesel>
 80090ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80090ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <SD_InitCard+0x176>
  {
    return errorstate;
 80090f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f4:	e00e      	b.n	8009114 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681d      	ldr	r5, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	466c      	mov	r4, sp
 80090fe:	f103 0210 	add.w	r2, r3, #16
 8009102:	ca07      	ldmia	r2, {r0, r1, r2}
 8009104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009108:	3304      	adds	r3, #4
 800910a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800910c:	4628      	mov	r0, r5
 800910e:	f002 fba7 	bl	800b860 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3740      	adds	r7, #64	@ 0x40
 8009118:	46bd      	mov	sp, r7
 800911a:	bdb0      	pop	{r4, r5, r7, pc}

0800911c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009124:	2300      	movs	r3, #0
 8009126:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	617b      	str	r3, [r7, #20]
 800912c:	2300      	movs	r3, #0
 800912e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4618      	mov	r0, r3
 8009136:	f002 fd5e 	bl	800bbf6 <SDMMC_CmdGoIdleState>
 800913a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	e072      	b.n	800922c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f002 fd71 	bl	800bc32 <SDMMC_CmdOperCond>
 8009150:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00d      	beq.n	8009174 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f002 fd47 	bl	800bbf6 <SDMMC_CmdGoIdleState>
 8009168:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d004      	beq.n	800917a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	e05b      	b.n	800922c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800917e:	2b01      	cmp	r3, #1
 8009180:	d137      	bne.n	80091f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f002 fd71 	bl	800bc70 <SDMMC_CmdAppCommand>
 800918e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d02d      	beq.n	80091f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009196:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800919a:	e047      	b.n	800922c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f002 fd64 	bl	800bc70 <SDMMC_CmdAppCommand>
 80091a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d001      	beq.n	80091b4 <SD_PowerON+0x98>
    {
      return errorstate;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	e03b      	b.n	800922c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	491e      	ldr	r1, [pc, #120]	@ (8009234 <SD_PowerON+0x118>)
 80091ba:	4618      	mov	r0, r3
 80091bc:	f002 fd7a 	bl	800bcb4 <SDMMC_CmdAppOperCommand>
 80091c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d002      	beq.n	80091ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80091cc:	e02e      	b.n	800922c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2100      	movs	r1, #0
 80091d4:	4618      	mov	r0, r3
 80091d6:	f002 fbdf 	bl	800b998 <SDIO_GetResponse>
 80091da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	0fdb      	lsrs	r3, r3, #31
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d101      	bne.n	80091e8 <SD_PowerON+0xcc>
 80091e4:	2301      	movs	r3, #1
 80091e6:	e000      	b.n	80091ea <SD_PowerON+0xce>
 80091e8:	2300      	movs	r3, #0
 80091ea:	613b      	str	r3, [r7, #16]

    count++;
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	3301      	adds	r3, #1
 80091f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d802      	bhi.n	8009202 <SD_PowerON+0xe6>
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0cc      	beq.n	800919c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009208:	4293      	cmp	r3, r2
 800920a:	d902      	bls.n	8009212 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800920c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009210:	e00c      	b.n	800922c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009218:	2b00      	cmp	r3, #0
 800921a:	d003      	beq.n	8009224 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	645a      	str	r2, [r3, #68]	@ 0x44
 8009222:	e002      	b.n	800922a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	c1100000 	.word	0xc1100000

08009238 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d102      	bne.n	800924e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009248:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800924c:	e018      	b.n	8009280 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009256:	041b      	lsls	r3, r3, #16
 8009258:	4619      	mov	r1, r3
 800925a:	4610      	mov	r0, r2
 800925c:	f002 fdee 	bl	800be3c <SDMMC_CmdSendStatus>
 8009260:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	e009      	b.n	8009280 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2100      	movs	r1, #0
 8009272:	4618      	mov	r0, r3
 8009274:	f002 fb90 	bl	800b998 <SDIO_GetResponse>
 8009278:	4602      	mov	r2, r0
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	2300      	movs	r3, #0
 8009296:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2100      	movs	r1, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f002 fb7a 	bl	800b998 <SDIO_GetResponse>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092ae:	d102      	bne.n	80092b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80092b4:	e02f      	b.n	8009316 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092b6:	f107 030c 	add.w	r3, r7, #12
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f879 	bl	80093b4 <SD_FindSCR>
 80092c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	e023      	b.n	8009316 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d01c      	beq.n	8009312 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f002 fcc3 	bl	800bc70 <SDMMC_CmdAppCommand>
 80092ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	e00f      	b.n	8009316 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2102      	movs	r1, #2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f002 fcfc 	bl	800bcfa <SDMMC_CmdBusWidth>
 8009302:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	e003      	b.n	8009316 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800930e:	2300      	movs	r3, #0
 8009310:	e001      	b.n	8009316 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009312:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b086      	sub	sp, #24
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	2300      	movs	r3, #0
 800932c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2100      	movs	r1, #0
 8009334:	4618      	mov	r0, r3
 8009336:	f002 fb2f 	bl	800b998 <SDIO_GetResponse>
 800933a:	4603      	mov	r3, r0
 800933c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009340:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009344:	d102      	bne.n	800934c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009346:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800934a:	e02f      	b.n	80093ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f82e 	bl	80093b4 <SD_FindSCR>
 8009358:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	e023      	b.n	80093ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d01c      	beq.n	80093a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009376:	041b      	lsls	r3, r3, #16
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f002 fc78 	bl	800bc70 <SDMMC_CmdAppCommand>
 8009380:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	e00f      	b.n	80093ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2100      	movs	r1, #0
 8009392:	4618      	mov	r0, r3
 8009394:	f002 fcb1 	bl	800bcfa <SDMMC_CmdBusWidth>
 8009398:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	e003      	b.n	80093ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	e001      	b.n	80093ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093b4:	b590      	push	{r4, r7, lr}
 80093b6:	b08f      	sub	sp, #60	@ 0x3c
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093be:	f7f9 f80f 	bl	80023e0 <HAL_GetTick>
 80093c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80093c8:	2300      	movs	r3, #0
 80093ca:	60bb      	str	r3, [r7, #8]
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2108      	movs	r1, #8
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 fb1b 	bl	800ba16 <SDMMC_CmdBlockLength>
 80093e0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80093e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ea:	e0b2      	b.n	8009552 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f4:	041b      	lsls	r3, r3, #16
 80093f6:	4619      	mov	r1, r3
 80093f8:	4610      	mov	r0, r2
 80093fa:	f002 fc39 	bl	800bc70 <SDMMC_CmdAppCommand>
 80093fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009408:	e0a3      	b.n	8009552 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800940a:	f04f 33ff 	mov.w	r3, #4294967295
 800940e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009410:	2308      	movs	r3, #8
 8009412:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009414:	2330      	movs	r3, #48	@ 0x30
 8009416:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009418:	2302      	movs	r3, #2
 800941a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800941c:	2300      	movs	r3, #0
 800941e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009420:	2301      	movs	r3, #1
 8009422:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f107 0210 	add.w	r2, r7, #16
 800942c:	4611      	mov	r1, r2
 800942e:	4618      	mov	r0, r3
 8009430:	f002 fac5 	bl	800b9be <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4618      	mov	r0, r3
 800943a:	f002 fc80 	bl	800bd3e <SDMMC_CmdSendSCR>
 800943e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	d02a      	beq.n	800949c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009448:	e083      	b.n	8009552 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00f      	beq.n	8009478 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6819      	ldr	r1, [r3, #0]
 800945c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	f107 0208 	add.w	r2, r7, #8
 8009464:	18d4      	adds	r4, r2, r3
 8009466:	4608      	mov	r0, r1
 8009468:	f002 fa25 	bl	800b8b6 <SDIO_ReadFIFO>
 800946c:	4603      	mov	r3, r0
 800946e:	6023      	str	r3, [r4, #0]
      index++;
 8009470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009472:	3301      	adds	r3, #1
 8009474:	637b      	str	r3, [r7, #52]	@ 0x34
 8009476:	e006      	b.n	8009486 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800947e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d012      	beq.n	80094ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8009486:	f7f8 ffab 	bl	80023e0 <HAL_GetTick>
 800948a:	4602      	mov	r2, r0
 800948c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009494:	d102      	bne.n	800949c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009496:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800949a:	e05a      	b.n	8009552 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0cf      	beq.n	800944a <SD_FindSCR+0x96>
 80094aa:	e000      	b.n	80094ae <SD_FindSCR+0xfa>
      break;
 80094ac:	bf00      	nop
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <SD_FindSCR+0x114>
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2208      	movs	r2, #8
 80094c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094c4:	2308      	movs	r3, #8
 80094c6:	e044      	b.n	8009552 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d005      	beq.n	80094e2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	2202      	movs	r2, #2
 80094dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094de:	2302      	movs	r3, #2
 80094e0:	e037      	b.n	8009552 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2220      	movs	r2, #32
 80094f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80094f8:	2320      	movs	r3, #32
 80094fa:	e02a      	b.n	8009552 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009504:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	061a      	lsls	r2, r3, #24
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	021b      	lsls	r3, r3, #8
 800950e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009512:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800951c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	0e1b      	lsrs	r3, r3, #24
 8009522:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009526:	601a      	str	r2, [r3, #0]
    scr++;
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952a:	3304      	adds	r3, #4
 800952c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	061a      	lsls	r2, r3, #24
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	021b      	lsls	r3, r3, #8
 8009536:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800953a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	0a1b      	lsrs	r3, r3, #8
 8009540:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009544:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	0e1b      	lsrs	r3, r3, #24
 800954a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800954c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	373c      	adds	r7, #60	@ 0x3c
 8009556:	46bd      	mov	sp, r7
 8009558:	bd90      	pop	{r4, r7, pc}

0800955a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b082      	sub	sp, #8
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e025      	b.n	80095ba <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f7f8 fd1e 	bl	8001fc4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3304      	adds	r3, #4
 8009598:	4619      	mov	r1, r3
 800959a:	4610      	mov	r0, r2
 800959c:	f002 f89a 	bl	800b6d4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6818      	ldr	r0, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	461a      	mov	r2, r3
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	f002 f8ef 	bl	800b78e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3708      	adds	r7, #8
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e07b      	b.n	80096cc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d108      	bne.n	80095ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095e4:	d009      	beq.n	80095fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	61da      	str	r2, [r3, #28]
 80095ec:	e005      	b.n	80095fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	d106      	bne.n	800961a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7f8 fab9 	bl	8001b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2202      	movs	r2, #2
 800961e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009630:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800964c:	431a      	orrs	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	f003 0302 	and.w	r3, r3, #2
 8009656:	431a      	orrs	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	431a      	orrs	r2, r3
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800966a:	431a      	orrs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009674:	431a      	orrs	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800967e:	ea42 0103 	orr.w	r1, r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009686:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	0c1b      	lsrs	r3, r3, #16
 8009698:	f003 0104 	and.w	r1, r3, #4
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096a0:	f003 0210 	and.w	r2, r3, #16
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69da      	ldr	r2, [r3, #28]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80096ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d101      	bne.n	80096e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e041      	b.n	800976a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7f8 faae 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3304      	adds	r3, #4
 8009710:	4619      	mov	r1, r3
 8009712:	4610      	mov	r0, r2
 8009714:	f000 fa7e 	bl	8009c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	d001      	beq.n	800978c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e04e      	b.n	800982a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2202      	movs	r2, #2
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0201 	orr.w	r2, r2, #1
 80097a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a23      	ldr	r2, [pc, #140]	@ (8009838 <HAL_TIM_Base_Start_IT+0xc4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d022      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097b6:	d01d      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a1f      	ldr	r2, [pc, #124]	@ (800983c <HAL_TIM_Base_Start_IT+0xc8>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d018      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009840 <HAL_TIM_Base_Start_IT+0xcc>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d013      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a1c      	ldr	r2, [pc, #112]	@ (8009844 <HAL_TIM_Base_Start_IT+0xd0>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d00e      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a1b      	ldr	r2, [pc, #108]	@ (8009848 <HAL_TIM_Base_Start_IT+0xd4>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d009      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a19      	ldr	r2, [pc, #100]	@ (800984c <HAL_TIM_Base_Start_IT+0xd8>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d004      	beq.n	80097f4 <HAL_TIM_Base_Start_IT+0x80>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a18      	ldr	r2, [pc, #96]	@ (8009850 <HAL_TIM_Base_Start_IT+0xdc>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d111      	bne.n	8009818 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	f003 0307 	and.w	r3, r3, #7
 80097fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2b06      	cmp	r3, #6
 8009804:	d010      	beq.n	8009828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f042 0201 	orr.w	r2, r2, #1
 8009814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009816:	e007      	b.n	8009828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0201 	orr.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	40010000 	.word	0x40010000
 800983c:	40000400 	.word	0x40000400
 8009840:	40000800 	.word	0x40000800
 8009844:	40000c00 	.word	0x40000c00
 8009848:	40010400 	.word	0x40010400
 800984c:	40014000 	.word	0x40014000
 8009850:	40001800 	.word	0x40001800

08009854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	f003 0302 	and.w	r3, r3, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	d020      	beq.n	80098b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f003 0302 	and.w	r3, r3, #2
 800987c:	2b00      	cmp	r3, #0
 800987e:	d01b      	beq.n	80098b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f06f 0202 	mvn.w	r2, #2
 8009888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	f003 0303 	and.w	r3, r3, #3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f999 	bl	8009bd6 <HAL_TIM_IC_CaptureCallback>
 80098a4:	e005      	b.n	80098b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f98b 	bl	8009bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f99c 	bl	8009bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d020      	beq.n	8009904 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f003 0304 	and.w	r3, r3, #4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01b      	beq.n	8009904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f06f 0204 	mvn.w	r2, #4
 80098d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2202      	movs	r2, #2
 80098da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f973 	bl	8009bd6 <HAL_TIM_IC_CaptureCallback>
 80098f0:	e005      	b.n	80098fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 f965 	bl	8009bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f976 	bl	8009bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	f003 0308 	and.w	r3, r3, #8
 800990a:	2b00      	cmp	r3, #0
 800990c:	d020      	beq.n	8009950 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01b      	beq.n	8009950 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f06f 0208 	mvn.w	r2, #8
 8009920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2204      	movs	r2, #4
 8009926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	f003 0303 	and.w	r3, r3, #3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f94d 	bl	8009bd6 <HAL_TIM_IC_CaptureCallback>
 800993c:	e005      	b.n	800994a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f93f 	bl	8009bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f950 	bl	8009bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f003 0310 	and.w	r3, r3, #16
 8009956:	2b00      	cmp	r3, #0
 8009958:	d020      	beq.n	800999c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f003 0310 	and.w	r3, r3, #16
 8009960:	2b00      	cmp	r3, #0
 8009962:	d01b      	beq.n	800999c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f06f 0210 	mvn.w	r2, #16
 800996c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2208      	movs	r2, #8
 8009972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800997e:	2b00      	cmp	r3, #0
 8009980:	d003      	beq.n	800998a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f927 	bl	8009bd6 <HAL_TIM_IC_CaptureCallback>
 8009988:	e005      	b.n	8009996 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f919 	bl	8009bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 f92a 	bl	8009bea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00c      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d007      	beq.n	80099c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f06f 0201 	mvn.w	r2, #1
 80099b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7f7 fe84 	bl	80016c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00c      	beq.n	80099e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d007      	beq.n	80099e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80099dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 fae4 	bl	8009fac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00c      	beq.n	8009a08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f8fb 	bl	8009bfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f003 0320 	and.w	r3, r3, #32
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00c      	beq.n	8009a2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f003 0320 	and.w	r3, r3, #32
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d007      	beq.n	8009a2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f06f 0220 	mvn.w	r2, #32
 8009a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 fab6 	bl	8009f98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a2c:	bf00      	nop
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d101      	bne.n	8009a50 <HAL_TIM_ConfigClockSource+0x1c>
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	e0b4      	b.n	8009bba <HAL_TIM_ConfigClockSource+0x186>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a88:	d03e      	beq.n	8009b08 <HAL_TIM_ConfigClockSource+0xd4>
 8009a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a8e:	f200 8087 	bhi.w	8009ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8009a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a96:	f000 8086 	beq.w	8009ba6 <HAL_TIM_ConfigClockSource+0x172>
 8009a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a9e:	d87f      	bhi.n	8009ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8009aa0:	2b70      	cmp	r3, #112	@ 0x70
 8009aa2:	d01a      	beq.n	8009ada <HAL_TIM_ConfigClockSource+0xa6>
 8009aa4:	2b70      	cmp	r3, #112	@ 0x70
 8009aa6:	d87b      	bhi.n	8009ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8009aa8:	2b60      	cmp	r3, #96	@ 0x60
 8009aaa:	d050      	beq.n	8009b4e <HAL_TIM_ConfigClockSource+0x11a>
 8009aac:	2b60      	cmp	r3, #96	@ 0x60
 8009aae:	d877      	bhi.n	8009ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ab0:	2b50      	cmp	r3, #80	@ 0x50
 8009ab2:	d03c      	beq.n	8009b2e <HAL_TIM_ConfigClockSource+0xfa>
 8009ab4:	2b50      	cmp	r3, #80	@ 0x50
 8009ab6:	d873      	bhi.n	8009ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ab8:	2b40      	cmp	r3, #64	@ 0x40
 8009aba:	d058      	beq.n	8009b6e <HAL_TIM_ConfigClockSource+0x13a>
 8009abc:	2b40      	cmp	r3, #64	@ 0x40
 8009abe:	d86f      	bhi.n	8009ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ac0:	2b30      	cmp	r3, #48	@ 0x30
 8009ac2:	d064      	beq.n	8009b8e <HAL_TIM_ConfigClockSource+0x15a>
 8009ac4:	2b30      	cmp	r3, #48	@ 0x30
 8009ac6:	d86b      	bhi.n	8009ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ac8:	2b20      	cmp	r3, #32
 8009aca:	d060      	beq.n	8009b8e <HAL_TIM_ConfigClockSource+0x15a>
 8009acc:	2b20      	cmp	r3, #32
 8009ace:	d867      	bhi.n	8009ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d05c      	beq.n	8009b8e <HAL_TIM_ConfigClockSource+0x15a>
 8009ad4:	2b10      	cmp	r3, #16
 8009ad6:	d05a      	beq.n	8009b8e <HAL_TIM_ConfigClockSource+0x15a>
 8009ad8:	e062      	b.n	8009ba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009aea:	f000 f9b9 	bl	8009e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009afc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	609a      	str	r2, [r3, #8]
      break;
 8009b06:	e04f      	b.n	8009ba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b18:	f000 f9a2 	bl	8009e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	689a      	ldr	r2, [r3, #8]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b2a:	609a      	str	r2, [r3, #8]
      break;
 8009b2c:	e03c      	b.n	8009ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	f000 f916 	bl	8009d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2150      	movs	r1, #80	@ 0x50
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 f96f 	bl	8009e2a <TIM_ITRx_SetConfig>
      break;
 8009b4c:	e02c      	b.n	8009ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	f000 f935 	bl	8009dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2160      	movs	r1, #96	@ 0x60
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 f95f 	bl	8009e2a <TIM_ITRx_SetConfig>
      break;
 8009b6c:	e01c      	b.n	8009ba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f000 f8f6 	bl	8009d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2140      	movs	r1, #64	@ 0x40
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 f94f 	bl	8009e2a <TIM_ITRx_SetConfig>
      break;
 8009b8c:	e00c      	b.n	8009ba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4619      	mov	r1, r3
 8009b98:	4610      	mov	r0, r2
 8009b9a:	f000 f946 	bl	8009e2a <TIM_ITRx_SetConfig>
      break;
 8009b9e:	e003      	b.n	8009ba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ba4:	e000      	b.n	8009ba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b083      	sub	sp, #12
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bca:	bf00      	nop
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bf2:	bf00      	nop
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
	...

08009c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a46      	ldr	r2, [pc, #280]	@ (8009d40 <TIM_Base_SetConfig+0x12c>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d013      	beq.n	8009c54 <TIM_Base_SetConfig+0x40>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c32:	d00f      	beq.n	8009c54 <TIM_Base_SetConfig+0x40>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a43      	ldr	r2, [pc, #268]	@ (8009d44 <TIM_Base_SetConfig+0x130>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d00b      	beq.n	8009c54 <TIM_Base_SetConfig+0x40>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a42      	ldr	r2, [pc, #264]	@ (8009d48 <TIM_Base_SetConfig+0x134>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d007      	beq.n	8009c54 <TIM_Base_SetConfig+0x40>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a41      	ldr	r2, [pc, #260]	@ (8009d4c <TIM_Base_SetConfig+0x138>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d003      	beq.n	8009c54 <TIM_Base_SetConfig+0x40>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a40      	ldr	r2, [pc, #256]	@ (8009d50 <TIM_Base_SetConfig+0x13c>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d108      	bne.n	8009c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a35      	ldr	r2, [pc, #212]	@ (8009d40 <TIM_Base_SetConfig+0x12c>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d02b      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c74:	d027      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a32      	ldr	r2, [pc, #200]	@ (8009d44 <TIM_Base_SetConfig+0x130>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d023      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a31      	ldr	r2, [pc, #196]	@ (8009d48 <TIM_Base_SetConfig+0x134>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d01f      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a30      	ldr	r2, [pc, #192]	@ (8009d4c <TIM_Base_SetConfig+0x138>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d01b      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a2f      	ldr	r2, [pc, #188]	@ (8009d50 <TIM_Base_SetConfig+0x13c>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d017      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a2e      	ldr	r2, [pc, #184]	@ (8009d54 <TIM_Base_SetConfig+0x140>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d013      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8009d58 <TIM_Base_SetConfig+0x144>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00f      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8009d5c <TIM_Base_SetConfig+0x148>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d00b      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8009d60 <TIM_Base_SetConfig+0x14c>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d007      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8009d64 <TIM_Base_SetConfig+0x150>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d003      	beq.n	8009cc6 <TIM_Base_SetConfig+0xb2>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a29      	ldr	r2, [pc, #164]	@ (8009d68 <TIM_Base_SetConfig+0x154>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d108      	bne.n	8009cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	689a      	ldr	r2, [r3, #8]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a10      	ldr	r2, [pc, #64]	@ (8009d40 <TIM_Base_SetConfig+0x12c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d003      	beq.n	8009d0c <TIM_Base_SetConfig+0xf8>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a12      	ldr	r2, [pc, #72]	@ (8009d50 <TIM_Base_SetConfig+0x13c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d103      	bne.n	8009d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	691a      	ldr	r2, [r3, #16]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d105      	bne.n	8009d32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	f023 0201 	bic.w	r2, r3, #1
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	611a      	str	r2, [r3, #16]
  }
}
 8009d32:	bf00      	nop
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	40010000 	.word	0x40010000
 8009d44:	40000400 	.word	0x40000400
 8009d48:	40000800 	.word	0x40000800
 8009d4c:	40000c00 	.word	0x40000c00
 8009d50:	40010400 	.word	0x40010400
 8009d54:	40014000 	.word	0x40014000
 8009d58:	40014400 	.word	0x40014400
 8009d5c:	40014800 	.word	0x40014800
 8009d60:	40001800 	.word	0x40001800
 8009d64:	40001c00 	.word	0x40001c00
 8009d68:	40002000 	.word	0x40002000

08009d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6a1b      	ldr	r3, [r3, #32]
 8009d82:	f023 0201 	bic.w	r2, r3, #1
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f023 030a 	bic.w	r3, r3, #10
 8009da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	621a      	str	r2, [r3, #32]
}
 8009dbe:	bf00      	nop
 8009dc0:	371c      	adds	r7, #28
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b087      	sub	sp, #28
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	60f8      	str	r0, [r7, #12]
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6a1b      	ldr	r3, [r3, #32]
 8009de0:	f023 0210 	bic.w	r2, r3, #16
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	031b      	lsls	r3, r3, #12
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009e06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	011b      	lsls	r3, r3, #4
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	621a      	str	r2, [r3, #32]
}
 8009e1e:	bf00      	nop
 8009e20:	371c      	adds	r7, #28
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b085      	sub	sp, #20
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e42:	683a      	ldr	r2, [r7, #0]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	f043 0307 	orr.w	r3, r3, #7
 8009e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	609a      	str	r2, [r3, #8]
}
 8009e54:	bf00      	nop
 8009e56:	3714      	adds	r7, #20
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
 8009e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	021a      	lsls	r2, r3, #8
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	431a      	orrs	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	697a      	ldr	r2, [r7, #20]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	609a      	str	r2, [r3, #8]
}
 8009e94:	bf00      	nop
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d101      	bne.n	8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	e05a      	b.n	8009f6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a21      	ldr	r2, [pc, #132]	@ (8009f7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d022      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f04:	d01d      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8009f80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d018      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a1b      	ldr	r2, [pc, #108]	@ (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d013      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d00e      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a18      	ldr	r2, [pc, #96]	@ (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d009      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a17      	ldr	r2, [pc, #92]	@ (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d004      	beq.n	8009f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a15      	ldr	r2, [pc, #84]	@ (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d10c      	bne.n	8009f5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685b      	ldr	r3, [r3, #4]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	40010000 	.word	0x40010000
 8009f80:	40000400 	.word	0x40000400
 8009f84:	40000800 	.word	0x40000800
 8009f88:	40000c00 	.word	0x40000c00
 8009f8c:	40010400 	.word	0x40010400
 8009f90:	40014000 	.word	0x40014000
 8009f94:	40001800 	.word	0x40001800

08009f98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d101      	bne.n	8009fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e042      	b.n	800a058 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d106      	bne.n	8009fec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7f7 fe5a 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2224      	movs	r2, #36	@ 0x24
 8009ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a002:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 f8f1 	bl	800b1ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	691a      	ldr	r2, [r3, #16]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a018:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	695a      	ldr	r2, [r3, #20]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a028:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a038:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2220      	movs	r2, #32
 800a044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b08a      	sub	sp, #40	@ 0x28
 800a064:	af02      	add	r7, sp, #8
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	603b      	str	r3, [r7, #0]
 800a06c:	4613      	mov	r3, r2
 800a06e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d175      	bne.n	800a16c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <HAL_UART_Transmit+0x2c>
 800a086:	88fb      	ldrh	r3, [r7, #6]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d101      	bne.n	800a090 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e06e      	b.n	800a16e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2221      	movs	r2, #33	@ 0x21
 800a09a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a09e:	f7f8 f99f 	bl	80023e0 <HAL_GetTick>
 800a0a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	88fa      	ldrh	r2, [r7, #6]
 800a0a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	88fa      	ldrh	r2, [r7, #6]
 800a0ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0b8:	d108      	bne.n	800a0cc <HAL_UART_Transmit+0x6c>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d104      	bne.n	800a0cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	e003      	b.n	800a0d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a0d4:	e02e      	b.n	800a134 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2180      	movs	r1, #128	@ 0x80
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 fdca 	bl	800ac7a <UART_WaitOnFlagUntilTimeout>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d005      	beq.n	800a0f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2220      	movs	r2, #32
 800a0f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	e03a      	b.n	800a16e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10b      	bne.n	800a116 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a10c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	3302      	adds	r3, #2
 800a112:	61bb      	str	r3, [r7, #24]
 800a114:	e007      	b.n	800a126 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	781a      	ldrb	r2, [r3, #0]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	3301      	adds	r3, #1
 800a124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	3b01      	subs	r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a138:	b29b      	uxth	r3, r3
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d1cb      	bne.n	800a0d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2200      	movs	r2, #0
 800a146:	2140      	movs	r1, #64	@ 0x40
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 fd96 	bl	800ac7a <UART_WaitOnFlagUntilTimeout>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d005      	beq.n	800a160 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2220      	movs	r2, #32
 800a158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e006      	b.n	800a16e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2220      	movs	r2, #32
 800a164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	e000      	b.n	800a16e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a16c:	2302      	movs	r3, #2
  }
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3720      	adds	r7, #32
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b08a      	sub	sp, #40	@ 0x28
 800a17a:	af02      	add	r7, sp, #8
 800a17c:	60f8      	str	r0, [r7, #12]
 800a17e:	60b9      	str	r1, [r7, #8]
 800a180:	603b      	str	r3, [r7, #0]
 800a182:	4613      	mov	r3, r2
 800a184:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a186:	2300      	movs	r3, #0
 800a188:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a190:	b2db      	uxtb	r3, r3
 800a192:	2b20      	cmp	r3, #32
 800a194:	f040 8081 	bne.w	800a29a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <HAL_UART_Receive+0x2e>
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e079      	b.n	800a29c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2222      	movs	r2, #34	@ 0x22
 800a1b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1bc:	f7f8 f910 	bl	80023e0 <HAL_GetTick>
 800a1c0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	88fa      	ldrh	r2, [r7, #6]
 800a1c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	88fa      	ldrh	r2, [r7, #6]
 800a1cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1d6:	d108      	bne.n	800a1ea <HAL_UART_Receive+0x74>
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	691b      	ldr	r3, [r3, #16]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d104      	bne.n	800a1ea <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	61bb      	str	r3, [r7, #24]
 800a1e8:	e003      	b.n	800a1f2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a1f2:	e047      	b.n	800a284 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	9300      	str	r3, [sp, #0]
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	2120      	movs	r1, #32
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	f000 fd3b 	bl	800ac7a <UART_WaitOnFlagUntilTimeout>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d005      	beq.n	800a216 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e042      	b.n	800a29c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10c      	bne.n	800a236 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	b29b      	uxth	r3, r3
 800a224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a228:	b29a      	uxth	r2, r3
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	3302      	adds	r3, #2
 800a232:	61bb      	str	r3, [r7, #24]
 800a234:	e01f      	b.n	800a276 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a23e:	d007      	beq.n	800a250 <HAL_UART_Receive+0xda>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <HAL_UART_Receive+0xe8>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d106      	bne.n	800a25e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	b2da      	uxtb	r2, r3
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	701a      	strb	r2, [r3, #0]
 800a25c:	e008      	b.n	800a270 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	b2db      	uxtb	r3, r3
 800a266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a26a:	b2da      	uxtb	r2, r3
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	3301      	adds	r3, #1
 800a274:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	3b01      	subs	r3, #1
 800a27e:	b29a      	uxth	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a288:	b29b      	uxth	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1b2      	bne.n	800a1f4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2220      	movs	r2, #32
 800a292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	e000      	b.n	800a29c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a29a:	2302      	movs	r3, #2
  }
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3720      	adds	r7, #32
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b08c      	sub	sp, #48	@ 0x30
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b20      	cmp	r3, #32
 800a2bc:	d156      	bne.n	800a36c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <HAL_UART_Transmit_DMA+0x26>
 800a2c4:	88fb      	ldrh	r3, [r7, #6]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d101      	bne.n	800a2ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e04f      	b.n	800a36e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	88fa      	ldrh	r2, [r7, #6]
 800a2d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	88fa      	ldrh	r2, [r7, #6]
 800a2de:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2221      	movs	r2, #33	@ 0x21
 800a2ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f2:	4a21      	ldr	r2, [pc, #132]	@ (800a378 <HAL_UART_Transmit_DMA+0xd4>)
 800a2f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2fa:	4a20      	ldr	r2, [pc, #128]	@ (800a37c <HAL_UART_Transmit_DMA+0xd8>)
 800a2fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a302:	4a1f      	ldr	r2, [pc, #124]	@ (800a380 <HAL_UART_Transmit_DMA+0xdc>)
 800a304:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30a:	2200      	movs	r2, #0
 800a30c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a30e:	f107 0308 	add.w	r3, r7, #8
 800a312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31a:	6819      	ldr	r1, [r3, #0]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3304      	adds	r3, #4
 800a322:	461a      	mov	r2, r3
 800a324:	88fb      	ldrh	r3, [r7, #6]
 800a326:	f7f8 fa37 	bl	8002798 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a332:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	3314      	adds	r3, #20
 800a33a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	e853 3f00 	ldrex	r3, [r3]
 800a342:	617b      	str	r3, [r7, #20]
   return(result);
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a34a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3314      	adds	r3, #20
 800a352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a354:	627a      	str	r2, [r7, #36]	@ 0x24
 800a356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a358:	6a39      	ldr	r1, [r7, #32]
 800a35a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a35c:	e841 2300 	strex	r3, r2, [r1]
 800a360:	61fb      	str	r3, [r7, #28]
   return(result);
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1e5      	bne.n	800a334 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	e000      	b.n	800a36e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a36c:	2302      	movs	r3, #2
  }
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3730      	adds	r7, #48	@ 0x30
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	0800a9c9 	.word	0x0800a9c9
 800a37c:	0800aa63 	.word	0x0800aa63
 800a380:	0800abe7 	.word	0x0800abe7

0800a384 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08c      	sub	sp, #48	@ 0x30
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	4613      	mov	r3, r2
 800a390:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b20      	cmp	r3, #32
 800a39c:	d14a      	bne.n	800a434 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a3a4:	88fb      	ldrh	r3, [r7, #6]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d101      	bne.n	800a3ae <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e043      	b.n	800a436 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a3ba:	88fb      	ldrh	r3, [r7, #6]
 800a3bc:	461a      	mov	r2, r3
 800a3be:	68b9      	ldr	r1, [r7, #8]
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f000 fcb3 	bl	800ad2c <UART_Start_Receive_DMA>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a3cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d12c      	bne.n	800a42e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d125      	bne.n	800a428 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3dc:	2300      	movs	r3, #0
 800a3de:	613b      	str	r3, [r7, #16]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	613b      	str	r3, [r7, #16]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	613b      	str	r3, [r7, #16]
 800a3f0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	330c      	adds	r3, #12
 800a3f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	e853 3f00 	ldrex	r3, [r3]
 800a400:	617b      	str	r3, [r7, #20]
   return(result);
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f043 0310 	orr.w	r3, r3, #16
 800a408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	330c      	adds	r3, #12
 800a410:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a412:	627a      	str	r2, [r7, #36]	@ 0x24
 800a414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a416:	6a39      	ldr	r1, [r7, #32]
 800a418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1e5      	bne.n	800a3f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800a426:	e002      	b.n	800a42e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800a42e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a432:	e000      	b.n	800a436 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800a434:	2302      	movs	r3, #2
  }
}
 800a436:	4618      	mov	r0, r3
 800a438:	3730      	adds	r7, #48	@ 0x30
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
	...

0800a440 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b0ba      	sub	sp, #232	@ 0xe8
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	695b      	ldr	r3, [r3, #20]
 800a462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a466:	2300      	movs	r3, #0
 800a468:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a476:	f003 030f 	and.w	r3, r3, #15
 800a47a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a47e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10f      	bne.n	800a4a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a48a:	f003 0320 	and.w	r3, r3, #32
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d009      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x66>
 800a492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a496:	f003 0320 	and.w	r3, r3, #32
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d003      	beq.n	800a4a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 fde5 	bl	800b06e <UART_Receive_IT>
      return;
 800a4a4:	e25b      	b.n	800a95e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a4a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80de 	beq.w	800a66c <HAL_UART_IRQHandler+0x22c>
 800a4b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4b4:	f003 0301 	and.w	r3, r3, #1
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d106      	bne.n	800a4ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a4bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 80d1 	beq.w	800a66c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00b      	beq.n	800a4ee <HAL_UART_IRQHandler+0xae>
 800a4d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d005      	beq.n	800a4ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4e6:	f043 0201 	orr.w	r2, r3, #1
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4f2:	f003 0304 	and.w	r3, r3, #4
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00b      	beq.n	800a512 <HAL_UART_IRQHandler+0xd2>
 800a4fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d005      	beq.n	800a512 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a50a:	f043 0202 	orr.w	r2, r3, #2
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a516:	f003 0302 	and.w	r3, r3, #2
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00b      	beq.n	800a536 <HAL_UART_IRQHandler+0xf6>
 800a51e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	2b00      	cmp	r3, #0
 800a528:	d005      	beq.n	800a536 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a52e:	f043 0204 	orr.w	r2, r3, #4
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a53a:	f003 0308 	and.w	r3, r3, #8
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d011      	beq.n	800a566 <HAL_UART_IRQHandler+0x126>
 800a542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a546:	f003 0320 	and.w	r3, r3, #32
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d105      	bne.n	800a55a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a54e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a55e:	f043 0208 	orr.w	r2, r3, #8
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f000 81f2 	beq.w	800a954 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a574:	f003 0320 	and.w	r3, r3, #32
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d008      	beq.n	800a58e <HAL_UART_IRQHandler+0x14e>
 800a57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a580:	f003 0320 	and.w	r3, r3, #32
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fd70 	bl	800b06e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a598:	2b40      	cmp	r3, #64	@ 0x40
 800a59a:	bf0c      	ite	eq
 800a59c:	2301      	moveq	r3, #1
 800a59e:	2300      	movne	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5aa:	f003 0308 	and.w	r3, r3, #8
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d103      	bne.n	800a5ba <HAL_UART_IRQHandler+0x17a>
 800a5b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d04f      	beq.n	800a65a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fc78 	bl	800aeb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ca:	2b40      	cmp	r3, #64	@ 0x40
 800a5cc:	d141      	bne.n	800a652 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	3314      	adds	r3, #20
 800a5d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a5dc:	e853 3f00 	ldrex	r3, [r3]
 800a5e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a5e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3314      	adds	r3, #20
 800a5f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a5fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a5fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a60a:	e841 2300 	strex	r3, r2, [r1]
 800a60e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1d9      	bne.n	800a5ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d013      	beq.n	800a64a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a626:	4a7e      	ldr	r2, [pc, #504]	@ (800a820 <HAL_UART_IRQHandler+0x3e0>)
 800a628:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a62e:	4618      	mov	r0, r3
 800a630:	f7f8 f97a 	bl	8002928 <HAL_DMA_Abort_IT>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d016      	beq.n	800a668 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a63e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a644:	4610      	mov	r0, r2
 800a646:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a648:	e00e      	b.n	800a668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 f9b2 	bl	800a9b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a650:	e00a      	b.n	800a668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f9ae 	bl	800a9b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a658:	e006      	b.n	800a668 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f9aa 	bl	800a9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a666:	e175      	b.n	800a954 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a668:	bf00      	nop
    return;
 800a66a:	e173      	b.n	800a954 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a670:	2b01      	cmp	r3, #1
 800a672:	f040 814f 	bne.w	800a914 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a67a:	f003 0310 	and.w	r3, r3, #16
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f000 8148 	beq.w	800a914 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a688:	f003 0310 	and.w	r3, r3, #16
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 8141 	beq.w	800a914 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a692:	2300      	movs	r3, #0
 800a694:	60bb      	str	r3, [r7, #8]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	60bb      	str	r3, [r7, #8]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	60bb      	str	r3, [r7, #8]
 800a6a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6b2:	2b40      	cmp	r3, #64	@ 0x40
 800a6b4:	f040 80b6 	bne.w	800a824 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a6c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 8145 	beq.w	800a958 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a6d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	f080 813e 	bcs.w	800a958 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a6e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6e8:	69db      	ldr	r3, [r3, #28]
 800a6ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6ee:	f000 8088 	beq.w	800a802 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	330c      	adds	r3, #12
 800a6f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a700:	e853 3f00 	ldrex	r3, [r3]
 800a704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a708:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a70c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	330c      	adds	r3, #12
 800a71a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a71e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a726:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a72a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a72e:	e841 2300 	strex	r3, r2, [r1]
 800a732:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a736:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1d9      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3314      	adds	r3, #20
 800a744:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a746:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a748:	e853 3f00 	ldrex	r3, [r3]
 800a74c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a74e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a750:	f023 0301 	bic.w	r3, r3, #1
 800a754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	3314      	adds	r3, #20
 800a75e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a762:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a766:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a768:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a76a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a774:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e1      	bne.n	800a73e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	3314      	adds	r3, #20
 800a780:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a782:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a784:	e853 3f00 	ldrex	r3, [r3]
 800a788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a78a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a78c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3314      	adds	r3, #20
 800a79a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a79e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a7a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a7a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a7ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e3      	bne.n	800a77a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2220      	movs	r2, #32
 800a7b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	330c      	adds	r3, #12
 800a7c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7ca:	e853 3f00 	ldrex	r3, [r3]
 800a7ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a7d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7d2:	f023 0310 	bic.w	r3, r3, #16
 800a7d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	330c      	adds	r3, #12
 800a7e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a7e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a7e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a7ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a7ec:	e841 2300 	strex	r3, r2, [r1]
 800a7f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a7f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d1e3      	bne.n	800a7c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7f8 f823 	bl	8002848 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2202      	movs	r2, #2
 800a806:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a810:	b29b      	uxth	r3, r3
 800a812:	1ad3      	subs	r3, r2, r3
 800a814:	b29b      	uxth	r3, r3
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7f6 f845 	bl	80008a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a81e:	e09b      	b.n	800a958 <HAL_UART_IRQHandler+0x518>
 800a820:	0800af77 	.word	0x0800af77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a838:	b29b      	uxth	r3, r3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f000 808e 	beq.w	800a95c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 8089 	beq.w	800a95c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	330c      	adds	r3, #12
 800a850:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a854:	e853 3f00 	ldrex	r3, [r3]
 800a858:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	330c      	adds	r3, #12
 800a86a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a86e:	647a      	str	r2, [r7, #68]	@ 0x44
 800a870:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a872:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a876:	e841 2300 	strex	r3, r2, [r1]
 800a87a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a87c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1e3      	bne.n	800a84a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3314      	adds	r3, #20
 800a888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	623b      	str	r3, [r7, #32]
   return(result);
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	f023 0301 	bic.w	r3, r3, #1
 800a898:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3314      	adds	r3, #20
 800a8a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a8a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a8a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e3      	bne.n	800a882 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	330c      	adds	r3, #12
 800a8ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0310 	bic.w	r3, r3, #16
 800a8de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	330c      	adds	r3, #12
 800a8e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a8ec:	61fa      	str	r2, [r7, #28]
 800a8ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f0:	69b9      	ldr	r1, [r7, #24]
 800a8f2:	69fa      	ldr	r2, [r7, #28]
 800a8f4:	e841 2300 	strex	r3, r2, [r1]
 800a8f8:	617b      	str	r3, [r7, #20]
   return(result);
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1e3      	bne.n	800a8c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2202      	movs	r2, #2
 800a904:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a906:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7f5 ffcb 	bl	80008a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a912:	e023      	b.n	800a95c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d009      	beq.n	800a934 <HAL_UART_IRQHandler+0x4f4>
 800a920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a924:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fb36 	bl	800af9e <UART_Transmit_IT>
    return;
 800a932:	e014      	b.n	800a95e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00e      	beq.n	800a95e <HAL_UART_IRQHandler+0x51e>
 800a940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d008      	beq.n	800a95e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f000 fb76 	bl	800b03e <UART_EndTransmit_IT>
    return;
 800a952:	e004      	b.n	800a95e <HAL_UART_IRQHandler+0x51e>
    return;
 800a954:	bf00      	nop
 800a956:	e002      	b.n	800a95e <HAL_UART_IRQHandler+0x51e>
      return;
 800a958:	bf00      	nop
 800a95a:	e000      	b.n	800a95e <HAL_UART_IRQHandler+0x51e>
      return;
 800a95c:	bf00      	nop
  }
}
 800a95e:	37e8      	adds	r7, #232	@ 0xe8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b090      	sub	sp, #64	@ 0x40
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d137      	bne.n	800aa54 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a9ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3314      	adds	r3, #20
 800a9f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f4:	e853 3f00 	ldrex	r3, [r3]
 800a9f8:	623b      	str	r3, [r7, #32]
   return(result);
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa00:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	3314      	adds	r3, #20
 800aa08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa0a:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e5      	bne.n	800a9ea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	330c      	adds	r3, #12
 800aa24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	e853 3f00 	ldrex	r3, [r3]
 800aa2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa34:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	330c      	adds	r3, #12
 800aa3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa3e:	61fa      	str	r2, [r7, #28]
 800aa40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa42:	69b9      	ldr	r1, [r7, #24]
 800aa44:	69fa      	ldr	r2, [r7, #28]
 800aa46:	e841 2300 	strex	r3, r2, [r1]
 800aa4a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1e5      	bne.n	800aa1e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa52:	e002      	b.n	800aa5a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800aa54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800aa56:	f7ff ff85 	bl	800a964 <HAL_UART_TxCpltCallback>
}
 800aa5a:	bf00      	nop
 800aa5c:	3740      	adds	r7, #64	@ 0x40
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f7ff ff81 	bl	800a978 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b09c      	sub	sp, #112	@ 0x70
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa8a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d172      	bne.n	800ab80 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aa9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aaa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	330c      	adds	r3, #12
 800aaa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaaa:	e853 3f00 	ldrex	r3, [r3]
 800aaae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aab0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aab2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aab6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	330c      	adds	r3, #12
 800aabe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aac0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aac2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aac4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aac6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aac8:	e841 2300 	strex	r3, r2, [r1]
 800aacc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d1e5      	bne.n	800aaa0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aad4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	3314      	adds	r3, #20
 800aada:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae6:	f023 0301 	bic.w	r3, r3, #1
 800aaea:	667b      	str	r3, [r7, #100]	@ 0x64
 800aaec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3314      	adds	r3, #20
 800aaf2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aaf4:	647a      	str	r2, [r7, #68]	@ 0x44
 800aaf6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aafa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e5      	bne.n	800aad4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3314      	adds	r3, #20
 800ab0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab12:	e853 3f00 	ldrex	r3, [r3]
 800ab16:	623b      	str	r3, [r7, #32]
   return(result);
 800ab18:	6a3b      	ldr	r3, [r7, #32]
 800ab1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab1e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3314      	adds	r3, #20
 800ab26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab28:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab30:	e841 2300 	strex	r3, r2, [r1]
 800ab34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e5      	bne.n	800ab08 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d119      	bne.n	800ab80 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	330c      	adds	r3, #12
 800ab52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	e853 3f00 	ldrex	r3, [r3]
 800ab5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f023 0310 	bic.w	r3, r3, #16
 800ab62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	330c      	adds	r3, #12
 800ab6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab6c:	61fa      	str	r2, [r7, #28]
 800ab6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab70:	69b9      	ldr	r1, [r7, #24]
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	e841 2300 	strex	r3, r2, [r1]
 800ab78:	617b      	str	r3, [r7, #20]
   return(result);
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1e5      	bne.n	800ab4c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab82:	2200      	movs	r2, #0
 800ab84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d106      	bne.n	800ab9c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab92:	4619      	mov	r1, r3
 800ab94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab96:	f7f5 fe87 	bl	80008a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab9a:	e002      	b.n	800aba2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ab9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab9e:	f7ff fef5 	bl	800a98c <HAL_UART_RxCpltCallback>
}
 800aba2:	bf00      	nop
 800aba4:	3770      	adds	r7, #112	@ 0x70
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2201      	movs	r2, #1
 800abbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d108      	bne.n	800abd8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800abca:	085b      	lsrs	r3, r3, #1
 800abcc:	b29b      	uxth	r3, r3
 800abce:	4619      	mov	r1, r3
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f7f5 fe69 	bl	80008a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abd6:	e002      	b.n	800abde <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7ff fee1 	bl	800a9a0 <HAL_UART_RxHalfCpltCallback>
}
 800abde:	bf00      	nop
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}

0800abe6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b084      	sub	sp, #16
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abf6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac02:	2b80      	cmp	r3, #128	@ 0x80
 800ac04:	bf0c      	ite	eq
 800ac06:	2301      	moveq	r3, #1
 800ac08:	2300      	movne	r3, #0
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b21      	cmp	r3, #33	@ 0x21
 800ac18:	d108      	bne.n	800ac2c <UART_DMAError+0x46>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	2200      	movs	r2, #0
 800ac24:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ac26:	68b8      	ldr	r0, [r7, #8]
 800ac28:	f000 f91a 	bl	800ae60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac36:	2b40      	cmp	r3, #64	@ 0x40
 800ac38:	bf0c      	ite	eq
 800ac3a:	2301      	moveq	r3, #1
 800ac3c:	2300      	movne	r3, #0
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b22      	cmp	r3, #34	@ 0x22
 800ac4c:	d108      	bne.n	800ac60 <UART_DMAError+0x7a>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d005      	beq.n	800ac60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	2200      	movs	r2, #0
 800ac58:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ac5a:	68b8      	ldr	r0, [r7, #8]
 800ac5c:	f000 f928 	bl	800aeb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac64:	f043 0210 	orr.w	r2, r3, #16
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac6c:	68b8      	ldr	r0, [r7, #8]
 800ac6e:	f7ff fea1 	bl	800a9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac72:	bf00      	nop
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b086      	sub	sp, #24
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	60f8      	str	r0, [r7, #12]
 800ac82:	60b9      	str	r1, [r7, #8]
 800ac84:	603b      	str	r3, [r7, #0]
 800ac86:	4613      	mov	r3, r2
 800ac88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac8a:	e03b      	b.n	800ad04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac92:	d037      	beq.n	800ad04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac94:	f7f7 fba4 	bl	80023e0 <HAL_GetTick>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	6a3a      	ldr	r2, [r7, #32]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d302      	bcc.n	800acaa <UART_WaitOnFlagUntilTimeout+0x30>
 800aca4:	6a3b      	ldr	r3, [r7, #32]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800acaa:	2303      	movs	r3, #3
 800acac:	e03a      	b.n	800ad24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d023      	beq.n	800ad04 <UART_WaitOnFlagUntilTimeout+0x8a>
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	2b80      	cmp	r3, #128	@ 0x80
 800acc0:	d020      	beq.n	800ad04 <UART_WaitOnFlagUntilTimeout+0x8a>
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	2b40      	cmp	r3, #64	@ 0x40
 800acc6:	d01d      	beq.n	800ad04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f003 0308 	and.w	r3, r3, #8
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d116      	bne.n	800ad04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800acd6:	2300      	movs	r3, #0
 800acd8:	617b      	str	r3, [r7, #20]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	617b      	str	r3, [r7, #20]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	617b      	str	r3, [r7, #20]
 800acea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 f8df 	bl	800aeb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2208      	movs	r2, #8
 800acf6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e00f      	b.n	800ad24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	bf0c      	ite	eq
 800ad14:	2301      	moveq	r3, #1
 800ad16:	2300      	movne	r3, #0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d0b4      	beq.n	800ac8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3718      	adds	r7, #24
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b098      	sub	sp, #96	@ 0x60
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	4613      	mov	r3, r2
 800ad38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ad3a:	68ba      	ldr	r2, [r7, #8]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	88fa      	ldrh	r2, [r7, #6]
 800ad44:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2222      	movs	r2, #34	@ 0x22
 800ad50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad58:	4a3e      	ldr	r2, [pc, #248]	@ (800ae54 <UART_Start_Receive_DMA+0x128>)
 800ad5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad60:	4a3d      	ldr	r2, [pc, #244]	@ (800ae58 <UART_Start_Receive_DMA+0x12c>)
 800ad62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad68:	4a3c      	ldr	r2, [pc, #240]	@ (800ae5c <UART_Start_Receive_DMA+0x130>)
 800ad6a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad70:	2200      	movs	r2, #0
 800ad72:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ad74:	f107 0308 	add.w	r3, r7, #8
 800ad78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3304      	adds	r3, #4
 800ad84:	4619      	mov	r1, r3
 800ad86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	88fb      	ldrh	r3, [r7, #6]
 800ad8c:	f7f7 fd04 	bl	8002798 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ad90:	2300      	movs	r3, #0
 800ad92:	613b      	str	r3, [r7, #16]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	613b      	str	r3, [r7, #16]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	613b      	str	r3, [r7, #16]
 800ada4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d019      	beq.n	800ade2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	330c      	adds	r3, #12
 800adb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800adbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	330c      	adds	r3, #12
 800adcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adce:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800add0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800add4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800add6:	e841 2300 	strex	r3, r2, [r1]
 800adda:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800addc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e5      	bne.n	800adae <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3314      	adds	r3, #20
 800ade8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf4:	f043 0301 	orr.w	r3, r3, #1
 800adf8:	657b      	str	r3, [r7, #84]	@ 0x54
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3314      	adds	r3, #20
 800ae00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae02:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ae04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ae08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae0a:	e841 2300 	strex	r3, r2, [r1]
 800ae0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1e5      	bne.n	800ade2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	3314      	adds	r3, #20
 800ae1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	e853 3f00 	ldrex	r3, [r3]
 800ae24:	617b      	str	r3, [r7, #20]
   return(result);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae2c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	3314      	adds	r3, #20
 800ae34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae36:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3a:	6a39      	ldr	r1, [r7, #32]
 800ae3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae3e:	e841 2300 	strex	r3, r2, [r1]
 800ae42:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1e5      	bne.n	800ae16 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3760      	adds	r7, #96	@ 0x60
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	0800aa7f 	.word	0x0800aa7f
 800ae58:	0800abab 	.word	0x0800abab
 800ae5c:	0800abe7 	.word	0x0800abe7

0800ae60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b089      	sub	sp, #36	@ 0x24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	330c      	adds	r3, #12
 800ae6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	e853 3f00 	ldrex	r3, [r3]
 800ae76:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae7e:	61fb      	str	r3, [r7, #28]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	330c      	adds	r3, #12
 800ae86:	69fa      	ldr	r2, [r7, #28]
 800ae88:	61ba      	str	r2, [r7, #24]
 800ae8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8c:	6979      	ldr	r1, [r7, #20]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	e841 2300 	strex	r3, r2, [r1]
 800ae94:	613b      	str	r3, [r7, #16]
   return(result);
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1e5      	bne.n	800ae68 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800aea4:	bf00      	nop
 800aea6:	3724      	adds	r7, #36	@ 0x24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b095      	sub	sp, #84	@ 0x54
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	330c      	adds	r3, #12
 800aebe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec2:	e853 3f00 	ldrex	r3, [r3]
 800aec6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aece:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	330c      	adds	r3, #12
 800aed6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aed8:	643a      	str	r2, [r7, #64]	@ 0x40
 800aeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aedc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aede:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aee0:	e841 2300 	strex	r3, r2, [r1]
 800aee4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e5      	bne.n	800aeb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3314      	adds	r3, #20
 800aef2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	e853 3f00 	ldrex	r3, [r3]
 800aefa:	61fb      	str	r3, [r7, #28]
   return(result);
 800aefc:	69fb      	ldr	r3, [r7, #28]
 800aefe:	f023 0301 	bic.w	r3, r3, #1
 800af02:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3314      	adds	r3, #20
 800af0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af14:	e841 2300 	strex	r3, r2, [r1]
 800af18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1e5      	bne.n	800aeec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af24:	2b01      	cmp	r3, #1
 800af26:	d119      	bne.n	800af5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	330c      	adds	r3, #12
 800af2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	e853 3f00 	ldrex	r3, [r3]
 800af36:	60bb      	str	r3, [r7, #8]
   return(result);
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	f023 0310 	bic.w	r3, r3, #16
 800af3e:	647b      	str	r3, [r7, #68]	@ 0x44
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	330c      	adds	r3, #12
 800af46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af48:	61ba      	str	r2, [r7, #24]
 800af4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af4c:	6979      	ldr	r1, [r7, #20]
 800af4e:	69ba      	ldr	r2, [r7, #24]
 800af50:	e841 2300 	strex	r3, r2, [r1]
 800af54:	613b      	str	r3, [r7, #16]
   return(result);
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1e5      	bne.n	800af28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2220      	movs	r2, #32
 800af60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800af6a:	bf00      	nop
 800af6c:	3754      	adds	r7, #84	@ 0x54
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f7ff fd0f 	bl	800a9b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af96:	bf00      	nop
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b21      	cmp	r3, #33	@ 0x21
 800afb0:	d13e      	bne.n	800b030 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800afba:	d114      	bne.n	800afe6 <UART_Transmit_IT+0x48>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d110      	bne.n	800afe6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a1b      	ldr	r3, [r3, #32]
 800afc8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afd8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	1c9a      	adds	r2, r3, #2
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	621a      	str	r2, [r3, #32]
 800afe4:	e008      	b.n	800aff8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a1b      	ldr	r3, [r3, #32]
 800afea:	1c59      	adds	r1, r3, #1
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6211      	str	r1, [r2, #32]
 800aff0:	781a      	ldrb	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800affc:	b29b      	uxth	r3, r3
 800affe:	3b01      	subs	r3, #1
 800b000:	b29b      	uxth	r3, r3
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	4619      	mov	r1, r3
 800b006:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10f      	bne.n	800b02c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68da      	ldr	r2, [r3, #12]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b01a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b02a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	e000      	b.n	800b032 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b030:	2302      	movs	r3, #2
  }
}
 800b032:	4618      	mov	r0, r3
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr

0800b03e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	68da      	ldr	r2, [r3, #12]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b054:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2220      	movs	r2, #32
 800b05a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff fc80 	bl	800a964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b08c      	sub	sp, #48	@ 0x30
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b22      	cmp	r3, #34	@ 0x22
 800b080:	f040 80ae 	bne.w	800b1e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b08c:	d117      	bne.n	800b0be <UART_Receive_IT+0x50>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	691b      	ldr	r3, [r3, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d113      	bne.n	800b0be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b096:	2300      	movs	r3, #0
 800b098:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b09e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b6:	1c9a      	adds	r2, r3, #2
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	629a      	str	r2, [r3, #40]	@ 0x28
 800b0bc:	e026      	b.n	800b10c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0d0:	d007      	beq.n	800b0e2 <UART_Receive_IT+0x74>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10a      	bne.n	800b0f0 <UART_Receive_IT+0x82>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ec:	701a      	strb	r2, [r3, #0]
 800b0ee:	e008      	b.n	800b102 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b100:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b106:	1c5a      	adds	r2, r3, #1
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b110:	b29b      	uxth	r3, r3
 800b112:	3b01      	subs	r3, #1
 800b114:	b29b      	uxth	r3, r3
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	4619      	mov	r1, r3
 800b11a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d15d      	bne.n	800b1dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68da      	ldr	r2, [r3, #12]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f022 0220 	bic.w	r2, r2, #32
 800b12e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68da      	ldr	r2, [r3, #12]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b13e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	695a      	ldr	r2, [r3, #20]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f022 0201 	bic.w	r2, r2, #1
 800b14e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2220      	movs	r2, #32
 800b154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b162:	2b01      	cmp	r3, #1
 800b164:	d135      	bne.n	800b1d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	330c      	adds	r3, #12
 800b172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	613b      	str	r3, [r7, #16]
   return(result);
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	f023 0310 	bic.w	r3, r3, #16
 800b182:	627b      	str	r3, [r7, #36]	@ 0x24
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	330c      	adds	r3, #12
 800b18a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b18c:	623a      	str	r2, [r7, #32]
 800b18e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	69f9      	ldr	r1, [r7, #28]
 800b192:	6a3a      	ldr	r2, [r7, #32]
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	61bb      	str	r3, [r7, #24]
   return(result);
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e5      	bne.n	800b16c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 0310 	and.w	r3, r3, #16
 800b1aa:	2b10      	cmp	r3, #16
 800b1ac:	d10a      	bne.n	800b1c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f7f5 fb6c 	bl	80008a8 <HAL_UARTEx_RxEventCallback>
 800b1d0:	e002      	b.n	800b1d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7ff fbda 	bl	800a98c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	e002      	b.n	800b1e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	e000      	b.n	800b1e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b1e0:	2302      	movs	r3, #2
  }
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3730      	adds	r7, #48	@ 0x30
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1f0:	b0c0      	sub	sp, #256	@ 0x100
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b208:	68d9      	ldr	r1, [r3, #12]
 800b20a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	ea40 0301 	orr.w	r3, r0, r1
 800b214:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	431a      	orrs	r2, r3
 800b224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	431a      	orrs	r2, r3
 800b22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	4313      	orrs	r3, r2
 800b234:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b244:	f021 010c 	bic.w	r1, r1, #12
 800b248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b252:	430b      	orrs	r3, r1
 800b254:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b266:	6999      	ldr	r1, [r3, #24]
 800b268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	ea40 0301 	orr.w	r3, r0, r1
 800b272:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	4b8f      	ldr	r3, [pc, #572]	@ (800b4b8 <UART_SetConfig+0x2cc>)
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d005      	beq.n	800b28c <UART_SetConfig+0xa0>
 800b280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	4b8d      	ldr	r3, [pc, #564]	@ (800b4bc <UART_SetConfig+0x2d0>)
 800b288:	429a      	cmp	r2, r3
 800b28a:	d104      	bne.n	800b296 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b28c:	f7fc f8a8 	bl	80073e0 <HAL_RCC_GetPCLK2Freq>
 800b290:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b294:	e003      	b.n	800b29e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b296:	f7fc f88f 	bl	80073b8 <HAL_RCC_GetPCLK1Freq>
 800b29a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b29e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2a2:	69db      	ldr	r3, [r3, #28]
 800b2a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2a8:	f040 810c 	bne.w	800b4c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b2ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b2b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b2ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b2be:	4622      	mov	r2, r4
 800b2c0:	462b      	mov	r3, r5
 800b2c2:	1891      	adds	r1, r2, r2
 800b2c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b2c6:	415b      	adcs	r3, r3
 800b2c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b2ce:	4621      	mov	r1, r4
 800b2d0:	eb12 0801 	adds.w	r8, r2, r1
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	eb43 0901 	adc.w	r9, r3, r1
 800b2da:	f04f 0200 	mov.w	r2, #0
 800b2de:	f04f 0300 	mov.w	r3, #0
 800b2e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b2e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b2ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b2ee:	4690      	mov	r8, r2
 800b2f0:	4699      	mov	r9, r3
 800b2f2:	4623      	mov	r3, r4
 800b2f4:	eb18 0303 	adds.w	r3, r8, r3
 800b2f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2fc:	462b      	mov	r3, r5
 800b2fe:	eb49 0303 	adc.w	r3, r9, r3
 800b302:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b312:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b316:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b31a:	460b      	mov	r3, r1
 800b31c:	18db      	adds	r3, r3, r3
 800b31e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b320:	4613      	mov	r3, r2
 800b322:	eb42 0303 	adc.w	r3, r2, r3
 800b326:	657b      	str	r3, [r7, #84]	@ 0x54
 800b328:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b32c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b330:	f7f4 ffbe 	bl	80002b0 <__aeabi_uldivmod>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4b61      	ldr	r3, [pc, #388]	@ (800b4c0 <UART_SetConfig+0x2d4>)
 800b33a:	fba3 2302 	umull	r2, r3, r3, r2
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	011c      	lsls	r4, r3, #4
 800b342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b346:	2200      	movs	r2, #0
 800b348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b34c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b350:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b354:	4642      	mov	r2, r8
 800b356:	464b      	mov	r3, r9
 800b358:	1891      	adds	r1, r2, r2
 800b35a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b35c:	415b      	adcs	r3, r3
 800b35e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b360:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b364:	4641      	mov	r1, r8
 800b366:	eb12 0a01 	adds.w	sl, r2, r1
 800b36a:	4649      	mov	r1, r9
 800b36c:	eb43 0b01 	adc.w	fp, r3, r1
 800b370:	f04f 0200 	mov.w	r2, #0
 800b374:	f04f 0300 	mov.w	r3, #0
 800b378:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b37c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b380:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b384:	4692      	mov	sl, r2
 800b386:	469b      	mov	fp, r3
 800b388:	4643      	mov	r3, r8
 800b38a:	eb1a 0303 	adds.w	r3, sl, r3
 800b38e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b392:	464b      	mov	r3, r9
 800b394:	eb4b 0303 	adc.w	r3, fp, r3
 800b398:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b39c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b3a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b3ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	18db      	adds	r3, r3, r3
 800b3b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	eb42 0303 	adc.w	r3, r2, r3
 800b3bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b3c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b3c6:	f7f4 ff73 	bl	80002b0 <__aeabi_uldivmod>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	4b3b      	ldr	r3, [pc, #236]	@ (800b4c0 <UART_SetConfig+0x2d4>)
 800b3d2:	fba3 2301 	umull	r2, r3, r3, r1
 800b3d6:	095b      	lsrs	r3, r3, #5
 800b3d8:	2264      	movs	r2, #100	@ 0x64
 800b3da:	fb02 f303 	mul.w	r3, r2, r3
 800b3de:	1acb      	subs	r3, r1, r3
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b3e6:	4b36      	ldr	r3, [pc, #216]	@ (800b4c0 <UART_SetConfig+0x2d4>)
 800b3e8:	fba3 2302 	umull	r2, r3, r3, r2
 800b3ec:	095b      	lsrs	r3, r3, #5
 800b3ee:	005b      	lsls	r3, r3, #1
 800b3f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b3f4:	441c      	add	r4, r3
 800b3f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b400:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b404:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b408:	4642      	mov	r2, r8
 800b40a:	464b      	mov	r3, r9
 800b40c:	1891      	adds	r1, r2, r2
 800b40e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b410:	415b      	adcs	r3, r3
 800b412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b414:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b418:	4641      	mov	r1, r8
 800b41a:	1851      	adds	r1, r2, r1
 800b41c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b41e:	4649      	mov	r1, r9
 800b420:	414b      	adcs	r3, r1
 800b422:	637b      	str	r3, [r7, #52]	@ 0x34
 800b424:	f04f 0200 	mov.w	r2, #0
 800b428:	f04f 0300 	mov.w	r3, #0
 800b42c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b430:	4659      	mov	r1, fp
 800b432:	00cb      	lsls	r3, r1, #3
 800b434:	4651      	mov	r1, sl
 800b436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b43a:	4651      	mov	r1, sl
 800b43c:	00ca      	lsls	r2, r1, #3
 800b43e:	4610      	mov	r0, r2
 800b440:	4619      	mov	r1, r3
 800b442:	4603      	mov	r3, r0
 800b444:	4642      	mov	r2, r8
 800b446:	189b      	adds	r3, r3, r2
 800b448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b44c:	464b      	mov	r3, r9
 800b44e:	460a      	mov	r2, r1
 800b450:	eb42 0303 	adc.w	r3, r2, r3
 800b454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b464:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b468:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b46c:	460b      	mov	r3, r1
 800b46e:	18db      	adds	r3, r3, r3
 800b470:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b472:	4613      	mov	r3, r2
 800b474:	eb42 0303 	adc.w	r3, r2, r3
 800b478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b47a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b47e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b482:	f7f4 ff15 	bl	80002b0 <__aeabi_uldivmod>
 800b486:	4602      	mov	r2, r0
 800b488:	460b      	mov	r3, r1
 800b48a:	4b0d      	ldr	r3, [pc, #52]	@ (800b4c0 <UART_SetConfig+0x2d4>)
 800b48c:	fba3 1302 	umull	r1, r3, r3, r2
 800b490:	095b      	lsrs	r3, r3, #5
 800b492:	2164      	movs	r1, #100	@ 0x64
 800b494:	fb01 f303 	mul.w	r3, r1, r3
 800b498:	1ad3      	subs	r3, r2, r3
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	3332      	adds	r3, #50	@ 0x32
 800b49e:	4a08      	ldr	r2, [pc, #32]	@ (800b4c0 <UART_SetConfig+0x2d4>)
 800b4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a4:	095b      	lsrs	r3, r3, #5
 800b4a6:	f003 0207 	and.w	r2, r3, #7
 800b4aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4422      	add	r2, r4
 800b4b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b4b4:	e106      	b.n	800b6c4 <UART_SetConfig+0x4d8>
 800b4b6:	bf00      	nop
 800b4b8:	40011000 	.word	0x40011000
 800b4bc:	40011400 	.word	0x40011400
 800b4c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b4c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b4ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b4d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b4d6:	4642      	mov	r2, r8
 800b4d8:	464b      	mov	r3, r9
 800b4da:	1891      	adds	r1, r2, r2
 800b4dc:	6239      	str	r1, [r7, #32]
 800b4de:	415b      	adcs	r3, r3
 800b4e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4e6:	4641      	mov	r1, r8
 800b4e8:	1854      	adds	r4, r2, r1
 800b4ea:	4649      	mov	r1, r9
 800b4ec:	eb43 0501 	adc.w	r5, r3, r1
 800b4f0:	f04f 0200 	mov.w	r2, #0
 800b4f4:	f04f 0300 	mov.w	r3, #0
 800b4f8:	00eb      	lsls	r3, r5, #3
 800b4fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4fe:	00e2      	lsls	r2, r4, #3
 800b500:	4614      	mov	r4, r2
 800b502:	461d      	mov	r5, r3
 800b504:	4643      	mov	r3, r8
 800b506:	18e3      	adds	r3, r4, r3
 800b508:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b50c:	464b      	mov	r3, r9
 800b50e:	eb45 0303 	adc.w	r3, r5, r3
 800b512:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b522:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b526:	f04f 0200 	mov.w	r2, #0
 800b52a:	f04f 0300 	mov.w	r3, #0
 800b52e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b532:	4629      	mov	r1, r5
 800b534:	008b      	lsls	r3, r1, #2
 800b536:	4621      	mov	r1, r4
 800b538:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b53c:	4621      	mov	r1, r4
 800b53e:	008a      	lsls	r2, r1, #2
 800b540:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b544:	f7f4 feb4 	bl	80002b0 <__aeabi_uldivmod>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4b60      	ldr	r3, [pc, #384]	@ (800b6d0 <UART_SetConfig+0x4e4>)
 800b54e:	fba3 2302 	umull	r2, r3, r3, r2
 800b552:	095b      	lsrs	r3, r3, #5
 800b554:	011c      	lsls	r4, r3, #4
 800b556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b560:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b564:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b568:	4642      	mov	r2, r8
 800b56a:	464b      	mov	r3, r9
 800b56c:	1891      	adds	r1, r2, r2
 800b56e:	61b9      	str	r1, [r7, #24]
 800b570:	415b      	adcs	r3, r3
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b578:	4641      	mov	r1, r8
 800b57a:	1851      	adds	r1, r2, r1
 800b57c:	6139      	str	r1, [r7, #16]
 800b57e:	4649      	mov	r1, r9
 800b580:	414b      	adcs	r3, r1
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	f04f 0300 	mov.w	r3, #0
 800b58c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b590:	4659      	mov	r1, fp
 800b592:	00cb      	lsls	r3, r1, #3
 800b594:	4651      	mov	r1, sl
 800b596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b59a:	4651      	mov	r1, sl
 800b59c:	00ca      	lsls	r2, r1, #3
 800b59e:	4610      	mov	r0, r2
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	4642      	mov	r2, r8
 800b5a6:	189b      	adds	r3, r3, r2
 800b5a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b5ac:	464b      	mov	r3, r9
 800b5ae:	460a      	mov	r2, r1
 800b5b0:	eb42 0303 	adc.w	r3, r2, r3
 800b5b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b5c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b5c4:	f04f 0200 	mov.w	r2, #0
 800b5c8:	f04f 0300 	mov.w	r3, #0
 800b5cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b5d0:	4649      	mov	r1, r9
 800b5d2:	008b      	lsls	r3, r1, #2
 800b5d4:	4641      	mov	r1, r8
 800b5d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5da:	4641      	mov	r1, r8
 800b5dc:	008a      	lsls	r2, r1, #2
 800b5de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b5e2:	f7f4 fe65 	bl	80002b0 <__aeabi_uldivmod>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	4611      	mov	r1, r2
 800b5ec:	4b38      	ldr	r3, [pc, #224]	@ (800b6d0 <UART_SetConfig+0x4e4>)
 800b5ee:	fba3 2301 	umull	r2, r3, r3, r1
 800b5f2:	095b      	lsrs	r3, r3, #5
 800b5f4:	2264      	movs	r2, #100	@ 0x64
 800b5f6:	fb02 f303 	mul.w	r3, r2, r3
 800b5fa:	1acb      	subs	r3, r1, r3
 800b5fc:	011b      	lsls	r3, r3, #4
 800b5fe:	3332      	adds	r3, #50	@ 0x32
 800b600:	4a33      	ldr	r2, [pc, #204]	@ (800b6d0 <UART_SetConfig+0x4e4>)
 800b602:	fba2 2303 	umull	r2, r3, r2, r3
 800b606:	095b      	lsrs	r3, r3, #5
 800b608:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b60c:	441c      	add	r4, r3
 800b60e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b612:	2200      	movs	r2, #0
 800b614:	673b      	str	r3, [r7, #112]	@ 0x70
 800b616:	677a      	str	r2, [r7, #116]	@ 0x74
 800b618:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b61c:	4642      	mov	r2, r8
 800b61e:	464b      	mov	r3, r9
 800b620:	1891      	adds	r1, r2, r2
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	415b      	adcs	r3, r3
 800b626:	60fb      	str	r3, [r7, #12]
 800b628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b62c:	4641      	mov	r1, r8
 800b62e:	1851      	adds	r1, r2, r1
 800b630:	6039      	str	r1, [r7, #0]
 800b632:	4649      	mov	r1, r9
 800b634:	414b      	adcs	r3, r1
 800b636:	607b      	str	r3, [r7, #4]
 800b638:	f04f 0200 	mov.w	r2, #0
 800b63c:	f04f 0300 	mov.w	r3, #0
 800b640:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b644:	4659      	mov	r1, fp
 800b646:	00cb      	lsls	r3, r1, #3
 800b648:	4651      	mov	r1, sl
 800b64a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b64e:	4651      	mov	r1, sl
 800b650:	00ca      	lsls	r2, r1, #3
 800b652:	4610      	mov	r0, r2
 800b654:	4619      	mov	r1, r3
 800b656:	4603      	mov	r3, r0
 800b658:	4642      	mov	r2, r8
 800b65a:	189b      	adds	r3, r3, r2
 800b65c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b65e:	464b      	mov	r3, r9
 800b660:	460a      	mov	r2, r1
 800b662:	eb42 0303 	adc.w	r3, r2, r3
 800b666:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	663b      	str	r3, [r7, #96]	@ 0x60
 800b672:	667a      	str	r2, [r7, #100]	@ 0x64
 800b674:	f04f 0200 	mov.w	r2, #0
 800b678:	f04f 0300 	mov.w	r3, #0
 800b67c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b680:	4649      	mov	r1, r9
 800b682:	008b      	lsls	r3, r1, #2
 800b684:	4641      	mov	r1, r8
 800b686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b68a:	4641      	mov	r1, r8
 800b68c:	008a      	lsls	r2, r1, #2
 800b68e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b692:	f7f4 fe0d 	bl	80002b0 <__aeabi_uldivmod>
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	4b0d      	ldr	r3, [pc, #52]	@ (800b6d0 <UART_SetConfig+0x4e4>)
 800b69c:	fba3 1302 	umull	r1, r3, r3, r2
 800b6a0:	095b      	lsrs	r3, r3, #5
 800b6a2:	2164      	movs	r1, #100	@ 0x64
 800b6a4:	fb01 f303 	mul.w	r3, r1, r3
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	011b      	lsls	r3, r3, #4
 800b6ac:	3332      	adds	r3, #50	@ 0x32
 800b6ae:	4a08      	ldr	r2, [pc, #32]	@ (800b6d0 <UART_SetConfig+0x4e4>)
 800b6b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b6b4:	095b      	lsrs	r3, r3, #5
 800b6b6:	f003 020f 	and.w	r2, r3, #15
 800b6ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4422      	add	r2, r4
 800b6c2:	609a      	str	r2, [r3, #8]
}
 800b6c4:	bf00      	nop
 800b6c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6d0:	51eb851f 	.word	0x51eb851f

0800b6d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d123      	bne.n	800b72e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b6ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	6851      	ldr	r1, [r2, #4]
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	6892      	ldr	r2, [r2, #8]
 800b6fa:	4311      	orrs	r1, r2
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	68d2      	ldr	r2, [r2, #12]
 800b700:	4311      	orrs	r1, r2
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	6912      	ldr	r2, [r2, #16]
 800b706:	4311      	orrs	r1, r2
 800b708:	683a      	ldr	r2, [r7, #0]
 800b70a:	6952      	ldr	r2, [r2, #20]
 800b70c:	4311      	orrs	r1, r2
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	6992      	ldr	r2, [r2, #24]
 800b712:	4311      	orrs	r1, r2
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	69d2      	ldr	r2, [r2, #28]
 800b718:	4311      	orrs	r1, r2
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	6a12      	ldr	r2, [r2, #32]
 800b71e:	4311      	orrs	r1, r2
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b724:	430a      	orrs	r2, r1
 800b726:	431a      	orrs	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	e028      	b.n	800b780 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	69d9      	ldr	r1, [r3, #28]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	6a1b      	ldr	r3, [r3, #32]
 800b73e:	4319      	orrs	r1, r3
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b744:	430b      	orrs	r3, r1
 800b746:	431a      	orrs	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b754:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	6851      	ldr	r1, [r2, #4]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	6892      	ldr	r2, [r2, #8]
 800b760:	4311      	orrs	r1, r2
 800b762:	683a      	ldr	r2, [r7, #0]
 800b764:	68d2      	ldr	r2, [r2, #12]
 800b766:	4311      	orrs	r1, r2
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	6912      	ldr	r2, [r2, #16]
 800b76c:	4311      	orrs	r1, r2
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	6952      	ldr	r2, [r2, #20]
 800b772:	4311      	orrs	r1, r2
 800b774:	683a      	ldr	r2, [r7, #0]
 800b776:	6992      	ldr	r2, [r2, #24]
 800b778:	430a      	orrs	r2, r1
 800b77a:	431a      	orrs	r2, r3
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	370c      	adds	r7, #12
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b78e:	b480      	push	{r7}
 800b790:	b085      	sub	sp, #20
 800b792:	af00      	add	r7, sp, #0
 800b794:	60f8      	str	r0, [r7, #12]
 800b796:	60b9      	str	r1, [r7, #8]
 800b798:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d128      	bne.n	800b7f2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	1e59      	subs	r1, r3, #1
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	011b      	lsls	r3, r3, #4
 800b7b6:	4319      	orrs	r1, r3
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	3b01      	subs	r3, #1
 800b7be:	021b      	lsls	r3, r3, #8
 800b7c0:	4319      	orrs	r1, r3
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	3b01      	subs	r3, #1
 800b7c8:	031b      	lsls	r3, r3, #12
 800b7ca:	4319      	orrs	r1, r3
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	691b      	ldr	r3, [r3, #16]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	041b      	lsls	r3, r3, #16
 800b7d4:	4319      	orrs	r1, r3
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	051b      	lsls	r3, r3, #20
 800b7de:	4319      	orrs	r1, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	061b      	lsls	r3, r3, #24
 800b7e8:	430b      	orrs	r3, r1
 800b7ea:	431a      	orrs	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	609a      	str	r2, [r3, #8]
 800b7f0:	e02f      	b.n	800b852 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	689b      	ldr	r3, [r3, #8]
 800b7f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b7fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	68d2      	ldr	r2, [r2, #12]
 800b802:	3a01      	subs	r2, #1
 800b804:	0311      	lsls	r1, r2, #12
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	6952      	ldr	r2, [r2, #20]
 800b80a:	3a01      	subs	r2, #1
 800b80c:	0512      	lsls	r2, r2, #20
 800b80e:	430a      	orrs	r2, r1
 800b810:	431a      	orrs	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	1e59      	subs	r1, r3, #1
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	3b01      	subs	r3, #1
 800b82a:	011b      	lsls	r3, r3, #4
 800b82c:	4319      	orrs	r1, r3
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	3b01      	subs	r3, #1
 800b834:	021b      	lsls	r3, r3, #8
 800b836:	4319      	orrs	r1, r3
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	041b      	lsls	r3, r3, #16
 800b840:	4319      	orrs	r1, r3
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	699b      	ldr	r3, [r3, #24]
 800b846:	3b01      	subs	r3, #1
 800b848:	061b      	lsls	r3, r3, #24
 800b84a:	430b      	orrs	r3, r1
 800b84c:	431a      	orrs	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b860:	b084      	sub	sp, #16
 800b862:	b480      	push	{r7}
 800b864:	b085      	sub	sp, #20
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	f107 001c 	add.w	r0, r7, #28
 800b86e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b872:	2300      	movs	r3, #0
 800b874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b876:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b878:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b87a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800b87e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800b882:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800b886:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800b88a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b88c:	68fa      	ldr	r2, [r7, #12]
 800b88e:	4313      	orrs	r3, r2
 800b890:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800b89a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	b004      	add	sp, #16
 800b8b4:	4770      	bx	lr

0800b8b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b8b6:	b480      	push	{r7}
 800b8b8:	b083      	sub	sp, #12
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b8d0:	b480      	push	{r7}
 800b8d2:	b083      	sub	sp, #12
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2203      	movs	r2, #3
 800b8fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 0303 	and.w	r3, r3, #3
}
 800b91e:	4618      	mov	r0, r3
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b085      	sub	sp, #20
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b934:	2300      	movs	r3, #0
 800b936:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b948:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b94e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b954:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	4313      	orrs	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b964:	f023 030f 	bic.w	r3, r3, #15
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	431a      	orrs	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b970:	2300      	movs	r3, #0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr

0800b97e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b97e:	b480      	push	{r7}
 800b980:	b083      	sub	sp, #12
 800b982:	af00      	add	r7, sp, #0
 800b984:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	b2db      	uxtb	r3, r3
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	3314      	adds	r3, #20
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
}  
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b9be:	b480      	push	{r7}
 800b9c0:	b085      	sub	sp, #20
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	685a      	ldr	r2, [r3, #4]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b9e4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b9ea:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b9f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9fc:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	431a      	orrs	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ba08:	2300      	movs	r3, #0

}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b088      	sub	sp, #32
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ba24:	2310      	movs	r3, #16
 800ba26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba28:	2340      	movs	r3, #64	@ 0x40
 800ba2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba36:	f107 0308 	add.w	r3, r7, #8
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff ff74 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ba42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba46:	2110      	movs	r1, #16
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 fa19 	bl	800be80 <SDMMC_GetCmdResp1>
 800ba4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba50:	69fb      	ldr	r3, [r7, #28]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3720      	adds	r7, #32
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b088      	sub	sp, #32
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ba68:	2311      	movs	r3, #17
 800ba6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ba6c:	2340      	movs	r3, #64	@ 0x40
 800ba6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ba70:	2300      	movs	r3, #0
 800ba72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ba74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ba7a:	f107 0308 	add.w	r3, r7, #8
 800ba7e:	4619      	mov	r1, r3
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f7ff ff52 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ba86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba8a:	2111      	movs	r1, #17
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f9f7 	bl	800be80 <SDMMC_GetCmdResp1>
 800ba92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba94:	69fb      	ldr	r3, [r7, #28]
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3720      	adds	r7, #32
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b088      	sub	sp, #32
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800baac:	2312      	movs	r3, #18
 800baae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bab0:	2340      	movs	r3, #64	@ 0x40
 800bab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bab4:	2300      	movs	r3, #0
 800bab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bab8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800babc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800babe:	f107 0308 	add.w	r3, r7, #8
 800bac2:	4619      	mov	r1, r3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f7ff ff30 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800baca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bace:	2112      	movs	r1, #18
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f9d5 	bl	800be80 <SDMMC_GetCmdResp1>
 800bad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bad8:	69fb      	ldr	r3, [r7, #28]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3720      	adds	r7, #32
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b088      	sub	sp, #32
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800baf0:	2318      	movs	r3, #24
 800baf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800baf4:	2340      	movs	r3, #64	@ 0x40
 800baf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800baf8:	2300      	movs	r3, #0
 800bafa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bafc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb02:	f107 0308 	add.w	r3, r7, #8
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ff0e 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800bb0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb12:	2118      	movs	r1, #24
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f9b3 	bl	800be80 <SDMMC_GetCmdResp1>
 800bb1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb1c:	69fb      	ldr	r3, [r7, #28]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3720      	adds	r7, #32
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b088      	sub	sp, #32
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bb34:	2319      	movs	r3, #25
 800bb36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb38:	2340      	movs	r3, #64	@ 0x40
 800bb3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb46:	f107 0308 	add.w	r3, r7, #8
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f7ff feec 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800bb52:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bb56:	2119      	movs	r1, #25
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 f991 	bl	800be80 <SDMMC_GetCmdResp1>
 800bb5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb60:	69fb      	ldr	r3, [r7, #28]
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3720      	adds	r7, #32
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
	...

0800bb6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bb74:	2300      	movs	r3, #0
 800bb76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bb78:	230c      	movs	r3, #12
 800bb7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bb7c:	2340      	movs	r3, #64	@ 0x40
 800bb7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bb80:	2300      	movs	r3, #0
 800bb82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bb84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bb8a:	f107 0308 	add.w	r3, r7, #8
 800bb8e:	4619      	mov	r1, r3
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f7ff feca 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800bb96:	4a05      	ldr	r2, [pc, #20]	@ (800bbac <SDMMC_CmdStopTransfer+0x40>)
 800bb98:	210c      	movs	r1, #12
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f970 	bl	800be80 <SDMMC_GetCmdResp1>
 800bba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bba2:	69fb      	ldr	r3, [r7, #28]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3720      	adds	r7, #32
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	05f5e100 	.word	0x05f5e100

0800bbb0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b08a      	sub	sp, #40	@ 0x28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bbc0:	2307      	movs	r3, #7
 800bbc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bbc4:	2340      	movs	r3, #64	@ 0x40
 800bbc6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bbcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bbd0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bbd2:	f107 0310 	add.w	r3, r7, #16
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f7ff fea6 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800bbde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbe2:	2107      	movs	r1, #7
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f94b 	bl	800be80 <SDMMC_GetCmdResp1>
 800bbea:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800bbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3728      	adds	r7, #40	@ 0x28
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b088      	sub	sp, #32
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bc02:	2300      	movs	r3, #0
 800bc04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800bc06:	2300      	movs	r3, #0
 800bc08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc14:	f107 0308 	add.w	r3, r7, #8
 800bc18:	4619      	mov	r1, r3
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff fe85 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fb65 	bl	800c2f0 <SDMMC_GetCmdError>
 800bc26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc28:	69fb      	ldr	r3, [r7, #28]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3720      	adds	r7, #32
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}

0800bc32 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800bc32:	b580      	push	{r7, lr}
 800bc34:	b088      	sub	sp, #32
 800bc36:	af00      	add	r7, sp, #0
 800bc38:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bc3a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800bc3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bc40:	2308      	movs	r3, #8
 800bc42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bc44:	2340      	movs	r3, #64	@ 0x40
 800bc46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc52:	f107 0308 	add.w	r3, r7, #8
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff fe66 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 faf8 	bl	800c254 <SDMMC_GetCmdResp7>
 800bc64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc66:	69fb      	ldr	r3, [r7, #28]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3720      	adds	r7, #32
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b088      	sub	sp, #32
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bc7e:	2337      	movs	r3, #55	@ 0x37
 800bc80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bc82:	2340      	movs	r3, #64	@ 0x40
 800bc84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bc86:	2300      	movs	r3, #0
 800bc88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bc8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bc90:	f107 0308 	add.w	r3, r7, #8
 800bc94:	4619      	mov	r1, r3
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7ff fe47 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800bc9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bca0:	2137      	movs	r1, #55	@ 0x37
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 f8ec 	bl	800be80 <SDMMC_GetCmdResp1>
 800bca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcaa:	69fb      	ldr	r3, [r7, #28]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3720      	adds	r7, #32
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b088      	sub	sp, #32
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bcc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bcca:	2329      	movs	r3, #41	@ 0x29
 800bccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bcce:	2340      	movs	r3, #64	@ 0x40
 800bcd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bcd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bcda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bcdc:	f107 0308 	add.w	r3, r7, #8
 800bce0:	4619      	mov	r1, r3
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7ff fe21 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f9ff 	bl	800c0ec <SDMMC_GetCmdResp3>
 800bcee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcf0:	69fb      	ldr	r3, [r7, #28]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b088      	sub	sp, #32
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bd08:	2306      	movs	r3, #6
 800bd0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd0c:	2340      	movs	r3, #64	@ 0x40
 800bd0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd10:	2300      	movs	r3, #0
 800bd12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd1a:	f107 0308 	add.w	r3, r7, #8
 800bd1e:	4619      	mov	r1, r3
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f7ff fe02 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800bd26:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd2a:	2106      	movs	r1, #6
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f8a7 	bl	800be80 <SDMMC_GetCmdResp1>
 800bd32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd34:	69fb      	ldr	r3, [r7, #28]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3720      	adds	r7, #32
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b088      	sub	sp, #32
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bd46:	2300      	movs	r3, #0
 800bd48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bd4a:	2333      	movs	r3, #51	@ 0x33
 800bd4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800bd4e:	2340      	movs	r3, #64	@ 0x40
 800bd50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd52:	2300      	movs	r3, #0
 800bd54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd5c:	f107 0308 	add.w	r3, r7, #8
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7ff fde1 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800bd68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd6c:	2133      	movs	r1, #51	@ 0x33
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f886 	bl	800be80 <SDMMC_GetCmdResp1>
 800bd74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd76:	69fb      	ldr	r3, [r7, #28]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3720      	adds	r7, #32
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b088      	sub	sp, #32
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bd90:	23c0      	movs	r3, #192	@ 0xc0
 800bd92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bd98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bd9e:	f107 0308 	add.w	r3, r7, #8
 800bda2:	4619      	mov	r1, r3
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f7ff fdc0 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f956 	bl	800c05c <SDMMC_GetCmdResp2>
 800bdb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdb2:	69fb      	ldr	r3, [r7, #28]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3720      	adds	r7, #32
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b088      	sub	sp, #32
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800bdca:	2309      	movs	r3, #9
 800bdcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800bdce:	23c0      	movs	r3, #192	@ 0xc0
 800bdd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800bdd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800bddc:	f107 0308 	add.w	r3, r7, #8
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7ff fda1 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f937 	bl	800c05c <SDMMC_GetCmdResp2>
 800bdee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bdf0:	69fb      	ldr	r3, [r7, #28]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3720      	adds	r7, #32
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b088      	sub	sp, #32
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800be04:	2300      	movs	r3, #0
 800be06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800be08:	2303      	movs	r3, #3
 800be0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be0c:	2340      	movs	r3, #64	@ 0x40
 800be0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be10:	2300      	movs	r3, #0
 800be12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be1a:	f107 0308 	add.w	r3, r7, #8
 800be1e:	4619      	mov	r1, r3
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f7ff fd82 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	2103      	movs	r1, #3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f99c 	bl	800c168 <SDMMC_GetCmdResp6>
 800be30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be32:	69fb      	ldr	r3, [r7, #28]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3720      	adds	r7, #32
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800be4a:	230d      	movs	r3, #13
 800be4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800be4e:	2340      	movs	r3, #64	@ 0x40
 800be50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800be52:	2300      	movs	r3, #0
 800be54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800be56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800be5c:	f107 0308 	add.w	r3, r7, #8
 800be60:	4619      	mov	r1, r3
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff fd61 	bl	800b92a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800be68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be6c:	210d      	movs	r1, #13
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f806 	bl	800be80 <SDMMC_GetCmdResp1>
 800be74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be76:	69fb      	ldr	r3, [r7, #28]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3720      	adds	r7, #32
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b088      	sub	sp, #32
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	460b      	mov	r3, r1
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800be8e:	4b70      	ldr	r3, [pc, #448]	@ (800c050 <SDMMC_GetCmdResp1+0x1d0>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a70      	ldr	r2, [pc, #448]	@ (800c054 <SDMMC_GetCmdResp1+0x1d4>)
 800be94:	fba2 2303 	umull	r2, r3, r2, r3
 800be98:	0a5a      	lsrs	r2, r3, #9
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	fb02 f303 	mul.w	r3, r2, r3
 800bea0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	1e5a      	subs	r2, r3, #1
 800bea6:	61fa      	str	r2, [r7, #28]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d102      	bne.n	800beb2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800beac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800beb0:	e0c9      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beb6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0ef      	beq.n	800bea2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d1ea      	bne.n	800bea2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bed0:	f003 0304 	and.w	r3, r3, #4
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d004      	beq.n	800bee2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2204      	movs	r2, #4
 800bedc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bede:	2304      	movs	r3, #4
 800bee0:	e0b1      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d004      	beq.n	800bef8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e0a6      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	22c5      	movs	r2, #197	@ 0xc5
 800befc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800befe:	68f8      	ldr	r0, [r7, #12]
 800bf00:	f7ff fd3d 	bl	800b97e <SDIO_GetCommandResponse>
 800bf04:	4603      	mov	r3, r0
 800bf06:	461a      	mov	r2, r3
 800bf08:	7afb      	ldrb	r3, [r7, #11]
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d001      	beq.n	800bf12 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e099      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bf12:	2100      	movs	r1, #0
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7ff fd3f 	bl	800b998 <SDIO_GetResponse>
 800bf1a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	4b4e      	ldr	r3, [pc, #312]	@ (800c058 <SDMMC_GetCmdResp1+0x1d8>)
 800bf20:	4013      	ands	r3, r2
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800bf26:	2300      	movs	r3, #0
 800bf28:	e08d      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	da02      	bge.n	800bf36 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bf30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bf34:	e087      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d001      	beq.n	800bf44 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bf40:	2340      	movs	r3, #64	@ 0x40
 800bf42:	e080      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bf4e:	2380      	movs	r3, #128	@ 0x80
 800bf50:	e079      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bf5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bf60:	e071      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bf6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf70:	e069      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d002      	beq.n	800bf82 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bf7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf80:	e061      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bf8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bf90:	e059      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d002      	beq.n	800bfa2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bf9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bfa0:	e051      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d002      	beq.n	800bfb2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bfac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bfb0:	e049      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d002      	beq.n	800bfc2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bfbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bfc0:	e041      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d002      	beq.n	800bfd2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bfcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bfd0:	e039      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d002      	beq.n	800bfe2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bfdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800bfe0:	e031      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d002      	beq.n	800bff2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bfec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800bff0:	e029      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d002      	beq.n	800c002 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bffc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c000:	e021      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c00c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c010:	e019      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c01c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c020:	e011      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c02c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c030:	e009      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f003 0308 	and.w	r3, r3, #8
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d002      	beq.n	800c042 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c03c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c040:	e001      	b.n	800c046 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c042:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c046:	4618      	mov	r0, r3
 800c048:	3720      	adds	r7, #32
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	20000004 	.word	0x20000004
 800c054:	10624dd3 	.word	0x10624dd3
 800c058:	fdffe008 	.word	0xfdffe008

0800c05c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c064:	4b1f      	ldr	r3, [pc, #124]	@ (800c0e4 <SDMMC_GetCmdResp2+0x88>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a1f      	ldr	r2, [pc, #124]	@ (800c0e8 <SDMMC_GetCmdResp2+0x8c>)
 800c06a:	fba2 2303 	umull	r2, r3, r2, r3
 800c06e:	0a5b      	lsrs	r3, r3, #9
 800c070:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c074:	fb02 f303 	mul.w	r3, r2, r3
 800c078:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	1e5a      	subs	r2, r3, #1
 800c07e:	60fa      	str	r2, [r7, #12]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d102      	bne.n	800c08a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c084:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c088:	e026      	b.n	800c0d8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c08e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c096:	2b00      	cmp	r3, #0
 800c098:	d0ef      	beq.n	800c07a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1ea      	bne.n	800c07a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d004      	beq.n	800c0ba <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2204      	movs	r2, #4
 800c0b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c0b6:	2304      	movs	r3, #4
 800c0b8:	e00e      	b.n	800c0d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0be:	f003 0301 	and.w	r3, r3, #1
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d004      	beq.n	800c0d0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e003      	b.n	800c0d8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	22c5      	movs	r2, #197	@ 0xc5
 800c0d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	20000004 	.word	0x20000004
 800c0e8:	10624dd3 	.word	0x10624dd3

0800c0ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c0f4:	4b1a      	ldr	r3, [pc, #104]	@ (800c160 <SDMMC_GetCmdResp3+0x74>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a1a      	ldr	r2, [pc, #104]	@ (800c164 <SDMMC_GetCmdResp3+0x78>)
 800c0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fe:	0a5b      	lsrs	r3, r3, #9
 800c100:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c104:	fb02 f303 	mul.w	r3, r2, r3
 800c108:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	1e5a      	subs	r2, r3, #1
 800c10e:	60fa      	str	r2, [r7, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d102      	bne.n	800c11a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c114:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c118:	e01b      	b.n	800c152 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c11e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c126:	2b00      	cmp	r3, #0
 800c128:	d0ef      	beq.n	800c10a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c130:	2b00      	cmp	r3, #0
 800c132:	d1ea      	bne.n	800c10a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c138:	f003 0304 	and.w	r3, r3, #4
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d004      	beq.n	800c14a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2204      	movs	r2, #4
 800c144:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c146:	2304      	movs	r3, #4
 800c148:	e003      	b.n	800c152 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	22c5      	movs	r2, #197	@ 0xc5
 800c14e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	20000004 	.word	0x20000004
 800c164:	10624dd3 	.word	0x10624dd3

0800c168 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b088      	sub	sp, #32
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	460b      	mov	r3, r1
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c176:	4b35      	ldr	r3, [pc, #212]	@ (800c24c <SDMMC_GetCmdResp6+0xe4>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a35      	ldr	r2, [pc, #212]	@ (800c250 <SDMMC_GetCmdResp6+0xe8>)
 800c17c:	fba2 2303 	umull	r2, r3, r2, r3
 800c180:	0a5b      	lsrs	r3, r3, #9
 800c182:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c186:	fb02 f303 	mul.w	r3, r2, r3
 800c18a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	1e5a      	subs	r2, r3, #1
 800c190:	61fa      	str	r2, [r7, #28]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d102      	bne.n	800c19c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c196:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c19a:	e052      	b.n	800c242 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d0ef      	beq.n	800c18c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d1ea      	bne.n	800c18c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ba:	f003 0304 	and.w	r3, r3, #4
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d004      	beq.n	800c1cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2204      	movs	r2, #4
 800c1c6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1c8:	2304      	movs	r3, #4
 800c1ca:	e03a      	b.n	800c242 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d004      	beq.n	800c1e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e02f      	b.n	800c242 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	f7ff fbcb 	bl	800b97e <SDIO_GetCommandResponse>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	7afb      	ldrb	r3, [r7, #11]
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d001      	beq.n	800c1f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e025      	b.n	800c242 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	22c5      	movs	r2, #197	@ 0xc5
 800c1fa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	68f8      	ldr	r0, [r7, #12]
 800c200:	f7ff fbca 	bl	800b998 <SDIO_GetResponse>
 800c204:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d106      	bne.n	800c21e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	0c1b      	lsrs	r3, r3, #16
 800c214:	b29a      	uxth	r2, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c21a:	2300      	movs	r3, #0
 800c21c:	e011      	b.n	800c242 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c224:	2b00      	cmp	r3, #0
 800c226:	d002      	beq.n	800c22e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c228:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c22c:	e009      	b.n	800c242 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c23c:	e001      	b.n	800c242 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c23e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c242:	4618      	mov	r0, r3
 800c244:	3720      	adds	r7, #32
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	20000004 	.word	0x20000004
 800c250:	10624dd3 	.word	0x10624dd3

0800c254 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c25c:	4b22      	ldr	r3, [pc, #136]	@ (800c2e8 <SDMMC_GetCmdResp7+0x94>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a22      	ldr	r2, [pc, #136]	@ (800c2ec <SDMMC_GetCmdResp7+0x98>)
 800c262:	fba2 2303 	umull	r2, r3, r2, r3
 800c266:	0a5b      	lsrs	r3, r3, #9
 800c268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c26c:	fb02 f303 	mul.w	r3, r2, r3
 800c270:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	1e5a      	subs	r2, r3, #1
 800c276:	60fa      	str	r2, [r7, #12]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d102      	bne.n	800c282 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c27c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c280:	e02c      	b.n	800c2dc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c286:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d0ef      	beq.n	800c272 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1ea      	bne.n	800c272 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2a0:	f003 0304 	and.w	r3, r3, #4
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d004      	beq.n	800c2b2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2ae:	2304      	movs	r3, #4
 800c2b0:	e014      	b.n	800c2dc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d004      	beq.n	800c2c8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2201      	movs	r2, #1
 800c2c2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e009      	b.n	800c2dc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2240      	movs	r2, #64	@ 0x40
 800c2d8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c2da:	2300      	movs	r3, #0
  
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	20000004 	.word	0x20000004
 800c2ec:	10624dd3 	.word	0x10624dd3

0800c2f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c2f8:	4b11      	ldr	r3, [pc, #68]	@ (800c340 <SDMMC_GetCmdError+0x50>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a11      	ldr	r2, [pc, #68]	@ (800c344 <SDMMC_GetCmdError+0x54>)
 800c2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800c302:	0a5b      	lsrs	r3, r3, #9
 800c304:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c308:	fb02 f303 	mul.w	r3, r2, r3
 800c30c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	1e5a      	subs	r2, r3, #1
 800c312:	60fa      	str	r2, [r7, #12]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d102      	bne.n	800c31e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c318:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c31c:	e009      	b.n	800c332 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c326:	2b00      	cmp	r3, #0
 800c328:	d0f1      	beq.n	800c30e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	22c5      	movs	r2, #197	@ 0xc5
 800c32e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr
 800c33e:	bf00      	nop
 800c340:	20000004 	.word	0x20000004
 800c344:	10624dd3 	.word	0x10624dd3

0800c348 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c348:	b084      	sub	sp, #16
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	f107 001c 	add.w	r0, r7, #28
 800c356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c35a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d123      	bne.n	800c3aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c366:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800c376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c38a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d105      	bne.n	800c39e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f9dc 	bl	800c75c <USB_CoreReset>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	73fb      	strb	r3, [r7, #15]
 800c3a8:	e01b      	b.n	800c3e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f9d0 	bl	800c75c <USB_CoreReset>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c3c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d106      	bne.n	800c3d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800c3d4:	e005      	b.n	800c3e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c3e2:	7fbb      	ldrb	r3, [r7, #30]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d10b      	bne.n	800c400 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	f043 0206 	orr.w	r2, r3, #6
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	f043 0220 	orr.w	r2, r3, #32
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c400:	7bfb      	ldrb	r3, [r7, #15]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3710      	adds	r7, #16
 800c406:	46bd      	mov	sp, r7
 800c408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c40c:	b004      	add	sp, #16
 800c40e:	4770      	bx	lr

0800c410 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	f043 0201 	orr.w	r2, r3, #1
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c424:	2300      	movs	r3, #0
}
 800c426:	4618      	mov	r0, r3
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr

0800c432 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c432:	b480      	push	{r7}
 800c434:	b083      	sub	sp, #12
 800c436:	af00      	add	r7, sp, #0
 800c438:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	f023 0201 	bic.w	r2, r3, #1
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	460b      	mov	r3, r1
 800c45e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c460:	2300      	movs	r3, #0
 800c462:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	2b01      	cmp	r3, #1
 800c474:	d115      	bne.n	800c4a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c482:	200a      	movs	r0, #10
 800c484:	f7f5 ffb8 	bl	80023f8 <HAL_Delay>
      ms += 10U;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	330a      	adds	r3, #10
 800c48c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f956 	bl	800c740 <USB_GetMode>
 800c494:	4603      	mov	r3, r0
 800c496:	2b01      	cmp	r3, #1
 800c498:	d01e      	beq.n	800c4d8 <USB_SetCurrentMode+0x84>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2bc7      	cmp	r3, #199	@ 0xc7
 800c49e:	d9f0      	bls.n	800c482 <USB_SetCurrentMode+0x2e>
 800c4a0:	e01a      	b.n	800c4d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c4a2:	78fb      	ldrb	r3, [r7, #3]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d115      	bne.n	800c4d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c4b4:	200a      	movs	r0, #10
 800c4b6:	f7f5 ff9f 	bl	80023f8 <HAL_Delay>
      ms += 10U;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	330a      	adds	r3, #10
 800c4be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 f93d 	bl	800c740 <USB_GetMode>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d005      	beq.n	800c4d8 <USB_SetCurrentMode+0x84>
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2bc7      	cmp	r3, #199	@ 0xc7
 800c4d0:	d9f0      	bls.n	800c4b4 <USB_SetCurrentMode+0x60>
 800c4d2:	e001      	b.n	800c4d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e005      	b.n	800c4e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2bc8      	cmp	r3, #200	@ 0xc8
 800c4dc:	d101      	bne.n	800c4e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e000      	b.n	800c4e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c4e2:	2300      	movs	r3, #0
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c506:	d901      	bls.n	800c50c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	e01b      	b.n	800c544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	2b00      	cmp	r3, #0
 800c512:	daf2      	bge.n	800c4fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c514:	2300      	movs	r3, #0
 800c516:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	019b      	lsls	r3, r3, #6
 800c51c:	f043 0220 	orr.w	r2, r3, #32
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	3301      	adds	r3, #1
 800c528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c530:	d901      	bls.n	800c536 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c532:	2303      	movs	r3, #3
 800c534:	e006      	b.n	800c544 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	f003 0320 	and.w	r3, r3, #32
 800c53e:	2b20      	cmp	r3, #32
 800c540:	d0f0      	beq.n	800c524 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr

0800c550 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c558:	2300      	movs	r3, #0
 800c55a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3301      	adds	r3, #1
 800c560:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c568:	d901      	bls.n	800c56e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c56a:	2303      	movs	r3, #3
 800c56c:	e018      	b.n	800c5a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	2b00      	cmp	r3, #0
 800c574:	daf2      	bge.n	800c55c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c576:	2300      	movs	r3, #0
 800c578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2210      	movs	r2, #16
 800c57e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3301      	adds	r3, #1
 800c584:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c58c:	d901      	bls.n	800c592 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c58e:	2303      	movs	r3, #3
 800c590:	e006      	b.n	800c5a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	f003 0310 	and.w	r3, r3, #16
 800c59a:	2b10      	cmp	r3, #16
 800c59c:	d0f0      	beq.n	800c580 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c59e:	2300      	movs	r3, #0
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3714      	adds	r7, #20
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5aa:	4770      	bx	lr

0800c5ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b089      	sub	sp, #36	@ 0x24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4611      	mov	r1, r2
 800c5b8:	461a      	mov	r2, r3
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	71fb      	strb	r3, [r7, #7]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c5ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d123      	bne.n	800c61a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c5d2:	88bb      	ldrh	r3, [r7, #4]
 800c5d4:	3303      	adds	r3, #3
 800c5d6:	089b      	lsrs	r3, r3, #2
 800c5d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c5da:	2300      	movs	r3, #0
 800c5dc:	61bb      	str	r3, [r7, #24]
 800c5de:	e018      	b.n	800c612 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c5e0:	79fb      	ldrb	r3, [r7, #7]
 800c5e2:	031a      	lsls	r2, r3, #12
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	69fb      	ldr	r3, [r7, #28]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5fa:	69fb      	ldr	r3, [r7, #28]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	3301      	adds	r3, #1
 800c604:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	3301      	adds	r3, #1
 800c60a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	3301      	adds	r3, #1
 800c610:	61bb      	str	r3, [r7, #24]
 800c612:	69ba      	ldr	r2, [r7, #24]
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	429a      	cmp	r2, r3
 800c618:	d3e2      	bcc.n	800c5e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3724      	adds	r7, #36	@ 0x24
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c628:	b480      	push	{r7}
 800c62a:	b08b      	sub	sp, #44	@ 0x2c
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	4613      	mov	r3, r2
 800c634:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c63e:	88fb      	ldrh	r3, [r7, #6]
 800c640:	089b      	lsrs	r3, r3, #2
 800c642:	b29b      	uxth	r3, r3
 800c644:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c646:	88fb      	ldrh	r3, [r7, #6]
 800c648:	f003 0303 	and.w	r3, r3, #3
 800c64c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c64e:	2300      	movs	r3, #0
 800c650:	623b      	str	r3, [r7, #32]
 800c652:	e014      	b.n	800c67e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c662:	3301      	adds	r3, #1
 800c664:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c668:	3301      	adds	r3, #1
 800c66a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66e:	3301      	adds	r3, #1
 800c670:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c674:	3301      	adds	r3, #1
 800c676:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	3301      	adds	r3, #1
 800c67c:	623b      	str	r3, [r7, #32]
 800c67e:	6a3a      	ldr	r2, [r7, #32]
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	429a      	cmp	r2, r3
 800c684:	d3e6      	bcc.n	800c654 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c686:	8bfb      	ldrh	r3, [r7, #30]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01e      	beq.n	800c6ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c68c:	2300      	movs	r3, #0
 800c68e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c696:	461a      	mov	r2, r3
 800c698:	f107 0310 	add.w	r3, r7, #16
 800c69c:	6812      	ldr	r2, [r2, #0]
 800c69e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b0:	701a      	strb	r2, [r3, #0]
      i++;
 800c6b2:	6a3b      	ldr	r3, [r7, #32]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c6be:	8bfb      	ldrh	r3, [r7, #30]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c6c4:	8bfb      	ldrh	r3, [r7, #30]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1ea      	bne.n	800c6a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	372c      	adds	r7, #44	@ 0x2c
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	695b      	ldr	r3, [r3, #20]
 800c6e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b085      	sub	sp, #20
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	460b      	mov	r3, r1
 800c708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800c70e:	78fb      	ldrb	r3, [r7, #3]
 800c710:	015a      	lsls	r2, r3, #5
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	4413      	add	r3, r2
 800c716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800c71e:	78fb      	ldrb	r3, [r7, #3]
 800c720:	015a      	lsls	r2, r3, #5
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	4413      	add	r3, r2
 800c726:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	4013      	ands	r3, r2
 800c730:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c732:	68bb      	ldr	r3, [r7, #8]
}
 800c734:	4618      	mov	r0, r3
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	695b      	ldr	r3, [r3, #20]
 800c74c:	f003 0301 	and.w	r3, r3, #1
}
 800c750:	4618      	mov	r0, r3
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c764:	2300      	movs	r3, #0
 800c766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	3301      	adds	r3, #1
 800c76c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c774:	d901      	bls.n	800c77a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	e01b      	b.n	800c7b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	daf2      	bge.n	800c768 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c782:	2300      	movs	r3, #0
 800c784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	f043 0201 	orr.w	r2, r3, #1
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3301      	adds	r3, #1
 800c796:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c79e:	d901      	bls.n	800c7a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e006      	b.n	800c7b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	f003 0301 	and.w	r3, r3, #1
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d0f0      	beq.n	800c792 <USB_CoreReset+0x36>

  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
	...

0800c7c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c7c0:	b084      	sub	sp, #16
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b086      	sub	sp, #24
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c7ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ea:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d119      	bne.n	800c832 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c7fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c802:	2b01      	cmp	r3, #1
 800c804:	d10a      	bne.n	800c81c <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c814:	f043 0304 	orr.w	r3, r3, #4
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	e014      	b.n	800c846 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c82a:	f023 0304 	bic.w	r3, r3, #4
 800c82e:	6013      	str	r3, [r2, #0]
 800c830:	e009      	b.n	800c846 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c840:	f023 0304 	bic.w	r3, r3, #4
 800c844:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c846:	2110      	movs	r1, #16
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7ff fe4f 	bl	800c4ec <USB_FlushTxFifo>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7ff fe79 	bl	800c550 <USB_FlushRxFifo>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c868:	2300      	movs	r3, #0
 800c86a:	613b      	str	r3, [r7, #16]
 800c86c:	e015      	b.n	800c89a <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	015a      	lsls	r2, r3, #5
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	4413      	add	r3, r2
 800c876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c87a:	461a      	mov	r2, r3
 800c87c:	f04f 33ff 	mov.w	r3, #4294967295
 800c880:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	015a      	lsls	r2, r3, #5
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4413      	add	r3, r2
 800c88a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c88e:	461a      	mov	r2, r3
 800c890:	2300      	movs	r3, #0
 800c892:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	3301      	adds	r3, #1
 800c898:	613b      	str	r3, [r7, #16]
 800c89a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c89e:	461a      	mov	r2, r3
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d3e3      	bcc.n	800c86e <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a18      	ldr	r2, [pc, #96]	@ (800c918 <USB_HostInit+0x158>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d10b      	bne.n	800c8d4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c8c2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a15      	ldr	r2, [pc, #84]	@ (800c91c <USB_HostInit+0x15c>)
 800c8c8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a14      	ldr	r2, [pc, #80]	@ (800c920 <USB_HostInit+0x160>)
 800c8ce:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800c8d2:	e009      	b.n	800c8e8 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2280      	movs	r2, #128	@ 0x80
 800c8d8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a11      	ldr	r2, [pc, #68]	@ (800c924 <USB_HostInit+0x164>)
 800c8de:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	4a11      	ldr	r2, [pc, #68]	@ (800c928 <USB_HostInit+0x168>)
 800c8e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c8e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d105      	bne.n	800c8fc <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	f043 0210 	orr.w	r2, r3, #16
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	699a      	ldr	r2, [r3, #24]
 800c900:	4b0a      	ldr	r3, [pc, #40]	@ (800c92c <USB_HostInit+0x16c>)
 800c902:	4313      	orrs	r3, r2
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c908:	7dfb      	ldrb	r3, [r7, #23]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c914:	b004      	add	sp, #16
 800c916:	4770      	bx	lr
 800c918:	40040000 	.word	0x40040000
 800c91c:	01000200 	.word	0x01000200
 800c920:	00e00300 	.word	0x00e00300
 800c924:	00600080 	.word	0x00600080
 800c928:	004000e0 	.word	0x004000e0
 800c92c:	a3200008 	.word	0xa3200008

0800c930 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c94e:	f023 0303 	bic.w	r3, r3, #3
 800c952:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	78fb      	ldrb	r3, [r7, #3]
 800c95e:	f003 0303 	and.w	r3, r3, #3
 800c962:	68f9      	ldr	r1, [r7, #12]
 800c964:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c968:	4313      	orrs	r3, r2
 800c96a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c96c:	78fb      	ldrb	r3, [r7, #3]
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d107      	bne.n	800c982 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c978:	461a      	mov	r2, r3
 800c97a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800c97e:	6053      	str	r3, [r2, #4]
 800c980:	e00c      	b.n	800c99c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800c982:	78fb      	ldrb	r3, [r7, #3]
 800c984:	2b02      	cmp	r3, #2
 800c986:	d107      	bne.n	800c998 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c98e:	461a      	mov	r2, r3
 800c990:	f241 7370 	movw	r3, #6000	@ 0x1770
 800c994:	6053      	str	r3, [r2, #4]
 800c996:	e001      	b.n	800c99c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	e000      	b.n	800c99e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c9ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c9d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c9d8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c9da:	2064      	movs	r0, #100	@ 0x64
 800c9dc:	f7f5 fd0c 	bl	80023f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c9e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c9ee:	200a      	movs	r0, #10
 800c9f0:	f7f5 fd02 	bl	80023f8 <HAL_Delay>

  return HAL_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c9fe:	b480      	push	{r7}
 800ca00:	b085      	sub	sp, #20
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	460b      	mov	r3, r1
 800ca08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800ca22:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d109      	bne.n	800ca42 <USB_DriveVbus+0x44>
 800ca2e:	78fb      	ldrb	r3, [r7, #3]
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d106      	bne.n	800ca42 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ca3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ca40:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ca48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca4c:	d109      	bne.n	800ca62 <USB_DriveVbus+0x64>
 800ca4e:	78fb      	ldrb	r3, [r7, #3]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d106      	bne.n	800ca62 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800ca5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca60:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ca62:	2300      	movs	r3, #0
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr

0800ca70 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	0c5b      	lsrs	r3, r3, #17
 800ca8e:	f003 0303 	and.w	r3, r3, #3
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr

0800ca9e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800ca9e:	b480      	push	{r7}
 800caa0:	b085      	sub	sp, #20
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cab0:	689b      	ldr	r3, [r3, #8]
 800cab2:	b29b      	uxth	r3, r3
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	4608      	mov	r0, r1
 800caca:	4611      	mov	r1, r2
 800cacc:	461a      	mov	r2, r3
 800cace:	4603      	mov	r3, r0
 800cad0:	70fb      	strb	r3, [r7, #3]
 800cad2:	460b      	mov	r3, r1
 800cad4:	70bb      	strb	r3, [r7, #2]
 800cad6:	4613      	mov	r3, r2
 800cad8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cada:	2300      	movs	r3, #0
 800cadc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800cae2:	78fb      	ldrb	r3, [r7, #3]
 800cae4:	015a      	lsls	r2, r3, #5
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	4413      	add	r3, r2
 800caea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800caee:	461a      	mov	r2, r3
 800caf0:	f04f 33ff 	mov.w	r3, #4294967295
 800caf4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800caf6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cafa:	2b03      	cmp	r3, #3
 800cafc:	d87c      	bhi.n	800cbf8 <USB_HC_Init+0x138>
 800cafe:	a201      	add	r2, pc, #4	@ (adr r2, 800cb04 <USB_HC_Init+0x44>)
 800cb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb04:	0800cb15 	.word	0x0800cb15
 800cb08:	0800cbbb 	.word	0x0800cbbb
 800cb0c:	0800cb15 	.word	0x0800cb15
 800cb10:	0800cb7d 	.word	0x0800cb7d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cb14:	78fb      	ldrb	r3, [r7, #3]
 800cb16:	015a      	lsls	r2, r3, #5
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb20:	461a      	mov	r2, r3
 800cb22:	f240 439d 	movw	r3, #1181	@ 0x49d
 800cb26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cb28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	da10      	bge.n	800cb52 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cb30:	78fb      	ldrb	r3, [r7, #3]
 800cb32:	015a      	lsls	r2, r3, #5
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	4413      	add	r3, r2
 800cb38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	78fa      	ldrb	r2, [r7, #3]
 800cb40:	0151      	lsls	r1, r2, #5
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	440a      	add	r2, r1
 800cb46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cb4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb4e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800cb50:	e055      	b.n	800cbfe <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a6f      	ldr	r2, [pc, #444]	@ (800cd14 <USB_HC_Init+0x254>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d151      	bne.n	800cbfe <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cb5a:	78fb      	ldrb	r3, [r7, #3]
 800cb5c:	015a      	lsls	r2, r3, #5
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	4413      	add	r3, r2
 800cb62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	78fa      	ldrb	r2, [r7, #3]
 800cb6a:	0151      	lsls	r1, r2, #5
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	440a      	add	r2, r1
 800cb70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cb74:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cb78:	60d3      	str	r3, [r2, #12]
      break;
 800cb7a:	e040      	b.n	800cbfe <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cb7c:	78fb      	ldrb	r3, [r7, #3]
 800cb7e:	015a      	lsls	r2, r3, #5
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	4413      	add	r3, r2
 800cb84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb88:	461a      	mov	r2, r3
 800cb8a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800cb8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cb90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	da34      	bge.n	800cc02 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cb98:	78fb      	ldrb	r3, [r7, #3]
 800cb9a:	015a      	lsls	r2, r3, #5
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	4413      	add	r3, r2
 800cba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	78fa      	ldrb	r2, [r7, #3]
 800cba8:	0151      	lsls	r1, r2, #5
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	440a      	add	r2, r1
 800cbae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cbb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbb6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cbb8:	e023      	b.n	800cc02 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cbba:	78fb      	ldrb	r3, [r7, #3]
 800cbbc:	015a      	lsls	r2, r3, #5
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	f240 2325 	movw	r3, #549	@ 0x225
 800cbcc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cbce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	da17      	bge.n	800cc06 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cbd6:	78fb      	ldrb	r3, [r7, #3]
 800cbd8:	015a      	lsls	r2, r3, #5
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	4413      	add	r3, r2
 800cbde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	78fa      	ldrb	r2, [r7, #3]
 800cbe6:	0151      	lsls	r1, r2, #5
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	440a      	add	r2, r1
 800cbec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cbf0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800cbf4:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cbf6:	e006      	b.n	800cc06 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	77fb      	strb	r3, [r7, #31]
      break;
 800cbfc:	e004      	b.n	800cc08 <USB_HC_Init+0x148>
      break;
 800cbfe:	bf00      	nop
 800cc00:	e002      	b.n	800cc08 <USB_HC_Init+0x148>
      break;
 800cc02:	bf00      	nop
 800cc04:	e000      	b.n	800cc08 <USB_HC_Init+0x148>
      break;
 800cc06:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800cc08:	78fb      	ldrb	r3, [r7, #3]
 800cc0a:	015a      	lsls	r2, r3, #5
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	4413      	add	r3, r2
 800cc10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc14:	461a      	mov	r2, r3
 800cc16:	2300      	movs	r3, #0
 800cc18:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800cc1a:	78fb      	ldrb	r3, [r7, #3]
 800cc1c:	015a      	lsls	r2, r3, #5
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	4413      	add	r3, r2
 800cc22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	78fa      	ldrb	r2, [r7, #3]
 800cc2a:	0151      	lsls	r1, r2, #5
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	440a      	add	r2, r1
 800cc30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cc34:	f043 0302 	orr.w	r3, r3, #2
 800cc38:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc40:	699a      	ldr	r2, [r3, #24]
 800cc42:	78fb      	ldrb	r3, [r7, #3]
 800cc44:	f003 030f 	and.w	r3, r3, #15
 800cc48:	2101      	movs	r1, #1
 800cc4a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc4e:	6939      	ldr	r1, [r7, #16]
 800cc50:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800cc54:	4313      	orrs	r3, r2
 800cc56:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	699b      	ldr	r3, [r3, #24]
 800cc5c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cc64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	da03      	bge.n	800cc74 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cc6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc70:	61bb      	str	r3, [r7, #24]
 800cc72:	e001      	b.n	800cc78 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800cc74:	2300      	movs	r3, #0
 800cc76:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f7ff fef9 	bl	800ca70 <USB_GetHostSpeed>
 800cc7e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800cc80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d106      	bne.n	800cc96 <USB_HC_Init+0x1d6>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d003      	beq.n	800cc96 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cc8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cc92:	617b      	str	r3, [r7, #20]
 800cc94:	e001      	b.n	800cc9a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cc96:	2300      	movs	r3, #0
 800cc98:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cc9a:	787b      	ldrb	r3, [r7, #1]
 800cc9c:	059b      	lsls	r3, r3, #22
 800cc9e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cca2:	78bb      	ldrb	r3, [r7, #2]
 800cca4:	02db      	lsls	r3, r3, #11
 800cca6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ccaa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ccac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ccb0:	049b      	lsls	r3, r3, #18
 800ccb2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ccb6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800ccb8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800ccba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ccbe:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ccc0:	69bb      	ldr	r3, [r7, #24]
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ccc8:	78fa      	ldrb	r2, [r7, #3]
 800ccca:	0151      	lsls	r1, r2, #5
 800cccc:	693a      	ldr	r2, [r7, #16]
 800ccce:	440a      	add	r2, r1
 800ccd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800ccd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ccd8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800ccda:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ccde:	2b03      	cmp	r3, #3
 800cce0:	d003      	beq.n	800ccea <USB_HC_Init+0x22a>
 800cce2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cce6:	2b01      	cmp	r3, #1
 800cce8:	d10f      	bne.n	800cd0a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800ccea:	78fb      	ldrb	r3, [r7, #3]
 800ccec:	015a      	lsls	r2, r3, #5
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	78fa      	ldrb	r2, [r7, #3]
 800ccfa:	0151      	lsls	r1, r2, #5
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	440a      	add	r2, r1
 800cd00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cd08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800cd0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3720      	adds	r7, #32
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	40040000 	.word	0x40040000

0800cd18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08c      	sub	sp, #48	@ 0x30
 800cd1c:	af02      	add	r7, sp, #8
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	785b      	ldrb	r3, [r3, #1]
 800cd2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800cd30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd34:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	4a5d      	ldr	r2, [pc, #372]	@ (800ceb0 <USB_HC_StartXfer+0x198>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d12f      	bne.n	800cd9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800cd3e:	79fb      	ldrb	r3, [r7, #7]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d11c      	bne.n	800cd7e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	7c9b      	ldrb	r3, [r3, #18]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d003      	beq.n	800cd54 <USB_HC_StartXfer+0x3c>
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	7c9b      	ldrb	r3, [r3, #18]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d124      	bne.n	800cd9e <USB_HC_StartXfer+0x86>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	799b      	ldrb	r3, [r3, #6]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d120      	bne.n	800cd9e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	015a      	lsls	r2, r3, #5
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	4413      	add	r3, r2
 800cd64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	0151      	lsls	r1, r2, #5
 800cd6e:	6a3a      	ldr	r2, [r7, #32]
 800cd70:	440a      	add	r2, r1
 800cd72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cd76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd7a:	60d3      	str	r3, [r2, #12]
 800cd7c:	e00f      	b.n	800cd9e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	791b      	ldrb	r3, [r3, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10b      	bne.n	800cd9e <USB_HC_StartXfer+0x86>
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	795b      	ldrb	r3, [r3, #5]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d107      	bne.n	800cd9e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	785b      	ldrb	r3, [r3, #1]
 800cd92:	4619      	mov	r1, r3
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f000 fb6b 	bl	800d470 <USB_DoPing>
        return HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e232      	b.n	800d204 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	799b      	ldrb	r3, [r3, #6]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d158      	bne.n	800ce58 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800cda6:	2301      	movs	r3, #1
 800cda8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	78db      	ldrb	r3, [r3, #3]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d007      	beq.n	800cdc2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800cdb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cdb4:	68ba      	ldr	r2, [r7, #8]
 800cdb6:	8a92      	ldrh	r2, [r2, #20]
 800cdb8:	fb03 f202 	mul.w	r2, r3, r2
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	61da      	str	r2, [r3, #28]
 800cdc0:	e07c      	b.n	800cebc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	7c9b      	ldrb	r3, [r3, #18]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d130      	bne.n	800ce2c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	6a1b      	ldr	r3, [r3, #32]
 800cdce:	2bbc      	cmp	r3, #188	@ 0xbc
 800cdd0:	d918      	bls.n	800ce04 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	8a9b      	ldrh	r3, [r3, #20]
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	69da      	ldr	r2, [r3, #28]
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d003      	beq.n	800cdf4 <USB_HC_StartXfer+0xdc>
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d103      	bne.n	800cdfc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	2202      	movs	r2, #2
 800cdf8:	60da      	str	r2, [r3, #12]
 800cdfa:	e05f      	b.n	800cebc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	60da      	str	r2, [r3, #12]
 800ce02:	e05b      	b.n	800cebc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	6a1a      	ldr	r2, [r3, #32]
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d007      	beq.n	800ce24 <USB_HC_StartXfer+0x10c>
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	2b02      	cmp	r3, #2
 800ce1a:	d003      	beq.n	800ce24 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	2204      	movs	r2, #4
 800ce20:	60da      	str	r2, [r3, #12]
 800ce22:	e04b      	b.n	800cebc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	2203      	movs	r2, #3
 800ce28:	60da      	str	r2, [r3, #12]
 800ce2a:	e047      	b.n	800cebc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800ce2c:	79fb      	ldrb	r3, [r7, #7]
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d10d      	bne.n	800ce4e <USB_HC_StartXfer+0x136>
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	6a1b      	ldr	r3, [r3, #32]
 800ce36:	68ba      	ldr	r2, [r7, #8]
 800ce38:	8a92      	ldrh	r2, [r2, #20]
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d907      	bls.n	800ce4e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ce3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	8a92      	ldrh	r2, [r2, #20]
 800ce44:	fb03 f202 	mul.w	r2, r3, r2
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	61da      	str	r2, [r3, #28]
 800ce4c:	e036      	b.n	800cebc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	6a1a      	ldr	r2, [r3, #32]
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	61da      	str	r2, [r3, #28]
 800ce56:	e031      	b.n	800cebc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	6a1b      	ldr	r3, [r3, #32]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d018      	beq.n	800ce92 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	6a1b      	ldr	r3, [r3, #32]
 800ce64:	68ba      	ldr	r2, [r7, #8]
 800ce66:	8a92      	ldrh	r2, [r2, #20]
 800ce68:	4413      	add	r3, r2
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	8a92      	ldrh	r2, [r2, #20]
 800ce70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce74:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800ce76:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ce78:	8b7b      	ldrh	r3, [r7, #26]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d90b      	bls.n	800ce96 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800ce7e:	8b7b      	ldrh	r3, [r7, #26]
 800ce80:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ce82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ce84:	68ba      	ldr	r2, [r7, #8]
 800ce86:	8a92      	ldrh	r2, [r2, #20]
 800ce88:	fb03 f202 	mul.w	r2, r3, r2
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	61da      	str	r2, [r3, #28]
 800ce90:	e001      	b.n	800ce96 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800ce92:	2301      	movs	r3, #1
 800ce94:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	78db      	ldrb	r3, [r3, #3]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00a      	beq.n	800ceb4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800ce9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	8a92      	ldrh	r2, [r2, #20]
 800cea4:	fb03 f202 	mul.w	r2, r3, r2
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	61da      	str	r2, [r3, #28]
 800ceac:	e006      	b.n	800cebc <USB_HC_StartXfer+0x1a4>
 800ceae:	bf00      	nop
 800ceb0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	6a1a      	ldr	r2, [r3, #32]
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	69db      	ldr	r3, [r3, #28]
 800cec0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cec4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cec6:	04d9      	lsls	r1, r3, #19
 800cec8:	4ba3      	ldr	r3, [pc, #652]	@ (800d158 <USB_HC_StartXfer+0x440>)
 800ceca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cecc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	7d9b      	ldrb	r3, [r3, #22]
 800ced2:	075b      	lsls	r3, r3, #29
 800ced4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800ced8:	69f9      	ldr	r1, [r7, #28]
 800ceda:	0148      	lsls	r0, r1, #5
 800cedc:	6a39      	ldr	r1, [r7, #32]
 800cede:	4401      	add	r1, r0
 800cee0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cee4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800cee6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800cee8:	79fb      	ldrb	r3, [r7, #7]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d009      	beq.n	800cf02 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	6999      	ldr	r1, [r3, #24]
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	015a      	lsls	r2, r3, #5
 800cef6:	6a3b      	ldr	r3, [r7, #32]
 800cef8:	4413      	add	r3, r2
 800cefa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cefe:	460a      	mov	r2, r1
 800cf00:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800cf02:	6a3b      	ldr	r3, [r7, #32]
 800cf04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	f003 0301 	and.w	r3, r3, #1
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	bf0c      	ite	eq
 800cf12:	2301      	moveq	r3, #1
 800cf14:	2300      	movne	r3, #0
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	015a      	lsls	r2, r3, #5
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	4413      	add	r3, r2
 800cf22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	69fa      	ldr	r2, [r7, #28]
 800cf2a:	0151      	lsls	r1, r2, #5
 800cf2c:	6a3a      	ldr	r2, [r7, #32]
 800cf2e:	440a      	add	r2, r1
 800cf30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cf34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cf38:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	015a      	lsls	r2, r3, #5
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	4413      	add	r3, r2
 800cf42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	7e7b      	ldrb	r3, [r7, #25]
 800cf4a:	075b      	lsls	r3, r3, #29
 800cf4c:	69f9      	ldr	r1, [r7, #28]
 800cf4e:	0148      	lsls	r0, r1, #5
 800cf50:	6a39      	ldr	r1, [r7, #32]
 800cf52:	4401      	add	r1, r0
 800cf54:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	799b      	ldrb	r3, [r3, #6]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	f040 80c3 	bne.w	800d0ec <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	7c5b      	ldrb	r3, [r3, #17]
 800cf6a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800cf70:	4313      	orrs	r3, r2
 800cf72:	69fa      	ldr	r2, [r7, #28]
 800cf74:	0151      	lsls	r1, r2, #5
 800cf76:	6a3a      	ldr	r2, [r7, #32]
 800cf78:	440a      	add	r2, r1
 800cf7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800cf7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800cf82:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	015a      	lsls	r2, r3, #5
 800cf88:	6a3b      	ldr	r3, [r7, #32]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	69fa      	ldr	r2, [r7, #28]
 800cf94:	0151      	lsls	r1, r2, #5
 800cf96:	6a3a      	ldr	r2, [r7, #32]
 800cf98:	440a      	add	r2, r1
 800cf9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cf9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cfa2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	79db      	ldrb	r3, [r3, #7]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d123      	bne.n	800cff4 <USB_HC_StartXfer+0x2dc>
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	78db      	ldrb	r3, [r3, #3]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d11f      	bne.n	800cff4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800cfb4:	69fb      	ldr	r3, [r7, #28]
 800cfb6:	015a      	lsls	r2, r3, #5
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	4413      	add	r3, r2
 800cfbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	69fa      	ldr	r2, [r7, #28]
 800cfc4:	0151      	lsls	r1, r2, #5
 800cfc6:	6a3a      	ldr	r2, [r7, #32]
 800cfc8:	440a      	add	r2, r1
 800cfca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cfce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cfd2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	015a      	lsls	r2, r3, #5
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	4413      	add	r3, r2
 800cfdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	69fa      	ldr	r2, [r7, #28]
 800cfe4:	0151      	lsls	r1, r2, #5
 800cfe6:	6a3a      	ldr	r2, [r7, #32]
 800cfe8:	440a      	add	r2, r1
 800cfea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cfee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cff2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	7c9b      	ldrb	r3, [r3, #18]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d003      	beq.n	800d004 <USB_HC_StartXfer+0x2ec>
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	7c9b      	ldrb	r3, [r3, #18]
 800d000:	2b03      	cmp	r3, #3
 800d002:	d117      	bne.n	800d034 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d113      	bne.n	800d034 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	78db      	ldrb	r3, [r3, #3]
 800d010:	2b01      	cmp	r3, #1
 800d012:	d10f      	bne.n	800d034 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	015a      	lsls	r2, r3, #5
 800d018:	6a3b      	ldr	r3, [r7, #32]
 800d01a:	4413      	add	r3, r2
 800d01c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	69fa      	ldr	r2, [r7, #28]
 800d024:	0151      	lsls	r1, r2, #5
 800d026:	6a3a      	ldr	r2, [r7, #32]
 800d028:	440a      	add	r2, r1
 800d02a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d02e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d032:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	7c9b      	ldrb	r3, [r3, #18]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d162      	bne.n	800d102 <USB_HC_StartXfer+0x3ea>
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	78db      	ldrb	r3, [r3, #3]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d15e      	bne.n	800d102 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	3b01      	subs	r3, #1
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d858      	bhi.n	800d100 <USB_HC_StartXfer+0x3e8>
 800d04e:	a201      	add	r2, pc, #4	@ (adr r2, 800d054 <USB_HC_StartXfer+0x33c>)
 800d050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d054:	0800d065 	.word	0x0800d065
 800d058:	0800d087 	.word	0x0800d087
 800d05c:	0800d0a9 	.word	0x0800d0a9
 800d060:	0800d0cb 	.word	0x0800d0cb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800d064:	69fb      	ldr	r3, [r7, #28]
 800d066:	015a      	lsls	r2, r3, #5
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	69fa      	ldr	r2, [r7, #28]
 800d074:	0151      	lsls	r1, r2, #5
 800d076:	6a3a      	ldr	r2, [r7, #32]
 800d078:	440a      	add	r2, r1
 800d07a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d07e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d082:	6053      	str	r3, [r2, #4]
          break;
 800d084:	e03d      	b.n	800d102 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	015a      	lsls	r2, r3, #5
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	4413      	add	r3, r2
 800d08e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	69fa      	ldr	r2, [r7, #28]
 800d096:	0151      	lsls	r1, r2, #5
 800d098:	6a3a      	ldr	r2, [r7, #32]
 800d09a:	440a      	add	r2, r1
 800d09c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d0a0:	f043 030e 	orr.w	r3, r3, #14
 800d0a4:	6053      	str	r3, [r2, #4]
          break;
 800d0a6:	e02c      	b.n	800d102 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	015a      	lsls	r2, r3, #5
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	69fa      	ldr	r2, [r7, #28]
 800d0b8:	0151      	lsls	r1, r2, #5
 800d0ba:	6a3a      	ldr	r2, [r7, #32]
 800d0bc:	440a      	add	r2, r1
 800d0be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d0c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d0c6:	6053      	str	r3, [r2, #4]
          break;
 800d0c8:	e01b      	b.n	800d102 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800d0ca:	69fb      	ldr	r3, [r7, #28]
 800d0cc:	015a      	lsls	r2, r3, #5
 800d0ce:	6a3b      	ldr	r3, [r7, #32]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	69fa      	ldr	r2, [r7, #28]
 800d0da:	0151      	lsls	r1, r2, #5
 800d0dc:	6a3a      	ldr	r2, [r7, #32]
 800d0de:	440a      	add	r2, r1
 800d0e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d0e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d0e8:	6053      	str	r3, [r2, #4]
          break;
 800d0ea:	e00a      	b.n	800d102 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	015a      	lsls	r2, r3, #5
 800d0f0:	6a3b      	ldr	r3, [r7, #32]
 800d0f2:	4413      	add	r3, r2
 800d0f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	6053      	str	r3, [r2, #4]
 800d0fe:	e000      	b.n	800d102 <USB_HC_StartXfer+0x3ea>
          break;
 800d100:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	015a      	lsls	r2, r3, #5
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	4413      	add	r3, r2
 800d10a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d118:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	78db      	ldrb	r3, [r3, #3]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d004      	beq.n	800d12c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d128:	613b      	str	r3, [r7, #16]
 800d12a:	e003      	b.n	800d134 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d132:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d13a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	015a      	lsls	r2, r3, #5
 800d140:	6a3b      	ldr	r3, [r7, #32]
 800d142:	4413      	add	r3, r2
 800d144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d148:	461a      	mov	r2, r3
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d14e:	79fb      	ldrb	r3, [r7, #7]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d003      	beq.n	800d15c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	e055      	b.n	800d204 <USB_HC_StartXfer+0x4ec>
 800d158:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	78db      	ldrb	r3, [r3, #3]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d14e      	bne.n	800d202 <USB_HC_StartXfer+0x4ea>
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	6a1b      	ldr	r3, [r3, #32]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d04a      	beq.n	800d202 <USB_HC_StartXfer+0x4ea>
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	79db      	ldrb	r3, [r3, #7]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d146      	bne.n	800d202 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	7c9b      	ldrb	r3, [r3, #18]
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d831      	bhi.n	800d1e0 <USB_HC_StartXfer+0x4c8>
 800d17c:	a201      	add	r2, pc, #4	@ (adr r2, 800d184 <USB_HC_StartXfer+0x46c>)
 800d17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d182:	bf00      	nop
 800d184:	0800d195 	.word	0x0800d195
 800d188:	0800d1b9 	.word	0x0800d1b9
 800d18c:	0800d195 	.word	0x0800d195
 800d190:	0800d1b9 	.word	0x0800d1b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	6a1b      	ldr	r3, [r3, #32]
 800d198:	3303      	adds	r3, #3
 800d19a:	089b      	lsrs	r3, r3, #2
 800d19c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d19e:	8afa      	ldrh	r2, [r7, #22]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d91c      	bls.n	800d1e4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	f043 0220 	orr.w	r2, r3, #32
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	619a      	str	r2, [r3, #24]
        }
        break;
 800d1b6:	e015      	b.n	800d1e4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	6a1b      	ldr	r3, [r3, #32]
 800d1bc:	3303      	adds	r3, #3
 800d1be:	089b      	lsrs	r3, r3, #2
 800d1c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d1c2:	8afa      	ldrh	r2, [r7, #22]
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d1ca:	691b      	ldr	r3, [r3, #16]
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d90a      	bls.n	800d1e8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	699b      	ldr	r3, [r3, #24]
 800d1d6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	619a      	str	r2, [r3, #24]
        }
        break;
 800d1de:	e003      	b.n	800d1e8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800d1e0:	bf00      	nop
 800d1e2:	e002      	b.n	800d1ea <USB_HC_StartXfer+0x4d2>
        break;
 800d1e4:	bf00      	nop
 800d1e6:	e000      	b.n	800d1ea <USB_HC_StartXfer+0x4d2>
        break;
 800d1e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	6999      	ldr	r1, [r3, #24]
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	785a      	ldrb	r2, [r3, #1]
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	6a1b      	ldr	r3, [r3, #32]
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	2000      	movs	r0, #0
 800d1fa:	9000      	str	r0, [sp, #0]
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f7ff f9d5 	bl	800c5ac <USB_WritePacket>
  }

  return HAL_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3728      	adds	r7, #40	@ 0x28
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d21e:	695b      	ldr	r3, [r3, #20]
 800d220:	b29b      	uxth	r3, r3
}
 800d222:	4618      	mov	r0, r3
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr

0800d22e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d22e:	b480      	push	{r7}
 800d230:	b089      	sub	sp, #36	@ 0x24
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	460b      	mov	r3, r1
 800d238:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d23e:	78fb      	ldrb	r3, [r7, #3]
 800d240:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d242:	2300      	movs	r3, #0
 800d244:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	015a      	lsls	r2, r3, #5
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	4413      	add	r3, r2
 800d24e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	0c9b      	lsrs	r3, r3, #18
 800d256:	f003 0303 	and.w	r3, r3, #3
 800d25a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	4413      	add	r3, r2
 800d264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	0fdb      	lsrs	r3, r3, #31
 800d26c:	f003 0301 	and.w	r3, r3, #1
 800d270:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800d272:	69bb      	ldr	r3, [r7, #24]
 800d274:	015a      	lsls	r2, r3, #5
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	4413      	add	r3, r2
 800d27a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	0fdb      	lsrs	r3, r3, #31
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	f003 0320 	and.w	r3, r3, #32
 800d290:	2b20      	cmp	r3, #32
 800d292:	d10d      	bne.n	800d2b0 <USB_HC_Halt+0x82>
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d10a      	bne.n	800d2b0 <USB_HC_Halt+0x82>
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d005      	beq.n	800d2ac <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d002      	beq.n	800d2ac <USB_HC_Halt+0x7e>
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2b03      	cmp	r3, #3
 800d2aa:	d101      	bne.n	800d2b0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e0d8      	b.n	800d462 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d002      	beq.n	800d2bc <USB_HC_Halt+0x8e>
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2b02      	cmp	r3, #2
 800d2ba:	d173      	bne.n	800d3a4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	015a      	lsls	r2, r3, #5
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	4413      	add	r3, r2
 800d2c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	69ba      	ldr	r2, [r7, #24]
 800d2cc:	0151      	lsls	r1, r2, #5
 800d2ce:	69fa      	ldr	r2, [r7, #28]
 800d2d0:	440a      	add	r2, r1
 800d2d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d2d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d2da:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	689b      	ldr	r3, [r3, #8]
 800d2e0:	f003 0320 	and.w	r3, r3, #32
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d14a      	bne.n	800d37e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d133      	bne.n	800d35c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	015a      	lsls	r2, r3, #5
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	4413      	add	r3, r2
 800d2fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	69ba      	ldr	r2, [r7, #24]
 800d304:	0151      	lsls	r1, r2, #5
 800d306:	69fa      	ldr	r2, [r7, #28]
 800d308:	440a      	add	r2, r1
 800d30a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d30e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d312:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	015a      	lsls	r2, r3, #5
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	4413      	add	r3, r2
 800d31c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	69ba      	ldr	r2, [r7, #24]
 800d324:	0151      	lsls	r1, r2, #5
 800d326:	69fa      	ldr	r2, [r7, #28]
 800d328:	440a      	add	r2, r1
 800d32a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d32e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d332:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	3301      	adds	r3, #1
 800d338:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d340:	d82e      	bhi.n	800d3a0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	015a      	lsls	r2, r3, #5
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	4413      	add	r3, r2
 800d34a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d358:	d0ec      	beq.n	800d334 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d35a:	e081      	b.n	800d460 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	015a      	lsls	r2, r3, #5
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	4413      	add	r3, r2
 800d364:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	69ba      	ldr	r2, [r7, #24]
 800d36c:	0151      	lsls	r1, r2, #5
 800d36e:	69fa      	ldr	r2, [r7, #28]
 800d370:	440a      	add	r2, r1
 800d372:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d376:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d37a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d37c:	e070      	b.n	800d460 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	015a      	lsls	r2, r3, #5
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	4413      	add	r3, r2
 800d386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	69ba      	ldr	r2, [r7, #24]
 800d38e:	0151      	lsls	r1, r2, #5
 800d390:	69fa      	ldr	r2, [r7, #28]
 800d392:	440a      	add	r2, r1
 800d394:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d398:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d39c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d39e:	e05f      	b.n	800d460 <USB_HC_Halt+0x232>
            break;
 800d3a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d3a2:	e05d      	b.n	800d460 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	015a      	lsls	r2, r3, #5
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	69ba      	ldr	r2, [r7, #24]
 800d3b4:	0151      	lsls	r1, r2, #5
 800d3b6:	69fa      	ldr	r2, [r7, #28]
 800d3b8:	440a      	add	r2, r1
 800d3ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d3be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d3c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d133      	bne.n	800d43c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	015a      	lsls	r2, r3, #5
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	4413      	add	r3, r2
 800d3dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	69ba      	ldr	r2, [r7, #24]
 800d3e4:	0151      	lsls	r1, r2, #5
 800d3e6:	69fa      	ldr	r2, [r7, #28]
 800d3e8:	440a      	add	r2, r1
 800d3ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d3ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d3f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	015a      	lsls	r2, r3, #5
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	69ba      	ldr	r2, [r7, #24]
 800d404:	0151      	lsls	r1, r2, #5
 800d406:	69fa      	ldr	r2, [r7, #28]
 800d408:	440a      	add	r2, r1
 800d40a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d40e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d412:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	3301      	adds	r3, #1
 800d418:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d420:	d81d      	bhi.n	800d45e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	015a      	lsls	r2, r3, #5
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	4413      	add	r3, r2
 800d42a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d434:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d438:	d0ec      	beq.n	800d414 <USB_HC_Halt+0x1e6>
 800d43a:	e011      	b.n	800d460 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	015a      	lsls	r2, r3, #5
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	4413      	add	r3, r2
 800d444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	69ba      	ldr	r2, [r7, #24]
 800d44c:	0151      	lsls	r1, r2, #5
 800d44e:	69fa      	ldr	r2, [r7, #28]
 800d450:	440a      	add	r2, r1
 800d452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d456:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d45a:	6013      	str	r3, [r2, #0]
 800d45c:	e000      	b.n	800d460 <USB_HC_Halt+0x232>
          break;
 800d45e:	bf00      	nop
    }
  }

  return HAL_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3724      	adds	r7, #36	@ 0x24
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr
	...

0800d470 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	460b      	mov	r3, r1
 800d47a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d480:	78fb      	ldrb	r3, [r7, #3]
 800d482:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d484:	2301      	movs	r3, #1
 800d486:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	04da      	lsls	r2, r3, #19
 800d48c:	4b15      	ldr	r3, [pc, #84]	@ (800d4e4 <USB_DoPing+0x74>)
 800d48e:	4013      	ands	r3, r2
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	0151      	lsls	r1, r2, #5
 800d494:	697a      	ldr	r2, [r7, #20]
 800d496:	440a      	add	r2, r1
 800d498:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800d49c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d4a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	015a      	lsls	r2, r3, #5
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	4413      	add	r3, r2
 800d4aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800d4b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d4c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	015a      	lsls	r2, r3, #5
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	4413      	add	r3, r2
 800d4ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	371c      	adds	r7, #28
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
 800d4e2:	bf00      	nop
 800d4e4:	1ff80000 	.word	0x1ff80000

0800d4e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f7fe ff98 	bl	800c432 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d502:	2110      	movs	r1, #16
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7fe fff1 	bl	800c4ec <USB_FlushTxFifo>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f7ff f81b 	bl	800c550 <USB_FlushRxFifo>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d524:	2300      	movs	r3, #0
 800d526:	61bb      	str	r3, [r7, #24]
 800d528:	e01f      	b.n	800d56a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d52a:	69bb      	ldr	r3, [r7, #24]
 800d52c:	015a      	lsls	r2, r3, #5
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	4413      	add	r3, r2
 800d532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d540:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d548:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d550:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	015a      	lsls	r2, r3, #5
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	4413      	add	r3, r2
 800d55a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d55e:	461a      	mov	r2, r3
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	3301      	adds	r3, #1
 800d568:	61bb      	str	r3, [r7, #24]
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	2b0f      	cmp	r3, #15
 800d56e:	d9dc      	bls.n	800d52a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d570:	2300      	movs	r3, #0
 800d572:	61bb      	str	r3, [r7, #24]
 800d574:	e034      	b.n	800d5e0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	015a      	lsls	r2, r3, #5
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	4413      	add	r3, r2
 800d57e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d58c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d594:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d59c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	015a      	lsls	r2, r3, #5
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d5bc:	d80c      	bhi.n	800d5d8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	015a      	lsls	r2, r3, #5
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d5d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5d4:	d0ec      	beq.n	800d5b0 <USB_StopHost+0xc8>
 800d5d6:	e000      	b.n	800d5da <USB_StopHost+0xf2>
        break;
 800d5d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	61bb      	str	r3, [r7, #24]
 800d5e0:	69bb      	ldr	r3, [r7, #24]
 800d5e2:	2b0f      	cmp	r3, #15
 800d5e4:	d9c7      	bls.n	800d576 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7fe ff07 	bl	800c410 <USB_EnableGlobalInt>

  return ret;
 800d602:	7ffb      	ldrb	r3, [r7, #31]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3720      	adds	r7, #32
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d610:	4904      	ldr	r1, [pc, #16]	@ (800d624 <MX_FATFS_Init+0x18>)
 800d612:	4805      	ldr	r0, [pc, #20]	@ (800d628 <MX_FATFS_Init+0x1c>)
 800d614:	f002 fa64 	bl	800fae0 <FATFS_LinkDriver>
 800d618:	4603      	mov	r3, r0
 800d61a:	461a      	mov	r2, r3
 800d61c:	4b03      	ldr	r3, [pc, #12]	@ (800d62c <MX_FATFS_Init+0x20>)
 800d61e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d620:	bf00      	nop
 800d622:	bd80      	pop	{r7, pc}
 800d624:	20000e94 	.word	0x20000e94
 800d628:	08010e90 	.word	0x08010e90
 800d62c:	20000e90 	.word	0x20000e90

0800d630 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d636:	2300      	movs	r3, #0
 800d638:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d63a:	f000 f879 	bl	800d730 <BSP_SD_IsDetected>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b01      	cmp	r3, #1
 800d642:	d001      	beq.n	800d648 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d644:	2301      	movs	r3, #1
 800d646:	e012      	b.n	800d66e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d648:	480b      	ldr	r0, [pc, #44]	@ (800d678 <BSP_SD_Init+0x48>)
 800d64a:	f7fa fdfb 	bl	8008244 <HAL_SD_Init>
 800d64e:	4603      	mov	r3, r0
 800d650:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d652:	79fb      	ldrb	r3, [r7, #7]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d109      	bne.n	800d66c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d658:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800d65c:	4806      	ldr	r0, [pc, #24]	@ (800d678 <BSP_SD_Init+0x48>)
 800d65e:	f7fb fbd5 	bl	8008e0c <HAL_SD_ConfigWideBusOperation>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d668:	2301      	movs	r3, #1
 800d66a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d66c:	79fb      	ldrb	r3, [r7, #7]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20000324 	.word	0x20000324

0800d67c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b088      	sub	sp, #32
 800d680:	af02      	add	r7, sp, #8
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]
 800d688:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d68a:	2300      	movs	r3, #0
 800d68c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	9300      	str	r3, [sp, #0]
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	68ba      	ldr	r2, [r7, #8]
 800d696:	68f9      	ldr	r1, [r7, #12]
 800d698:	4806      	ldr	r0, [pc, #24]	@ (800d6b4 <BSP_SD_ReadBlocks+0x38>)
 800d69a:	f7fa fe83 	bl	80083a4 <HAL_SD_ReadBlocks>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d001      	beq.n	800d6a8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d6a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	3718      	adds	r7, #24
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	bd80      	pop	{r7, pc}
 800d6b2:	bf00      	nop
 800d6b4:	20000324 	.word	0x20000324

0800d6b8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b088      	sub	sp, #32
 800d6bc:	af02      	add	r7, sp, #8
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68ba      	ldr	r2, [r7, #8]
 800d6d2:	68f9      	ldr	r1, [r7, #12]
 800d6d4:	4806      	ldr	r0, [pc, #24]	@ (800d6f0 <BSP_SD_WriteBlocks+0x38>)
 800d6d6:	f7fb f843 	bl	8008760 <HAL_SD_WriteBlocks>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3718      	adds	r7, #24
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	20000324 	.word	0x20000324

0800d6f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d6f8:	4805      	ldr	r0, [pc, #20]	@ (800d710 <BSP_SD_GetCardState+0x1c>)
 800d6fa:	f7fb fc21 	bl	8008f40 <HAL_SD_GetCardState>
 800d6fe:	4603      	mov	r3, r0
 800d700:	2b04      	cmp	r3, #4
 800d702:	bf14      	ite	ne
 800d704:	2301      	movne	r3, #1
 800d706:	2300      	moveq	r3, #0
 800d708:	b2db      	uxtb	r3, r3
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	20000324 	.word	0x20000324

0800d714 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d71c:	6879      	ldr	r1, [r7, #4]
 800d71e:	4803      	ldr	r0, [pc, #12]	@ (800d72c <BSP_SD_GetCardInfo+0x18>)
 800d720:	f7fb fb48 	bl	8008db4 <HAL_SD_GetCardInfo>
}
 800d724:	bf00      	nop
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	20000324 	.word	0x20000324

0800d730 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d736:	2301      	movs	r3, #1
 800d738:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d73a:	f000 f80b 	bl	800d754 <BSP_PlatformIsDetected>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d744:	2300      	movs	r3, #0
 800d746:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d748:	79fb      	ldrb	r3, [r7, #7]
 800d74a:	b2db      	uxtb	r3, r3
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d75a:	2301      	movs	r3, #1
 800d75c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d75e:	2104      	movs	r1, #4
 800d760:	4806      	ldr	r0, [pc, #24]	@ (800d77c <BSP_PlatformIsDetected+0x28>)
 800d762:	f7f6 fd0d 	bl	8004180 <HAL_GPIO_ReadPin>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d001      	beq.n	800d770 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d76c:	2300      	movs	r3, #0
 800d76e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d770:	79fb      	ldrb	r3, [r7, #7]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	40021800 	.word	0x40021800

0800d780 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	4603      	mov	r3, r0
 800d788:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d78a:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b8 <SD_CheckStatus+0x38>)
 800d78c:	2201      	movs	r2, #1
 800d78e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d790:	f7ff ffb0 	bl	800d6f4 <BSP_SD_GetCardState>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d107      	bne.n	800d7aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d79a:	4b07      	ldr	r3, [pc, #28]	@ (800d7b8 <SD_CheckStatus+0x38>)
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	f023 0301 	bic.w	r3, r3, #1
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	4b04      	ldr	r3, [pc, #16]	@ (800d7b8 <SD_CheckStatus+0x38>)
 800d7a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d7aa:	4b03      	ldr	r3, [pc, #12]	@ (800d7b8 <SD_CheckStatus+0x38>)
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	b2db      	uxtb	r3, r3
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	2000000d 	.word	0x2000000d

0800d7bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	b082      	sub	sp, #8
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d7c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d7f4 <SD_initialize+0x38>)
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d7cc:	f7ff ff30 	bl	800d630 <BSP_SD_Init>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d107      	bne.n	800d7e6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800d7d6:	79fb      	ldrb	r3, [r7, #7]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7ff ffd1 	bl	800d780 <SD_CheckStatus>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	4b04      	ldr	r3, [pc, #16]	@ (800d7f4 <SD_initialize+0x38>)
 800d7e4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d7e6:	4b03      	ldr	r3, [pc, #12]	@ (800d7f4 <SD_initialize+0x38>)
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	b2db      	uxtb	r3, r3
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3708      	adds	r7, #8
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	2000000d 	.word	0x2000000d

0800d7f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	4603      	mov	r3, r0
 800d800:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d802:	79fb      	ldrb	r3, [r7, #7]
 800d804:	4618      	mov	r0, r3
 800d806:	f7ff ffbb 	bl	800d780 <SD_CheckStatus>
 800d80a:	4603      	mov	r3, r0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3708      	adds	r7, #8
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60b9      	str	r1, [r7, #8]
 800d81c:	607a      	str	r2, [r7, #4]
 800d81e:	603b      	str	r3, [r7, #0]
 800d820:	4603      	mov	r3, r0
 800d822:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d824:	2301      	movs	r3, #1
 800d826:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d828:	f04f 33ff 	mov.w	r3, #4294967295
 800d82c:	683a      	ldr	r2, [r7, #0]
 800d82e:	6879      	ldr	r1, [r7, #4]
 800d830:	68b8      	ldr	r0, [r7, #8]
 800d832:	f7ff ff23 	bl	800d67c <BSP_SD_ReadBlocks>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d107      	bne.n	800d84c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d83c:	bf00      	nop
 800d83e:	f7ff ff59 	bl	800d6f4 <BSP_SD_GetCardState>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1fa      	bne.n	800d83e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3718      	adds	r7, #24
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}

0800d856 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d856:	b580      	push	{r7, lr}
 800d858:	b086      	sub	sp, #24
 800d85a:	af00      	add	r7, sp, #0
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
 800d860:	603b      	str	r3, [r7, #0]
 800d862:	4603      	mov	r3, r0
 800d864:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d866:	2301      	movs	r3, #1
 800d868:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d86a:	f04f 33ff 	mov.w	r3, #4294967295
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	6879      	ldr	r1, [r7, #4]
 800d872:	68b8      	ldr	r0, [r7, #8]
 800d874:	f7ff ff20 	bl	800d6b8 <BSP_SD_WriteBlocks>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d107      	bne.n	800d88e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d87e:	bf00      	nop
 800d880:	f7ff ff38 	bl	800d6f4 <BSP_SD_GetCardState>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1fa      	bne.n	800d880 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d88e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08c      	sub	sp, #48	@ 0x30
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	4603      	mov	r3, r0
 800d8a0:	603a      	str	r2, [r7, #0]
 800d8a2:	71fb      	strb	r3, [r7, #7]
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d8ae:	4b25      	ldr	r3, [pc, #148]	@ (800d944 <SD_ioctl+0xac>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	f003 0301 	and.w	r3, r3, #1
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d001      	beq.n	800d8c0 <SD_ioctl+0x28>
 800d8bc:	2303      	movs	r3, #3
 800d8be:	e03c      	b.n	800d93a <SD_ioctl+0xa2>

  switch (cmd)
 800d8c0:	79bb      	ldrb	r3, [r7, #6]
 800d8c2:	2b03      	cmp	r3, #3
 800d8c4:	d834      	bhi.n	800d930 <SD_ioctl+0x98>
 800d8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d8cc <SD_ioctl+0x34>)
 800d8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8cc:	0800d8dd 	.word	0x0800d8dd
 800d8d0:	0800d8e5 	.word	0x0800d8e5
 800d8d4:	0800d8fd 	.word	0x0800d8fd
 800d8d8:	0800d917 	.word	0x0800d917
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d8e2:	e028      	b.n	800d936 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8e4:	f107 030c 	add.w	r3, r7, #12
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff ff13 	bl	800d714 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d8ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d8fa:	e01c      	b.n	800d936 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8fc:	f107 030c 	add.w	r3, r7, #12
 800d900:	4618      	mov	r0, r3
 800d902:	f7ff ff07 	bl	800d714 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d908:	b29a      	uxth	r2, r3
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d90e:	2300      	movs	r3, #0
 800d910:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d914:	e00f      	b.n	800d936 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d916:	f107 030c 	add.w	r3, r7, #12
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7ff fefa 	bl	800d714 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d922:	0a5a      	lsrs	r2, r3, #9
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d928:	2300      	movs	r3, #0
 800d92a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d92e:	e002      	b.n	800d936 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d930:	2304      	movs	r3, #4
 800d932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3730      	adds	r7, #48	@ 0x30
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	2000000d 	.word	0x2000000d

0800d948 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d948:	b590      	push	{r4, r7, lr}
 800d94a:	b089      	sub	sp, #36	@ 0x24
 800d94c:	af04      	add	r7, sp, #16
 800d94e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d950:	2301      	movs	r3, #1
 800d952:	2202      	movs	r2, #2
 800d954:	2102      	movs	r1, #2
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 fc85 	bl	800e266 <USBH_FindInterface>
 800d95c:	4603      	mov	r3, r0
 800d95e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d960:	7bfb      	ldrb	r3, [r7, #15]
 800d962:	2bff      	cmp	r3, #255	@ 0xff
 800d964:	d002      	beq.n	800d96c <USBH_CDC_InterfaceInit+0x24>
 800d966:	7bfb      	ldrb	r3, [r7, #15]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d901      	bls.n	800d970 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d96c:	2302      	movs	r3, #2
 800d96e:	e13d      	b.n	800dbec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d970:	7bfb      	ldrb	r3, [r7, #15]
 800d972:	4619      	mov	r1, r3
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 fc5a 	bl	800e22e <USBH_SelectInterface>
 800d97a:	4603      	mov	r3, r0
 800d97c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d97e:	7bbb      	ldrb	r3, [r7, #14]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d001      	beq.n	800d988 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d984:	2302      	movs	r3, #2
 800d986:	e131      	b.n	800dbec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800d98e:	2050      	movs	r0, #80	@ 0x50
 800d990:	f002 fbc0 	bl	8010114 <malloc>
 800d994:	4603      	mov	r3, r0
 800d996:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d99e:	69db      	ldr	r3, [r3, #28]
 800d9a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d101      	bne.n	800d9ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	e11f      	b.n	800dbec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d9ac:	2250      	movs	r2, #80	@ 0x50
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	68b8      	ldr	r0, [r7, #8]
 800d9b2:	f002 fcc1 	bl	8010338 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	211a      	movs	r1, #26
 800d9bc:	fb01 f303 	mul.w	r3, r1, r3
 800d9c0:	4413      	add	r3, r2
 800d9c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	b25b      	sxtb	r3, r3
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	da15      	bge.n	800d9fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d9ce:	7bfb      	ldrb	r3, [r7, #15]
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	211a      	movs	r1, #26
 800d9d4:	fb01 f303 	mul.w	r3, r1, r3
 800d9d8:	4413      	add	r3, r2
 800d9da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800d9de:	781a      	ldrb	r2, [r3, #0]
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	211a      	movs	r1, #26
 800d9ea:	fb01 f303 	mul.w	r3, r1, r3
 800d9ee:	4413      	add	r3, r2
 800d9f0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800d9f4:	881a      	ldrh	r2, [r3, #0]
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	785b      	ldrb	r3, [r3, #1]
 800d9fe:	4619      	mov	r1, r3
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f001 ffbe 	bl	800f982 <USBH_AllocPipe>
 800da06:	4603      	mov	r3, r0
 800da08:	461a      	mov	r2, r3
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	7819      	ldrb	r1, [r3, #0]
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	7858      	ldrb	r0, [r3, #1]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	8952      	ldrh	r2, [r2, #10]
 800da26:	9202      	str	r2, [sp, #8]
 800da28:	2203      	movs	r2, #3
 800da2a:	9201      	str	r2, [sp, #4]
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	4623      	mov	r3, r4
 800da30:	4602      	mov	r2, r0
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f001 ff76 	bl	800f924 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2200      	movs	r2, #0
 800da3e:	4619      	mov	r1, r3
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f002 fae1 	bl	8010008 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800da46:	2300      	movs	r3, #0
 800da48:	2200      	movs	r2, #0
 800da4a:	210a      	movs	r1, #10
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fc0a 	bl	800e266 <USBH_FindInterface>
 800da52:	4603      	mov	r3, r0
 800da54:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800da56:	7bfb      	ldrb	r3, [r7, #15]
 800da58:	2bff      	cmp	r3, #255	@ 0xff
 800da5a:	d002      	beq.n	800da62 <USBH_CDC_InterfaceInit+0x11a>
 800da5c:	7bfb      	ldrb	r3, [r7, #15]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d901      	bls.n	800da66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800da62:	2302      	movs	r3, #2
 800da64:	e0c2      	b.n	800dbec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800da66:	7bfb      	ldrb	r3, [r7, #15]
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	211a      	movs	r1, #26
 800da6c:	fb01 f303 	mul.w	r3, r1, r3
 800da70:	4413      	add	r3, r2
 800da72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	b25b      	sxtb	r3, r3
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	da16      	bge.n	800daac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da7e:	7bfb      	ldrb	r3, [r7, #15]
 800da80:	687a      	ldr	r2, [r7, #4]
 800da82:	211a      	movs	r1, #26
 800da84:	fb01 f303 	mul.w	r3, r1, r3
 800da88:	4413      	add	r3, r2
 800da8a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800da8e:	781a      	ldrb	r2, [r3, #0]
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da94:	7bfb      	ldrb	r3, [r7, #15]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	211a      	movs	r1, #26
 800da9a:	fb01 f303 	mul.w	r3, r1, r3
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800daa4:	881a      	ldrh	r2, [r3, #0]
 800daa6:	68bb      	ldr	r3, [r7, #8]
 800daa8:	835a      	strh	r2, [r3, #26]
 800daaa:	e015      	b.n	800dad8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800daac:	7bfb      	ldrb	r3, [r7, #15]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	211a      	movs	r1, #26
 800dab2:	fb01 f303 	mul.w	r3, r1, r3
 800dab6:	4413      	add	r3, r2
 800dab8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800dabc:	781a      	ldrb	r2, [r3, #0]
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dac2:	7bfb      	ldrb	r3, [r7, #15]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	211a      	movs	r1, #26
 800dac8:	fb01 f303 	mul.w	r3, r1, r3
 800dacc:	4413      	add	r3, r2
 800dace:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800dad2:	881a      	ldrh	r2, [r3, #0]
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	211a      	movs	r1, #26
 800dade:	fb01 f303 	mul.w	r3, r1, r3
 800dae2:	4413      	add	r3, r2
 800dae4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	b25b      	sxtb	r3, r3
 800daec:	2b00      	cmp	r3, #0
 800daee:	da16      	bge.n	800db1e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	211a      	movs	r1, #26
 800daf6:	fb01 f303 	mul.w	r3, r1, r3
 800dafa:	4413      	add	r3, r2
 800dafc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800db00:	781a      	ldrb	r2, [r3, #0]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800db06:	7bfb      	ldrb	r3, [r7, #15]
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	211a      	movs	r1, #26
 800db0c:	fb01 f303 	mul.w	r3, r1, r3
 800db10:	4413      	add	r3, r2
 800db12:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800db16:	881a      	ldrh	r2, [r3, #0]
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	835a      	strh	r2, [r3, #26]
 800db1c:	e015      	b.n	800db4a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	211a      	movs	r1, #26
 800db24:	fb01 f303 	mul.w	r3, r1, r3
 800db28:	4413      	add	r3, r2
 800db2a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800db2e:	781a      	ldrb	r2, [r3, #0]
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800db34:	7bfb      	ldrb	r3, [r7, #15]
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	211a      	movs	r1, #26
 800db3a:	fb01 f303 	mul.w	r3, r1, r3
 800db3e:	4413      	add	r3, r2
 800db40:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800db44:	881a      	ldrh	r2, [r3, #0]
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	7b9b      	ldrb	r3, [r3, #14]
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f001 ff16 	bl	800f982 <USBH_AllocPipe>
 800db56:	4603      	mov	r3, r0
 800db58:	461a      	mov	r2, r3
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	7bdb      	ldrb	r3, [r3, #15]
 800db62:	4619      	mov	r1, r3
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f001 ff0c 	bl	800f982 <USBH_AllocPipe>
 800db6a:	4603      	mov	r3, r0
 800db6c:	461a      	mov	r2, r3
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	7b59      	ldrb	r1, [r3, #13]
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	7b98      	ldrb	r0, [r3, #14]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800db86:	68ba      	ldr	r2, [r7, #8]
 800db88:	8b12      	ldrh	r2, [r2, #24]
 800db8a:	9202      	str	r2, [sp, #8]
 800db8c:	2202      	movs	r2, #2
 800db8e:	9201      	str	r2, [sp, #4]
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	4623      	mov	r3, r4
 800db94:	4602      	mov	r2, r0
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f001 fec4 	bl	800f924 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	7b19      	ldrb	r1, [r3, #12]
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	7bd8      	ldrb	r0, [r3, #15]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	8b52      	ldrh	r2, [r2, #26]
 800dbb4:	9202      	str	r2, [sp, #8]
 800dbb6:	2202      	movs	r2, #2
 800dbb8:	9201      	str	r2, [sp, #4]
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	4623      	mov	r3, r4
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f001 feaf 	bl	800f924 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	7b5b      	ldrb	r3, [r3, #13]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f002 fa16 	bl	8010008 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	7b1b      	ldrb	r3, [r3, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f002 fa0f 	bl	8010008 <USBH_LL_SetToggle>

  return USBH_OK;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3714      	adds	r7, #20
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd90      	pop	{r4, r7, pc}

0800dbf4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dc02:	69db      	ldr	r3, [r3, #28]
 800dc04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00e      	beq.n	800dc2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	4619      	mov	r1, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f001 fea4 	bl	800f962 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f001 fecf 	bl	800f9c4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	7b1b      	ldrb	r3, [r3, #12]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00e      	beq.n	800dc52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	7b1b      	ldrb	r3, [r3, #12]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f001 fe91 	bl	800f962 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	7b1b      	ldrb	r3, [r3, #12]
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f001 febc 	bl	800f9c4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	7b5b      	ldrb	r3, [r3, #13]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00e      	beq.n	800dc78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	7b5b      	ldrb	r3, [r3, #13]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f001 fe7e 	bl	800f962 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	7b5b      	ldrb	r3, [r3, #13]
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f001 fea9 	bl	800f9c4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dc7e:	69db      	ldr	r3, [r3, #28]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d00b      	beq.n	800dc9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dc8a:	69db      	ldr	r3, [r3, #28]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f002 fa49 	bl	8010124 <free>
    phost->pActiveClass->pData = 0U;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dc98:	2200      	movs	r2, #0
 800dc9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b084      	sub	sp, #16
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dcb4:	69db      	ldr	r3, [r3, #28]
 800dcb6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	3340      	adds	r3, #64	@ 0x40
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f8b1 	bl	800de26 <GetLineCoding>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800dcc8:	7afb      	ldrb	r3, [r7, #11]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d105      	bne.n	800dcda <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800dcd4:	2102      	movs	r1, #2
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800dcda:	7afb      	ldrb	r3, [r7, #11]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800dcec:	2301      	movs	r3, #1
 800dcee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800dcfa:	69db      	ldr	r3, [r3, #28]
 800dcfc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800dd04:	2b04      	cmp	r3, #4
 800dd06:	d877      	bhi.n	800ddf8 <USBH_CDC_Process+0x114>
 800dd08:	a201      	add	r2, pc, #4	@ (adr r2, 800dd10 <USBH_CDC_Process+0x2c>)
 800dd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0e:	bf00      	nop
 800dd10:	0800dd25 	.word	0x0800dd25
 800dd14:	0800dd2b 	.word	0x0800dd2b
 800dd18:	0800dd5b 	.word	0x0800dd5b
 800dd1c:	0800ddcf 	.word	0x0800ddcf
 800dd20:	0800dddd 	.word	0x0800dddd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800dd24:	2300      	movs	r3, #0
 800dd26:	73fb      	strb	r3, [r7, #15]
      break;
 800dd28:	e06d      	b.n	800de06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd2e:	4619      	mov	r1, r3
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f897 	bl	800de64 <SetLineCoding>
 800dd36:	4603      	mov	r3, r0
 800dd38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dd3a:	7bbb      	ldrb	r3, [r7, #14]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d104      	bne.n	800dd4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	2202      	movs	r2, #2
 800dd44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dd48:	e058      	b.n	800ddfc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d055      	beq.n	800ddfc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	2204      	movs	r2, #4
 800dd54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800dd58:	e050      	b.n	800ddfc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	3340      	adds	r3, #64	@ 0x40
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 f860 	bl	800de26 <GetLineCoding>
 800dd66:	4603      	mov	r3, r0
 800dd68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dd6a:	7bbb      	ldrb	r3, [r7, #14]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d126      	bne.n	800ddbe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd82:	791b      	ldrb	r3, [r3, #4]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d13b      	bne.n	800de00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dd92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d133      	bne.n	800de00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dda2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d12b      	bne.n	800de00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddb0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d124      	bne.n	800de00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f958 	bl	800e06c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ddbc:	e020      	b.n	800de00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ddbe:	7bbb      	ldrb	r3, [r7, #14]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d01d      	beq.n	800de00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2204      	movs	r2, #4
 800ddc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ddcc:	e018      	b.n	800de00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 f867 	bl	800dea2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f8da 	bl	800df8e <CDC_ProcessReception>
      break;
 800ddda:	e014      	b.n	800de06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800dddc:	2100      	movs	r1, #0
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f001 f81a 	bl	800ee18 <USBH_ClrFeature>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dde8:	7bbb      	ldrb	r3, [r7, #14]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10a      	bne.n	800de04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800ddf6:	e005      	b.n	800de04 <USBH_CDC_Process+0x120>

    default:
      break;
 800ddf8:	bf00      	nop
 800ddfa:	e004      	b.n	800de06 <USBH_CDC_Process+0x122>
      break;
 800ddfc:	bf00      	nop
 800ddfe:	e002      	b.n	800de06 <USBH_CDC_Process+0x122>
      break;
 800de00:	bf00      	nop
 800de02:	e000      	b.n	800de06 <USBH_CDC_Process+0x122>
      break;
 800de04:	bf00      	nop

  }

  return status;
 800de06:	7bfb      	ldrb	r3, [r7, #15]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	370c      	adds	r7, #12
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr

0800de26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b082      	sub	sp, #8
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	22a1      	movs	r2, #161	@ 0xa1
 800de34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2221      	movs	r2, #33	@ 0x21
 800de3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2207      	movs	r2, #7
 800de4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	2207      	movs	r2, #7
 800de52:	4619      	mov	r1, r3
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f001 fb14 	bl	800f482 <USBH_CtlReq>
 800de5a:	4603      	mov	r3, r0
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2221      	movs	r2, #33	@ 0x21
 800de72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2220      	movs	r2, #32
 800de78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2200      	movs	r2, #0
 800de7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2207      	movs	r2, #7
 800de8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2207      	movs	r2, #7
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f001 faf5 	bl	800f482 <USBH_CtlReq>
 800de98:	4603      	mov	r3, r0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3708      	adds	r7, #8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b086      	sub	sp, #24
 800dea6:	af02      	add	r7, sp, #8
 800dea8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800deb0:	69db      	ldr	r3, [r3, #28]
 800deb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800deb4:	2300      	movs	r3, #0
 800deb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d002      	beq.n	800dec8 <CDC_ProcessTransmission+0x26>
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	d023      	beq.n	800df0e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800dec6:	e05e      	b.n	800df86 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	8b12      	ldrh	r2, [r2, #24]
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d90b      	bls.n	800deec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	69d9      	ldr	r1, [r3, #28]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	8b1a      	ldrh	r2, [r3, #24]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	7b5b      	ldrb	r3, [r3, #13]
 800dee0:	2001      	movs	r0, #1
 800dee2:	9000      	str	r0, [sp, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f001 fcda 	bl	800f89e <USBH_BulkSendData>
 800deea:	e00b      	b.n	800df04 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800def4:	b29a      	uxth	r2, r3
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	7b5b      	ldrb	r3, [r3, #13]
 800defa:	2001      	movs	r0, #1
 800defc:	9000      	str	r0, [sp, #0]
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f001 fccd 	bl	800f89e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2202      	movs	r2, #2
 800df08:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800df0c:	e03b      	b.n	800df86 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	7b5b      	ldrb	r3, [r3, #13]
 800df12:	4619      	mov	r1, r3
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f002 f84d 	bl	800ffb4 <USBH_LL_GetURBState>
 800df1a:	4603      	mov	r3, r0
 800df1c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800df1e:	7afb      	ldrb	r3, [r7, #11]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d128      	bne.n	800df76 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	8b12      	ldrh	r2, [r2, #24]
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d90e      	bls.n	800df4e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	8b12      	ldrh	r2, [r2, #24]
 800df38:	1a9a      	subs	r2, r3, r2
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	69db      	ldr	r3, [r3, #28]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	8b12      	ldrh	r2, [r2, #24]
 800df46:	441a      	add	r2, r3
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	61da      	str	r2, [r3, #28]
 800df4c:	e002      	b.n	800df54 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d004      	beq.n	800df66 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2201      	movs	r2, #1
 800df60:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800df64:	e00e      	b.n	800df84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2200      	movs	r2, #0
 800df6a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 f868 	bl	800e044 <USBH_CDC_TransmitCallback>
      break;
 800df74:	e006      	b.n	800df84 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800df76:	7afb      	ldrb	r3, [r7, #11]
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d103      	bne.n	800df84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2201      	movs	r2, #1
 800df80:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800df84:	bf00      	nop
  }
}
 800df86:	bf00      	nop
 800df88:	3710      	adds	r7, #16
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b086      	sub	sp, #24
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800df9c:	69db      	ldr	r3, [r3, #28]
 800df9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800dfaa:	2b03      	cmp	r3, #3
 800dfac:	d002      	beq.n	800dfb4 <CDC_ProcessReception+0x26>
 800dfae:	2b04      	cmp	r3, #4
 800dfb0:	d00e      	beq.n	800dfd0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800dfb2:	e043      	b.n	800e03c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	6a19      	ldr	r1, [r3, #32]
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	8b5a      	ldrh	r2, [r3, #26]
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	7b1b      	ldrb	r3, [r3, #12]
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f001 fc91 	bl	800f8e8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	2204      	movs	r2, #4
 800dfca:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800dfce:	e035      	b.n	800e03c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	7b1b      	ldrb	r3, [r3, #12]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f001 ffec 	bl	800ffb4 <USBH_LL_GetURBState>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800dfe0:	7cfb      	ldrb	r3, [r7, #19]
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d129      	bne.n	800e03a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	7b1b      	ldrb	r3, [r3, #12]
 800dfea:	4619      	mov	r1, r3
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f001 ff4f 	bl	800fe90 <USBH_LL_GetLastXferSize>
 800dff2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d016      	beq.n	800e02c <CDC_ProcessReception+0x9e>
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	8b5b      	ldrh	r3, [r3, #26]
 800e002:	461a      	mov	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	4293      	cmp	r3, r2
 800e008:	d110      	bne.n	800e02c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	1ad2      	subs	r2, r2, r3
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	6a1a      	ldr	r2, [r3, #32]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	441a      	add	r2, r3
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	2203      	movs	r2, #3
 800e026:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800e02a:	e006      	b.n	800e03a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	2200      	movs	r2, #0
 800e030:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 f80f 	bl	800e058 <USBH_CDC_ReceiveCallback>
      break;
 800e03a:	bf00      	nop
  }
}
 800e03c:	bf00      	nop
 800e03e:	3718      	adds	r7, #24
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e044:	b480      	push	{r7}
 800e046:	b083      	sub	sp, #12
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e04c:	bf00      	nop
 800e04e:	370c      	adds	r7, #12
 800e050:	46bd      	mov	sp, r7
 800e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e056:	4770      	bx	lr

0800e058 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e058:	b480      	push	{r7}
 800e05a:	b083      	sub	sp, #12
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e060:	bf00      	nop
 800e062:	370c      	adds	r7, #12
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e074:	bf00      	nop
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	60f8      	str	r0, [r7, #12]
 800e088:	60b9      	str	r1, [r7, #8]
 800e08a:	4613      	mov	r3, r2
 800e08c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d101      	bne.n	800e098 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e094:	2302      	movs	r3, #2
 800e096:	e029      	b.n	800e0ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	79fa      	ldrb	r2, [r7, #7]
 800e09c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f000 f81f 	bl	800e0f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d003      	beq.n	800e0e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	68ba      	ldr	r2, [r7, #8]
 800e0e0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f001 fe1f 	bl	800fd28 <USBH_LL_Init>

  return USBH_OK;
 800e0ea:	2300      	movs	r3, #0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e100:	2300      	movs	r3, #0
 800e102:	60fb      	str	r3, [r7, #12]
 800e104:	e009      	b.n	800e11a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	33e0      	adds	r3, #224	@ 0xe0
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4413      	add	r3, r2
 800e110:	2200      	movs	r2, #0
 800e112:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3301      	adds	r3, #1
 800e118:	60fb      	str	r3, [r7, #12]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b0f      	cmp	r3, #15
 800e11e:	d9f2      	bls.n	800e106 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e120:	2300      	movs	r3, #0
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	e009      	b.n	800e13a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	4413      	add	r3, r2
 800e12c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e130:	2200      	movs	r2, #0
 800e132:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	3301      	adds	r3, #1
 800e138:	60fb      	str	r3, [r7, #12]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e140:	d3f1      	bcc.n	800e126 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2201      	movs	r2, #1
 800e152:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2200      	movs	r2, #0
 800e158:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2240      	movs	r2, #64	@ 0x40
 800e166:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2200      	movs	r2, #0
 800e172:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	331c      	adds	r3, #28
 800e192:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e196:	2100      	movs	r1, #0
 800e198:	4618      	mov	r0, r3
 800e19a:	f002 f8cd 	bl	8010338 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800e1a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f002 f8c4 	bl	8010338 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800e1b6:	2212      	movs	r2, #18
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f002 f8bc 	bl	8010338 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800e1c6:	223e      	movs	r2, #62	@ 0x3e
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f002 f8b4 	bl	8010338 <memset>

  return USBH_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3710      	adds	r7, #16
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e1da:	b480      	push	{r7}
 800e1dc:	b085      	sub	sp, #20
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
 800e1e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d016      	beq.n	800e21c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10e      	bne.n	800e216 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800e1fe:	1c59      	adds	r1, r3, #1
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	33de      	adds	r3, #222	@ 0xde
 800e20a:	6839      	ldr	r1, [r7, #0]
 800e20c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e210:	2300      	movs	r3, #0
 800e212:	73fb      	strb	r3, [r7, #15]
 800e214:	e004      	b.n	800e220 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e216:	2302      	movs	r3, #2
 800e218:	73fb      	strb	r3, [r7, #15]
 800e21a:	e001      	b.n	800e220 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e21c:	2302      	movs	r3, #2
 800e21e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e220:	7bfb      	ldrb	r3, [r7, #15]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr

0800e22e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e22e:	b480      	push	{r7}
 800e230:	b085      	sub	sp, #20
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
 800e236:	460b      	mov	r3, r1
 800e238:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e23a:	2300      	movs	r3, #0
 800e23c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800e244:	78fa      	ldrb	r2, [r7, #3]
 800e246:	429a      	cmp	r2, r3
 800e248:	d204      	bcs.n	800e254 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	78fa      	ldrb	r2, [r7, #3]
 800e24e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800e252:	e001      	b.n	800e258 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e254:	2302      	movs	r3, #2
 800e256:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e258:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3714      	adds	r7, #20
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e266:	b480      	push	{r7}
 800e268:	b087      	sub	sp, #28
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	4608      	mov	r0, r1
 800e270:	4611      	mov	r1, r2
 800e272:	461a      	mov	r2, r3
 800e274:	4603      	mov	r3, r0
 800e276:	70fb      	strb	r3, [r7, #3]
 800e278:	460b      	mov	r3, r1
 800e27a:	70bb      	strb	r3, [r7, #2]
 800e27c:	4613      	mov	r3, r2
 800e27e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e280:	2300      	movs	r3, #0
 800e282:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e284:	2300      	movs	r3, #0
 800e286:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800e28e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e290:	e025      	b.n	800e2de <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e292:	7dfb      	ldrb	r3, [r7, #23]
 800e294:	221a      	movs	r2, #26
 800e296:	fb02 f303 	mul.w	r3, r2, r3
 800e29a:	3308      	adds	r3, #8
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	4413      	add	r3, r2
 800e2a0:	3302      	adds	r3, #2
 800e2a2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	795b      	ldrb	r3, [r3, #5]
 800e2a8:	78fa      	ldrb	r2, [r7, #3]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d002      	beq.n	800e2b4 <USBH_FindInterface+0x4e>
 800e2ae:	78fb      	ldrb	r3, [r7, #3]
 800e2b0:	2bff      	cmp	r3, #255	@ 0xff
 800e2b2:	d111      	bne.n	800e2d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e2b8:	78ba      	ldrb	r2, [r7, #2]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d002      	beq.n	800e2c4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e2be:	78bb      	ldrb	r3, [r7, #2]
 800e2c0:	2bff      	cmp	r3, #255	@ 0xff
 800e2c2:	d109      	bne.n	800e2d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e2c8:	787a      	ldrb	r2, [r7, #1]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d002      	beq.n	800e2d4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e2ce:	787b      	ldrb	r3, [r7, #1]
 800e2d0:	2bff      	cmp	r3, #255	@ 0xff
 800e2d2:	d101      	bne.n	800e2d8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e2d4:	7dfb      	ldrb	r3, [r7, #23]
 800e2d6:	e006      	b.n	800e2e6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e2d8:	7dfb      	ldrb	r3, [r7, #23]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e2de:	7dfb      	ldrb	r3, [r7, #23]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d9d6      	bls.n	800e292 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e2e4:	23ff      	movs	r3, #255	@ 0xff
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	371c      	adds	r7, #28
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr

0800e2f2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800e2f2:	b580      	push	{r7, lr}
 800e2f4:	b082      	sub	sp, #8
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f001 fd50 	bl	800fda0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800e300:	2101      	movs	r1, #1
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f001 fe69 	bl	800ffda <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e308:	2300      	movs	r3, #0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
	...

0800e314 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b088      	sub	sp, #32
 800e318:	af04      	add	r7, sp, #16
 800e31a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e31c:	2302      	movs	r3, #2
 800e31e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e320:	2300      	movs	r3, #0
 800e322:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d102      	bne.n	800e336 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2203      	movs	r2, #3
 800e334:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	2b0b      	cmp	r3, #11
 800e33e:	f200 81bb 	bhi.w	800e6b8 <USBH_Process+0x3a4>
 800e342:	a201      	add	r2, pc, #4	@ (adr r2, 800e348 <USBH_Process+0x34>)
 800e344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e348:	0800e379 	.word	0x0800e379
 800e34c:	0800e3ab 	.word	0x0800e3ab
 800e350:	0800e413 	.word	0x0800e413
 800e354:	0800e653 	.word	0x0800e653
 800e358:	0800e6b9 	.word	0x0800e6b9
 800e35c:	0800e4b3 	.word	0x0800e4b3
 800e360:	0800e5f9 	.word	0x0800e5f9
 800e364:	0800e4e9 	.word	0x0800e4e9
 800e368:	0800e509 	.word	0x0800e509
 800e36c:	0800e527 	.word	0x0800e527
 800e370:	0800e56b 	.word	0x0800e56b
 800e374:	0800e63b 	.word	0x0800e63b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800e37e:	b2db      	uxtb	r3, r3
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 819b 	beq.w	800e6bc <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2201      	movs	r2, #1
 800e38a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e38c:	20c8      	movs	r0, #200	@ 0xc8
 800e38e:	f001 fe6e 	bl	801006e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f001 fd61 	bl	800fe5a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e3a8:	e188      	b.n	800e6bc <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d107      	bne.n	800e3c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2202      	movs	r2, #2
 800e3c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e3c2:	e18a      	b.n	800e6da <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800e3ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e3ce:	d914      	bls.n	800e3fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800e3e6:	2b03      	cmp	r3, #3
 800e3e8:	d903      	bls.n	800e3f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	220d      	movs	r2, #13
 800e3ee:	701a      	strb	r2, [r3, #0]
      break;
 800e3f0:	e173      	b.n	800e6da <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	701a      	strb	r2, [r3, #0]
      break;
 800e3f8:	e16f      	b.n	800e6da <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800e400:	f103 020a 	add.w	r2, r3, #10
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800e40a:	200a      	movs	r0, #10
 800e40c:	f001 fe2f 	bl	801006e <USBH_Delay>
      break;
 800e410:	e163      	b.n	800e6da <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d005      	beq.n	800e428 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e422:	2104      	movs	r1, #4
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e428:	2064      	movs	r0, #100	@ 0x64
 800e42a:	f001 fe20 	bl	801006e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f001 fcec 	bl	800fe0c <USBH_LL_GetSpeed>
 800e434:	4603      	mov	r3, r0
 800e436:	461a      	mov	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2205      	movs	r2, #5
 800e442:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e444:	2100      	movs	r1, #0
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f001 fa9b 	bl	800f982 <USBH_AllocPipe>
 800e44c:	4603      	mov	r3, r0
 800e44e:	461a      	mov	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e454:	2180      	movs	r1, #128	@ 0x80
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f001 fa93 	bl	800f982 <USBH_AllocPipe>
 800e45c:	4603      	mov	r3, r0
 800e45e:	461a      	mov	r2, r3
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	7919      	ldrb	r1, [r3, #4]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e478:	9202      	str	r2, [sp, #8]
 800e47a:	2200      	movs	r2, #0
 800e47c:	9201      	str	r2, [sp, #4]
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	4603      	mov	r3, r0
 800e482:	2280      	movs	r2, #128	@ 0x80
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f001 fa4d 	bl	800f924 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	7959      	ldrb	r1, [r3, #5]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e49a:	687a      	ldr	r2, [r7, #4]
 800e49c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e49e:	9202      	str	r2, [sp, #8]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	9201      	str	r2, [sp, #4]
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f001 fa3a 	bl	800f924 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e4b0:	e113      	b.n	800e6da <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 f916 	bl	800e6e4 <USBH_HandleEnum>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e4bc:	7bbb      	ldrb	r3, [r7, #14]
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f040 80fd 	bne.w	800e6c0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d103      	bne.n	800e4e0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2208      	movs	r2, #8
 800e4dc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e4de:	e0ef      	b.n	800e6c0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2207      	movs	r2, #7
 800e4e4:	701a      	strb	r2, [r3, #0]
      break;
 800e4e6:	e0eb      	b.n	800e6c0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f000 80e8 	beq.w	800e6c4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e4fa:	2101      	movs	r1, #1
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2208      	movs	r2, #8
 800e504:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800e506:	e0dd      	b.n	800e6c4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f000 fc3a 	bl	800ed8a <USBH_SetCfg>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f040 80d5 	bne.w	800e6c8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2209      	movs	r2, #9
 800e522:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e524:	e0d0      	b.n	800e6c8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800e52c:	f003 0320 	and.w	r3, r3, #32
 800e530:	2b00      	cmp	r3, #0
 800e532:	d016      	beq.n	800e562 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800e534:	2101      	movs	r1, #1
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f000 fc4a 	bl	800edd0 <USBH_SetFeature>
 800e53c:	4603      	mov	r3, r0
 800e53e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e540:	7bbb      	ldrb	r3, [r7, #14]
 800e542:	b2db      	uxtb	r3, r3
 800e544:	2b00      	cmp	r3, #0
 800e546:	d103      	bne.n	800e550 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	220a      	movs	r2, #10
 800e54c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e54e:	e0bd      	b.n	800e6cc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800e550:	7bbb      	ldrb	r3, [r7, #14]
 800e552:	b2db      	uxtb	r3, r3
 800e554:	2b03      	cmp	r3, #3
 800e556:	f040 80b9 	bne.w	800e6cc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	220a      	movs	r2, #10
 800e55e:	701a      	strb	r2, [r3, #0]
      break;
 800e560:	e0b4      	b.n	800e6cc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	220a      	movs	r2, #10
 800e566:	701a      	strb	r2, [r3, #0]
      break;
 800e568:	e0b0      	b.n	800e6cc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800e570:	2b00      	cmp	r3, #0
 800e572:	f000 80ad 	beq.w	800e6d0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e57e:	2300      	movs	r3, #0
 800e580:	73fb      	strb	r3, [r7, #15]
 800e582:	e016      	b.n	800e5b2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e584:	7bfa      	ldrb	r2, [r7, #15]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	32de      	adds	r2, #222	@ 0xde
 800e58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e58e:	791a      	ldrb	r2, [r3, #4]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800e596:	429a      	cmp	r2, r3
 800e598:	d108      	bne.n	800e5ac <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e59a:	7bfa      	ldrb	r2, [r7, #15]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	32de      	adds	r2, #222	@ 0xde
 800e5a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800e5aa:	e005      	b.n	800e5b8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	73fb      	strb	r3, [r7, #15]
 800e5b2:	7bfb      	ldrb	r3, [r7, #15]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d0e5      	beq.n	800e584 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d016      	beq.n	800e5f0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	4798      	blx	r3
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d109      	bne.n	800e5e8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2206      	movs	r2, #6
 800e5d8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e5e0:	2103      	movs	r1, #3
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e5e6:	e073      	b.n	800e6d0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	220d      	movs	r2, #13
 800e5ec:	701a      	strb	r2, [r3, #0]
      break;
 800e5ee:	e06f      	b.n	800e6d0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	220d      	movs	r2, #13
 800e5f4:	701a      	strb	r2, [r3, #0]
      break;
 800e5f6:	e06b      	b.n	800e6d0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d017      	beq.n	800e632 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e608:	691b      	ldr	r3, [r3, #16]
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	4798      	blx	r3
 800e60e:	4603      	mov	r3, r0
 800e610:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e612:	7bbb      	ldrb	r3, [r7, #14]
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	d103      	bne.n	800e622 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	220b      	movs	r2, #11
 800e61e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e620:	e058      	b.n	800e6d4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800e622:	7bbb      	ldrb	r3, [r7, #14]
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b02      	cmp	r3, #2
 800e628:	d154      	bne.n	800e6d4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	220d      	movs	r2, #13
 800e62e:	701a      	strb	r2, [r3, #0]
      break;
 800e630:	e050      	b.n	800e6d4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	220d      	movs	r2, #13
 800e636:	701a      	strb	r2, [r3, #0]
      break;
 800e638:	e04c      	b.n	800e6d4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e640:	2b00      	cmp	r3, #0
 800e642:	d049      	beq.n	800e6d8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e64a:	695b      	ldr	r3, [r3, #20]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	4798      	blx	r3
      }
      break;
 800e650:	e042      	b.n	800e6d8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f7ff fd4a 	bl	800e0f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e666:	2b00      	cmp	r3, #0
 800e668:	d009      	beq.n	800e67e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e684:	2b00      	cmp	r3, #0
 800e686:	d005      	beq.n	800e694 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800e68e:	2105      	movs	r1, #5
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d107      	bne.n	800e6b0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7ff fe22 	bl	800e2f2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800e6ae:	e014      	b.n	800e6da <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f001 fb75 	bl	800fda0 <USBH_LL_Start>
      break;
 800e6b6:	e010      	b.n	800e6da <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800e6b8:	bf00      	nop
 800e6ba:	e00e      	b.n	800e6da <USBH_Process+0x3c6>
      break;
 800e6bc:	bf00      	nop
 800e6be:	e00c      	b.n	800e6da <USBH_Process+0x3c6>
      break;
 800e6c0:	bf00      	nop
 800e6c2:	e00a      	b.n	800e6da <USBH_Process+0x3c6>
    break;
 800e6c4:	bf00      	nop
 800e6c6:	e008      	b.n	800e6da <USBH_Process+0x3c6>
      break;
 800e6c8:	bf00      	nop
 800e6ca:	e006      	b.n	800e6da <USBH_Process+0x3c6>
      break;
 800e6cc:	bf00      	nop
 800e6ce:	e004      	b.n	800e6da <USBH_Process+0x3c6>
      break;
 800e6d0:	bf00      	nop
 800e6d2:	e002      	b.n	800e6da <USBH_Process+0x3c6>
      break;
 800e6d4:	bf00      	nop
 800e6d6:	e000      	b.n	800e6da <USBH_Process+0x3c6>
      break;
 800e6d8:	bf00      	nop
  }
  return USBH_OK;
 800e6da:	2300      	movs	r3, #0
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b088      	sub	sp, #32
 800e6e8:	af04      	add	r7, sp, #16
 800e6ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	785b      	ldrb	r3, [r3, #1]
 800e6f8:	2b07      	cmp	r3, #7
 800e6fa:	f200 81bd 	bhi.w	800ea78 <USBH_HandleEnum+0x394>
 800e6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800e704 <USBH_HandleEnum+0x20>)
 800e700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e704:	0800e725 	.word	0x0800e725
 800e708:	0800e7df 	.word	0x0800e7df
 800e70c:	0800e849 	.word	0x0800e849
 800e710:	0800e8d3 	.word	0x0800e8d3
 800e714:	0800e93d 	.word	0x0800e93d
 800e718:	0800e9ad 	.word	0x0800e9ad
 800e71c:	0800e9f3 	.word	0x0800e9f3
 800e720:	0800ea39 	.word	0x0800ea39
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e724:	2108      	movs	r1, #8
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 fa4c 	bl	800ebc4 <USBH_Get_DevDesc>
 800e72c:	4603      	mov	r3, r0
 800e72e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e730:	7bbb      	ldrb	r3, [r7, #14]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d12e      	bne.n	800e794 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2201      	movs	r2, #1
 800e744:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	7919      	ldrb	r1, [r3, #4]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e75a:	9202      	str	r2, [sp, #8]
 800e75c:	2200      	movs	r2, #0
 800e75e:	9201      	str	r2, [sp, #4]
 800e760:	9300      	str	r3, [sp, #0]
 800e762:	4603      	mov	r3, r0
 800e764:	2280      	movs	r2, #128	@ 0x80
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f001 f8dc 	bl	800f924 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	7959      	ldrb	r1, [r3, #5]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e780:	9202      	str	r2, [sp, #8]
 800e782:	2200      	movs	r2, #0
 800e784:	9201      	str	r2, [sp, #4]
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	4603      	mov	r3, r0
 800e78a:	2200      	movs	r2, #0
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f001 f8c9 	bl	800f924 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e792:	e173      	b.n	800ea7c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e794:	7bbb      	ldrb	r3, [r7, #14]
 800e796:	2b03      	cmp	r3, #3
 800e798:	f040 8170 	bne.w	800ea7c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	b2da      	uxtb	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e7b2:	2b03      	cmp	r3, #3
 800e7b4:	d903      	bls.n	800e7be <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	220d      	movs	r2, #13
 800e7ba:	701a      	strb	r2, [r3, #0]
      break;
 800e7bc:	e15e      	b.n	800ea7c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	795b      	ldrb	r3, [r3, #5]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	6878      	ldr	r0, [r7, #4]
 800e7c6:	f001 f8fd 	bl	800f9c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	791b      	ldrb	r3, [r3, #4]
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f001 f8f7 	bl	800f9c4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	701a      	strb	r2, [r3, #0]
      break;
 800e7dc:	e14e      	b.n	800ea7c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e7de:	2112      	movs	r1, #18
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 f9ef 	bl	800ebc4 <USBH_Get_DevDesc>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e7ea:	7bbb      	ldrb	r3, [r7, #14]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d103      	bne.n	800e7f8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2202      	movs	r2, #2
 800e7f4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e7f6:	e143      	b.n	800ea80 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e7f8:	7bbb      	ldrb	r3, [r7, #14]
 800e7fa:	2b03      	cmp	r3, #3
 800e7fc:	f040 8140 	bne.w	800ea80 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e806:	3301      	adds	r3, #1
 800e808:	b2da      	uxtb	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e816:	2b03      	cmp	r3, #3
 800e818:	d903      	bls.n	800e822 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	220d      	movs	r2, #13
 800e81e:	701a      	strb	r2, [r3, #0]
      break;
 800e820:	e12e      	b.n	800ea80 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	795b      	ldrb	r3, [r3, #5]
 800e826:	4619      	mov	r1, r3
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f001 f8cb 	bl	800f9c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	791b      	ldrb	r3, [r3, #4]
 800e832:	4619      	mov	r1, r3
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f001 f8c5 	bl	800f9c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2200      	movs	r2, #0
 800e83e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2200      	movs	r2, #0
 800e844:	701a      	strb	r2, [r3, #0]
      break;
 800e846:	e11b      	b.n	800ea80 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e848:	2101      	movs	r1, #1
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 fa79 	bl	800ed42 <USBH_SetAddress>
 800e850:	4603      	mov	r3, r0
 800e852:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e854:	7bbb      	ldrb	r3, [r7, #14]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d130      	bne.n	800e8bc <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800e85a:	2002      	movs	r0, #2
 800e85c:	f001 fc07 	bl	801006e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2203      	movs	r2, #3
 800e86c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	7919      	ldrb	r1, [r3, #4]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e882:	9202      	str	r2, [sp, #8]
 800e884:	2200      	movs	r2, #0
 800e886:	9201      	str	r2, [sp, #4]
 800e888:	9300      	str	r3, [sp, #0]
 800e88a:	4603      	mov	r3, r0
 800e88c:	2280      	movs	r2, #128	@ 0x80
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f001 f848 	bl	800f924 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	7959      	ldrb	r1, [r3, #5]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e8a8:	9202      	str	r2, [sp, #8]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	9201      	str	r2, [sp, #4]
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f001 f835 	bl	800f924 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e8ba:	e0e3      	b.n	800ea84 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8bc:	7bbb      	ldrb	r3, [r7, #14]
 800e8be:	2b03      	cmp	r3, #3
 800e8c0:	f040 80e0 	bne.w	800ea84 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	220d      	movs	r2, #13
 800e8c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	705a      	strb	r2, [r3, #1]
      break;
 800e8d0:	e0d8      	b.n	800ea84 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e8d2:	2109      	movs	r1, #9
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f9a1 	bl	800ec1c <USBH_Get_CfgDesc>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e8de:	7bbb      	ldrb	r3, [r7, #14]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d103      	bne.n	800e8ec <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2204      	movs	r2, #4
 800e8e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e8ea:	e0cd      	b.n	800ea88 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8ec:	7bbb      	ldrb	r3, [r7, #14]
 800e8ee:	2b03      	cmp	r3, #3
 800e8f0:	f040 80ca 	bne.w	800ea88 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	b2da      	uxtb	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e90a:	2b03      	cmp	r3, #3
 800e90c:	d903      	bls.n	800e916 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	220d      	movs	r2, #13
 800e912:	701a      	strb	r2, [r3, #0]
      break;
 800e914:	e0b8      	b.n	800ea88 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	795b      	ldrb	r3, [r3, #5]
 800e91a:	4619      	mov	r1, r3
 800e91c:	6878      	ldr	r0, [r7, #4]
 800e91e:	f001 f851 	bl	800f9c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	791b      	ldrb	r3, [r3, #4]
 800e926:	4619      	mov	r1, r3
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f001 f84b 	bl	800f9c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2200      	movs	r2, #0
 800e938:	701a      	strb	r2, [r3, #0]
      break;
 800e93a:	e0a5      	b.n	800ea88 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800e942:	4619      	mov	r1, r3
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 f969 	bl	800ec1c <USBH_Get_CfgDesc>
 800e94a:	4603      	mov	r3, r0
 800e94c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e94e:	7bbb      	ldrb	r3, [r7, #14]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d103      	bne.n	800e95c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2205      	movs	r2, #5
 800e958:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e95a:	e097      	b.n	800ea8c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e95c:	7bbb      	ldrb	r3, [r7, #14]
 800e95e:	2b03      	cmp	r3, #3
 800e960:	f040 8094 	bne.w	800ea8c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e96a:	3301      	adds	r3, #1
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800e97a:	2b03      	cmp	r3, #3
 800e97c:	d903      	bls.n	800e986 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	220d      	movs	r2, #13
 800e982:	701a      	strb	r2, [r3, #0]
      break;
 800e984:	e082      	b.n	800ea8c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	795b      	ldrb	r3, [r3, #5]
 800e98a:	4619      	mov	r1, r3
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f001 f819 	bl	800f9c4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	791b      	ldrb	r3, [r3, #4]
 800e996:	4619      	mov	r1, r3
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f001 f813 	bl	800f9c4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	701a      	strb	r2, [r3, #0]
      break;
 800e9aa:	e06f      	b.n	800ea8c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d019      	beq.n	800e9ea <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e9c2:	23ff      	movs	r3, #255	@ 0xff
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f000 f953 	bl	800ec70 <USBH_Get_StringDesc>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e9ce:	7bbb      	ldrb	r3, [r7, #14]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d103      	bne.n	800e9dc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2206      	movs	r2, #6
 800e9d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800e9da:	e059      	b.n	800ea90 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e9dc:	7bbb      	ldrb	r3, [r7, #14]
 800e9de:	2b03      	cmp	r3, #3
 800e9e0:	d156      	bne.n	800ea90 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2206      	movs	r2, #6
 800e9e6:	705a      	strb	r2, [r3, #1]
      break;
 800e9e8:	e052      	b.n	800ea90 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2206      	movs	r2, #6
 800e9ee:	705a      	strb	r2, [r3, #1]
      break;
 800e9f0:	e04e      	b.n	800ea90 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d019      	beq.n	800ea30 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ea08:	23ff      	movs	r3, #255	@ 0xff
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f000 f930 	bl	800ec70 <USBH_Get_StringDesc>
 800ea10:	4603      	mov	r3, r0
 800ea12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ea14:	7bbb      	ldrb	r3, [r7, #14]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d103      	bne.n	800ea22 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2207      	movs	r2, #7
 800ea1e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ea20:	e038      	b.n	800ea94 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea22:	7bbb      	ldrb	r3, [r7, #14]
 800ea24:	2b03      	cmp	r3, #3
 800ea26:	d135      	bne.n	800ea94 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2207      	movs	r2, #7
 800ea2c:	705a      	strb	r2, [r3, #1]
      break;
 800ea2e:	e031      	b.n	800ea94 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2207      	movs	r2, #7
 800ea34:	705a      	strb	r2, [r3, #1]
      break;
 800ea36:	e02d      	b.n	800ea94 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d017      	beq.n	800ea72 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ea4e:	23ff      	movs	r3, #255	@ 0xff
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f90d 	bl	800ec70 <USBH_Get_StringDesc>
 800ea56:	4603      	mov	r3, r0
 800ea58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ea5a:	7bbb      	ldrb	r3, [r7, #14]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d102      	bne.n	800ea66 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ea60:	2300      	movs	r3, #0
 800ea62:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ea64:	e018      	b.n	800ea98 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ea66:	7bbb      	ldrb	r3, [r7, #14]
 800ea68:	2b03      	cmp	r3, #3
 800ea6a:	d115      	bne.n	800ea98 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ea70:	e012      	b.n	800ea98 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800ea72:	2300      	movs	r3, #0
 800ea74:	73fb      	strb	r3, [r7, #15]
      break;
 800ea76:	e00f      	b.n	800ea98 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ea78:	bf00      	nop
 800ea7a:	e00e      	b.n	800ea9a <USBH_HandleEnum+0x3b6>
      break;
 800ea7c:	bf00      	nop
 800ea7e:	e00c      	b.n	800ea9a <USBH_HandleEnum+0x3b6>
      break;
 800ea80:	bf00      	nop
 800ea82:	e00a      	b.n	800ea9a <USBH_HandleEnum+0x3b6>
      break;
 800ea84:	bf00      	nop
 800ea86:	e008      	b.n	800ea9a <USBH_HandleEnum+0x3b6>
      break;
 800ea88:	bf00      	nop
 800ea8a:	e006      	b.n	800ea9a <USBH_HandleEnum+0x3b6>
      break;
 800ea8c:	bf00      	nop
 800ea8e:	e004      	b.n	800ea9a <USBH_HandleEnum+0x3b6>
      break;
 800ea90:	bf00      	nop
 800ea92:	e002      	b.n	800ea9a <USBH_HandleEnum+0x3b6>
      break;
 800ea94:	bf00      	nop
 800ea96:	e000      	b.n	800ea9a <USBH_HandleEnum+0x3b6>
      break;
 800ea98:	bf00      	nop
  }
  return Status;
 800ea9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800eab6:	bf00      	nop
 800eab8:	370c      	adds	r7, #12
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr

0800eac2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800eac2:	b580      	push	{r7, lr}
 800eac4:	b082      	sub	sp, #8
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ead0:	1c5a      	adds	r2, r3, #1
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 f804 	bl	800eae6 <USBH_HandleSof>
}
 800eade:	bf00      	nop
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b082      	sub	sp, #8
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	2b0b      	cmp	r3, #11
 800eaf6:	d10a      	bne.n	800eb0e <USBH_HandleSof+0x28>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d005      	beq.n	800eb0e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800eb08:	699b      	ldr	r3, [r3, #24]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	4798      	blx	r3
  }
}
 800eb0e:	bf00      	nop
 800eb10:	3708      	adds	r7, #8
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800eb16:	b480      	push	{r7}
 800eb18:	b083      	sub	sp, #12
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2201      	movs	r2, #1
 800eb22:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800eb26:	bf00      	nop
}
 800eb28:	370c      	adds	r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr

0800eb32 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800eb32:	b480      	push	{r7}
 800eb34:	b083      	sub	sp, #12
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800eb42:	bf00      	nop
}
 800eb44:	370c      	adds	r7, #12
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr

0800eb4e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800eb4e:	b480      	push	{r7}
 800eb50:	b083      	sub	sp, #12
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2200      	movs	r2, #0
 800eb62:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2201      	movs	r2, #1
 800eb88:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f001 f91a 	bl	800fdd6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	791b      	ldrb	r3, [r3, #4]
 800eba6:	4619      	mov	r1, r3
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 ff0b 	bl	800f9c4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	795b      	ldrb	r3, [r3, #5]
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 ff05 	bl	800f9c4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b086      	sub	sp, #24
 800ebc8:	af02      	add	r7, sp, #8
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ebd0:	887b      	ldrh	r3, [r7, #2]
 800ebd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ebd6:	d901      	bls.n	800ebdc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ebd8:	2303      	movs	r3, #3
 800ebda:	e01b      	b.n	800ec14 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ebe2:	887b      	ldrh	r3, [r7, #2]
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ebec:	2100      	movs	r1, #0
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 f872 	bl	800ecd8 <USBH_GetDescriptor>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ebf8:	7bfb      	ldrb	r3, [r7, #15]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d109      	bne.n	800ec12 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ec04:	887a      	ldrh	r2, [r7, #2]
 800ec06:	4619      	mov	r1, r3
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 f929 	bl	800ee60 <USBH_ParseDevDesc>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ec12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af02      	add	r7, sp, #8
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	460b      	mov	r3, r1
 800ec26:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	331c      	adds	r3, #28
 800ec2c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800ec2e:	887b      	ldrh	r3, [r7, #2]
 800ec30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec34:	d901      	bls.n	800ec3a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ec36:	2303      	movs	r3, #3
 800ec38:	e016      	b.n	800ec68 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ec3a:	887b      	ldrh	r3, [r7, #2]
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ec44:	2100      	movs	r1, #0
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 f846 	bl	800ecd8 <USBH_GetDescriptor>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ec50:	7bfb      	ldrb	r3, [r7, #15]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d107      	bne.n	800ec66 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800ec56:	887b      	ldrh	r3, [r7, #2]
 800ec58:	461a      	mov	r2, r3
 800ec5a:	68b9      	ldr	r1, [r7, #8]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 f9af 	bl	800efc0 <USBH_ParseCfgDesc>
 800ec62:	4603      	mov	r3, r0
 800ec64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ec66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b088      	sub	sp, #32
 800ec74:	af02      	add	r7, sp, #8
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	607a      	str	r2, [r7, #4]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	72fb      	strb	r3, [r7, #11]
 800ec80:	4613      	mov	r3, r2
 800ec82:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ec84:	893b      	ldrh	r3, [r7, #8]
 800ec86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec8a:	d802      	bhi.n	800ec92 <USBH_Get_StringDesc+0x22>
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d101      	bne.n	800ec96 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ec92:	2303      	movs	r3, #3
 800ec94:	e01c      	b.n	800ecd0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ec96:	7afb      	ldrb	r3, [r7, #11]
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ec9e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800eca6:	893b      	ldrh	r3, [r7, #8]
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	460b      	mov	r3, r1
 800ecac:	2100      	movs	r1, #0
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f000 f812 	bl	800ecd8 <USBH_GetDescriptor>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ecb8:	7dfb      	ldrb	r3, [r7, #23]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d107      	bne.n	800ecce <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ecc4:	893a      	ldrh	r2, [r7, #8]
 800ecc6:	6879      	ldr	r1, [r7, #4]
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f000 fb8d 	bl	800f3e8 <USBH_ParseStringDesc>
  }

  return status;
 800ecce:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3718      	adds	r7, #24
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	607b      	str	r3, [r7, #4]
 800ece2:	460b      	mov	r3, r1
 800ece4:	72fb      	strb	r3, [r7, #11]
 800ece6:	4613      	mov	r3, r2
 800ece8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	789b      	ldrb	r3, [r3, #2]
 800ecee:	2b01      	cmp	r3, #1
 800ecf0:	d11c      	bne.n	800ed2c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ecf2:	7afb      	ldrb	r3, [r7, #11]
 800ecf4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ecf8:	b2da      	uxtb	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2206      	movs	r2, #6
 800ed02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	893a      	ldrh	r2, [r7, #8]
 800ed08:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ed0a:	893b      	ldrh	r3, [r7, #8]
 800ed0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ed10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ed14:	d104      	bne.n	800ed20 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f240 4209 	movw	r2, #1033	@ 0x409
 800ed1c:	829a      	strh	r2, [r3, #20]
 800ed1e:	e002      	b.n	800ed26 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2200      	movs	r2, #0
 800ed24:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	8b3a      	ldrh	r2, [r7, #24]
 800ed2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ed2c:	8b3b      	ldrh	r3, [r7, #24]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	6879      	ldr	r1, [r7, #4]
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	f000 fba5 	bl	800f482 <USBH_CtlReq>
 800ed38:	4603      	mov	r3, r0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b082      	sub	sp, #8
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	789b      	ldrb	r3, [r3, #2]
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d10f      	bne.n	800ed76 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2205      	movs	r2, #5
 800ed60:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ed62:	78fb      	ldrb	r3, [r7, #3]
 800ed64:	b29a      	uxth	r2, r3
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2200      	movs	r2, #0
 800ed74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ed76:	2200      	movs	r2, #0
 800ed78:	2100      	movs	r1, #0
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fb81 	bl	800f482 <USBH_CtlReq>
 800ed80:	4603      	mov	r3, r0
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b082      	sub	sp, #8
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	460b      	mov	r3, r1
 800ed94:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	789b      	ldrb	r3, [r3, #2]
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d10e      	bne.n	800edbc <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2209      	movs	r2, #9
 800eda8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	887a      	ldrh	r2, [r7, #2]
 800edae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2200      	movs	r2, #0
 800edb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800edbc:	2200      	movs	r2, #0
 800edbe:	2100      	movs	r1, #0
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 fb5e 	bl	800f482 <USBH_CtlReq>
 800edc6:	4603      	mov	r3, r0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	460b      	mov	r3, r1
 800edda:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	789b      	ldrb	r3, [r3, #2]
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d10f      	bne.n	800ee04 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2203      	movs	r2, #3
 800edee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800edf0:	78fb      	ldrb	r3, [r7, #3]
 800edf2:	b29a      	uxth	r2, r3
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2200      	movs	r2, #0
 800edfc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ee04:	2200      	movs	r2, #0
 800ee06:	2100      	movs	r1, #0
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 fb3a 	bl	800f482 <USBH_CtlReq>
 800ee0e:	4603      	mov	r3, r0
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3708      	adds	r7, #8
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b082      	sub	sp, #8
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	460b      	mov	r3, r1
 800ee22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	789b      	ldrb	r3, [r3, #2]
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d10f      	bne.n	800ee4c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2202      	movs	r2, #2
 800ee30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2201      	movs	r2, #1
 800ee36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ee3e:	78fb      	ldrb	r3, [r7, #3]
 800ee40:	b29a      	uxth	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	2100      	movs	r1, #0
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 fb16 	bl	800f482 <USBH_CtlReq>
 800ee56:	4603      	mov	r3, r0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b087      	sub	sp, #28
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800ee74:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800ee76:	2300      	movs	r3, #0
 800ee78:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d101      	bne.n	800ee84 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800ee80:	2302      	movs	r3, #2
 800ee82:	e094      	b.n	800efae <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	781a      	ldrb	r2, [r3, #0]
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	785a      	ldrb	r2, [r3, #1]
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	3302      	adds	r3, #2
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	461a      	mov	r2, r3
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	3303      	adds	r3, #3
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	021b      	lsls	r3, r3, #8
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	4313      	orrs	r3, r2
 800eea8:	b29a      	uxth	r2, r3
 800eeaa:	693b      	ldr	r3, [r7, #16]
 800eeac:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	791a      	ldrb	r2, [r3, #4]
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	795a      	ldrb	r2, [r3, #5]
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	799a      	ldrb	r2, [r3, #6]
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	79da      	ldrb	r2, [r3, #7]
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d004      	beq.n	800eee2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800eede:	2b01      	cmp	r3, #1
 800eee0:	d11b      	bne.n	800ef1a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	79db      	ldrb	r3, [r3, #7]
 800eee6:	2b20      	cmp	r3, #32
 800eee8:	dc0f      	bgt.n	800ef0a <USBH_ParseDevDesc+0xaa>
 800eeea:	2b08      	cmp	r3, #8
 800eeec:	db0f      	blt.n	800ef0e <USBH_ParseDevDesc+0xae>
 800eeee:	3b08      	subs	r3, #8
 800eef0:	4a32      	ldr	r2, [pc, #200]	@ (800efbc <USBH_ParseDevDesc+0x15c>)
 800eef2:	fa22 f303 	lsr.w	r3, r2, r3
 800eef6:	f003 0301 	and.w	r3, r3, #1
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	bf14      	ite	ne
 800eefe:	2301      	movne	r3, #1
 800ef00:	2300      	moveq	r3, #0
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d106      	bne.n	800ef16 <USBH_ParseDevDesc+0xb6>
 800ef08:	e001      	b.n	800ef0e <USBH_ParseDevDesc+0xae>
 800ef0a:	2b40      	cmp	r3, #64	@ 0x40
 800ef0c:	d003      	beq.n	800ef16 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	2208      	movs	r2, #8
 800ef12:	71da      	strb	r2, [r3, #7]
        break;
 800ef14:	e000      	b.n	800ef18 <USBH_ParseDevDesc+0xb8>
        break;
 800ef16:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ef18:	e00e      	b.n	800ef38 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ef20:	2b02      	cmp	r3, #2
 800ef22:	d107      	bne.n	800ef34 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	79db      	ldrb	r3, [r3, #7]
 800ef28:	2b08      	cmp	r3, #8
 800ef2a:	d005      	beq.n	800ef38 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	2208      	movs	r2, #8
 800ef30:	71da      	strb	r2, [r3, #7]
 800ef32:	e001      	b.n	800ef38 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ef34:	2303      	movs	r3, #3
 800ef36:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ef38:	88fb      	ldrh	r3, [r7, #6]
 800ef3a:	2b08      	cmp	r3, #8
 800ef3c:	d936      	bls.n	800efac <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	3308      	adds	r3, #8
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	461a      	mov	r2, r3
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	3309      	adds	r3, #9
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	021b      	lsls	r3, r3, #8
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	4313      	orrs	r3, r2
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	330a      	adds	r3, #10
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	330b      	adds	r3, #11
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	021b      	lsls	r3, r3, #8
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	330c      	adds	r3, #12
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	330d      	adds	r3, #13
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	021b      	lsls	r3, r3, #8
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	4313      	orrs	r3, r2
 800ef86:	b29a      	uxth	r2, r3
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	7b9a      	ldrb	r2, [r3, #14]
 800ef90:	693b      	ldr	r3, [r7, #16]
 800ef92:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	7bda      	ldrb	r2, [r3, #15]
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	7c1a      	ldrb	r2, [r3, #16]
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	7c5a      	ldrb	r2, [r3, #17]
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800efac:	7dfb      	ldrb	r3, [r7, #23]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	371c      	adds	r7, #28
 800efb2:	46bd      	mov	sp, r7
 800efb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	01000101 	.word	0x01000101

0800efc0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b08c      	sub	sp, #48	@ 0x30
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	60b9      	str	r1, [r7, #8]
 800efca:	4613      	mov	r3, r2
 800efcc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800efd4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800efd6:	2300      	movs	r3, #0
 800efd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800efdc:	2300      	movs	r3, #0
 800efde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800efe2:	2300      	movs	r3, #0
 800efe4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d101      	bne.n	800eff2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800efee:	2302      	movs	r3, #2
 800eff0:	e0da      	b.n	800f1a8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800eff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	2b09      	cmp	r3, #9
 800effc:	d002      	beq.n	800f004 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800effe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f000:	2209      	movs	r2, #9
 800f002:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	781a      	ldrb	r2, [r3, #0]
 800f008:	6a3b      	ldr	r3, [r7, #32]
 800f00a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	785a      	ldrb	r2, [r3, #1]
 800f010:	6a3b      	ldr	r3, [r7, #32]
 800f012:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	3302      	adds	r3, #2
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	461a      	mov	r2, r3
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	3303      	adds	r3, #3
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	021b      	lsls	r3, r3, #8
 800f024:	b29b      	uxth	r3, r3
 800f026:	4313      	orrs	r3, r2
 800f028:	b29b      	uxth	r3, r3
 800f02a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f02e:	bf28      	it	cs
 800f030:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800f034:	b29a      	uxth	r2, r3
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	791a      	ldrb	r2, [r3, #4]
 800f03e:	6a3b      	ldr	r3, [r7, #32]
 800f040:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	795a      	ldrb	r2, [r3, #5]
 800f046:	6a3b      	ldr	r3, [r7, #32]
 800f048:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	799a      	ldrb	r2, [r3, #6]
 800f04e:	6a3b      	ldr	r3, [r7, #32]
 800f050:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	79da      	ldrb	r2, [r3, #7]
 800f056:	6a3b      	ldr	r3, [r7, #32]
 800f058:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	7a1a      	ldrb	r2, [r3, #8]
 800f05e:	6a3b      	ldr	r3, [r7, #32]
 800f060:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800f062:	88fb      	ldrh	r3, [r7, #6]
 800f064:	2b09      	cmp	r3, #9
 800f066:	f240 809d 	bls.w	800f1a4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800f06a:	2309      	movs	r3, #9
 800f06c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f06e:	2300      	movs	r3, #0
 800f070:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f072:	e081      	b.n	800f178 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f074:	f107 0316 	add.w	r3, r7, #22
 800f078:	4619      	mov	r1, r3
 800f07a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f07c:	f000 f9e7 	bl	800f44e <USBH_GetNextDesc>
 800f080:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800f082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f084:	785b      	ldrb	r3, [r3, #1]
 800f086:	2b04      	cmp	r3, #4
 800f088:	d176      	bne.n	800f178 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800f08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	2b09      	cmp	r3, #9
 800f090:	d002      	beq.n	800f098 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800f092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f094:	2209      	movs	r2, #9
 800f096:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800f098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f09c:	221a      	movs	r2, #26
 800f09e:	fb02 f303 	mul.w	r3, r2, r3
 800f0a2:	3308      	adds	r3, #8
 800f0a4:	6a3a      	ldr	r2, [r7, #32]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	3302      	adds	r3, #2
 800f0aa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800f0ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f0ae:	69f8      	ldr	r0, [r7, #28]
 800f0b0:	f000 f87e 	bl	800f1b0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f0be:	e043      	b.n	800f148 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800f0c0:	f107 0316 	add.w	r3, r7, #22
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f0c8:	f000 f9c1 	bl	800f44e <USBH_GetNextDesc>
 800f0cc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0d0:	785b      	ldrb	r3, [r3, #1]
 800f0d2:	2b05      	cmp	r3, #5
 800f0d4:	d138      	bne.n	800f148 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	795b      	ldrb	r3, [r3, #5]
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d113      	bne.n	800f106 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800f0de:	69fb      	ldr	r3, [r7, #28]
 800f0e0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800f0e2:	2b02      	cmp	r3, #2
 800f0e4:	d003      	beq.n	800f0ee <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800f0e6:	69fb      	ldr	r3, [r7, #28]
 800f0e8:	799b      	ldrb	r3, [r3, #6]
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d10b      	bne.n	800f106 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	79db      	ldrb	r3, [r3, #7]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d10b      	bne.n	800f10e <USBH_ParseCfgDesc+0x14e>
 800f0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	2b09      	cmp	r3, #9
 800f0fc:	d007      	beq.n	800f10e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800f0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f100:	2209      	movs	r2, #9
 800f102:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f104:	e003      	b.n	800f10e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800f106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f108:	2207      	movs	r2, #7
 800f10a:	701a      	strb	r2, [r3, #0]
 800f10c:	e000      	b.n	800f110 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800f10e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800f110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f114:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800f118:	3201      	adds	r2, #1
 800f11a:	00d2      	lsls	r2, r2, #3
 800f11c:	211a      	movs	r1, #26
 800f11e:	fb01 f303 	mul.w	r3, r1, r3
 800f122:	4413      	add	r3, r2
 800f124:	3308      	adds	r3, #8
 800f126:	6a3a      	ldr	r2, [r7, #32]
 800f128:	4413      	add	r3, r2
 800f12a:	3304      	adds	r3, #4
 800f12c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800f12e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f130:	69b9      	ldr	r1, [r7, #24]
 800f132:	68f8      	ldr	r0, [r7, #12]
 800f134:	f000 f870 	bl	800f218 <USBH_ParseEPDesc>
 800f138:	4603      	mov	r3, r0
 800f13a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800f13e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f142:	3301      	adds	r3, #1
 800f144:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	791b      	ldrb	r3, [r3, #4]
 800f14c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800f150:	429a      	cmp	r2, r3
 800f152:	d204      	bcs.n	800f15e <USBH_ParseCfgDesc+0x19e>
 800f154:	6a3b      	ldr	r3, [r7, #32]
 800f156:	885a      	ldrh	r2, [r3, #2]
 800f158:	8afb      	ldrh	r3, [r7, #22]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d8b0      	bhi.n	800f0c0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	791b      	ldrb	r3, [r3, #4]
 800f162:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800f166:	429a      	cmp	r2, r3
 800f168:	d201      	bcs.n	800f16e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800f16a:	2303      	movs	r3, #3
 800f16c:	e01c      	b.n	800f1a8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800f16e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f172:	3301      	adds	r3, #1
 800f174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d805      	bhi.n	800f18c <USBH_ParseCfgDesc+0x1cc>
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	885a      	ldrh	r2, [r3, #2]
 800f184:	8afb      	ldrh	r3, [r7, #22]
 800f186:	429a      	cmp	r2, r3
 800f188:	f63f af74 	bhi.w	800f074 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800f18c:	6a3b      	ldr	r3, [r7, #32]
 800f18e:	791b      	ldrb	r3, [r3, #4]
 800f190:	2b02      	cmp	r3, #2
 800f192:	bf28      	it	cs
 800f194:	2302      	movcs	r3, #2
 800f196:	b2db      	uxtb	r3, r3
 800f198:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d201      	bcs.n	800f1a4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800f1a0:	2303      	movs	r3, #3
 800f1a2:	e001      	b.n	800f1a8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800f1a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3730      	adds	r7, #48	@ 0x30
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	781a      	ldrb	r2, [r3, #0]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	785a      	ldrb	r2, [r3, #1]
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	789a      	ldrb	r2, [r3, #2]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	78da      	ldrb	r2, [r3, #3]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	3304      	adds	r3, #4
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	2b02      	cmp	r3, #2
 800f1e2:	bf28      	it	cs
 800f1e4:	2302      	movcs	r3, #2
 800f1e6:	b2da      	uxtb	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	795a      	ldrb	r2, [r3, #5]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	799a      	ldrb	r2, [r3, #6]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	79da      	ldrb	r2, [r3, #7]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	7a1a      	ldrb	r2, [r3, #8]
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	721a      	strb	r2, [r3, #8]
}
 800f20c:	bf00      	nop
 800f20e:	370c      	adds	r7, #12
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800f218:	b480      	push	{r7}
 800f21a:	b087      	sub	sp, #28
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800f224:	2300      	movs	r3, #0
 800f226:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	781a      	ldrb	r2, [r3, #0]
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	785a      	ldrb	r2, [r3, #1]
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	789a      	ldrb	r2, [r3, #2]
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	78da      	ldrb	r2, [r3, #3]
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	3304      	adds	r3, #4
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	461a      	mov	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	3305      	adds	r3, #5
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	021b      	lsls	r3, r3, #8
 800f258:	b29b      	uxth	r3, r3
 800f25a:	4313      	orrs	r3, r2
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	799a      	ldrb	r2, [r3, #6]
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	889b      	ldrh	r3, [r3, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d009      	beq.n	800f286 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800f276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f27a:	d804      	bhi.n	800f286 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800f280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f284:	d901      	bls.n	800f28a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800f286:	2303      	movs	r3, #3
 800f288:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f290:	2b00      	cmp	r3, #0
 800f292:	d136      	bne.n	800f302 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	78db      	ldrb	r3, [r3, #3]
 800f298:	f003 0303 	and.w	r3, r3, #3
 800f29c:	2b02      	cmp	r3, #2
 800f29e:	d108      	bne.n	800f2b2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	889b      	ldrh	r3, [r3, #4]
 800f2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f2a8:	f240 8097 	bls.w	800f3da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f2ac:	2303      	movs	r3, #3
 800f2ae:	75fb      	strb	r3, [r7, #23]
 800f2b0:	e093      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	78db      	ldrb	r3, [r3, #3]
 800f2b6:	f003 0303 	and.w	r3, r3, #3
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d107      	bne.n	800f2ce <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	889b      	ldrh	r3, [r3, #4]
 800f2c2:	2b40      	cmp	r3, #64	@ 0x40
 800f2c4:	f240 8089 	bls.w	800f3da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f2c8:	2303      	movs	r3, #3
 800f2ca:	75fb      	strb	r3, [r7, #23]
 800f2cc:	e085      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	78db      	ldrb	r3, [r3, #3]
 800f2d2:	f003 0303 	and.w	r3, r3, #3
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d005      	beq.n	800f2e6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	78db      	ldrb	r3, [r3, #3]
 800f2de:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	d10a      	bne.n	800f2fc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	799b      	ldrb	r3, [r3, #6]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d003      	beq.n	800f2f6 <USBH_ParseEPDesc+0xde>
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	799b      	ldrb	r3, [r3, #6]
 800f2f2:	2b10      	cmp	r3, #16
 800f2f4:	d970      	bls.n	800f3d8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800f2f6:	2303      	movs	r3, #3
 800f2f8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f2fa:	e06d      	b.n	800f3d8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800f2fc:	2303      	movs	r3, #3
 800f2fe:	75fb      	strb	r3, [r7, #23]
 800f300:	e06b      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d13c      	bne.n	800f386 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	78db      	ldrb	r3, [r3, #3]
 800f310:	f003 0303 	and.w	r3, r3, #3
 800f314:	2b02      	cmp	r3, #2
 800f316:	d005      	beq.n	800f324 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	78db      	ldrb	r3, [r3, #3]
 800f31c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800f320:	2b00      	cmp	r3, #0
 800f322:	d106      	bne.n	800f332 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	889b      	ldrh	r3, [r3, #4]
 800f328:	2b40      	cmp	r3, #64	@ 0x40
 800f32a:	d956      	bls.n	800f3da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f32c:	2303      	movs	r3, #3
 800f32e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800f330:	e053      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	78db      	ldrb	r3, [r3, #3]
 800f336:	f003 0303 	and.w	r3, r3, #3
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d10e      	bne.n	800f35c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	799b      	ldrb	r3, [r3, #6]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d007      	beq.n	800f356 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800f34a:	2b10      	cmp	r3, #16
 800f34c:	d803      	bhi.n	800f356 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800f352:	2b40      	cmp	r3, #64	@ 0x40
 800f354:	d941      	bls.n	800f3da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f356:	2303      	movs	r3, #3
 800f358:	75fb      	strb	r3, [r7, #23]
 800f35a:	e03e      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f35c:	68bb      	ldr	r3, [r7, #8]
 800f35e:	78db      	ldrb	r3, [r3, #3]
 800f360:	f003 0303 	and.w	r3, r3, #3
 800f364:	2b03      	cmp	r3, #3
 800f366:	d10b      	bne.n	800f380 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	799b      	ldrb	r3, [r3, #6]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d004      	beq.n	800f37a <USBH_ParseEPDesc+0x162>
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	889b      	ldrh	r3, [r3, #4]
 800f374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f378:	d32f      	bcc.n	800f3da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f37a:	2303      	movs	r3, #3
 800f37c:	75fb      	strb	r3, [r7, #23]
 800f37e:	e02c      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800f380:	2303      	movs	r3, #3
 800f382:	75fb      	strb	r3, [r7, #23]
 800f384:	e029      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f38c:	2b02      	cmp	r3, #2
 800f38e:	d120      	bne.n	800f3d2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	78db      	ldrb	r3, [r3, #3]
 800f394:	f003 0303 	and.w	r3, r3, #3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d106      	bne.n	800f3aa <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	889b      	ldrh	r3, [r3, #4]
 800f3a0:	2b08      	cmp	r3, #8
 800f3a2:	d01a      	beq.n	800f3da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f3a4:	2303      	movs	r3, #3
 800f3a6:	75fb      	strb	r3, [r7, #23]
 800f3a8:	e017      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	78db      	ldrb	r3, [r3, #3]
 800f3ae:	f003 0303 	and.w	r3, r3, #3
 800f3b2:	2b03      	cmp	r3, #3
 800f3b4:	d10a      	bne.n	800f3cc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	799b      	ldrb	r3, [r3, #6]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d003      	beq.n	800f3c6 <USBH_ParseEPDesc+0x1ae>
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	889b      	ldrh	r3, [r3, #4]
 800f3c2:	2b08      	cmp	r3, #8
 800f3c4:	d909      	bls.n	800f3da <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	75fb      	strb	r3, [r7, #23]
 800f3ca:	e006      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800f3cc:	2303      	movs	r3, #3
 800f3ce:	75fb      	strb	r3, [r7, #23]
 800f3d0:	e003      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800f3d2:	2303      	movs	r3, #3
 800f3d4:	75fb      	strb	r3, [r7, #23]
 800f3d6:	e000      	b.n	800f3da <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800f3d8:	bf00      	nop
  }

  return status;
 800f3da:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	371c      	adds	r7, #28
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b087      	sub	sp, #28
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	2b03      	cmp	r3, #3
 800f3fe:	d120      	bne.n	800f442 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	1e9a      	subs	r2, r3, #2
 800f406:	88fb      	ldrh	r3, [r7, #6]
 800f408:	4293      	cmp	r3, r2
 800f40a:	bf28      	it	cs
 800f40c:	4613      	movcs	r3, r2
 800f40e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	3302      	adds	r3, #2
 800f414:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f416:	2300      	movs	r3, #0
 800f418:	82fb      	strh	r3, [r7, #22]
 800f41a:	e00b      	b.n	800f434 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f41c:	8afb      	ldrh	r3, [r7, #22]
 800f41e:	68fa      	ldr	r2, [r7, #12]
 800f420:	4413      	add	r3, r2
 800f422:	781a      	ldrb	r2, [r3, #0]
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	3301      	adds	r3, #1
 800f42c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f42e:	8afb      	ldrh	r3, [r7, #22]
 800f430:	3302      	adds	r3, #2
 800f432:	82fb      	strh	r3, [r7, #22]
 800f434:	8afa      	ldrh	r2, [r7, #22]
 800f436:	8abb      	ldrh	r3, [r7, #20]
 800f438:	429a      	cmp	r2, r3
 800f43a:	d3ef      	bcc.n	800f41c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	2200      	movs	r2, #0
 800f440:	701a      	strb	r2, [r3, #0]
  }
}
 800f442:	bf00      	nop
 800f444:	371c      	adds	r7, #28
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr

0800f44e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f44e:	b480      	push	{r7}
 800f450:	b085      	sub	sp, #20
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	881b      	ldrh	r3, [r3, #0]
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	7812      	ldrb	r2, [r2, #0]
 800f460:	4413      	add	r3, r2
 800f462:	b29a      	uxth	r2, r3
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4413      	add	r3, r2
 800f472:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f474:	68fb      	ldr	r3, [r7, #12]
}
 800f476:	4618      	mov	r0, r3
 800f478:	3714      	adds	r7, #20
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr

0800f482 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f482:	b580      	push	{r7, lr}
 800f484:	b086      	sub	sp, #24
 800f486:	af00      	add	r7, sp, #0
 800f488:	60f8      	str	r0, [r7, #12]
 800f48a:	60b9      	str	r1, [r7, #8]
 800f48c:	4613      	mov	r3, r2
 800f48e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f490:	2301      	movs	r3, #1
 800f492:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	789b      	ldrb	r3, [r3, #2]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d002      	beq.n	800f4a2 <USBH_CtlReq+0x20>
 800f49c:	2b02      	cmp	r3, #2
 800f49e:	d00f      	beq.n	800f4c0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800f4a0:	e027      	b.n	800f4f2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	68ba      	ldr	r2, [r7, #8]
 800f4a6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	88fa      	ldrh	r2, [r7, #6]
 800f4ac:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2202      	movs	r2, #2
 800f4b8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f4ba:	2301      	movs	r3, #1
 800f4bc:	75fb      	strb	r3, [r7, #23]
      break;
 800f4be:	e018      	b.n	800f4f2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800f4c0:	68f8      	ldr	r0, [r7, #12]
 800f4c2:	f000 f81b 	bl	800f4fc <USBH_HandleControl>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d002      	beq.n	800f4d6 <USBH_CtlReq+0x54>
 800f4d0:	7dfb      	ldrb	r3, [r7, #23]
 800f4d2:	2b03      	cmp	r3, #3
 800f4d4:	d106      	bne.n	800f4e4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	2201      	movs	r2, #1
 800f4da:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	761a      	strb	r2, [r3, #24]
      break;
 800f4e2:	e005      	b.n	800f4f0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800f4e4:	7dfb      	ldrb	r3, [r7, #23]
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d102      	bne.n	800f4f0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	709a      	strb	r2, [r3, #2]
      break;
 800f4f0:	bf00      	nop
  }
  return status;
 800f4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3718      	adds	r7, #24
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b086      	sub	sp, #24
 800f500:	af02      	add	r7, sp, #8
 800f502:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f504:	2301      	movs	r3, #1
 800f506:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f508:	2300      	movs	r3, #0
 800f50a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	7e1b      	ldrb	r3, [r3, #24]
 800f510:	3b01      	subs	r3, #1
 800f512:	2b0a      	cmp	r3, #10
 800f514:	f200 8156 	bhi.w	800f7c4 <USBH_HandleControl+0x2c8>
 800f518:	a201      	add	r2, pc, #4	@ (adr r2, 800f520 <USBH_HandleControl+0x24>)
 800f51a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51e:	bf00      	nop
 800f520:	0800f54d 	.word	0x0800f54d
 800f524:	0800f567 	.word	0x0800f567
 800f528:	0800f5d1 	.word	0x0800f5d1
 800f52c:	0800f5f7 	.word	0x0800f5f7
 800f530:	0800f62f 	.word	0x0800f62f
 800f534:	0800f659 	.word	0x0800f659
 800f538:	0800f6ab 	.word	0x0800f6ab
 800f53c:	0800f6cd 	.word	0x0800f6cd
 800f540:	0800f709 	.word	0x0800f709
 800f544:	0800f72f 	.word	0x0800f72f
 800f548:	0800f76d 	.word	0x0800f76d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f103 0110 	add.w	r1, r3, #16
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	795b      	ldrb	r3, [r3, #5]
 800f556:	461a      	mov	r2, r3
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f943 	bl	800f7e4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2202      	movs	r2, #2
 800f562:	761a      	strb	r2, [r3, #24]
      break;
 800f564:	e139      	b.n	800f7da <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	795b      	ldrb	r3, [r3, #5]
 800f56a:	4619      	mov	r1, r3
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 fd21 	bl	800ffb4 <USBH_LL_GetURBState>
 800f572:	4603      	mov	r3, r0
 800f574:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f576:	7bbb      	ldrb	r3, [r7, #14]
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d11e      	bne.n	800f5ba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	7c1b      	ldrb	r3, [r3, #16]
 800f580:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f584:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	8adb      	ldrh	r3, [r3, #22]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d00a      	beq.n	800f5a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f58e:	7b7b      	ldrb	r3, [r7, #13]
 800f590:	2b80      	cmp	r3, #128	@ 0x80
 800f592:	d103      	bne.n	800f59c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2203      	movs	r2, #3
 800f598:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f59a:	e115      	b.n	800f7c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2205      	movs	r2, #5
 800f5a0:	761a      	strb	r2, [r3, #24]
      break;
 800f5a2:	e111      	b.n	800f7c8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800f5a4:	7b7b      	ldrb	r3, [r7, #13]
 800f5a6:	2b80      	cmp	r3, #128	@ 0x80
 800f5a8:	d103      	bne.n	800f5b2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2209      	movs	r2, #9
 800f5ae:	761a      	strb	r2, [r3, #24]
      break;
 800f5b0:	e10a      	b.n	800f7c8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2207      	movs	r2, #7
 800f5b6:	761a      	strb	r2, [r3, #24]
      break;
 800f5b8:	e106      	b.n	800f7c8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f5ba:	7bbb      	ldrb	r3, [r7, #14]
 800f5bc:	2b04      	cmp	r3, #4
 800f5be:	d003      	beq.n	800f5c8 <USBH_HandleControl+0xcc>
 800f5c0:	7bbb      	ldrb	r3, [r7, #14]
 800f5c2:	2b02      	cmp	r3, #2
 800f5c4:	f040 8100 	bne.w	800f7c8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	220b      	movs	r2, #11
 800f5cc:	761a      	strb	r2, [r3, #24]
      break;
 800f5ce:	e0fb      	b.n	800f7c8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f5d6:	b29a      	uxth	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6899      	ldr	r1, [r3, #8]
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	899a      	ldrh	r2, [r3, #12]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	791b      	ldrb	r3, [r3, #4]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f93a 	bl	800f862 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2204      	movs	r2, #4
 800f5f2:	761a      	strb	r2, [r3, #24]
      break;
 800f5f4:	e0f1      	b.n	800f7da <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	791b      	ldrb	r3, [r3, #4]
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f000 fcd9 	bl	800ffb4 <USBH_LL_GetURBState>
 800f602:	4603      	mov	r3, r0
 800f604:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f606:	7bbb      	ldrb	r3, [r7, #14]
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d102      	bne.n	800f612 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2209      	movs	r2, #9
 800f610:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f612:	7bbb      	ldrb	r3, [r7, #14]
 800f614:	2b05      	cmp	r3, #5
 800f616:	d102      	bne.n	800f61e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f618:	2303      	movs	r3, #3
 800f61a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f61c:	e0d6      	b.n	800f7cc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800f61e:	7bbb      	ldrb	r3, [r7, #14]
 800f620:	2b04      	cmp	r3, #4
 800f622:	f040 80d3 	bne.w	800f7cc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	220b      	movs	r2, #11
 800f62a:	761a      	strb	r2, [r3, #24]
      break;
 800f62c:	e0ce      	b.n	800f7cc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6899      	ldr	r1, [r3, #8]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	899a      	ldrh	r2, [r3, #12]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	795b      	ldrb	r3, [r3, #5]
 800f63a:	2001      	movs	r0, #1
 800f63c:	9000      	str	r0, [sp, #0]
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f000 f8ea 	bl	800f818 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f64a:	b29a      	uxth	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2206      	movs	r2, #6
 800f654:	761a      	strb	r2, [r3, #24]
      break;
 800f656:	e0c0      	b.n	800f7da <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	795b      	ldrb	r3, [r3, #5]
 800f65c:	4619      	mov	r1, r3
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 fca8 	bl	800ffb4 <USBH_LL_GetURBState>
 800f664:	4603      	mov	r3, r0
 800f666:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f668:	7bbb      	ldrb	r3, [r7, #14]
 800f66a:	2b01      	cmp	r3, #1
 800f66c:	d103      	bne.n	800f676 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2207      	movs	r2, #7
 800f672:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f674:	e0ac      	b.n	800f7d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800f676:	7bbb      	ldrb	r3, [r7, #14]
 800f678:	2b05      	cmp	r3, #5
 800f67a:	d105      	bne.n	800f688 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	220c      	movs	r2, #12
 800f680:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f682:	2303      	movs	r3, #3
 800f684:	73fb      	strb	r3, [r7, #15]
      break;
 800f686:	e0a3      	b.n	800f7d0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f688:	7bbb      	ldrb	r3, [r7, #14]
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d103      	bne.n	800f696 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2205      	movs	r2, #5
 800f692:	761a      	strb	r2, [r3, #24]
      break;
 800f694:	e09c      	b.n	800f7d0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800f696:	7bbb      	ldrb	r3, [r7, #14]
 800f698:	2b04      	cmp	r3, #4
 800f69a:	f040 8099 	bne.w	800f7d0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	220b      	movs	r2, #11
 800f6a2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f6a4:	2302      	movs	r3, #2
 800f6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800f6a8:	e092      	b.n	800f7d0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	791b      	ldrb	r3, [r3, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f000 f8d5 	bl	800f862 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2208      	movs	r2, #8
 800f6c8:	761a      	strb	r2, [r3, #24]

      break;
 800f6ca:	e086      	b.n	800f7da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	791b      	ldrb	r3, [r3, #4]
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 fc6e 	bl	800ffb4 <USBH_LL_GetURBState>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f6dc:	7bbb      	ldrb	r3, [r7, #14]
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d105      	bne.n	800f6ee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	220d      	movs	r2, #13
 800f6e6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f6ec:	e072      	b.n	800f7d4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800f6ee:	7bbb      	ldrb	r3, [r7, #14]
 800f6f0:	2b04      	cmp	r3, #4
 800f6f2:	d103      	bne.n	800f6fc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	220b      	movs	r2, #11
 800f6f8:	761a      	strb	r2, [r3, #24]
      break;
 800f6fa:	e06b      	b.n	800f7d4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800f6fc:	7bbb      	ldrb	r3, [r7, #14]
 800f6fe:	2b05      	cmp	r3, #5
 800f700:	d168      	bne.n	800f7d4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800f702:	2303      	movs	r3, #3
 800f704:	73fb      	strb	r3, [r7, #15]
      break;
 800f706:	e065      	b.n	800f7d4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	795b      	ldrb	r3, [r3, #5]
 800f70c:	2201      	movs	r2, #1
 800f70e:	9200      	str	r2, [sp, #0]
 800f710:	2200      	movs	r2, #0
 800f712:	2100      	movs	r1, #0
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f87f 	bl	800f818 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f720:	b29a      	uxth	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	220a      	movs	r2, #10
 800f72a:	761a      	strb	r2, [r3, #24]
      break;
 800f72c:	e055      	b.n	800f7da <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	795b      	ldrb	r3, [r3, #5]
 800f732:	4619      	mov	r1, r3
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f000 fc3d 	bl	800ffb4 <USBH_LL_GetURBState>
 800f73a:	4603      	mov	r3, r0
 800f73c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f73e:	7bbb      	ldrb	r3, [r7, #14]
 800f740:	2b01      	cmp	r3, #1
 800f742:	d105      	bne.n	800f750 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800f744:	2300      	movs	r3, #0
 800f746:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	220d      	movs	r2, #13
 800f74c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800f74e:	e043      	b.n	800f7d8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f750:	7bbb      	ldrb	r3, [r7, #14]
 800f752:	2b02      	cmp	r3, #2
 800f754:	d103      	bne.n	800f75e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2209      	movs	r2, #9
 800f75a:	761a      	strb	r2, [r3, #24]
      break;
 800f75c:	e03c      	b.n	800f7d8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800f75e:	7bbb      	ldrb	r3, [r7, #14]
 800f760:	2b04      	cmp	r3, #4
 800f762:	d139      	bne.n	800f7d8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	220b      	movs	r2, #11
 800f768:	761a      	strb	r2, [r3, #24]
      break;
 800f76a:	e035      	b.n	800f7d8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	7e5b      	ldrb	r3, [r3, #25]
 800f770:	3301      	adds	r3, #1
 800f772:	b2da      	uxtb	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	765a      	strb	r2, [r3, #25]
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	7e5b      	ldrb	r3, [r3, #25]
 800f77c:	2b02      	cmp	r3, #2
 800f77e:	d806      	bhi.n	800f78e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2201      	movs	r2, #1
 800f784:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2201      	movs	r2, #1
 800f78a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f78c:	e025      	b.n	800f7da <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f794:	2106      	movs	r1, #6
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2200      	movs	r2, #0
 800f79e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	795b      	ldrb	r3, [r3, #5]
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 f90c 	bl	800f9c4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	791b      	ldrb	r3, [r3, #4]
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f000 f906 	bl	800f9c4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f7be:	2302      	movs	r3, #2
 800f7c0:	73fb      	strb	r3, [r7, #15]
      break;
 800f7c2:	e00a      	b.n	800f7da <USBH_HandleControl+0x2de>

    default:
      break;
 800f7c4:	bf00      	nop
 800f7c6:	e008      	b.n	800f7da <USBH_HandleControl+0x2de>
      break;
 800f7c8:	bf00      	nop
 800f7ca:	e006      	b.n	800f7da <USBH_HandleControl+0x2de>
      break;
 800f7cc:	bf00      	nop
 800f7ce:	e004      	b.n	800f7da <USBH_HandleControl+0x2de>
      break;
 800f7d0:	bf00      	nop
 800f7d2:	e002      	b.n	800f7da <USBH_HandleControl+0x2de>
      break;
 800f7d4:	bf00      	nop
 800f7d6:	e000      	b.n	800f7da <USBH_HandleControl+0x2de>
      break;
 800f7d8:	bf00      	nop
  }

  return status;
 800f7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b088      	sub	sp, #32
 800f7e8:	af04      	add	r7, sp, #16
 800f7ea:	60f8      	str	r0, [r7, #12]
 800f7ec:	60b9      	str	r1, [r7, #8]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f7f2:	79f9      	ldrb	r1, [r7, #7]
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	9303      	str	r3, [sp, #12]
 800f7f8:	2308      	movs	r3, #8
 800f7fa:	9302      	str	r3, [sp, #8]
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	9301      	str	r3, [sp, #4]
 800f800:	2300      	movs	r3, #0
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	2300      	movs	r3, #0
 800f806:	2200      	movs	r2, #0
 800f808:	68f8      	ldr	r0, [r7, #12]
 800f80a:	f000 fba2 	bl	800ff52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800f80e:	2300      	movs	r3, #0
}
 800f810:	4618      	mov	r0, r3
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b088      	sub	sp, #32
 800f81c:	af04      	add	r7, sp, #16
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	4611      	mov	r1, r2
 800f824:	461a      	mov	r2, r3
 800f826:	460b      	mov	r3, r1
 800f828:	80fb      	strh	r3, [r7, #6]
 800f82a:	4613      	mov	r3, r2
 800f82c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f834:	2b00      	cmp	r3, #0
 800f836:	d001      	beq.n	800f83c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f838:	2300      	movs	r3, #0
 800f83a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f83c:	7979      	ldrb	r1, [r7, #5]
 800f83e:	7e3b      	ldrb	r3, [r7, #24]
 800f840:	9303      	str	r3, [sp, #12]
 800f842:	88fb      	ldrh	r3, [r7, #6]
 800f844:	9302      	str	r3, [sp, #8]
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	9301      	str	r3, [sp, #4]
 800f84a:	2301      	movs	r3, #1
 800f84c:	9300      	str	r3, [sp, #0]
 800f84e:	2300      	movs	r3, #0
 800f850:	2200      	movs	r2, #0
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f000 fb7d 	bl	800ff52 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b088      	sub	sp, #32
 800f866:	af04      	add	r7, sp, #16
 800f868:	60f8      	str	r0, [r7, #12]
 800f86a:	60b9      	str	r1, [r7, #8]
 800f86c:	4611      	mov	r1, r2
 800f86e:	461a      	mov	r2, r3
 800f870:	460b      	mov	r3, r1
 800f872:	80fb      	strh	r3, [r7, #6]
 800f874:	4613      	mov	r3, r2
 800f876:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f878:	7979      	ldrb	r1, [r7, #5]
 800f87a:	2300      	movs	r3, #0
 800f87c:	9303      	str	r3, [sp, #12]
 800f87e:	88fb      	ldrh	r3, [r7, #6]
 800f880:	9302      	str	r3, [sp, #8]
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	9301      	str	r3, [sp, #4]
 800f886:	2301      	movs	r3, #1
 800f888:	9300      	str	r3, [sp, #0]
 800f88a:	2300      	movs	r3, #0
 800f88c:	2201      	movs	r2, #1
 800f88e:	68f8      	ldr	r0, [r7, #12]
 800f890:	f000 fb5f 	bl	800ff52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f894:	2300      	movs	r3, #0

}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}

0800f89e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f89e:	b580      	push	{r7, lr}
 800f8a0:	b088      	sub	sp, #32
 800f8a2:	af04      	add	r7, sp, #16
 800f8a4:	60f8      	str	r0, [r7, #12]
 800f8a6:	60b9      	str	r1, [r7, #8]
 800f8a8:	4611      	mov	r1, r2
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	80fb      	strh	r3, [r7, #6]
 800f8b0:	4613      	mov	r3, r2
 800f8b2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d001      	beq.n	800f8c2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f8c2:	7979      	ldrb	r1, [r7, #5]
 800f8c4:	7e3b      	ldrb	r3, [r7, #24]
 800f8c6:	9303      	str	r3, [sp, #12]
 800f8c8:	88fb      	ldrh	r3, [r7, #6]
 800f8ca:	9302      	str	r3, [sp, #8]
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	9301      	str	r3, [sp, #4]
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	2302      	movs	r3, #2
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f000 fb3a 	bl	800ff52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b088      	sub	sp, #32
 800f8ec:	af04      	add	r7, sp, #16
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	4611      	mov	r1, r2
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	80fb      	strh	r3, [r7, #6]
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800f8fe:	7979      	ldrb	r1, [r7, #5]
 800f900:	2300      	movs	r3, #0
 800f902:	9303      	str	r3, [sp, #12]
 800f904:	88fb      	ldrh	r3, [r7, #6]
 800f906:	9302      	str	r3, [sp, #8]
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	9301      	str	r3, [sp, #4]
 800f90c:	2301      	movs	r3, #1
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	2302      	movs	r3, #2
 800f912:	2201      	movs	r2, #1
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f000 fb1c 	bl	800ff52 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800f91a:	2300      	movs	r3, #0
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af04      	add	r7, sp, #16
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	4608      	mov	r0, r1
 800f92e:	4611      	mov	r1, r2
 800f930:	461a      	mov	r2, r3
 800f932:	4603      	mov	r3, r0
 800f934:	70fb      	strb	r3, [r7, #3]
 800f936:	460b      	mov	r3, r1
 800f938:	70bb      	strb	r3, [r7, #2]
 800f93a:	4613      	mov	r3, r2
 800f93c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f93e:	7878      	ldrb	r0, [r7, #1]
 800f940:	78ba      	ldrb	r2, [r7, #2]
 800f942:	78f9      	ldrb	r1, [r7, #3]
 800f944:	8b3b      	ldrh	r3, [r7, #24]
 800f946:	9302      	str	r3, [sp, #8]
 800f948:	7d3b      	ldrb	r3, [r7, #20]
 800f94a:	9301      	str	r3, [sp, #4]
 800f94c:	7c3b      	ldrb	r3, [r7, #16]
 800f94e:	9300      	str	r3, [sp, #0]
 800f950:	4603      	mov	r3, r0
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	f000 faaf 	bl	800feb6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f958:	2300      	movs	r3, #0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3708      	adds	r7, #8
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}

0800f962 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f962:	b580      	push	{r7, lr}
 800f964:	b082      	sub	sp, #8
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
 800f96a:	460b      	mov	r3, r1
 800f96c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f96e:	78fb      	ldrb	r3, [r7, #3]
 800f970:	4619      	mov	r1, r3
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 face 	bl	800ff14 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f978:	2300      	movs	r3, #0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}

0800f982 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b084      	sub	sp, #16
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
 800f98a:	460b      	mov	r3, r1
 800f98c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f000 f836 	bl	800fa00 <USBH_GetFreePipe>
 800f994:	4603      	mov	r3, r0
 800f996:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f998:	89fb      	ldrh	r3, [r7, #14]
 800f99a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d00a      	beq.n	800f9b8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f9a2:	78fa      	ldrb	r2, [r7, #3]
 800f9a4:	89fb      	ldrh	r3, [r7, #14]
 800f9a6:	f003 030f 	and.w	r3, r3, #15
 800f9aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f9ae:	6879      	ldr	r1, [r7, #4]
 800f9b0:	33e0      	adds	r3, #224	@ 0xe0
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	440b      	add	r3, r1
 800f9b6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f9b8:	89fb      	ldrh	r3, [r7, #14]
 800f9ba:	b2db      	uxtb	r3, r3
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3710      	adds	r7, #16
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b083      	sub	sp, #12
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800f9d0:	78fb      	ldrb	r3, [r7, #3]
 800f9d2:	2b0f      	cmp	r3, #15
 800f9d4:	d80d      	bhi.n	800f9f2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f9d6:	78fb      	ldrb	r3, [r7, #3]
 800f9d8:	687a      	ldr	r2, [r7, #4]
 800f9da:	33e0      	adds	r3, #224	@ 0xe0
 800f9dc:	009b      	lsls	r3, r3, #2
 800f9de:	4413      	add	r3, r2
 800f9e0:	685a      	ldr	r2, [r3, #4]
 800f9e2:	78fb      	ldrb	r3, [r7, #3]
 800f9e4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f9e8:	6879      	ldr	r1, [r7, #4]
 800f9ea:	33e0      	adds	r3, #224	@ 0xe0
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	440b      	add	r3, r1
 800f9f0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f9f2:	2300      	movs	r3, #0
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	370c      	adds	r7, #12
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fe:	4770      	bx	lr

0800fa00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b085      	sub	sp, #20
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	73fb      	strb	r3, [r7, #15]
 800fa10:	e00f      	b.n	800fa32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800fa12:	7bfb      	ldrb	r3, [r7, #15]
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	33e0      	adds	r3, #224	@ 0xe0
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	4413      	add	r3, r2
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d102      	bne.n	800fa2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800fa26:	7bfb      	ldrb	r3, [r7, #15]
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	e007      	b.n	800fa3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	3301      	adds	r3, #1
 800fa30:	73fb      	strb	r3, [r7, #15]
 800fa32:	7bfb      	ldrb	r3, [r7, #15]
 800fa34:	2b0f      	cmp	r3, #15
 800fa36:	d9ec      	bls.n	800fa12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800fa38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3714      	adds	r7, #20
 800fa40:	46bd      	mov	sp, r7
 800fa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa46:	4770      	bx	lr

0800fa48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b087      	sub	sp, #28
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	4613      	mov	r3, r2
 800fa54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fa56:	2301      	movs	r3, #1
 800fa58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fa5e:	4b1f      	ldr	r3, [pc, #124]	@ (800fadc <FATFS_LinkDriverEx+0x94>)
 800fa60:	7a5b      	ldrb	r3, [r3, #9]
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d131      	bne.n	800facc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fa68:	4b1c      	ldr	r3, [pc, #112]	@ (800fadc <FATFS_LinkDriverEx+0x94>)
 800fa6a:	7a5b      	ldrb	r3, [r3, #9]
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	461a      	mov	r2, r3
 800fa70:	4b1a      	ldr	r3, [pc, #104]	@ (800fadc <FATFS_LinkDriverEx+0x94>)
 800fa72:	2100      	movs	r1, #0
 800fa74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fa76:	4b19      	ldr	r3, [pc, #100]	@ (800fadc <FATFS_LinkDriverEx+0x94>)
 800fa78:	7a5b      	ldrb	r3, [r3, #9]
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	4a17      	ldr	r2, [pc, #92]	@ (800fadc <FATFS_LinkDriverEx+0x94>)
 800fa7e:	009b      	lsls	r3, r3, #2
 800fa80:	4413      	add	r3, r2
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fa86:	4b15      	ldr	r3, [pc, #84]	@ (800fadc <FATFS_LinkDriverEx+0x94>)
 800fa88:	7a5b      	ldrb	r3, [r3, #9]
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	461a      	mov	r2, r3
 800fa8e:	4b13      	ldr	r3, [pc, #76]	@ (800fadc <FATFS_LinkDriverEx+0x94>)
 800fa90:	4413      	add	r3, r2
 800fa92:	79fa      	ldrb	r2, [r7, #7]
 800fa94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fa96:	4b11      	ldr	r3, [pc, #68]	@ (800fadc <FATFS_LinkDriverEx+0x94>)
 800fa98:	7a5b      	ldrb	r3, [r3, #9]
 800fa9a:	b2db      	uxtb	r3, r3
 800fa9c:	1c5a      	adds	r2, r3, #1
 800fa9e:	b2d1      	uxtb	r1, r2
 800faa0:	4a0e      	ldr	r2, [pc, #56]	@ (800fadc <FATFS_LinkDriverEx+0x94>)
 800faa2:	7251      	strb	r1, [r2, #9]
 800faa4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800faa6:	7dbb      	ldrb	r3, [r7, #22]
 800faa8:	3330      	adds	r3, #48	@ 0x30
 800faaa:	b2da      	uxtb	r2, r3
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	3301      	adds	r3, #1
 800fab4:	223a      	movs	r2, #58	@ 0x3a
 800fab6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	3302      	adds	r3, #2
 800fabc:	222f      	movs	r2, #47	@ 0x2f
 800fabe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	3303      	adds	r3, #3
 800fac4:	2200      	movs	r2, #0
 800fac6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fac8:	2300      	movs	r3, #0
 800faca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800facc:	7dfb      	ldrb	r3, [r7, #23]
}
 800face:	4618      	mov	r0, r3
 800fad0:	371c      	adds	r7, #28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	20000e98 	.word	0x20000e98

0800fae0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800faea:	2200      	movs	r2, #0
 800faec:	6839      	ldr	r1, [r7, #0]
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f7ff ffaa 	bl	800fa48 <FATFS_LinkDriverEx>
 800faf4:	4603      	mov	r3, r0
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3708      	adds	r7, #8
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
	...

0800fb00 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800fb04:	2201      	movs	r2, #1
 800fb06:	490e      	ldr	r1, [pc, #56]	@ (800fb40 <MX_USB_HOST_Init+0x40>)
 800fb08:	480e      	ldr	r0, [pc, #56]	@ (800fb44 <MX_USB_HOST_Init+0x44>)
 800fb0a:	f7fe fab9 	bl	800e080 <USBH_Init>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d001      	beq.n	800fb18 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800fb14:	f7f1 fdea 	bl	80016ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800fb18:	490b      	ldr	r1, [pc, #44]	@ (800fb48 <MX_USB_HOST_Init+0x48>)
 800fb1a:	480a      	ldr	r0, [pc, #40]	@ (800fb44 <MX_USB_HOST_Init+0x44>)
 800fb1c:	f7fe fb5d 	bl	800e1da <USBH_RegisterClass>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d001      	beq.n	800fb2a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800fb26:	f7f1 fde1 	bl	80016ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800fb2a:	4806      	ldr	r0, [pc, #24]	@ (800fb44 <MX_USB_HOST_Init+0x44>)
 800fb2c:	f7fe fbe1 	bl	800e2f2 <USBH_Start>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800fb36:	f7f1 fdd9 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800fb3a:	bf00      	nop
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop
 800fb40:	0800fb61 	.word	0x0800fb61
 800fb44:	20000ea4 	.word	0x20000ea4
 800fb48:	20000010 	.word	0x20000010

0800fb4c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800fb50:	4802      	ldr	r0, [pc, #8]	@ (800fb5c <MX_USB_HOST_Process+0x10>)
 800fb52:	f7fe fbdf 	bl	800e314 <USBH_Process>
}
 800fb56:	bf00      	nop
 800fb58:	bd80      	pop	{r7, pc}
 800fb5a:	bf00      	nop
 800fb5c:	20000ea4 	.word	0x20000ea4

0800fb60 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	460b      	mov	r3, r1
 800fb6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800fb6c:	78fb      	ldrb	r3, [r7, #3]
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	2b04      	cmp	r3, #4
 800fb72:	d819      	bhi.n	800fba8 <USBH_UserProcess+0x48>
 800fb74:	a201      	add	r2, pc, #4	@ (adr r2, 800fb7c <USBH_UserProcess+0x1c>)
 800fb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb7a:	bf00      	nop
 800fb7c:	0800fba9 	.word	0x0800fba9
 800fb80:	0800fb99 	.word	0x0800fb99
 800fb84:	0800fba9 	.word	0x0800fba9
 800fb88:	0800fba1 	.word	0x0800fba1
 800fb8c:	0800fb91 	.word	0x0800fb91
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800fb90:	4b09      	ldr	r3, [pc, #36]	@ (800fbb8 <USBH_UserProcess+0x58>)
 800fb92:	2203      	movs	r2, #3
 800fb94:	701a      	strb	r2, [r3, #0]
  break;
 800fb96:	e008      	b.n	800fbaa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800fb98:	4b07      	ldr	r3, [pc, #28]	@ (800fbb8 <USBH_UserProcess+0x58>)
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	701a      	strb	r2, [r3, #0]
  break;
 800fb9e:	e004      	b.n	800fbaa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800fba0:	4b05      	ldr	r3, [pc, #20]	@ (800fbb8 <USBH_UserProcess+0x58>)
 800fba2:	2201      	movs	r2, #1
 800fba4:	701a      	strb	r2, [r3, #0]
  break;
 800fba6:	e000      	b.n	800fbaa <USBH_UserProcess+0x4a>

  default:
  break;
 800fba8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800fbaa:	bf00      	nop
 800fbac:	370c      	adds	r7, #12
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr
 800fbb6:	bf00      	nop
 800fbb8:	2000127c 	.word	0x2000127c

0800fbbc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b08a      	sub	sp, #40	@ 0x28
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fbc4:	f107 0314 	add.w	r3, r7, #20
 800fbc8:	2200      	movs	r2, #0
 800fbca:	601a      	str	r2, [r3, #0]
 800fbcc:	605a      	str	r2, [r3, #4]
 800fbce:	609a      	str	r2, [r3, #8]
 800fbd0:	60da      	str	r2, [r3, #12]
 800fbd2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fbdc:	d147      	bne.n	800fc6e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbde:	2300      	movs	r3, #0
 800fbe0:	613b      	str	r3, [r7, #16]
 800fbe2:	4b25      	ldr	r3, [pc, #148]	@ (800fc78 <HAL_HCD_MspInit+0xbc>)
 800fbe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbe6:	4a24      	ldr	r2, [pc, #144]	@ (800fc78 <HAL_HCD_MspInit+0xbc>)
 800fbe8:	f043 0301 	orr.w	r3, r3, #1
 800fbec:	6313      	str	r3, [r2, #48]	@ 0x30
 800fbee:	4b22      	ldr	r3, [pc, #136]	@ (800fc78 <HAL_HCD_MspInit+0xbc>)
 800fbf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbf2:	f003 0301 	and.w	r3, r3, #1
 800fbf6:	613b      	str	r3, [r7, #16]
 800fbf8:	693b      	ldr	r3, [r7, #16]
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    PA9     ------> USB_OTG_FS_VBUS
    */
    GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800fbfa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800fbfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc00:	2302      	movs	r3, #2
 800fc02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc04:	2300      	movs	r3, #0
 800fc06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fc08:	2303      	movs	r3, #3
 800fc0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fc0c:	230a      	movs	r3, #10
 800fc0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc10:	f107 0314 	add.w	r3, r7, #20
 800fc14:	4619      	mov	r1, r3
 800fc16:	4819      	ldr	r0, [pc, #100]	@ (800fc7c <HAL_HCD_MspInit+0xc0>)
 800fc18:	f7f4 f906 	bl	8003e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 800fc1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc22:	2302      	movs	r3, #2
 800fc24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc26:	2300      	movs	r3, #0
 800fc28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 800fc2a:	f107 0314 	add.w	r3, r7, #20
 800fc2e:	4619      	mov	r1, r3
 800fc30:	4812      	ldr	r0, [pc, #72]	@ (800fc7c <HAL_HCD_MspInit+0xc0>)
 800fc32:	f7f4 f8f9 	bl	8003e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc36:	4b10      	ldr	r3, [pc, #64]	@ (800fc78 <HAL_HCD_MspInit+0xbc>)
 800fc38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc3a:	4a0f      	ldr	r2, [pc, #60]	@ (800fc78 <HAL_HCD_MspInit+0xbc>)
 800fc3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc40:	6353      	str	r3, [r2, #52]	@ 0x34
 800fc42:	2300      	movs	r3, #0
 800fc44:	60fb      	str	r3, [r7, #12]
 800fc46:	4b0c      	ldr	r3, [pc, #48]	@ (800fc78 <HAL_HCD_MspInit+0xbc>)
 800fc48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc4a:	4a0b      	ldr	r2, [pc, #44]	@ (800fc78 <HAL_HCD_MspInit+0xbc>)
 800fc4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800fc50:	6453      	str	r3, [r2, #68]	@ 0x44
 800fc52:	4b09      	ldr	r3, [pc, #36]	@ (800fc78 <HAL_HCD_MspInit+0xbc>)
 800fc54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fc5a:	60fb      	str	r3, [r7, #12]
 800fc5c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fc5e:	2200      	movs	r2, #0
 800fc60:	2100      	movs	r1, #0
 800fc62:	2043      	movs	r0, #67	@ 0x43
 800fc64:	f7f2 fca4 	bl	80025b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fc68:	2043      	movs	r0, #67	@ 0x43
 800fc6a:	f7f2 fcbd 	bl	80025e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fc6e:	bf00      	nop
 800fc70:	3728      	adds	r7, #40	@ 0x28
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	40023800 	.word	0x40023800
 800fc7c:	40020000 	.word	0x40020000

0800fc80 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fe ff17 	bl	800eac2 <USBH_LL_IncTimer>
}
 800fc94:	bf00      	nop
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}

0800fc9c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b082      	sub	sp, #8
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fe ff4f 	bl	800eb4e <USBH_LL_Connect>
}
 800fcb0:	bf00      	nop
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}

0800fcb8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fe ff58 	bl	800eb7c <USBH_LL_Disconnect>
}
 800fccc:	bf00      	nop
 800fcce:	3708      	adds	r7, #8
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}

0800fcd4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	460b      	mov	r3, r1
 800fcde:	70fb      	strb	r3, [r7, #3]
 800fce0:	4613      	mov	r3, r2
 800fce2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800fce4:	bf00      	nop
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7fe ff09 	bl	800eb16 <USBH_LL_PortEnabled>
}
 800fd04:	bf00      	nop
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fe ff09 	bl	800eb32 <USBH_LL_PortDisabled>
}
 800fd20:	bf00      	nop
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d12a      	bne.n	800fd90 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800fd3a:	4a18      	ldr	r2, [pc, #96]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4a15      	ldr	r2, [pc, #84]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd46:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fd4a:	4b14      	ldr	r3, [pc, #80]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800fd50:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800fd52:	4b12      	ldr	r3, [pc, #72]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd54:	2208      	movs	r2, #8
 800fd56:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800fd58:	4b10      	ldr	r3, [pc, #64]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fd5e:	4b0f      	ldr	r3, [pc, #60]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800fd64:	4b0d      	ldr	r3, [pc, #52]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd66:	2202      	movs	r2, #2
 800fd68:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800fd6a:	4b0c      	ldr	r3, [pc, #48]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800fd70:	480a      	ldr	r0, [pc, #40]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd72:	f7f4 fa36 	bl	80041e2 <HAL_HCD_Init>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800fd7c:	f7f1 fcb6 	bl	80016ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800fd80:	4806      	ldr	r0, [pc, #24]	@ (800fd9c <USBH_LL_Init+0x74>)
 800fd82:	f7f4 fe97 	bl	8004ab4 <HAL_HCD_GetCurrentFrame>
 800fd86:	4603      	mov	r3, r0
 800fd88:	4619      	mov	r1, r3
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f7fe fe8a 	bl	800eaa4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	20001280 	.word	0x20001280

0800fda0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b084      	sub	sp, #16
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fdac:	2300      	movs	r3, #0
 800fdae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7f4 fe04 	bl	80049c4 <HAL_HCD_Start>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fdc0:	7bfb      	ldrb	r3, [r7, #15]
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f000 f95e 	bl	8010084 <USBH_Get_USB_Status>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fdcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800fdce:	4618      	mov	r0, r3
 800fdd0:	3710      	adds	r7, #16
 800fdd2:	46bd      	mov	sp, r7
 800fdd4:	bd80      	pop	{r7, pc}

0800fdd6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800fdd6:	b580      	push	{r7, lr}
 800fdd8:	b084      	sub	sp, #16
 800fdda:	af00      	add	r7, sp, #0
 800fddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdde:	2300      	movs	r3, #0
 800fde0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7f4 fe0c 	bl	8004a0a <HAL_HCD_Stop>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fdf6:	7bfb      	ldrb	r3, [r7, #15]
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f000 f943 	bl	8010084 <USBH_Get_USB_Status>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe02:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3710      	adds	r7, #16
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}

0800fe0c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800fe14:	2301      	movs	r3, #1
 800fe16:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7f4 fe56 	bl	8004ad0 <HAL_HCD_GetCurrentSpeed>
 800fe24:	4603      	mov	r3, r0
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	d00c      	beq.n	800fe44 <USBH_LL_GetSpeed+0x38>
 800fe2a:	2b02      	cmp	r3, #2
 800fe2c:	d80d      	bhi.n	800fe4a <USBH_LL_GetSpeed+0x3e>
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d002      	beq.n	800fe38 <USBH_LL_GetSpeed+0x2c>
 800fe32:	2b01      	cmp	r3, #1
 800fe34:	d003      	beq.n	800fe3e <USBH_LL_GetSpeed+0x32>
 800fe36:	e008      	b.n	800fe4a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	73fb      	strb	r3, [r7, #15]
    break;
 800fe3c:	e008      	b.n	800fe50 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800fe3e:	2301      	movs	r3, #1
 800fe40:	73fb      	strb	r3, [r7, #15]
    break;
 800fe42:	e005      	b.n	800fe50 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800fe44:	2302      	movs	r3, #2
 800fe46:	73fb      	strb	r3, [r7, #15]
    break;
 800fe48:	e002      	b.n	800fe50 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	73fb      	strb	r3, [r7, #15]
    break;
 800fe4e:	bf00      	nop
  }
  return  speed;
 800fe50:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}

0800fe5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800fe5a:	b580      	push	{r7, lr}
 800fe5c:	b084      	sub	sp, #16
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe62:	2300      	movs	r3, #0
 800fe64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7f4 fde7 	bl	8004a44 <HAL_HCD_ResetPort>
 800fe76:	4603      	mov	r3, r0
 800fe78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800fe7a:	7bfb      	ldrb	r3, [r7, #15]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f000 f901 	bl	8010084 <USBH_Get_USB_Status>
 800fe82:	4603      	mov	r3, r0
 800fe84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fe86:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800fea2:	78fa      	ldrb	r2, [r7, #3]
 800fea4:	4611      	mov	r1, r2
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7f4 fdef 	bl	8004a8a <HAL_HCD_HC_GetXferCount>
 800feac:	4603      	mov	r3, r0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3708      	adds	r7, #8
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}

0800feb6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800feb6:	b590      	push	{r4, r7, lr}
 800feb8:	b089      	sub	sp, #36	@ 0x24
 800feba:	af04      	add	r7, sp, #16
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	4608      	mov	r0, r1
 800fec0:	4611      	mov	r1, r2
 800fec2:	461a      	mov	r2, r3
 800fec4:	4603      	mov	r3, r0
 800fec6:	70fb      	strb	r3, [r7, #3]
 800fec8:	460b      	mov	r3, r1
 800feca:	70bb      	strb	r3, [r7, #2]
 800fecc:	4613      	mov	r3, r2
 800fece:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fed0:	2300      	movs	r3, #0
 800fed2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800fed4:	2300      	movs	r3, #0
 800fed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800fede:	787c      	ldrb	r4, [r7, #1]
 800fee0:	78ba      	ldrb	r2, [r7, #2]
 800fee2:	78f9      	ldrb	r1, [r7, #3]
 800fee4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800fee6:	9302      	str	r3, [sp, #8]
 800fee8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800feec:	9301      	str	r3, [sp, #4]
 800feee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	4623      	mov	r3, r4
 800fef6:	f7f4 f9db 	bl	80042b0 <HAL_HCD_HC_Init>
 800fefa:	4603      	mov	r3, r0
 800fefc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800fefe:	7bfb      	ldrb	r3, [r7, #15]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f000 f8bf 	bl	8010084 <USBH_Get_USB_Status>
 800ff06:	4603      	mov	r3, r0
 800ff08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3714      	adds	r7, #20
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd90      	pop	{r4, r7, pc}

0800ff14 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff20:	2300      	movs	r3, #0
 800ff22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff24:	2300      	movs	r3, #0
 800ff26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ff2e:	78fa      	ldrb	r2, [r7, #3]
 800ff30:	4611      	mov	r1, r2
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7f4 fa74 	bl	8004420 <HAL_HCD_HC_Halt>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ff3c:	7bfb      	ldrb	r3, [r7, #15]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f000 f8a0 	bl	8010084 <USBH_Get_USB_Status>
 800ff44:	4603      	mov	r3, r0
 800ff46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3710      	adds	r7, #16
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ff52:	b590      	push	{r4, r7, lr}
 800ff54:	b089      	sub	sp, #36	@ 0x24
 800ff56:	af04      	add	r7, sp, #16
 800ff58:	6078      	str	r0, [r7, #4]
 800ff5a:	4608      	mov	r0, r1
 800ff5c:	4611      	mov	r1, r2
 800ff5e:	461a      	mov	r2, r3
 800ff60:	4603      	mov	r3, r0
 800ff62:	70fb      	strb	r3, [r7, #3]
 800ff64:	460b      	mov	r3, r1
 800ff66:	70bb      	strb	r3, [r7, #2]
 800ff68:	4613      	mov	r3, r2
 800ff6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ff70:	2300      	movs	r3, #0
 800ff72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ff7a:	787c      	ldrb	r4, [r7, #1]
 800ff7c:	78ba      	ldrb	r2, [r7, #2]
 800ff7e:	78f9      	ldrb	r1, [r7, #3]
 800ff80:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ff84:	9303      	str	r3, [sp, #12]
 800ff86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ff88:	9302      	str	r3, [sp, #8]
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8c:	9301      	str	r3, [sp, #4]
 800ff8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	4623      	mov	r3, r4
 800ff96:	f7f4 fa67 	bl	8004468 <HAL_HCD_HC_SubmitRequest>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ff9e:	7bfb      	ldrb	r3, [r7, #15]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f000 f86f 	bl	8010084 <USBH_Get_USB_Status>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffac:	4618      	mov	r0, r3
 800ffae:	3714      	adds	r7, #20
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bd90      	pop	{r4, r7, pc}

0800ffb4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b082      	sub	sp, #8
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ffc6:	78fa      	ldrb	r2, [r7, #3]
 800ffc8:	4611      	mov	r1, r2
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7f4 fd48 	bl	8004a60 <HAL_HCD_HC_GetURBState>
 800ffd0:	4603      	mov	r3, r0
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3708      	adds	r7, #8
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}

0800ffda <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ffda:	b580      	push	{r7, lr}
 800ffdc:	b082      	sub	sp, #8
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d103      	bne.n	800fff8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800fff0:	78fb      	ldrb	r3, [r7, #3]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 f872 	bl	80100dc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800fff8:	20c8      	movs	r0, #200	@ 0xc8
 800fffa:	f7f2 f9fd 	bl	80023f8 <HAL_Delay>
  return USBH_OK;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010008:	b480      	push	{r7}
 801000a:	b085      	sub	sp, #20
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	460b      	mov	r3, r1
 8010012:	70fb      	strb	r3, [r7, #3]
 8010014:	4613      	mov	r3, r2
 8010016:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801001e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010020:	78fa      	ldrb	r2, [r7, #3]
 8010022:	68f9      	ldr	r1, [r7, #12]
 8010024:	4613      	mov	r3, r2
 8010026:	011b      	lsls	r3, r3, #4
 8010028:	1a9b      	subs	r3, r3, r2
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	440b      	add	r3, r1
 801002e:	3317      	adds	r3, #23
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00a      	beq.n	801004c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010036:	78fa      	ldrb	r2, [r7, #3]
 8010038:	68f9      	ldr	r1, [r7, #12]
 801003a:	4613      	mov	r3, r2
 801003c:	011b      	lsls	r3, r3, #4
 801003e:	1a9b      	subs	r3, r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	440b      	add	r3, r1
 8010044:	333c      	adds	r3, #60	@ 0x3c
 8010046:	78ba      	ldrb	r2, [r7, #2]
 8010048:	701a      	strb	r2, [r3, #0]
 801004a:	e009      	b.n	8010060 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801004c:	78fa      	ldrb	r2, [r7, #3]
 801004e:	68f9      	ldr	r1, [r7, #12]
 8010050:	4613      	mov	r3, r2
 8010052:	011b      	lsls	r3, r3, #4
 8010054:	1a9b      	subs	r3, r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	440b      	add	r3, r1
 801005a:	333d      	adds	r3, #61	@ 0x3d
 801005c:	78ba      	ldrb	r2, [r7, #2]
 801005e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b082      	sub	sp, #8
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f7f2 f9be 	bl	80023f8 <HAL_Delay>
}
 801007c:	bf00      	nop
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010084:	b480      	push	{r7}
 8010086:	b085      	sub	sp, #20
 8010088:	af00      	add	r7, sp, #0
 801008a:	4603      	mov	r3, r0
 801008c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801008e:	2300      	movs	r3, #0
 8010090:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010092:	79fb      	ldrb	r3, [r7, #7]
 8010094:	2b03      	cmp	r3, #3
 8010096:	d817      	bhi.n	80100c8 <USBH_Get_USB_Status+0x44>
 8010098:	a201      	add	r2, pc, #4	@ (adr r2, 80100a0 <USBH_Get_USB_Status+0x1c>)
 801009a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801009e:	bf00      	nop
 80100a0:	080100b1 	.word	0x080100b1
 80100a4:	080100b7 	.word	0x080100b7
 80100a8:	080100bd 	.word	0x080100bd
 80100ac:	080100c3 	.word	0x080100c3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80100b0:	2300      	movs	r3, #0
 80100b2:	73fb      	strb	r3, [r7, #15]
    break;
 80100b4:	e00b      	b.n	80100ce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80100b6:	2302      	movs	r3, #2
 80100b8:	73fb      	strb	r3, [r7, #15]
    break;
 80100ba:	e008      	b.n	80100ce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80100bc:	2301      	movs	r3, #1
 80100be:	73fb      	strb	r3, [r7, #15]
    break;
 80100c0:	e005      	b.n	80100ce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80100c2:	2302      	movs	r3, #2
 80100c4:	73fb      	strb	r3, [r7, #15]
    break;
 80100c6:	e002      	b.n	80100ce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80100c8:	2302      	movs	r3, #2
 80100ca:	73fb      	strb	r3, [r7, #15]
    break;
 80100cc:	bf00      	nop
  }
  return usb_status;
 80100ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr

080100dc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b084      	sub	sp, #16
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	4603      	mov	r3, r0
 80100e4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80100e6:	79fb      	ldrb	r3, [r7, #7]
 80100e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80100ea:	79fb      	ldrb	r3, [r7, #7]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d102      	bne.n	80100f6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80100f0:	2300      	movs	r3, #0
 80100f2:	73fb      	strb	r3, [r7, #15]
 80100f4:	e001      	b.n	80100fa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80100f6:	2301      	movs	r3, #1
 80100f8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,(GPIO_PinState)data);
 80100fa:	7bfb      	ldrb	r3, [r7, #15]
 80100fc:	461a      	mov	r2, r3
 80100fe:	2104      	movs	r1, #4
 8010100:	4803      	ldr	r0, [pc, #12]	@ (8010110 <MX_DriverVbusFS+0x34>)
 8010102:	f7f4 f855 	bl	80041b0 <HAL_GPIO_WritePin>
}
 8010106:	bf00      	nop
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	40020400 	.word	0x40020400

08010114 <malloc>:
 8010114:	4b02      	ldr	r3, [pc, #8]	@ (8010120 <malloc+0xc>)
 8010116:	4601      	mov	r1, r0
 8010118:	6818      	ldr	r0, [r3, #0]
 801011a:	f000 b82d 	b.w	8010178 <_malloc_r>
 801011e:	bf00      	nop
 8010120:	20000030 	.word	0x20000030

08010124 <free>:
 8010124:	4b02      	ldr	r3, [pc, #8]	@ (8010130 <free+0xc>)
 8010126:	4601      	mov	r1, r0
 8010128:	6818      	ldr	r0, [r3, #0]
 801012a:	f000 b973 	b.w	8010414 <_free_r>
 801012e:	bf00      	nop
 8010130:	20000030 	.word	0x20000030

08010134 <sbrk_aligned>:
 8010134:	b570      	push	{r4, r5, r6, lr}
 8010136:	4e0f      	ldr	r6, [pc, #60]	@ (8010174 <sbrk_aligned+0x40>)
 8010138:	460c      	mov	r4, r1
 801013a:	6831      	ldr	r1, [r6, #0]
 801013c:	4605      	mov	r5, r0
 801013e:	b911      	cbnz	r1, 8010146 <sbrk_aligned+0x12>
 8010140:	f000 f92c 	bl	801039c <_sbrk_r>
 8010144:	6030      	str	r0, [r6, #0]
 8010146:	4621      	mov	r1, r4
 8010148:	4628      	mov	r0, r5
 801014a:	f000 f927 	bl	801039c <_sbrk_r>
 801014e:	1c43      	adds	r3, r0, #1
 8010150:	d103      	bne.n	801015a <sbrk_aligned+0x26>
 8010152:	f04f 34ff 	mov.w	r4, #4294967295
 8010156:	4620      	mov	r0, r4
 8010158:	bd70      	pop	{r4, r5, r6, pc}
 801015a:	1cc4      	adds	r4, r0, #3
 801015c:	f024 0403 	bic.w	r4, r4, #3
 8010160:	42a0      	cmp	r0, r4
 8010162:	d0f8      	beq.n	8010156 <sbrk_aligned+0x22>
 8010164:	1a21      	subs	r1, r4, r0
 8010166:	4628      	mov	r0, r5
 8010168:	f000 f918 	bl	801039c <_sbrk_r>
 801016c:	3001      	adds	r0, #1
 801016e:	d1f2      	bne.n	8010156 <sbrk_aligned+0x22>
 8010170:	e7ef      	b.n	8010152 <sbrk_aligned+0x1e>
 8010172:	bf00      	nop
 8010174:	20001660 	.word	0x20001660

08010178 <_malloc_r>:
 8010178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801017c:	1ccd      	adds	r5, r1, #3
 801017e:	f025 0503 	bic.w	r5, r5, #3
 8010182:	3508      	adds	r5, #8
 8010184:	2d0c      	cmp	r5, #12
 8010186:	bf38      	it	cc
 8010188:	250c      	movcc	r5, #12
 801018a:	2d00      	cmp	r5, #0
 801018c:	4606      	mov	r6, r0
 801018e:	db01      	blt.n	8010194 <_malloc_r+0x1c>
 8010190:	42a9      	cmp	r1, r5
 8010192:	d904      	bls.n	801019e <_malloc_r+0x26>
 8010194:	230c      	movs	r3, #12
 8010196:	6033      	str	r3, [r6, #0]
 8010198:	2000      	movs	r0, #0
 801019a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801019e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010274 <_malloc_r+0xfc>
 80101a2:	f000 f869 	bl	8010278 <__malloc_lock>
 80101a6:	f8d8 3000 	ldr.w	r3, [r8]
 80101aa:	461c      	mov	r4, r3
 80101ac:	bb44      	cbnz	r4, 8010200 <_malloc_r+0x88>
 80101ae:	4629      	mov	r1, r5
 80101b0:	4630      	mov	r0, r6
 80101b2:	f7ff ffbf 	bl	8010134 <sbrk_aligned>
 80101b6:	1c43      	adds	r3, r0, #1
 80101b8:	4604      	mov	r4, r0
 80101ba:	d158      	bne.n	801026e <_malloc_r+0xf6>
 80101bc:	f8d8 4000 	ldr.w	r4, [r8]
 80101c0:	4627      	mov	r7, r4
 80101c2:	2f00      	cmp	r7, #0
 80101c4:	d143      	bne.n	801024e <_malloc_r+0xd6>
 80101c6:	2c00      	cmp	r4, #0
 80101c8:	d04b      	beq.n	8010262 <_malloc_r+0xea>
 80101ca:	6823      	ldr	r3, [r4, #0]
 80101cc:	4639      	mov	r1, r7
 80101ce:	4630      	mov	r0, r6
 80101d0:	eb04 0903 	add.w	r9, r4, r3
 80101d4:	f000 f8e2 	bl	801039c <_sbrk_r>
 80101d8:	4581      	cmp	r9, r0
 80101da:	d142      	bne.n	8010262 <_malloc_r+0xea>
 80101dc:	6821      	ldr	r1, [r4, #0]
 80101de:	1a6d      	subs	r5, r5, r1
 80101e0:	4629      	mov	r1, r5
 80101e2:	4630      	mov	r0, r6
 80101e4:	f7ff ffa6 	bl	8010134 <sbrk_aligned>
 80101e8:	3001      	adds	r0, #1
 80101ea:	d03a      	beq.n	8010262 <_malloc_r+0xea>
 80101ec:	6823      	ldr	r3, [r4, #0]
 80101ee:	442b      	add	r3, r5
 80101f0:	6023      	str	r3, [r4, #0]
 80101f2:	f8d8 3000 	ldr.w	r3, [r8]
 80101f6:	685a      	ldr	r2, [r3, #4]
 80101f8:	bb62      	cbnz	r2, 8010254 <_malloc_r+0xdc>
 80101fa:	f8c8 7000 	str.w	r7, [r8]
 80101fe:	e00f      	b.n	8010220 <_malloc_r+0xa8>
 8010200:	6822      	ldr	r2, [r4, #0]
 8010202:	1b52      	subs	r2, r2, r5
 8010204:	d420      	bmi.n	8010248 <_malloc_r+0xd0>
 8010206:	2a0b      	cmp	r2, #11
 8010208:	d917      	bls.n	801023a <_malloc_r+0xc2>
 801020a:	1961      	adds	r1, r4, r5
 801020c:	42a3      	cmp	r3, r4
 801020e:	6025      	str	r5, [r4, #0]
 8010210:	bf18      	it	ne
 8010212:	6059      	strne	r1, [r3, #4]
 8010214:	6863      	ldr	r3, [r4, #4]
 8010216:	bf08      	it	eq
 8010218:	f8c8 1000 	streq.w	r1, [r8]
 801021c:	5162      	str	r2, [r4, r5]
 801021e:	604b      	str	r3, [r1, #4]
 8010220:	4630      	mov	r0, r6
 8010222:	f000 f82f 	bl	8010284 <__malloc_unlock>
 8010226:	f104 000b 	add.w	r0, r4, #11
 801022a:	1d23      	adds	r3, r4, #4
 801022c:	f020 0007 	bic.w	r0, r0, #7
 8010230:	1ac2      	subs	r2, r0, r3
 8010232:	bf1c      	itt	ne
 8010234:	1a1b      	subne	r3, r3, r0
 8010236:	50a3      	strne	r3, [r4, r2]
 8010238:	e7af      	b.n	801019a <_malloc_r+0x22>
 801023a:	6862      	ldr	r2, [r4, #4]
 801023c:	42a3      	cmp	r3, r4
 801023e:	bf0c      	ite	eq
 8010240:	f8c8 2000 	streq.w	r2, [r8]
 8010244:	605a      	strne	r2, [r3, #4]
 8010246:	e7eb      	b.n	8010220 <_malloc_r+0xa8>
 8010248:	4623      	mov	r3, r4
 801024a:	6864      	ldr	r4, [r4, #4]
 801024c:	e7ae      	b.n	80101ac <_malloc_r+0x34>
 801024e:	463c      	mov	r4, r7
 8010250:	687f      	ldr	r7, [r7, #4]
 8010252:	e7b6      	b.n	80101c2 <_malloc_r+0x4a>
 8010254:	461a      	mov	r2, r3
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	42a3      	cmp	r3, r4
 801025a:	d1fb      	bne.n	8010254 <_malloc_r+0xdc>
 801025c:	2300      	movs	r3, #0
 801025e:	6053      	str	r3, [r2, #4]
 8010260:	e7de      	b.n	8010220 <_malloc_r+0xa8>
 8010262:	230c      	movs	r3, #12
 8010264:	6033      	str	r3, [r6, #0]
 8010266:	4630      	mov	r0, r6
 8010268:	f000 f80c 	bl	8010284 <__malloc_unlock>
 801026c:	e794      	b.n	8010198 <_malloc_r+0x20>
 801026e:	6005      	str	r5, [r0, #0]
 8010270:	e7d6      	b.n	8010220 <_malloc_r+0xa8>
 8010272:	bf00      	nop
 8010274:	20001664 	.word	0x20001664

08010278 <__malloc_lock>:
 8010278:	4801      	ldr	r0, [pc, #4]	@ (8010280 <__malloc_lock+0x8>)
 801027a:	f000 b8c9 	b.w	8010410 <__retarget_lock_acquire_recursive>
 801027e:	bf00      	nop
 8010280:	200017a4 	.word	0x200017a4

08010284 <__malloc_unlock>:
 8010284:	4801      	ldr	r0, [pc, #4]	@ (801028c <__malloc_unlock+0x8>)
 8010286:	f000 b8c4 	b.w	8010412 <__retarget_lock_release_recursive>
 801028a:	bf00      	nop
 801028c:	200017a4 	.word	0x200017a4

08010290 <sniprintf>:
 8010290:	b40c      	push	{r2, r3}
 8010292:	b530      	push	{r4, r5, lr}
 8010294:	4b17      	ldr	r3, [pc, #92]	@ (80102f4 <sniprintf+0x64>)
 8010296:	1e0c      	subs	r4, r1, #0
 8010298:	681d      	ldr	r5, [r3, #0]
 801029a:	b09d      	sub	sp, #116	@ 0x74
 801029c:	da08      	bge.n	80102b0 <sniprintf+0x20>
 801029e:	238b      	movs	r3, #139	@ 0x8b
 80102a0:	602b      	str	r3, [r5, #0]
 80102a2:	f04f 30ff 	mov.w	r0, #4294967295
 80102a6:	b01d      	add	sp, #116	@ 0x74
 80102a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102ac:	b002      	add	sp, #8
 80102ae:	4770      	bx	lr
 80102b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80102b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80102b8:	bf14      	ite	ne
 80102ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80102be:	4623      	moveq	r3, r4
 80102c0:	9304      	str	r3, [sp, #16]
 80102c2:	9307      	str	r3, [sp, #28]
 80102c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80102c8:	9002      	str	r0, [sp, #8]
 80102ca:	9006      	str	r0, [sp, #24]
 80102cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80102d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80102d2:	ab21      	add	r3, sp, #132	@ 0x84
 80102d4:	a902      	add	r1, sp, #8
 80102d6:	4628      	mov	r0, r5
 80102d8:	9301      	str	r3, [sp, #4]
 80102da:	f000 f941 	bl	8010560 <_svfiprintf_r>
 80102de:	1c43      	adds	r3, r0, #1
 80102e0:	bfbc      	itt	lt
 80102e2:	238b      	movlt	r3, #139	@ 0x8b
 80102e4:	602b      	strlt	r3, [r5, #0]
 80102e6:	2c00      	cmp	r4, #0
 80102e8:	d0dd      	beq.n	80102a6 <sniprintf+0x16>
 80102ea:	9b02      	ldr	r3, [sp, #8]
 80102ec:	2200      	movs	r2, #0
 80102ee:	701a      	strb	r2, [r3, #0]
 80102f0:	e7d9      	b.n	80102a6 <sniprintf+0x16>
 80102f2:	bf00      	nop
 80102f4:	20000030 	.word	0x20000030

080102f8 <siprintf>:
 80102f8:	b40e      	push	{r1, r2, r3}
 80102fa:	b500      	push	{lr}
 80102fc:	b09c      	sub	sp, #112	@ 0x70
 80102fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8010300:	9002      	str	r0, [sp, #8]
 8010302:	9006      	str	r0, [sp, #24]
 8010304:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010308:	4809      	ldr	r0, [pc, #36]	@ (8010330 <siprintf+0x38>)
 801030a:	9107      	str	r1, [sp, #28]
 801030c:	9104      	str	r1, [sp, #16]
 801030e:	4909      	ldr	r1, [pc, #36]	@ (8010334 <siprintf+0x3c>)
 8010310:	f853 2b04 	ldr.w	r2, [r3], #4
 8010314:	9105      	str	r1, [sp, #20]
 8010316:	6800      	ldr	r0, [r0, #0]
 8010318:	9301      	str	r3, [sp, #4]
 801031a:	a902      	add	r1, sp, #8
 801031c:	f000 f920 	bl	8010560 <_svfiprintf_r>
 8010320:	9b02      	ldr	r3, [sp, #8]
 8010322:	2200      	movs	r2, #0
 8010324:	701a      	strb	r2, [r3, #0]
 8010326:	b01c      	add	sp, #112	@ 0x70
 8010328:	f85d eb04 	ldr.w	lr, [sp], #4
 801032c:	b003      	add	sp, #12
 801032e:	4770      	bx	lr
 8010330:	20000030 	.word	0x20000030
 8010334:	ffff0208 	.word	0xffff0208

08010338 <memset>:
 8010338:	4402      	add	r2, r0
 801033a:	4603      	mov	r3, r0
 801033c:	4293      	cmp	r3, r2
 801033e:	d100      	bne.n	8010342 <memset+0xa>
 8010340:	4770      	bx	lr
 8010342:	f803 1b01 	strb.w	r1, [r3], #1
 8010346:	e7f9      	b.n	801033c <memset+0x4>

08010348 <strncpy>:
 8010348:	b510      	push	{r4, lr}
 801034a:	3901      	subs	r1, #1
 801034c:	4603      	mov	r3, r0
 801034e:	b132      	cbz	r2, 801035e <strncpy+0x16>
 8010350:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010354:	f803 4b01 	strb.w	r4, [r3], #1
 8010358:	3a01      	subs	r2, #1
 801035a:	2c00      	cmp	r4, #0
 801035c:	d1f7      	bne.n	801034e <strncpy+0x6>
 801035e:	441a      	add	r2, r3
 8010360:	2100      	movs	r1, #0
 8010362:	4293      	cmp	r3, r2
 8010364:	d100      	bne.n	8010368 <strncpy+0x20>
 8010366:	bd10      	pop	{r4, pc}
 8010368:	f803 1b01 	strb.w	r1, [r3], #1
 801036c:	e7f9      	b.n	8010362 <strncpy+0x1a>

0801036e <strstr>:
 801036e:	780a      	ldrb	r2, [r1, #0]
 8010370:	b570      	push	{r4, r5, r6, lr}
 8010372:	b96a      	cbnz	r2, 8010390 <strstr+0x22>
 8010374:	bd70      	pop	{r4, r5, r6, pc}
 8010376:	429a      	cmp	r2, r3
 8010378:	d109      	bne.n	801038e <strstr+0x20>
 801037a:	460c      	mov	r4, r1
 801037c:	4605      	mov	r5, r0
 801037e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010382:	2b00      	cmp	r3, #0
 8010384:	d0f6      	beq.n	8010374 <strstr+0x6>
 8010386:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801038a:	429e      	cmp	r6, r3
 801038c:	d0f7      	beq.n	801037e <strstr+0x10>
 801038e:	3001      	adds	r0, #1
 8010390:	7803      	ldrb	r3, [r0, #0]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d1ef      	bne.n	8010376 <strstr+0x8>
 8010396:	4618      	mov	r0, r3
 8010398:	e7ec      	b.n	8010374 <strstr+0x6>
	...

0801039c <_sbrk_r>:
 801039c:	b538      	push	{r3, r4, r5, lr}
 801039e:	4d06      	ldr	r5, [pc, #24]	@ (80103b8 <_sbrk_r+0x1c>)
 80103a0:	2300      	movs	r3, #0
 80103a2:	4604      	mov	r4, r0
 80103a4:	4608      	mov	r0, r1
 80103a6:	602b      	str	r3, [r5, #0]
 80103a8:	f7f1 ff72 	bl	8002290 <_sbrk>
 80103ac:	1c43      	adds	r3, r0, #1
 80103ae:	d102      	bne.n	80103b6 <_sbrk_r+0x1a>
 80103b0:	682b      	ldr	r3, [r5, #0]
 80103b2:	b103      	cbz	r3, 80103b6 <_sbrk_r+0x1a>
 80103b4:	6023      	str	r3, [r4, #0]
 80103b6:	bd38      	pop	{r3, r4, r5, pc}
 80103b8:	200017a0 	.word	0x200017a0

080103bc <__errno>:
 80103bc:	4b01      	ldr	r3, [pc, #4]	@ (80103c4 <__errno+0x8>)
 80103be:	6818      	ldr	r0, [r3, #0]
 80103c0:	4770      	bx	lr
 80103c2:	bf00      	nop
 80103c4:	20000030 	.word	0x20000030

080103c8 <__libc_init_array>:
 80103c8:	b570      	push	{r4, r5, r6, lr}
 80103ca:	4d0d      	ldr	r5, [pc, #52]	@ (8010400 <__libc_init_array+0x38>)
 80103cc:	4c0d      	ldr	r4, [pc, #52]	@ (8010404 <__libc_init_array+0x3c>)
 80103ce:	1b64      	subs	r4, r4, r5
 80103d0:	10a4      	asrs	r4, r4, #2
 80103d2:	2600      	movs	r6, #0
 80103d4:	42a6      	cmp	r6, r4
 80103d6:	d109      	bne.n	80103ec <__libc_init_array+0x24>
 80103d8:	4d0b      	ldr	r5, [pc, #44]	@ (8010408 <__libc_init_array+0x40>)
 80103da:	4c0c      	ldr	r4, [pc, #48]	@ (801040c <__libc_init_array+0x44>)
 80103dc:	f000 fba8 	bl	8010b30 <_init>
 80103e0:	1b64      	subs	r4, r4, r5
 80103e2:	10a4      	asrs	r4, r4, #2
 80103e4:	2600      	movs	r6, #0
 80103e6:	42a6      	cmp	r6, r4
 80103e8:	d105      	bne.n	80103f6 <__libc_init_array+0x2e>
 80103ea:	bd70      	pop	{r4, r5, r6, pc}
 80103ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80103f0:	4798      	blx	r3
 80103f2:	3601      	adds	r6, #1
 80103f4:	e7ee      	b.n	80103d4 <__libc_init_array+0xc>
 80103f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80103fa:	4798      	blx	r3
 80103fc:	3601      	adds	r6, #1
 80103fe:	e7f2      	b.n	80103e6 <__libc_init_array+0x1e>
 8010400:	08010ee0 	.word	0x08010ee0
 8010404:	08010ee0 	.word	0x08010ee0
 8010408:	08010ee0 	.word	0x08010ee0
 801040c:	08010ee4 	.word	0x08010ee4

08010410 <__retarget_lock_acquire_recursive>:
 8010410:	4770      	bx	lr

08010412 <__retarget_lock_release_recursive>:
 8010412:	4770      	bx	lr

08010414 <_free_r>:
 8010414:	b538      	push	{r3, r4, r5, lr}
 8010416:	4605      	mov	r5, r0
 8010418:	2900      	cmp	r1, #0
 801041a:	d041      	beq.n	80104a0 <_free_r+0x8c>
 801041c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010420:	1f0c      	subs	r4, r1, #4
 8010422:	2b00      	cmp	r3, #0
 8010424:	bfb8      	it	lt
 8010426:	18e4      	addlt	r4, r4, r3
 8010428:	f7ff ff26 	bl	8010278 <__malloc_lock>
 801042c:	4a1d      	ldr	r2, [pc, #116]	@ (80104a4 <_free_r+0x90>)
 801042e:	6813      	ldr	r3, [r2, #0]
 8010430:	b933      	cbnz	r3, 8010440 <_free_r+0x2c>
 8010432:	6063      	str	r3, [r4, #4]
 8010434:	6014      	str	r4, [r2, #0]
 8010436:	4628      	mov	r0, r5
 8010438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801043c:	f7ff bf22 	b.w	8010284 <__malloc_unlock>
 8010440:	42a3      	cmp	r3, r4
 8010442:	d908      	bls.n	8010456 <_free_r+0x42>
 8010444:	6820      	ldr	r0, [r4, #0]
 8010446:	1821      	adds	r1, r4, r0
 8010448:	428b      	cmp	r3, r1
 801044a:	bf01      	itttt	eq
 801044c:	6819      	ldreq	r1, [r3, #0]
 801044e:	685b      	ldreq	r3, [r3, #4]
 8010450:	1809      	addeq	r1, r1, r0
 8010452:	6021      	streq	r1, [r4, #0]
 8010454:	e7ed      	b.n	8010432 <_free_r+0x1e>
 8010456:	461a      	mov	r2, r3
 8010458:	685b      	ldr	r3, [r3, #4]
 801045a:	b10b      	cbz	r3, 8010460 <_free_r+0x4c>
 801045c:	42a3      	cmp	r3, r4
 801045e:	d9fa      	bls.n	8010456 <_free_r+0x42>
 8010460:	6811      	ldr	r1, [r2, #0]
 8010462:	1850      	adds	r0, r2, r1
 8010464:	42a0      	cmp	r0, r4
 8010466:	d10b      	bne.n	8010480 <_free_r+0x6c>
 8010468:	6820      	ldr	r0, [r4, #0]
 801046a:	4401      	add	r1, r0
 801046c:	1850      	adds	r0, r2, r1
 801046e:	4283      	cmp	r3, r0
 8010470:	6011      	str	r1, [r2, #0]
 8010472:	d1e0      	bne.n	8010436 <_free_r+0x22>
 8010474:	6818      	ldr	r0, [r3, #0]
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	6053      	str	r3, [r2, #4]
 801047a:	4408      	add	r0, r1
 801047c:	6010      	str	r0, [r2, #0]
 801047e:	e7da      	b.n	8010436 <_free_r+0x22>
 8010480:	d902      	bls.n	8010488 <_free_r+0x74>
 8010482:	230c      	movs	r3, #12
 8010484:	602b      	str	r3, [r5, #0]
 8010486:	e7d6      	b.n	8010436 <_free_r+0x22>
 8010488:	6820      	ldr	r0, [r4, #0]
 801048a:	1821      	adds	r1, r4, r0
 801048c:	428b      	cmp	r3, r1
 801048e:	bf04      	itt	eq
 8010490:	6819      	ldreq	r1, [r3, #0]
 8010492:	685b      	ldreq	r3, [r3, #4]
 8010494:	6063      	str	r3, [r4, #4]
 8010496:	bf04      	itt	eq
 8010498:	1809      	addeq	r1, r1, r0
 801049a:	6021      	streq	r1, [r4, #0]
 801049c:	6054      	str	r4, [r2, #4]
 801049e:	e7ca      	b.n	8010436 <_free_r+0x22>
 80104a0:	bd38      	pop	{r3, r4, r5, pc}
 80104a2:	bf00      	nop
 80104a4:	20001664 	.word	0x20001664

080104a8 <__ssputs_r>:
 80104a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104ac:	688e      	ldr	r6, [r1, #8]
 80104ae:	461f      	mov	r7, r3
 80104b0:	42be      	cmp	r6, r7
 80104b2:	680b      	ldr	r3, [r1, #0]
 80104b4:	4682      	mov	sl, r0
 80104b6:	460c      	mov	r4, r1
 80104b8:	4690      	mov	r8, r2
 80104ba:	d82d      	bhi.n	8010518 <__ssputs_r+0x70>
 80104bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80104c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80104c4:	d026      	beq.n	8010514 <__ssputs_r+0x6c>
 80104c6:	6965      	ldr	r5, [r4, #20]
 80104c8:	6909      	ldr	r1, [r1, #16]
 80104ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104ce:	eba3 0901 	sub.w	r9, r3, r1
 80104d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80104d6:	1c7b      	adds	r3, r7, #1
 80104d8:	444b      	add	r3, r9
 80104da:	106d      	asrs	r5, r5, #1
 80104dc:	429d      	cmp	r5, r3
 80104de:	bf38      	it	cc
 80104e0:	461d      	movcc	r5, r3
 80104e2:	0553      	lsls	r3, r2, #21
 80104e4:	d527      	bpl.n	8010536 <__ssputs_r+0x8e>
 80104e6:	4629      	mov	r1, r5
 80104e8:	f7ff fe46 	bl	8010178 <_malloc_r>
 80104ec:	4606      	mov	r6, r0
 80104ee:	b360      	cbz	r0, 801054a <__ssputs_r+0xa2>
 80104f0:	6921      	ldr	r1, [r4, #16]
 80104f2:	464a      	mov	r2, r9
 80104f4:	f000 fad8 	bl	8010aa8 <memcpy>
 80104f8:	89a3      	ldrh	r3, [r4, #12]
 80104fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80104fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010502:	81a3      	strh	r3, [r4, #12]
 8010504:	6126      	str	r6, [r4, #16]
 8010506:	6165      	str	r5, [r4, #20]
 8010508:	444e      	add	r6, r9
 801050a:	eba5 0509 	sub.w	r5, r5, r9
 801050e:	6026      	str	r6, [r4, #0]
 8010510:	60a5      	str	r5, [r4, #8]
 8010512:	463e      	mov	r6, r7
 8010514:	42be      	cmp	r6, r7
 8010516:	d900      	bls.n	801051a <__ssputs_r+0x72>
 8010518:	463e      	mov	r6, r7
 801051a:	6820      	ldr	r0, [r4, #0]
 801051c:	4632      	mov	r2, r6
 801051e:	4641      	mov	r1, r8
 8010520:	f000 faa8 	bl	8010a74 <memmove>
 8010524:	68a3      	ldr	r3, [r4, #8]
 8010526:	1b9b      	subs	r3, r3, r6
 8010528:	60a3      	str	r3, [r4, #8]
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	4433      	add	r3, r6
 801052e:	6023      	str	r3, [r4, #0]
 8010530:	2000      	movs	r0, #0
 8010532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010536:	462a      	mov	r2, r5
 8010538:	f000 fac4 	bl	8010ac4 <_realloc_r>
 801053c:	4606      	mov	r6, r0
 801053e:	2800      	cmp	r0, #0
 8010540:	d1e0      	bne.n	8010504 <__ssputs_r+0x5c>
 8010542:	6921      	ldr	r1, [r4, #16]
 8010544:	4650      	mov	r0, sl
 8010546:	f7ff ff65 	bl	8010414 <_free_r>
 801054a:	230c      	movs	r3, #12
 801054c:	f8ca 3000 	str.w	r3, [sl]
 8010550:	89a3      	ldrh	r3, [r4, #12]
 8010552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010556:	81a3      	strh	r3, [r4, #12]
 8010558:	f04f 30ff 	mov.w	r0, #4294967295
 801055c:	e7e9      	b.n	8010532 <__ssputs_r+0x8a>
	...

08010560 <_svfiprintf_r>:
 8010560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010564:	4698      	mov	r8, r3
 8010566:	898b      	ldrh	r3, [r1, #12]
 8010568:	061b      	lsls	r3, r3, #24
 801056a:	b09d      	sub	sp, #116	@ 0x74
 801056c:	4607      	mov	r7, r0
 801056e:	460d      	mov	r5, r1
 8010570:	4614      	mov	r4, r2
 8010572:	d510      	bpl.n	8010596 <_svfiprintf_r+0x36>
 8010574:	690b      	ldr	r3, [r1, #16]
 8010576:	b973      	cbnz	r3, 8010596 <_svfiprintf_r+0x36>
 8010578:	2140      	movs	r1, #64	@ 0x40
 801057a:	f7ff fdfd 	bl	8010178 <_malloc_r>
 801057e:	6028      	str	r0, [r5, #0]
 8010580:	6128      	str	r0, [r5, #16]
 8010582:	b930      	cbnz	r0, 8010592 <_svfiprintf_r+0x32>
 8010584:	230c      	movs	r3, #12
 8010586:	603b      	str	r3, [r7, #0]
 8010588:	f04f 30ff 	mov.w	r0, #4294967295
 801058c:	b01d      	add	sp, #116	@ 0x74
 801058e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010592:	2340      	movs	r3, #64	@ 0x40
 8010594:	616b      	str	r3, [r5, #20]
 8010596:	2300      	movs	r3, #0
 8010598:	9309      	str	r3, [sp, #36]	@ 0x24
 801059a:	2320      	movs	r3, #32
 801059c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80105a4:	2330      	movs	r3, #48	@ 0x30
 80105a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010744 <_svfiprintf_r+0x1e4>
 80105aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105ae:	f04f 0901 	mov.w	r9, #1
 80105b2:	4623      	mov	r3, r4
 80105b4:	469a      	mov	sl, r3
 80105b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105ba:	b10a      	cbz	r2, 80105c0 <_svfiprintf_r+0x60>
 80105bc:	2a25      	cmp	r2, #37	@ 0x25
 80105be:	d1f9      	bne.n	80105b4 <_svfiprintf_r+0x54>
 80105c0:	ebba 0b04 	subs.w	fp, sl, r4
 80105c4:	d00b      	beq.n	80105de <_svfiprintf_r+0x7e>
 80105c6:	465b      	mov	r3, fp
 80105c8:	4622      	mov	r2, r4
 80105ca:	4629      	mov	r1, r5
 80105cc:	4638      	mov	r0, r7
 80105ce:	f7ff ff6b 	bl	80104a8 <__ssputs_r>
 80105d2:	3001      	adds	r0, #1
 80105d4:	f000 80a7 	beq.w	8010726 <_svfiprintf_r+0x1c6>
 80105d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105da:	445a      	add	r2, fp
 80105dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80105de:	f89a 3000 	ldrb.w	r3, [sl]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f000 809f 	beq.w	8010726 <_svfiprintf_r+0x1c6>
 80105e8:	2300      	movs	r3, #0
 80105ea:	f04f 32ff 	mov.w	r2, #4294967295
 80105ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105f2:	f10a 0a01 	add.w	sl, sl, #1
 80105f6:	9304      	str	r3, [sp, #16]
 80105f8:	9307      	str	r3, [sp, #28]
 80105fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80105fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8010600:	4654      	mov	r4, sl
 8010602:	2205      	movs	r2, #5
 8010604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010608:	484e      	ldr	r0, [pc, #312]	@ (8010744 <_svfiprintf_r+0x1e4>)
 801060a:	f7ef fe01 	bl	8000210 <memchr>
 801060e:	9a04      	ldr	r2, [sp, #16]
 8010610:	b9d8      	cbnz	r0, 801064a <_svfiprintf_r+0xea>
 8010612:	06d0      	lsls	r0, r2, #27
 8010614:	bf44      	itt	mi
 8010616:	2320      	movmi	r3, #32
 8010618:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801061c:	0711      	lsls	r1, r2, #28
 801061e:	bf44      	itt	mi
 8010620:	232b      	movmi	r3, #43	@ 0x2b
 8010622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010626:	f89a 3000 	ldrb.w	r3, [sl]
 801062a:	2b2a      	cmp	r3, #42	@ 0x2a
 801062c:	d015      	beq.n	801065a <_svfiprintf_r+0xfa>
 801062e:	9a07      	ldr	r2, [sp, #28]
 8010630:	4654      	mov	r4, sl
 8010632:	2000      	movs	r0, #0
 8010634:	f04f 0c0a 	mov.w	ip, #10
 8010638:	4621      	mov	r1, r4
 801063a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801063e:	3b30      	subs	r3, #48	@ 0x30
 8010640:	2b09      	cmp	r3, #9
 8010642:	d94b      	bls.n	80106dc <_svfiprintf_r+0x17c>
 8010644:	b1b0      	cbz	r0, 8010674 <_svfiprintf_r+0x114>
 8010646:	9207      	str	r2, [sp, #28]
 8010648:	e014      	b.n	8010674 <_svfiprintf_r+0x114>
 801064a:	eba0 0308 	sub.w	r3, r0, r8
 801064e:	fa09 f303 	lsl.w	r3, r9, r3
 8010652:	4313      	orrs	r3, r2
 8010654:	9304      	str	r3, [sp, #16]
 8010656:	46a2      	mov	sl, r4
 8010658:	e7d2      	b.n	8010600 <_svfiprintf_r+0xa0>
 801065a:	9b03      	ldr	r3, [sp, #12]
 801065c:	1d19      	adds	r1, r3, #4
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	9103      	str	r1, [sp, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	bfbb      	ittet	lt
 8010666:	425b      	neglt	r3, r3
 8010668:	f042 0202 	orrlt.w	r2, r2, #2
 801066c:	9307      	strge	r3, [sp, #28]
 801066e:	9307      	strlt	r3, [sp, #28]
 8010670:	bfb8      	it	lt
 8010672:	9204      	strlt	r2, [sp, #16]
 8010674:	7823      	ldrb	r3, [r4, #0]
 8010676:	2b2e      	cmp	r3, #46	@ 0x2e
 8010678:	d10a      	bne.n	8010690 <_svfiprintf_r+0x130>
 801067a:	7863      	ldrb	r3, [r4, #1]
 801067c:	2b2a      	cmp	r3, #42	@ 0x2a
 801067e:	d132      	bne.n	80106e6 <_svfiprintf_r+0x186>
 8010680:	9b03      	ldr	r3, [sp, #12]
 8010682:	1d1a      	adds	r2, r3, #4
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	9203      	str	r2, [sp, #12]
 8010688:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801068c:	3402      	adds	r4, #2
 801068e:	9305      	str	r3, [sp, #20]
 8010690:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010754 <_svfiprintf_r+0x1f4>
 8010694:	7821      	ldrb	r1, [r4, #0]
 8010696:	2203      	movs	r2, #3
 8010698:	4650      	mov	r0, sl
 801069a:	f7ef fdb9 	bl	8000210 <memchr>
 801069e:	b138      	cbz	r0, 80106b0 <_svfiprintf_r+0x150>
 80106a0:	9b04      	ldr	r3, [sp, #16]
 80106a2:	eba0 000a 	sub.w	r0, r0, sl
 80106a6:	2240      	movs	r2, #64	@ 0x40
 80106a8:	4082      	lsls	r2, r0
 80106aa:	4313      	orrs	r3, r2
 80106ac:	3401      	adds	r4, #1
 80106ae:	9304      	str	r3, [sp, #16]
 80106b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106b4:	4824      	ldr	r0, [pc, #144]	@ (8010748 <_svfiprintf_r+0x1e8>)
 80106b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106ba:	2206      	movs	r2, #6
 80106bc:	f7ef fda8 	bl	8000210 <memchr>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d036      	beq.n	8010732 <_svfiprintf_r+0x1d2>
 80106c4:	4b21      	ldr	r3, [pc, #132]	@ (801074c <_svfiprintf_r+0x1ec>)
 80106c6:	bb1b      	cbnz	r3, 8010710 <_svfiprintf_r+0x1b0>
 80106c8:	9b03      	ldr	r3, [sp, #12]
 80106ca:	3307      	adds	r3, #7
 80106cc:	f023 0307 	bic.w	r3, r3, #7
 80106d0:	3308      	adds	r3, #8
 80106d2:	9303      	str	r3, [sp, #12]
 80106d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106d6:	4433      	add	r3, r6
 80106d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80106da:	e76a      	b.n	80105b2 <_svfiprintf_r+0x52>
 80106dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80106e0:	460c      	mov	r4, r1
 80106e2:	2001      	movs	r0, #1
 80106e4:	e7a8      	b.n	8010638 <_svfiprintf_r+0xd8>
 80106e6:	2300      	movs	r3, #0
 80106e8:	3401      	adds	r4, #1
 80106ea:	9305      	str	r3, [sp, #20]
 80106ec:	4619      	mov	r1, r3
 80106ee:	f04f 0c0a 	mov.w	ip, #10
 80106f2:	4620      	mov	r0, r4
 80106f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106f8:	3a30      	subs	r2, #48	@ 0x30
 80106fa:	2a09      	cmp	r2, #9
 80106fc:	d903      	bls.n	8010706 <_svfiprintf_r+0x1a6>
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d0c6      	beq.n	8010690 <_svfiprintf_r+0x130>
 8010702:	9105      	str	r1, [sp, #20]
 8010704:	e7c4      	b.n	8010690 <_svfiprintf_r+0x130>
 8010706:	fb0c 2101 	mla	r1, ip, r1, r2
 801070a:	4604      	mov	r4, r0
 801070c:	2301      	movs	r3, #1
 801070e:	e7f0      	b.n	80106f2 <_svfiprintf_r+0x192>
 8010710:	ab03      	add	r3, sp, #12
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	462a      	mov	r2, r5
 8010716:	4b0e      	ldr	r3, [pc, #56]	@ (8010750 <_svfiprintf_r+0x1f0>)
 8010718:	a904      	add	r1, sp, #16
 801071a:	4638      	mov	r0, r7
 801071c:	f3af 8000 	nop.w
 8010720:	1c42      	adds	r2, r0, #1
 8010722:	4606      	mov	r6, r0
 8010724:	d1d6      	bne.n	80106d4 <_svfiprintf_r+0x174>
 8010726:	89ab      	ldrh	r3, [r5, #12]
 8010728:	065b      	lsls	r3, r3, #25
 801072a:	f53f af2d 	bmi.w	8010588 <_svfiprintf_r+0x28>
 801072e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010730:	e72c      	b.n	801058c <_svfiprintf_r+0x2c>
 8010732:	ab03      	add	r3, sp, #12
 8010734:	9300      	str	r3, [sp, #0]
 8010736:	462a      	mov	r2, r5
 8010738:	4b05      	ldr	r3, [pc, #20]	@ (8010750 <_svfiprintf_r+0x1f0>)
 801073a:	a904      	add	r1, sp, #16
 801073c:	4638      	mov	r0, r7
 801073e:	f000 f879 	bl	8010834 <_printf_i>
 8010742:	e7ed      	b.n	8010720 <_svfiprintf_r+0x1c0>
 8010744:	08010ea4 	.word	0x08010ea4
 8010748:	08010eae 	.word	0x08010eae
 801074c:	00000000 	.word	0x00000000
 8010750:	080104a9 	.word	0x080104a9
 8010754:	08010eaa 	.word	0x08010eaa

08010758 <_printf_common>:
 8010758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801075c:	4616      	mov	r6, r2
 801075e:	4698      	mov	r8, r3
 8010760:	688a      	ldr	r2, [r1, #8]
 8010762:	690b      	ldr	r3, [r1, #16]
 8010764:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010768:	4293      	cmp	r3, r2
 801076a:	bfb8      	it	lt
 801076c:	4613      	movlt	r3, r2
 801076e:	6033      	str	r3, [r6, #0]
 8010770:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010774:	4607      	mov	r7, r0
 8010776:	460c      	mov	r4, r1
 8010778:	b10a      	cbz	r2, 801077e <_printf_common+0x26>
 801077a:	3301      	adds	r3, #1
 801077c:	6033      	str	r3, [r6, #0]
 801077e:	6823      	ldr	r3, [r4, #0]
 8010780:	0699      	lsls	r1, r3, #26
 8010782:	bf42      	ittt	mi
 8010784:	6833      	ldrmi	r3, [r6, #0]
 8010786:	3302      	addmi	r3, #2
 8010788:	6033      	strmi	r3, [r6, #0]
 801078a:	6825      	ldr	r5, [r4, #0]
 801078c:	f015 0506 	ands.w	r5, r5, #6
 8010790:	d106      	bne.n	80107a0 <_printf_common+0x48>
 8010792:	f104 0a19 	add.w	sl, r4, #25
 8010796:	68e3      	ldr	r3, [r4, #12]
 8010798:	6832      	ldr	r2, [r6, #0]
 801079a:	1a9b      	subs	r3, r3, r2
 801079c:	42ab      	cmp	r3, r5
 801079e:	dc26      	bgt.n	80107ee <_printf_common+0x96>
 80107a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80107a4:	6822      	ldr	r2, [r4, #0]
 80107a6:	3b00      	subs	r3, #0
 80107a8:	bf18      	it	ne
 80107aa:	2301      	movne	r3, #1
 80107ac:	0692      	lsls	r2, r2, #26
 80107ae:	d42b      	bmi.n	8010808 <_printf_common+0xb0>
 80107b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80107b4:	4641      	mov	r1, r8
 80107b6:	4638      	mov	r0, r7
 80107b8:	47c8      	blx	r9
 80107ba:	3001      	adds	r0, #1
 80107bc:	d01e      	beq.n	80107fc <_printf_common+0xa4>
 80107be:	6823      	ldr	r3, [r4, #0]
 80107c0:	6922      	ldr	r2, [r4, #16]
 80107c2:	f003 0306 	and.w	r3, r3, #6
 80107c6:	2b04      	cmp	r3, #4
 80107c8:	bf02      	ittt	eq
 80107ca:	68e5      	ldreq	r5, [r4, #12]
 80107cc:	6833      	ldreq	r3, [r6, #0]
 80107ce:	1aed      	subeq	r5, r5, r3
 80107d0:	68a3      	ldr	r3, [r4, #8]
 80107d2:	bf0c      	ite	eq
 80107d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80107d8:	2500      	movne	r5, #0
 80107da:	4293      	cmp	r3, r2
 80107dc:	bfc4      	itt	gt
 80107de:	1a9b      	subgt	r3, r3, r2
 80107e0:	18ed      	addgt	r5, r5, r3
 80107e2:	2600      	movs	r6, #0
 80107e4:	341a      	adds	r4, #26
 80107e6:	42b5      	cmp	r5, r6
 80107e8:	d11a      	bne.n	8010820 <_printf_common+0xc8>
 80107ea:	2000      	movs	r0, #0
 80107ec:	e008      	b.n	8010800 <_printf_common+0xa8>
 80107ee:	2301      	movs	r3, #1
 80107f0:	4652      	mov	r2, sl
 80107f2:	4641      	mov	r1, r8
 80107f4:	4638      	mov	r0, r7
 80107f6:	47c8      	blx	r9
 80107f8:	3001      	adds	r0, #1
 80107fa:	d103      	bne.n	8010804 <_printf_common+0xac>
 80107fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010804:	3501      	adds	r5, #1
 8010806:	e7c6      	b.n	8010796 <_printf_common+0x3e>
 8010808:	18e1      	adds	r1, r4, r3
 801080a:	1c5a      	adds	r2, r3, #1
 801080c:	2030      	movs	r0, #48	@ 0x30
 801080e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010812:	4422      	add	r2, r4
 8010814:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010818:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801081c:	3302      	adds	r3, #2
 801081e:	e7c7      	b.n	80107b0 <_printf_common+0x58>
 8010820:	2301      	movs	r3, #1
 8010822:	4622      	mov	r2, r4
 8010824:	4641      	mov	r1, r8
 8010826:	4638      	mov	r0, r7
 8010828:	47c8      	blx	r9
 801082a:	3001      	adds	r0, #1
 801082c:	d0e6      	beq.n	80107fc <_printf_common+0xa4>
 801082e:	3601      	adds	r6, #1
 8010830:	e7d9      	b.n	80107e6 <_printf_common+0x8e>
	...

08010834 <_printf_i>:
 8010834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010838:	7e0f      	ldrb	r7, [r1, #24]
 801083a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801083c:	2f78      	cmp	r7, #120	@ 0x78
 801083e:	4691      	mov	r9, r2
 8010840:	4680      	mov	r8, r0
 8010842:	460c      	mov	r4, r1
 8010844:	469a      	mov	sl, r3
 8010846:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801084a:	d807      	bhi.n	801085c <_printf_i+0x28>
 801084c:	2f62      	cmp	r7, #98	@ 0x62
 801084e:	d80a      	bhi.n	8010866 <_printf_i+0x32>
 8010850:	2f00      	cmp	r7, #0
 8010852:	f000 80d2 	beq.w	80109fa <_printf_i+0x1c6>
 8010856:	2f58      	cmp	r7, #88	@ 0x58
 8010858:	f000 80b9 	beq.w	80109ce <_printf_i+0x19a>
 801085c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010860:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010864:	e03a      	b.n	80108dc <_printf_i+0xa8>
 8010866:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801086a:	2b15      	cmp	r3, #21
 801086c:	d8f6      	bhi.n	801085c <_printf_i+0x28>
 801086e:	a101      	add	r1, pc, #4	@ (adr r1, 8010874 <_printf_i+0x40>)
 8010870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010874:	080108cd 	.word	0x080108cd
 8010878:	080108e1 	.word	0x080108e1
 801087c:	0801085d 	.word	0x0801085d
 8010880:	0801085d 	.word	0x0801085d
 8010884:	0801085d 	.word	0x0801085d
 8010888:	0801085d 	.word	0x0801085d
 801088c:	080108e1 	.word	0x080108e1
 8010890:	0801085d 	.word	0x0801085d
 8010894:	0801085d 	.word	0x0801085d
 8010898:	0801085d 	.word	0x0801085d
 801089c:	0801085d 	.word	0x0801085d
 80108a0:	080109e1 	.word	0x080109e1
 80108a4:	0801090b 	.word	0x0801090b
 80108a8:	0801099b 	.word	0x0801099b
 80108ac:	0801085d 	.word	0x0801085d
 80108b0:	0801085d 	.word	0x0801085d
 80108b4:	08010a03 	.word	0x08010a03
 80108b8:	0801085d 	.word	0x0801085d
 80108bc:	0801090b 	.word	0x0801090b
 80108c0:	0801085d 	.word	0x0801085d
 80108c4:	0801085d 	.word	0x0801085d
 80108c8:	080109a3 	.word	0x080109a3
 80108cc:	6833      	ldr	r3, [r6, #0]
 80108ce:	1d1a      	adds	r2, r3, #4
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	6032      	str	r2, [r6, #0]
 80108d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80108dc:	2301      	movs	r3, #1
 80108de:	e09d      	b.n	8010a1c <_printf_i+0x1e8>
 80108e0:	6833      	ldr	r3, [r6, #0]
 80108e2:	6820      	ldr	r0, [r4, #0]
 80108e4:	1d19      	adds	r1, r3, #4
 80108e6:	6031      	str	r1, [r6, #0]
 80108e8:	0606      	lsls	r6, r0, #24
 80108ea:	d501      	bpl.n	80108f0 <_printf_i+0xbc>
 80108ec:	681d      	ldr	r5, [r3, #0]
 80108ee:	e003      	b.n	80108f8 <_printf_i+0xc4>
 80108f0:	0645      	lsls	r5, r0, #25
 80108f2:	d5fb      	bpl.n	80108ec <_printf_i+0xb8>
 80108f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80108f8:	2d00      	cmp	r5, #0
 80108fa:	da03      	bge.n	8010904 <_printf_i+0xd0>
 80108fc:	232d      	movs	r3, #45	@ 0x2d
 80108fe:	426d      	negs	r5, r5
 8010900:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010904:	4859      	ldr	r0, [pc, #356]	@ (8010a6c <_printf_i+0x238>)
 8010906:	230a      	movs	r3, #10
 8010908:	e011      	b.n	801092e <_printf_i+0xfa>
 801090a:	6821      	ldr	r1, [r4, #0]
 801090c:	6833      	ldr	r3, [r6, #0]
 801090e:	0608      	lsls	r0, r1, #24
 8010910:	f853 5b04 	ldr.w	r5, [r3], #4
 8010914:	d402      	bmi.n	801091c <_printf_i+0xe8>
 8010916:	0649      	lsls	r1, r1, #25
 8010918:	bf48      	it	mi
 801091a:	b2ad      	uxthmi	r5, r5
 801091c:	2f6f      	cmp	r7, #111	@ 0x6f
 801091e:	4853      	ldr	r0, [pc, #332]	@ (8010a6c <_printf_i+0x238>)
 8010920:	6033      	str	r3, [r6, #0]
 8010922:	bf14      	ite	ne
 8010924:	230a      	movne	r3, #10
 8010926:	2308      	moveq	r3, #8
 8010928:	2100      	movs	r1, #0
 801092a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801092e:	6866      	ldr	r6, [r4, #4]
 8010930:	60a6      	str	r6, [r4, #8]
 8010932:	2e00      	cmp	r6, #0
 8010934:	bfa2      	ittt	ge
 8010936:	6821      	ldrge	r1, [r4, #0]
 8010938:	f021 0104 	bicge.w	r1, r1, #4
 801093c:	6021      	strge	r1, [r4, #0]
 801093e:	b90d      	cbnz	r5, 8010944 <_printf_i+0x110>
 8010940:	2e00      	cmp	r6, #0
 8010942:	d04b      	beq.n	80109dc <_printf_i+0x1a8>
 8010944:	4616      	mov	r6, r2
 8010946:	fbb5 f1f3 	udiv	r1, r5, r3
 801094a:	fb03 5711 	mls	r7, r3, r1, r5
 801094e:	5dc7      	ldrb	r7, [r0, r7]
 8010950:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010954:	462f      	mov	r7, r5
 8010956:	42bb      	cmp	r3, r7
 8010958:	460d      	mov	r5, r1
 801095a:	d9f4      	bls.n	8010946 <_printf_i+0x112>
 801095c:	2b08      	cmp	r3, #8
 801095e:	d10b      	bne.n	8010978 <_printf_i+0x144>
 8010960:	6823      	ldr	r3, [r4, #0]
 8010962:	07df      	lsls	r7, r3, #31
 8010964:	d508      	bpl.n	8010978 <_printf_i+0x144>
 8010966:	6923      	ldr	r3, [r4, #16]
 8010968:	6861      	ldr	r1, [r4, #4]
 801096a:	4299      	cmp	r1, r3
 801096c:	bfde      	ittt	le
 801096e:	2330      	movle	r3, #48	@ 0x30
 8010970:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010974:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010978:	1b92      	subs	r2, r2, r6
 801097a:	6122      	str	r2, [r4, #16]
 801097c:	f8cd a000 	str.w	sl, [sp]
 8010980:	464b      	mov	r3, r9
 8010982:	aa03      	add	r2, sp, #12
 8010984:	4621      	mov	r1, r4
 8010986:	4640      	mov	r0, r8
 8010988:	f7ff fee6 	bl	8010758 <_printf_common>
 801098c:	3001      	adds	r0, #1
 801098e:	d14a      	bne.n	8010a26 <_printf_i+0x1f2>
 8010990:	f04f 30ff 	mov.w	r0, #4294967295
 8010994:	b004      	add	sp, #16
 8010996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801099a:	6823      	ldr	r3, [r4, #0]
 801099c:	f043 0320 	orr.w	r3, r3, #32
 80109a0:	6023      	str	r3, [r4, #0]
 80109a2:	4833      	ldr	r0, [pc, #204]	@ (8010a70 <_printf_i+0x23c>)
 80109a4:	2778      	movs	r7, #120	@ 0x78
 80109a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80109aa:	6823      	ldr	r3, [r4, #0]
 80109ac:	6831      	ldr	r1, [r6, #0]
 80109ae:	061f      	lsls	r7, r3, #24
 80109b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80109b4:	d402      	bmi.n	80109bc <_printf_i+0x188>
 80109b6:	065f      	lsls	r7, r3, #25
 80109b8:	bf48      	it	mi
 80109ba:	b2ad      	uxthmi	r5, r5
 80109bc:	6031      	str	r1, [r6, #0]
 80109be:	07d9      	lsls	r1, r3, #31
 80109c0:	bf44      	itt	mi
 80109c2:	f043 0320 	orrmi.w	r3, r3, #32
 80109c6:	6023      	strmi	r3, [r4, #0]
 80109c8:	b11d      	cbz	r5, 80109d2 <_printf_i+0x19e>
 80109ca:	2310      	movs	r3, #16
 80109cc:	e7ac      	b.n	8010928 <_printf_i+0xf4>
 80109ce:	4827      	ldr	r0, [pc, #156]	@ (8010a6c <_printf_i+0x238>)
 80109d0:	e7e9      	b.n	80109a6 <_printf_i+0x172>
 80109d2:	6823      	ldr	r3, [r4, #0]
 80109d4:	f023 0320 	bic.w	r3, r3, #32
 80109d8:	6023      	str	r3, [r4, #0]
 80109da:	e7f6      	b.n	80109ca <_printf_i+0x196>
 80109dc:	4616      	mov	r6, r2
 80109de:	e7bd      	b.n	801095c <_printf_i+0x128>
 80109e0:	6833      	ldr	r3, [r6, #0]
 80109e2:	6825      	ldr	r5, [r4, #0]
 80109e4:	6961      	ldr	r1, [r4, #20]
 80109e6:	1d18      	adds	r0, r3, #4
 80109e8:	6030      	str	r0, [r6, #0]
 80109ea:	062e      	lsls	r6, r5, #24
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	d501      	bpl.n	80109f4 <_printf_i+0x1c0>
 80109f0:	6019      	str	r1, [r3, #0]
 80109f2:	e002      	b.n	80109fa <_printf_i+0x1c6>
 80109f4:	0668      	lsls	r0, r5, #25
 80109f6:	d5fb      	bpl.n	80109f0 <_printf_i+0x1bc>
 80109f8:	8019      	strh	r1, [r3, #0]
 80109fa:	2300      	movs	r3, #0
 80109fc:	6123      	str	r3, [r4, #16]
 80109fe:	4616      	mov	r6, r2
 8010a00:	e7bc      	b.n	801097c <_printf_i+0x148>
 8010a02:	6833      	ldr	r3, [r6, #0]
 8010a04:	1d1a      	adds	r2, r3, #4
 8010a06:	6032      	str	r2, [r6, #0]
 8010a08:	681e      	ldr	r6, [r3, #0]
 8010a0a:	6862      	ldr	r2, [r4, #4]
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	4630      	mov	r0, r6
 8010a10:	f7ef fbfe 	bl	8000210 <memchr>
 8010a14:	b108      	cbz	r0, 8010a1a <_printf_i+0x1e6>
 8010a16:	1b80      	subs	r0, r0, r6
 8010a18:	6060      	str	r0, [r4, #4]
 8010a1a:	6863      	ldr	r3, [r4, #4]
 8010a1c:	6123      	str	r3, [r4, #16]
 8010a1e:	2300      	movs	r3, #0
 8010a20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a24:	e7aa      	b.n	801097c <_printf_i+0x148>
 8010a26:	6923      	ldr	r3, [r4, #16]
 8010a28:	4632      	mov	r2, r6
 8010a2a:	4649      	mov	r1, r9
 8010a2c:	4640      	mov	r0, r8
 8010a2e:	47d0      	blx	sl
 8010a30:	3001      	adds	r0, #1
 8010a32:	d0ad      	beq.n	8010990 <_printf_i+0x15c>
 8010a34:	6823      	ldr	r3, [r4, #0]
 8010a36:	079b      	lsls	r3, r3, #30
 8010a38:	d413      	bmi.n	8010a62 <_printf_i+0x22e>
 8010a3a:	68e0      	ldr	r0, [r4, #12]
 8010a3c:	9b03      	ldr	r3, [sp, #12]
 8010a3e:	4298      	cmp	r0, r3
 8010a40:	bfb8      	it	lt
 8010a42:	4618      	movlt	r0, r3
 8010a44:	e7a6      	b.n	8010994 <_printf_i+0x160>
 8010a46:	2301      	movs	r3, #1
 8010a48:	4632      	mov	r2, r6
 8010a4a:	4649      	mov	r1, r9
 8010a4c:	4640      	mov	r0, r8
 8010a4e:	47d0      	blx	sl
 8010a50:	3001      	adds	r0, #1
 8010a52:	d09d      	beq.n	8010990 <_printf_i+0x15c>
 8010a54:	3501      	adds	r5, #1
 8010a56:	68e3      	ldr	r3, [r4, #12]
 8010a58:	9903      	ldr	r1, [sp, #12]
 8010a5a:	1a5b      	subs	r3, r3, r1
 8010a5c:	42ab      	cmp	r3, r5
 8010a5e:	dcf2      	bgt.n	8010a46 <_printf_i+0x212>
 8010a60:	e7eb      	b.n	8010a3a <_printf_i+0x206>
 8010a62:	2500      	movs	r5, #0
 8010a64:	f104 0619 	add.w	r6, r4, #25
 8010a68:	e7f5      	b.n	8010a56 <_printf_i+0x222>
 8010a6a:	bf00      	nop
 8010a6c:	08010eb5 	.word	0x08010eb5
 8010a70:	08010ec6 	.word	0x08010ec6

08010a74 <memmove>:
 8010a74:	4288      	cmp	r0, r1
 8010a76:	b510      	push	{r4, lr}
 8010a78:	eb01 0402 	add.w	r4, r1, r2
 8010a7c:	d902      	bls.n	8010a84 <memmove+0x10>
 8010a7e:	4284      	cmp	r4, r0
 8010a80:	4623      	mov	r3, r4
 8010a82:	d807      	bhi.n	8010a94 <memmove+0x20>
 8010a84:	1e43      	subs	r3, r0, #1
 8010a86:	42a1      	cmp	r1, r4
 8010a88:	d008      	beq.n	8010a9c <memmove+0x28>
 8010a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a92:	e7f8      	b.n	8010a86 <memmove+0x12>
 8010a94:	4402      	add	r2, r0
 8010a96:	4601      	mov	r1, r0
 8010a98:	428a      	cmp	r2, r1
 8010a9a:	d100      	bne.n	8010a9e <memmove+0x2a>
 8010a9c:	bd10      	pop	{r4, pc}
 8010a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010aa6:	e7f7      	b.n	8010a98 <memmove+0x24>

08010aa8 <memcpy>:
 8010aa8:	440a      	add	r2, r1
 8010aaa:	4291      	cmp	r1, r2
 8010aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ab0:	d100      	bne.n	8010ab4 <memcpy+0xc>
 8010ab2:	4770      	bx	lr
 8010ab4:	b510      	push	{r4, lr}
 8010ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010abe:	4291      	cmp	r1, r2
 8010ac0:	d1f9      	bne.n	8010ab6 <memcpy+0xe>
 8010ac2:	bd10      	pop	{r4, pc}

08010ac4 <_realloc_r>:
 8010ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ac8:	4680      	mov	r8, r0
 8010aca:	4615      	mov	r5, r2
 8010acc:	460c      	mov	r4, r1
 8010ace:	b921      	cbnz	r1, 8010ada <_realloc_r+0x16>
 8010ad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ad4:	4611      	mov	r1, r2
 8010ad6:	f7ff bb4f 	b.w	8010178 <_malloc_r>
 8010ada:	b92a      	cbnz	r2, 8010ae8 <_realloc_r+0x24>
 8010adc:	f7ff fc9a 	bl	8010414 <_free_r>
 8010ae0:	2400      	movs	r4, #0
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ae8:	f000 f81a 	bl	8010b20 <_malloc_usable_size_r>
 8010aec:	4285      	cmp	r5, r0
 8010aee:	4606      	mov	r6, r0
 8010af0:	d802      	bhi.n	8010af8 <_realloc_r+0x34>
 8010af2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010af6:	d8f4      	bhi.n	8010ae2 <_realloc_r+0x1e>
 8010af8:	4629      	mov	r1, r5
 8010afa:	4640      	mov	r0, r8
 8010afc:	f7ff fb3c 	bl	8010178 <_malloc_r>
 8010b00:	4607      	mov	r7, r0
 8010b02:	2800      	cmp	r0, #0
 8010b04:	d0ec      	beq.n	8010ae0 <_realloc_r+0x1c>
 8010b06:	42b5      	cmp	r5, r6
 8010b08:	462a      	mov	r2, r5
 8010b0a:	4621      	mov	r1, r4
 8010b0c:	bf28      	it	cs
 8010b0e:	4632      	movcs	r2, r6
 8010b10:	f7ff ffca 	bl	8010aa8 <memcpy>
 8010b14:	4621      	mov	r1, r4
 8010b16:	4640      	mov	r0, r8
 8010b18:	f7ff fc7c 	bl	8010414 <_free_r>
 8010b1c:	463c      	mov	r4, r7
 8010b1e:	e7e0      	b.n	8010ae2 <_realloc_r+0x1e>

08010b20 <_malloc_usable_size_r>:
 8010b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b24:	1f18      	subs	r0, r3, #4
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	bfbc      	itt	lt
 8010b2a:	580b      	ldrlt	r3, [r1, r0]
 8010b2c:	18c0      	addlt	r0, r0, r3
 8010b2e:	4770      	bx	lr

08010b30 <_init>:
 8010b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b32:	bf00      	nop
 8010b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b36:	bc08      	pop	{r3}
 8010b38:	469e      	mov	lr, r3
 8010b3a:	4770      	bx	lr

08010b3c <_fini>:
 8010b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b3e:	bf00      	nop
 8010b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b42:	bc08      	pop	{r3}
 8010b44:	469e      	mov	lr, r3
 8010b46:	4770      	bx	lr
